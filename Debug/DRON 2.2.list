
DRON 2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e410  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e28  0801e6e0  0801e6e0  000246e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020508  08020508  00026508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020510  08020510  00026510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08020514  08020514  00026514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08020518  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000078  08020590  00027078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  08020590  000278ac  2**0
                  ALLOC
  9 .IRAM         000041ce  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  00049730  2**0
                  CONTENTS
 11 .RAM1         00021880  24000eb0  24000eb0  00027eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00049730  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032091  00000000  00000000  0004975e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ef4  00000000  00000000  0007b7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002440  00000000  00000000  000816e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c16  00000000  00000000  00083b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c716  00000000  00000000  0008573e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003849b  00000000  00000000  000c1e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016ccc3  00000000  00000000  000fa2ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00266fb2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f14  00000000  00000000  00266ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00270f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e6c8 	.word	0x0801e6c8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801e6c8 	.word	0x0801e6c8

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:

static I2C_HandleTypeDef *hi2c_BMP180;
extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00e f854 	bl	800e768 <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <BMP180_init+0x38>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	BMP180_read_calliberation_data();
 80006de:	f000 f8dd 	bl	800089c <BMP180_read_calliberation_data>

	uint8_t status = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 80006e6:	f7ff ffdb 	bl	80006a0 <BMP180_read_ID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b55      	cmp	r3, #85	@ 0x55
 80006f2:	d002      	beq.n	80006fa <BMP180_init+0x2a>
		status = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <BMP180_init+0x2e>
	}
	else{
		status = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000094 	.word	0x24000094

0800070c <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <BMP180_READ_temp+0x3c>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	22f6      	movs	r2, #246	@ 0xf6
 8000726:	21ee      	movs	r1, #238	@ 0xee
 8000728:	f00e f81e 	bl	800e768 <HAL_I2C_Mem_Read>
	UT = ((data[0]<<8) | data[1]);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	797a      	ldrb	r2, [r7, #5]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <BMP180_READ_temp+0x40>)
 8000736:	6013      	str	r3, [r2, #0]
	return UT;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <BMP180_READ_temp+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000094 	.word	0x24000094
 800074c:	000000a8 	.word	0x000000a8

08000750 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_pres+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2303      	movs	r3, #3
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	22f6      	movs	r2, #246	@ 0xf6
 800076c:	21ee      	movs	r1, #238	@ 0xee
 800076e:	f00d fffb 	bl	800e768 <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4313      	orrs	r3, r2
 8000780:	115b      	asrs	r3, r3, #5
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000094 	.word	0x24000094

08000790 <BMP180_GET_temp_IT>:
void BMP180_READ_pres_IT(void){
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180_Press_IT, 3);
	BMP180_IRQ = 2;
}

uint16_t BMP180_GET_temp_IT(void){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	UT = ((BMP180_Temp_IT[0]<<8) | BMP180_Temp_IT[1]);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 800079c:	7852      	ldrb	r2, [r2, #1]
 800079e:	4313      	orrs	r3, r2
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a2:	6013      	str	r3, [r2, #0]
	return UT;
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	24000ecc 	.word	0x24000ecc
 80007b8:	000000a8 	.word	0x000000a8

080007bc <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return (((BMP180_Press_IT[0]<<16)|(BMP180_Press_IT[1]<<8)|BMP180_Press_IT[2]) >> 5);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	041a      	lsls	r2, r3, #16
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007d0:	7892      	ldrb	r2, [r2, #2]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	115b      	asrs	r3, r3, #5
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	24000ec8 	.word	0x24000ec8

080007e4 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80007ea:	232e      	movs	r3, #46	@ 0x2e
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <BMP180_start_measurment_temp+0x2c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2364      	movs	r3, #100	@ 0x64
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2301      	movs	r3, #1
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	22f4      	movs	r2, #244	@ 0xf4
 8000802:	21ee      	movs	r1, #238	@ 0xee
 8000804:	f00d fe9c 	bl	800e540 <HAL_I2C_Mem_Write>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000094 	.word	0x24000094

08000814 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 800081a:	23f4      	movs	r3, #244	@ 0xf4
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <BMP180_start_measurment_pres+0x2c>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	22f4      	movs	r2, #244	@ 0xf4
 8000832:	21ee      	movs	r1, #238	@ 0xee
 8000834:	f00d fe84 	bl	800e540 <HAL_I2C_Mem_Write>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000094 	.word	0x24000094

08000844 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 800084a:	23f4      	movs	r3, #244	@ 0xf4
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <BMP180_start_measurment_pres_IT+0x28>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	22f4      	movs	r2, #244	@ 0xf4
 800085e:	21ee      	movs	r1, #238	@ 0xee
 8000860:	f00e f89c 	bl	800e99c <HAL_I2C_Mem_Write_IT>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000094 	.word	0x24000094

08000870 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 8000876:	232e      	movs	r3, #46	@ 0x2e
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <BMP180_start_measurment_temp_IT+0x28>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	22f4      	movs	r2, #244	@ 0xf4
 800088a:	21ee      	movs	r1, #238	@ 0xee
 800088c:	f00e f886 	bl	800e99c <HAL_I2C_Mem_Write_IT>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000094 	.word	0x24000094

0800089c <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 80008b4:	23aa      	movs	r3, #170	@ 0xaa
 80008b6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 80008b8:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <BMP180_read_calliberation_data+0x10c>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	8afa      	ldrh	r2, [r7, #22]
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	2316      	movs	r3, #22
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	463b      	mov	r3, r7
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	21ee      	movs	r1, #238	@ 0xee
 80008ce:	f00d ff4b 	bl	800e768 <HAL_I2C_Mem_Read>

	AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80008d2:	783b      	ldrb	r3, [r7, #0]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <BMP180_read_calliberation_data+0x110>)
 80008e2:	801a      	strh	r2, [r3, #0]
	AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <BMP180_read_calliberation_data+0x114>)
 80008f4:	801a      	strh	r2, [r3, #0]
	AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 80008f6:	793b      	ldrb	r3, [r7, #4]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <BMP180_read_calliberation_data+0x118>)
 8000906:	801a      	strh	r2, [r3, #0]
	AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <BMP180_read_calliberation_data+0x11c>)
 800091a:	801a      	strh	r2, [r3, #0]
	AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	7a7b      	ldrb	r3, [r7, #9]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <BMP180_read_calliberation_data+0x120>)
 800092e:	801a      	strh	r2, [r3, #0]
	AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <BMP180_read_calliberation_data+0x124>)
 8000942:	801a      	strh	r2, [r3, #0]
	B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000944:	7b3b      	ldrb	r3, [r7, #12]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <BMP180_read_calliberation_data+0x128>)
 8000954:	801a      	strh	r2, [r3, #0]
	B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <BMP180_read_calliberation_data+0x12c>)
 8000966:	801a      	strh	r2, [r3, #0]
	MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000968:	7c3b      	ldrb	r3, [r7, #16]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7c7b      	ldrb	r3, [r7, #17]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21a      	sxth	r2, r3
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <BMP180_read_calliberation_data+0x130>)
 8000978:	801a      	strh	r2, [r3, #0]
	MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 800097a:	7cbb      	ldrb	r3, [r7, #18]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <BMP180_read_calliberation_data+0x134>)
 800098a:	801a      	strh	r2, [r3, #0]
	MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 800098c:	7d3b      	ldrb	r3, [r7, #20]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	7d7b      	ldrb	r3, [r7, #21]
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <BMP180_read_calliberation_data+0x138>)
 800099c:	801a      	strh	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000094 	.word	0x24000094
 80009ac:	00000082 	.word	0x00000082
 80009b0:	00000084 	.word	0x00000084
 80009b4:	00000086 	.word	0x00000086
 80009b8:	0000007c 	.word	0x0000007c
 80009bc:	0000007e 	.word	0x0000007e
 80009c0:	00000080 	.word	0x00000080
 80009c4:	00000088 	.word	0x00000088
 80009c8:	0000008a 	.word	0x0000008a
 80009cc:	0000008c 	.word	0x0000008c
 80009d0:	0000008e 	.word	0x0000008e
 80009d4:	00000090 	.word	0x00000090

080009d8 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]

	X1 = ((temperature - AC6) * AC5)/32768;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <BMP180_GET_temp+0x98>)
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <BMP180_GET_temp+0x9c>)
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da03      	bge.n	80009fe <BMP180_GET_temp+0x26>
 80009f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80009fa:	441a      	add	r2, r3
 80009fc:	4613      	mov	r3, r2
 80009fe:	13db      	asrs	r3, r3, #15
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a04:	601a      	str	r2, [r3, #0]
	X2 = (MC * 2048)/(X1 + MD);
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <BMP180_GET_temp+0xa4>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	02da      	lsls	r2, r3, #11
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <BMP180_GET_temp+0xa8>)
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a20:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a22:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a16      	ldr	r2, [pc, #88]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a30:	6013      	str	r3, [r2, #0]
	temp = (B5 + 8)/16;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3308      	adds	r3, #8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da00      	bge.n	8000a3e <BMP180_GET_temp+0x66>
 8000a3c:	330f      	adds	r3, #15
 8000a3e:	111b      	asrs	r3, r3, #4
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
	return temp/10.0;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	00000080 	.word	0x00000080
 8000a74:	0000007e 	.word	0x0000007e
 8000a78:	000000ac 	.word	0x000000ac
 8000a7c:	0000008e 	.word	0x0000008e
 8000a80:	00000090 	.word	0x00000090
 8000a84:	000000b0 	.word	0x000000b0
 8000a88:	000000b4 	.word	0x000000b4
 8000a8c:	000000c4 	.word	0x000000c4

08000a90 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]

	UP = BMP180_READ_pres();
 8000a9a:	f7ff fe59 	bl	8000750 <BMP180_READ_pres>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a9c      	ldr	r2, [pc, #624]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000aa2:	6013      	str	r3, [r2, #0]
	X1 = (((UT-AC6) * AC5)/32768);//
 8000aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8000d18 <BMP180_GET_pres+0x288>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8000d1c <BMP180_GET_pres+0x28c>)
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	4a9c      	ldr	r2, [pc, #624]	@ (8000d20 <BMP180_GET_pres+0x290>)
 8000ab0:	8812      	ldrh	r2, [r2, #0]
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da03      	bge.n	8000ac2 <BMP180_GET_pres+0x32>
 8000aba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000abe:	441a      	add	r2, r3
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	13db      	asrs	r3, r3, #15
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b97      	ldr	r3, [pc, #604]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ac8:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(2048)) / (X1+MD));
 8000aca:	4b97      	ldr	r3, [pc, #604]	@ (8000d28 <BMP180_GET_pres+0x298>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	02da      	lsls	r2, r3, #11
 8000ad2:	4b96      	ldr	r3, [pc, #600]	@ (8000d2c <BMP180_GET_pres+0x29c>)
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b92      	ldr	r3, [pc, #584]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	440b      	add	r3, r1
 8000ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ae4:	4a92      	ldr	r2, [pc, #584]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000ae6:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b90      	ldr	r3, [pc, #576]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a90      	ldr	r2, [pc, #576]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8000af6:	4b8f      	ldr	r3, [pc, #572]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000afe:	4a8e      	ldr	r2, [pc, #568]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b00:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(4096)))/(2048);
 8000b02:	4b8e      	ldr	r3, [pc, #568]	@ (8000d3c <BMP180_GET_pres+0x2ac>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da01      	bge.n	8000b1e <BMP180_GET_pres+0x8e>
 8000b1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	da01      	bge.n	8000b2c <BMP180_GET_pres+0x9c>
 8000b28:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b2c:	12db      	asrs	r3, r3, #11
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b7c      	ldr	r3, [pc, #496]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b32:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(2048);
 8000b34:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <BMP180_GET_pres+0x2b0>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da01      	bge.n	8000b4c <BMP180_GET_pres+0xbc>
 8000b48:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b4c:	12db      	asrs	r3, r3, #11
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b77      	ldr	r3, [pc, #476]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b52:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8000b54:	4b73      	ldr	r3, [pc, #460]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b75      	ldr	r3, [pc, #468]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a79      	ldr	r2, [pc, #484]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b60:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<3)+2)/4;
 8000b62:	4b79      	ldr	r3, [pc, #484]	@ (8000d48 <BMP180_GET_pres+0x2b8>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	4b76      	ldr	r3, [pc, #472]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	3302      	adds	r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da00      	bge.n	8000b7a <BMP180_GET_pres+0xea>
 8000b78:	3303      	adds	r3, #3
 8000b7a:	109b      	asrs	r3, r3, #2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b73      	ldr	r3, [pc, #460]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000b80:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/8192;
 8000b82:	4b73      	ldr	r3, [pc, #460]	@ (8000d50 <BMP180_GET_pres+0x2c0>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da03      	bge.n	8000b9e <BMP180_GET_pres+0x10e>
 8000b96:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	135b      	asrs	r3, r3, #13
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b60      	ldr	r3, [pc, #384]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ba4:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(4096)))/(65536);
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <BMP180_GET_pres+0x2c4>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4b62      	ldr	r3, [pc, #392]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a61      	ldr	r2, [pc, #388]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <BMP180_GET_pres+0x132>
 8000bbe:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000bc2:	131b      	asrs	r3, r3, #12
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <BMP180_GET_pres+0x144>
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	141b      	asrs	r3, r3, #16
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b55      	ldr	r3, [pc, #340]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000bda:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/4;
 8000bdc:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b53      	ldr	r3, [pc, #332]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da00      	bge.n	8000bee <BMP180_GET_pres+0x15e>
 8000bec:	3303      	adds	r3, #3
 8000bee:	109b      	asrs	r3, r3, #2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bf4:	601a      	str	r2, [r3, #0]
	B4 = AC4* (uint32_t)(X3+32768)/(32768);
 8000bf6:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <BMP180_GET_pres+0x2c8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	0bdb      	lsrs	r3, r3, #15
 8000c0a:	4a54      	ldr	r2, [pc, #336]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c0c:	6013      	str	r3, [r2, #0]
	B7 = ((uint32_t)UP-B3)*(50000>>3);
 8000c0e:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a4e      	ldr	r2, [pc, #312]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a4f      	ldr	r2, [pc, #316]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c22:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000){
 8000c24:	4b4e      	ldr	r3, [pc, #312]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0e      	blt.n	8000c4a <BMP180_GET_pres+0x1ba>
		pres = (B7*2)/B4;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	005a      	lsls	r2, r3, #1
 8000c32:	4b4a      	ldr	r3, [pc, #296]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c42:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c44:	edc3 7a00 	vstr	s15, [r3]
 8000c48:	e00d      	b.n	8000c66 <BMP180_GET_pres+0x1d6>
	}
	else{
		pres = (B7/B4)*2;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c60:	4b40      	ldr	r3, [pc, #256]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c62:	edc3 7a00 	vstr	s15, [r3]
	}
	X1 = (pres/(256))*(pres/(256));
 8000c66:	4b3f      	ldr	r3, [pc, #252]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c74:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c76:	edd3 6a00 	vldr	s13, [r3]
 8000c7a:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c90:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(65536);
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da03      	bge.n	8000caa <BMP180_GET_pres+0x21a>
 8000ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca6:	441a      	add	r2, r3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	141b      	asrs	r3, r3, #16
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cb0:	601a      	str	r2, [r3, #0]
	X2 = (-7357*pres)/(65536);
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000d6c <BMP180_GET_pres+0x2dc>
 8000cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000d70 <BMP180_GET_pres+0x2e0>
 8000cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 2a90 	vmov	r2, s15
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cd2:	601a      	str	r2, [r3, #0]
	pres = pres + (X1+X2+3791)/(16);
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da00      	bge.n	8000ce8 <BMP180_GET_pres+0x258>
 8000ce6:	330f      	adds	r3, #15
 8000ce8:	111b      	asrs	r3, r3, #4
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cfe:	edc3 7a00 	vstr	s15, [r3]
	return pres;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	ee07 3a90 	vmov	s15, r3
}
 8000d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	0000009c 	.word	0x0000009c
 8000d18:	000000a8 	.word	0x000000a8
 8000d1c:	00000080 	.word	0x00000080
 8000d20:	0000007e 	.word	0x0000007e
 8000d24:	000000ac 	.word	0x000000ac
 8000d28:	0000008e 	.word	0x0000008e
 8000d2c:	00000090 	.word	0x00000090
 8000d30:	000000b0 	.word	0x000000b0
 8000d34:	000000b4 	.word	0x000000b4
 8000d38:	000000b8 	.word	0x000000b8
 8000d3c:	0000008a 	.word	0x0000008a
 8000d40:	00000084 	.word	0x00000084
 8000d44:	000000c0 	.word	0x000000c0
 8000d48:	00000082 	.word	0x00000082
 8000d4c:	000000bc 	.word	0x000000bc
 8000d50:	00000086 	.word	0x00000086
 8000d54:	00000088 	.word	0x00000088
 8000d58:	0000007c 	.word	0x0000007c
 8000d5c:	00000094 	.word	0x00000094
 8000d60:	00000098 	.word	0x00000098
 8000d64:	000000c8 	.word	0x000000c8
 8000d68:	43800000 	.word	0x43800000
 8000d6c:	c5e5e800 	.word	0xc5e5e800
 8000d70:	47800000 	.word	0x47800000

08000d74 <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000d7c:	f7ff fd32 	bl	80007e4 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000d80:	200a      	movs	r0, #10
 8000d82:	f008 f9af 	bl	80090e4 <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000d86:	f7ff fcc1 	bl	800070c <BMP180_READ_temp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d90:	601a      	str	r2, [r3, #0]
	temp = BMP180_GET_temp(temperature);
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe1d 	bl	80009d8 <BMP180_GET_temp>
 8000d9e:	eef0 7a40 	vmov.f32	s15, s0
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <BMP180_CALIBRATION+0x74>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]
	BMP180_start_measurment_pres();
 8000da8:	f7ff fd34 	bl	8000814 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000dac:	201e      	movs	r0, #30
 8000dae:	f008 f999 	bl	80090e4 <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000db2:	f7ff fccd 	bl	8000750 <BMP180_READ_pres>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
	pres = BMP180_GET_pres(pressure);
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe63 	bl	8000a90 <BMP180_GET_pres>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd0:	edc3 7a00 	vstr	s15, [r3]
	//}
	*firstpres = pres;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	000000a0 	.word	0x000000a0
 8000de8:	000000c4 	.word	0x000000c4
 8000dec:	000000a4 	.word	0x000000a4
 8000df0:	000000c8 	.word	0x000000c8

08000df4 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <BMP180_GET_height+0x38>)
 8000e02:	603b      	str	r3, [r7, #0]
	height = (ampritude/factor);
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <BMP180_GET_height+0x3c>)
 8000e06:	edd3 6a00 	vldr	s13, [r3]
 8000e0a:	ed97 7a00 	vldr	s14, [r7]
 8000e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e12:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ee07 3a90 	vmov	s15, r3
}
 8000e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	4134cccd 	.word	0x4134cccd
 8000e30:	000000d0 	.word	0x000000d0

08000e34 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed)
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d802      	bhi.n	8000e4e <ESC_1_SPEED+0x1a>
	  {
		  a = min_speed;
 8000e48:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e4c:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed)
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d902      	bls.n	8000e5e <ESC_1_SPEED+0x2a>
	  {
		  a =  max_speed;
 8000e58:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000e5c:	80fb      	strh	r3, [r7, #6]
	  }
	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <ESC_1_SPEED+0x40>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	24000098 	.word	0x24000098

08000e78 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed - Engine2_balance)
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d802      	bhi.n	8000e92 <ESC_2_SPEED+0x1a>
	  {
		  a = min_speed - Engine2_balance;
 8000e8c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e90:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed - Engine2_balance)
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d902      	bls.n	8000ea2 <ESC_2_SPEED+0x2a>
	  {
		  a =  max_speed - Engine2_balance;
 8000e9c:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000ea0:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a - Engine2_balance);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <ESC_2_SPEED+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	24000098 	.word	0x24000098

08000ebc <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed - Engine3_balance)
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d802      	bhi.n	8000ed6 <ESC_3_SPEED+0x1a>
	  {
		  a = min_speed - Engine3_balance;
 8000ed0:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ed4:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed - Engine3_balance)
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d902      	bls.n	8000ee6 <ESC_3_SPEED+0x2a>
	  {
		  a =  max_speed - Engine3_balance;
 8000ee0:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000ee4:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a - Engine3_balance);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <ESC_3_SPEED+0x40>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	24000098 	.word	0x24000098

08000f00 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed - Engine4_balance)
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d802      	bhi.n	8000f1a <ESC_4_SPEED+0x1a>
	  {
		  a = min_speed - Engine4_balance;
 8000f14:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f18:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a > max_speed - Engine4_balance)
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d902      	bls.n	8000f2a <ESC_4_SPEED+0x2a>
	  {
		  a = max_speed - Engine4_balance;
 8000f24:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000f28:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a - Engine4_balance);
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <ESC_4_SPEED+0x40>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	24000098 	.word	0x24000098

08000f44 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f015 f96d 	bl	8016238 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2104      	movs	r1, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f015 f967 	bl	8016238 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f015 f961 	bl	8016238 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f015 f95b 	bl	8016238 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f98:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fa4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <ESC_INT+0x8c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <ESC_INT+0x90>)
 8000fba:	f00d f9f1 	bl	800e3a0 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000fbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc2:	f008 f88f 	bl	80090e4 <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000098 	.word	0x24000098
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <HMC5883L_Init>:
static I2C_HandleTypeDef *hi2c_HMC5883L;

extern uint8_t HMC5883L_Data_IT[6];
extern uint8_t HMC583L_IRQ;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8000fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <HMC5883L_Init+0xb4>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			30 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xF0;
 8000fea:	23f0      	movs	r3, #240	@ 0xf0
 8000fec:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 8000fee:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HMC5883L_Init+0xb4>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	213c      	movs	r1, #60	@ 0x3c
 8001006:	f00d fa9b 	bl	800e540 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x32;
 800100a:	2332      	movs	r3, #50	@ 0x32
 800100c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <HMC5883L_Init+0xb4>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 030f 	add.w	r3, r7, #15
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2201      	movs	r2, #1
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	f00d fa8b 	bl	800e540 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x80;
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <HMC5883L_Init+0xb4>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2202      	movs	r2, #2
 8001044:	213c      	movs	r1, #60	@ 0x3c
 8001046:	f00d fa7b 	bl	800e540 <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HMC5883L_Init+0xb4>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	f107 030e 	add.w	r3, r7, #14
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	220a      	movs	r2, #10
 8001064:	213c      	movs	r1, #60	@ 0x3c
 8001066:	f00d fb7f 	bl	800e768 <HAL_I2C_Mem_Read>

	if(status != 0x48){
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	2b48      	cmp	r3, #72	@ 0x48
 800106e:	d002      	beq.n	8001076 <HMC5883L_Init+0x9e>
		status = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	73bb      	strb	r3, [r7, #14]
 8001074:	e001      	b.n	800107a <HMC5883L_Init+0xa2>
	}
	else{
		status = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f008 f832 	bl	80090e4 <HAL_Delay>

	return status;
 8001080:	7bbb      	ldrb	r3, [r7, #14]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2400009c 	.word	0x2400009c

08001090 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 8001096:	23b6      	movs	r3, #182	@ 0xb6
 8001098:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, data, 6, 1);
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HMC5883L_Get_Z_Start+0x40>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2306      	movs	r3, #6
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	463b      	mov	r3, r7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2205      	movs	r2, #5
 80010ae:	213c      	movs	r1, #60	@ 0x3c
 80010b0:	f00d fb5a 	bl	800e768 <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[4]<<8) | data[5];
 80010b4:	793b      	ldrb	r3, [r7, #4]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	797b      	ldrb	r3, [r7, #5]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2400009c 	.word	0x2400009c

080010d4 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, (uint8_t *)HMC5883L_Data_IT, 6);
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HMC5883L_Get_Z_Start_IT+0x28>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	2306      	movs	r3, #6
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <HMC5883L_Get_Z_Start_IT+0x2c>)
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2205      	movs	r2, #5
 80010ea:	213c      	movs	r1, #60	@ 0x3c
 80010ec:	f00d fce0 	bl	800eab0 <HAL_I2C_Mem_Read_IT>
	HMC583L_IRQ = 1;
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <HMC5883L_Get_Z_Start_IT+0x30>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2400009c 	.word	0x2400009c
 8001100:	24000ec0 	.word	0x24000ec0
 8001104:	000041bd 	.word	0x000041bd

08001108 <HMC5883L_Get_Z_End_IT>:

int16_t HMC5883L_Get_Z_End_IT(void){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
	int16_t fulldata = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	80fb      	strh	r3, [r7, #6]

	fulldata = ((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5];
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 800111c:	795b      	ldrb	r3, [r3, #5]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 8001124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	24000ec0 	.word	0x24000ec0

08001138 <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 8001138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	e014      	b.n	800117c <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 8001152:	f7ff ff9d 	bl	8001090 <HMC5883L_Get_Z_Start>
 8001156:	4603      	mov	r3, r0
 8001158:	b21b      	sxth	r3, r3
 800115a:	17da      	asrs	r2, r3, #31
 800115c:	461c      	mov	r4, r3
 800115e:	4615      	mov	r5, r2
 8001160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001164:	eb12 0804 	adds.w	r8, r2, r4
 8001168:	eb43 0905 	adc.w	r9, r3, r5
 800116c:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 8001170:	2064      	movs	r0, #100	@ 0x64
 8001172:	f007 ffb7 	bl	80090e4 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b09      	cmp	r3, #9
 8001180:	dde7      	ble.n	8001152 <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 8001182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001186:	f04f 020a 	mov.w	r2, #10
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	f7ff f8bf 	bl	8000310 <__aeabi_ldivmod>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	b213      	sxth	r3, r2
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080011a4 <MPU6050_INIT>:
//extern float xval;
//extern float yval;
//extern float zval;


uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 80011ac:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <MPU6050_INIT+0x58>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 80011b2:	f000 f825 	bl	8001200 <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 80011b6:	f000 f88f 	bl	80012d8 <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 80011ba:	2005      	movs	r0, #5
 80011bc:	f000 f838 	bl	8001230 <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 80011c0:	2008      	movs	r0, #8
 80011c2:	f000 f851 	bl	8001268 <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 80011c6:	2008      	movs	r0, #8
 80011c8:	f000 f86a 	bl	80012a0 <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 80011cc:	f000 fd34 	bl	8001c38 <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 80011d0:	f000 f89a 	bl	8001308 <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 80011d4:	200a      	movs	r0, #10
 80011d6:	f007 ff85 	bl	80090e4 <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 80011da:	f000 fd15 	bl	8001c08 <MPU6050_READ_ID>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b68      	cmp	r3, #104	@ 0x68
 80011e6:	d002      	beq.n	80011ee <MPU6050_INIT+0x4a>
		status = 0;//error
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e001      	b.n	80011f2 <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	240000a0 	.word	0x240000a0

08001200 <MPU6050_RESET>:


void MPU6050_RESET(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <MPU6050_RESET+0x2c>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2301      	movs	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	226b      	movs	r2, #107	@ 0x6b
 800121e:	21d0      	movs	r1, #208	@ 0xd0
 8001220:	f00d f98e 	bl	800e540 <HAL_I2C_Mem_Write>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	240000a0 	.word	0x240000a0

08001230 <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af04      	add	r7, sp, #16
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MPU6050_CONFIG_DLPF+0x34>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2301      	movs	r3, #1
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	f107 030f 	add.w	r3, r7, #15
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	221a      	movs	r2, #26
 8001254:	21d0      	movs	r1, #208	@ 0xd0
 8001256:	f00d f973 	bl	800e540 <HAL_I2C_Mem_Write>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	240000a0 	.word	0x240000a0

08001268 <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af04      	add	r7, sp, #16
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MPU6050_CONFIG_GYRO+0x34>)
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	2301      	movs	r3, #1
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	f107 030f 	add.w	r3, r7, #15
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	221b      	movs	r2, #27
 800128c:	21d0      	movs	r1, #208	@ 0xd0
 800128e:	f00d f957 	bl	800e540 <HAL_I2C_Mem_Write>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	240000a0 	.word	0x240000a0

080012a0 <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MPU6050_CONFIG_ACCEL+0x34>)
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	f107 030f 	add.w	r3, r7, #15
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	221c      	movs	r2, #28
 80012c4:	21d0      	movs	r1, #208	@ 0xd0
 80012c6:	f00d f93b 	bl	800e540 <HAL_I2C_Mem_Write>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	240000a0 	.word	0x240000a0

080012d8 <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	2219      	movs	r2, #25
 80012f6:	21d0      	movs	r1, #208	@ 0xd0
 80012f8:	f00d f922 	bl	800e540 <HAL_I2C_Mem_Write>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	240000a0 	.word	0x240000a0

08001308 <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	2301      	movs	r3, #1
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	226a      	movs	r2, #106	@ 0x6a
 8001326:	21d0      	movs	r1, #208	@ 0xd0
 8001328:	f00d f90a 	bl	800e540 <HAL_I2C_Mem_Write>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	240000a0 	.word	0x240000a0

08001338 <MPU6050_CALIBRATION>:


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(float *accelx_cal,float *accely_cal,float*accelz_cal,float *gyrox_cal,float *gyroy_cal,
		float *gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	@ 0x38
 800133c:	af00      	add	r7, sp, #0
 800133e:	6178      	str	r0, [r7, #20]
 8001340:	6139      	str	r1, [r7, #16]
 8001342:	60fa      	str	r2, [r7, #12]
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	ed87 0a01 	vstr	s0, [r7, #4]
 800134a:	edc7 0a00 	vstr	s1, [r7]

	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	637b      	str	r3, [r7, #52]	@ 0x34
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	@ 0x30
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 1000; i++){ //5 sec
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e06b      	b.n	8001450 <MPU6050_CALIBRATION+0x118>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/Acc_Scale;
 8001378:	f000 fbc2 	bl	8001b00 <MPU6050_GET_ACCEL_FULLVALUE_X>
 800137c:	4603      	mov	r3, r0
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001386:	ed97 7a00 	vldr	s14, [r7]
 800138a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/Acc_Scale;
 800139a:	f000 fbd1 	bl	8001b40 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 800139e:	4603      	mov	r3, r0
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013a8:	ed97 7a00 	vldr	s14, [r7]
 80013ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale;
 80013bc:	f000 fbd4 	bl	8001b68 <MPU6050_GET_ACCEL_FULLVALUE_Z>
 80013c0:	4603      	mov	r3, r0
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ca:	ed97 7a00 	vldr	s14, [r7]
 80013ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80013d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013da:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale;
 80013de:	f000 fbd7 	bl	8001b90 <MPU6050_GET_GYRO_FULLVALUE_X>
 80013e2:	4603      	mov	r3, r0
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80013f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80013f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale;
 8001400:	f000 fbda 	bl	8001bb8 <MPU6050_GET_GYRO_FULLVALUE_Y>
 8001404:	4603      	mov	r3, r0
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800140e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001416:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale;
 8001422:	f000 fbdd 	bl	8001be0 <MPU6050_GET_GYRO_FULLVALUE_Z>
 8001426:	4603      	mov	r3, r0
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001430:	ed97 7a01 	vldr	s14, [r7, #4]
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	ed97 7a08 	vldr	s14, [r7, #32]
 800143c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001440:	edc7 7a08 	vstr	s15, [r7, #32]
		  HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f007 fe4d 	bl	80090e4 <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001456:	db8f      	blt.n	8001378 <MPU6050_CALIBRATION+0x40>
	}
	*accelx_cal = accelx/1000;
 8001458:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800145c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	edc3 7a00 	vstr	s15, [r3]
	*accely_cal = accely/1000;
 800146a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800146e:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	edc3 7a00 	vstr	s15, [r3]
	*accelz_cal = accelz/1000;
 800147c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001480:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	edc3 7a00 	vstr	s15, [r3]

	*accelz_cal = 1 - *accelz_cal;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a00 	vstr	s15, [r3]

	*gyrox_cal = gyrox/1000;
 80014a2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014a6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	edc3 7a00 	vstr	s15, [r3]
	*gyroy_cal = gyroy/1000;
 80014b4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014b8:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014c2:	edc3 7a00 	vstr	s15, [r3]
	*gyroz_cal = gyroz/1000;
 80014c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ca:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d4:	edc3 7a00 	vstr	s15, [r3]
}
 80014d8:	bf00      	nop
 80014da:	3738      	adds	r7, #56	@ 0x38
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	447a0000 	.word	0x447a0000
 80014e4:	00000000 	.word	0x00000000

080014e8 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(float ax, float ay, float az, float *ax_ang, float *ay_ang/*, float *az_ang*/){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b090      	sub	sp, #64	@ 0x40
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80014f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80014f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80014fa:	60b8      	str	r0, [r7, #8]
 80014fc:	6079      	str	r1, [r7, #4]
	double i = 0-1,axan,ayan;
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <MPU6050_GET_ACCEL_TO_ANGLE+0xf8>)
 8001504:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double ang1 = sqrt((ax*ax)+(az*az));
 8001508:	edd7 7a05 	vldr	s15, [r7, #20]
 800150c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001510:	edd7 7a03 	vldr	s15, [r7, #12]
 8001514:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001520:	eeb0 0b47 	vmov.f64	d0, d7
 8001524:	f01c fbec 	bl	801dd00 <sqrt>
 8001528:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	double ang2 = sqrt((ay*ay)+(az*az));
 800152c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001530:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001534:	edd7 7a03 	vldr	s15, [r7, #12]
 8001538:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800153c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001540:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001544:	eeb0 0b47 	vmov.f64	d0, d7
 8001548:	f01c fbda 	bl	801dd00 <sqrt>
 800154c:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	axan = atan2((ay*i), ang1);
 8001550:	edd7 7a04 	vldr	s15, [r7, #16]
 8001554:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001558:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800155c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001560:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001564:	eeb0 0b47 	vmov.f64	d0, d7
 8001568:	f01c fbc6 	bl	801dcf8 <atan2>
 800156c:	ed87 0b08 	vstr	d0, [r7, #32]
	ayan= atan2(ax, ang2);
 8001570:	edd7 7a05 	vldr	s15, [r7, #20]
 8001574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001578:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 800157c:	eeb0 0b47 	vmov.f64	d0, d7
 8001580:	f01c fbba 	bl	801dcf8 <atan2>
 8001584:	ed87 0b06 	vstr	d0, [r7, #24]

	*ax_ang = (axan*180)/M_PI;
 8001588:	ed97 7b08 	vldr	d7, [r7, #32]
 800158c:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 80015d0 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 8001590:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001594:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 80015d8 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 8001598:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800159c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	edc3 7a00 	vstr	s15, [r3]
	*ay_ang = (ayan*180)/M_PI;
 80015a6:	ed97 7b06 	vldr	d7, [r7, #24]
 80015aa:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80015d0 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 80015ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015b2:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 80015d8 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 80015b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a00 	vstr	s15, [r3]
}
 80015c4:	bf00      	nop
 80015c6:	3740      	adds	r7, #64	@ 0x40
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	f3af 8000 	nop.w
 80015d0:	00000000 	.word	0x00000000
 80015d4:	40668000 	.word	0x40668000
 80015d8:	54442d18 	.word	0x54442d18
 80015dc:	400921fb 	.word	0x400921fb
 80015e0:	bff00000 	.word	0xbff00000

080015e4 <MPU6050_GET_ACCANDGYR_CALANDSCL>:
	*gy_ang = (gy/1000) + *gy_ang;
	*gz_ang = (gz/1000) + *gz_ang;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,
		float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	@ 0x50
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80015ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80015f0:	623b      	str	r3, [r7, #32]
 80015f2:	ed87 0a07 	vstr	s0, [r7, #28]
 80015f6:	edc7 0a06 	vstr	s1, [r7, #24]
 80015fa:	ed87 1a05 	vstr	s2, [r7, #20]
 80015fe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001602:	ed87 2a03 	vstr	s4, [r7, #12]
 8001606:	edc7 2a02 	vstr	s5, [r7, #8]
 800160a:	ed87 3a01 	vstr	s6, [r7, #4]
 800160e:	edc7 3a00 	vstr	s7, [r7]

	uint8_t pdata[14];
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14, 1); // szybesz o ~1ms
 8001612:	4b4e      	ldr	r3, [pc, #312]	@ (800174c <MPU6050_GET_ACCANDGYR_CALANDSCL+0x168>)
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	230e      	movs	r3, #14
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2301      	movs	r3, #1
 8001626:	223b      	movs	r2, #59	@ 0x3b
 8001628:	21d0      	movs	r1, #208	@ 0xd0
 800162a:	f00d f89d 	bl	800e768 <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14);

	*ax = (((int16_t)(pdata[0]<<8) | pdata[1])/Acc_Scale) - accelx_cal;
 800162e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21b      	sxth	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800163c:	4313      	orrs	r3, r2
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001646:	edd7 7a00 	vldr	s15, [r7]
 800164a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800164e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001658:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(pdata[2]<<8) | pdata[3])/Acc_Scale) - accely_cal;
 800165c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b21b      	sxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800166a:	4313      	orrs	r3, r2
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001674:	edd7 7a00 	vldr	s15, [r7]
 8001678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800167c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001686:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(pdata[4]<<8) | pdata[5])/Acc_Scale) + accelz_cal;
 800168a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b21b      	sxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001698:	4313      	orrs	r3, r2
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016a2:	edd7 7a00 	vldr	s15, [r7]
 80016a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(pdata[8]<<8) | pdata[9])/Gyr_Scale) - gyrox_cal;
 80016b8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b21b      	sxth	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80016c6:	4313      	orrs	r3, r2
 80016c8:	ee07 3a90 	vmov	s15, r3
 80016cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(pdata[10]<<8) | pdata[11])/Gyr_Scale) - gyroy_cal;
 80016e6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80016f4:	4313      	orrs	r3, r2
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001706:	edd7 7a03 	vldr	s15, [r7, #12]
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001710:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(pdata[12]<<8) | pdata[13])/Gyr_Scale) - gyroz_cal;
 8001714:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b21b      	sxth	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001722:	4313      	orrs	r3, r2
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800172c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001734:	edd7 7a02 	vldr	s15, [r7, #8]
 8001738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800173e:	edc3 7a00 	vstr	s15, [r3]
//	  *az = (MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale) + accelz_cal;
//
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}
 8001742:	bf00      	nop
 8001744:	3740      	adds	r7, #64	@ 0x40
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	240000a0 	.word	0x240000a0

08001750 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af02      	add	r7, sp, #8


	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, (uint8_t *)MPU6050_IT_DATA, 14);
 8001756:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x28>)
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	230e      	movs	r3, #14
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	223b      	movs	r2, #59	@ 0x3b
 8001766:	21d0      	movs	r1, #208	@ 0xd0
 8001768:	f00d f9a2 	bl	800eab0 <HAL_I2C_Mem_Read_IT>
	MPU6050_IRQ = 1;
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]


}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	240000a0 	.word	0x240000a0
 800177c:	24000eb0 	.word	0x24000eb0
 8001780:	000041bc 	.word	0x000041bc

08001784 <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001784:	b480      	push	{r7}
 8001786:	b08d      	sub	sp, #52	@ 0x34
 8001788:	af00      	add	r7, sp, #0
 800178a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800178c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800178e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	ed87 0a07 	vstr	s0, [r7, #28]
 8001796:	edc7 0a06 	vstr	s1, [r7, #24]
 800179a:	ed87 1a05 	vstr	s2, [r7, #20]
 800179e:	edc7 1a04 	vstr	s3, [r7, #16]
 80017a2:	ed87 2a03 	vstr	s4, [r7, #12]
 80017a6:	edc7 2a02 	vstr	s5, [r7, #8]
 80017aa:	ed87 3a01 	vstr	s6, [r7, #4]
 80017ae:	edc7 3a00 	vstr	s7, [r7]
	*ax = (((int16_t)(MPU6050_IT_DATA[0]<<8) | MPU6050_IT_DATA[1])/Acc_Scale) - accelx_cal;
 80017b2:	4b48      	ldr	r3, [pc, #288]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b45      	ldr	r3, [pc, #276]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017ca:	edd7 7a00 	vldr	s15, [r7]
 80017ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017dc:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(MPU6050_IT_DATA[2]<<8) | MPU6050_IT_DATA[3])/Acc_Scale) - accely_cal;
 80017e0:	4b3c      	ldr	r3, [pc, #240]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017e2:	789b      	ldrb	r3, [r3, #2]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b3a      	ldr	r3, [pc, #232]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017ec:	78db      	ldrb	r3, [r3, #3]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017f8:	edd7 7a00 	vldr	s15, [r7]
 80017fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001800:	edd7 7a06 	vldr	s15, [r7, #24]
 8001804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180a:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(MPU6050_IT_DATA[4]<<8) | MPU6050_IT_DATA[5])/Acc_Scale) + accelz_cal;
 800180e:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001810:	791b      	ldrb	r3, [r3, #4]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	b21b      	sxth	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	4b2e      	ldr	r3, [pc, #184]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800181a:	795b      	ldrb	r3, [r3, #5]
 800181c:	4313      	orrs	r3, r2
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001826:	edd7 7a00 	vldr	s15, [r7]
 800182a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800182e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(MPU6050_IT_DATA[8]<<8) | MPU6050_IT_DATA[9])/Gyr_Scale) - gyrox_cal;
 800183c:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800183e:	7a1b      	ldrb	r3, [r3, #8]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b21b      	sxth	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001848:	7a5b      	ldrb	r3, [r3, #9]
 800184a:	4313      	orrs	r3, r2
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001854:	edd7 7a01 	vldr	s15, [r7, #4]
 8001858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800185c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(MPU6050_IT_DATA[10]<<8) | MPU6050_IT_DATA[11])/Gyr_Scale) - gyroy_cal;
 800186a:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800186c:	7a9b      	ldrb	r3, [r3, #10]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b21b      	sxth	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001876:	7adb      	ldrb	r3, [r3, #11]
 8001878:	4313      	orrs	r3, r2
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001882:	edd7 7a01 	vldr	s15, [r7, #4]
 8001886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800188a:	edd7 7a03 	vldr	s15, [r7, #12]
 800188e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001894:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(MPU6050_IT_DATA[12]<<8) | MPU6050_IT_DATA[13])/Gyr_Scale) - gyroz_cal;
 8001898:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800189a:	7b1b      	ldrb	r3, [r3, #12]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b21b      	sxth	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018a4:	7b5b      	ldrb	r3, [r3, #13]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018c2:	edc3 7a00 	vstr	s15, [r3]
}
 80018c6:	bf00      	nop
 80018c8:	3734      	adds	r7, #52	@ 0x34
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	24000eb0 	.word	0x24000eb0

080018d8 <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float ax_ang, float ay_ang, float megz_ang, float gx_ang,
		float gy_ang, float gz_ang){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	61f8      	str	r0, [r7, #28]
 80018e0:	ed87 0a06 	vstr	s0, [r7, #24]
 80018e4:	edc7 0a05 	vstr	s1, [r7, #20]
 80018e8:	ed87 1a04 	vstr	s2, [r7, #16]
 80018ec:	edc7 1a03 	vstr	s3, [r7, #12]
 80018f0:	ed87 2a02 	vstr	s4, [r7, #8]
 80018f4:	edc7 2a01 	vstr	s5, [r7, #4]
	Complementary_getFilter(Complementary_Filter_st, ax_ang, ay_ang, megz_ang, gx_ang, gy_ang, gz_ang);
 80018f8:	edd7 2a01 	vldr	s5, [r7, #4]
 80018fc:	ed97 2a02 	vldr	s4, [r7, #8]
 8001900:	edd7 1a03 	vldr	s3, [r7, #12]
 8001904:	ed97 1a04 	vldr	s2, [r7, #16]
 8001908:	edd7 0a05 	vldr	s1, [r7, #20]
 800190c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001910:	69f8      	ldr	r0, [r7, #28]
 8001912:	f000 f9a9 	bl	8001c68 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 8001916:	bf00      	nop
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <MPU6050_GET_ACCEL_YH+0x2c>)
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	2301      	movs	r3, #1
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2301      	movs	r3, #1
 8001938:	223d      	movs	r2, #61	@ 0x3d
 800193a:	21d0      	movs	r1, #208	@ 0xd0
 800193c:	f00c ff14 	bl	800e768 <HAL_I2C_Mem_Read>
	return data;
 8001940:	79fb      	ldrb	r3, [r7, #7]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	240000a0 	.word	0x240000a0

08001950 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MPU6050_GET_ACCEL_YL+0x2c>)
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	2301      	movs	r3, #1
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2301      	movs	r3, #1
 8001968:	223e      	movs	r2, #62	@ 0x3e
 800196a:	21d0      	movs	r1, #208	@ 0xd0
 800196c:	f00c fefc 	bl	800e768 <HAL_I2C_Mem_Read>
	return data;
 8001970:	79fb      	ldrb	r3, [r7, #7]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	240000a0 	.word	0x240000a0

08001980 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <MPU6050_GET_ACCEL_ZH+0x2c>)
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	2301      	movs	r3, #1
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	2301      	movs	r3, #1
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	223f      	movs	r2, #63	@ 0x3f
 800199a:	21d0      	movs	r1, #208	@ 0xd0
 800199c:	f00c fee4 	bl	800e768 <HAL_I2C_Mem_Read>
	return data;
 80019a0:	79fb      	ldrb	r3, [r7, #7]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	240000a0 	.word	0x240000a0

080019b0 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <MPU6050_GET_ACCEL_ZL+0x2c>)
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	2301      	movs	r3, #1
 80019c0:	9301      	str	r3, [sp, #4]
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2301      	movs	r3, #1
 80019c8:	2240      	movs	r2, #64	@ 0x40
 80019ca:	21d0      	movs	r1, #208	@ 0xd0
 80019cc:	f00c fecc 	bl	800e768 <HAL_I2C_Mem_Read>
	return data;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	240000a0 	.word	0x240000a0

080019e0 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MPU6050_GET_GYRO_XH+0x2c>)
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	2301      	movs	r3, #1
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	2243      	movs	r2, #67	@ 0x43
 80019fa:	21d0      	movs	r1, #208	@ 0xd0
 80019fc:	f00c feb4 	bl	800e768 <HAL_I2C_Mem_Read>
	return data;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	240000a0 	.word	0x240000a0

08001a10 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MPU6050_GET_GYRO_XL+0x2c>)
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2301      	movs	r3, #1
 8001a28:	2244      	movs	r2, #68	@ 0x44
 8001a2a:	21d0      	movs	r1, #208	@ 0xd0
 8001a2c:	f00c fe9c 	bl	800e768 <HAL_I2C_Mem_Read>
	return data;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	240000a0 	.word	0x240000a0

08001a40 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <MPU6050_GET_GYRO_YH+0x2c>)
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	1dfb      	adds	r3, r7, #7
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2301      	movs	r3, #1
 8001a58:	2245      	movs	r2, #69	@ 0x45
 8001a5a:	21d0      	movs	r1, #208	@ 0xd0
 8001a5c:	f00c fe84 	bl	800e768 <HAL_I2C_Mem_Read>
	return data;
 8001a60:	79fb      	ldrb	r3, [r7, #7]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	240000a0 	.word	0x240000a0

08001a70 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 8001a76:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <MPU6050_GET_GYRO_YL+0x2c>)
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	1dfb      	adds	r3, r7, #7
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2301      	movs	r3, #1
 8001a88:	2246      	movs	r2, #70	@ 0x46
 8001a8a:	21d0      	movs	r1, #208	@ 0xd0
 8001a8c:	f00c fe6c 	bl	800e768 <HAL_I2C_Mem_Read>
	return data;
 8001a90:	79fb      	ldrb	r3, [r7, #7]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	240000a0 	.word	0x240000a0

08001aa0 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <MPU6050_GET_GYRO_ZH+0x2c>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	9302      	str	r3, [sp, #8]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2247      	movs	r2, #71	@ 0x47
 8001aba:	21d0      	movs	r1, #208	@ 0xd0
 8001abc:	f00c fe54 	bl	800e768 <HAL_I2C_Mem_Read>
	return data;
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	240000a0 	.word	0x240000a0

08001ad0 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <MPU6050_GET_GYRO_ZL+0x2c>)
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	2301      	movs	r3, #1
 8001adc:	9302      	str	r3, [sp, #8]
 8001ade:	2301      	movs	r3, #1
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	2248      	movs	r2, #72	@ 0x48
 8001aea:	21d0      	movs	r1, #208	@ 0xd0
 8001aec:	f00c fe3c 	bl	800e768 <HAL_I2C_Mem_Read>
	return data;
 8001af0:	79fb      	ldrb	r3, [r7, #7]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	240000a0 	.word	0x240000a0

08001b00 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	9302      	str	r3, [sp, #8]
 8001b0e:	2302      	movs	r3, #2
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2301      	movs	r3, #1
 8001b18:	223b      	movs	r2, #59	@ 0x3b
 8001b1a:	21d0      	movs	r1, #208	@ 0xd0
 8001b1c:	f00c fe24 	bl	800e768 <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001b20:	793b      	ldrb	r3, [r7, #4]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	797b      	ldrb	r3, [r7, #5]
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	240000a0 	.word	0x240000a0

08001b40 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001b46:	f7ff feeb 	bl	8001920 <MPU6050_GET_ACCEL_YH>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	b21c      	sxth	r4, r3
 8001b50:	f7ff fefe 	bl	8001950 <MPU6050_GET_ACCEL_YL>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	4323      	orrs	r3, r4
 8001b5a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd90      	pop	{r4, r7, pc}

08001b68 <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001b6e:	f7ff ff07 	bl	8001980 <MPU6050_GET_ACCEL_ZH>
 8001b72:	4603      	mov	r3, r0
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21c      	sxth	r4, r3
 8001b78:	f7ff ff1a 	bl	80019b0 <MPU6050_GET_ACCEL_ZL>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	4323      	orrs	r3, r4
 8001b82:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}

08001b90 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001b96:	f7ff ff23 	bl	80019e0 <MPU6050_GET_GYRO_XH>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21c      	sxth	r4, r3
 8001ba0:	f7ff ff36 	bl	8001a10 <MPU6050_GET_GYRO_XL>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	4323      	orrs	r3, r4
 8001baa:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}

08001bb8 <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001bbe:	f7ff ff3f 	bl	8001a40 <MPU6050_GET_GYRO_YH>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	b21c      	sxth	r4, r3
 8001bc8:	f7ff ff52 	bl	8001a70 <MPU6050_GET_GYRO_YL>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	4323      	orrs	r3, r4
 8001bd2:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd90      	pop	{r4, r7, pc}

08001be0 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001be6:	f7ff ff5b 	bl	8001aa0 <MPU6050_GET_GYRO_ZH>
 8001bea:	4603      	mov	r3, r0
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	b21c      	sxth	r4, r3
 8001bf0:	f7ff ff6e 	bl	8001ad0 <MPU6050_GET_GYRO_ZL>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4323      	orrs	r3, r4
 8001bfa:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <MPU6050_READ_ID+0x2c>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	2301      	movs	r3, #1
 8001c14:	9302      	str	r3, [sp, #8]
 8001c16:	2301      	movs	r3, #1
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	1dfb      	adds	r3, r7, #7
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	2275      	movs	r2, #117	@ 0x75
 8001c22:	21d0      	movs	r1, #208	@ 0xd0
 8001c24:	f00c fda0 	bl	800e768 <HAL_I2C_Mem_Read>
	return data;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	b25b      	sxtb	r3, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	240000a0 	.word	0x240000a0

08001c38 <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	2301      	movs	r3, #1
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2301      	movs	r3, #1
 8001c54:	2237      	movs	r2, #55	@ 0x37
 8001c56:	21d0      	movs	r1, #208	@ 0xd0
 8001c58:	f00c fc72 	bl	800e540 <HAL_I2C_Mem_Write>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	240000a0 	.word	0x240000a0

08001c68 <Complementary_getFilter>:

    return Kalman->angle;
};


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	61f8      	str	r0, [r7, #28]
 8001c70:	ed87 0a06 	vstr	s0, [r7, #24]
 8001c74:	edc7 0a05 	vstr	s1, [r7, #20]
 8001c78:	ed87 1a04 	vstr	s2, [r7, #16]
 8001c7c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001c80:	ed87 2a02 	vstr	s4, [r7, #8]
 8001c84:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang*(-1))+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));// mnozenie X-1 poniewaz akcelerometr miezy w drugą strone niz zyroskop
 8001c88:	4b35      	ldr	r3, [pc, #212]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001c8a:	ed93 7a00 	vldr	s14, [r3]
 8001c8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ca4:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8001d50 <Complementary_getFilter+0xe8>
 8001ca8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cb4:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001d58 <Complementary_getFilter+0xf0>
 8001cb8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001cc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang*(-1))+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001cca:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001ccc:	ed93 7a00 	vldr	s14, [r3]
 8001cd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ce6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8001d50 <Complementary_getFilter+0xe8>
 8001cea:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cf6:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001d58 <Complementary_getFilter+0xf0>
 8001cfa:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cfe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (1*((gz_ang*looptime)+Complementary_Filter_st->oz));
 8001d0c:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001d42:	bf00      	nop
 8001d44:	3724      	adds	r7, #36	@ 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	f5c28f5c 	.word	0xf5c28f5c
 8001d54:	3fef5c28 	.word	0x3fef5c28
 8001d58:	47ae147b 	.word	0x47ae147b
 8001d5c:	3f947ae1 	.word	0x3f947ae1
 8001d60:	0801e754 	.word	0x0801e754

08001d64 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f007 f9b8 	bl	80090e4 <HAL_Delay>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <nRF24_SendSpi+0x28>)
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	f012 fc5f 	bl	8014658 <HAL_SPI_Transmit>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	240000a4 	.word	0x240000a4

08001da8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <nRF24_ReadSpi+0x28>)
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	f012 fe37 	bl	8014a34 <HAL_SPI_Receive>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	240000a4 	.word	0x240000a4

08001dd4 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001de2:	2200      	movs	r2, #0
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <nRF24_ReadRegister+0x44>)
 8001de8:	f00c fada 	bl	800e3a0 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	2101      	movs	r1, #1
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ffc3 	bl	8001d7c <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001df6:	f107 030f 	add.w	r3, r7, #15
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ffd3 	bl	8001da8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001e02:	2201      	movs	r2, #1
 8001e04:	2180      	movs	r1, #128	@ 0x80
 8001e06:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <nRF24_ReadRegister+0x44>)
 8001e08:	f00c faca 	bl	800e3a0 <HAL_GPIO_WritePin>

	return result;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	58020400 	.word	0x58020400

08001e1c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e30:	2200      	movs	r2, #0
 8001e32:	2180      	movs	r1, #128	@ 0x80
 8001e34:	480a      	ldr	r0, [pc, #40]	@ (8001e60 <nRF24_ReadRegisters+0x44>)
 8001e36:	f00c fab3 	bl	800e3a0 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff9c 	bl	8001d7c <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	4619      	mov	r1, r3
 8001e48:	6838      	ldr	r0, [r7, #0]
 8001e4a:	f7ff ffad 	bl	8001da8 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	4803      	ldr	r0, [pc, #12]	@ (8001e60 <nRF24_ReadRegisters+0x44>)
 8001e54:	f00c faa4 	bl	800e3a0 <HAL_GPIO_WritePin>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	58020400 	.word	0x58020400

08001e64 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460a      	mov	r2, r1
 8001e6e:	71fb      	strb	r3, [r7, #7]
 8001e70:	4613      	mov	r3, r2
 8001e72:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f043 0320 	orr.w	r3, r3, #32
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001e82:	2200      	movs	r2, #0
 8001e84:	2180      	movs	r1, #128	@ 0x80
 8001e86:	4809      	ldr	r0, [pc, #36]	@ (8001eac <nRF24_WriteRegister+0x48>)
 8001e88:	f00c fa8a 	bl	800e3a0 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2102      	movs	r1, #2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff72 	bl	8001d7c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	4803      	ldr	r0, [pc, #12]	@ (8001eac <nRF24_WriteRegister+0x48>)
 8001e9e:	f00c fa7f 	bl	800e3a0 <HAL_GPIO_WritePin>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	58020400 	.word	0x58020400

08001eb0 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f043 0320 	orr.w	r3, r3, #32
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2180      	movs	r1, #128	@ 0x80
 8001ece:	480b      	ldr	r0, [pc, #44]	@ (8001efc <nRF24_WriteRegisters+0x4c>)
 8001ed0:	f00c fa66 	bl	800e3a0 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001ed4:	1dfb      	adds	r3, r7, #7
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff4f 	bl	8001d7c <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001ede:	79bb      	ldrb	r3, [r7, #6]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6838      	ldr	r0, [r7, #0]
 8001ee4:	f7ff ff4a 	bl	8001d7c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2180      	movs	r1, #128	@ 0x80
 8001eec:	4803      	ldr	r0, [pc, #12]	@ (8001efc <nRF24_WriteRegisters+0x4c>)
 8001eee:	f00c fa57 	bl	800e3a0 <HAL_GPIO_WritePin>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	58020400 	.word	0x58020400

08001f00 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8001f06:	f000 f84d 	bl	8001fa4 <nRF24_ReadConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001f0e:	4910      	ldr	r1, [pc, #64]	@ (8001f50 <nRF24_RX_Mode+0x50>)
 8001f10:	2000      	movs	r0, #0
 8001f12:	f000 f9f6 	bl	8002302 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f843 	bl	8001fb4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f2e:	2070      	movs	r0, #112	@ 0x70
 8001f30:	f000 f89b 	bl	800206a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f34:	f000 f8a8 	bl	8002088 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f38:	f000 f8c0 	bl	80020bc <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2140      	movs	r1, #64	@ 0x40
 8001f40:	4804      	ldr	r0, [pc, #16]	@ (8001f54 <nRF24_RX_Mode+0x54>)
 8001f42:	f00c fa2d 	bl	800e3a0 <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	240000a8 	.word	0x240000a8
 8001f54:	58020400 	.word	0x58020400

08001f58 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2140      	movs	r1, #64	@ 0x40
 8001f62:	480f      	ldr	r0, [pc, #60]	@ (8001fa0 <nRF24_TX_Mode+0x48>)
 8001f64:	f00c fa1c 	bl	800e3a0 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001f68:	f000 f81c 	bl	8001fa4 <nRF24_ReadConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f816 	bl	8001fb4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f88:	2070      	movs	r0, #112	@ 0x70
 8001f8a:	f000 f86e 	bl	800206a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f8e:	f000 f87b 	bl	8002088 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f92:	f000 f893 	bl	80020bc <nRF24_FlushTX>

	//nRF24_Delay(1);
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	58020400 	.word	0x58020400

08001fa4 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff ff13 	bl	8001dd4 <nRF24_ReadRegister>
 8001fae:	4603      	mov	r3, r0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff ff4e 	bl	8001e64 <nRF24_WriteRegister>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001fda:	2006      	movs	r0, #6
 8001fdc:	f7ff fefa 	bl	8001dd4 <nRF24_ReadRegister>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	f023 0307 	bic.w	r3, r3, #7
 8001fea:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	b25a      	sxtb	r2, r3
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	4619      	mov	r1, r3
 8002000:	2006      	movs	r0, #6
 8002002:	f7ff ff2f 	bl	8001e64 <nRF24_WriteRegister>
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002018:	2006      	movs	r0, #6
 800201a:	f7ff fedb 	bl	8001dd4 <nRF24_ReadRegister>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002028:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d104      	bne.n	800203a <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	f043 0320 	orr.w	r3, r3, #32
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e006      	b.n	8002048 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d103      	bne.n	8002048 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	4619      	mov	r1, r3
 800204c:	2006      	movs	r0, #6
 800204e:	f7ff ff09 	bl	8001e64 <nRF24_WriteRegister>
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800205e:	2007      	movs	r0, #7
 8002060:	f7ff feb8 	bl	8001dd4 <nRF24_ReadRegister>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	bd80      	pop	{r7, pc}

0800206a <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	4619      	mov	r1, r3
 8002078:	2007      	movs	r0, #7
 800207a:	f7ff fef3 	bl	8001e64 <nRF24_WriteRegister>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800208e:	23e2      	movs	r3, #226	@ 0xe2
 8002090:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002092:	2200      	movs	r2, #0
 8002094:	2180      	movs	r1, #128	@ 0x80
 8002096:	4808      	ldr	r0, [pc, #32]	@ (80020b8 <nRF24_FlushRX+0x30>)
 8002098:	f00c f982 	bl	800e3a0 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	2101      	movs	r1, #1
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fe6b 	bl	8001d7c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020a6:	2201      	movs	r2, #1
 80020a8:	2180      	movs	r1, #128	@ 0x80
 80020aa:	4803      	ldr	r0, [pc, #12]	@ (80020b8 <nRF24_FlushRX+0x30>)
 80020ac:	f00c f978 	bl	800e3a0 <HAL_GPIO_WritePin>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	58020400 	.word	0x58020400

080020bc <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80020c2:	23e1      	movs	r3, #225	@ 0xe1
 80020c4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020c6:	2200      	movs	r2, #0
 80020c8:	2180      	movs	r1, #128	@ 0x80
 80020ca:	4808      	ldr	r0, [pc, #32]	@ (80020ec <nRF24_FlushTX+0x30>)
 80020cc:	f00c f968 	bl	800e3a0 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	2101      	movs	r1, #1
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fe51 	bl	8001d7c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020da:	2201      	movs	r2, #1
 80020dc:	2180      	movs	r1, #128	@ 0x80
 80020de:	4803      	ldr	r0, [pc, #12]	@ (80020ec <nRF24_FlushTX+0x30>)
 80020e0:	f00c f95e 	bl	800e3a0 <HAL_GPIO_WritePin>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	58020400 	.word	0x58020400

080020f0 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80020fa:	f7ff ff53 	bl	8001fa4 <nRF24_ReadConfig>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e003      	b.n	800211a <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	f023 0308 	bic.w	r3, r3, #8
 8002118:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff49 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002134:	f7ff ff36 	bl	8001fa4 <nRF24_ReadConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d104      	bne.n	800214c <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e003      	b.n	8002154 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	f023 0304 	bic.w	r3, r3, #4
 8002152:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff2c 	bl	8001fb4 <nRF24_WriteConfig>
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	460a      	mov	r2, r1
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	4613      	mov	r3, r2
 8002172:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	b25a      	sxtb	r2, r3
 800217a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	b25b      	sxtb	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	b25b      	sxtb	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4619      	mov	r1, r3
 800218c:	2004      	movs	r0, #4
 800218e:	f7ff fe69 	bl	8001e64 <nRF24_WriteRegister>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	4619      	mov	r1, r3
 80021ae:	2005      	movs	r0, #5
 80021b0:	f7ff fe58 	bl	8001e64 <nRF24_WriteRegister>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	460a      	mov	r2, r1
 80021c6:	71fb      	strb	r3, [r7, #7]
 80021c8:	4613      	mov	r3, r2
 80021ca:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	2b05      	cmp	r3, #5
 80021d0:	d901      	bls.n	80021d6 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 80021d2:	2305      	movs	r3, #5
 80021d4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	3311      	adds	r3, #17
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	79bb      	ldrb	r3, [r7, #6]
 80021de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	4610      	mov	r0, r2
 80021e8:	f7ff fe3c 	bl	8001e64 <nRF24_WriteRegister>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	460a      	mov	r2, r1
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	4613      	mov	r3, r2
 8002202:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d901      	bls.n	800220e <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800220a:	2305      	movs	r3, #5
 800220c:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800220e:	2002      	movs	r0, #2
 8002210:	f7ff fde0 	bl	8001dd4 <nRF24_ReadRegister>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002218:	79bb      	ldrb	r3, [r7, #6]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10a      	bne.n	8002234 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2201      	movs	r2, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	b25a      	sxtb	r2, r3
 8002228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222c:	4313      	orrs	r3, r2
 800222e:	b25b      	sxtb	r3, r3
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	e00b      	b.n	800224c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2201      	movs	r2, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	b25b      	sxtb	r3, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	b25a      	sxtb	r2, r3
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4013      	ands	r3, r2
 8002248:	b25b      	sxtb	r3, r3
 800224a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	4619      	mov	r1, r3
 8002250:	2002      	movs	r0, #2
 8002252:	f7ff fe07 	bl	8001e64 <nRF24_WriteRegister>
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	460a      	mov	r2, r1
 8002268:	71fb      	strb	r3, [r7, #7]
 800226a:	4613      	mov	r3, r2
 800226c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	2b05      	cmp	r3, #5
 8002272:	d901      	bls.n	8002278 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002274:	2305      	movs	r3, #5
 8002276:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002278:	2001      	movs	r0, #1
 800227a:	f7ff fdab 	bl	8001dd4 <nRF24_ReadRegister>
 800227e:	4603      	mov	r3, r0
 8002280:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002282:	79bb      	ldrb	r3, [r7, #6]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d10a      	bne.n	800229e <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2201      	movs	r2, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	b25a      	sxtb	r2, r3
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4313      	orrs	r3, r2
 8002298:	b25b      	sxtb	r3, r3
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	e00b      	b.n	80022b6 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2201      	movs	r2, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	b25a      	sxtb	r2, r3
 80022ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b0:	4013      	ands	r3, r2
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	4619      	mov	r1, r3
 80022ba:	2001      	movs	r0, #1
 80022bc:	f7ff fdd2 	bl	8001e64 <nRF24_WriteRegister>
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d901      	bls.n	80022dc <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80022d8:	2305      	movs	r3, #5
 80022da:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d801      	bhi.n	80022e6 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80022e2:	2303      	movs	r3, #3
 80022e4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	3b02      	subs	r3, #2
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	4619      	mov	r1, r3
 80022f4:	2003      	movs	r0, #3
 80022f6:	f7ff fdb5 	bl	8001e64 <nRF24_WriteRegister>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	6039      	str	r1, [r7, #0]
 800230c:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <nRF24_SetRXAddress+0x18>
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d11d      	bne.n	8002356 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	e00d      	b.n	800233c <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	441a      	add	r2, r3
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	f1c3 0302 	rsb	r3, r3, #2
 800232c:	7812      	ldrb	r2, [r2, #0]
 800232e:	3310      	adds	r3, #16
 8002330:	443b      	add	r3, r7
 8002332:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	3301      	adds	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d9ee      	bls.n	8002320 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	330a      	adds	r3, #10
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f107 010c 	add.w	r1, r7, #12
 800234c:	2203      	movs	r2, #3
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fdae 	bl	8001eb0 <nRF24_WriteRegisters>
	{
 8002354:	e00a      	b.n	800236c <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	330a      	adds	r3, #10
 800235a:	b2da      	uxtb	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	3302      	adds	r3, #2
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f7ff fd7d 	bl	8001e64 <nRF24_WriteRegister>
}
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	2203      	movs	r2, #3
 8002382:	4619      	mov	r1, r3
 8002384:	200a      	movs	r0, #10
 8002386:	f7ff fd49 	bl	8001e1c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	e00c      	b.n	80023aa <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	f1c3 0302 	rsb	r3, r3, #2
 8002398:	3210      	adds	r2, #16
 800239a:	443a      	add	r2, r7
 800239c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80023a0:	4a16      	ldr	r2, [pc, #88]	@ (80023fc <nRF24_SetTXAddress+0x88>)
 80023a2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	3301      	adds	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d9ef      	bls.n	8002390 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e00d      	b.n	80023d2 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	441a      	add	r2, r3
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	f1c3 0302 	rsb	r3, r3, #2
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	3310      	adds	r3, #16
 80023c6:	443b      	add	r3, r7
 80023c8:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	3301      	adds	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d9ee      	bls.n	80023b6 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	2203      	movs	r2, #3
 80023de:	4619      	mov	r1, r3
 80023e0:	200a      	movs	r0, #10
 80023e2:	f7ff fd65 	bl	8001eb0 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2203      	movs	r2, #3
 80023ec:	4619      	mov	r1, r3
 80023ee:	2010      	movs	r0, #16
 80023f0:	f7ff fd5e 	bl	8001eb0 <nRF24_WriteRegisters>

}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	240000a8 	.word	0x240000a8

08002400 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002406:	f7ff fe28 	bl	800205a <nRF24_ReadStatus>
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002414:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fe26 	bl	800206a <nRF24_WriteStatus>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002430:	f7ff fdb8 	bl	8001fa4 <nRF24_ReadConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d104      	bne.n	8002448 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e003      	b.n	8002450 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800244e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fdae 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800246a:	f7ff fd9b 	bl	8001fa4 <nRF24_ReadConfig>
 800246e:	4603      	mov	r3, r0
 8002470:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	f043 0320 	orr.w	r3, r3, #32
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e003      	b.n	800248a <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	f023 0320 	bic.w	r3, r3, #32
 8002488:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fd91 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024a4:	f7ff fd7e 	bl	8001fa4 <nRF24_ReadConfig>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d104      	bne.n	80024bc <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	f043 0310 	orr.w	r3, r3, #16
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	e003      	b.n	80024c4 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	f023 0310 	bic.w	r3, r3, #16
 80024c2:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fd74 	bl	8001fb4 <nRF24_WriteConfig>
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80024dc:	2220      	movs	r2, #32
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	20a0      	movs	r0, #160	@ 0xa0
 80024e2:	f7ff fce5 	bl	8001eb0 <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80024f6:	2201      	movs	r2, #1
 80024f8:	2140      	movs	r1, #64	@ 0x40
 80024fa:	4810      	ldr	r0, [pc, #64]	@ (800253c <nRF24_WaitTX+0x4c>)
 80024fc:	f00b ff50 	bl	800e3a0 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff fc2f 	bl	8001d64 <nRF24_Delay>
	NRF24_CE_LOW;
 8002506:	2200      	movs	r2, #0
 8002508:	2140      	movs	r1, #64	@ 0x40
 800250a:	480c      	ldr	r0, [pc, #48]	@ (800253c <nRF24_WaitTX+0x4c>)
 800250c:	f00b ff48 	bl	800e3a0 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8002510:	2001      	movs	r0, #1
 8002512:	f7ff fc27 	bl	8001d64 <nRF24_Delay>
		status = nRF24_ReadStatus();
 8002516:	f7ff fda0 	bl	800205a <nRF24_ReadStatus>
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <nRF24_WaitTX+0x42>
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0ee      	beq.n	8002510 <nRF24_WaitTX+0x20>

}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	58020400 	.word	0x58020400

08002540 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002548:	2220      	movs	r2, #32
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	2061      	movs	r0, #97	@ 0x61
 800254e:	f7ff fc65 	bl	8001e1c <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8002552:	2140      	movs	r1, #64	@ 0x40
 8002554:	2007      	movs	r0, #7
 8002556:	f7ff fc85 	bl	8001e64 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 800255a:	f7ff fd7e 	bl	800205a <nRF24_ReadStatus>
 800255e:	4603      	mov	r3, r0
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002568:	2120      	movs	r1, #32
 800256a:	2007      	movs	r0, #7
 800256c:	f7ff fc7a 	bl	8001e64 <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8002582:	f000 f811 	bl	80025a8 <nRF24_ReadFifoStatus>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	fa42 f303 	asr.w	r3, r2, r3
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 80025ac:	2017      	movs	r0, #23
 80025ae:	f7ff fc11 	bl	8001dd4 <nRF24_ReadRegister>
 80025b2:	4603      	mov	r3, r0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80025c0:	4a25      	ldr	r2, [pc, #148]	@ (8002658 <nRF24_Init+0xa0>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80025c6:	2200      	movs	r2, #0
 80025c8:	2140      	movs	r1, #64	@ 0x40
 80025ca:	4824      	ldr	r0, [pc, #144]	@ (800265c <nRF24_Init+0xa4>)
 80025cc:	f00b fee8 	bl	800e3a0 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80025d0:	2201      	movs	r2, #1
 80025d2:	2180      	movs	r1, #128	@ 0x80
 80025d4:	4821      	ldr	r0, [pc, #132]	@ (800265c <nRF24_Init+0xa4>)
 80025d6:	f00b fee3 	bl	800e3a0 <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 80025da:	200a      	movs	r0, #10
 80025dc:	f006 fd82 	bl	80090e4 <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80025e0:	2003      	movs	r0, #3
 80025e2:	f7ff fcf5 	bl	8001fd0 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 80025e6:	2001      	movs	r0, #1
 80025e8:	f7ff fd11 	bl	800200e <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80025ec:	2001      	movs	r0, #1
 80025ee:	f7ff fd7f 	bl	80020f0 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7ff fd99 	bl	800212a <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 80025f8:	2100      	movs	r1, #0
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7ff fdb2 	bl	8002164 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8002600:	2100      	movs	r1, #0
 8002602:	201c      	movs	r0, #28
 8002604:	f7ff fc2e 	bl	8001e64 <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8002608:	2120      	movs	r1, #32
 800260a:	2000      	movs	r0, #0
 800260c:	f7ff fdd6 	bl	80021bc <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 8002610:	200f      	movs	r0, #15
 8002612:	f7ff fdc2 	bl	800219a <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002616:	2101      	movs	r1, #1
 8002618:	2000      	movs	r0, #0
 800261a:	f7ff fdeb 	bl	80021f4 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800261e:	2101      	movs	r1, #1
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff fe1c 	bl	800225e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002626:	2003      	movs	r0, #3
 8002628:	f7ff fe4e 	bl	80022c8 <nRF24_SetAddressWidth>

	HAL_Delay(1);
 800262c:	2001      	movs	r0, #1
 800262e:	f006 fd59 	bl	80090e4 <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 8002632:	2001      	movs	r0, #1
 8002634:	f7ff fef7 	bl	8002426 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff ff11 	bl	8002460 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 800263e:	2000      	movs	r0, #0
 8002640:	f7ff ff2b 	bl	800249a <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 8002644:	2001      	movs	r0, #1
 8002646:	f006 fd4d 	bl	80090e4 <HAL_Delay>

	nRF24_ClearInterrupts();
 800264a:	f7ff fed9 	bl	8002400 <nRF24_ClearInterrupts>


}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	240000a4 	.word	0x240000a4
 800265c:	58020400 	.word	0x58020400

08002660 <nRF24_Inittest>:
void nRF24_Inittest(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	xz[0] = nRF24_ReadRegister(NRF24_RF_SETUP); // Radio power
 8002664:	2006      	movs	r0, #6
 8002666:	f7ff fbb5 	bl	8001dd4 <nRF24_ReadRegister>
 800266a:	4603      	mov	r3, r0
 800266c:	461a      	mov	r2, r3
 800266e:	4b1d      	ldr	r3, [pc, #116]	@ (80026e4 <nRF24_Inittest+0x84>)
 8002670:	701a      	strb	r2, [r3, #0]
	//z = nRF24_ReadRegister(NRF24_RF_SETUP); // Data Rate
	xz[1] = nRF24_ReadConfig(); // Enable CRC //
 8002672:	f7ff fc97 	bl	8001fa4 <nRF24_ReadConfig>
 8002676:	4603      	mov	r3, r0
 8002678:	461a      	mov	r2, r3
 800267a:	4b1a      	ldr	r3, [pc, #104]	@ (80026e4 <nRF24_Inittest+0x84>)
 800267c:	705a      	strb	r2, [r3, #1]
	//z = nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
	xz[2] = nRF24_ReadRegister(NRF24_SETUP_RETR); // 1000us, 7 times
 800267e:	2004      	movs	r0, #4
 8002680:	f7ff fba8 	bl	8001dd4 <nRF24_ReadRegister>
 8002684:	4603      	mov	r3, r0
 8002686:	461a      	mov	r2, r3
 8002688:	4b16      	ldr	r3, [pc, #88]	@ (80026e4 <nRF24_Inittest+0x84>)
 800268a:	709a      	strb	r2, [r3, #2]
	xz[3] = nRF24_ReadRegister(NRF24_RF_CH);
 800268c:	2005      	movs	r0, #5
 800268e:	f7ff fba1 	bl	8001dd4 <nRF24_ReadRegister>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <nRF24_Inittest+0x84>)
 8002698:	70da      	strb	r2, [r3, #3]
	z = nRF24_ReadRegister(NRF24_FEATURE); // Enable dynamic payload feature
	z = nRF24_ReadRegister(NRF24_DYNPD); // Enable dynamic payloads for all pipes
#else
	//nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	//nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
	xz[4] = nRF24_ReadRegister(NRF24_RX_PW_P0);
 800269a:	2011      	movs	r0, #17
 800269c:	f7ff fb9a 	bl	8001dd4 <nRF24_ReadRegister>
 80026a0:	4603      	mov	r3, r0
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b0f      	ldr	r3, [pc, #60]	@ (80026e4 <nRF24_Inittest+0x84>)
 80026a6:	711a      	strb	r2, [r3, #4]
#endif
	xz[5] = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80026a8:	2002      	movs	r0, #2
 80026aa:	f7ff fb93 	bl	8001dd4 <nRF24_ReadRegister>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b0c      	ldr	r3, [pc, #48]	@ (80026e4 <nRF24_Inittest+0x84>)
 80026b4:	715a      	strb	r2, [r3, #5]
	xz[6] = nRF24_ReadRegister(NRF24_EN_AA);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7ff fb8c 	bl	8001dd4 <nRF24_ReadRegister>
 80026bc:	4603      	mov	r3, r0
 80026be:	461a      	mov	r2, r3
 80026c0:	4b08      	ldr	r3, [pc, #32]	@ (80026e4 <nRF24_Inittest+0x84>)
 80026c2:	719a      	strb	r2, [r3, #6]
	xz[7] = nRF24_ReadRegister(NRF24_SETUP_AW);
 80026c4:	2003      	movs	r0, #3
 80026c6:	f7ff fb85 	bl	8001dd4 <nRF24_ReadRegister>
 80026ca:	4603      	mov	r3, r0
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <nRF24_Inittest+0x84>)
 80026d0:	71da      	strb	r2, [r3, #7]
	xz[8] = nRF24_ReadConfig();
 80026d2:	f7ff fc67 	bl	8001fa4 <nRF24_ReadConfig>
 80026d6:	4603      	mov	r3, r0
 80026d8:	461a      	mov	r2, r3
 80026da:	4b02      	ldr	r3, [pc, #8]	@ (80026e4 <nRF24_Inittest+0x84>)
 80026dc:	721a      	strb	r2, [r3, #8]

}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	00000154 	.word	0x00000154

080026e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026ec:	f3bf 8f4f 	dsb	sy
}
 80026f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80026f2:	4b06      	ldr	r3, [pc, #24]	@ (800270c <__NVIC_SystemReset+0x24>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80026fa:	4904      	ldr	r1, [pc, #16]	@ (800270c <__NVIC_SystemReset+0x24>)
 80026fc:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <__NVIC_SystemReset+0x28>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002702:	f3bf 8f4f 	dsb	sy
}
 8002706:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <__NVIC_SystemReset+0x20>
 800270c:	e000ed00 	.word	0xe000ed00
 8002710:	05fa0004 	.word	0x05fa0004

08002714 <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	75fb      	strb	r3, [r7, #23]
 800271e:	2300      	movs	r3, #0
 8002720:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 8002722:	4b1f      	ldr	r3, [pc, #124]	@ (80027a0 <interpretcommand+0x8c>)
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	e02e      	b.n	800278c <interpretcommand+0x78>

		if(words[j] == ' '){
 800272e:	4a1d      	ldr	r2, [pc, #116]	@ (80027a4 <interpretcommand+0x90>)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4413      	add	r3, r2
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b20      	cmp	r3, #32
 8002738:	d102      	bne.n	8002740 <interpretcommand+0x2c>
			vcount++;
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	3301      	adds	r3, #1
 800273e:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 8002740:	7dfb      	ldrb	r3, [r7, #23]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d108      	bne.n	8002758 <interpretcommand+0x44>
			command[j] = words[j];
 8002746:	4a17      	ldr	r2, [pc, #92]	@ (80027a4 <interpretcommand+0x90>)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	7819      	ldrb	r1, [r3, #0]
 800274e:	4a16      	ldr	r2, [pc, #88]	@ (80027a8 <interpretcommand+0x94>)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4413      	add	r3, r2
 8002754:	460a      	mov	r2, r1
 8002756:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d113      	bne.n	8002786 <interpretcommand+0x72>
			value1[J1] = words[j];
 800275e:	7dbb      	ldrb	r3, [r7, #22]
 8002760:	4910      	ldr	r1, [pc, #64]	@ (80027a4 <interpretcommand+0x90>)
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	440a      	add	r2, r1
 8002766:	7812      	ldrb	r2, [r2, #0]
 8002768:	3318      	adds	r3, #24
 800276a:	443b      	add	r3, r7
 800276c:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 8002770:	7dba      	ldrb	r2, [r7, #22]
 8002772:	7dbb      	ldrb	r3, [r7, #22]
 8002774:	3218      	adds	r2, #24
 8002776:	443a      	add	r2, r7
 8002778:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 800277c:	4a0b      	ldr	r2, [pc, #44]	@ (80027ac <interpretcommand+0x98>)
 800277e:	54d1      	strb	r1, [r2, r3]
			J1++;
 8002780:	7dbb      	ldrb	r3, [r7, #22]
 8002782:	3301      	adds	r3, #1
 8002784:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	3301      	adds	r3, #1
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002790:	ddcd      	ble.n	800272e <interpretcommand+0x1a>
		}
	}
}
 8002792:	bf00      	nop
 8002794:	bf00      	nop
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	000041a6 	.word	0x000041a6
 80027a4:	0000419c 	.word	0x0000419c
 80027a8:	00004198 	.word	0x00004198
 80027ac:	00004188 	.word	0x00004188

080027b0 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b50      	cmp	r3, #80	@ 0x50
 80027c0:	d14c      	bne.n	800285c <executecommand+0xac>
	{
		p_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80027c2:	4bd5      	ldr	r3, [pc, #852]	@ (8002b18 <executecommand+0x368>)
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ce:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002b1c <executecommand+0x36c>
 80027d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027d6:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002b20 <executecommand+0x370>
 80027da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027de:	4bce      	ldr	r3, [pc, #824]	@ (8002b18 <executecommand+0x368>)
 80027e0:	789b      	ldrb	r3, [r3, #2]
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ea:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002b1c <executecommand+0x36c>
 80027ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80027f2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80027f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027fe:	4bc6      	ldr	r3, [pc, #792]	@ (8002b18 <executecommand+0x368>)
 8002800:	78db      	ldrb	r3, [r3, #3]
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280a:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002b1c <executecommand+0x36c>
 800280e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002812:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002816:	4bc0      	ldr	r3, [pc, #768]	@ (8002b18 <executecommand+0x368>)
 8002818:	791b      	ldrb	r3, [r3, #4]
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002822:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002b1c <executecommand+0x36c>
 8002826:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800282a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800282e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002832:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002836:	4bb8      	ldr	r3, [pc, #736]	@ (8002b18 <executecommand+0x368>)
 8002838:	795b      	ldrb	r3, [r3, #5]
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002842:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002b1c <executecommand+0x36c>
 8002846:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800284a:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002b20 <executecommand+0x370>
 800284e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002856:	4bb3      	ldr	r3, [pc, #716]	@ (8002b24 <executecommand+0x374>)
 8002858:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'I')
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b49      	cmp	r3, #73	@ 0x49
 8002862:	d14f      	bne.n	8002904 <executecommand+0x154>
	{
		i_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002864:	4bac      	ldr	r3, [pc, #688]	@ (8002b18 <executecommand+0x368>)
 8002866:	785b      	ldrb	r3, [r3, #1]
 8002868:	ee07 3a90 	vmov	s15, r3
 800286c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002870:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002b1c <executecommand+0x36c>
 8002874:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002878:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002b20 <executecommand+0x370>
 800287c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002880:	4ba5      	ldr	r3, [pc, #660]	@ (8002b18 <executecommand+0x368>)
 8002882:	789b      	ldrb	r3, [r3, #2]
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288c:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002b1c <executecommand+0x36c>
 8002890:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002894:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002898:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800289c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a0:	4b9d      	ldr	r3, [pc, #628]	@ (8002b18 <executecommand+0x368>)
 80028a2:	78db      	ldrb	r3, [r3, #3]
 80028a4:	ee07 3a90 	vmov	s15, r3
 80028a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ac:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002b1c <executecommand+0x36c>
 80028b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b8:	4b97      	ldr	r3, [pc, #604]	@ (8002b18 <executecommand+0x368>)
 80028ba:	791b      	ldrb	r3, [r3, #4]
 80028bc:	ee07 3a90 	vmov	s15, r3
 80028c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c4:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002b1c <executecommand+0x36c>
 80028c8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80028cc:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80028d0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002b18 <executecommand+0x368>)
 80028da:	795b      	ldrb	r3, [r3, #5]
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e4:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002b1c <executecommand+0x36c>
 80028e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80028ec:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002b20 <executecommand+0x370>
 80028f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f8:	4b8b      	ldr	r3, [pc, #556]	@ (8002b28 <executecommand+0x378>)
 80028fa:	edc3 7a00 	vstr	s15, [r3]
		error_sum_pitch = 0;
 80028fe:	4b8b      	ldr	r3, [pc, #556]	@ (8002b2c <executecommand+0x37c>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'D')
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b44      	cmp	r3, #68	@ 0x44
 800290a:	d14c      	bne.n	80029a6 <executecommand+0x1f6>
	{
		d_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 800290c:	4b82      	ldr	r3, [pc, #520]	@ (8002b18 <executecommand+0x368>)
 800290e:	785b      	ldrb	r3, [r3, #1]
 8002910:	ee07 3a90 	vmov	s15, r3
 8002914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002918:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002b1c <executecommand+0x36c>
 800291c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002920:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002b30 <executecommand+0x380>
 8002924:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002928:	4b7b      	ldr	r3, [pc, #492]	@ (8002b18 <executecommand+0x368>)
 800292a:	789b      	ldrb	r3, [r3, #2]
 800292c:	ee07 3a90 	vmov	s15, r3
 8002930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002934:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002b1c <executecommand+0x36c>
 8002938:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800293c:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002b20 <executecommand+0x370>
 8002940:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002948:	4b73      	ldr	r3, [pc, #460]	@ (8002b18 <executecommand+0x368>)
 800294a:	78db      	ldrb	r3, [r3, #3]
 800294c:	ee07 3a90 	vmov	s15, r3
 8002950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002954:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002b1c <executecommand+0x36c>
 8002958:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800295c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002960:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002964:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002968:	4b6b      	ldr	r3, [pc, #428]	@ (8002b18 <executecommand+0x368>)
 800296a:	791b      	ldrb	r3, [r3, #4]
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002974:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002b1c <executecommand+0x36c>
 8002978:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800297c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002980:	4b65      	ldr	r3, [pc, #404]	@ (8002b18 <executecommand+0x368>)
 8002982:	795b      	ldrb	r3, [r3, #5]
 8002984:	ee07 3a90 	vmov	s15, r3
 8002988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800298c:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002b1c <executecommand+0x36c>
 8002990:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002994:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002998:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800299c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a0:	4b64      	ldr	r3, [pc, #400]	@ (8002b34 <executecommand+0x384>)
 80029a2:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'p')
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b70      	cmp	r3, #112	@ 0x70
 80029ac:	d14c      	bne.n	8002a48 <executecommand+0x298>
	{
		p_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80029ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002b18 <executecommand+0x368>)
 80029b0:	785b      	ldrb	r3, [r3, #1]
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ba:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002b1c <executecommand+0x36c>
 80029be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029c2:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002b20 <executecommand+0x370>
 80029c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029ca:	4b53      	ldr	r3, [pc, #332]	@ (8002b18 <executecommand+0x368>)
 80029cc:	789b      	ldrb	r3, [r3, #2]
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d6:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002b1c <executecommand+0x36c>
 80029da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029de:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80029e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002b18 <executecommand+0x368>)
 80029ec:	78db      	ldrb	r3, [r3, #3]
 80029ee:	ee07 3a90 	vmov	s15, r3
 80029f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f6:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002b1c <executecommand+0x36c>
 80029fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a02:	4b45      	ldr	r3, [pc, #276]	@ (8002b18 <executecommand+0x368>)
 8002a04:	791b      	ldrb	r3, [r3, #4]
 8002a06:	ee07 3a90 	vmov	s15, r3
 8002a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a0e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002b1c <executecommand+0x36c>
 8002a12:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a16:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a1a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a22:	4b3d      	ldr	r3, [pc, #244]	@ (8002b18 <executecommand+0x368>)
 8002a24:	795b      	ldrb	r3, [r3, #5]
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002b1c <executecommand+0x36c>
 8002a32:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a36:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002b20 <executecommand+0x370>
 8002a3a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a42:	4b3d      	ldr	r3, [pc, #244]	@ (8002b38 <executecommand+0x388>)
 8002a44:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'i')
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b69      	cmp	r3, #105	@ 0x69
 8002a4e:	d14f      	bne.n	8002af0 <executecommand+0x340>
	{
		i_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002a50:	4b31      	ldr	r3, [pc, #196]	@ (8002b18 <executecommand+0x368>)
 8002a52:	785b      	ldrb	r3, [r3, #1]
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002b1c <executecommand+0x36c>
 8002a60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a64:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002b20 <executecommand+0x370>
 8002a68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002b18 <executecommand+0x368>)
 8002a6e:	789b      	ldrb	r3, [r3, #2]
 8002a70:	ee07 3a90 	vmov	s15, r3
 8002a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a78:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002b1c <executecommand+0x36c>
 8002a7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a80:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a8c:	4b22      	ldr	r3, [pc, #136]	@ (8002b18 <executecommand+0x368>)
 8002a8e:	78db      	ldrb	r3, [r3, #3]
 8002a90:	ee07 3a90 	vmov	s15, r3
 8002a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a98:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002b1c <executecommand+0x36c>
 8002a9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002aa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b18 <executecommand+0x368>)
 8002aa6:	791b      	ldrb	r3, [r3, #4]
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab0:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002b1c <executecommand+0x36c>
 8002ab4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ab8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002abc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac4:	4b14      	ldr	r3, [pc, #80]	@ (8002b18 <executecommand+0x368>)
 8002ac6:	795b      	ldrb	r3, [r3, #5]
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002b1c <executecommand+0x36c>
 8002ad4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ad8:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002b20 <executecommand+0x370>
 8002adc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae4:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <executecommand+0x38c>)
 8002ae6:	edc3 7a00 	vstr	s15, [r3]
		error_sum_angular_rate_pitch = 0;
 8002aea:	4b15      	ldr	r3, [pc, #84]	@ (8002b40 <executecommand+0x390>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'd')
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b64      	cmp	r3, #100	@ 0x64
 8002af6:	d164      	bne.n	8002bc2 <executecommand+0x412>
	{
		d_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002af8:	4b07      	ldr	r3, [pc, #28]	@ (8002b18 <executecommand+0x368>)
 8002afa:	785b      	ldrb	r3, [r3, #1]
 8002afc:	ee07 3a90 	vmov	s15, r3
 8002b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b04:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002b1c <executecommand+0x36c>
 8002b08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b0c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002b30 <executecommand+0x380>
 8002b10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b14:	e016      	b.n	8002b44 <executecommand+0x394>
 8002b16:	bf00      	nop
 8002b18:	00004188 	.word	0x00004188
 8002b1c:	42400000 	.word	0x42400000
 8002b20:	42c80000 	.word	0x42c80000
 8002b24:	000040b4 	.word	0x000040b4
 8002b28:	000040c0 	.word	0x000040c0
 8002b2c:	00004084 	.word	0x00004084
 8002b30:	447a0000 	.word	0x447a0000
 8002b34:	000040cc 	.word	0x000040cc
 8002b38:	00004114 	.word	0x00004114
 8002b3c:	00004120 	.word	0x00004120
 8002b40:	00004090 	.word	0x00004090
 8002b44:	4bd3      	ldr	r3, [pc, #844]	@ (8002e94 <executecommand+0x6e4>)
 8002b46:	789b      	ldrb	r3, [r3, #2]
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b50:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002e98 <executecommand+0x6e8>
 8002b54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b58:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002e9c <executecommand+0x6ec>
 8002b5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b64:	4bcb      	ldr	r3, [pc, #812]	@ (8002e94 <executecommand+0x6e4>)
 8002b66:	78db      	ldrb	r3, [r3, #3]
 8002b68:	ee07 3a90 	vmov	s15, r3
 8002b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b70:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002e98 <executecommand+0x6e8>
 8002b74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b78:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002b7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b84:	4bc3      	ldr	r3, [pc, #780]	@ (8002e94 <executecommand+0x6e4>)
 8002b86:	791b      	ldrb	r3, [r3, #4]
 8002b88:	ee07 3a90 	vmov	s15, r3
 8002b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b90:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002e98 <executecommand+0x6e8>
 8002b94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b9c:	4bbd      	ldr	r3, [pc, #756]	@ (8002e94 <executecommand+0x6e4>)
 8002b9e:	795b      	ldrb	r3, [r3, #5]
 8002ba0:	ee07 3a90 	vmov	s15, r3
 8002ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba8:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002e98 <executecommand+0x6e8>
 8002bac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002bb0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002bb4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bbc:	4bb8      	ldr	r3, [pc, #736]	@ (8002ea0 <executecommand+0x6f0>)
 8002bbe:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'F')
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b46      	cmp	r3, #70	@ 0x46
 8002bc8:	d150      	bne.n	8002c6c <executecommand+0x4bc>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002bca:	4bb2      	ldr	r3, [pc, #712]	@ (8002e94 <executecommand+0x6e4>)
 8002bcc:	785b      	ldrb	r3, [r3, #1]
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd6:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002e98 <executecommand+0x6e8>
 8002bda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bde:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002ea4 <executecommand+0x6f4>
 8002be2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002be6:	4bab      	ldr	r3, [pc, #684]	@ (8002e94 <executecommand+0x6e4>)
 8002be8:	789b      	ldrb	r3, [r3, #2]
 8002bea:	ee07 3a90 	vmov	s15, r3
 8002bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bf2:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002e98 <executecommand+0x6e8>
 8002bf6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bfa:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002e9c <executecommand+0x6ec>
 8002bfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c06:	4ba3      	ldr	r3, [pc, #652]	@ (8002e94 <executecommand+0x6e4>)
 8002c08:	78db      	ldrb	r3, [r3, #3]
 8002c0a:	ee07 3a90 	vmov	s15, r3
 8002c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c12:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002e98 <executecommand+0x6e8>
 8002c16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c1a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c26:	4b9b      	ldr	r3, [pc, #620]	@ (8002e94 <executecommand+0x6e4>)
 8002c28:	791b      	ldrb	r3, [r3, #4]
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c32:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002e98 <executecommand+0x6e8>
 8002c36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c3e:	4b95      	ldr	r3, [pc, #596]	@ (8002e94 <executecommand+0x6e4>)
 8002c40:	795b      	ldrb	r3, [r3, #5]
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c4a:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002e98 <executecommand+0x6e8>
 8002c4e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c52:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002c56:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c62:	ee17 3a90 	vmov	r3, s15
 8002c66:	b21a      	sxth	r2, r3
 8002c68:	4b8f      	ldr	r3, [pc, #572]	@ (8002ea8 <executecommand+0x6f8>)
 8002c6a:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b66      	cmp	r3, #102	@ 0x66
 8002c72:	d150      	bne.n	8002d16 <executecommand+0x566>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002c74:	4b87      	ldr	r3, [pc, #540]	@ (8002e94 <executecommand+0x6e4>)
 8002c76:	785b      	ldrb	r3, [r3, #1]
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c80:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002e98 <executecommand+0x6e8>
 8002c84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c88:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002ea4 <executecommand+0x6f4>
 8002c8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c90:	4b80      	ldr	r3, [pc, #512]	@ (8002e94 <executecommand+0x6e4>)
 8002c92:	789b      	ldrb	r3, [r3, #2]
 8002c94:	ee07 3a90 	vmov	s15, r3
 8002c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002e98 <executecommand+0x6e8>
 8002ca0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ca4:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002e9c <executecommand+0x6ec>
 8002ca8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cb0:	4b78      	ldr	r3, [pc, #480]	@ (8002e94 <executecommand+0x6e4>)
 8002cb2:	78db      	ldrb	r3, [r3, #3]
 8002cb4:	ee07 3a90 	vmov	s15, r3
 8002cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cbc:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002e98 <executecommand+0x6e8>
 8002cc0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cc4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002cc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd0:	4b70      	ldr	r3, [pc, #448]	@ (8002e94 <executecommand+0x6e4>)
 8002cd2:	791b      	ldrb	r3, [r3, #4]
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cdc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002e98 <executecommand+0x6e8>
 8002ce0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8002e94 <executecommand+0x6e4>)
 8002cea:	795b      	ldrb	r3, [r3, #5]
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf4:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002e98 <executecommand+0x6e8>
 8002cf8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002cfc:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d00:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d0c:	ee17 3a90 	vmov	r3, s15
 8002d10:	b21a      	sxth	r2, r3
 8002d12:	4b66      	ldr	r3, [pc, #408]	@ (8002eac <executecommand+0x6fc>)
 8002d14:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b61      	cmp	r3, #97	@ 0x61
 8002d1c:	d14c      	bne.n	8002db8 <executecommand+0x608>
		{
			p_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8002e94 <executecommand+0x6e4>)
 8002d20:	785b      	ldrb	r3, [r3, #1]
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2a:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002e98 <executecommand+0x6e8>
 8002d2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d32:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002e9c <executecommand+0x6ec>
 8002d36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d3a:	4b56      	ldr	r3, [pc, #344]	@ (8002e94 <executecommand+0x6e4>)
 8002d3c:	789b      	ldrb	r3, [r3, #2]
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d46:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002e98 <executecommand+0x6e8>
 8002d4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d4e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e94 <executecommand+0x6e4>)
 8002d5c:	78db      	ldrb	r3, [r3, #3]
 8002d5e:	ee07 3a90 	vmov	s15, r3
 8002d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d66:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002e98 <executecommand+0x6e8>
 8002d6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d72:	4b48      	ldr	r3, [pc, #288]	@ (8002e94 <executecommand+0x6e4>)
 8002d74:	791b      	ldrb	r3, [r3, #4]
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d7e:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002e98 <executecommand+0x6e8>
 8002d82:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d86:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d8a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d92:	4b40      	ldr	r3, [pc, #256]	@ (8002e94 <executecommand+0x6e4>)
 8002d94:	795b      	ldrb	r3, [r3, #5]
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9e:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002e98 <executecommand+0x6e8>
 8002da2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002da6:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002e9c <executecommand+0x6ec>
 8002daa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db2:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb0 <executecommand+0x700>)
 8002db4:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'b')
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b62      	cmp	r3, #98	@ 0x62
 8002dbe:	d14f      	bne.n	8002e60 <executecommand+0x6b0>
		{
			i_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002dc0:	4b34      	ldr	r3, [pc, #208]	@ (8002e94 <executecommand+0x6e4>)
 8002dc2:	785b      	ldrb	r3, [r3, #1]
 8002dc4:	ee07 3a90 	vmov	s15, r3
 8002dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dcc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002e98 <executecommand+0x6e8>
 8002dd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dd4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002e9c <executecommand+0x6ec>
 8002dd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8002e94 <executecommand+0x6e4>)
 8002dde:	789b      	ldrb	r3, [r3, #2]
 8002de0:	ee07 3a90 	vmov	s15, r3
 8002de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de8:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002e98 <executecommand+0x6e8>
 8002dec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002df0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002df4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dfc:	4b25      	ldr	r3, [pc, #148]	@ (8002e94 <executecommand+0x6e4>)
 8002dfe:	78db      	ldrb	r3, [r3, #3]
 8002e00:	ee07 3a90 	vmov	s15, r3
 8002e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e08:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002e98 <executecommand+0x6e8>
 8002e0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e14:	4b1f      	ldr	r3, [pc, #124]	@ (8002e94 <executecommand+0x6e4>)
 8002e16:	791b      	ldrb	r3, [r3, #4]
 8002e18:	ee07 3a90 	vmov	s15, r3
 8002e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e20:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002e98 <executecommand+0x6e8>
 8002e24:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e28:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002e2c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e34:	4b17      	ldr	r3, [pc, #92]	@ (8002e94 <executecommand+0x6e4>)
 8002e36:	795b      	ldrb	r3, [r3, #5]
 8002e38:	ee07 3a90 	vmov	s15, r3
 8002e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e40:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002e98 <executecommand+0x6e8>
 8002e44:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e48:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002e9c <executecommand+0x6ec>
 8002e4c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e54:	4b17      	ldr	r3, [pc, #92]	@ (8002eb4 <executecommand+0x704>)
 8002e56:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = 0;
 8002e5a:	4b17      	ldr	r3, [pc, #92]	@ (8002eb8 <executecommand+0x708>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'c')
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b63      	cmp	r3, #99	@ 0x63
 8002e66:	d166      	bne.n	8002f36 <executecommand+0x786>
		{
			d_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002e68:	4b0a      	ldr	r3, [pc, #40]	@ (8002e94 <executecommand+0x6e4>)
 8002e6a:	785b      	ldrb	r3, [r3, #1]
 8002e6c:	ee07 3a90 	vmov	s15, r3
 8002e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e74:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002e98 <executecommand+0x6e8>
 8002e78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e7c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002ea4 <executecommand+0x6f4>
 8002e80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e84:	4b03      	ldr	r3, [pc, #12]	@ (8002e94 <executecommand+0x6e4>)
 8002e86:	789b      	ldrb	r3, [r3, #2]
 8002e88:	ee07 3a90 	vmov	s15, r3
 8002e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e90:	e018      	b.n	8002ec4 <executecommand+0x714>
 8002e92:	bf00      	nop
 8002e94:	00004188 	.word	0x00004188
 8002e98:	42400000 	.word	0x42400000
 8002e9c:	42c80000 	.word	0x42c80000
 8002ea0:	0000412c 	.word	0x0000412c
 8002ea4:	447a0000 	.word	0x447a0000
 8002ea8:	0000405c 	.word	0x0000405c
 8002eac:	0000405e 	.word	0x0000405e
 8002eb0:	000040b8 	.word	0x000040b8
 8002eb4:	000040c4 	.word	0x000040c4
 8002eb8:	00004088 	.word	0x00004088
 8002ebc:	42400000 	.word	0x42400000
 8002ec0:	42c80000 	.word	0x42c80000
 8002ec4:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 8002ebc <executecommand+0x70c>
 8002ec8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ecc:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002ec0 <executecommand+0x710>
 8002ed0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed8:	4bd5      	ldr	r3, [pc, #852]	@ (8003230 <executecommand+0xa80>)
 8002eda:	78db      	ldrb	r3, [r3, #3]
 8002edc:	ee07 3a90 	vmov	s15, r3
 8002ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ee4:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 8003234 <executecommand+0xa84>
 8002ee8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002eec:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ef0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ef4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ef8:	4bcd      	ldr	r3, [pc, #820]	@ (8003230 <executecommand+0xa80>)
 8002efa:	791b      	ldrb	r3, [r3, #4]
 8002efc:	ee07 3a90 	vmov	s15, r3
 8002f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f04:	eddf 6acb 	vldr	s13, [pc, #812]	@ 8003234 <executecommand+0xa84>
 8002f08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f10:	4bc7      	ldr	r3, [pc, #796]	@ (8003230 <executecommand+0xa80>)
 8002f12:	795b      	ldrb	r3, [r3, #5]
 8002f14:	ee07 3a90 	vmov	s15, r3
 8002f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f1c:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 8003234 <executecommand+0xa84>
 8002f20:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f24:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002f28:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f30:	4bc1      	ldr	r3, [pc, #772]	@ (8003238 <executecommand+0xa88>)
 8002f32:	edc3 7a00 	vstr	s15, [r3]
		}
		if(command[0] == 'e')
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b65      	cmp	r3, #101	@ 0x65
 8002f3c:	d14c      	bne.n	8002fd8 <executecommand+0x828>
		{
			p_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002f3e:	4bbc      	ldr	r3, [pc, #752]	@ (8003230 <executecommand+0xa80>)
 8002f40:	785b      	ldrb	r3, [r3, #1]
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4a:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8003234 <executecommand+0xa84>
 8002f4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f52:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 800323c <executecommand+0xa8c>
 8002f56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f5a:	4bb5      	ldr	r3, [pc, #724]	@ (8003230 <executecommand+0xa80>)
 8002f5c:	789b      	ldrb	r3, [r3, #2]
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f66:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 8003234 <executecommand+0xa84>
 8002f6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f6e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f7a:	4bad      	ldr	r3, [pc, #692]	@ (8003230 <executecommand+0xa80>)
 8002f7c:	78db      	ldrb	r3, [r3, #3]
 8002f7e:	ee07 3a90 	vmov	s15, r3
 8002f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f86:	eddf 6aab 	vldr	s13, [pc, #684]	@ 8003234 <executecommand+0xa84>
 8002f8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f92:	4ba7      	ldr	r3, [pc, #668]	@ (8003230 <executecommand+0xa80>)
 8002f94:	791b      	ldrb	r3, [r3, #4]
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9e:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 8003234 <executecommand+0xa84>
 8002fa2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fa6:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002faa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fb2:	4b9f      	ldr	r3, [pc, #636]	@ (8003230 <executecommand+0xa80>)
 8002fb4:	795b      	ldrb	r3, [r3, #5]
 8002fb6:	ee07 3a90 	vmov	s15, r3
 8002fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fbe:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 8003234 <executecommand+0xa84>
 8002fc2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fc6:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 800323c <executecommand+0xa8c>
 8002fca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd2:	4b9b      	ldr	r3, [pc, #620]	@ (8003240 <executecommand+0xa90>)
 8002fd4:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'g')
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b67      	cmp	r3, #103	@ 0x67
 8002fde:	d14f      	bne.n	8003080 <executecommand+0x8d0>
		{
			i_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002fe0:	4b93      	ldr	r3, [pc, #588]	@ (8003230 <executecommand+0xa80>)
 8002fe2:	785b      	ldrb	r3, [r3, #1]
 8002fe4:	ee07 3a90 	vmov	s15, r3
 8002fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fec:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8003234 <executecommand+0xa84>
 8002ff0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ff4:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800323c <executecommand+0xa8c>
 8002ff8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ffc:	4b8c      	ldr	r3, [pc, #560]	@ (8003230 <executecommand+0xa80>)
 8002ffe:	789b      	ldrb	r3, [r3, #2]
 8003000:	ee07 3a90 	vmov	s15, r3
 8003004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003008:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8003234 <executecommand+0xa84>
 800300c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003010:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003014:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003018:	ee37 7a27 	vadd.f32	s14, s14, s15
 800301c:	4b84      	ldr	r3, [pc, #528]	@ (8003230 <executecommand+0xa80>)
 800301e:	78db      	ldrb	r3, [r3, #3]
 8003020:	ee07 3a90 	vmov	s15, r3
 8003024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003028:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8003234 <executecommand+0xa84>
 800302c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003030:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003034:	4b7e      	ldr	r3, [pc, #504]	@ (8003230 <executecommand+0xa80>)
 8003036:	791b      	ldrb	r3, [r3, #4]
 8003038:	ee07 3a90 	vmov	s15, r3
 800303c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003040:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8003234 <executecommand+0xa84>
 8003044:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003048:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800304c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003054:	4b76      	ldr	r3, [pc, #472]	@ (8003230 <executecommand+0xa80>)
 8003056:	795b      	ldrb	r3, [r3, #5]
 8003058:	ee07 3a90 	vmov	s15, r3
 800305c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003060:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003234 <executecommand+0xa84>
 8003064:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003068:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 800323c <executecommand+0xa8c>
 800306c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003074:	4b73      	ldr	r3, [pc, #460]	@ (8003244 <executecommand+0xa94>)
 8003076:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = 0;
 800307a:	4b73      	ldr	r3, [pc, #460]	@ (8003248 <executecommand+0xa98>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'h')
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b68      	cmp	r3, #104	@ 0x68
 8003086:	d14c      	bne.n	8003122 <executecommand+0x972>
		{
			d_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003088:	4b69      	ldr	r3, [pc, #420]	@ (8003230 <executecommand+0xa80>)
 800308a:	785b      	ldrb	r3, [r3, #1]
 800308c:	ee07 3a90 	vmov	s15, r3
 8003090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003094:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8003234 <executecommand+0xa84>
 8003098:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800309c:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800324c <executecommand+0xa9c>
 80030a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030a4:	4b62      	ldr	r3, [pc, #392]	@ (8003230 <executecommand+0xa80>)
 80030a6:	789b      	ldrb	r3, [r3, #2]
 80030a8:	ee07 3a90 	vmov	s15, r3
 80030ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b0:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8003234 <executecommand+0xa84>
 80030b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030b8:	eddf 6a60 	vldr	s13, [pc, #384]	@ 800323c <executecommand+0xa8c>
 80030bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030c4:	4b5a      	ldr	r3, [pc, #360]	@ (8003230 <executecommand+0xa80>)
 80030c6:	78db      	ldrb	r3, [r3, #3]
 80030c8:	ee07 3a90 	vmov	s15, r3
 80030cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d0:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003234 <executecommand+0xa84>
 80030d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030d8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e4:	4b52      	ldr	r3, [pc, #328]	@ (8003230 <executecommand+0xa80>)
 80030e6:	791b      	ldrb	r3, [r3, #4]
 80030e8:	ee07 3a90 	vmov	s15, r3
 80030ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f0:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8003234 <executecommand+0xa84>
 80030f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030fc:	4b4c      	ldr	r3, [pc, #304]	@ (8003230 <executecommand+0xa80>)
 80030fe:	795b      	ldrb	r3, [r3, #5]
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003108:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8003234 <executecommand+0xa84>
 800310c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003110:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003114:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800311c:	4b4c      	ldr	r3, [pc, #304]	@ (8003250 <executecommand+0xaa0>)
 800311e:	edc3 7a00 	vstr	s15, [r3]





		if(command[0] == 'j')
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b6a      	cmp	r3, #106	@ 0x6a
 8003128:	d14c      	bne.n	80031c4 <executecommand+0xa14>
			{
				p_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800312a:	4b41      	ldr	r3, [pc, #260]	@ (8003230 <executecommand+0xa80>)
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	ee07 3a90 	vmov	s15, r3
 8003132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003136:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003234 <executecommand+0xa84>
 800313a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800313e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800323c <executecommand+0xa8c>
 8003142:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003146:	4b3a      	ldr	r3, [pc, #232]	@ (8003230 <executecommand+0xa80>)
 8003148:	789b      	ldrb	r3, [r3, #2]
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003152:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003234 <executecommand+0xa84>
 8003156:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800315a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800315e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003162:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003166:	4b32      	ldr	r3, [pc, #200]	@ (8003230 <executecommand+0xa80>)
 8003168:	78db      	ldrb	r3, [r3, #3]
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003172:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8003234 <executecommand+0xa84>
 8003176:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800317a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800317e:	4b2c      	ldr	r3, [pc, #176]	@ (8003230 <executecommand+0xa80>)
 8003180:	791b      	ldrb	r3, [r3, #4]
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8003234 <executecommand+0xa84>
 800318e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003192:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003196:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800319a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800319e:	4b24      	ldr	r3, [pc, #144]	@ (8003230 <executecommand+0xa80>)
 80031a0:	795b      	ldrb	r3, [r3, #5]
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031aa:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8003234 <executecommand+0xa84>
 80031ae:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031b2:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800323c <executecommand+0xa8c>
 80031b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031be:	4b25      	ldr	r3, [pc, #148]	@ (8003254 <executecommand+0xaa4>)
 80031c0:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'k')
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b6b      	cmp	r3, #107	@ 0x6b
 80031ca:	d167      	bne.n	800329c <executecommand+0xaec>
			{
				i_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80031cc:	4b18      	ldr	r3, [pc, #96]	@ (8003230 <executecommand+0xa80>)
 80031ce:	785b      	ldrb	r3, [r3, #1]
 80031d0:	ee07 3a90 	vmov	s15, r3
 80031d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003234 <executecommand+0xa84>
 80031dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031e0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800323c <executecommand+0xa8c>
 80031e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031e8:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <executecommand+0xa80>)
 80031ea:	789b      	ldrb	r3, [r3, #2]
 80031ec:	ee07 3a90 	vmov	s15, r3
 80031f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f4:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8003234 <executecommand+0xa84>
 80031f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031fc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003200:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003208:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <executecommand+0xa80>)
 800320a:	78db      	ldrb	r3, [r3, #3]
 800320c:	ee07 3a90 	vmov	s15, r3
 8003210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003214:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8003234 <executecommand+0xa84>
 8003218:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800321c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003220:	4b03      	ldr	r3, [pc, #12]	@ (8003230 <executecommand+0xa80>)
 8003222:	791b      	ldrb	r3, [r3, #4]
 8003224:	ee07 3a90 	vmov	s15, r3
 8003228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322c:	e016      	b.n	800325c <executecommand+0xaac>
 800322e:	bf00      	nop
 8003230:	00004188 	.word	0x00004188
 8003234:	42400000 	.word	0x42400000
 8003238:	000040d0 	.word	0x000040d0
 800323c:	42c80000 	.word	0x42c80000
 8003240:	00004118 	.word	0x00004118
 8003244:	00004124 	.word	0x00004124
 8003248:	00004094 	.word	0x00004094
 800324c:	447a0000 	.word	0x447a0000
 8003250:	00004130 	.word	0x00004130
 8003254:	000040bc 	.word	0x000040bc
 8003258:	42400000 	.word	0x42400000
 800325c:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 8003258 <executecommand+0xaa8>
 8003260:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003264:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003268:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800326c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003270:	4bba      	ldr	r3, [pc, #744]	@ (800355c <executecommand+0xdac>)
 8003272:	795b      	ldrb	r3, [r3, #5]
 8003274:	ee07 3a90 	vmov	s15, r3
 8003278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800327c:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 8003560 <executecommand+0xdb0>
 8003280:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003284:	ed9f 6ab7 	vldr	s12, [pc, #732]	@ 8003564 <executecommand+0xdb4>
 8003288:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800328c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003290:	4bb5      	ldr	r3, [pc, #724]	@ (8003568 <executecommand+0xdb8>)
 8003292:	edc3 7a00 	vstr	s15, [r3]
				error_sum_yaw = 0;
 8003296:	4bb5      	ldr	r3, [pc, #724]	@ (800356c <executecommand+0xdbc>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'l')
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b6c      	cmp	r3, #108	@ 0x6c
 80032a2:	d14c      	bne.n	800333e <executecommand+0xb8e>
			{
				d_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 80032a4:	4bad      	ldr	r3, [pc, #692]	@ (800355c <executecommand+0xdac>)
 80032a6:	785b      	ldrb	r3, [r3, #1]
 80032a8:	ee07 3a90 	vmov	s15, r3
 80032ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b0:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 8003560 <executecommand+0xdb0>
 80032b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032b8:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8003570 <executecommand+0xdc0>
 80032bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032c0:	4ba6      	ldr	r3, [pc, #664]	@ (800355c <executecommand+0xdac>)
 80032c2:	789b      	ldrb	r3, [r3, #2]
 80032c4:	ee07 3a90 	vmov	s15, r3
 80032c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032cc:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 8003560 <executecommand+0xdb0>
 80032d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032d4:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8003564 <executecommand+0xdb4>
 80032d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032e0:	4b9e      	ldr	r3, [pc, #632]	@ (800355c <executecommand+0xdac>)
 80032e2:	78db      	ldrb	r3, [r3, #3]
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ec:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8003560 <executecommand+0xdb0>
 80032f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032f4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80032f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003300:	4b96      	ldr	r3, [pc, #600]	@ (800355c <executecommand+0xdac>)
 8003302:	791b      	ldrb	r3, [r3, #4]
 8003304:	ee07 3a90 	vmov	s15, r3
 8003308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330c:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8003560 <executecommand+0xdb0>
 8003310:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003314:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003318:	4b90      	ldr	r3, [pc, #576]	@ (800355c <executecommand+0xdac>)
 800331a:	795b      	ldrb	r3, [r3, #5]
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003324:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 8003560 <executecommand+0xdb0>
 8003328:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800332c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003330:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003338:	4b8e      	ldr	r3, [pc, #568]	@ (8003574 <executecommand+0xdc4>)
 800333a:	edc3 7a00 	vstr	s15, [r3]
			}
			if(command[0] == 'm')
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b6d      	cmp	r3, #109	@ 0x6d
 8003344:	d14c      	bne.n	80033e0 <executecommand+0xc30>
			{
				p_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003346:	4b85      	ldr	r3, [pc, #532]	@ (800355c <executecommand+0xdac>)
 8003348:	785b      	ldrb	r3, [r3, #1]
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003352:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8003560 <executecommand+0xdb0>
 8003356:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800335a:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8003564 <executecommand+0xdb4>
 800335e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003362:	4b7e      	ldr	r3, [pc, #504]	@ (800355c <executecommand+0xdac>)
 8003364:	789b      	ldrb	r3, [r3, #2]
 8003366:	ee07 3a90 	vmov	s15, r3
 800336a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336e:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8003560 <executecommand+0xdb0>
 8003372:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003376:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800337a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800337e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003382:	4b76      	ldr	r3, [pc, #472]	@ (800355c <executecommand+0xdac>)
 8003384:	78db      	ldrb	r3, [r3, #3]
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338e:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003560 <executecommand+0xdb0>
 8003392:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003396:	ee37 7a27 	vadd.f32	s14, s14, s15
 800339a:	4b70      	ldr	r3, [pc, #448]	@ (800355c <executecommand+0xdac>)
 800339c:	791b      	ldrb	r3, [r3, #4]
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a6:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8003560 <executecommand+0xdb0>
 80033aa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033ae:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80033b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ba:	4b68      	ldr	r3, [pc, #416]	@ (800355c <executecommand+0xdac>)
 80033bc:	795b      	ldrb	r3, [r3, #5]
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c6:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8003560 <executecommand+0xdb0>
 80033ca:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033ce:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 8003564 <executecommand+0xdb4>
 80033d2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033da:	4b67      	ldr	r3, [pc, #412]	@ (8003578 <executecommand+0xdc8>)
 80033dc:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'n')
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b6e      	cmp	r3, #110	@ 0x6e
 80033e6:	d14f      	bne.n	8003488 <executecommand+0xcd8>
			{
				i_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80033e8:	4b5c      	ldr	r3, [pc, #368]	@ (800355c <executecommand+0xdac>)
 80033ea:	785b      	ldrb	r3, [r3, #1]
 80033ec:	ee07 3a90 	vmov	s15, r3
 80033f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f4:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8003560 <executecommand+0xdb0>
 80033f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033fc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003564 <executecommand+0xdb4>
 8003400:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003404:	4b55      	ldr	r3, [pc, #340]	@ (800355c <executecommand+0xdac>)
 8003406:	789b      	ldrb	r3, [r3, #2]
 8003408:	ee07 3a90 	vmov	s15, r3
 800340c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003410:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8003560 <executecommand+0xdb0>
 8003414:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003418:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800341c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003420:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003424:	4b4d      	ldr	r3, [pc, #308]	@ (800355c <executecommand+0xdac>)
 8003426:	78db      	ldrb	r3, [r3, #3]
 8003428:	ee07 3a90 	vmov	s15, r3
 800342c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003430:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8003560 <executecommand+0xdb0>
 8003434:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003438:	ee37 7a27 	vadd.f32	s14, s14, s15
 800343c:	4b47      	ldr	r3, [pc, #284]	@ (800355c <executecommand+0xdac>)
 800343e:	791b      	ldrb	r3, [r3, #4]
 8003440:	ee07 3a90 	vmov	s15, r3
 8003444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003448:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8003560 <executecommand+0xdb0>
 800344c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003450:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003454:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003458:	ee37 7a27 	vadd.f32	s14, s14, s15
 800345c:	4b3f      	ldr	r3, [pc, #252]	@ (800355c <executecommand+0xdac>)
 800345e:	795b      	ldrb	r3, [r3, #5]
 8003460:	ee07 3a90 	vmov	s15, r3
 8003464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003468:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003560 <executecommand+0xdb0>
 800346c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003470:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 8003564 <executecommand+0xdb4>
 8003474:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800347c:	4b3f      	ldr	r3, [pc, #252]	@ (800357c <executecommand+0xdcc>)
 800347e:	edc3 7a00 	vstr	s15, [r3]
				error_sum_angular_rate_yaw = 0;
 8003482:	4b3f      	ldr	r3, [pc, #252]	@ (8003580 <executecommand+0xdd0>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'o')
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b6f      	cmp	r3, #111	@ 0x6f
 800348e:	d14c      	bne.n	800352a <executecommand+0xd7a>
			{
				d_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003490:	4b32      	ldr	r3, [pc, #200]	@ (800355c <executecommand+0xdac>)
 8003492:	785b      	ldrb	r3, [r3, #1]
 8003494:	ee07 3a90 	vmov	s15, r3
 8003498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8003560 <executecommand+0xdb0>
 80034a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034a4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003570 <executecommand+0xdc0>
 80034a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034ac:	4b2b      	ldr	r3, [pc, #172]	@ (800355c <executecommand+0xdac>)
 80034ae:	789b      	ldrb	r3, [r3, #2]
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b8:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8003560 <executecommand+0xdb0>
 80034bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034c0:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8003564 <executecommand+0xdb4>
 80034c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034cc:	4b23      	ldr	r3, [pc, #140]	@ (800355c <executecommand+0xdac>)
 80034ce:	78db      	ldrb	r3, [r3, #3]
 80034d0:	ee07 3a90 	vmov	s15, r3
 80034d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d8:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8003560 <executecommand+0xdb0>
 80034dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034e0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80034e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034ec:	4b1b      	ldr	r3, [pc, #108]	@ (800355c <executecommand+0xdac>)
 80034ee:	791b      	ldrb	r3, [r3, #4]
 80034f0:	ee07 3a90 	vmov	s15, r3
 80034f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f8:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8003560 <executecommand+0xdb0>
 80034fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003500:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003504:	4b15      	ldr	r3, [pc, #84]	@ (800355c <executecommand+0xdac>)
 8003506:	795b      	ldrb	r3, [r3, #5]
 8003508:	ee07 3a90 	vmov	s15, r3
 800350c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003510:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003560 <executecommand+0xdb0>
 8003514:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003518:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800351c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003524:	4b17      	ldr	r3, [pc, #92]	@ (8003584 <executecommand+0xdd4>)
 8003526:	edc3 7a00 	vstr	s15, [r3]
			}

	if(command[0] == 'r'){
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b72      	cmp	r3, #114	@ 0x72
 8003530:	d101      	bne.n	8003536 <executecommand+0xd86>
		NVIC_SystemReset();
 8003532:	f7ff f8d9 	bl	80026e8 <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e007      	b.n	800354c <executecommand+0xd9c>
		UASRT_PID_VAL[i] = 0;
 800353c:	4a07      	ldr	r2, [pc, #28]	@ (800355c <executecommand+0xdac>)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4413      	add	r3, r2
 8003542:	2200      	movs	r2, #0
 8003544:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3301      	adds	r3, #1
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b0e      	cmp	r3, #14
 8003550:	ddf4      	ble.n	800353c <executecommand+0xd8c>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 8003552:	bf00      	nop
 8003554:	bf00      	nop
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	00004188 	.word	0x00004188
 8003560:	42400000 	.word	0x42400000
 8003564:	42c80000 	.word	0x42c80000
 8003568:	000040c8 	.word	0x000040c8
 800356c:	0000408c 	.word	0x0000408c
 8003570:	447a0000 	.word	0x447a0000
 8003574:	000040d4 	.word	0x000040d4
 8003578:	0000411c 	.word	0x0000411c
 800357c:	00004128 	.word	0x00004128
 8003580:	00004098 	.word	0x00004098
 8003584:	00004134 	.word	0x00004134

08003588 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	@ 0x28
 800358c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800358e:	1d3b      	adds	r3, r7, #4
 8003590:	2224      	movs	r2, #36	@ 0x24
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f01a fb7d 	bl	801dc94 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800359a:	4b2e      	ldr	r3, [pc, #184]	@ (8003654 <MX_ADC2_Init+0xcc>)
 800359c:	4a2e      	ldr	r2, [pc, #184]	@ (8003658 <MX_ADC2_Init+0xd0>)
 800359e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80035a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80035a6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80035a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035aa:	2208      	movs	r2, #8
 80035ac:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80035ae:	4b29      	ldr	r3, [pc, #164]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80035b4:	4b27      	ldr	r3, [pc, #156]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035b6:	2204      	movs	r2, #4
 80035b8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80035ba:	4b26      	ldr	r3, [pc, #152]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035bc:	2200      	movs	r2, #0
 80035be:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80035c0:	4b24      	ldr	r3, [pc, #144]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80035c6:	4b23      	ldr	r3, [pc, #140]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80035cc:	4b21      	ldr	r3, [pc, #132]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 80035d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035d6:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 80035da:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80035dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80035e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035e6:	2203      	movs	r2, #3
 80035e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80035ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80035f2:	4b18      	ldr	r3, [pc, #96]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80035f8:	4b16      	ldr	r3, [pc, #88]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8003600:	4b14      	ldr	r3, [pc, #80]	@ (8003654 <MX_ADC2_Init+0xcc>)
 8003602:	2201      	movs	r2, #1
 8003604:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003606:	4813      	ldr	r0, [pc, #76]	@ (8003654 <MX_ADC2_Init+0xcc>)
 8003608:	f006 f87c 	bl	8009704 <HAL_ADC_Init>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8003612:	f004 f9fd 	bl	8007a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003616:	4b11      	ldr	r3, [pc, #68]	@ (800365c <MX_ADC2_Init+0xd4>)
 8003618:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800361a:	2306      	movs	r3, #6
 800361c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800361e:	2307      	movs	r3, #7
 8003620:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003622:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003626:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003628:	2304      	movs	r3, #4
 800362a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8003630:	2300      	movs	r3, #0
 8003632:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003636:	1d3b      	adds	r3, r7, #4
 8003638:	4619      	mov	r1, r3
 800363a:	4806      	ldr	r0, [pc, #24]	@ (8003654 <MX_ADC2_Init+0xcc>)
 800363c:	f006 fda8 	bl	800a190 <HAL_ADC_ConfigChannel>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 8003646:	f004 f9e3 	bl	8007a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800364a:	bf00      	nop
 800364c:	3728      	adds	r7, #40	@ 0x28
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	240000ac 	.word	0x240000ac
 8003658:	40022100 	.word	0x40022100
 800365c:	19200040 	.word	0x19200040

08003660 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	@ 0x28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	f107 0314 	add.w	r3, r7, #20
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a34      	ldr	r2, [pc, #208]	@ (8003750 <HAL_ADC_MspInit+0xf0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d162      	bne.n	8003748 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003682:	4b34      	ldr	r3, [pc, #208]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 8003684:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003688:	4a32      	ldr	r2, [pc, #200]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 800368a:	f043 0320 	orr.w	r3, r3, #32
 800368e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003692:	4b30      	ldr	r3, [pc, #192]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 8003694:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80036a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 80036a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 80036a8:	f043 0320 	orr.w	r3, r3, #32
 80036ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036b0:	4b28      	ldr	r3, [pc, #160]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 80036b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80036be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036c4:	2303      	movs	r3, #3
 80036c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	4619      	mov	r1, r3
 80036d2:	4821      	ldr	r0, [pc, #132]	@ (8003758 <HAL_ADC_MspInit+0xf8>)
 80036d4:	f00a fca4 	bl	800e020 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 80036d8:	4b20      	ldr	r3, [pc, #128]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036da:	4a21      	ldr	r2, [pc, #132]	@ (8003760 <HAL_ADC_MspInit+0x100>)
 80036dc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80036de:	4b1f      	ldr	r3, [pc, #124]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036e0:	220a      	movs	r2, #10
 80036e2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036e4:	4b1d      	ldr	r3, [pc, #116]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80036ea:	4b1c      	ldr	r3, [pc, #112]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80036f0:	4b1a      	ldr	r3, [pc, #104]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036f6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036f8:	4b18      	ldr	r3, [pc, #96]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036fe:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003700:	4b16      	ldr	r3, [pc, #88]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 8003702:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003706:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003708:	4b14      	ldr	r3, [pc, #80]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 800370a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800370e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003710:	4b12      	ldr	r3, [pc, #72]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 8003712:	2200      	movs	r2, #0
 8003714:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003716:	4b11      	ldr	r3, [pc, #68]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 8003718:	2200      	movs	r2, #0
 800371a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800371c:	480f      	ldr	r0, [pc, #60]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 800371e:	f007 fe2d 	bl	800b37c <HAL_DMA_Init>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 8003728:	f004 f972 	bl	8007a10 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a0b      	ldr	r2, [pc, #44]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 8003730:	659a      	str	r2, [r3, #88]	@ 0x58
 8003732:	4a0a      	ldr	r2, [pc, #40]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003738:	2200      	movs	r2, #0
 800373a:	2100      	movs	r1, #0
 800373c:	2012      	movs	r0, #18
 800373e:	f007 fd70 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003742:	2012      	movs	r0, #18
 8003744:	f007 fd87 	bl	800b256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003748:	bf00      	nop
 800374a:	3728      	adds	r7, #40	@ 0x28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40022100 	.word	0x40022100
 8003754:	58024400 	.word	0x58024400
 8003758:	58021400 	.word	0x58021400
 800375c:	2400011c 	.word	0x2400011c
 8003760:	40020410 	.word	0x40020410

08003764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800376a:	4b19      	ldr	r3, [pc, #100]	@ (80037d0 <MX_DMA_Init+0x6c>)
 800376c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003770:	4a17      	ldr	r2, [pc, #92]	@ (80037d0 <MX_DMA_Init+0x6c>)
 8003772:	f043 0302 	orr.w	r3, r3, #2
 8003776:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800377a:	4b15      	ldr	r3, [pc, #84]	@ (80037d0 <MX_DMA_Init+0x6c>)
 800377c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003788:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <MX_DMA_Init+0x6c>)
 800378a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800378e:	4a10      	ldr	r2, [pc, #64]	@ (80037d0 <MX_DMA_Init+0x6c>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003798:	4b0d      	ldr	r3, [pc, #52]	@ (80037d0 <MX_DMA_Init+0x6c>)
 800379a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80037a6:	2200      	movs	r2, #0
 80037a8:	2100      	movs	r1, #0
 80037aa:	200b      	movs	r0, #11
 80037ac:	f007 fd39 	bl	800b222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80037b0:	200b      	movs	r0, #11
 80037b2:	f007 fd50 	bl	800b256 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80037b6:	2200      	movs	r2, #0
 80037b8:	2100      	movs	r1, #0
 80037ba:	2038      	movs	r0, #56	@ 0x38
 80037bc:	f007 fd31 	bl	800b222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80037c0:	2038      	movs	r0, #56	@ 0x38
 80037c2:	f007 fd48 	bl	800b256 <HAL_NVIC_EnableIRQ>

}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	58024400 	.word	0x58024400
 80037d4:	00000000 	.word	0x00000000

080037d8 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08e      	sub	sp, #56	@ 0x38
 80037dc:	af00      	add	r7, sp, #0
 80037de:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(wanted_pitch - now_pitch);
 80037f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003a28 <Thrust_filter+0x250>)
 80037f6:	ed93 7a00 	vldr	s14, [r3]
 80037fa:	4b8c      	ldr	r3, [pc, #560]	@ (8003a2c <Thrust_filter+0x254>)
 80037fc:	edd3 7a00 	vldr	s15, [r3]
 8003800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003804:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003808:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(wanted_rool - now_rool);
 800380c:	4b88      	ldr	r3, [pc, #544]	@ (8003a30 <Thrust_filter+0x258>)
 800380e:	ed93 7a00 	vldr	s14, [r3]
 8003812:	4b88      	ldr	r3, [pc, #544]	@ (8003a34 <Thrust_filter+0x25c>)
 8003814:	edd3 7a00 	vldr	s15, [r3]
 8003818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800381c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003820:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 8003824:	ed97 7b08 	vldr	d7, [r7, #32]
 8003828:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800382c:	eeb0 0a67 	vmov.f32	s0, s15
 8003830:	f003 fc70 	bl	8007114 <WartoscBezwgledna>
 8003834:	eef0 7a40 	vmov.f32	s15, s0
 8003838:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800383c:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 8003840:	ed97 7b06 	vldr	d7, [r7, #24]
 8003844:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003848:	eeb0 0a67 	vmov.f32	s0, s15
 800384c:	f003 fc62 	bl	8007114 <WartoscBezwgledna>
 8003850:	eef0 7a40 	vmov.f32	s15, s0
 8003854:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003858:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 800385c:	ed97 6b08 	vldr	d6, [r7, #32]
 8003860:	ed97 7b06 	vldr	d7, [r7, #24]
 8003864:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003868:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800386c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003870:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 8003874:	eeb0 0b47 	vmov.f64	d0, d7
 8003878:	f01a fa96 	bl	801dda8 <pow>
 800387c:	ed87 0b04 	vstr	d0, [r7, #16]
	if(wanted_thrust > 10500){
 8003880:	4b6d      	ldr	r3, [pc, #436]	@ (8003a38 <Thrust_filter+0x260>)
 8003882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003886:	f642 1204 	movw	r2, #10500	@ 0x2904
 800388a:	4293      	cmp	r3, r2
 800388c:	dd03      	ble.n	8003896 <Thrust_filter+0xbe>
		wanted_thrust = 10500;
 800388e:	4b6a      	ldr	r3, [pc, #424]	@ (8003a38 <Thrust_filter+0x260>)
 8003890:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003894:	801a      	strh	r2, [r3, #0]
	}

	thrust_error = wanted_thrust - MYDRON.THRUST;
 8003896:	4b68      	ldr	r3, [pc, #416]	@ (8003a38 <Thrust_filter+0x260>)
 8003898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800389c:	b29a      	uxth	r2, r3
 800389e:	4b67      	ldr	r3, [pc, #412]	@ (8003a3c <Thrust_filter+0x264>)
 80038a0:	885b      	ldrh	r3, [r3, #2]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 80038a8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	da13      	bge.n	80038d8 <Thrust_filter+0x100>
		thrust_error = WartoscBezwgledna(thrust_error);
 80038b0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038b4:	ee07 3a90 	vmov	s15, r3
 80038b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038bc:	eeb0 0a67 	vmov.f32	s0, s15
 80038c0:	f003 fc28 	bl	8007114 <WartoscBezwgledna>
 80038c4:	eef0 7a40 	vmov.f32	s15, s0
 80038c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038cc:	ee17 3a90 	vmov	r3, s15
 80038d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 80038d8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8097 	beq.w	8003a10 <Thrust_filter+0x238>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 80038e2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80038ee:	eeb0 0b47 	vmov.f64	d0, d7
 80038f2:	f01a fa05 	bl	801dd00 <sqrt>
 80038f6:	eeb0 7b40 	vmov.f64	d7, d0
 80038fa:	eeb0 0b47 	vmov.f64	d0, d7
 80038fe:	f01a f9ff 	bl	801dd00 <sqrt>
 8003902:	eeb0 7b40 	vmov.f64	d7, d0
 8003906:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8003a18 <Thrust_filter+0x240>
 800390a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800390e:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 8003912:	ed97 7b00 	vldr	d7, [r7]
 8003916:	ed9f 6b42 	vldr	d6, [pc, #264]	@ 8003a20 <Thrust_filter+0x248>
 800391a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800391e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003922:	ee26 5b07 	vmul.f64	d5, d6, d7
 8003926:	ed97 6b04 	vldr	d6, [r7, #16]
 800392a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800392e:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 8003932:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003936:	2b01      	cmp	r3, #1
 8003938:	d105      	bne.n	8003946 <Thrust_filter+0x16e>
			thrust_add = thrust_add*(-1);
 800393a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800393e:	eeb1 7b47 	vneg.f64	d7, d7
 8003942:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 8003946:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800394a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800394e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003956:	d513      	bpl.n	8003980 <Thrust_filter+0x1a8>
 8003958:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800395c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003960:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003968:	dd0a      	ble.n	8003980 <Thrust_filter+0x1a8>
			thrust_values = thrust_values + thrust_add;
 800396a:	4b35      	ldr	r3, [pc, #212]	@ (8003a40 <Thrust_filter+0x268>)
 800396c:	ed93 6b00 	vldr	d6, [r3]
 8003970:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003974:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003978:	4b31      	ldr	r3, [pc, #196]	@ (8003a40 <Thrust_filter+0x268>)
 800397a:	ed83 7b00 	vstr	d7, [r3]
 800397e:	e010      	b.n	80039a2 <Thrust_filter+0x1ca>
		}
		else{
			MYDRON.THRUST = MYDRON.THRUST + thrust_add;
 8003980:	4b2e      	ldr	r3, [pc, #184]	@ (8003a3c <Thrust_filter+0x264>)
 8003982:	885b      	ldrh	r3, [r3, #2]
 8003984:	ee07 3a90 	vmov	s15, r3
 8003988:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800398c:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003990:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003994:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003998:	ee17 3a90 	vmov	r3, s15
 800399c:	b29a      	uxth	r2, r3
 800399e:	4b27      	ldr	r3, [pc, #156]	@ (8003a3c <Thrust_filter+0x264>)
 80039a0:	805a      	strh	r2, [r3, #2]
		}

		if(thrust_values >= 1 || thrust_values <= -1){
 80039a2:	4b27      	ldr	r3, [pc, #156]	@ (8003a40 <Thrust_filter+0x268>)
 80039a4:	ed93 7b00 	vldr	d7, [r3]
 80039a8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80039ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b4:	da09      	bge.n	80039ca <Thrust_filter+0x1f2>
 80039b6:	4b22      	ldr	r3, [pc, #136]	@ (8003a40 <Thrust_filter+0x268>)
 80039b8:	ed93 7b00 	vldr	d7, [r3]
 80039bc:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80039c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c8:	d818      	bhi.n	80039fc <Thrust_filter+0x224>
			MYDRON.THRUST = MYDRON.THRUST + thrust_values;
 80039ca:	4b1c      	ldr	r3, [pc, #112]	@ (8003a3c <Thrust_filter+0x264>)
 80039cc:	885b      	ldrh	r3, [r3, #2]
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80039d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a40 <Thrust_filter+0x268>)
 80039d8:	ed93 7b00 	vldr	d7, [r3]
 80039dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80039e4:	ee17 3a90 	vmov	r3, s15
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	4b14      	ldr	r3, [pc, #80]	@ (8003a3c <Thrust_filter+0x264>)
 80039ec:	805a      	strh	r2, [r3, #2]
			thrust_values = 0;
 80039ee:	4914      	ldr	r1, [pc, #80]	@ (8003a40 <Thrust_filter+0x268>)
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(MYDRON.THRUST > 10000){//ograniczenie THRUST
 80039fc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a3c <Thrust_filter+0x264>)
 80039fe:	885b      	ldrh	r3, [r3, #2]
 8003a00:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d903      	bls.n	8003a10 <Thrust_filter+0x238>
			MYDRON.THRUST = 10000;
 8003a08:	4b0c      	ldr	r3, [pc, #48]	@ (8003a3c <Thrust_filter+0x264>)
 8003a0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a0e:	805a      	strh	r2, [r3, #2]
		}
	}
}
 8003a10:	bf00      	nop
 8003a12:	3738      	adds	r7, #56	@ 0x38
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	00000000 	.word	0x00000000
 8003a1c:	409f4000 	.word	0x409f4000
 8003a20:	30553261 	.word	0x30553261
 8003a24:	3f33a92a 	.word	0x3f33a92a
 8003a28:	00004050 	.word	0x00004050
 8003a2c:	00004060 	.word	0x00004060
 8003a30:	00004054 	.word	0x00004054
 8003a34:	00004064 	.word	0x00004064
 8003a38:	00004044 	.word	0x00004044
 8003a3c:	00000160 	.word	0x00000160
 8003a40:	00004048 	.word	0x00004048

08003a44 <PID_cal>:

	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_cal(float *PID_var, float *PID_FAC, uint8_t pry){//pitch = 1, rool = 2, yaw = 3
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	71fb      	strb	r3, [r7, #7]
	switch(pry){
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	2b05      	cmp	r3, #5
 8003a58:	f200 8270 	bhi.w	8003f3c <PID_cal+0x4f8>
 8003a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <PID_cal+0x20>)
 8003a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a62:	bf00      	nop
 8003a64:	08003a7d 	.word	0x08003a7d
 8003a68:	08003b57 	.word	0x08003b57
 8003a6c:	08003c31 	.word	0x08003c31
 8003a70:	08003d51 	.word	0x08003d51
 8003a74:	08003df5 	.word	0x08003df5
 8003a78:	08003e99 	.word	0x08003e99
		case 1://pitch

			*PID_var = PID_FAC[0]*(wanted_pitch - now_pitch);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	ed93 7a00 	vldr	s14, [r3]
 8003a82:	4ba2      	ldr	r3, [pc, #648]	@ (8003d0c <PID_cal+0x2c8>)
 8003a84:	edd3 6a00 	vldr	s13, [r3]
 8003a88:	4ba1      	ldr	r3, [pc, #644]	@ (8003d10 <PID_cal+0x2cc>)
 8003a8a:	edd3 7a00 	vldr	s15, [r3]
 8003a8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_pitch*looptime;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	ed93 7a00 	vldr	s14, [r3]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	edd3 6a00 	vldr	s13, [r3]
 8003aaa:	4b9a      	ldr	r3, [pc, #616]	@ (8003d14 <PID_cal+0x2d0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003aba:	4b97      	ldr	r3, [pc, #604]	@ (8003d18 <PID_cal+0x2d4>)
 8003abc:	edd3 7a00 	vldr	s15, [r3]
 8003ac0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((wanted_pitch - now_pitch) - old_error_pitch);//policzenie częsci D
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	3308      	adds	r3, #8
 8003ad2:	ed93 7a00 	vldr	s14, [r3]
 8003ad6:	4b8d      	ldr	r3, [pc, #564]	@ (8003d0c <PID_cal+0x2c8>)
 8003ad8:	edd3 6a00 	vldr	s13, [r3]
 8003adc:	4b8c      	ldr	r3, [pc, #560]	@ (8003d10 <PID_cal+0x2cc>)
 8003ade:	edd3 7a00 	vldr	s15, [r3]
 8003ae2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8003d1c <PID_cal+0x2d8>)
 8003ae8:	edd3 7a00 	vldr	s15, [r3]
 8003aec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	330c      	adds	r3, #12
 8003af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af8:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	3310      	adds	r3, #16
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	68d2      	ldr	r2, [r2, #12]
 8003b04:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	ed93 7a00 	vldr	s14, [r3]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	edd3 7a00 	vldr	s15, [r3]
 8003b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	edc3 7a00 	vstr	s15, [r3]

				if(*PID_var > 400){//PID_var jest w o/s, jezeli bendzei chcailo sie obracac szybciej niz.. przekroczy zakres pomiarowy akcelerometru
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	edd3 7a00 	vldr	s15, [r3]
 8003b24:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8003d20 <PID_cal+0x2dc>
 8003b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b30:	dd02      	ble.n	8003b38 <PID_cal+0xf4>
					*PID_var = 400;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4a7b      	ldr	r2, [pc, #492]	@ (8003d24 <PID_cal+0x2e0>)
 8003b36:	601a      	str	r2, [r3, #0]
				}
				if(*PID_var < -400){
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	edd3 7a00 	vldr	s15, [r3]
 8003b3e:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8003d28 <PID_cal+0x2e4>
 8003b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4a:	d400      	bmi.n	8003b4e <PID_cal+0x10a>
					*PID_var = -400;
				}
			break;
 8003b4c:	e1f7      	b.n	8003f3e <PID_cal+0x4fa>
					*PID_var = -400;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4a76      	ldr	r2, [pc, #472]	@ (8003d2c <PID_cal+0x2e8>)
 8003b52:	601a      	str	r2, [r3, #0]
			break;
 8003b54:	e1f3      	b.n	8003f3e <PID_cal+0x4fa>

		case 2://rool

			*PID_var = PID_FAC[0]*(wanted_rool - now_rool);
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	ed93 7a00 	vldr	s14, [r3]
 8003b5c:	4b74      	ldr	r3, [pc, #464]	@ (8003d30 <PID_cal+0x2ec>)
 8003b5e:	edd3 6a00 	vldr	s13, [r3]
 8003b62:	4b74      	ldr	r3, [pc, #464]	@ (8003d34 <PID_cal+0x2f0>)
 8003b64:	edd3 7a00 	vldr	s15, [r3]
 8003b68:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_rool*looptime;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	ed93 7a00 	vldr	s14, [r3]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	edd3 6a00 	vldr	s13, [r3]
 8003b84:	4b6c      	ldr	r3, [pc, #432]	@ (8003d38 <PID_cal+0x2f4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	ee07 3a90 	vmov	s15, r3
 8003b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b94:	4b60      	ldr	r3, [pc, #384]	@ (8003d18 <PID_cal+0x2d4>)
 8003b96:	edd3 7a00 	vldr	s15, [r3]
 8003b9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((wanted_rool - now_rool) - old_error_rool);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	3308      	adds	r3, #8
 8003bac:	ed93 7a00 	vldr	s14, [r3]
 8003bb0:	4b5f      	ldr	r3, [pc, #380]	@ (8003d30 <PID_cal+0x2ec>)
 8003bb2:	edd3 6a00 	vldr	s13, [r3]
 8003bb6:	4b5f      	ldr	r3, [pc, #380]	@ (8003d34 <PID_cal+0x2f0>)
 8003bb8:	edd3 7a00 	vldr	s15, [r3]
 8003bbc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003bc0:	4b5e      	ldr	r3, [pc, #376]	@ (8003d3c <PID_cal+0x2f8>)
 8003bc2:	edd3 7a00 	vldr	s15, [r3]
 8003bc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	330c      	adds	r3, #12
 8003bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd2:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	3310      	adds	r3, #16
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	68d2      	ldr	r2, [r2, #12]
 8003bde:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	ed93 7a00 	vldr	s14, [r3]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	330c      	adds	r3, #12
 8003bea:	edd3 7a00 	vldr	s15, [r3]
 8003bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	edc3 7a00 	vstr	s15, [r3]

			if(*PID_var > 400){
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	edd3 7a00 	vldr	s15, [r3]
 8003bfe:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003d20 <PID_cal+0x2dc>
 8003c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0a:	dd02      	ble.n	8003c12 <PID_cal+0x1ce>
				*PID_var = 400;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a45      	ldr	r2, [pc, #276]	@ (8003d24 <PID_cal+0x2e0>)
 8003c10:	601a      	str	r2, [r3, #0]
			}
			if(*PID_var < -400){
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	edd3 7a00 	vldr	s15, [r3]
 8003c18:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8003d28 <PID_cal+0x2e4>
 8003c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c24:	d400      	bmi.n	8003c28 <PID_cal+0x1e4>
				*PID_var = -400;
			}
			break;
 8003c26:	e18a      	b.n	8003f3e <PID_cal+0x4fa>
				*PID_var = -400;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a40      	ldr	r2, [pc, #256]	@ (8003d2c <PID_cal+0x2e8>)
 8003c2c:	601a      	str	r2, [r3, #0]
			break;
 8003c2e:	e186      	b.n	8003f3e <PID_cal+0x4fa>

		case 3:

			*PID_var = PID_FAC[0]*(wanted_yaw - now_yaw);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	ed93 7a00 	vldr	s14, [r3]
 8003c36:	4b42      	ldr	r3, [pc, #264]	@ (8003d40 <PID_cal+0x2fc>)
 8003c38:	edd3 6a00 	vldr	s13, [r3]
 8003c3c:	4b41      	ldr	r3, [pc, #260]	@ (8003d44 <PID_cal+0x300>)
 8003c3e:	edd3 7a00 	vldr	s15, [r3]
 8003c42:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_yaw*looptime;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	ed93 7a00 	vldr	s14, [r3]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	edd3 6a00 	vldr	s13, [r3]
 8003c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003d48 <PID_cal+0x304>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8003d18 <PID_cal+0x2d4>)
 8003c70:	edd3 7a00 	vldr	s15, [r3]
 8003c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((wanted_yaw - now_yaw) - old_error_yaw);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3308      	adds	r3, #8
 8003c86:	ed93 7a00 	vldr	s14, [r3]
 8003c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003d40 <PID_cal+0x2fc>)
 8003c8c:	edd3 6a00 	vldr	s13, [r3]
 8003c90:	4b2c      	ldr	r3, [pc, #176]	@ (8003d44 <PID_cal+0x300>)
 8003c92:	edd3 7a00 	vldr	s15, [r3]
 8003c96:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8003d4c <PID_cal+0x308>)
 8003c9c:	edd3 7a00 	vldr	s15, [r3]
 8003ca0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cac:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	3310      	adds	r3, #16
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	68d2      	ldr	r2, [r2, #12]
 8003cb8:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	ed93 7a00 	vldr	s14, [r3]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	edd3 7a00 	vldr	s15, [r3]
 8003cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	edc3 7a00 	vstr	s15, [r3]

			if(*PID_var > 400){
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	edd3 7a00 	vldr	s15, [r3]
 8003cd8:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003d20 <PID_cal+0x2dc>
 8003cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce4:	dd02      	ble.n	8003cec <PID_cal+0x2a8>
				*PID_var = 400;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8003d24 <PID_cal+0x2e0>)
 8003cea:	601a      	str	r2, [r3, #0]
			}
			if(*PID_var < -400){
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	edd3 7a00 	vldr	s15, [r3]
 8003cf2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003d28 <PID_cal+0x2e4>
 8003cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfe:	d400      	bmi.n	8003d02 <PID_cal+0x2be>
				*PID_var = -400;
			}
			break;
 8003d00:	e11d      	b.n	8003f3e <PID_cal+0x4fa>
				*PID_var = -400;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4a09      	ldr	r2, [pc, #36]	@ (8003d2c <PID_cal+0x2e8>)
 8003d06:	601a      	str	r2, [r3, #0]
			break;
 8003d08:	e119      	b.n	8003f3e <PID_cal+0x4fa>
 8003d0a:	bf00      	nop
 8003d0c:	00004050 	.word	0x00004050
 8003d10:	00004060 	.word	0x00004060
 8003d14:	00004084 	.word	0x00004084
 8003d18:	0801e754 	.word	0x0801e754
 8003d1c:	0000406c 	.word	0x0000406c
 8003d20:	43c80000 	.word	0x43c80000
 8003d24:	43c80000 	.word	0x43c80000
 8003d28:	c3c80000 	.word	0xc3c80000
 8003d2c:	c3c80000 	.word	0xc3c80000
 8003d30:	00004054 	.word	0x00004054
 8003d34:	00004064 	.word	0x00004064
 8003d38:	00004088 	.word	0x00004088
 8003d3c:	00004070 	.word	0x00004070
 8003d40:	00004058 	.word	0x00004058
 8003d44:	00004068 	.word	0x00004068
 8003d48:	0000408c 	.word	0x0000408c
 8003d4c:	00004074 	.word	0x00004074

		case 4:// angular rates pitch

			*PID_var = PID_FAC[0]*(pid_pitch - gx);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	ed93 7a00 	vldr	s14, [r3]
 8003d56:	4b7d      	ldr	r3, [pc, #500]	@ (8003f4c <PID_cal+0x508>)
 8003d58:	edd3 6a00 	vldr	s13, [r3]
 8003d5c:	4b7c      	ldr	r3, [pc, #496]	@ (8003f50 <PID_cal+0x50c>)
 8003d5e:	edd3 7a00 	vldr	s15, [r3]
 8003d62:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_pitch*looptime;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	ed93 7a00 	vldr	s14, [r3]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	edd3 6a00 	vldr	s13, [r3]
 8003d7e:	4b75      	ldr	r3, [pc, #468]	@ (8003f54 <PID_cal+0x510>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d8e:	4b72      	ldr	r3, [pc, #456]	@ (8003f58 <PID_cal+0x514>)
 8003d90:	edd3 7a00 	vldr	s15, [r3]
 8003d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	edc3 7a00 	vstr	s15, [r3]


			PID_FAC[3] = PID_FAC[2]*((pid_pitch - gx) - old_error_angular_rate_pitch);//policzenie częsci D
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	3308      	adds	r3, #8
 8003da6:	ed93 7a00 	vldr	s14, [r3]
 8003daa:	4b68      	ldr	r3, [pc, #416]	@ (8003f4c <PID_cal+0x508>)
 8003dac:	edd3 6a00 	vldr	s13, [r3]
 8003db0:	4b67      	ldr	r3, [pc, #412]	@ (8003f50 <PID_cal+0x50c>)
 8003db2:	edd3 7a00 	vldr	s15, [r3]
 8003db6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003dba:	4b68      	ldr	r3, [pc, #416]	@ (8003f5c <PID_cal+0x518>)
 8003dbc:	edd3 7a00 	vldr	s15, [r3]
 8003dc0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dcc:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	3310      	adds	r3, #16
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	68d2      	ldr	r2, [r2, #12]
 8003dd8:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	ed93 7a00 	vldr	s14, [r3]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	330c      	adds	r3, #12
 8003de4:	edd3 7a00 	vldr	s15, [r3]
 8003de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	edc3 7a00 	vstr	s15, [r3]

			break;
 8003df2:	e0a4      	b.n	8003f3e <PID_cal+0x4fa>

		case 5:// angular rates rool

			*PID_var = PID_FAC[0]*(pid_rool - gy);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	ed93 7a00 	vldr	s14, [r3]
 8003dfa:	4b59      	ldr	r3, [pc, #356]	@ (8003f60 <PID_cal+0x51c>)
 8003dfc:	edd3 6a00 	vldr	s13, [r3]
 8003e00:	4b58      	ldr	r3, [pc, #352]	@ (8003f64 <PID_cal+0x520>)
 8003e02:	edd3 7a00 	vldr	s15, [r3]
 8003e06:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_rool*looptime;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	ed93 7a00 	vldr	s14, [r3]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	edd3 6a00 	vldr	s13, [r3]
 8003e22:	4b51      	ldr	r3, [pc, #324]	@ (8003f68 <PID_cal+0x524>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e32:	4b49      	ldr	r3, [pc, #292]	@ (8003f58 <PID_cal+0x514>)
 8003e34:	edd3 7a00 	vldr	s15, [r3]
 8003e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((pid_rool - gy) - old_error_angular_rate_rool);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3308      	adds	r3, #8
 8003e4a:	ed93 7a00 	vldr	s14, [r3]
 8003e4e:	4b44      	ldr	r3, [pc, #272]	@ (8003f60 <PID_cal+0x51c>)
 8003e50:	edd3 6a00 	vldr	s13, [r3]
 8003e54:	4b43      	ldr	r3, [pc, #268]	@ (8003f64 <PID_cal+0x520>)
 8003e56:	edd3 7a00 	vldr	s15, [r3]
 8003e5a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e5e:	4b43      	ldr	r3, [pc, #268]	@ (8003f6c <PID_cal+0x528>)
 8003e60:	edd3 7a00 	vldr	s15, [r3]
 8003e64:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e70:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	3310      	adds	r3, #16
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	68d2      	ldr	r2, [r2, #12]
 8003e7c:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	ed93 7a00 	vldr	s14, [r3]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	330c      	adds	r3, #12
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003e96:	e052      	b.n	8003f3e <PID_cal+0x4fa>

		case 6:// angular rates yaw

			*PID_var = PID_FAC[0]*(pid_yaw - gz);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	ed93 7a00 	vldr	s14, [r3]
 8003e9e:	4b34      	ldr	r3, [pc, #208]	@ (8003f70 <PID_cal+0x52c>)
 8003ea0:	edd3 6a00 	vldr	s13, [r3]
 8003ea4:	4b33      	ldr	r3, [pc, #204]	@ (8003f74 <PID_cal+0x530>)
 8003ea6:	edd3 7a00 	vldr	s15, [r3]
 8003eaa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_yaw*looptime;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	ed93 7a00 	vldr	s14, [r3]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	edd3 6a00 	vldr	s13, [r3]
 8003ec6:	4b2c      	ldr	r3, [pc, #176]	@ (8003f78 <PID_cal+0x534>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	ee07 3a90 	vmov	s15, r3
 8003ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ed2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ed6:	4b20      	ldr	r3, [pc, #128]	@ (8003f58 <PID_cal+0x514>)
 8003ed8:	edd3 7a00 	vldr	s15, [r3]
 8003edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((pid_yaw - gz) - old_error_angular_rate_yaw);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	3308      	adds	r3, #8
 8003eee:	ed93 7a00 	vldr	s14, [r3]
 8003ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f70 <PID_cal+0x52c>)
 8003ef4:	edd3 6a00 	vldr	s13, [r3]
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f74 <PID_cal+0x530>)
 8003efa:	edd3 7a00 	vldr	s15, [r3]
 8003efe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003f02:	4b1e      	ldr	r3, [pc, #120]	@ (8003f7c <PID_cal+0x538>)
 8003f04:	edd3 7a00 	vldr	s15, [r3]
 8003f08:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	330c      	adds	r3, #12
 8003f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f14:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));//todo
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	3310      	adds	r3, #16
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	68d2      	ldr	r2, [r2, #12]
 8003f20:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	ed93 7a00 	vldr	s14, [r3]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	330c      	adds	r3, #12
 8003f2c:	edd3 7a00 	vldr	s15, [r3]
 8003f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003f3a:	e000      	b.n	8003f3e <PID_cal+0x4fa>
		default:
			break;
 8003f3c:	bf00      	nop
	}
}
 8003f3e:	bf00      	nop
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	0000409c 	.word	0x0000409c
 8003f50:	0000000c 	.word	0x0000000c
 8003f54:	00004090 	.word	0x00004090
 8003f58:	0801e754 	.word	0x0801e754
 8003f5c:	00004078 	.word	0x00004078
 8003f60:	000040a4 	.word	0x000040a4
 8003f64:	00000010 	.word	0x00000010
 8003f68:	00004094 	.word	0x00004094
 8003f6c:	0000407c 	.word	0x0000407c
 8003f70:	000040a0 	.word	0x000040a0
 8003f74:	00000014 	.word	0x00000014
 8003f78:	00004098 	.word	0x00004098
 8003f7c:	00004080 	.word	0x00004080

08003f80 <Get_batteryvalue>:

void Get_batteryvalue(void){
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 8003f84:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff8 <Get_batteryvalue+0x78>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 8003f8c:	ee07 3a90 	vmov	s15, r3
 8003f90:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003f94:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8003ff0 <Get_batteryvalue+0x70>
 8003f98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003f9c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003fa0:	ee17 3a90 	vmov	r3, s15
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	4b15      	ldr	r3, [pc, #84]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fa8:	801a      	strh	r2, [r3, #0]
	if(MYDRON.batterysize >= 100){
 8003faa:	4b14      	ldr	r3, [pc, #80]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	2b63      	cmp	r3, #99	@ 0x63
 8003fb0:	d902      	bls.n	8003fb8 <Get_batteryvalue+0x38>
		MYDRON.batterysize = 100;
 8003fb2:	4b12      	ldr	r3, [pc, #72]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fb4:	2264      	movs	r2, #100	@ 0x64
 8003fb6:	801a      	strh	r2, [r3, #0]
	}

	if(MYDRON.batterysize < 25){
 8003fb8:	4b10      	ldr	r3, [pc, #64]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	2b18      	cmp	r3, #24
 8003fbe:	d802      	bhi.n	8003fc6 <Get_batteryvalue+0x46>
		MYDRON.dron_status.Battery = DRON_BATTERY_RUN_OUT;
 8003fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fc2:	2207      	movs	r2, #7
 8003fc4:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize <= 10){
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	2b0a      	cmp	r3, #10
 8003fcc:	d802      	bhi.n	8003fd4 <Get_batteryvalue+0x54>
		MYDRON.dron_status.Battery = DRON_BATTERY_CRIT_VAL;
 8003fce:	4b0b      	ldr	r3, [pc, #44]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fd0:	2209      	movs	r2, #9
 8003fd2:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize >= 25){
 8003fd4:	4b09      	ldr	r3, [pc, #36]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	2b18      	cmp	r3, #24
 8003fda:	d902      	bls.n	8003fe2 <Get_batteryvalue+0x62>
		MYDRON.dron_status.Battery = DRON_BATTERY_OK;
 8003fdc:	4b07      	ldr	r3, [pc, #28]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fde:	2208      	movs	r2, #8
 8003fe0:	829a      	strh	r2, [r3, #20]
	}
}
 8003fe2:	bf00      	nop
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	f3af 8000 	nop.w
 8003ff0:	7ae147ae 	.word	0x7ae147ae
 8003ff4:	401dae14 	.word	0x401dae14
 8003ff8:	24000ed0 	.word	0x24000ed0
 8003ffc:	00000160 	.word	0x00000160

08004000 <SELECT>:
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
 8004004:	2200      	movs	r2, #0
 8004006:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800400a:	4802      	ldr	r0, [pc, #8]	@ (8004014 <SELECT+0x14>)
 800400c:	f00a f9c8 	bl	800e3a0 <HAL_GPIO_WritePin>
 8004010:	bf00      	nop
 8004012:	bd80      	pop	{r7, pc}
 8004014:	58020c00 	.word	0x58020c00

08004018 <DESELECT>:
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
 800401c:	2201      	movs	r2, #1
 800401e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004022:	4802      	ldr	r0, [pc, #8]	@ (800402c <DESELECT+0x14>)
 8004024:	f00a f9bc 	bl	800e3a0 <HAL_GPIO_WritePin>
 8004028:	bf00      	nop
 800402a:	bd80      	pop	{r7, pc}
 800402c:	58020c00 	.word	0x58020c00

08004030 <SPI_TxByte>:
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	71fb      	strb	r3, [r7, #7]
 800403a:	bf00      	nop
 800403c:	4b07      	ldr	r3, [pc, #28]	@ (800405c <SPI_TxByte+0x2c>)
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004044:	2b20      	cmp	r3, #32
 8004046:	d1f9      	bne.n	800403c <SPI_TxByte+0xc>
 8004048:	1df9      	adds	r1, r7, #7
 800404a:	2364      	movs	r3, #100	@ 0x64
 800404c:	2201      	movs	r2, #1
 800404e:	4804      	ldr	r0, [pc, #16]	@ (8004060 <SPI_TxByte+0x30>)
 8004050:	f010 fb02 	bl	8014658 <HAL_SPI_Transmit>
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40020010 	.word	0x40020010
 8004060:	240001ec 	.word	0x240001ec

08004064 <SPI_TxBuffer>:
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	807b      	strh	r3, [r7, #2]
 8004070:	bf00      	nop
 8004072:	4b08      	ldr	r3, [pc, #32]	@ (8004094 <SPI_TxBuffer+0x30>)
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800407a:	2b20      	cmp	r3, #32
 800407c:	d1f9      	bne.n	8004072 <SPI_TxBuffer+0xe>
 800407e:	887b      	ldrh	r3, [r7, #2]
 8004080:	461a      	mov	r2, r3
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4804      	ldr	r0, [pc, #16]	@ (8004098 <SPI_TxBuffer+0x34>)
 8004086:	f011 fa81 	bl	801558c <HAL_SPI_Transmit_DMA>
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40020010 	.word	0x40020010
 8004098:	240001ec 	.word	0x240001ec

0800409c <SPI_RxByte>:
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	23ff      	movs	r3, #255	@ 0xff
 80040a4:	71fb      	strb	r3, [r7, #7]
 80040a6:	bf00      	nop
 80040a8:	4b09      	ldr	r3, [pc, #36]	@ (80040d0 <SPI_RxByte+0x34>)
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d1f9      	bne.n	80040a8 <SPI_RxByte+0xc>
 80040b4:	1dba      	adds	r2, r7, #6
 80040b6:	1df9      	adds	r1, r7, #7
 80040b8:	2364      	movs	r3, #100	@ 0x64
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	2301      	movs	r3, #1
 80040be:	4805      	ldr	r0, [pc, #20]	@ (80040d4 <SPI_RxByte+0x38>)
 80040c0:	f010 ff2a 	bl	8014f18 <HAL_SPI_TransmitReceive>
 80040c4:	79bb      	ldrb	r3, [r7, #6]
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40020010 	.word	0x40020010
 80040d4:	240001ec 	.word	0x240001ec

080040d8 <SPI_RxBytePtr>:
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	f7ff ffdc 	bl	800409c <SPI_RxByte>
 80040e4:	4603      	mov	r3, r0
 80040e6:	461a      	mov	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	701a      	strb	r2, [r3, #0]
 80040ec:	bf00      	nop
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <SD_ReadyWait>:
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004124 <SD_ReadyWait+0x30>)
 80040fc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004100:	801a      	strh	r2, [r3, #0]
 8004102:	f7ff ffcb 	bl	800409c <SPI_RxByte>
 8004106:	4603      	mov	r3, r0
 8004108:	71fb      	strb	r3, [r7, #7]
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	2bff      	cmp	r3, #255	@ 0xff
 800410e:	d004      	beq.n	800411a <SD_ReadyWait+0x26>
 8004110:	4b04      	ldr	r3, [pc, #16]	@ (8004124 <SD_ReadyWait+0x30>)
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f3      	bne.n	8004102 <SD_ReadyWait+0xe>
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	4618      	mov	r0, r3
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	2400037c 	.word	0x2400037c

08004128 <SD_PowerOn>:
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	f7ff ff70 	bl	8004018 <DESELECT>
 8004138:	2300      	movs	r3, #0
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	e005      	b.n	800414a <SD_PowerOn+0x22>
 800413e:	20ff      	movs	r0, #255	@ 0xff
 8004140:	f7ff ff76 	bl	8004030 <SPI_TxByte>
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	3301      	adds	r3, #1
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b09      	cmp	r3, #9
 800414e:	ddf6      	ble.n	800413e <SD_PowerOn+0x16>
 8004150:	f7ff ff56 	bl	8004000 <SELECT>
 8004154:	2340      	movs	r3, #64	@ 0x40
 8004156:	703b      	strb	r3, [r7, #0]
 8004158:	2300      	movs	r3, #0
 800415a:	707b      	strb	r3, [r7, #1]
 800415c:	2300      	movs	r3, #0
 800415e:	70bb      	strb	r3, [r7, #2]
 8004160:	2300      	movs	r3, #0
 8004162:	70fb      	strb	r3, [r7, #3]
 8004164:	2300      	movs	r3, #0
 8004166:	713b      	strb	r3, [r7, #4]
 8004168:	2395      	movs	r3, #149	@ 0x95
 800416a:	717b      	strb	r3, [r7, #5]
 800416c:	463b      	mov	r3, r7
 800416e:	2106      	movs	r1, #6
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff ff77 	bl	8004064 <SPI_TxBuffer>
 8004176:	e002      	b.n	800417e <SD_PowerOn+0x56>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3b01      	subs	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	f7ff ff8d 	bl	800409c <SPI_RxByte>
 8004182:	4603      	mov	r3, r0
 8004184:	2b01      	cmp	r3, #1
 8004186:	d002      	beq.n	800418e <SD_PowerOn+0x66>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f4      	bne.n	8004178 <SD_PowerOn+0x50>
 800418e:	f7ff ff43 	bl	8004018 <DESELECT>
 8004192:	20ff      	movs	r0, #255	@ 0xff
 8004194:	f7ff ff4c 	bl	8004030 <SPI_TxByte>
 8004198:	4b03      	ldr	r3, [pc, #12]	@ (80041a8 <SD_PowerOn+0x80>)
 800419a:	2201      	movs	r2, #1
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	24000195 	.word	0x24000195

080041ac <SD_PowerOff>:
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	4b03      	ldr	r3, [pc, #12]	@ (80041c0 <SD_PowerOff+0x14>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	bf00      	nop
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	24000195 	.word	0x24000195

080041c4 <SD_CheckPower>:
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	4b03      	ldr	r3, [pc, #12]	@ (80041d8 <SD_CheckPower+0x14>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	24000195 	.word	0x24000195

080041dc <SD_RxDataBlock>:
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
 80041e6:	4b14      	ldr	r3, [pc, #80]	@ (8004238 <SD_RxDataBlock+0x5c>)
 80041e8:	220a      	movs	r2, #10
 80041ea:	801a      	strh	r2, [r3, #0]
 80041ec:	f7ff ff56 	bl	800409c <SPI_RxByte>
 80041f0:	4603      	mov	r3, r0
 80041f2:	73fb      	strb	r3, [r7, #15]
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2bff      	cmp	r3, #255	@ 0xff
 80041f8:	d104      	bne.n	8004204 <SD_RxDataBlock+0x28>
 80041fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004238 <SD_RxDataBlock+0x5c>)
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f3      	bne.n	80041ec <SD_RxDataBlock+0x10>
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2bfe      	cmp	r3, #254	@ 0xfe
 8004208:	d001      	beq.n	800420e <SD_RxDataBlock+0x32>
 800420a:	2300      	movs	r3, #0
 800420c:	e00f      	b.n	800422e <SD_RxDataBlock+0x52>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff ff5f 	bl	80040d8 <SPI_RxBytePtr>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	1e5a      	subs	r2, r3, #1
 800421e:	603a      	str	r2, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f4      	bne.n	800420e <SD_RxDataBlock+0x32>
 8004224:	f7ff ff3a 	bl	800409c <SPI_RxByte>
 8004228:	f7ff ff38 	bl	800409c <SPI_RxByte>
 800422c:	2301      	movs	r3, #1
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	24000378 	.word	0x24000378

0800423c <SD_TxDataBlock>:
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	70fb      	strb	r3, [r7, #3]
 8004248:	2300      	movs	r3, #0
 800424a:	73bb      	strb	r3, [r7, #14]
 800424c:	f7ff ff52 	bl	80040f4 <SD_ReadyWait>
 8004250:	4603      	mov	r3, r0
 8004252:	2bff      	cmp	r3, #255	@ 0xff
 8004254:	d001      	beq.n	800425a <SD_TxDataBlock+0x1e>
 8004256:	2300      	movs	r3, #0
 8004258:	e02f      	b.n	80042ba <SD_TxDataBlock+0x7e>
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fee7 	bl	8004030 <SPI_TxByte>
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	2bfd      	cmp	r3, #253	@ 0xfd
 8004266:	d020      	beq.n	80042aa <SD_TxDataBlock+0x6e>
 8004268:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff fef9 	bl	8004064 <SPI_TxBuffer>
 8004272:	f7ff ff13 	bl	800409c <SPI_RxByte>
 8004276:	f7ff ff11 	bl	800409c <SPI_RxByte>
 800427a:	e00b      	b.n	8004294 <SD_TxDataBlock+0x58>
 800427c:	f7ff ff0e 	bl	800409c <SPI_RxByte>
 8004280:	4603      	mov	r3, r0
 8004282:	73fb      	strb	r3, [r7, #15]
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	2b05      	cmp	r3, #5
 800428c:	d006      	beq.n	800429c <SD_TxDataBlock+0x60>
 800428e:	7bbb      	ldrb	r3, [r7, #14]
 8004290:	3301      	adds	r3, #1
 8004292:	73bb      	strb	r3, [r7, #14]
 8004294:	7bbb      	ldrb	r3, [r7, #14]
 8004296:	2b40      	cmp	r3, #64	@ 0x40
 8004298:	d9f0      	bls.n	800427c <SD_TxDataBlock+0x40>
 800429a:	e000      	b.n	800429e <SD_TxDataBlock+0x62>
 800429c:	bf00      	nop
 800429e:	bf00      	nop
 80042a0:	f7ff fefc 	bl	800409c <SPI_RxByte>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0fa      	beq.n	80042a0 <SD_TxDataBlock+0x64>
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	f003 031f 	and.w	r3, r3, #31
 80042b0:	2b05      	cmp	r3, #5
 80042b2:	d101      	bne.n	80042b8 <SD_TxDataBlock+0x7c>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <SD_TxDataBlock+0x7e>
 80042b8:	2300      	movs	r3, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <SD_SendCmd>:
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	4603      	mov	r3, r0
 80042ca:	6039      	str	r1, [r7, #0]
 80042cc:	71fb      	strb	r3, [r7, #7]
 80042ce:	f7ff ff11 	bl	80040f4 <SD_ReadyWait>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2bff      	cmp	r3, #255	@ 0xff
 80042d6:	d001      	beq.n	80042dc <SD_SendCmd+0x1a>
 80042d8:	23ff      	movs	r3, #255	@ 0xff
 80042da:	e042      	b.n	8004362 <SD_SendCmd+0xa0>
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fea6 	bl	8004030 <SPI_TxByte>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	0e1b      	lsrs	r3, r3, #24
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fea0 	bl	8004030 <SPI_TxByte>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	0c1b      	lsrs	r3, r3, #16
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fe9a 	bl	8004030 <SPI_TxByte>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	b2db      	uxtb	r3, r3
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fe94 	bl	8004030 <SPI_TxByte>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fe8f 	bl	8004030 <SPI_TxByte>
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	2b40      	cmp	r3, #64	@ 0x40
 8004316:	d102      	bne.n	800431e <SD_SendCmd+0x5c>
 8004318:	2395      	movs	r3, #149	@ 0x95
 800431a:	73fb      	strb	r3, [r7, #15]
 800431c:	e007      	b.n	800432e <SD_SendCmd+0x6c>
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	2b48      	cmp	r3, #72	@ 0x48
 8004322:	d102      	bne.n	800432a <SD_SendCmd+0x68>
 8004324:	2387      	movs	r3, #135	@ 0x87
 8004326:	73fb      	strb	r3, [r7, #15]
 8004328:	e001      	b.n	800432e <SD_SendCmd+0x6c>
 800432a:	2301      	movs	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fe7d 	bl	8004030 <SPI_TxByte>
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	2b4c      	cmp	r3, #76	@ 0x4c
 800433a:	d101      	bne.n	8004340 <SD_SendCmd+0x7e>
 800433c:	f7ff feae 	bl	800409c <SPI_RxByte>
 8004340:	230a      	movs	r3, #10
 8004342:	73bb      	strb	r3, [r7, #14]
 8004344:	f7ff feaa 	bl	800409c <SPI_RxByte>
 8004348:	4603      	mov	r3, r0
 800434a:	737b      	strb	r3, [r7, #13]
 800434c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004350:	2b00      	cmp	r3, #0
 8004352:	da05      	bge.n	8004360 <SD_SendCmd+0x9e>
 8004354:	7bbb      	ldrb	r3, [r7, #14]
 8004356:	3b01      	subs	r3, #1
 8004358:	73bb      	strb	r3, [r7, #14]
 800435a:	7bbb      	ldrb	r3, [r7, #14]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1f1      	bne.n	8004344 <SD_SendCmd+0x82>
 8004360:	7b7b      	ldrb	r3, [r7, #13]
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <SD_disk_initialize>:
 800436c:	b590      	push	{r4, r7, lr}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	71fb      	strb	r3, [r7, #7]
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <SD_disk_initialize+0x14>
 800437c:	2301      	movs	r3, #1
 800437e:	e0d6      	b.n	800452e <SD_disk_initialize+0x1c2>
 8004380:	4b6d      	ldr	r3, [pc, #436]	@ (8004538 <SD_disk_initialize+0x1cc>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <SD_disk_initialize+0x2a>
 800438e:	4b6a      	ldr	r3, [pc, #424]	@ (8004538 <SD_disk_initialize+0x1cc>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	e0cb      	b.n	800452e <SD_disk_initialize+0x1c2>
 8004396:	f7ff fec7 	bl	8004128 <SD_PowerOn>
 800439a:	f7ff fe31 	bl	8004000 <SELECT>
 800439e:	2300      	movs	r3, #0
 80043a0:	73bb      	strb	r3, [r7, #14]
 80043a2:	2100      	movs	r1, #0
 80043a4:	2040      	movs	r0, #64	@ 0x40
 80043a6:	f7ff ff8c 	bl	80042c2 <SD_SendCmd>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	f040 80a6 	bne.w	80044fe <SD_disk_initialize+0x192>
 80043b2:	4b62      	ldr	r3, [pc, #392]	@ (800453c <SD_disk_initialize+0x1d0>)
 80043b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80043b8:	801a      	strh	r2, [r3, #0]
 80043ba:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80043be:	2048      	movs	r0, #72	@ 0x48
 80043c0:	f7ff ff7f 	bl	80042c2 <SD_SendCmd>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d158      	bne.n	800447c <SD_disk_initialize+0x110>
 80043ca:	2300      	movs	r3, #0
 80043cc:	73fb      	strb	r3, [r7, #15]
 80043ce:	e00c      	b.n	80043ea <SD_disk_initialize+0x7e>
 80043d0:	7bfc      	ldrb	r4, [r7, #15]
 80043d2:	f7ff fe63 	bl	800409c <SPI_RxByte>
 80043d6:	4603      	mov	r3, r0
 80043d8:	461a      	mov	r2, r3
 80043da:	f104 0310 	add.w	r3, r4, #16
 80043de:	443b      	add	r3, r7
 80043e0:	f803 2c08 	strb.w	r2, [r3, #-8]
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	3301      	adds	r3, #1
 80043e8:	73fb      	strb	r3, [r7, #15]
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d9ef      	bls.n	80043d0 <SD_disk_initialize+0x64>
 80043f0:	7abb      	ldrb	r3, [r7, #10]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	f040 8083 	bne.w	80044fe <SD_disk_initialize+0x192>
 80043f8:	7afb      	ldrb	r3, [r7, #11]
 80043fa:	2baa      	cmp	r3, #170	@ 0xaa
 80043fc:	d17f      	bne.n	80044fe <SD_disk_initialize+0x192>
 80043fe:	2100      	movs	r1, #0
 8004400:	2077      	movs	r0, #119	@ 0x77
 8004402:	f7ff ff5e 	bl	80042c2 <SD_SendCmd>
 8004406:	4603      	mov	r3, r0
 8004408:	2b01      	cmp	r3, #1
 800440a:	d807      	bhi.n	800441c <SD_disk_initialize+0xb0>
 800440c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004410:	2069      	movs	r0, #105	@ 0x69
 8004412:	f7ff ff56 	bl	80042c2 <SD_SendCmd>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <SD_disk_initialize+0xbc>
 800441c:	4b47      	ldr	r3, [pc, #284]	@ (800453c <SD_disk_initialize+0x1d0>)
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1eb      	bne.n	80043fe <SD_disk_initialize+0x92>
 8004426:	e000      	b.n	800442a <SD_disk_initialize+0xbe>
 8004428:	bf00      	nop
 800442a:	4b44      	ldr	r3, [pc, #272]	@ (800453c <SD_disk_initialize+0x1d0>)
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d064      	beq.n	80044fe <SD_disk_initialize+0x192>
 8004434:	2100      	movs	r1, #0
 8004436:	207a      	movs	r0, #122	@ 0x7a
 8004438:	f7ff ff43 	bl	80042c2 <SD_SendCmd>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d15d      	bne.n	80044fe <SD_disk_initialize+0x192>
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
 8004446:	e00c      	b.n	8004462 <SD_disk_initialize+0xf6>
 8004448:	7bfc      	ldrb	r4, [r7, #15]
 800444a:	f7ff fe27 	bl	800409c <SPI_RxByte>
 800444e:	4603      	mov	r3, r0
 8004450:	461a      	mov	r2, r3
 8004452:	f104 0310 	add.w	r3, r4, #16
 8004456:	443b      	add	r3, r7
 8004458:	f803 2c08 	strb.w	r2, [r3, #-8]
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	3301      	adds	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	2b03      	cmp	r3, #3
 8004466:	d9ef      	bls.n	8004448 <SD_disk_initialize+0xdc>
 8004468:	7a3b      	ldrb	r3, [r7, #8]
 800446a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <SD_disk_initialize+0x10a>
 8004472:	230c      	movs	r3, #12
 8004474:	e000      	b.n	8004478 <SD_disk_initialize+0x10c>
 8004476:	2304      	movs	r3, #4
 8004478:	73bb      	strb	r3, [r7, #14]
 800447a:	e040      	b.n	80044fe <SD_disk_initialize+0x192>
 800447c:	2100      	movs	r1, #0
 800447e:	2077      	movs	r0, #119	@ 0x77
 8004480:	f7ff ff1f 	bl	80042c2 <SD_SendCmd>
 8004484:	4603      	mov	r3, r0
 8004486:	2b01      	cmp	r3, #1
 8004488:	d808      	bhi.n	800449c <SD_disk_initialize+0x130>
 800448a:	2100      	movs	r1, #0
 800448c:	2069      	movs	r0, #105	@ 0x69
 800448e:	f7ff ff18 	bl	80042c2 <SD_SendCmd>
 8004492:	4603      	mov	r3, r0
 8004494:	2b01      	cmp	r3, #1
 8004496:	d801      	bhi.n	800449c <SD_disk_initialize+0x130>
 8004498:	2302      	movs	r3, #2
 800449a:	e000      	b.n	800449e <SD_disk_initialize+0x132>
 800449c:	2301      	movs	r3, #1
 800449e:	73bb      	strb	r3, [r7, #14]
 80044a0:	7bbb      	ldrb	r3, [r7, #14]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d10e      	bne.n	80044c4 <SD_disk_initialize+0x158>
 80044a6:	2100      	movs	r1, #0
 80044a8:	2077      	movs	r0, #119	@ 0x77
 80044aa:	f7ff ff0a 	bl	80042c2 <SD_SendCmd>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d80e      	bhi.n	80044d2 <SD_disk_initialize+0x166>
 80044b4:	2100      	movs	r1, #0
 80044b6:	2069      	movs	r0, #105	@ 0x69
 80044b8:	f7ff ff03 	bl	80042c2 <SD_SendCmd>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d107      	bne.n	80044d2 <SD_disk_initialize+0x166>
 80044c2:	e00d      	b.n	80044e0 <SD_disk_initialize+0x174>
 80044c4:	2100      	movs	r1, #0
 80044c6:	2041      	movs	r0, #65	@ 0x41
 80044c8:	f7ff fefb 	bl	80042c2 <SD_SendCmd>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <SD_disk_initialize+0x172>
 80044d2:	4b1a      	ldr	r3, [pc, #104]	@ (800453c <SD_disk_initialize+0x1d0>)
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e1      	bne.n	80044a0 <SD_disk_initialize+0x134>
 80044dc:	e000      	b.n	80044e0 <SD_disk_initialize+0x174>
 80044de:	bf00      	nop
 80044e0:	4b16      	ldr	r3, [pc, #88]	@ (800453c <SD_disk_initialize+0x1d0>)
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <SD_disk_initialize+0x18e>
 80044ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044ee:	2050      	movs	r0, #80	@ 0x50
 80044f0:	f7ff fee7 	bl	80042c2 <SD_SendCmd>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <SD_disk_initialize+0x192>
 80044fa:	2300      	movs	r3, #0
 80044fc:	73bb      	strb	r3, [r7, #14]
 80044fe:	4a10      	ldr	r2, [pc, #64]	@ (8004540 <SD_disk_initialize+0x1d4>)
 8004500:	7bbb      	ldrb	r3, [r7, #14]
 8004502:	7013      	strb	r3, [r2, #0]
 8004504:	f7ff fd88 	bl	8004018 <DESELECT>
 8004508:	f7ff fdc8 	bl	800409c <SPI_RxByte>
 800450c:	7bbb      	ldrb	r3, [r7, #14]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <SD_disk_initialize+0x1b8>
 8004512:	4b09      	ldr	r3, [pc, #36]	@ (8004538 <SD_disk_initialize+0x1cc>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f023 0301 	bic.w	r3, r3, #1
 800451c:	b2da      	uxtb	r2, r3
 800451e:	4b06      	ldr	r3, [pc, #24]	@ (8004538 <SD_disk_initialize+0x1cc>)
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	e001      	b.n	8004528 <SD_disk_initialize+0x1bc>
 8004524:	f7ff fe42 	bl	80041ac <SD_PowerOff>
 8004528:	4b03      	ldr	r3, [pc, #12]	@ (8004538 <SD_disk_initialize+0x1cc>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	bd90      	pop	{r4, r7, pc}
 8004536:	bf00      	nop
 8004538:	24000000 	.word	0x24000000
 800453c:	24000378 	.word	0x24000378
 8004540:	24000194 	.word	0x24000194

08004544 <SD_disk_status>:
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	71fb      	strb	r3, [r7, #7]
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <SD_disk_status+0x14>
 8004554:	2301      	movs	r3, #1
 8004556:	e002      	b.n	800455e <SD_disk_status+0x1a>
 8004558:	4b04      	ldr	r3, [pc, #16]	@ (800456c <SD_disk_status+0x28>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	24000000 	.word	0x24000000

08004570 <SD_disk_read>:
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	4603      	mov	r3, r0
 800457e:	73fb      	strb	r3, [r7, #15]
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d102      	bne.n	800458c <SD_disk_read+0x1c>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <SD_disk_read+0x20>
 800458c:	2304      	movs	r3, #4
 800458e:	e051      	b.n	8004634 <SD_disk_read+0xc4>
 8004590:	4b2a      	ldr	r3, [pc, #168]	@ (800463c <SD_disk_read+0xcc>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <SD_disk_read+0x32>
 800459e:	2303      	movs	r3, #3
 80045a0:	e048      	b.n	8004634 <SD_disk_read+0xc4>
 80045a2:	4b27      	ldr	r3, [pc, #156]	@ (8004640 <SD_disk_read+0xd0>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <SD_disk_read+0x44>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	025b      	lsls	r3, r3, #9
 80045b2:	607b      	str	r3, [r7, #4]
 80045b4:	f7ff fd24 	bl	8004000 <SELECT>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d111      	bne.n	80045e2 <SD_disk_read+0x72>
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	2051      	movs	r0, #81	@ 0x51
 80045c2:	f7ff fe7e 	bl	80042c2 <SD_SendCmd>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d129      	bne.n	8004620 <SD_disk_read+0xb0>
 80045cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045d0:	68b8      	ldr	r0, [r7, #8]
 80045d2:	f7ff fe03 	bl	80041dc <SD_RxDataBlock>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d021      	beq.n	8004620 <SD_disk_read+0xb0>
 80045dc:	2300      	movs	r3, #0
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	e01e      	b.n	8004620 <SD_disk_read+0xb0>
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	2052      	movs	r0, #82	@ 0x52
 80045e6:	f7ff fe6c 	bl	80042c2 <SD_SendCmd>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d117      	bne.n	8004620 <SD_disk_read+0xb0>
 80045f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045f4:	68b8      	ldr	r0, [r7, #8]
 80045f6:	f7ff fdf1 	bl	80041dc <SD_RxDataBlock>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <SD_disk_read+0xa6>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	3b01      	subs	r3, #1
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1ed      	bne.n	80045f0 <SD_disk_read+0x80>
 8004614:	e000      	b.n	8004618 <SD_disk_read+0xa8>
 8004616:	bf00      	nop
 8004618:	2100      	movs	r1, #0
 800461a:	204c      	movs	r0, #76	@ 0x4c
 800461c:	f7ff fe51 	bl	80042c2 <SD_SendCmd>
 8004620:	f7ff fcfa 	bl	8004018 <DESELECT>
 8004624:	f7ff fd3a 	bl	800409c <SPI_RxByte>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	bf14      	ite	ne
 800462e:	2301      	movne	r3, #1
 8004630:	2300      	moveq	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	24000000 	.word	0x24000000
 8004640:	24000194 	.word	0x24000194

08004644 <SD_disk_write>:
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	4603      	mov	r3, r0
 8004652:	73fb      	strb	r3, [r7, #15]
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <SD_disk_write+0x1c>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <SD_disk_write+0x20>
 8004660:	2304      	movs	r3, #4
 8004662:	e06b      	b.n	800473c <SD_disk_write+0xf8>
 8004664:	4b37      	ldr	r3, [pc, #220]	@ (8004744 <SD_disk_write+0x100>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <SD_disk_write+0x32>
 8004672:	2303      	movs	r3, #3
 8004674:	e062      	b.n	800473c <SD_disk_write+0xf8>
 8004676:	4b33      	ldr	r3, [pc, #204]	@ (8004744 <SD_disk_write+0x100>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <SD_disk_write+0x44>
 8004684:	2302      	movs	r3, #2
 8004686:	e059      	b.n	800473c <SD_disk_write+0xf8>
 8004688:	4b2f      	ldr	r3, [pc, #188]	@ (8004748 <SD_disk_write+0x104>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d102      	bne.n	800469a <SD_disk_write+0x56>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	025b      	lsls	r3, r3, #9
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	f7ff fcb1 	bl	8004000 <SELECT>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d110      	bne.n	80046c6 <SD_disk_write+0x82>
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	2058      	movs	r0, #88	@ 0x58
 80046a8:	f7ff fe0b 	bl	80042c2 <SD_SendCmd>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d13a      	bne.n	8004728 <SD_disk_write+0xe4>
 80046b2:	21fe      	movs	r1, #254	@ 0xfe
 80046b4:	68b8      	ldr	r0, [r7, #8]
 80046b6:	f7ff fdc1 	bl	800423c <SD_TxDataBlock>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d033      	beq.n	8004728 <SD_disk_write+0xe4>
 80046c0:	2300      	movs	r3, #0
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	e030      	b.n	8004728 <SD_disk_write+0xe4>
 80046c6:	4b20      	ldr	r3, [pc, #128]	@ (8004748 <SD_disk_write+0x104>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <SD_disk_write+0x9e>
 80046d2:	2100      	movs	r1, #0
 80046d4:	2077      	movs	r0, #119	@ 0x77
 80046d6:	f7ff fdf4 	bl	80042c2 <SD_SendCmd>
 80046da:	6839      	ldr	r1, [r7, #0]
 80046dc:	2057      	movs	r0, #87	@ 0x57
 80046de:	f7ff fdf0 	bl	80042c2 <SD_SendCmd>
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	2059      	movs	r0, #89	@ 0x59
 80046e6:	f7ff fdec 	bl	80042c2 <SD_SendCmd>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d11b      	bne.n	8004728 <SD_disk_write+0xe4>
 80046f0:	21fc      	movs	r1, #252	@ 0xfc
 80046f2:	68b8      	ldr	r0, [r7, #8]
 80046f4:	f7ff fda2 	bl	800423c <SD_TxDataBlock>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <SD_disk_write+0xd0>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	3b01      	subs	r3, #1
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ee      	bne.n	80046f0 <SD_disk_write+0xac>
 8004712:	e000      	b.n	8004716 <SD_disk_write+0xd2>
 8004714:	bf00      	nop
 8004716:	21fd      	movs	r1, #253	@ 0xfd
 8004718:	2000      	movs	r0, #0
 800471a:	f7ff fd8f 	bl	800423c <SD_TxDataBlock>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <SD_disk_write+0xe4>
 8004724:	2301      	movs	r3, #1
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	f7ff fc76 	bl	8004018 <DESELECT>
 800472c:	f7ff fcb6 	bl	800409c <SPI_RxByte>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	24000000 	.word	0x24000000
 8004748:	24000194 	.word	0x24000194

0800474c <SD_disk_ioctl>:
 800474c:	b590      	push	{r4, r7, lr}
 800474e:	b08b      	sub	sp, #44	@ 0x2c
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	603a      	str	r2, [r7, #0]
 8004756:	71fb      	strb	r3, [r7, #7]
 8004758:	460b      	mov	r3, r1
 800475a:	71bb      	strb	r3, [r7, #6]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	623b      	str	r3, [r7, #32]
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <SD_disk_ioctl+0x1e>
 8004766:	2304      	movs	r3, #4
 8004768:	e113      	b.n	8004992 <SD_disk_ioctl+0x246>
 800476a:	2301      	movs	r3, #1
 800476c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004770:	79bb      	ldrb	r3, [r7, #6]
 8004772:	2b05      	cmp	r3, #5
 8004774:	d124      	bne.n	80047c0 <SD_disk_ioctl+0x74>
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d012      	beq.n	80047a4 <SD_disk_ioctl+0x58>
 800477e:	2b02      	cmp	r3, #2
 8004780:	dc1a      	bgt.n	80047b8 <SD_disk_ioctl+0x6c>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <SD_disk_ioctl+0x40>
 8004786:	2b01      	cmp	r3, #1
 8004788:	d006      	beq.n	8004798 <SD_disk_ioctl+0x4c>
 800478a:	e015      	b.n	80047b8 <SD_disk_ioctl+0x6c>
 800478c:	f7ff fd0e 	bl	80041ac <SD_PowerOff>
 8004790:	2300      	movs	r3, #0
 8004792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004796:	e0fa      	b.n	800498e <SD_disk_ioctl+0x242>
 8004798:	f7ff fcc6 	bl	8004128 <SD_PowerOn>
 800479c:	2300      	movs	r3, #0
 800479e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80047a2:	e0f4      	b.n	800498e <SD_disk_ioctl+0x242>
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	1c5c      	adds	r4, r3, #1
 80047a8:	f7ff fd0c 	bl	80041c4 <SD_CheckPower>
 80047ac:	4603      	mov	r3, r0
 80047ae:	7023      	strb	r3, [r4, #0]
 80047b0:	2300      	movs	r3, #0
 80047b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80047b6:	e0ea      	b.n	800498e <SD_disk_ioctl+0x242>
 80047b8:	2304      	movs	r3, #4
 80047ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80047be:	e0e6      	b.n	800498e <SD_disk_ioctl+0x242>
 80047c0:	4b76      	ldr	r3, [pc, #472]	@ (800499c <SD_disk_ioctl+0x250>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <SD_disk_ioctl+0x86>
 80047ce:	2303      	movs	r3, #3
 80047d0:	e0df      	b.n	8004992 <SD_disk_ioctl+0x246>
 80047d2:	f7ff fc15 	bl	8004000 <SELECT>
 80047d6:	79bb      	ldrb	r3, [r7, #6]
 80047d8:	2b0d      	cmp	r3, #13
 80047da:	f200 80c9 	bhi.w	8004970 <SD_disk_ioctl+0x224>
 80047de:	a201      	add	r2, pc, #4	@ (adr r2, 80047e4 <SD_disk_ioctl+0x98>)
 80047e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e4:	080048db 	.word	0x080048db
 80047e8:	0800481d 	.word	0x0800481d
 80047ec:	080048cb 	.word	0x080048cb
 80047f0:	08004971 	.word	0x08004971
 80047f4:	08004971 	.word	0x08004971
 80047f8:	08004971 	.word	0x08004971
 80047fc:	08004971 	.word	0x08004971
 8004800:	08004971 	.word	0x08004971
 8004804:	08004971 	.word	0x08004971
 8004808:	08004971 	.word	0x08004971
 800480c:	08004971 	.word	0x08004971
 8004810:	080048ed 	.word	0x080048ed
 8004814:	08004911 	.word	0x08004911
 8004818:	08004935 	.word	0x08004935
 800481c:	2100      	movs	r1, #0
 800481e:	2049      	movs	r0, #73	@ 0x49
 8004820:	f7ff fd4f 	bl	80042c2 <SD_SendCmd>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	f040 80a6 	bne.w	8004978 <SD_disk_ioctl+0x22c>
 800482c:	f107 030c 	add.w	r3, r7, #12
 8004830:	2110      	movs	r1, #16
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fcd2 	bl	80041dc <SD_RxDataBlock>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 809c 	beq.w	8004978 <SD_disk_ioctl+0x22c>
 8004840:	7b3b      	ldrb	r3, [r7, #12]
 8004842:	099b      	lsrs	r3, r3, #6
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b01      	cmp	r3, #1
 8004848:	d10d      	bne.n	8004866 <SD_disk_ioctl+0x11a>
 800484a:	7d7b      	ldrb	r3, [r7, #21]
 800484c:	461a      	mov	r2, r3
 800484e:	7d3b      	ldrb	r3, [r7, #20]
 8004850:	021b      	lsls	r3, r3, #8
 8004852:	b29b      	uxth	r3, r3
 8004854:	4413      	add	r3, r2
 8004856:	b29b      	uxth	r3, r3
 8004858:	3301      	adds	r3, #1
 800485a:	83fb      	strh	r3, [r7, #30]
 800485c:	8bfb      	ldrh	r3, [r7, #30]
 800485e:	029a      	lsls	r2, r3, #10
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	e02d      	b.n	80048c2 <SD_disk_ioctl+0x176>
 8004866:	7c7b      	ldrb	r3, [r7, #17]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	b2da      	uxtb	r2, r3
 800486e:	7dbb      	ldrb	r3, [r7, #22]
 8004870:	09db      	lsrs	r3, r3, #7
 8004872:	b2db      	uxtb	r3, r3
 8004874:	4413      	add	r3, r2
 8004876:	b2da      	uxtb	r2, r3
 8004878:	7d7b      	ldrb	r3, [r7, #21]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	b2db      	uxtb	r3, r3
 800487e:	f003 0306 	and.w	r3, r3, #6
 8004882:	b2db      	uxtb	r3, r3
 8004884:	4413      	add	r3, r2
 8004886:	b2db      	uxtb	r3, r3
 8004888:	3302      	adds	r3, #2
 800488a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800488e:	7d3b      	ldrb	r3, [r7, #20]
 8004890:	099b      	lsrs	r3, r3, #6
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	7cfb      	ldrb	r3, [r7, #19]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	b29b      	uxth	r3, r3
 800489c:	4413      	add	r3, r2
 800489e:	b29a      	uxth	r2, r3
 80048a0:	7cbb      	ldrb	r3, [r7, #18]
 80048a2:	029b      	lsls	r3, r3, #10
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	4413      	add	r3, r2
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3301      	adds	r3, #1
 80048b2:	83fb      	strh	r3, [r7, #30]
 80048b4:	8bfa      	ldrh	r2, [r7, #30]
 80048b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80048ba:	3b09      	subs	r3, #9
 80048bc:	409a      	lsls	r2, r3
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	2300      	movs	r3, #0
 80048c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80048c8:	e056      	b.n	8004978 <SD_disk_ioctl+0x22c>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048d0:	801a      	strh	r2, [r3, #0]
 80048d2:	2300      	movs	r3, #0
 80048d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80048d8:	e055      	b.n	8004986 <SD_disk_ioctl+0x23a>
 80048da:	f7ff fc0b 	bl	80040f4 <SD_ReadyWait>
 80048de:	4603      	mov	r3, r0
 80048e0:	2bff      	cmp	r3, #255	@ 0xff
 80048e2:	d14b      	bne.n	800497c <SD_disk_ioctl+0x230>
 80048e4:	2300      	movs	r3, #0
 80048e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80048ea:	e047      	b.n	800497c <SD_disk_ioctl+0x230>
 80048ec:	2100      	movs	r1, #0
 80048ee:	2049      	movs	r0, #73	@ 0x49
 80048f0:	f7ff fce7 	bl	80042c2 <SD_SendCmd>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d142      	bne.n	8004980 <SD_disk_ioctl+0x234>
 80048fa:	2110      	movs	r1, #16
 80048fc:	6a38      	ldr	r0, [r7, #32]
 80048fe:	f7ff fc6d 	bl	80041dc <SD_RxDataBlock>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d03b      	beq.n	8004980 <SD_disk_ioctl+0x234>
 8004908:	2300      	movs	r3, #0
 800490a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800490e:	e037      	b.n	8004980 <SD_disk_ioctl+0x234>
 8004910:	2100      	movs	r1, #0
 8004912:	204a      	movs	r0, #74	@ 0x4a
 8004914:	f7ff fcd5 	bl	80042c2 <SD_SendCmd>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d132      	bne.n	8004984 <SD_disk_ioctl+0x238>
 800491e:	2110      	movs	r1, #16
 8004920:	6a38      	ldr	r0, [r7, #32]
 8004922:	f7ff fc5b 	bl	80041dc <SD_RxDataBlock>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d02b      	beq.n	8004984 <SD_disk_ioctl+0x238>
 800492c:	2300      	movs	r3, #0
 800492e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004932:	e027      	b.n	8004984 <SD_disk_ioctl+0x238>
 8004934:	2100      	movs	r1, #0
 8004936:	207a      	movs	r0, #122	@ 0x7a
 8004938:	f7ff fcc3 	bl	80042c2 <SD_SendCmd>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d116      	bne.n	8004970 <SD_disk_ioctl+0x224>
 8004942:	2300      	movs	r3, #0
 8004944:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004948:	e00b      	b.n	8004962 <SD_disk_ioctl+0x216>
 800494a:	6a3c      	ldr	r4, [r7, #32]
 800494c:	1c63      	adds	r3, r4, #1
 800494e:	623b      	str	r3, [r7, #32]
 8004950:	f7ff fba4 	bl	800409c <SPI_RxByte>
 8004954:	4603      	mov	r3, r0
 8004956:	7023      	strb	r3, [r4, #0]
 8004958:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800495c:	3301      	adds	r3, #1
 800495e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004962:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004966:	2b03      	cmp	r3, #3
 8004968:	d9ef      	bls.n	800494a <SD_disk_ioctl+0x1fe>
 800496a:	2300      	movs	r3, #0
 800496c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004970:	2304      	movs	r3, #4
 8004972:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004976:	e006      	b.n	8004986 <SD_disk_ioctl+0x23a>
 8004978:	bf00      	nop
 800497a:	e004      	b.n	8004986 <SD_disk_ioctl+0x23a>
 800497c:	bf00      	nop
 800497e:	e002      	b.n	8004986 <SD_disk_ioctl+0x23a>
 8004980:	bf00      	nop
 8004982:	e000      	b.n	8004986 <SD_disk_ioctl+0x23a>
 8004984:	bf00      	nop
 8004986:	f7ff fb47 	bl	8004018 <DESELECT>
 800498a:	f7ff fb87 	bl	800409c <SPI_RxByte>
 800498e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004992:	4618      	mov	r0, r3
 8004994:	372c      	adds	r7, #44	@ 0x2c
 8004996:	46bd      	mov	sp, r7
 8004998:	bd90      	pop	{r4, r7, pc}
 800499a:	bf00      	nop
 800499c:	24000000 	.word	0x24000000

080049a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08e      	sub	sp, #56	@ 0x38
 80049a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	605a      	str	r2, [r3, #4]
 80049b0:	609a      	str	r2, [r3, #8]
 80049b2:	60da      	str	r2, [r3, #12]
 80049b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80049b6:	4b8b      	ldr	r3, [pc, #556]	@ (8004be4 <MX_GPIO_Init+0x244>)
 80049b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049bc:	4a89      	ldr	r2, [pc, #548]	@ (8004be4 <MX_GPIO_Init+0x244>)
 80049be:	f043 0310 	orr.w	r3, r3, #16
 80049c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049c6:	4b87      	ldr	r3, [pc, #540]	@ (8004be4 <MX_GPIO_Init+0x244>)
 80049c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	623b      	str	r3, [r7, #32]
 80049d2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049d4:	4b83      	ldr	r3, [pc, #524]	@ (8004be4 <MX_GPIO_Init+0x244>)
 80049d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049da:	4a82      	ldr	r2, [pc, #520]	@ (8004be4 <MX_GPIO_Init+0x244>)
 80049dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049e4:	4b7f      	ldr	r3, [pc, #508]	@ (8004be4 <MX_GPIO_Init+0x244>)
 80049e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ee:	61fb      	str	r3, [r7, #28]
 80049f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049f2:	4b7c      	ldr	r3, [pc, #496]	@ (8004be4 <MX_GPIO_Init+0x244>)
 80049f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049f8:	4a7a      	ldr	r2, [pc, #488]	@ (8004be4 <MX_GPIO_Init+0x244>)
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a02:	4b78      	ldr	r3, [pc, #480]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a10:	4b74      	ldr	r3, [pc, #464]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a16:	4a73      	ldr	r2, [pc, #460]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a18:	f043 0320 	orr.w	r3, r3, #32
 8004a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a20:	4b70      	ldr	r3, [pc, #448]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a34:	4a6b      	ldr	r2, [pc, #428]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a36:	f043 0302 	orr.w	r3, r3, #2
 8004a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a3e:	4b69      	ldr	r3, [pc, #420]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a4c:	4b65      	ldr	r3, [pc, #404]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a52:	4a64      	ldr	r2, [pc, #400]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a54:	f043 0308 	orr.w	r3, r3, #8
 8004a58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a5c:	4b61      	ldr	r3, [pc, #388]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004a6a:	4b5e      	ldr	r3, [pc, #376]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a70:	4a5c      	ldr	r2, [pc, #368]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a7a:	4b5a      	ldr	r3, [pc, #360]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a88:	4b56      	ldr	r3, [pc, #344]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a8e:	4a55      	ldr	r2, [pc, #340]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a90:	f043 0304 	orr.w	r3, r3, #4
 8004a94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a98:	4b52      	ldr	r3, [pc, #328]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a9e:	f003 0304 	and.w	r3, r3, #4
 8004aa2:	607b      	str	r3, [r7, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f248 0108 	movw	r1, #32776	@ 0x8008
 8004aac:	484e      	ldr	r0, [pc, #312]	@ (8004be8 <MX_GPIO_Init+0x248>)
 8004aae:	f009 fc77 	bl	800e3a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8004ab8:	484c      	ldr	r0, [pc, #304]	@ (8004bec <MX_GPIO_Init+0x24c>)
 8004aba:	f009 fc71 	bl	800e3a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8004ac4:	484a      	ldr	r0, [pc, #296]	@ (8004bf0 <MX_GPIO_Init+0x250>)
 8004ac6:	f009 fc6b 	bl	800e3a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 8004aca:	2200      	movs	r2, #0
 8004acc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004ad0:	4848      	ldr	r0, [pc, #288]	@ (8004bf4 <MX_GPIO_Init+0x254>)
 8004ad2:	f009 fc65 	bl	800e3a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8004adc:	4846      	ldr	r0, [pc, #280]	@ (8004bf8 <MX_GPIO_Init+0x258>)
 8004ade:	f009 fc5f 	bl	800e3a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 8004ae2:	f248 0308 	movw	r3, #32776	@ 0x8008
 8004ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af0:	2300      	movs	r3, #0
 8004af2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004af8:	4619      	mov	r1, r3
 8004afa:	483b      	ldr	r0, [pc, #236]	@ (8004be8 <MX_GPIO_Init+0x248>)
 8004afc:	f009 fa90 	bl	800e020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004b00:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b06:	2301      	movs	r3, #1
 8004b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b16:	4619      	mov	r1, r3
 8004b18:	4834      	ldr	r0, [pc, #208]	@ (8004bec <MX_GPIO_Init+0x24c>)
 8004b1a:	f009 fa81 	bl	800e020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 8004b1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b24:	2300      	movs	r3, #0
 8004b26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b30:	4619      	mov	r1, r3
 8004b32:	482e      	ldr	r0, [pc, #184]	@ (8004bec <MX_GPIO_Init+0x24c>)
 8004b34:	f009 fa74 	bl	800e020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004b38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b46:	2300      	movs	r3, #0
 8004b48:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4827      	ldr	r0, [pc, #156]	@ (8004bf0 <MX_GPIO_Init+0x250>)
 8004b52:	f009 fa65 	bl	800e020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 8004b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004b64:	2301      	movs	r3, #1
 8004b66:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4820      	ldr	r0, [pc, #128]	@ (8004bf0 <MX_GPIO_Init+0x250>)
 8004b70:	f009 fa56 	bl	800e020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 8004b74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b82:	2300      	movs	r3, #0
 8004b84:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 8004b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4819      	ldr	r0, [pc, #100]	@ (8004bf4 <MX_GPIO_Init+0x254>)
 8004b8e:	f009 fa47 	bl	800e020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 8004b92:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004b96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4813      	ldr	r0, [pc, #76]	@ (8004bf8 <MX_GPIO_Init+0x258>)
 8004bac:	f009 fa38 	bl	800e020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8004bb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004bb6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	480b      	ldr	r0, [pc, #44]	@ (8004bf4 <MX_GPIO_Init+0x254>)
 8004bc8:	f009 fa2a 	bl	800e020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2100      	movs	r1, #0
 8004bd0:	2028      	movs	r0, #40	@ 0x28
 8004bd2:	f006 fb26 	bl	800b222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004bd6:	2028      	movs	r0, #40	@ 0x28
 8004bd8:	f006 fb3d 	bl	800b256 <HAL_NVIC_EnableIRQ>

}
 8004bdc:	bf00      	nop
 8004bde:	3738      	adds	r7, #56	@ 0x38
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	58024400 	.word	0x58024400
 8004be8:	58021000 	.word	0x58021000
 8004bec:	58020400 	.word	0x58020400
 8004bf0:	58020c00 	.word	0x58020c00
 8004bf4:	58021800 	.word	0x58021800
 8004bf8:	58020000 	.word	0x58020000

08004bfc <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004c00:	4b1d      	ldr	r3, [pc, #116]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c02:	4a1e      	ldr	r2, [pc, #120]	@ (8004c7c <MX_I2C5_Init+0x80>)
 8004c04:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 8004c06:	4b1c      	ldr	r3, [pc, #112]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c12:	4b19      	ldr	r3, [pc, #100]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c18:	4b17      	ldr	r3, [pc, #92]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004c1e:	4b16      	ldr	r3, [pc, #88]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004c24:	4b14      	ldr	r3, [pc, #80]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c2a:	4b13      	ldr	r3, [pc, #76]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c30:	4b11      	ldr	r3, [pc, #68]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8004c36:	4810      	ldr	r0, [pc, #64]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c38:	f009 fbe6 	bl	800e408 <HAL_I2C_Init>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8004c42:	f002 fee5 	bl	8007a10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004c46:	2100      	movs	r1, #0
 8004c48:	480b      	ldr	r0, [pc, #44]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c4a:	f00b ff9f 	bl	8010b8c <HAL_I2CEx_ConfigAnalogFilter>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8004c54:	f002 fedc 	bl	8007a10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4807      	ldr	r0, [pc, #28]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c5c:	f00b ffe1 	bl	8010c22 <HAL_I2CEx_ConfigDigitalFilter>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8004c66:	f002 fed3 	bl	8007a10 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004c6a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004c6e:	f00c f825 	bl	8010cbc <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8004c72:	bf00      	nop
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	24000198 	.word	0x24000198
 8004c7c:	40006400 	.word	0x40006400

08004c80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b0b8      	sub	sp, #224	@ 0xe0
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c88:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	605a      	str	r2, [r3, #4]
 8004c92:	609a      	str	r2, [r3, #8]
 8004c94:	60da      	str	r2, [r3, #12]
 8004c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c98:	f107 0310 	add.w	r3, r7, #16
 8004c9c:	22b8      	movs	r2, #184	@ 0xb8
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f018 fff7 	bl	801dc94 <memset>
  if(i2cHandle->Instance==I2C5)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2b      	ldr	r2, [pc, #172]	@ (8004d58 <HAL_I2C_MspInit+0xd8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d14f      	bne.n	8004d50 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8004cb0:	f04f 0208 	mov.w	r2, #8
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 8004cbc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004cc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cc4:	f107 0310 	add.w	r3, r7, #16
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f00c ffbb 	bl	8011c44 <HAL_RCCEx_PeriphCLKConfig>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8004cd4:	f002 fe9c 	bl	8007a10 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cd8:	4b20      	ldr	r3, [pc, #128]	@ (8004d5c <HAL_I2C_MspInit+0xdc>)
 8004cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cde:	4a1f      	ldr	r2, [pc, #124]	@ (8004d5c <HAL_I2C_MspInit+0xdc>)
 8004ce0:	f043 0304 	orr.w	r3, r3, #4
 8004ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8004d5c <HAL_I2C_MspInit+0xdc>)
 8004cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004cf6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004cfa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cfe:	2312      	movs	r3, #18
 8004d00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d04:	2301      	movs	r3, #1
 8004d06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004d10:	2304      	movs	r3, #4
 8004d12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d16:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4810      	ldr	r0, [pc, #64]	@ (8004d60 <HAL_I2C_MspInit+0xe0>)
 8004d1e:	f009 f97f 	bl	800e020 <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004d22:	4b0e      	ldr	r3, [pc, #56]	@ (8004d5c <HAL_I2C_MspInit+0xdc>)
 8004d24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d28:	4a0c      	ldr	r2, [pc, #48]	@ (8004d5c <HAL_I2C_MspInit+0xdc>)
 8004d2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004d32:	4b0a      	ldr	r3, [pc, #40]	@ (8004d5c <HAL_I2C_MspInit+0xdc>)
 8004d34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004d40:	2200      	movs	r2, #0
 8004d42:	2101      	movs	r1, #1
 8004d44:	209d      	movs	r0, #157	@ 0x9d
 8004d46:	f006 fa6c 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8004d4a:	209d      	movs	r0, #157	@ 0x9d
 8004d4c:	f006 fa83 	bl	800b256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 8004d50:	bf00      	nop
 8004d52:	37e0      	adds	r7, #224	@ 0xe0
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40006400 	.word	0x40006400
 8004d5c:	58024400 	.word	0x58024400
 8004d60:	58020800 	.word	0x58020800

08004d64 <__NVIC_SystemReset>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004d68:	f3bf 8f4f 	dsb	sy
}
 8004d6c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004d6e:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <__NVIC_SystemReset+0x24>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004d76:	4904      	ldr	r1, [pc, #16]	@ (8004d88 <__NVIC_SystemReset+0x24>)
 8004d78:	4b04      	ldr	r3, [pc, #16]	@ (8004d8c <__NVIC_SystemReset+0x28>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d7e:	f3bf 8f4f 	dsb	sy
}
 8004d82:	bf00      	nop
    __NOP();
 8004d84:	bf00      	nop
 8004d86:	e7fd      	b.n	8004d84 <__NVIC_SystemReset+0x20>
 8004d88:	e000ed00 	.word	0xe000ed00
 8004d8c:	05fa0004 	.word	0x05fa0004

08004d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	@ 0x28
 8004d94:	af02      	add	r7, sp, #8
//		//oczekiwanie az napiecia na zasilaczu narosnie
//	}
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004d96:	f002 fe0f 	bl	80079b8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d9a:	f004 f911 	bl	8008fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d9e:	f000 feef 	bl	8005b80 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004da2:	f000 ff5f 	bl	8005c64 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004da6:	f7ff fdfb 	bl	80049a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004daa:	f7fe fcdb 	bl	8003764 <MX_DMA_Init>
  MX_I2C5_Init();
 8004dae:	f7ff ff25 	bl	8004bfc <MX_I2C5_Init>
  MX_SPI6_Init();
 8004db2:	f002 fe89 	bl	8007ac8 <MX_SPI6_Init>
  MX_ADC2_Init();
 8004db6:	f7fe fbe7 	bl	8003588 <MX_ADC2_Init>
  MX_SPI2_Init();
 8004dba:	f002 fe2f 	bl	8007a1c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004dbe:	f004 f817 	bl	8008df0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004dc2:	f003 fd35 	bl	8008830 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004dc6:	f003 feab 	bl	8008b20 <MX_TIM8_Init>
  MX_TIM3_Init();
 8004dca:	f003 fe2d 	bl	8008a28 <MX_TIM3_Init>
  MX_FATFS_Init();
 8004dce:	f015 fdad 	bl	801a92c <MX_FATFS_Init>
  MX_TIM2_Init();
 8004dd2:	f003 fdd5 	bl	8008980 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  	STARTUP = 1;
 8004dd6:	4b9a      	ldr	r3, [pc, #616]	@ (8005040 <main+0x2b0>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]
  	ESC_POWER_1;
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004de2:	4898      	ldr	r0, [pc, #608]	@ (8005044 <main+0x2b4>)
 8004de4:	f009 fadc 	bl	800e3a0 <HAL_GPIO_WritePin>
  	DRON_ON_GRUND = 1;
 8004de8:	4b97      	ldr	r3, [pc, #604]	@ (8005048 <main+0x2b8>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	701a      	strb	r2, [r3, #0]

  	PID_FAC_Pitch[0] = p_pitchfactor;
 8004dee:	4b97      	ldr	r3, [pc, #604]	@ (800504c <main+0x2bc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a97      	ldr	r2, [pc, #604]	@ (8005050 <main+0x2c0>)
 8004df4:	6013      	str	r3, [r2, #0]
  	PID_FAC_Pitch[1] = i_pitchfactor;
 8004df6:	4b97      	ldr	r3, [pc, #604]	@ (8005054 <main+0x2c4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a95      	ldr	r2, [pc, #596]	@ (8005050 <main+0x2c0>)
 8004dfc:	6053      	str	r3, [r2, #4]
  	PID_FAC_Pitch[2] = d_pitchfactor;
 8004dfe:	4b96      	ldr	r3, [pc, #600]	@ (8005058 <main+0x2c8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a93      	ldr	r2, [pc, #588]	@ (8005050 <main+0x2c0>)
 8004e04:	6093      	str	r3, [r2, #8]
  	PID_FAC_Pitch[4] = 0;
 8004e06:	4b92      	ldr	r3, [pc, #584]	@ (8005050 <main+0x2c0>)
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	611a      	str	r2, [r3, #16]

  	PID_FAC_Rool[0] = p_roolfactor;
 8004e0e:	4b93      	ldr	r3, [pc, #588]	@ (800505c <main+0x2cc>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a93      	ldr	r2, [pc, #588]	@ (8005060 <main+0x2d0>)
 8004e14:	6013      	str	r3, [r2, #0]
  	PID_FAC_Rool[1] = i_roolfactor;
 8004e16:	4b93      	ldr	r3, [pc, #588]	@ (8005064 <main+0x2d4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a91      	ldr	r2, [pc, #580]	@ (8005060 <main+0x2d0>)
 8004e1c:	6053      	str	r3, [r2, #4]
  	PID_FAC_Rool[2] = d_roolfactor;
 8004e1e:	4b92      	ldr	r3, [pc, #584]	@ (8005068 <main+0x2d8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a8f      	ldr	r2, [pc, #572]	@ (8005060 <main+0x2d0>)
 8004e24:	6093      	str	r3, [r2, #8]
  	PID_FAC_Rool[4] = 0;
 8004e26:	4b8e      	ldr	r3, [pc, #568]	@ (8005060 <main+0x2d0>)
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	611a      	str	r2, [r3, #16]

  	PID_FAC_Yaw[0] = p_yawfactor;
 8004e2e:	4b8f      	ldr	r3, [pc, #572]	@ (800506c <main+0x2dc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a8f      	ldr	r2, [pc, #572]	@ (8005070 <main+0x2e0>)
 8004e34:	6013      	str	r3, [r2, #0]
  	PID_FAC_Yaw[1] = i_yawfactor;
 8004e36:	4b8f      	ldr	r3, [pc, #572]	@ (8005074 <main+0x2e4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a8d      	ldr	r2, [pc, #564]	@ (8005070 <main+0x2e0>)
 8004e3c:	6053      	str	r3, [r2, #4]
  	PID_FAC_Yaw[2] = d_yawfactor;
 8004e3e:	4b8e      	ldr	r3, [pc, #568]	@ (8005078 <main+0x2e8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a8b      	ldr	r2, [pc, #556]	@ (8005070 <main+0x2e0>)
 8004e44:	6093      	str	r3, [r2, #8]
  	PID_FAC_Yaw[4] = 0;
 8004e46:	4b8a      	ldr	r3, [pc, #552]	@ (8005070 <main+0x2e0>)
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	611a      	str	r2, [r3, #16]


  	ax_ang =0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 8004e4e:	4b8b      	ldr	r3, [pc, #556]	@ (800507c <main+0x2ec>)
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	4b8a      	ldr	r3, [pc, #552]	@ (8005080 <main+0x2f0>)
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	4b89      	ldr	r3, [pc, #548]	@ (8005084 <main+0x2f4>)
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	4b88      	ldr	r3, [pc, #544]	@ (8005088 <main+0x2f8>)
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	4b87      	ldr	r3, [pc, #540]	@ (800508c <main+0x2fc>)
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	4b86      	ldr	r3, [pc, #536]	@ (8005090 <main+0x300>)
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
  	Mag_Z = 0;
 8004e7e:	4b85      	ldr	r3, [pc, #532]	@ (8005094 <main+0x304>)
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
  	TIM_inte_SD = 0, TIM_inte = 0;
 8004e86:	4b84      	ldr	r3, [pc, #528]	@ (8005098 <main+0x308>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	4b83      	ldr	r3, [pc, #524]	@ (800509c <main+0x30c>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 8004e92:	4b83      	ldr	r3, [pc, #524]	@ (80050a0 <main+0x310>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
  	temp = 0, pres = 0, startpres = 0, ampritude = 0;
 8004e98:	4b82      	ldr	r3, [pc, #520]	@ (80050a4 <main+0x314>)
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	4b81      	ldr	r3, [pc, #516]	@ (80050a8 <main+0x318>)
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	4b80      	ldr	r3, [pc, #512]	@ (80050ac <main+0x31c>)
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	4b7f      	ldr	r3, [pc, #508]	@ (80050b0 <main+0x320>)
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
  	last_wanted_pitch_rx = 0;
 8004eb8:	4b7e      	ldr	r3, [pc, #504]	@ (80050b4 <main+0x324>)
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]
  	last_wanted_rool_rx = 0;
 8004ec0:	4b7d      	ldr	r3, [pc, #500]	@ (80050b8 <main+0x328>)
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
  	last_wanted_yaw_rx = 0;
 8004ec8:	4b7c      	ldr	r3, [pc, #496]	@ (80050bc <main+0x32c>)
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
  	wanted_thrust = 0;
 8004ed0:	4b7b      	ldr	r3, [pc, #492]	@ (80050c0 <main+0x330>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	801a      	strh	r2, [r3, #0]
  	thrust_limit = 10000;
 8004ed6:	4b7b      	ldr	r3, [pc, #492]	@ (80050c4 <main+0x334>)
 8004ed8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004edc:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain_AR = 100;
 8004ede:	4b7a      	ldr	r3, [pc, #488]	@ (80050c8 <main+0x338>)
 8004ee0:	2264      	movs	r2, #100	@ 0x64
 8004ee2:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 100;
 8004ee4:	4b79      	ldr	r3, [pc, #484]	@ (80050cc <main+0x33c>)
 8004ee6:	2264      	movs	r2, #100	@ 0x64
 8004ee8:	801a      	strh	r2, [r3, #0]
  	old_error_pitch = 0;// ruznica
 8004eea:	4b79      	ldr	r3, [pc, #484]	@ (80050d0 <main+0x340>)
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
  	old_error_rool = 0;
 8004ef2:	4b78      	ldr	r3, [pc, #480]	@ (80050d4 <main+0x344>)
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
  	old_error_yaw = 0;
 8004efa:	4b77      	ldr	r3, [pc, #476]	@ (80050d8 <main+0x348>)
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_pitch = 0;// ruznica
 8004f02:	4b76      	ldr	r3, [pc, #472]	@ (80050dc <main+0x34c>)
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_rool = 0;
 8004f0a:	4b75      	ldr	r3, [pc, #468]	@ (80050e0 <main+0x350>)
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_yaw = 0;
 8004f12:	4b74      	ldr	r3, [pc, #464]	@ (80050e4 <main+0x354>)
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
  	error_sum_pitch = 0;//todo zmiezycz startowy error, by start nastepowal szybciej
 8004f1a:	4b73      	ldr	r3, [pc, #460]	@ (80050e8 <main+0x358>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
  	error_sum_rool = 0;
 8004f20:	4b72      	ldr	r3, [pc, #456]	@ (80050ec <main+0x35c>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
  	error_sum_yaw = 0;
 8004f26:	4b72      	ldr	r3, [pc, #456]	@ (80050f0 <main+0x360>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_pitch = 0;
 8004f2c:	4b71      	ldr	r3, [pc, #452]	@ (80050f4 <main+0x364>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_rool = 0;
 8004f32:	4b71      	ldr	r3, [pc, #452]	@ (80050f8 <main+0x368>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_yaw = 0;
 8004f38:	4b70      	ldr	r3, [pc, #448]	@ (80050fc <main+0x36c>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
  	SPEED1 = min_speed;
 8004f3e:	4b70      	ldr	r3, [pc, #448]	@ (8005100 <main+0x370>)
 8004f40:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f44:	801a      	strh	r2, [r3, #0]
  	SPEED2 = min_speed;
 8004f46:	4b6f      	ldr	r3, [pc, #444]	@ (8005104 <main+0x374>)
 8004f48:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f4c:	801a      	strh	r2, [r3, #0]
  	SPEED3 = min_speed;
 8004f4e:	4b6e      	ldr	r3, [pc, #440]	@ (8005108 <main+0x378>)
 8004f50:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f54:	801a      	strh	r2, [r3, #0]
  	SPEED4 = min_speed;
 8004f56:	4b6d      	ldr	r3, [pc, #436]	@ (800510c <main+0x37c>)
 8004f58:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f5c:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED1 = min_speed;
 8004f5e:	4b6c      	ldr	r3, [pc, #432]	@ (8005110 <main+0x380>)
 8004f60:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f64:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED2 = min_speed;
 8004f66:	4b6b      	ldr	r3, [pc, #428]	@ (8005114 <main+0x384>)
 8004f68:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f6c:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED3 = min_speed;
 8004f6e:	4b6a      	ldr	r3, [pc, #424]	@ (8005118 <main+0x388>)
 8004f70:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f74:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED4 = min_speed;
 8004f76:	4b69      	ldr	r3, [pc, #420]	@ (800511c <main+0x38c>)
 8004f78:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f7c:	801a      	strh	r2, [r3, #0]
  	commandready = 0;
 8004f7e:	4b68      	ldr	r3, [pc, #416]	@ (8005120 <main+0x390>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 8004f84:	4b67      	ldr	r3, [pc, #412]	@ (8005124 <main+0x394>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 8004f8a:	4b67      	ldr	r3, [pc, #412]	@ (8005128 <main+0x398>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 8004f90:	4b66      	ldr	r3, [pc, #408]	@ (800512c <main+0x39c>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 8004f96:	4b66      	ldr	r3, [pc, #408]	@ (8005130 <main+0x3a0>)
 8004f98:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004f9c:	601a      	str	r2, [r3, #0]
  	MPU6050_IRQ = 0, HMC583L_IRQ = 0, BMP180_IRQ = 0;
 8004f9e:	4b65      	ldr	r3, [pc, #404]	@ (8005134 <main+0x3a4>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	4b64      	ldr	r3, [pc, #400]	@ (8005138 <main+0x3a8>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	4b64      	ldr	r3, [pc, #400]	@ (800513c <main+0x3ac>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	701a      	strb	r2, [r3, #0]
  	i = 0, loopnum = 0;
 8004fb0:	4b63      	ldr	r3, [pc, #396]	@ (8005140 <main+0x3b0>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	4b63      	ldr	r3, [pc, #396]	@ (8005144 <main+0x3b4>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]


	  p_angular_rate_pitchfactor = 14;
 8004fbc:	4b62      	ldr	r3, [pc, #392]	@ (8005148 <main+0x3b8>)
 8004fbe:	4a63      	ldr	r2, [pc, #396]	@ (800514c <main+0x3bc>)
 8004fc0:	601a      	str	r2, [r3, #0]
	  p_angular_rate_roolfactor = 12;
 8004fc2:	4b63      	ldr	r3, [pc, #396]	@ (8005150 <main+0x3c0>)
 8004fc4:	4a63      	ldr	r2, [pc, #396]	@ (8005154 <main+0x3c4>)
 8004fc6:	601a      	str	r2, [r3, #0]
	  p_angular_rate_yawfactor = 5;// -> 10
 8004fc8:	4b63      	ldr	r3, [pc, #396]	@ (8005158 <main+0x3c8>)
 8004fca:	4a64      	ldr	r2, [pc, #400]	@ (800515c <main+0x3cc>)
 8004fcc:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_angular_rate_pitchfactor = 10;
 8004fce:	4b64      	ldr	r3, [pc, #400]	@ (8005160 <main+0x3d0>)
 8004fd0:	4a64      	ldr	r2, [pc, #400]	@ (8005164 <main+0x3d4>)
 8004fd2:	601a      	str	r2, [r3, #0]
	  i_angular_rate_roolfactor = 10;
 8004fd4:	4b64      	ldr	r3, [pc, #400]	@ (8005168 <main+0x3d8>)
 8004fd6:	4a63      	ldr	r2, [pc, #396]	@ (8005164 <main+0x3d4>)
 8004fd8:	601a      	str	r2, [r3, #0]
	  i_angular_rate_yawfactor = 0;
 8004fda:	4b64      	ldr	r3, [pc, #400]	@ (800516c <main+0x3dc>)
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_angular_rate_pitchfactor = 30;
 8004fe2:	4b63      	ldr	r3, [pc, #396]	@ (8005170 <main+0x3e0>)
 8004fe4:	4a63      	ldr	r2, [pc, #396]	@ (8005174 <main+0x3e4>)
 8004fe6:	601a      	str	r2, [r3, #0]
	  d_angular_rate_roolfactor = 20;
 8004fe8:	4b63      	ldr	r3, [pc, #396]	@ (8005178 <main+0x3e8>)
 8004fea:	4a64      	ldr	r2, [pc, #400]	@ (800517c <main+0x3ec>)
 8004fec:	601a      	str	r2, [r3, #0]
	  d_angular_rate_yawfactor = 5;
 8004fee:	4b64      	ldr	r3, [pc, #400]	@ (8005180 <main+0x3f0>)
 8004ff0:	4a5a      	ldr	r2, [pc, #360]	@ (800515c <main+0x3cc>)
 8004ff2:	601a      	str	r2, [r3, #0]

	  p_pitchfactor = 5.5;
 8004ff4:	4b15      	ldr	r3, [pc, #84]	@ (800504c <main+0x2bc>)
 8004ff6:	4a63      	ldr	r2, [pc, #396]	@ (8005184 <main+0x3f4>)
 8004ff8:	601a      	str	r2, [r3, #0]
	  p_roolfactor = 6;//5
 8004ffa:	4b18      	ldr	r3, [pc, #96]	@ (800505c <main+0x2cc>)
 8004ffc:	4a62      	ldr	r2, [pc, #392]	@ (8005188 <main+0x3f8>)
 8004ffe:	601a      	str	r2, [r3, #0]
	  p_yawfactor = 5;
 8005000:	4b1a      	ldr	r3, [pc, #104]	@ (800506c <main+0x2dc>)
 8005002:	4a56      	ldr	r2, [pc, #344]	@ (800515c <main+0x3cc>)
 8005004:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_pitchfactor = 9;//8
 8005006:	4b13      	ldr	r3, [pc, #76]	@ (8005054 <main+0x2c4>)
 8005008:	4a60      	ldr	r2, [pc, #384]	@ (800518c <main+0x3fc>)
 800500a:	601a      	str	r2, [r3, #0]
	  i_roolfactor = 8;//10
 800500c:	4b15      	ldr	r3, [pc, #84]	@ (8005064 <main+0x2d4>)
 800500e:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8005012:	601a      	str	r2, [r3, #0]
	  i_yawfactor = 0;
 8005014:	4b17      	ldr	r3, [pc, #92]	@ (8005074 <main+0x2e4>)
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_pitchfactor = 30;//25
 800501c:	4b0e      	ldr	r3, [pc, #56]	@ (8005058 <main+0x2c8>)
 800501e:	4a55      	ldr	r2, [pc, #340]	@ (8005174 <main+0x3e4>)
 8005020:	601a      	str	r2, [r3, #0]
	  d_roolfactor = 20;
 8005022:	4b11      	ldr	r3, [pc, #68]	@ (8005068 <main+0x2d8>)
 8005024:	4a55      	ldr	r2, [pc, #340]	@ (800517c <main+0x3ec>)
 8005026:	601a      	str	r2, [r3, #0]
	  d_yawfactor = 0;
 8005028:	4b13      	ldr	r3, [pc, #76]	@ (8005078 <main+0x2e8>)
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	601a      	str	r2, [r3, #0]

  	  PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005030:	4b45      	ldr	r3, [pc, #276]	@ (8005148 <main+0x3b8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a56      	ldr	r2, [pc, #344]	@ (8005190 <main+0x400>)
 8005036:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005038:	4b49      	ldr	r3, [pc, #292]	@ (8005160 <main+0x3d0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	e0aa      	b.n	8005194 <main+0x404>
 800503e:	bf00      	nop
 8005040:	0000005c 	.word	0x0000005c
 8005044:	58021800 	.word	0x58021800
 8005048:	00004184 	.word	0x00004184
 800504c:	000040b4 	.word	0x000040b4
 8005050:	000040d8 	.word	0x000040d8
 8005054:	000040c0 	.word	0x000040c0
 8005058:	000040cc 	.word	0x000040cc
 800505c:	000040b8 	.word	0x000040b8
 8005060:	000040ec 	.word	0x000040ec
 8005064:	000040c4 	.word	0x000040c4
 8005068:	000040d0 	.word	0x000040d0
 800506c:	000040bc 	.word	0x000040bc
 8005070:	00004100 	.word	0x00004100
 8005074:	000040c8 	.word	0x000040c8
 8005078:	000040d4 	.word	0x000040d4
 800507c:	00000018 	.word	0x00000018
 8005080:	0000001c 	.word	0x0000001c
 8005084:	00000020 	.word	0x00000020
 8005088:	00000024 	.word	0x00000024
 800508c:	00000028 	.word	0x00000028
 8005090:	0000002c 	.word	0x0000002c
 8005094:	00000048 	.word	0x00000048
 8005098:	00000054 	.word	0x00000054
 800509c:	00000058 	.word	0x00000058
 80050a0:	00000060 	.word	0x00000060
 80050a4:	000000c4 	.word	0x000000c4
 80050a8:	000000c8 	.word	0x000000c8
 80050ac:	000000cc 	.word	0x000000cc
 80050b0:	000000d0 	.word	0x000000d0
 80050b4:	00004038 	.word	0x00004038
 80050b8:	0000403c 	.word	0x0000403c
 80050bc:	00004040 	.word	0x00004040
 80050c0:	00004044 	.word	0x00004044
 80050c4:	00004046 	.word	0x00004046
 80050c8:	0000405c 	.word	0x0000405c
 80050cc:	0000405e 	.word	0x0000405e
 80050d0:	0000406c 	.word	0x0000406c
 80050d4:	00004070 	.word	0x00004070
 80050d8:	00004074 	.word	0x00004074
 80050dc:	00004078 	.word	0x00004078
 80050e0:	0000407c 	.word	0x0000407c
 80050e4:	00004080 	.word	0x00004080
 80050e8:	00004084 	.word	0x00004084
 80050ec:	00004088 	.word	0x00004088
 80050f0:	0000408c 	.word	0x0000408c
 80050f4:	00004090 	.word	0x00004090
 80050f8:	00004094 	.word	0x00004094
 80050fc:	00004098 	.word	0x00004098
 8005100:	00004174 	.word	0x00004174
 8005104:	00004176 	.word	0x00004176
 8005108:	00004178 	.word	0x00004178
 800510c:	0000417a 	.word	0x0000417a
 8005110:	0000417c 	.word	0x0000417c
 8005114:	0000417e 	.word	0x0000417e
 8005118:	00004180 	.word	0x00004180
 800511c:	00004182 	.word	0x00004182
 8005120:	000041a6 	.word	0x000041a6
 8005124:	000041a7 	.word	0x000041a7
 8005128:	000041ac 	.word	0x000041ac
 800512c:	000041b0 	.word	0x000041b0
 8005130:	000041b8 	.word	0x000041b8
 8005134:	000041bc 	.word	0x000041bc
 8005138:	000041bd 	.word	0x000041bd
 800513c:	000041be 	.word	0x000041be
 8005140:	000041c0 	.word	0x000041c0
 8005144:	000041c4 	.word	0x000041c4
 8005148:	00004114 	.word	0x00004114
 800514c:	41600000 	.word	0x41600000
 8005150:	00004118 	.word	0x00004118
 8005154:	41400000 	.word	0x41400000
 8005158:	0000411c 	.word	0x0000411c
 800515c:	40a00000 	.word	0x40a00000
 8005160:	00004120 	.word	0x00004120
 8005164:	41200000 	.word	0x41200000
 8005168:	00004124 	.word	0x00004124
 800516c:	00004128 	.word	0x00004128
 8005170:	0000412c 	.word	0x0000412c
 8005174:	41f00000 	.word	0x41f00000
 8005178:	00004130 	.word	0x00004130
 800517c:	41a00000 	.word	0x41a00000
 8005180:	00004134 	.word	0x00004134
 8005184:	40b00000 	.word	0x40b00000
 8005188:	40c00000 	.word	0x40c00000
 800518c:	41100000 	.word	0x41100000
 8005190:	00004138 	.word	0x00004138
 8005194:	4aa7      	ldr	r2, [pc, #668]	@ (8005434 <main+0x6a4>)
 8005196:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005198:	4ba7      	ldr	r3, [pc, #668]	@ (8005438 <main+0x6a8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4aa5      	ldr	r2, [pc, #660]	@ (8005434 <main+0x6a4>)
 800519e:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;//
 80051a0:	4ba6      	ldr	r3, [pc, #664]	@ (800543c <main+0x6ac>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4aa6      	ldr	r2, [pc, #664]	@ (8005440 <main+0x6b0>)
 80051a6:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 80051a8:	4ba6      	ldr	r3, [pc, #664]	@ (8005444 <main+0x6b4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4aa4      	ldr	r2, [pc, #656]	@ (8005440 <main+0x6b0>)
 80051ae:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 80051b0:	4ba5      	ldr	r3, [pc, #660]	@ (8005448 <main+0x6b8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4aa2      	ldr	r2, [pc, #648]	@ (8005440 <main+0x6b0>)
 80051b6:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;//
 80051b8:	4ba4      	ldr	r3, [pc, #656]	@ (800544c <main+0x6bc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4aa4      	ldr	r2, [pc, #656]	@ (8005450 <main+0x6c0>)
 80051be:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 80051c0:	4ba4      	ldr	r3, [pc, #656]	@ (8005454 <main+0x6c4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4aa2      	ldr	r2, [pc, #648]	@ (8005450 <main+0x6c0>)
 80051c6:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 80051c8:	4ba3      	ldr	r3, [pc, #652]	@ (8005458 <main+0x6c8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4aa0      	ldr	r2, [pc, #640]	@ (8005450 <main+0x6c0>)
 80051ce:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Pitch[0] = p_pitchfactor;
 80051d0:	4ba2      	ldr	r3, [pc, #648]	@ (800545c <main+0x6cc>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4aa2      	ldr	r2, [pc, #648]	@ (8005460 <main+0x6d0>)
 80051d6:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Pitch[1] = i_pitchfactor;
 80051d8:	4ba2      	ldr	r3, [pc, #648]	@ (8005464 <main+0x6d4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4aa0      	ldr	r2, [pc, #640]	@ (8005460 <main+0x6d0>)
 80051de:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Pitch[2] = d_pitchfactor;
 80051e0:	4ba1      	ldr	r3, [pc, #644]	@ (8005468 <main+0x6d8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a9e      	ldr	r2, [pc, #632]	@ (8005460 <main+0x6d0>)
 80051e6:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Rool[0] = p_roolfactor;//
 80051e8:	4ba0      	ldr	r3, [pc, #640]	@ (800546c <main+0x6dc>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4aa0      	ldr	r2, [pc, #640]	@ (8005470 <main+0x6e0>)
 80051ee:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Rool[1] = i_roolfactor;
 80051f0:	4ba0      	ldr	r3, [pc, #640]	@ (8005474 <main+0x6e4>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a9e      	ldr	r2, [pc, #632]	@ (8005470 <main+0x6e0>)
 80051f6:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Rool[2] = d_roolfactor;
 80051f8:	4b9f      	ldr	r3, [pc, #636]	@ (8005478 <main+0x6e8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a9c      	ldr	r2, [pc, #624]	@ (8005470 <main+0x6e0>)
 80051fe:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Yaw[0] = p_yawfactor;//
 8005200:	4b9e      	ldr	r3, [pc, #632]	@ (800547c <main+0x6ec>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a9e      	ldr	r2, [pc, #632]	@ (8005480 <main+0x6f0>)
 8005206:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Yaw[1] = i_yawfactor;
 8005208:	4b9e      	ldr	r3, [pc, #632]	@ (8005484 <main+0x6f4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a9c      	ldr	r2, [pc, #624]	@ (8005480 <main+0x6f0>)
 800520e:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Yaw[2] = d_yawfactor;
 8005210:	4b9d      	ldr	r3, [pc, #628]	@ (8005488 <main+0x6f8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a9a      	ldr	r2, [pc, #616]	@ (8005480 <main+0x6f0>)
 8005216:	6093      	str	r3, [r2, #8]


  	data.ox = 0;
 8005218:	4b9c      	ldr	r3, [pc, #624]	@ (800548c <main+0x6fc>)
 800521a:	f04f 0200 	mov.w	r2, #0
 800521e:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 8005220:	4b9a      	ldr	r3, [pc, #616]	@ (800548c <main+0x6fc>)
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 8005228:	4b98      	ldr	r3, [pc, #608]	@ (800548c <main+0x6fc>)
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 8005230:	4b96      	ldr	r3, [pc, #600]	@ (800548c <main+0x6fc>)
 8005232:	f04f 0200 	mov.w	r2, #0
 8005236:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 8005238:	4b94      	ldr	r3, [pc, #592]	@ (800548c <main+0x6fc>)
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 8005240:	4b92      	ldr	r3, [pc, #584]	@ (800548c <main+0x6fc>)
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	609a      	str	r2, [r3, #8]


  	pid_pitch = 0;
 8005248:	4b91      	ldr	r3, [pc, #580]	@ (8005490 <main+0x700>)
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
  	pid_yaw = 0;
 8005250:	4b90      	ldr	r3, [pc, #576]	@ (8005494 <main+0x704>)
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	601a      	str	r2, [r3, #0]
  	pid_rool = 0;
 8005258:	4b8f      	ldr	r3, [pc, #572]	@ (8005498 <main+0x708>)
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	601a      	str	r2, [r3, #0]

  	pid_angular_rate_pitch = 0;
 8005260:	4b8e      	ldr	r3, [pc, #568]	@ (800549c <main+0x70c>)
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_yaw = 0;
 8005268:	4b8d      	ldr	r3, [pc, #564]	@ (80054a0 <main+0x710>)
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_rool = 0;
 8005270:	4b8c      	ldr	r3, [pc, #560]	@ (80054a4 <main+0x714>)
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	601a      	str	r2, [r3, #0]


  	uint8_t o[3] = "Odb";
 8005278:	4a8b      	ldr	r2, [pc, #556]	@ (80054a8 <main+0x718>)
 800527a:	f107 0308 	add.w	r3, r7, #8
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	4611      	mov	r1, r2
 8005282:	8019      	strh	r1, [r3, #0]
 8005284:	3302      	adds	r3, #2
 8005286:	0c12      	lsrs	r2, r2, #16
 8005288:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 800528a:	4a88      	ldr	r2, [pc, #544]	@ (80054ac <main+0x71c>)
 800528c:	1d3b      	adds	r3, r7, #4
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	4611      	mov	r1, r2
 8005292:	8019      	strh	r1, [r3, #0]
 8005294:	3302      	adds	r3, #2
 8005296:	0c12      	lsrs	r2, r2, #16
 8005298:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 800529a:	2201      	movs	r2, #1
 800529c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052a0:	4883      	ldr	r0, [pc, #524]	@ (80054b0 <main+0x720>)
 80052a2:	f009 f87d 	bl	800e3a0 <HAL_GPIO_WritePin>
  	LED_6_1;
 80052a6:	2201      	movs	r2, #1
 80052a8:	2108      	movs	r1, #8
 80052aa:	4882      	ldr	r0, [pc, #520]	@ (80054b4 <main+0x724>)
 80052ac:	f009 f878 	bl	800e3a0 <HAL_GPIO_WritePin>
  	LED_7_1;
 80052b0:	2201      	movs	r2, #1
 80052b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80052b6:	487e      	ldr	r0, [pc, #504]	@ (80054b0 <main+0x720>)
 80052b8:	f009 f872 	bl	800e3a0 <HAL_GPIO_WritePin>
  	LED_uSD_1;
 80052bc:	2201      	movs	r2, #1
 80052be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80052c2:	487d      	ldr	r0, [pc, #500]	@ (80054b8 <main+0x728>)
 80052c4:	f009 f86c 	bl	800e3a0 <HAL_GPIO_WritePin>
  	LED_G_1;
 80052c8:	2201      	movs	r2, #1
 80052ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052ce:	4879      	ldr	r0, [pc, #484]	@ (80054b4 <main+0x724>)
 80052d0:	f009 f866 	bl	800e3a0 <HAL_GPIO_WritePin>
  	LED_Y_1;
 80052d4:	2201      	movs	r2, #1
 80052d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80052da:	4878      	ldr	r0, [pc, #480]	@ (80054bc <main+0x72c>)
 80052dc:	f009 f860 	bl	800e3a0 <HAL_GPIO_WritePin>
  	LED_R_1;
 80052e0:	2201      	movs	r2, #1
 80052e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80052e6:	4875      	ldr	r0, [pc, #468]	@ (80054bc <main+0x72c>)
 80052e8:	f009 f85a 	bl	800e3a0 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 80052ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052f0:	f003 fef8 	bl	80090e4 <HAL_Delay>
  	LED_G_0;
 80052f4:	2200      	movs	r2, #0
 80052f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052fa:	486e      	ldr	r0, [pc, #440]	@ (80054b4 <main+0x724>)
 80052fc:	f009 f850 	bl	800e3a0 <HAL_GPIO_WritePin>
  	LED_Y_0;
 8005300:	2200      	movs	r2, #0
 8005302:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005306:	486d      	ldr	r0, [pc, #436]	@ (80054bc <main+0x72c>)
 8005308:	f009 f84a 	bl	800e3a0 <HAL_GPIO_WritePin>
  	LED_R_0;
 800530c:	2200      	movs	r2, #0
 800530e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005312:	486a      	ldr	r0, [pc, #424]	@ (80054bc <main+0x72c>)
 8005314:	f009 f844 	bl	800e3a0 <HAL_GPIO_WritePin>
  	LED_5_0;
 8005318:	2200      	movs	r2, #0
 800531a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800531e:	4864      	ldr	r0, [pc, #400]	@ (80054b0 <main+0x720>)
 8005320:	f009 f83e 	bl	800e3a0 <HAL_GPIO_WritePin>
  	LED_6_0;
 8005324:	2200      	movs	r2, #0
 8005326:	2108      	movs	r1, #8
 8005328:	4862      	ldr	r0, [pc, #392]	@ (80054b4 <main+0x724>)
 800532a:	f009 f839 	bl	800e3a0 <HAL_GPIO_WritePin>
  	LED_7_0;
 800532e:	2200      	movs	r2, #0
 8005330:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005334:	485e      	ldr	r0, [pc, #376]	@ (80054b0 <main+0x720>)
 8005336:	f009 f833 	bl	800e3a0 <HAL_GPIO_WritePin>
  	LED_uSD_0;
 800533a:	2200      	movs	r2, #0
 800533c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005340:	485d      	ldr	r0, [pc, #372]	@ (80054b8 <main+0x728>)
 8005342:	f009 f82d 	bl	800e3a0 <HAL_GPIO_WritePin>




  	for(int i = 0; i < 4000; i++){
 8005346:	2300      	movs	r3, #0
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	e009      	b.n	8005360 <main+0x5d0>
  		Old_Data_stack.olddata[i] = 0;
 800534c:	4a5c      	ldr	r2, [pc, #368]	@ (80054c0 <main+0x730>)
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	3301      	adds	r3, #1
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8005366:	dbf1      	blt.n	800534c <main+0x5bc>
  	}
  	Old_Data_stack.start_pointer = 0;
 8005368:	4b55      	ldr	r3, [pc, #340]	@ (80054c0 <main+0x730>)
 800536a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800536e:	2200      	movs	r2, #0
 8005370:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 8005374:	4b52      	ldr	r3, [pc, #328]	@ (80054c0 <main+0x730>)
 8005376:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800537a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800537e:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 8005382:	4b50      	ldr	r3, [pc, #320]	@ (80054c4 <main+0x734>)
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 8005388:	484f      	ldr	r0, [pc, #316]	@ (80054c8 <main+0x738>)
 800538a:	f010 fdf9 	bl	8015f80 <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);//todo psuje program
 800538e:	2201      	movs	r2, #1
 8005390:	494c      	ldr	r1, [pc, #304]	@ (80054c4 <main+0x734>)
 8005392:	484e      	ldr	r0, [pc, #312]	@ (80054cc <main+0x73c>)
 8005394:	f004 fbbe 	bl	8009b14 <HAL_ADC_Start_DMA>
  	LED_R_1;
 8005398:	2201      	movs	r2, #1
 800539a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800539e:	4847      	ldr	r0, [pc, #284]	@ (80054bc <main+0x72c>)
 80053a0:	f008 fffe 	bl	800e3a0 <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 80053a4:	bf00      	nop
 80053a6:	4b47      	ldr	r3, [pc, #284]	@ (80054c4 <main+0x734>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0fb      	beq.n	80053a6 <main+0x616>

  	}
  	LED_R_0;
 80053ae:	2200      	movs	r2, #0
 80053b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80053b4:	4841      	ldr	r0, [pc, #260]	@ (80054bc <main+0x72c>)
 80053b6:	f008 fff3 	bl	800e3a0 <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 80053ba:	f7fe fde1 	bl	8003f80 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 80053be:	2104      	movs	r1, #4
 80053c0:	4843      	ldr	r0, [pc, #268]	@ (80054d0 <main+0x740>)
 80053c2:	f010 ff39 	bl	8016238 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80053c6:	2108      	movs	r1, #8
 80053c8:	4841      	ldr	r0, [pc, #260]	@ (80054d0 <main+0x740>)
 80053ca:	f010 ff35 	bl	8016238 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80053ce:	210c      	movs	r1, #12
 80053d0:	483f      	ldr	r0, [pc, #252]	@ (80054d0 <main+0x740>)
 80053d2:	f010 ff31 	bl	8016238 <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 80053d6:	4b3f      	ldr	r3, [pc, #252]	@ (80054d4 <main+0x744>)
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	4618      	mov	r0, r3
 80053de:	f001 fed3 	bl	8007188 <RGB_LED_For_BAT>
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 80053e2:	4b3c      	ldr	r3, [pc, #240]	@ (80054d4 <main+0x744>)
 80053e4:	8a9b      	ldrh	r3, [r3, #20]
 80053e6:	2b07      	cmp	r3, #7
 80053e8:	d107      	bne.n	80053fa <main+0x66a>
  	{
  		LED_R_1;
 80053ea:	2201      	movs	r2, #1
 80053ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80053f0:	4832      	ldr	r0, [pc, #200]	@ (80054bc <main+0x72c>)
 80053f2:	f008 ffd5 	bl	800e3a0 <HAL_GPIO_WritePin>
  		while(1){
 80053f6:	bf00      	nop
 80053f8:	e7fd      	b.n	80053f6 <main+0x666>

  		}
  	}
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 80053fa:	4b36      	ldr	r3, [pc, #216]	@ (80054d4 <main+0x744>)
 80053fc:	8a9b      	ldrh	r3, [r3, #20]
 80053fe:	2b09      	cmp	r3, #9
 8005400:	d107      	bne.n	8005412 <main+0x682>
  		LED_R_1;
 8005402:	2201      	movs	r2, #1
 8005404:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005408:	482c      	ldr	r0, [pc, #176]	@ (80054bc <main+0x72c>)
 800540a:	f008 ffc9 	bl	800e3a0 <HAL_GPIO_WritePin>
  		while(1){
 800540e:	bf00      	nop
 8005410:	e7fd      	b.n	800540e <main+0x67e>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 8005412:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005416:	4829      	ldr	r0, [pc, #164]	@ (80054bc <main+0x72c>)
 8005418:	f008 ffaa 	bl	800e370 <HAL_GPIO_ReadPin>
 800541c:	4603      	mov	r3, r0
 800541e:	461a      	mov	r2, r3
 8005420:	4b2d      	ldr	r3, [pc, #180]	@ (80054d8 <main+0x748>)
 8005422:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 8005424:	4b2c      	ldr	r3, [pc, #176]	@ (80054d8 <main+0x748>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d157      	bne.n	80054dc <main+0x74c>
		SD_enable_Flag = 0;
 800542c:	4b2a      	ldr	r3, [pc, #168]	@ (80054d8 <main+0x748>)
 800542e:	2200      	movs	r2, #0
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	e056      	b.n	80054e2 <main+0x752>
 8005434:	00004138 	.word	0x00004138
 8005438:	0000412c 	.word	0x0000412c
 800543c:	00004118 	.word	0x00004118
 8005440:	0000414c 	.word	0x0000414c
 8005444:	00004124 	.word	0x00004124
 8005448:	00004130 	.word	0x00004130
 800544c:	0000411c 	.word	0x0000411c
 8005450:	00004160 	.word	0x00004160
 8005454:	00004128 	.word	0x00004128
 8005458:	00004134 	.word	0x00004134
 800545c:	000040b4 	.word	0x000040b4
 8005460:	000040d8 	.word	0x000040d8
 8005464:	000040c0 	.word	0x000040c0
 8005468:	000040cc 	.word	0x000040cc
 800546c:	000040b8 	.word	0x000040b8
 8005470:	000040ec 	.word	0x000040ec
 8005474:	000040c4 	.word	0x000040c4
 8005478:	000040d0 	.word	0x000040d0
 800547c:	000040bc 	.word	0x000040bc
 8005480:	00004100 	.word	0x00004100
 8005484:	000040c8 	.word	0x000040c8
 8005488:	000040d4 	.word	0x000040d4
 800548c:	00000064 	.word	0x00000064
 8005490:	0000409c 	.word	0x0000409c
 8005494:	000040a0 	.word	0x000040a0
 8005498:	000040a4 	.word	0x000040a4
 800549c:	000040a8 	.word	0x000040a8
 80054a0:	000040ac 	.word	0x000040ac
 80054a4:	000040b0 	.word	0x000040b0
 80054a8:	0801e6fc 	.word	0x0801e6fc
 80054ac:	0801e700 	.word	0x0801e700
 80054b0:	58020000 	.word	0x58020000
 80054b4:	58021000 	.word	0x58021000
 80054b8:	58020c00 	.word	0x58020c00
 80054bc:	58020400 	.word	0x58020400
 80054c0:	00000184 	.word	0x00000184
 80054c4:	24000ed0 	.word	0x24000ed0
 80054c8:	24000464 	.word	0x24000464
 80054cc:	240000ac 	.word	0x240000ac
 80054d0:	24000380 	.word	0x24000380
 80054d4:	00000160 	.word	0x00000160
 80054d8:	000041b4 	.word	0x000041b4
	}
	else{
		SD_enable_Flag = 1;
 80054dc:	4bb2      	ldr	r3, [pc, #712]	@ (80057a8 <main+0xa18>)
 80054de:	2201      	movs	r2, #1
 80054e0:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 80054e2:	4bb1      	ldr	r3, [pc, #708]	@ (80057a8 <main+0xa18>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d15f      	bne.n	80055aa <main+0x81a>
		LED_uSD_1;
 80054ea:	2201      	movs	r2, #1
 80054ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80054f0:	48ae      	ldr	r0, [pc, #696]	@ (80057ac <main+0xa1c>)
 80054f2:	f008 ff55 	bl	800e3a0 <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 80054f6:	2201      	movs	r2, #1
 80054f8:	49ad      	ldr	r1, [pc, #692]	@ (80057b0 <main+0xa20>)
 80054fa:	48ae      	ldr	r0, [pc, #696]	@ (80057b4 <main+0xa24>)
 80054fc:	f017 fdb2 	bl	801d064 <f_mount>
 8005500:	4603      	mov	r3, r0
 8005502:	461a      	mov	r2, r3
 8005504:	4bac      	ldr	r3, [pc, #688]	@ (80057b8 <main+0xa28>)
 8005506:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 8005508:	48ac      	ldr	r0, [pc, #688]	@ (80057bc <main+0xa2c>)
 800550a:	f018 f9f5 	bl	801d8f8 <f_unlink>
 800550e:	4603      	mov	r3, r0
 8005510:	461a      	mov	r2, r3
 8005512:	4ba9      	ldr	r3, [pc, #676]	@ (80057b8 <main+0xa28>)
 8005514:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 8005516:	2201      	movs	r2, #1
 8005518:	49a5      	ldr	r1, [pc, #660]	@ (80057b0 <main+0xa20>)
 800551a:	48a6      	ldr	r0, [pc, #664]	@ (80057b4 <main+0xa24>)
 800551c:	f017 fda2 	bl	801d064 <f_mount>
 8005520:	4603      	mov	r3, r0
 8005522:	461a      	mov	r2, r3
 8005524:	4ba4      	ldr	r3, [pc, #656]	@ (80057b8 <main+0xa28>)
 8005526:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 8005528:	220a      	movs	r2, #10
 800552a:	49a5      	ldr	r1, [pc, #660]	@ (80057c0 <main+0xa30>)
 800552c:	48a5      	ldr	r0, [pc, #660]	@ (80057c4 <main+0xa34>)
 800552e:	f017 fddf 	bl	801d0f0 <f_open>
 8005532:	4603      	mov	r3, r0
 8005534:	461a      	mov	r2, r3
 8005536:	4ba0      	ldr	r3, [pc, #640]	@ (80057b8 <main+0xa28>)
 8005538:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 800553a:	2200      	movs	r2, #0
 800553c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005540:	489a      	ldr	r0, [pc, #616]	@ (80057ac <main+0xa1c>)
 8005542:	f008 ff2d 	bl	800e3a0 <HAL_GPIO_WritePin>

		LED_uSD_1;
 8005546:	2201      	movs	r2, #1
 8005548:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800554c:	4897      	ldr	r0, [pc, #604]	@ (80057ac <main+0xa1c>)
 800554e:	f008 ff27 	bl	800e3a0 <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 8005552:	2300      	movs	r3, #0
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	e007      	b.n	8005568 <main+0x7d8>
			DataToSendBuffer[i] = 49;
 8005558:	4a9b      	ldr	r2, [pc, #620]	@ (80057c8 <main+0xa38>)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	4413      	add	r3, r2
 800555e:	2231      	movs	r2, #49	@ 0x31
 8005560:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	3301      	adds	r3, #1
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	4a98      	ldr	r2, [pc, #608]	@ (80057cc <main+0xa3c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	ddf3      	ble.n	8005558 <main+0x7c8>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 8005570:	4b97      	ldr	r3, [pc, #604]	@ (80057d0 <main+0xa40>)
 8005572:	2281      	movs	r2, #129	@ 0x81
 8005574:	4994      	ldr	r1, [pc, #592]	@ (80057c8 <main+0xa38>)
 8005576:	4893      	ldr	r0, [pc, #588]	@ (80057c4 <main+0xa34>)
 8005578:	f017 ff82 	bl	801d480 <f_write>
 800557c:	4603      	mov	r3, r0
 800557e:	461a      	mov	r2, r3
 8005580:	4b8d      	ldr	r3, [pc, #564]	@ (80057b8 <main+0xa28>)
 8005582:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 8005584:	488f      	ldr	r0, [pc, #572]	@ (80057c4 <main+0xa34>)
 8005586:	f018 f98d 	bl	801d8a4 <f_close>
 800558a:	4603      	mov	r3, r0
 800558c:	461a      	mov	r2, r3
 800558e:	4b8a      	ldr	r3, [pc, #552]	@ (80057b8 <main+0xa28>)
 8005590:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 8005592:	4b89      	ldr	r3, [pc, #548]	@ (80057b8 <main+0xa28>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <main+0x80e>
			while(1){
 800559a:	bf00      	nop
 800559c:	e7fd      	b.n	800559a <main+0x80a>

			}
		}
		LED_uSD_0;
 800559e:	2200      	movs	r2, #0
 80055a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055a4:	4881      	ldr	r0, [pc, #516]	@ (80057ac <main+0xa1c>)
 80055a6:	f008 fefb 	bl	800e3a0 <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 80055aa:	2201      	movs	r2, #1
 80055ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055b0:	4888      	ldr	r0, [pc, #544]	@ (80057d4 <main+0xa44>)
 80055b2:	f008 fef5 	bl	800e3a0 <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 80055b6:	4888      	ldr	r0, [pc, #544]	@ (80057d8 <main+0xa48>)
 80055b8:	f7fb fdf4 	bl	80011a4 <MPU6050_INIT>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d107      	bne.n	80055d2 <main+0x842>
			LED_R_1;
 80055c2:	2201      	movs	r2, #1
 80055c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055c8:	4884      	ldr	r0, [pc, #528]	@ (80057dc <main+0xa4c>)
 80055ca:	f008 fee9 	bl	800e3a0 <HAL_GPIO_WritePin>
			while(1){
 80055ce:	bf00      	nop
 80055d0:	e7fd      	b.n	80055ce <main+0x83e>
			}
		}
		LED_Y_1;
 80055d2:	2201      	movs	r2, #1
 80055d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80055d8:	4880      	ldr	r0, [pc, #512]	@ (80057dc <main+0xa4c>)
 80055da:	f008 fee1 	bl	800e3a0 <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION(&accelx_cal, &accely_cal, &accelz_cal, &gyrox_cal, &gyroy_cal, &gyroz_cal, Gyr_Scale, Acc_Scale);
 80055de:	eddf 7a80 	vldr	s15, [pc, #512]	@ 80057e0 <main+0xa50>
 80055e2:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80057e4 <main+0xa54>
 80055e6:	4b80      	ldr	r3, [pc, #512]	@ (80057e8 <main+0xa58>)
 80055e8:	9301      	str	r3, [sp, #4]
 80055ea:	4b80      	ldr	r3, [pc, #512]	@ (80057ec <main+0xa5c>)
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	eef0 0a47 	vmov.f32	s1, s14
 80055f2:	eeb0 0a67 	vmov.f32	s0, s15
 80055f6:	4b7e      	ldr	r3, [pc, #504]	@ (80057f0 <main+0xa60>)
 80055f8:	4a7e      	ldr	r2, [pc, #504]	@ (80057f4 <main+0xa64>)
 80055fa:	497f      	ldr	r1, [pc, #508]	@ (80057f8 <main+0xa68>)
 80055fc:	487f      	ldr	r0, [pc, #508]	@ (80057fc <main+0xa6c>)
 80055fe:	f7fb fe9b 	bl	8001338 <MPU6050_CALIBRATION>
		LED_Y_0;
 8005602:	2200      	movs	r2, #0
 8005604:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005608:	4874      	ldr	r0, [pc, #464]	@ (80057dc <main+0xa4c>)
 800560a:	f008 fec9 	bl	800e3a0 <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 800560e:	4872      	ldr	r0, [pc, #456]	@ (80057d8 <main+0xa48>)
 8005610:	f7fb f85e 	bl	80006d0 <BMP180_init>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d107      	bne.n	800562a <main+0x89a>
			LED_R_1;
 800561a:	2201      	movs	r2, #1
 800561c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005620:	486e      	ldr	r0, [pc, #440]	@ (80057dc <main+0xa4c>)
 8005622:	f008 febd 	bl	800e3a0 <HAL_GPIO_WritePin>
			while(1){
 8005626:	bf00      	nop
 8005628:	e7fd      	b.n	8005626 <main+0x896>
			}
		}
		LED_Y_1;
 800562a:	2201      	movs	r2, #1
 800562c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005630:	486a      	ldr	r0, [pc, #424]	@ (80057dc <main+0xa4c>)
 8005632:	f008 feb5 	bl	800e3a0 <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&startpres);
 8005636:	4872      	ldr	r0, [pc, #456]	@ (8005800 <main+0xa70>)
 8005638:	f7fb fb9c 	bl	8000d74 <BMP180_CALIBRATION>
		LED_Y_0;
 800563c:	2200      	movs	r2, #0
 800563e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005642:	4866      	ldr	r0, [pc, #408]	@ (80057dc <main+0xa4c>)
 8005644:	f008 feac 	bl	800e3a0 <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 8005648:	4863      	ldr	r0, [pc, #396]	@ (80057d8 <main+0xa48>)
 800564a:	f7fb fcc5 	bl	8000fd8 <HMC5883L_Init>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d107      	bne.n	8005664 <main+0x8d4>
			LED_R_1;
 8005654:	2201      	movs	r2, #1
 8005656:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800565a:	4860      	ldr	r0, [pc, #384]	@ (80057dc <main+0xa4c>)
 800565c:	f008 fea0 	bl	800e3a0 <HAL_GPIO_WritePin>
			while(1){
 8005660:	bf00      	nop
 8005662:	e7fd      	b.n	8005660 <main+0x8d0>
			}
		}
		LED_Y_1;
 8005664:	2201      	movs	r2, #1
 8005666:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800566a:	485c      	ldr	r0, [pc, #368]	@ (80057dc <main+0xa4c>)
 800566c:	f008 fe98 	bl	800e3a0 <HAL_GPIO_WritePin>
		Mag_Offset_val = HMC5883L_Calibration();
 8005670:	f7fb fd62 	bl	8001138 <HMC5883L_Calibration>
 8005674:	4603      	mov	r3, r0
 8005676:	461a      	mov	r2, r3
 8005678:	4b62      	ldr	r3, [pc, #392]	@ (8005804 <main+0xa74>)
 800567a:	801a      	strh	r2, [r3, #0]
		LED_Y_0;
 800567c:	2200      	movs	r2, #0
 800567e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005682:	4856      	ldr	r0, [pc, #344]	@ (80057dc <main+0xa4c>)
 8005684:	f008 fe8c 	bl	800e3a0 <HAL_GPIO_WritePin>

		LED_5_0;
 8005688:	2200      	movs	r2, #0
 800568a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800568e:	4851      	ldr	r0, [pc, #324]	@ (80057d4 <main+0xa44>)
 8005690:	f008 fe86 	bl	800e3a0 <HAL_GPIO_WritePin>



		MYDRON.dron_status.Connection = DRON_CONNECTED;
 8005694:	4b5c      	ldr	r3, [pc, #368]	@ (8005808 <main+0xa78>)
 8005696:	2201      	movs	r2, #1
 8005698:	825a      	strh	r2, [r3, #18]
		MYDRON.dron_status.position = DRON_POSITION_OK;
 800569a:	4b5b      	ldr	r3, [pc, #364]	@ (8005808 <main+0xa78>)
 800569c:	220c      	movs	r2, #12
 800569e:	835a      	strh	r2, [r3, #26]


		MYDRON.THRUST = 0;
 80056a0:	4b59      	ldr	r3, [pc, #356]	@ (8005808 <main+0xa78>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	805a      	strh	r2, [r3, #2]




	/////////////////////////////// nRF24
		LED_6_1;
 80056a6:	2201      	movs	r2, #1
 80056a8:	2108      	movs	r1, #8
 80056aa:	4858      	ldr	r0, [pc, #352]	@ (800580c <main+0xa7c>)
 80056ac:	f008 fe78 	bl	800e3a0 <HAL_GPIO_WritePin>
		nRF24_Init(&hspi6);
 80056b0:	4857      	ldr	r0, [pc, #348]	@ (8005810 <main+0xa80>)
 80056b2:	f7fc ff81 	bl	80025b8 <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 80056b6:	f107 0308 	add.w	r3, r7, #8
 80056ba:	4619      	mov	r1, r3
 80056bc:	2000      	movs	r0, #0
 80056be:	f7fc fe20 	bl	8002302 <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 80056c2:	1d3b      	adds	r3, r7, #4
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fc fe55 	bl	8002374 <nRF24_SetTXAddress>
		nRF24_Inittest();
 80056ca:	f7fc ffc9 	bl	8002660 <nRF24_Inittest>
		nRF24_TX_Mode();
 80056ce:	f7fc fc43 	bl	8001f58 <nRF24_TX_Mode>


		for(int i = 0; i < 32; i++){
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	e007      	b.n	80056e8 <main+0x958>
			Txcode[i] = 0;
 80056d8:	4a4e      	ldr	r2, [pc, #312]	@ (8005814 <main+0xa84>)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	4413      	add	r3, r2
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	3301      	adds	r3, #1
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2b1f      	cmp	r3, #31
 80056ec:	ddf4      	ble.n	80056d8 <main+0x948>
		}
		Txcode[22] = 'd';
 80056ee:	4b49      	ldr	r3, [pc, #292]	@ (8005814 <main+0xa84>)
 80056f0:	2264      	movs	r2, #100	@ 0x64
 80056f2:	759a      	strb	r2, [r3, #22]
		Txcode[23] = 'r';
 80056f4:	4b47      	ldr	r3, [pc, #284]	@ (8005814 <main+0xa84>)
 80056f6:	2272      	movs	r2, #114	@ 0x72
 80056f8:	75da      	strb	r2, [r3, #23]
		Txcode[24] = 'o';
 80056fa:	4b46      	ldr	r3, [pc, #280]	@ (8005814 <main+0xa84>)
 80056fc:	226f      	movs	r2, #111	@ 0x6f
 80056fe:	761a      	strb	r2, [r3, #24]
		Txcode[25] = 'n';
 8005700:	4b44      	ldr	r3, [pc, #272]	@ (8005814 <main+0xa84>)
 8005702:	226e      	movs	r2, #110	@ 0x6e
 8005704:	765a      	strb	r2, [r3, #25]
		Txcode[26] = '2';
 8005706:	4b43      	ldr	r3, [pc, #268]	@ (8005814 <main+0xa84>)
 8005708:	2232      	movs	r2, #50	@ 0x32
 800570a:	769a      	strb	r2, [r3, #26]
		Txcode[27] = 'c';
 800570c:	4b41      	ldr	r3, [pc, #260]	@ (8005814 <main+0xa84>)
 800570e:	2263      	movs	r2, #99	@ 0x63
 8005710:	76da      	strb	r2, [r3, #27]
		Txcode[28] = '1';
 8005712:	4b40      	ldr	r3, [pc, #256]	@ (8005814 <main+0xa84>)
 8005714:	2231      	movs	r2, #49	@ 0x31
 8005716:	771a      	strb	r2, [r3, #28]
		Txcode[29] = 'z';
 8005718:	4b3e      	ldr	r3, [pc, #248]	@ (8005814 <main+0xa84>)
 800571a:	227a      	movs	r2, #122	@ 0x7a
 800571c:	775a      	strb	r2, [r3, #29]
		Txcode[30] = 'a';
 800571e:	4b3d      	ldr	r3, [pc, #244]	@ (8005814 <main+0xa84>)
 8005720:	2261      	movs	r2, #97	@ 0x61
 8005722:	779a      	strb	r2, [r3, #30]
		Txcode[31] = '7';
 8005724:	4b3b      	ldr	r3, [pc, #236]	@ (8005814 <main+0xa84>)
 8005726:	2237      	movs	r2, #55	@ 0x37
 8005728:	77da      	strb	r2, [r3, #31]



		nRF24_WriteTXPayload(Txcode);
 800572a:	483a      	ldr	r0, [pc, #232]	@ (8005814 <main+0xa84>)
 800572c:	f7fc fed2 	bl	80024d4 <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 8005730:	f7fc fede 	bl	80024f0 <nRF24_WaitTX>
		nRF24_RX_Mode();
 8005734:	f7fc fbe4 	bl	8001f00 <nRF24_RX_Mode>

		uint8_t cunter = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 800573c:	e022      	b.n	8005784 <main+0x9f4>
			LED_G_1;
 800573e:	2201      	movs	r2, #1
 8005740:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005744:	4831      	ldr	r0, [pc, #196]	@ (800580c <main+0xa7c>)
 8005746:	f008 fe2b 	bl	800e3a0 <HAL_GPIO_WritePin>
			LED_Y_1;
 800574a:	2201      	movs	r2, #1
 800574c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005750:	4822      	ldr	r0, [pc, #136]	@ (80057dc <main+0xa4c>)
 8005752:	f008 fe25 	bl	800e3a0 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005756:	2001      	movs	r0, #1
 8005758:	f003 fcc4 	bl	80090e4 <HAL_Delay>
			LED_G_0;
 800575c:	2200      	movs	r2, #0
 800575e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005762:	482a      	ldr	r0, [pc, #168]	@ (800580c <main+0xa7c>)
 8005764:	f008 fe1c 	bl	800e3a0 <HAL_GPIO_WritePin>
			LED_Y_0;
 8005768:	2200      	movs	r2, #0
 800576a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800576e:	481b      	ldr	r0, [pc, #108]	@ (80057dc <main+0xa4c>)
 8005770:	f008 fe16 	bl	800e3a0 <HAL_GPIO_WritePin>

			cunter++;
 8005774:	7cfb      	ldrb	r3, [r7, #19]
 8005776:	3301      	adds	r3, #1
 8005778:	74fb      	strb	r3, [r7, #19]
			if(cunter == 100){
 800577a:	7cfb      	ldrb	r3, [r7, #19]
 800577c:	2b64      	cmp	r3, #100	@ 0x64
 800577e:	d101      	bne.n	8005784 <main+0x9f4>
				NVIC_SystemReset();
 8005780:	f7ff faf0 	bl	8004d64 <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005784:	2000      	movs	r0, #0
 8005786:	f7fc fef7 	bl	8002578 <nRF24_IsBitSetInFifoStatus>
 800578a:	4603      	mov	r3, r0
 800578c:	2b01      	cmp	r3, #1
 800578e:	d0d6      	beq.n	800573e <main+0x9ae>
			}
		}

		nRF24_ReadRXPaylaod(RxData);
 8005790:	4821      	ldr	r0, [pc, #132]	@ (8005818 <main+0xa88>)
 8005792:	f7fc fed5 	bl	8002540 <nRF24_ReadRXPaylaod>
		LED_6_0;
 8005796:	2200      	movs	r2, #0
 8005798:	2108      	movs	r1, #8
 800579a:	481c      	ldr	r0, [pc, #112]	@ (800580c <main+0xa7c>)
 800579c:	f008 fe00 	bl	800e3a0 <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 80057a0:	230c      	movs	r3, #12
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	e046      	b.n	8005834 <main+0xaa4>
 80057a6:	bf00      	nop
 80057a8:	000041b4 	.word	0x000041b4
 80057ac:	58020c00 	.word	0x58020c00
 80057b0:	0801e6e0 	.word	0x0801e6e0
 80057b4:	24000ed4 	.word	0x24000ed4
 80057b8:	24001f0c 	.word	0x24001f0c
 80057bc:	0801e6e4 	.word	0x0801e6e4
 80057c0:	0801e6f0 	.word	0x0801e6f0
 80057c4:	24001f10 	.word	0x24001f10
 80057c8:	24002f48 	.word	0x24002f48
 80057cc:	0001f7e7 	.word	0x0001f7e7
 80057d0:	24002f44 	.word	0x24002f44
 80057d4:	58020000 	.word	0x58020000
 80057d8:	24000198 	.word	0x24000198
 80057dc:	58020400 	.word	0x58020400
 80057e0:	42830000 	.word	0x42830000
 80057e4:	46000000 	.word	0x46000000
 80057e8:	00000044 	.word	0x00000044
 80057ec:	00000040 	.word	0x00000040
 80057f0:	0000003c 	.word	0x0000003c
 80057f4:	00000038 	.word	0x00000038
 80057f8:	00000034 	.word	0x00000034
 80057fc:	00000030 	.word	0x00000030
 8005800:	000000cc 	.word	0x000000cc
 8005804:	00000050 	.word	0x00000050
 8005808:	00000160 	.word	0x00000160
 800580c:	58021000 	.word	0x58021000
 8005810:	24000274 	.word	0x24000274
 8005814:	000000f4 	.word	0x000000f4
 8005818:	000000d4 	.word	0x000000d4
			Rxcode[i] = RxData[i];
 800581c:	4a96      	ldr	r2, [pc, #600]	@ (8005a78 <main+0xce8>)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4413      	add	r3, r2
 8005822:	7819      	ldrb	r1, [r3, #0]
 8005824:	4a95      	ldr	r2, [pc, #596]	@ (8005a7c <main+0xcec>)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	460a      	mov	r2, r1
 800582c:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3301      	adds	r3, #1
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b15      	cmp	r3, #21
 8005838:	ddf0      	ble.n	800581c <main+0xa8c>
		}
	///////////////////////////////////////////////////////////////////////
		ESC_INT(&htim3);
 800583a:	4891      	ldr	r0, [pc, #580]	@ (8005a80 <main+0xcf0>)
 800583c:	f7fb fb82 	bl	8000f44 <ESC_INT>

		LED_7_1;
 8005840:	2201      	movs	r2, #1
 8005842:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005846:	488f      	ldr	r0, [pc, #572]	@ (8005a84 <main+0xcf4>)
 8005848:	f008 fdaa 	bl	800e3a0 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 800584c:	2201      	movs	r2, #1
 800584e:	498e      	ldr	r1, [pc, #568]	@ (8005a88 <main+0xcf8>)
 8005850:	488e      	ldr	r0, [pc, #568]	@ (8005a8c <main+0xcfc>)
 8005852:	f012 fa75 	bl	8017d40 <HAL_UART_Receive_IT>
		LED_7_0;
 8005856:	2200      	movs	r2, #0
 8005858:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800585c:	4889      	ldr	r0, [pc, #548]	@ (8005a84 <main+0xcf4>)
 800585e:	f008 fd9f 	bl	800e3a0 <HAL_GPIO_WritePin>

		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 8005862:	488b      	ldr	r0, [pc, #556]	@ (8005a90 <main+0xd00>)
 8005864:	f010 fc0a 	bl	801607c <HAL_TIM_Base_Start_IT>



	  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005868:	4b8a      	ldr	r3, [pc, #552]	@ (8005a94 <main+0xd04>)
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	4618      	mov	r0, r3
 8005870:	f001 fc8a 	bl	8007188 <RGB_LED_For_BAT>


	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005874:	4b87      	ldr	r3, [pc, #540]	@ (8005a94 <main+0xd04>)
 8005876:	8a9b      	ldrh	r3, [r3, #20]
 8005878:	2b07      	cmp	r3, #7
 800587a:	d107      	bne.n	800588c <main+0xafc>
	  	{
	  		LED_R_1;
 800587c:	2201      	movs	r2, #1
 800587e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005882:	4885      	ldr	r0, [pc, #532]	@ (8005a98 <main+0xd08>)
 8005884:	f008 fd8c 	bl	800e3a0 <HAL_GPIO_WritePin>
	  		while(1){
 8005888:	bf00      	nop
 800588a:	e7fd      	b.n	8005888 <main+0xaf8>
	  		}
	  	}



	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 800588c:	4b81      	ldr	r3, [pc, #516]	@ (8005a94 <main+0xd04>)
 800588e:	8a9b      	ldrh	r3, [r3, #20]
 8005890:	2b09      	cmp	r3, #9
 8005892:	d107      	bne.n	80058a4 <main+0xb14>
	  		LED_R_1;
 8005894:	2201      	movs	r2, #1
 8005896:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800589a:	487f      	ldr	r0, [pc, #508]	@ (8005a98 <main+0xd08>)
 800589c:	f008 fd80 	bl	800e3a0 <HAL_GPIO_WritePin>
	  		while(1){
 80058a0:	bf00      	nop
 80058a2:	e7fd      	b.n	80058a0 <main+0xb10>
	  		}
	  	}



		STARTUP = 0;
 80058a4:	4b7d      	ldr	r3, [pc, #500]	@ (8005a9c <main+0xd0c>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 80058aa:	4b7a      	ldr	r3, [pc, #488]	@ (8005a94 <main+0xd04>)
 80058ac:	8a9b      	ldrh	r3, [r3, #20]
 80058ae:	2b07      	cmp	r3, #7
 80058b0:	d10a      	bne.n	80058c8 <main+0xb38>
	  			LED_R_1;
 80058b2:	2201      	movs	r2, #1
 80058b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058b8:	4877      	ldr	r0, [pc, #476]	@ (8005a98 <main+0xd08>)
 80058ba:	f008 fd71 	bl	800e3a0 <HAL_GPIO_WritePin>
	  			thrust_limit = MYDRON.THRUST;
 80058be:	4b75      	ldr	r3, [pc, #468]	@ (8005a94 <main+0xd04>)
 80058c0:	885b      	ldrh	r3, [r3, #2]
 80058c2:	b21a      	sxth	r2, r3
 80058c4:	4b76      	ldr	r3, [pc, #472]	@ (8005aa0 <main+0xd10>)
 80058c6:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_OK){
 80058c8:	4b72      	ldr	r3, [pc, #456]	@ (8005a94 <main+0xd04>)
 80058ca:	8a9b      	ldrh	r3, [r3, #20]
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d103      	bne.n	80058d8 <main+0xb48>
	  			thrust_limit = 10000;
 80058d0:	4b73      	ldr	r3, [pc, #460]	@ (8005aa0 <main+0xd10>)
 80058d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80058d6:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 80058d8:	4b6e      	ldr	r3, [pc, #440]	@ (8005a94 <main+0xd04>)
 80058da:	8a9b      	ldrh	r3, [r3, #20]
 80058dc:	2b09      	cmp	r3, #9
 80058de:	d118      	bne.n	8005912 <main+0xb82>
	  			ESC_POWER_1;
 80058e0:	2201      	movs	r2, #1
 80058e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80058e6:	486f      	ldr	r0, [pc, #444]	@ (8005aa4 <main+0xd14>)
 80058e8:	f008 fd5a 	bl	800e3a0 <HAL_GPIO_WritePin>
	  			LED_R_1;
 80058ec:	2201      	movs	r2, #1
 80058ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058f2:	4869      	ldr	r0, [pc, #420]	@ (8005a98 <main+0xd08>)
 80058f4:	f008 fd54 	bl	800e3a0 <HAL_GPIO_WritePin>
	  			f_close(&fil);
 80058f8:	486b      	ldr	r0, [pc, #428]	@ (8005aa8 <main+0xd18>)
 80058fa:	f017 ffd3 	bl	801d8a4 <f_close>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 80058fe:	e004      	b.n	800590a <main+0xb7a>
	  				HAL_Delay(10);
 8005900:	200a      	movs	r0, #10
 8005902:	f003 fbef 	bl	80090e4 <HAL_Delay>
	  				Get_batteryvalue();
 8005906:	f7fe fb3b 	bl	8003f80 <Get_batteryvalue>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 800590a:	4b62      	ldr	r3, [pc, #392]	@ (8005a94 <main+0xd04>)
 800590c:	8a9b      	ldrh	r3, [r3, #20]
 800590e:	2b09      	cmp	r3, #9
 8005910:	d0f6      	beq.n	8005900 <main+0xb70>
	  			}
	  		}

	  		if(commandready == 1){
 8005912:	4b66      	ldr	r3, [pc, #408]	@ (8005aac <main+0xd1c>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d159      	bne.n	80059ce <main+0xc3e>
	  			LED_7_1;
 800591a:	2201      	movs	r2, #1
 800591c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005920:	4858      	ldr	r0, [pc, #352]	@ (8005a84 <main+0xcf4>)
 8005922:	f008 fd3d 	bl	800e3a0 <HAL_GPIO_WritePin>
	  			interpretcommand();
 8005926:	f7fc fef5 	bl	8002714 <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 800592a:	4961      	ldr	r1, [pc, #388]	@ (8005ab0 <main+0xd20>)
 800592c:	4861      	ldr	r0, [pc, #388]	@ (8005ab4 <main+0xd24>)
 800592e:	f7fc ff3f 	bl	80027b0 <executecommand>
	  			LED_7_0;
 8005932:	2200      	movs	r2, #0
 8005934:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005938:	4852      	ldr	r0, [pc, #328]	@ (8005a84 <main+0xcf4>)
 800593a:	f008 fd31 	bl	800e3a0 <HAL_GPIO_WritePin>

	  			PID_FAC_Pitch[0] = p_pitchfactor;
 800593e:	4b5e      	ldr	r3, [pc, #376]	@ (8005ab8 <main+0xd28>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a5e      	ldr	r2, [pc, #376]	@ (8005abc <main+0xd2c>)
 8005944:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Pitch[1] = i_pitchfactor;
 8005946:	4b5e      	ldr	r3, [pc, #376]	@ (8005ac0 <main+0xd30>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a5c      	ldr	r2, [pc, #368]	@ (8005abc <main+0xd2c>)
 800594c:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Pitch[2] = d_pitchfactor;
 800594e:	4b5d      	ldr	r3, [pc, #372]	@ (8005ac4 <main+0xd34>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a5a      	ldr	r2, [pc, #360]	@ (8005abc <main+0xd2c>)
 8005954:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005956:	4b5c      	ldr	r3, [pc, #368]	@ (8005ac8 <main+0xd38>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a5c      	ldr	r2, [pc, #368]	@ (8005acc <main+0xd3c>)
 800595c:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 800595e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ad0 <main+0xd40>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a5a      	ldr	r2, [pc, #360]	@ (8005acc <main+0xd3c>)
 8005964:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005966:	4b5b      	ldr	r3, [pc, #364]	@ (8005ad4 <main+0xd44>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a58      	ldr	r2, [pc, #352]	@ (8005acc <main+0xd3c>)
 800596c:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Rool[0] = p_roolfactor;
 800596e:	4b5a      	ldr	r3, [pc, #360]	@ (8005ad8 <main+0xd48>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a5a      	ldr	r2, [pc, #360]	@ (8005adc <main+0xd4c>)
 8005974:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Rool[1] = i_roolfactor;
 8005976:	4b5a      	ldr	r3, [pc, #360]	@ (8005ae0 <main+0xd50>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a58      	ldr	r2, [pc, #352]	@ (8005adc <main+0xd4c>)
 800597c:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Rool[2] = d_roolfactor;
 800597e:	4b59      	ldr	r3, [pc, #356]	@ (8005ae4 <main+0xd54>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a56      	ldr	r2, [pc, #344]	@ (8005adc <main+0xd4c>)
 8005984:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;
 8005986:	4b58      	ldr	r3, [pc, #352]	@ (8005ae8 <main+0xd58>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a58      	ldr	r2, [pc, #352]	@ (8005aec <main+0xd5c>)
 800598c:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 800598e:	4b58      	ldr	r3, [pc, #352]	@ (8005af0 <main+0xd60>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a56      	ldr	r2, [pc, #344]	@ (8005aec <main+0xd5c>)
 8005994:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005996:	4b57      	ldr	r3, [pc, #348]	@ (8005af4 <main+0xd64>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a54      	ldr	r2, [pc, #336]	@ (8005aec <main+0xd5c>)
 800599c:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Yaw[0] = p_yawfactor;
 800599e:	4b56      	ldr	r3, [pc, #344]	@ (8005af8 <main+0xd68>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a56      	ldr	r2, [pc, #344]	@ (8005afc <main+0xd6c>)
 80059a4:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Yaw[1] = i_yawfactor;
 80059a6:	4b56      	ldr	r3, [pc, #344]	@ (8005b00 <main+0xd70>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a54      	ldr	r2, [pc, #336]	@ (8005afc <main+0xd6c>)
 80059ac:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Yaw[2] = d_yawfactor;
 80059ae:	4b55      	ldr	r3, [pc, #340]	@ (8005b04 <main+0xd74>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a52      	ldr	r2, [pc, #328]	@ (8005afc <main+0xd6c>)
 80059b4:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;
 80059b6:	4b54      	ldr	r3, [pc, #336]	@ (8005b08 <main+0xd78>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a54      	ldr	r2, [pc, #336]	@ (8005b0c <main+0xd7c>)
 80059bc:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 80059be:	4b54      	ldr	r3, [pc, #336]	@ (8005b10 <main+0xd80>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a52      	ldr	r2, [pc, #328]	@ (8005b0c <main+0xd7c>)
 80059c4:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 80059c6:	4b53      	ldr	r3, [pc, #332]	@ (8005b14 <main+0xd84>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a50      	ldr	r2, [pc, #320]	@ (8005b0c <main+0xd7c>)
 80059cc:	6093      	str	r3, [r2, #8]
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 80059ce:	4b52      	ldr	r3, [pc, #328]	@ (8005b18 <main+0xd88>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	f040 80b7 	bne.w	8005b46 <main+0xdb6>
 80059d8:	4b50      	ldr	r3, [pc, #320]	@ (8005b1c <main+0xd8c>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f040 80b2 	bne.w	8005b46 <main+0xdb6>
 80059e2:	4b4f      	ldr	r3, [pc, #316]	@ (8005b20 <main+0xd90>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	f040 80ad 	bne.w	8005b46 <main+0xdb6>
	  			TIM_inte_SD = 0;
 80059ec:	4b4a      	ldr	r3, [pc, #296]	@ (8005b18 <main+0xd88>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);//todo blokuje pentle główną po ponownym uruchomieniu gdzy napięcie zsotanie odlonczone
 80059f2:	4b4c      	ldr	r3, [pc, #304]	@ (8005b24 <main+0xd94>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f001 fd5c 	bl	80074b4 <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 80059fc:	4b49      	ldr	r3, [pc, #292]	@ (8005b24 <main+0xd94>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d12b      	bne.n	8005a60 <main+0xcd0>
	  				SD_In_Use = 1;
 8005a08:	4b47      	ldr	r3, [pc, #284]	@ (8005b28 <main+0xd98>)
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a14:	4845      	ldr	r0, [pc, #276]	@ (8005b2c <main+0xd9c>)
 8005a16:	f008 fcc3 	bl	800e3a0 <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 8005a1a:	2232      	movs	r2, #50	@ 0x32
 8005a1c:	4944      	ldr	r1, [pc, #272]	@ (8005b30 <main+0xda0>)
 8005a1e:	4822      	ldr	r0, [pc, #136]	@ (8005aa8 <main+0xd18>)
 8005a20:	f017 fb66 	bl	801d0f0 <f_open>
 8005a24:	4603      	mov	r3, r0
 8005a26:	461a      	mov	r2, r3
 8005a28:	4b3c      	ldr	r3, [pc, #240]	@ (8005b1c <main+0xd8c>)
 8005a2a:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 8005a2c:	4b41      	ldr	r3, [pc, #260]	@ (8005b34 <main+0xda4>)
 8005a2e:	4a42      	ldr	r2, [pc, #264]	@ (8005b38 <main+0xda8>)
 8005a30:	4942      	ldr	r1, [pc, #264]	@ (8005b3c <main+0xdac>)
 8005a32:	481d      	ldr	r0, [pc, #116]	@ (8005aa8 <main+0xd18>)
 8005a34:	f017 fd24 	bl	801d480 <f_write>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4b37      	ldr	r3, [pc, #220]	@ (8005b1c <main+0xd8c>)
 8005a3e:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 8005a40:	4819      	ldr	r0, [pc, #100]	@ (8005aa8 <main+0xd18>)
 8005a42:	f017 ff2f 	bl	801d8a4 <f_close>
 8005a46:	4603      	mov	r3, r0
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4b34      	ldr	r3, [pc, #208]	@ (8005b1c <main+0xd8c>)
 8005a4c:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a54:	4835      	ldr	r0, [pc, #212]	@ (8005b2c <main+0xd9c>)
 8005a56:	f008 fca3 	bl	800e3a0 <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 8005a5a:	4b33      	ldr	r3, [pc, #204]	@ (8005b28 <main+0xd98>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
	  				}
	  			if(Mainloop_Number < 1000){
 8005a60:	4b30      	ldr	r3, [pc, #192]	@ (8005b24 <main+0xd94>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a68:	d26a      	bcs.n	8005b40 <main+0xdb0>
	  				Mainloop_Number++;
 8005a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8005b24 <main+0xd94>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	4a2c      	ldr	r2, [pc, #176]	@ (8005b24 <main+0xd94>)
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	e067      	b.n	8005b46 <main+0xdb6>
 8005a76:	bf00      	nop
 8005a78:	000000d4 	.word	0x000000d4
 8005a7c:	00000134 	.word	0x00000134
 8005a80:	24000418 	.word	0x24000418
 8005a84:	58020000 	.word	0x58020000
 8005a88:	000041a8 	.word	0x000041a8
 8005a8c:	240004b0 	.word	0x240004b0
 8005a90:	240003cc 	.word	0x240003cc
 8005a94:	00000160 	.word	0x00000160
 8005a98:	58020400 	.word	0x58020400
 8005a9c:	0000005c 	.word	0x0000005c
 8005aa0:	00004046 	.word	0x00004046
 8005aa4:	58021800 	.word	0x58021800
 8005aa8:	24001f10 	.word	0x24001f10
 8005aac:	000041a6 	.word	0x000041a6
 8005ab0:	00004188 	.word	0x00004188
 8005ab4:	00004198 	.word	0x00004198
 8005ab8:	000040b4 	.word	0x000040b4
 8005abc:	000040d8 	.word	0x000040d8
 8005ac0:	000040c0 	.word	0x000040c0
 8005ac4:	000040cc 	.word	0x000040cc
 8005ac8:	00004114 	.word	0x00004114
 8005acc:	00004138 	.word	0x00004138
 8005ad0:	00004120 	.word	0x00004120
 8005ad4:	0000412c 	.word	0x0000412c
 8005ad8:	000040b8 	.word	0x000040b8
 8005adc:	000040ec 	.word	0x000040ec
 8005ae0:	000040c4 	.word	0x000040c4
 8005ae4:	000040d0 	.word	0x000040d0
 8005ae8:	00004118 	.word	0x00004118
 8005aec:	0000414c 	.word	0x0000414c
 8005af0:	00004124 	.word	0x00004124
 8005af4:	00004130 	.word	0x00004130
 8005af8:	000040bc 	.word	0x000040bc
 8005afc:	00004100 	.word	0x00004100
 8005b00:	000040c8 	.word	0x000040c8
 8005b04:	000040d4 	.word	0x000040d4
 8005b08:	0000411c 	.word	0x0000411c
 8005b0c:	00004160 	.word	0x00004160
 8005b10:	00004128 	.word	0x00004128
 8005b14:	00004134 	.word	0x00004134
 8005b18:	00000054 	.word	0x00000054
 8005b1c:	24001f0c 	.word	0x24001f0c
 8005b20:	000041b4 	.word	0x000041b4
 8005b24:	000041ac 	.word	0x000041ac
 8005b28:	000041b0 	.word	0x000041b0
 8005b2c:	58020c00 	.word	0x58020c00
 8005b30:	0801e6f0 	.word	0x0801e6f0
 8005b34:	24002f44 	.word	0x24002f44
 8005b38:	0001f7e8 	.word	0x0001f7e8
 8005b3c:	24002f48 	.word	0x24002f48
	  			}
	  			else{
	  				Mainloop_Number = 0;
 8005b40:	4b0b      	ldr	r3, [pc, #44]	@ (8005b70 <main+0xde0>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
	  			}
	  		}

	  		if(TIM_inte == 1){
 8005b46:	4b0b      	ldr	r3, [pc, #44]	@ (8005b74 <main+0xde4>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	f47f aead 	bne.w	80058aa <main+0xb1a>
	  			LED_R_0;
 8005b50:	2200      	movs	r2, #0
 8005b52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b56:	4808      	ldr	r0, [pc, #32]	@ (8005b78 <main+0xde8>)
 8005b58:	f008 fc22 	bl	800e3a0 <HAL_GPIO_WritePin>
	  			RGB_LED_For_BAT(MYDRON.batterysize);
 8005b5c:	4b07      	ldr	r3, [pc, #28]	@ (8005b7c <main+0xdec>)
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 fb10 	bl	8007188 <RGB_LED_For_BAT>
	  			TIM_inte = 0;
 8005b68:	4b02      	ldr	r3, [pc, #8]	@ (8005b74 <main+0xde4>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005b6e:	e69c      	b.n	80058aa <main+0xb1a>
 8005b70:	000041ac 	.word	0x000041ac
 8005b74:	00000058 	.word	0x00000058
 8005b78:	58020400 	.word	0x58020400
 8005b7c:	00000160 	.word	0x00000160

08005b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b09c      	sub	sp, #112	@ 0x70
 8005b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b8a:	224c      	movs	r2, #76	@ 0x4c
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f018 f880 	bl	801dc94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b94:	1d3b      	adds	r3, r7, #4
 8005b96:	2220      	movs	r2, #32
 8005b98:	2100      	movs	r1, #0
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f018 f87a 	bl	801dc94 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005ba0:	2002      	movs	r0, #2
 8005ba2:	f00b f8af 	bl	8010d04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	603b      	str	r3, [r7, #0]
 8005baa:	4b2d      	ldr	r3, [pc, #180]	@ (8005c60 <SystemClock_Config+0xe0>)
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	4a2c      	ldr	r2, [pc, #176]	@ (8005c60 <SystemClock_Config+0xe0>)
 8005bb0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005bb4:	6193      	str	r3, [r2, #24]
 8005bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8005c60 <SystemClock_Config+0xe0>)
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005bc2:	bf00      	nop
 8005bc4:	4b26      	ldr	r3, [pc, #152]	@ (8005c60 <SystemClock_Config+0xe0>)
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bd0:	d1f8      	bne.n	8005bc4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8005bd2:	2311      	movs	r3, #17
 8005bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005bd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8005bdc:	2380      	movs	r3, #128	@ 0x80
 8005bde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8005be0:	2310      	movs	r3, #16
 8005be2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005be4:	2302      	movs	r3, #2
 8005be6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005be8:	2302      	movs	r3, #2
 8005bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8005bec:	2303      	movs	r3, #3
 8005bee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005bf0:	2344      	movs	r3, #68	@ 0x44
 8005bf2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005c00:	230c      	movs	r3, #12
 8005c02:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005c04:	2300      	movs	r3, #0
 8005c06:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8005c08:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005c0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c12:	4618      	mov	r0, r3
 8005c14:	f00b f8b0 	bl	8010d78 <HAL_RCC_OscConfig>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005c1e:	f001 fef7 	bl	8007a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c22:	233f      	movs	r3, #63	@ 0x3f
 8005c24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c26:	2303      	movs	r3, #3
 8005c28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005c2e:	2308      	movs	r3, #8
 8005c30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005c32:	2340      	movs	r3, #64	@ 0x40
 8005c34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005c36:	2340      	movs	r3, #64	@ 0x40
 8005c38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005c3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005c40:	2340      	movs	r3, #64	@ 0x40
 8005c42:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005c44:	1d3b      	adds	r3, r7, #4
 8005c46:	2103      	movs	r1, #3
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f00b fc6f 	bl	801152c <HAL_RCC_ClockConfig>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005c54:	f001 fedc 	bl	8007a10 <Error_Handler>
  }
}
 8005c58:	bf00      	nop
 8005c5a:	3770      	adds	r7, #112	@ 0x70
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	58024800 	.word	0x58024800

08005c64 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b0ae      	sub	sp, #184	@ 0xb8
 8005c68:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	22b8      	movs	r2, #184	@ 0xb8
 8005c6e:	2100      	movs	r1, #0
 8005c70:	4618      	mov	r0, r3
 8005c72:	f018 f80f 	bl	801dc94 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2;
 8005c76:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 8005c82:	2316      	movs	r3, #22
 8005c84:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 8005c86:	23c0      	movs	r3, #192	@ 0xc0
 8005c88:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005c92:	2302      	movs	r3, #2
 8005c94:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8005c9a:	2320      	movs	r3, #32
 8005c9c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8005ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ca6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005cae:	463b      	mov	r3, r7
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f00b ffc7 	bl	8011c44 <HAL_RCCEx_PeriphCLKConfig>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8005cbc:	f001 fea8 	bl	8007a10 <Error_Handler>
  }
}
 8005cc0:	bf00      	nop
 8005cc2:	37b8      	adds	r7, #184	@ 0xb8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a87      	ldr	r2, [pc, #540]	@ (8005ef0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	f040 8107 	bne.w	8005ee8 <HAL_TIM_PeriodElapsedCallback+0x220>
	{
		TIM_inte_SD = 1;
 8005cda:	4b86      	ldr	r3, [pc, #536]	@ (8005ef4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 8005ce0:	4b85      	ldr	r3, [pc, #532]	@ (8005ef8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 8005ce6:	4b85      	ldr	r3, [pc, #532]	@ (8005efc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3301      	adds	r3, #1
 8005cec:	4a83      	ldr	r2, [pc, #524]	@ (8005efc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005cee:	6013      	str	r3, [r2, #0]


		if(i == 0){// na calosc 50ms
 8005cf0:	4b83      	ldr	r3, [pc, #524]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10d      	bne.n	8005d14 <HAL_TIM_PeriodElapsedCallback+0x4c>
			LED_5_1;
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005cfe:	4881      	ldr	r0, [pc, #516]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d00:	f008 fb4e 	bl	800e3a0 <HAL_GPIO_WritePin>
			BMP180_start_measurment_temp_IT();
 8005d04:	f7fa fdb4 	bl	8000870 <BMP180_start_measurment_temp_IT>
			LED_5_0;
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d0e:	487d      	ldr	r0, [pc, #500]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d10:	f008 fb46 	bl	800e3a0 <HAL_GPIO_WritePin>
		}

		if(i == 10){//2
 8005d14:	4b7a      	ldr	r3, [pc, #488]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b0a      	cmp	r3, #10
 8005d1a:	d10d      	bne.n	8005d38 <HAL_TIM_PeriodElapsedCallback+0x70>
			LED_5_1;
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d22:	4878      	ldr	r0, [pc, #480]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d24:	f008 fb3c 	bl	800e3a0 <HAL_GPIO_WritePin>
			BMP180_start_measurment_pres_IT();
 8005d28:	f7fa fd8c 	bl	8000844 <BMP180_start_measurment_pres_IT>
			LED_5_0;
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d32:	4874      	ldr	r0, [pc, #464]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d34:	f008 fb34 	bl	800e3a0 <HAL_GPIO_WritePin>
		}

		if(i == 36){
 8005d38:	4b71      	ldr	r3, [pc, #452]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b24      	cmp	r3, #36	@ 0x24
 8005d3e:	d10d      	bne.n	8005d5c <HAL_TIM_PeriodElapsedCallback+0x94>
			LED_5_1;
 8005d40:	2201      	movs	r2, #1
 8005d42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d46:	486f      	ldr	r0, [pc, #444]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d48:	f008 fb2a 	bl	800e3a0 <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 8005d4c:	f7fb f9c2 	bl	80010d4 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 8005d50:	2200      	movs	r2, #0
 8005d52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d56:	486b      	ldr	r0, [pc, #428]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d58:	f008 fb22 	bl	800e3a0 <HAL_GPIO_WritePin>
		}

		if(i == 38){
 8005d5c:	4b68      	ldr	r3, [pc, #416]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b26      	cmp	r3, #38	@ 0x26
 8005d62:	d10e      	bne.n	8005d82 <HAL_TIM_PeriodElapsedCallback+0xba>
			LED_6_1;
 8005d64:	2201      	movs	r2, #1
 8005d66:	2108      	movs	r1, #8
 8005d68:	4867      	ldr	r0, [pc, #412]	@ (8005f08 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005d6a:	f008 fb19 	bl	800e3a0 <HAL_GPIO_WritePin>
			nRF24_TX_Mode();
 8005d6e:	f7fc f8f3 	bl	8001f58 <nRF24_TX_Mode>
			nRF24_Rx_Mode = 0;
 8005d72:	4b66      	ldr	r3, [pc, #408]	@ (8005f0c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]
			LED_6_0;
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2108      	movs	r1, #8
 8005d7c:	4862      	ldr	r0, [pc, #392]	@ (8005f08 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005d7e:	f008 fb0f 	bl	800e3a0 <HAL_GPIO_WritePin>
		}
		if(i == 40){//5
 8005d82:	4b5f      	ldr	r3, [pc, #380]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b28      	cmp	r3, #40	@ 0x28
 8005d88:	d14c      	bne.n	8005e24 <HAL_TIM_PeriodElapsedCallback+0x15c>
			ampritude = startpres - pres;
 8005d8a:	4b61      	ldr	r3, [pc, #388]	@ (8005f10 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005d8c:	ed93 7a00 	vldr	s14, [r3]
 8005d90:	4b60      	ldr	r3, [pc, #384]	@ (8005f14 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005d92:	edd3 7a00 	vldr	s15, [r3]
 8005d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8005f18 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8005d9c:	edc3 7a00 	vstr	s15, [r3]

			MYDRON.dronheight = (uint16_t)BMP180_GET_height();
 8005da0:	f7fb f828 	bl	8000df4 <BMP180_GET_height>
 8005da4:	eef0 7a40 	vmov.f32	s15, s0
 8005da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dac:	ee17 3a90 	vmov	r3, s15
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	b21a      	sxth	r2, r3
 8005db4:	4b59      	ldr	r3, [pc, #356]	@ (8005f1c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005db6:	83da      	strh	r2, [r3, #30]
			convert_value_to_array(MYDRON.dronheight, TxData, 0, 3);
 8005db8:	4b58      	ldr	r3, [pc, #352]	@ (8005f1c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005dba:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	4957      	ldr	r1, [pc, #348]	@ (8005f20 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005dc4:	f001 f907 	bl	8006fd6 <convert_value_to_array>

			Get_batteryvalue();
 8005dc8:	f7fe f8da 	bl	8003f80 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, TxData, 3, 6);
 8005dcc:	4b53      	ldr	r3, [pc, #332]	@ (8005f1c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	b218      	sxth	r0, r3
 8005dd2:	2306      	movs	r3, #6
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	4952      	ldr	r1, [pc, #328]	@ (8005f20 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005dd8:	f001 f8fd 	bl	8006fd6 <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	e00b      	b.n	8005dfa <HAL_TIM_PeriodElapsedCallback+0x132>
				TxData[22+i] = Txcode[22+i];
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f103 0216 	add.w	r2, r3, #22
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3316      	adds	r3, #22
 8005dec:	494d      	ldr	r1, [pc, #308]	@ (8005f24 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8005dee:	5c89      	ldrb	r1, [r1, r2]
 8005df0:	4a4b      	ldr	r2, [pc, #300]	@ (8005f20 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005df2:	54d1      	strb	r1, [r2, r3]
			for(int i = 0; i < 10; i++){
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3301      	adds	r3, #1
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b09      	cmp	r3, #9
 8005dfe:	ddf0      	ble.n	8005de2 <HAL_TIM_PeriodElapsedCallback+0x11a>
			}
			LED_6_1;
 8005e00:	2201      	movs	r2, #1
 8005e02:	2108      	movs	r1, #8
 8005e04:	4840      	ldr	r0, [pc, #256]	@ (8005f08 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005e06:	f008 facb 	bl	800e3a0 <HAL_GPIO_WritePin>
			nRF24_WriteTXPayload(TxData);
 8005e0a:	4845      	ldr	r0, [pc, #276]	@ (8005f20 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005e0c:	f7fc fb62 	bl	80024d4 <nRF24_WriteTXPayload>
			NRF24_CE_HIGH;
 8005e10:	2201      	movs	r2, #1
 8005e12:	2140      	movs	r1, #64	@ 0x40
 8005e14:	4844      	ldr	r0, [pc, #272]	@ (8005f28 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005e16:	f008 fac3 	bl	800e3a0 <HAL_GPIO_WritePin>
			LED_6_0;
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2108      	movs	r1, #8
 8005e1e:	483a      	ldr	r0, [pc, #232]	@ (8005f08 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005e20:	f008 fabe 	bl	800e3a0 <HAL_GPIO_WritePin>
		}
		if(i == 41){
 8005e24:	4b36      	ldr	r3, [pc, #216]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b29      	cmp	r3, #41	@ 0x29
 8005e2a:	d104      	bne.n	8005e36 <HAL_TIM_PeriodElapsedCallback+0x16e>
			NRF24_CE_LOW;
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2140      	movs	r1, #64	@ 0x40
 8005e30:	483d      	ldr	r0, [pc, #244]	@ (8005f28 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005e32:	f008 fab5 	bl	800e3a0 <HAL_GPIO_WritePin>
		}
		if(i >= 42){
 8005e36:	4b32      	ldr	r3, [pc, #200]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b29      	cmp	r3, #41	@ 0x29
 8005e3c:	dd16      	ble.n	8005e6c <HAL_TIM_PeriodElapsedCallback+0x1a4>
			if(nRF24_Rx_Mode != 1){
 8005e3e:	4b33      	ldr	r3, [pc, #204]	@ (8005f0c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d012      	beq.n	8005e6c <HAL_TIM_PeriodElapsedCallback+0x1a4>
				if(((nRF24_ReadStatus() & (1<<NRF24_MAX_RT)) || (nRF24_ReadStatus() & (1<<NRF24_TX_DS)))){
 8005e46:	f7fc f908 	bl	800205a <nRF24_ReadStatus>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	f003 0310 	and.w	r3, r3, #16
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d106      	bne.n	8005e62 <HAL_TIM_PeriodElapsedCallback+0x19a>
 8005e54:	f7fc f901 	bl	800205a <nRF24_ReadStatus>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d004      	beq.n	8005e6c <HAL_TIM_PeriodElapsedCallback+0x1a4>
					nRF24_RX_Mode();
 8005e62:	f7fc f84d 	bl	8001f00 <nRF24_RX_Mode>
					nRF24_Rx_Mode = 1;
 8005e66:	4b29      	ldr	r3, [pc, #164]	@ (8005f0c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		LED_5_1;
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e72:	4824      	ldr	r0, [pc, #144]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005e74:	f008 fa94 	bl	800e3a0 <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 8005e78:	f7fb fc6a 	bl	8001750 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e82:	4820      	ldr	r0, [pc, #128]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005e84:	f008 fa8c 	bl	800e3a0 <HAL_GPIO_WritePin>

		if(i == 100){
 8005e88:	4b1d      	ldr	r3, [pc, #116]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b64      	cmp	r3, #100	@ 0x64
 8005e8e:	d103      	bne.n	8005e98 <HAL_TIM_PeriodElapsedCallback+0x1d0>
			i = 0;
 8005e90:	4b1b      	ldr	r3, [pc, #108]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	e004      	b.n	8005ea2 <HAL_TIM_PeriodElapsedCallback+0x1da>
		}
		else{
			i++;
 8005e98:	4b19      	ldr	r3, [pc, #100]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	4a18      	ldr	r2, [pc, #96]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005ea0:	6013      	str	r3, [r2, #0]
		}
		if(NRF_TIM_Inte >= 1000){
 8005ea2:	4b16      	ldr	r3, [pc, #88]	@ (8005efc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005eaa:	d308      	bcc.n	8005ebe <HAL_TIM_PeriodElapsedCallback+0x1f6>
			LED_R_1;
 8005eac:	2201      	movs	r2, #1
 8005eae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005eb2:	481d      	ldr	r0, [pc, #116]	@ (8005f28 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005eb4:	f008 fa74 	bl	800e3a0 <HAL_GPIO_WritePin>
			MYDRON.dron_status.Connection = DRON_DISCONNECTED;
 8005eb8:	4b18      	ldr	r3, [pc, #96]	@ (8005f1c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005eba:	2202      	movs	r2, #2
 8005ebc:	825a      	strh	r2, [r3, #18]
		}
		if(MYDRON.dron_status.Connection == DRON_DISCONNECTED){
 8005ebe:	4b17      	ldr	r3, [pc, #92]	@ (8005f1c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005ec0:	8a5b      	ldrh	r3, [r3, #18]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d110      	bne.n	8005ee8 <HAL_TIM_PeriodElapsedCallback+0x220>
			wanted_rool = 0;
 8005ec6:	4b19      	ldr	r3, [pc, #100]	@ (8005f2c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]
			wanted_pitch = 0;
 8005ece:	4b18      	ldr	r3, [pc, #96]	@ (8005f30 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
			wanted_yaw = 0;
 8005ed6:	4b17      	ldr	r3, [pc, #92]	@ (8005f34 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
			wanted_thrust = DRON_SLOWFALING;
 8005ede:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005ee2:	b21a      	sxth	r2, r3
 8005ee4:	4b14      	ldr	r3, [pc, #80]	@ (8005f38 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8005ee6:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8005ee8:	bf00      	nop
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	240003cc 	.word	0x240003cc
 8005ef4:	00000054 	.word	0x00000054
 8005ef8:	00000058 	.word	0x00000058
 8005efc:	00000060 	.word	0x00000060
 8005f00:	000041c0 	.word	0x000041c0
 8005f04:	58020000 	.word	0x58020000
 8005f08:	58021000 	.word	0x58021000
 8005f0c:	0000015d 	.word	0x0000015d
 8005f10:	000000cc 	.word	0x000000cc
 8005f14:	000000c8 	.word	0x000000c8
 8005f18:	000000d0 	.word	0x000000d0
 8005f1c:	00000160 	.word	0x00000160
 8005f20:	00000114 	.word	0x00000114
 8005f24:	000000f4 	.word	0x000000f4
 8005f28:	58020400 	.word	0x58020400
 8005f2c:	00004054 	.word	0x00004054
 8005f30:	00004050 	.word	0x00004050
 8005f34:	00004058 	.word	0x00004058
 8005f38:	00004044 	.word	0x00004044

08005f3c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	4603      	mov	r3, r0
 8005f44:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f4c:	f040 812c 	bne.w	80061a8 <HAL_GPIO_EXTI_Callback+0x26c>
	{
		if(STARTUP == 0){
 8005f50:	4b97      	ldr	r3, [pc, #604]	@ (80061b0 <HAL_GPIO_EXTI_Callback+0x274>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f040 8127 	bne.w	80061a8 <HAL_GPIO_EXTI_Callback+0x26c>
			LED_6_1;
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	2108      	movs	r1, #8
 8005f5e:	4895      	ldr	r0, [pc, #596]	@ (80061b4 <HAL_GPIO_EXTI_Callback+0x278>)
 8005f60:	f008 fa1e 	bl	800e3a0 <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod(RxData);
 8005f64:	4894      	ldr	r0, [pc, #592]	@ (80061b8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8005f66:	f7fc faeb 	bl	8002540 <nRF24_ReadRXPaylaod>
			LED_6_0;
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2108      	movs	r1, #8
 8005f6e:	4891      	ldr	r0, [pc, #580]	@ (80061b4 <HAL_GPIO_EXTI_Callback+0x278>)
 8005f70:	f008 fa16 	bl	800e3a0 <HAL_GPIO_WritePin>


			LED_Y_1;
 8005f74:	2201      	movs	r2, #1
 8005f76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005f7a:	4890      	ldr	r0, [pc, #576]	@ (80061bc <HAL_GPIO_EXTI_Callback+0x280>)
 8005f7c:	f008 fa10 	bl	800e3a0 <HAL_GPIO_WritePin>

			loopnum = 0;
 8005f80:	4b8f      	ldr	r3, [pc, #572]	@ (80061c0 <HAL_GPIO_EXTI_Callback+0x284>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	e011      	b.n	8005fb0 <HAL_GPIO_EXTI_Callback+0x74>
				if(RxData[12+abc] == Rxcode[abc+12]){
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	4a89      	ldr	r2, [pc, #548]	@ (80061b8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8005f92:	5cd2      	ldrb	r2, [r2, r3]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	330c      	adds	r3, #12
 8005f98:	498a      	ldr	r1, [pc, #552]	@ (80061c4 <HAL_GPIO_EXTI_Callback+0x288>)
 8005f9a:	5ccb      	ldrb	r3, [r1, r3]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d104      	bne.n	8005faa <HAL_GPIO_EXTI_Callback+0x6e>
					loopnum++;
 8005fa0:	4b87      	ldr	r3, [pc, #540]	@ (80061c0 <HAL_GPIO_EXTI_Callback+0x284>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	4a86      	ldr	r2, [pc, #536]	@ (80061c0 <HAL_GPIO_EXTI_Callback+0x284>)
 8005fa8:	6013      	str	r3, [r2, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3301      	adds	r3, #1
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b09      	cmp	r3, #9
 8005fb4:	ddea      	ble.n	8005f8c <HAL_GPIO_EXTI_Callback+0x50>
				}
			}

			if(loopnum == 10){
 8005fb6:	4b82      	ldr	r3, [pc, #520]	@ (80061c0 <HAL_GPIO_EXTI_Callback+0x284>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b0a      	cmp	r3, #10
 8005fbc:	f040 80e3 	bne.w	8006186 <HAL_GPIO_EXTI_Callback+0x24a>
				convert_array_to_value(RxData, &wanted_pitch_v, 0, 2);//pitch
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	4980      	ldr	r1, [pc, #512]	@ (80061c8 <HAL_GPIO_EXTI_Callback+0x28c>)
 8005fc6:	487c      	ldr	r0, [pc, #496]	@ (80061b8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8005fc8:	f000 ffb4 	bl	8006f34 <convert_array_to_value>
				convert_array_to_value(RxData, &wanted_roll_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 8005fcc:	2305      	movs	r3, #5
 8005fce:	2203      	movs	r2, #3
 8005fd0:	497e      	ldr	r1, [pc, #504]	@ (80061cc <HAL_GPIO_EXTI_Callback+0x290>)
 8005fd2:	4879      	ldr	r0, [pc, #484]	@ (80061b8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8005fd4:	f000 ffae 	bl	8006f34 <convert_array_to_value>
				if(wobble_strenght == 1){
 8005fd8:	4b7d      	ldr	r3, [pc, #500]	@ (80061d0 <HAL_GPIO_EXTI_Callback+0x294>)
 8005fda:	edd3 7a00 	vldr	s15, [r3]
 8005fde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fe2:	eef4 7a47 	vcmp.f32	s15, s14
 8005fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fea:	d105      	bne.n	8005ff8 <HAL_GPIO_EXTI_Callback+0xbc>
					convert_array_to_value(RxData, &wanted_thrust, 6, 8);//
 8005fec:	2308      	movs	r3, #8
 8005fee:	2206      	movs	r2, #6
 8005ff0:	4978      	ldr	r1, [pc, #480]	@ (80061d4 <HAL_GPIO_EXTI_Callback+0x298>)
 8005ff2:	4871      	ldr	r0, [pc, #452]	@ (80061b8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8005ff4:	f000 ff9e 	bl	8006f34 <convert_array_to_value>
				}
				convert_array_to_value(RxData, &wanted_yaw_v, 9, 11);//
 8005ff8:	230b      	movs	r3, #11
 8005ffa:	2209      	movs	r2, #9
 8005ffc:	4976      	ldr	r1, [pc, #472]	@ (80061d8 <HAL_GPIO_EXTI_Callback+0x29c>)
 8005ffe:	486e      	ldr	r0, [pc, #440]	@ (80061b8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006000:	f000 ff98 	bl	8006f34 <convert_array_to_value>
				MYDRON.dron_status.Connection = DRON_CONNECTED;
 8006004:	4b75      	ldr	r3, [pc, #468]	@ (80061dc <HAL_GPIO_EXTI_Callback+0x2a0>)
 8006006:	2201      	movs	r2, #1
 8006008:	825a      	strh	r2, [r3, #18]

				if(RxData[23] == 1){
 800600a:	4b6b      	ldr	r3, [pc, #428]	@ (80061b8 <HAL_GPIO_EXTI_Callback+0x27c>)
 800600c:	7ddb      	ldrb	r3, [r3, #23]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d11b      	bne.n	800604a <HAL_GPIO_EXTI_Callback+0x10e>
					ESC_POWER_1;
 8006012:	2201      	movs	r2, #1
 8006014:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006018:	4871      	ldr	r0, [pc, #452]	@ (80061e0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800601a:	f008 f9c1 	bl	800e3a0 <HAL_GPIO_WritePin>
					LED_R_1;
 800601e:	2201      	movs	r2, #1
 8006020:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006024:	4865      	ldr	r0, [pc, #404]	@ (80061bc <HAL_GPIO_EXTI_Callback+0x280>)
 8006026:	f008 f9bb 	bl	800e3a0 <HAL_GPIO_WritePin>
					if(SD_enable_Flag == 1){
 800602a:	4b6e      	ldr	r3, [pc, #440]	@ (80061e4 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d10b      	bne.n	800604a <HAL_GPIO_EXTI_Callback+0x10e>
						f_close(&fil);
 8006032:	486d      	ldr	r0, [pc, #436]	@ (80061e8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8006034:	f017 fc36 	bl	801d8a4 <f_close>
						fresult = f_mount(NULL, "/", 1);
 8006038:	2201      	movs	r2, #1
 800603a:	496c      	ldr	r1, [pc, #432]	@ (80061ec <HAL_GPIO_EXTI_Callback+0x2b0>)
 800603c:	2000      	movs	r0, #0
 800603e:	f017 f811 	bl	801d064 <f_mount>
 8006042:	4603      	mov	r3, r0
 8006044:	461a      	mov	r2, r3
 8006046:	4b6a      	ldr	r3, [pc, #424]	@ (80061f0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8006048:	701a      	strb	r2, [r3, #0]
					}

				}

				if(wanted_thrust == 9999){
 800604a:	4b62      	ldr	r3, [pc, #392]	@ (80061d4 <HAL_GPIO_EXTI_Callback+0x298>)
 800604c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006050:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006054:	4293      	cmp	r3, r2
 8006056:	d103      	bne.n	8006060 <HAL_GPIO_EXTI_Callback+0x124>
					MYDRON.THRUST_flag = THRUST_MAX;
 8006058:	4b60      	ldr	r3, [pc, #384]	@ (80061dc <HAL_GPIO_EXTI_Callback+0x2a0>)
 800605a:	2210      	movs	r2, #16
 800605c:	f883 2020 	strb.w	r2, [r3, #32]
	  			}
				wanted_thrust = wanted_thrust * 20;
 8006060:	4b5c      	ldr	r3, [pc, #368]	@ (80061d4 <HAL_GPIO_EXTI_Callback+0x298>)
 8006062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006066:	b29b      	uxth	r3, r3
 8006068:	461a      	mov	r2, r3
 800606a:	0092      	lsls	r2, r2, #2
 800606c:	4413      	add	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	b29b      	uxth	r3, r3
 8006072:	b21a      	sxth	r2, r3
 8006074:	4b57      	ldr	r3, [pc, #348]	@ (80061d4 <HAL_GPIO_EXTI_Callback+0x298>)
 8006076:	801a      	strh	r2, [r3, #0]
				wanted_thrust = wanted_thrust - 10000;
 8006078:	4b56      	ldr	r3, [pc, #344]	@ (80061d4 <HAL_GPIO_EXTI_Callback+0x298>)
 800607a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800607e:	b29a      	uxth	r2, r3
 8006080:	4b5c      	ldr	r3, [pc, #368]	@ (80061f4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8006082:	4413      	add	r3, r2
 8006084:	b29b      	uxth	r3, r3
 8006086:	b21a      	sxth	r2, r3
 8006088:	4b52      	ldr	r3, [pc, #328]	@ (80061d4 <HAL_GPIO_EXTI_Callback+0x298>)
 800608a:	801a      	strh	r2, [r3, #0]
				if(wanted_thrust < 0){
 800608c:	4b51      	ldr	r3, [pc, #324]	@ (80061d4 <HAL_GPIO_EXTI_Callback+0x298>)
 800608e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006092:	2b00      	cmp	r3, #0
 8006094:	da02      	bge.n	800609c <HAL_GPIO_EXTI_Callback+0x160>
					wanted_thrust = 0;
 8006096:	4b4f      	ldr	r3, [pc, #316]	@ (80061d4 <HAL_GPIO_EXTI_Callback+0x298>)
 8006098:	2200      	movs	r2, #0
 800609a:	801a      	strh	r2, [r3, #0]
	  			}

				wanted_rool_rx = (wanted_roll_v - 500)*wanted_rool_factro;//wanted_rool_rx (-90 <-> 90)
 800609c:	4b4b      	ldr	r3, [pc, #300]	@ (80061cc <HAL_GPIO_EXTI_Callback+0x290>)
 800609e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060a2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060ae:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80061f8 <HAL_GPIO_EXTI_Callback+0x2bc>
 80060b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060ba:	ee17 3a90 	vmov	r3, s15
 80060be:	b21a      	sxth	r2, r3
 80060c0:	4b4e      	ldr	r3, [pc, #312]	@ (80061fc <HAL_GPIO_EXTI_Callback+0x2c0>)
 80060c2:	801a      	strh	r2, [r3, #0]
				wanted_pitch_rx = (wanted_pitch_v - 500)*wanted_pitch_factro;// (-450 <-> 450)
 80060c4:	4b40      	ldr	r3, [pc, #256]	@ (80061c8 <HAL_GPIO_EXTI_Callback+0x28c>)
 80060c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060ca:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060d6:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8006200 <HAL_GPIO_EXTI_Callback+0x2c4>
 80060da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060e2:	ee17 3a90 	vmov	r3, s15
 80060e6:	b21a      	sxth	r2, r3
 80060e8:	4b46      	ldr	r3, [pc, #280]	@ (8006204 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80060ea:	801a      	strh	r2, [r3, #0]
				wanted_yaw_rx = (wanted_yaw_v - 500)*wanted_yaw_factro;
 80060ec:	4b3a      	ldr	r3, [pc, #232]	@ (80061d8 <HAL_GPIO_EXTI_Callback+0x29c>)
 80060ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060f2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060fe:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006208 <HAL_GPIO_EXTI_Callback+0x2cc>
 8006102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800610a:	ee17 3a90 	vmov	r3, s15
 800610e:	b21a      	sxth	r2, r3
 8006110:	4b3e      	ldr	r3, [pc, #248]	@ (800620c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006112:	801a      	strh	r2, [r3, #0]

				if(wanted_rool_rx >= 30){
 8006114:	4b39      	ldr	r3, [pc, #228]	@ (80061fc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800611a:	2b1d      	cmp	r3, #29
 800611c:	dd02      	ble.n	8006124 <HAL_GPIO_EXTI_Callback+0x1e8>
					wanted_rool_rx = 30;
 800611e:	4b37      	ldr	r3, [pc, #220]	@ (80061fc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006120:	221e      	movs	r2, #30
 8006122:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_rool_rx <= -30){
 8006124:	4b35      	ldr	r3, [pc, #212]	@ (80061fc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800612a:	f113 0f1d 	cmn.w	r3, #29
 800612e:	da03      	bge.n	8006138 <HAL_GPIO_EXTI_Callback+0x1fc>
					wanted_rool_rx = -30;
 8006130:	4b32      	ldr	r3, [pc, #200]	@ (80061fc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006132:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 8006136:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_pitch_rx >= 30){
 8006138:	4b32      	ldr	r3, [pc, #200]	@ (8006204 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800613a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800613e:	2b1d      	cmp	r3, #29
 8006140:	dd02      	ble.n	8006148 <HAL_GPIO_EXTI_Callback+0x20c>
					wanted_pitch_rx = 30;
 8006142:	4b30      	ldr	r3, [pc, #192]	@ (8006204 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006144:	221e      	movs	r2, #30
 8006146:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_pitch_rx <= -30){
 8006148:	4b2e      	ldr	r3, [pc, #184]	@ (8006204 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800614a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800614e:	f113 0f1d 	cmn.w	r3, #29
 8006152:	da03      	bge.n	800615c <HAL_GPIO_EXTI_Callback+0x220>
					wanted_pitch_rx = -30;
 8006154:	4b2b      	ldr	r3, [pc, #172]	@ (8006204 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006156:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 800615a:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_yaw_rx >= 30){
 800615c:	4b2b      	ldr	r3, [pc, #172]	@ (800620c <HAL_GPIO_EXTI_Callback+0x2d0>)
 800615e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006162:	2b1d      	cmp	r3, #29
 8006164:	dd02      	ble.n	800616c <HAL_GPIO_EXTI_Callback+0x230>
					wanted_yaw_rx = 30;
 8006166:	4b29      	ldr	r3, [pc, #164]	@ (800620c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006168:	221e      	movs	r2, #30
 800616a:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_yaw_rx <= -30){
 800616c:	4b27      	ldr	r3, [pc, #156]	@ (800620c <HAL_GPIO_EXTI_Callback+0x2d0>)
 800616e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006172:	f113 0f1d 	cmn.w	r3, #29
 8006176:	da03      	bge.n	8006180 <HAL_GPIO_EXTI_Callback+0x244>
					wanted_yaw_rx = -30;
 8006178:	4b24      	ldr	r3, [pc, #144]	@ (800620c <HAL_GPIO_EXTI_Callback+0x2d0>)
 800617a:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 800617e:	801a      	strh	r2, [r3, #0]
				}


				NRF_TIM_Inte = 0;
 8006180:	4b23      	ldr	r3, [pc, #140]	@ (8006210 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
	  		}

	  			if(loopnum > 0 && loopnum < 10){
 8006186:	4b0e      	ldr	r3, [pc, #56]	@ (80061c0 <HAL_GPIO_EXTI_Callback+0x284>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	dd06      	ble.n	800619c <HAL_GPIO_EXTI_Callback+0x260>
 800618e:	4b0c      	ldr	r3, [pc, #48]	@ (80061c0 <HAL_GPIO_EXTI_Callback+0x284>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b09      	cmp	r3, #9
 8006194:	dc02      	bgt.n	800619c <HAL_GPIO_EXTI_Callback+0x260>
	  				MYDRON.dron_status.Connection = DRON_CONNECTION_ERROR;
 8006196:	4b11      	ldr	r3, [pc, #68]	@ (80061dc <HAL_GPIO_EXTI_Callback+0x2a0>)
 8006198:	2203      	movs	r2, #3
 800619a:	825a      	strh	r2, [r3, #18]
	  			}


	  			LED_Y_0;
 800619c:	2200      	movs	r2, #0
 800619e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80061a2:	4806      	ldr	r0, [pc, #24]	@ (80061bc <HAL_GPIO_EXTI_Callback+0x280>)
 80061a4:	f008 f8fc 	bl	800e3a0 <HAL_GPIO_WritePin>
		}
	}
}
 80061a8:	bf00      	nop
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	0000005c 	.word	0x0000005c
 80061b4:	58021000 	.word	0x58021000
 80061b8:	000000d4 	.word	0x000000d4
 80061bc:	58020400 	.word	0x58020400
 80061c0:	000041c4 	.word	0x000041c4
 80061c4:	00000134 	.word	0x00000134
 80061c8:	000041ca 	.word	0x000041ca
 80061cc:	000041c8 	.word	0x000041c8
 80061d0:	000041b8 	.word	0x000041b8
 80061d4:	00004044 	.word	0x00004044
 80061d8:	000041cc 	.word	0x000041cc
 80061dc:	00000160 	.word	0x00000160
 80061e0:	58021800 	.word	0x58021800
 80061e4:	000041b4 	.word	0x000041b4
 80061e8:	24001f10 	.word	0x24001f10
 80061ec:	0801e6e0 	.word	0x0801e6e0
 80061f0:	24001f0c 	.word	0x24001f0c
 80061f4:	ffffd8f0 	.word	0xffffd8f0
 80061f8:	3f266666 	.word	0x3f266666
 80061fc:	00004032 	.word	0x00004032
 8006200:	3f28f5c3 	.word	0x3f28f5c3
 8006204:	00004030 	.word	0x00004030
 8006208:	3f19999a 	.word	0x3f19999a
 800620c:	00004034 	.word	0x00004034
 8006210:	00000060 	.word	0x00000060

08006214 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 800621c:	4b24      	ldr	r3, [pc, #144]	@ (80062b0 <HAL_UART_RxCpltCallback+0x9c>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	4b24      	ldr	r3, [pc, #144]	@ (80062b4 <HAL_UART_RxCpltCallback+0xa0>)
 8006224:	7819      	ldrb	r1, [r3, #0]
 8006226:	4b24      	ldr	r3, [pc, #144]	@ (80062b8 <HAL_UART_RxCpltCallback+0xa4>)
 8006228:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 800622a:	4b21      	ldr	r3, [pc, #132]	@ (80062b0 <HAL_UART_RxCpltCallback+0x9c>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	4b21      	ldr	r3, [pc, #132]	@ (80062b8 <HAL_UART_RxCpltCallback+0xa4>)
 8006232:	5c9b      	ldrb	r3, [r3, r2]
 8006234:	2b0d      	cmp	r3, #13
 8006236:	d11a      	bne.n	800626e <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 8006238:	230a      	movs	r3, #10
 800623a:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 800623c:	f107 010f 	add.w	r1, r7, #15
 8006240:	2364      	movs	r3, #100	@ 0x64
 8006242:	2201      	movs	r2, #1
 8006244:	481d      	ldr	r0, [pc, #116]	@ (80062bc <HAL_UART_RxCpltCallback+0xa8>)
 8006246:	f011 fc59 	bl	8017afc <HAL_UART_Transmit>
		Y = '\r';
 800624a:	230d      	movs	r3, #13
 800624c:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 800624e:	f107 010f 	add.w	r1, r7, #15
 8006252:	2364      	movs	r3, #100	@ 0x64
 8006254:	2201      	movs	r2, #1
 8006256:	4819      	ldr	r0, [pc, #100]	@ (80062bc <HAL_UART_RxCpltCallback+0xa8>)
 8006258:	f011 fc50 	bl	8017afc <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 800625c:	4b14      	ldr	r3, [pc, #80]	@ (80062b0 <HAL_UART_RxCpltCallback+0x9c>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	461a      	mov	r2, r3
 8006262:	4b15      	ldr	r3, [pc, #84]	@ (80062b8 <HAL_UART_RxCpltCallback+0xa4>)
 8006264:	2100      	movs	r1, #0
 8006266:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 8006268:	4b15      	ldr	r3, [pc, #84]	@ (80062c0 <HAL_UART_RxCpltCallback+0xac>)
 800626a:	2201      	movs	r2, #1
 800626c:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 800626e:	4b10      	ldr	r3, [pc, #64]	@ (80062b0 <HAL_UART_RxCpltCallback+0x9c>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	4b10      	ldr	r3, [pc, #64]	@ (80062b8 <HAL_UART_RxCpltCallback+0xa4>)
 8006276:	4413      	add	r3, r2
 8006278:	2201      	movs	r2, #1
 800627a:	4619      	mov	r1, r3
 800627c:	480f      	ldr	r0, [pc, #60]	@ (80062bc <HAL_UART_RxCpltCallback+0xa8>)
 800627e:	f011 fccb 	bl	8017c18 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 8006282:	2201      	movs	r2, #1
 8006284:	490b      	ldr	r1, [pc, #44]	@ (80062b4 <HAL_UART_RxCpltCallback+0xa0>)
 8006286:	480d      	ldr	r0, [pc, #52]	@ (80062bc <HAL_UART_RxCpltCallback+0xa8>)
 8006288:	f011 fd5a 	bl	8017d40 <HAL_UART_Receive_IT>
	command_ch_num++;
 800628c:	4b08      	ldr	r3, [pc, #32]	@ (80062b0 <HAL_UART_RxCpltCallback+0x9c>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	3301      	adds	r3, #1
 8006292:	b2da      	uxtb	r2, r3
 8006294:	4b06      	ldr	r3, [pc, #24]	@ (80062b0 <HAL_UART_RxCpltCallback+0x9c>)
 8006296:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 8006298:	4b09      	ldr	r3, [pc, #36]	@ (80062c0 <HAL_UART_RxCpltCallback+0xac>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d102      	bne.n	80062a6 <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 80062a0:	4b03      	ldr	r3, [pc, #12]	@ (80062b0 <HAL_UART_RxCpltCallback+0x9c>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	701a      	strb	r2, [r3, #0]
	}
}
 80062a6:	bf00      	nop
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	000041a7 	.word	0x000041a7
 80062b4:	000041a8 	.word	0x000041a8
 80062b8:	0000419c 	.word	0x0000419c
 80062bc:	240004b0 	.word	0x240004b0
 80062c0:	000041a6 	.word	0x000041a6
 80062c4:	00000000 	.word	0x00000000

080062c8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	6078      	str	r0, [r7, #4]
	if(MPU6050_IRQ == 1){
 80062d0:	4bc9      	ldr	r3, [pc, #804]	@ (80065f8 <HAL_I2C_MemRxCpltCallback+0x330>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	f040 8583 	bne.w	8006de0 <HAL_I2C_MemRxCpltCallback+0xb18>
			MPU6050_IRQ = 0;
 80062da:	4bc7      	ldr	r3, [pc, #796]	@ (80065f8 <HAL_I2C_MemRxCpltCallback+0x330>)
 80062dc:	2200      	movs	r2, #0
 80062de:	701a      	strb	r2, [r3, #0]
			LED_G_1;
 80062e0:	2201      	movs	r2, #1
 80062e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062e6:	48c5      	ldr	r0, [pc, #788]	@ (80065fc <HAL_I2C_MemRxCpltCallback+0x334>)
 80062e8:	f008 f85a 	bl	800e3a0 <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 80062ec:	4bc4      	ldr	r3, [pc, #784]	@ (8006600 <HAL_I2C_MemRxCpltCallback+0x338>)
 80062ee:	edd3 7a00 	vldr	s15, [r3]
 80062f2:	4bc4      	ldr	r3, [pc, #784]	@ (8006604 <HAL_I2C_MemRxCpltCallback+0x33c>)
 80062f4:	ed93 7a00 	vldr	s14, [r3]
 80062f8:	4bc3      	ldr	r3, [pc, #780]	@ (8006608 <HAL_I2C_MemRxCpltCallback+0x340>)
 80062fa:	edd3 6a00 	vldr	s13, [r3]
 80062fe:	4bc3      	ldr	r3, [pc, #780]	@ (800660c <HAL_I2C_MemRxCpltCallback+0x344>)
 8006300:	ed93 6a00 	vldr	s12, [r3]
 8006304:	4bc2      	ldr	r3, [pc, #776]	@ (8006610 <HAL_I2C_MemRxCpltCallback+0x348>)
 8006306:	edd3 5a00 	vldr	s11, [r3]
 800630a:	4bc2      	ldr	r3, [pc, #776]	@ (8006614 <HAL_I2C_MemRxCpltCallback+0x34c>)
 800630c:	ed93 5a00 	vldr	s10, [r3]
 8006310:	eddf 4ac1 	vldr	s9, [pc, #772]	@ 8006618 <HAL_I2C_MemRxCpltCallback+0x350>
 8006314:	ed9f 4ac1 	vldr	s8, [pc, #772]	@ 800661c <HAL_I2C_MemRxCpltCallback+0x354>
 8006318:	4bc1      	ldr	r3, [pc, #772]	@ (8006620 <HAL_I2C_MemRxCpltCallback+0x358>)
 800631a:	9301      	str	r3, [sp, #4]
 800631c:	4bc1      	ldr	r3, [pc, #772]	@ (8006624 <HAL_I2C_MemRxCpltCallback+0x35c>)
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	eef0 3a44 	vmov.f32	s7, s8
 8006324:	eeb0 3a64 	vmov.f32	s6, s9
 8006328:	eef0 2a45 	vmov.f32	s5, s10
 800632c:	eeb0 2a65 	vmov.f32	s4, s11
 8006330:	eef0 1a46 	vmov.f32	s3, s12
 8006334:	eeb0 1a66 	vmov.f32	s2, s13
 8006338:	eef0 0a47 	vmov.f32	s1, s14
 800633c:	eeb0 0a67 	vmov.f32	s0, s15
 8006340:	4bb9      	ldr	r3, [pc, #740]	@ (8006628 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006342:	4aba      	ldr	r2, [pc, #744]	@ (800662c <HAL_I2C_MemRxCpltCallback+0x364>)
 8006344:	49ba      	ldr	r1, [pc, #744]	@ (8006630 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006346:	48bb      	ldr	r0, [pc, #748]	@ (8006634 <HAL_I2C_MemRxCpltCallback+0x36c>)
 8006348:	f7fb fa1c 	bl	8001784 <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 800634c:	4bb9      	ldr	r3, [pc, #740]	@ (8006634 <HAL_I2C_MemRxCpltCallback+0x36c>)
 800634e:	edd3 7a00 	vldr	s15, [r3]
 8006352:	4bb7      	ldr	r3, [pc, #732]	@ (8006630 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006354:	ed93 7a00 	vldr	s14, [r3]
 8006358:	4bb4      	ldr	r3, [pc, #720]	@ (800662c <HAL_I2C_MemRxCpltCallback+0x364>)
 800635a:	edd3 6a00 	vldr	s13, [r3]
 800635e:	49b6      	ldr	r1, [pc, #728]	@ (8006638 <HAL_I2C_MemRxCpltCallback+0x370>)
 8006360:	48b6      	ldr	r0, [pc, #728]	@ (800663c <HAL_I2C_MemRxCpltCallback+0x374>)
 8006362:	eeb0 1a66 	vmov.f32	s2, s13
 8006366:	eef0 0a47 	vmov.f32	s1, s14
 800636a:	eeb0 0a67 	vmov.f32	s0, s15
 800636e:	f7fb f8bb 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 8006372:	4bb2      	ldr	r3, [pc, #712]	@ (800663c <HAL_I2C_MemRxCpltCallback+0x374>)
 8006374:	edd3 7a00 	vldr	s15, [r3]
 8006378:	4baf      	ldr	r3, [pc, #700]	@ (8006638 <HAL_I2C_MemRxCpltCallback+0x370>)
 800637a:	ed93 7a00 	vldr	s14, [r3]
 800637e:	4bb0      	ldr	r3, [pc, #704]	@ (8006640 <HAL_I2C_MemRxCpltCallback+0x378>)
 8006380:	edd3 6a00 	vldr	s13, [r3]
 8006384:	4ba8      	ldr	r3, [pc, #672]	@ (8006628 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006386:	ed93 6a00 	vldr	s12, [r3]
 800638a:	4ba6      	ldr	r3, [pc, #664]	@ (8006624 <HAL_I2C_MemRxCpltCallback+0x35c>)
 800638c:	edd3 5a00 	vldr	s11, [r3]
 8006390:	4ba3      	ldr	r3, [pc, #652]	@ (8006620 <HAL_I2C_MemRxCpltCallback+0x358>)
 8006392:	ed93 5a00 	vldr	s10, [r3]
 8006396:	eef0 2a45 	vmov.f32	s5, s10
 800639a:	eeb0 2a65 	vmov.f32	s4, s11
 800639e:	eef0 1a46 	vmov.f32	s3, s12
 80063a2:	eeb0 1a66 	vmov.f32	s2, s13
 80063a6:	eef0 0a47 	vmov.f32	s1, s14
 80063aa:	eeb0 0a67 	vmov.f32	s0, s15
 80063ae:	48a5      	ldr	r0, [pc, #660]	@ (8006644 <HAL_I2C_MemRxCpltCallback+0x37c>)
 80063b0:	f7fb fa92 	bl	80018d8 <MPU6050_GET_ACCANDGYR_FILTRED>


			now_pitch = data.x;
 80063b4:	4ba3      	ldr	r3, [pc, #652]	@ (8006644 <HAL_I2C_MemRxCpltCallback+0x37c>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4aa3      	ldr	r2, [pc, #652]	@ (8006648 <HAL_I2C_MemRxCpltCallback+0x380>)
 80063ba:	6013      	str	r3, [r2, #0]
			now_rool = data.y;
 80063bc:	4ba1      	ldr	r3, [pc, #644]	@ (8006644 <HAL_I2C_MemRxCpltCallback+0x37c>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	4aa2      	ldr	r2, [pc, #648]	@ (800664c <HAL_I2C_MemRxCpltCallback+0x384>)
 80063c2:	6013      	str	r3, [r2, #0]
			now_yaw = data.z;
 80063c4:	4b9f      	ldr	r3, [pc, #636]	@ (8006644 <HAL_I2C_MemRxCpltCallback+0x37c>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	4aa1      	ldr	r2, [pc, #644]	@ (8006650 <HAL_I2C_MemRxCpltCallback+0x388>)
 80063ca:	6013      	str	r3, [r2, #0]


			wanted_rool = (float)wanted_rool_rx/10;
 80063cc:	4ba1      	ldr	r3, [pc, #644]	@ (8006654 <HAL_I2C_MemRxCpltCallback+0x38c>)
 80063ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063da:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80063de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063e2:	4b9d      	ldr	r3, [pc, #628]	@ (8006658 <HAL_I2C_MemRxCpltCallback+0x390>)
 80063e4:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (float)wanted_pitch_rx/10;
 80063e8:	4b9c      	ldr	r3, [pc, #624]	@ (800665c <HAL_I2C_MemRxCpltCallback+0x394>)
 80063ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063f6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80063fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063fe:	4b98      	ldr	r3, [pc, #608]	@ (8006660 <HAL_I2C_MemRxCpltCallback+0x398>)
 8006400:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = 0;//(float)wanted_yaw_rx/10;
 8006404:	4b97      	ldr	r3, [pc, #604]	@ (8006664 <HAL_I2C_MemRxCpltCallback+0x39c>)
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	601a      	str	r2, [r3, #0]
				  			/*
				  				 * FDP
				  				 */
			wanted_rool = (wanted_rool * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_rool_rx * (1 / (1 + (FDP_FQ * looptime))));
 800640c:	eddf 7a96 	vldr	s15, [pc, #600]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006410:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006414:	4b90      	ldr	r3, [pc, #576]	@ (8006658 <HAL_I2C_MemRxCpltCallback+0x390>)
 8006416:	edd3 7a00 	vldr	s15, [r3]
 800641a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800641e:	eddf 7a92 	vldr	s15, [pc, #584]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006422:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006426:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800642a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800642e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006432:	eddf 7a8d 	vldr	s15, [pc, #564]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006436:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800643a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800643e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006442:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006446:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800644a:	4b88      	ldr	r3, [pc, #544]	@ (800666c <HAL_I2C_MemRxCpltCallback+0x3a4>)
 800644c:	edd3 7a00 	vldr	s15, [r3]
 8006450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006458:	4b7f      	ldr	r3, [pc, #508]	@ (8006658 <HAL_I2C_MemRxCpltCallback+0x390>)
 800645a:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (wanted_pitch * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_pitch_rx * (1 / (1 + (FDP_FQ * looptime))));
 800645e:	eddf 7a82 	vldr	s15, [pc, #520]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006462:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006466:	4b7e      	ldr	r3, [pc, #504]	@ (8006660 <HAL_I2C_MemRxCpltCallback+0x398>)
 8006468:	edd3 7a00 	vldr	s15, [r3]
 800646c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006470:	eddf 7a7d 	vldr	s15, [pc, #500]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006474:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006478:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800647c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006484:	eddf 7a78 	vldr	s15, [pc, #480]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006488:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800648c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006494:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006498:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800649c:	4b74      	ldr	r3, [pc, #464]	@ (8006670 <HAL_I2C_MemRxCpltCallback+0x3a8>)
 800649e:	edd3 7a00 	vldr	s15, [r3]
 80064a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064aa:	4b6d      	ldr	r3, [pc, #436]	@ (8006660 <HAL_I2C_MemRxCpltCallback+0x398>)
 80064ac:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = (wanted_yaw * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_yaw_rx * (1 / (1 + (FDP_FQ * looptime))));
 80064b0:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 80064b4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80064b8:	4b6a      	ldr	r3, [pc, #424]	@ (8006664 <HAL_I2C_MemRxCpltCallback+0x39c>)
 80064ba:	edd3 7a00 	vldr	s15, [r3]
 80064be:	ee67 6a27 	vmul.f32	s13, s14, s15
 80064c2:	eddf 7a69 	vldr	s15, [pc, #420]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 80064c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80064ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064d6:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 80064da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80064de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064e6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80064ea:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80064ee:	4b61      	ldr	r3, [pc, #388]	@ (8006674 <HAL_I2C_MemRxCpltCallback+0x3ac>)
 80064f0:	edd3 7a00 	vldr	s15, [r3]
 80064f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064fc:	4b59      	ldr	r3, [pc, #356]	@ (8006664 <HAL_I2C_MemRxCpltCallback+0x39c>)
 80064fe:	edc3 7a00 	vstr	s15, [r3]


			last_wanted_rool_rx = wanted_rool;
 8006502:	4b55      	ldr	r3, [pc, #340]	@ (8006658 <HAL_I2C_MemRxCpltCallback+0x390>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a59      	ldr	r2, [pc, #356]	@ (800666c <HAL_I2C_MemRxCpltCallback+0x3a4>)
 8006508:	6013      	str	r3, [r2, #0]
			last_wanted_pitch_rx = wanted_pitch;
 800650a:	4b55      	ldr	r3, [pc, #340]	@ (8006660 <HAL_I2C_MemRxCpltCallback+0x398>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a58      	ldr	r2, [pc, #352]	@ (8006670 <HAL_I2C_MemRxCpltCallback+0x3a8>)
 8006510:	6013      	str	r3, [r2, #0]
			last_wanted_yaw_rx = wanted_yaw;
 8006512:	4b54      	ldr	r3, [pc, #336]	@ (8006664 <HAL_I2C_MemRxCpltCallback+0x39c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a57      	ldr	r2, [pc, #348]	@ (8006674 <HAL_I2C_MemRxCpltCallback+0x3ac>)
 8006518:	6013      	str	r3, [r2, #0]


			error_sum_pitch = error_sum_pitch + (wanted_pitch - now_pitch);
 800651a:	4b57      	ldr	r3, [pc, #348]	@ (8006678 <HAL_I2C_MemRxCpltCallback+0x3b0>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006526:	4b4e      	ldr	r3, [pc, #312]	@ (8006660 <HAL_I2C_MemRxCpltCallback+0x398>)
 8006528:	edd3 6a00 	vldr	s13, [r3]
 800652c:	4b46      	ldr	r3, [pc, #280]	@ (8006648 <HAL_I2C_MemRxCpltCallback+0x380>)
 800652e:	edd3 7a00 	vldr	s15, [r3]
 8006532:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800653a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800653e:	ee17 2a90 	vmov	r2, s15
 8006542:	4b4d      	ldr	r3, [pc, #308]	@ (8006678 <HAL_I2C_MemRxCpltCallback+0x3b0>)
 8006544:	601a      	str	r2, [r3, #0]
			error_sum_rool = error_sum_rool + (wanted_rool - now_rool);
 8006546:	4b4d      	ldr	r3, [pc, #308]	@ (800667c <HAL_I2C_MemRxCpltCallback+0x3b4>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	ee07 3a90 	vmov	s15, r3
 800654e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006552:	4b41      	ldr	r3, [pc, #260]	@ (8006658 <HAL_I2C_MemRxCpltCallback+0x390>)
 8006554:	edd3 6a00 	vldr	s13, [r3]
 8006558:	4b3c      	ldr	r3, [pc, #240]	@ (800664c <HAL_I2C_MemRxCpltCallback+0x384>)
 800655a:	edd3 7a00 	vldr	s15, [r3]
 800655e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006566:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800656a:	ee17 2a90 	vmov	r2, s15
 800656e:	4b43      	ldr	r3, [pc, #268]	@ (800667c <HAL_I2C_MemRxCpltCallback+0x3b4>)
 8006570:	601a      	str	r2, [r3, #0]
			error_sum_yaw = error_sum_yaw + (wanted_yaw - now_yaw);
 8006572:	4b43      	ldr	r3, [pc, #268]	@ (8006680 <HAL_I2C_MemRxCpltCallback+0x3b8>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	ee07 3a90 	vmov	s15, r3
 800657a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800657e:	4b39      	ldr	r3, [pc, #228]	@ (8006664 <HAL_I2C_MemRxCpltCallback+0x39c>)
 8006580:	edd3 6a00 	vldr	s13, [r3]
 8006584:	4b32      	ldr	r3, [pc, #200]	@ (8006650 <HAL_I2C_MemRxCpltCallback+0x388>)
 8006586:	edd3 7a00 	vldr	s15, [r3]
 800658a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800658e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006596:	ee17 2a90 	vmov	r2, s15
 800659a:	4b39      	ldr	r3, [pc, #228]	@ (8006680 <HAL_I2C_MemRxCpltCallback+0x3b8>)
 800659c:	601a      	str	r2, [r3, #0]

			error_sum_angular_rate_pitch = error_sum_angular_rate_pitch + (pid_pitch - gx);
 800659e:	4b39      	ldr	r3, [pc, #228]	@ (8006684 <HAL_I2C_MemRxCpltCallback+0x3bc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065aa:	4b37      	ldr	r3, [pc, #220]	@ (8006688 <HAL_I2C_MemRxCpltCallback+0x3c0>)
 80065ac:	edd3 6a00 	vldr	s13, [r3]
 80065b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006628 <HAL_I2C_MemRxCpltCallback+0x360>)
 80065b2:	edd3 7a00 	vldr	s15, [r3]
 80065b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80065ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065c2:	ee17 2a90 	vmov	r2, s15
 80065c6:	4b2f      	ldr	r3, [pc, #188]	@ (8006684 <HAL_I2C_MemRxCpltCallback+0x3bc>)
 80065c8:	601a      	str	r2, [r3, #0]
			error_sum_angular_rate_rool = error_sum_angular_rate_rool + (pid_rool - gy);
 80065ca:	4b30      	ldr	r3, [pc, #192]	@ (800668c <HAL_I2C_MemRxCpltCallback+0x3c4>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	ee07 3a90 	vmov	s15, r3
 80065d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065d6:	4b2e      	ldr	r3, [pc, #184]	@ (8006690 <HAL_I2C_MemRxCpltCallback+0x3c8>)
 80065d8:	edd3 6a00 	vldr	s13, [r3]
 80065dc:	4b11      	ldr	r3, [pc, #68]	@ (8006624 <HAL_I2C_MemRxCpltCallback+0x35c>)
 80065de:	edd3 7a00 	vldr	s15, [r3]
 80065e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80065e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065ee:	ee17 2a90 	vmov	r2, s15
 80065f2:	4b26      	ldr	r3, [pc, #152]	@ (800668c <HAL_I2C_MemRxCpltCallback+0x3c4>)
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	e04d      	b.n	8006694 <HAL_I2C_MemRxCpltCallback+0x3cc>
 80065f8:	000041bc 	.word	0x000041bc
 80065fc:	58021000 	.word	0x58021000
 8006600:	00000030 	.word	0x00000030
 8006604:	00000034 	.word	0x00000034
 8006608:	00000038 	.word	0x00000038
 800660c:	0000003c 	.word	0x0000003c
 8006610:	00000040 	.word	0x00000040
 8006614:	00000044 	.word	0x00000044
 8006618:	42830000 	.word	0x42830000
 800661c:	46000000 	.word	0x46000000
 8006620:	00000014 	.word	0x00000014
 8006624:	00000010 	.word	0x00000010
 8006628:	0000000c 	.word	0x0000000c
 800662c:	00000008 	.word	0x00000008
 8006630:	00000004 	.word	0x00000004
 8006634:	00000000 	.word	0x00000000
 8006638:	0000001c 	.word	0x0000001c
 800663c:	00000018 	.word	0x00000018
 8006640:	00000048 	.word	0x00000048
 8006644:	00000064 	.word	0x00000064
 8006648:	00004060 	.word	0x00004060
 800664c:	00004064 	.word	0x00004064
 8006650:	00004068 	.word	0x00004068
 8006654:	00004032 	.word	0x00004032
 8006658:	00004054 	.word	0x00004054
 800665c:	00004030 	.word	0x00004030
 8006660:	00004050 	.word	0x00004050
 8006664:	00004058 	.word	0x00004058
 8006668:	3a83126f 	.word	0x3a83126f
 800666c:	0000403c 	.word	0x0000403c
 8006670:	00004038 	.word	0x00004038
 8006674:	00004040 	.word	0x00004040
 8006678:	00004084 	.word	0x00004084
 800667c:	00004088 	.word	0x00004088
 8006680:	0000408c 	.word	0x0000408c
 8006684:	00004090 	.word	0x00004090
 8006688:	0000409c 	.word	0x0000409c
 800668c:	00004094 	.word	0x00004094
 8006690:	000040a4 	.word	0x000040a4
			error_sum_angular_rate_yaw = error_sum_angular_rate_yaw + (pid_yaw - gz);
 8006694:	4b89      	ldr	r3, [pc, #548]	@ (80068bc <HAL_I2C_MemRxCpltCallback+0x5f4>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	ee07 3a90 	vmov	s15, r3
 800669c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066a0:	4b87      	ldr	r3, [pc, #540]	@ (80068c0 <HAL_I2C_MemRxCpltCallback+0x5f8>)
 80066a2:	edd3 6a00 	vldr	s13, [r3]
 80066a6:	4b87      	ldr	r3, [pc, #540]	@ (80068c4 <HAL_I2C_MemRxCpltCallback+0x5fc>)
 80066a8:	edd3 7a00 	vldr	s15, [r3]
 80066ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80066b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066b8:	ee17 2a90 	vmov	r2, s15
 80066bc:	4b7f      	ldr	r3, [pc, #508]	@ (80068bc <HAL_I2C_MemRxCpltCallback+0x5f4>)
 80066be:	601a      	str	r2, [r3, #0]


			PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 80066c0:	2201      	movs	r2, #1
 80066c2:	4981      	ldr	r1, [pc, #516]	@ (80068c8 <HAL_I2C_MemRxCpltCallback+0x600>)
 80066c4:	4881      	ldr	r0, [pc, #516]	@ (80068cc <HAL_I2C_MemRxCpltCallback+0x604>)
 80066c6:	f7fd f9bd 	bl	8003a44 <PID_cal>
			PID_cal(&pid_rool, PID_FAC_Rool, 2);
 80066ca:	2202      	movs	r2, #2
 80066cc:	4980      	ldr	r1, [pc, #512]	@ (80068d0 <HAL_I2C_MemRxCpltCallback+0x608>)
 80066ce:	4881      	ldr	r0, [pc, #516]	@ (80068d4 <HAL_I2C_MemRxCpltCallback+0x60c>)
 80066d0:	f7fd f9b8 	bl	8003a44 <PID_cal>
			PID_cal(&pid_yaw, PID_FAC_Yaw, 3);
 80066d4:	2203      	movs	r2, #3
 80066d6:	4980      	ldr	r1, [pc, #512]	@ (80068d8 <HAL_I2C_MemRxCpltCallback+0x610>)
 80066d8:	4879      	ldr	r0, [pc, #484]	@ (80068c0 <HAL_I2C_MemRxCpltCallback+0x5f8>)
 80066da:	f7fd f9b3 	bl	8003a44 <PID_cal>

			PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 80066de:	2204      	movs	r2, #4
 80066e0:	497e      	ldr	r1, [pc, #504]	@ (80068dc <HAL_I2C_MemRxCpltCallback+0x614>)
 80066e2:	487f      	ldr	r0, [pc, #508]	@ (80068e0 <HAL_I2C_MemRxCpltCallback+0x618>)
 80066e4:	f7fd f9ae 	bl	8003a44 <PID_cal>
			PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 80066e8:	2205      	movs	r2, #5
 80066ea:	497e      	ldr	r1, [pc, #504]	@ (80068e4 <HAL_I2C_MemRxCpltCallback+0x61c>)
 80066ec:	487e      	ldr	r0, [pc, #504]	@ (80068e8 <HAL_I2C_MemRxCpltCallback+0x620>)
 80066ee:	f7fd f9a9 	bl	8003a44 <PID_cal>
			PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 80066f2:	2206      	movs	r2, #6
 80066f4:	497d      	ldr	r1, [pc, #500]	@ (80068ec <HAL_I2C_MemRxCpltCallback+0x624>)
 80066f6:	487e      	ldr	r0, [pc, #504]	@ (80068f0 <HAL_I2C_MemRxCpltCallback+0x628>)
 80066f8:	f7fd f9a4 	bl	8003a44 <PID_cal>


			old_error_pitch = wanted_pitch - now_pitch;
 80066fc:	4b7d      	ldr	r3, [pc, #500]	@ (80068f4 <HAL_I2C_MemRxCpltCallback+0x62c>)
 80066fe:	ed93 7a00 	vldr	s14, [r3]
 8006702:	4b7d      	ldr	r3, [pc, #500]	@ (80068f8 <HAL_I2C_MemRxCpltCallback+0x630>)
 8006704:	edd3 7a00 	vldr	s15, [r3]
 8006708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800670c:	4b7b      	ldr	r3, [pc, #492]	@ (80068fc <HAL_I2C_MemRxCpltCallback+0x634>)
 800670e:	edc3 7a00 	vstr	s15, [r3]
			old_error_rool = wanted_rool - now_rool;
 8006712:	4b7b      	ldr	r3, [pc, #492]	@ (8006900 <HAL_I2C_MemRxCpltCallback+0x638>)
 8006714:	ed93 7a00 	vldr	s14, [r3]
 8006718:	4b7a      	ldr	r3, [pc, #488]	@ (8006904 <HAL_I2C_MemRxCpltCallback+0x63c>)
 800671a:	edd3 7a00 	vldr	s15, [r3]
 800671e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006722:	4b79      	ldr	r3, [pc, #484]	@ (8006908 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006724:	edc3 7a00 	vstr	s15, [r3]
			old_error_yaw = wanted_yaw - now_yaw;
 8006728:	4b78      	ldr	r3, [pc, #480]	@ (800690c <HAL_I2C_MemRxCpltCallback+0x644>)
 800672a:	ed93 7a00 	vldr	s14, [r3]
 800672e:	4b78      	ldr	r3, [pc, #480]	@ (8006910 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006730:	edd3 7a00 	vldr	s15, [r3]
 8006734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006738:	4b76      	ldr	r3, [pc, #472]	@ (8006914 <HAL_I2C_MemRxCpltCallback+0x64c>)
 800673a:	edc3 7a00 	vstr	s15, [r3]

			old_error_angular_rate_pitch = pid_pitch - gx;
 800673e:	4b63      	ldr	r3, [pc, #396]	@ (80068cc <HAL_I2C_MemRxCpltCallback+0x604>)
 8006740:	ed93 7a00 	vldr	s14, [r3]
 8006744:	4b74      	ldr	r3, [pc, #464]	@ (8006918 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006746:	edd3 7a00 	vldr	s15, [r3]
 800674a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800674e:	4b73      	ldr	r3, [pc, #460]	@ (800691c <HAL_I2C_MemRxCpltCallback+0x654>)
 8006750:	edc3 7a00 	vstr	s15, [r3]
			old_error_angular_rate_rool = pid_rool - gy;
 8006754:	4b5f      	ldr	r3, [pc, #380]	@ (80068d4 <HAL_I2C_MemRxCpltCallback+0x60c>)
 8006756:	ed93 7a00 	vldr	s14, [r3]
 800675a:	4b71      	ldr	r3, [pc, #452]	@ (8006920 <HAL_I2C_MemRxCpltCallback+0x658>)
 800675c:	edd3 7a00 	vldr	s15, [r3]
 8006760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006764:	4b6f      	ldr	r3, [pc, #444]	@ (8006924 <HAL_I2C_MemRxCpltCallback+0x65c>)
 8006766:	edc3 7a00 	vstr	s15, [r3]
			old_error_angular_rate_yaw = wanted_yaw - gz;
 800676a:	4b68      	ldr	r3, [pc, #416]	@ (800690c <HAL_I2C_MemRxCpltCallback+0x644>)
 800676c:	ed93 7a00 	vldr	s14, [r3]
 8006770:	4b54      	ldr	r3, [pc, #336]	@ (80068c4 <HAL_I2C_MemRxCpltCallback+0x5fc>)
 8006772:	edd3 7a00 	vldr	s15, [r3]
 8006776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800677a:	4b6b      	ldr	r3, [pc, #428]	@ (8006928 <HAL_I2C_MemRxCpltCallback+0x660>)
 800677c:	edc3 7a00 	vstr	s15, [r3]


			//MYDRON.ROOL 	= ((pid_angular_rate_rool > -5000) && (pid_angular_rate_rool < 5000)) ? pid_angular_rate_rool: (pid_angular_rate_rool > 0) ? 5000: -5000;
			MYDRON.ROOL 	= (pid_angular_rate_rool > 5000) ? ROOL_MAX_VAL(): (pid_angular_rate_rool < -5000) ? ROOL_MIN_VAL(): pid_angular_rate_rool;
 8006780:	4b59      	ldr	r3, [pc, #356]	@ (80068e8 <HAL_I2C_MemRxCpltCallback+0x620>)
 8006782:	edd3 7a00 	vldr	s15, [r3]
 8006786:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800692c <HAL_I2C_MemRxCpltCallback+0x664>
 800678a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800678e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006792:	dd0c      	ble.n	80067ae <HAL_I2C_MemRxCpltCallback+0x4e6>
 8006794:	f001 f8b0 	bl	80078f8 <ROOL_MAX_VAL>
 8006798:	4603      	mov	r3, r0
 800679a:	ee07 3a90 	vmov	s15, r3
 800679e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067a6:	ee17 3a90 	vmov	r3, s15
 80067aa:	b21b      	sxth	r3, r3
 80067ac:	e01e      	b.n	80067ec <HAL_I2C_MemRxCpltCallback+0x524>
 80067ae:	4b4e      	ldr	r3, [pc, #312]	@ (80068e8 <HAL_I2C_MemRxCpltCallback+0x620>)
 80067b0:	edd3 7a00 	vldr	s15, [r3]
 80067b4:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8006930 <HAL_I2C_MemRxCpltCallback+0x668>
 80067b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c0:	d50c      	bpl.n	80067dc <HAL_I2C_MemRxCpltCallback+0x514>
 80067c2:	f001 f8a9 	bl	8007918 <ROOL_MIN_VAL>
 80067c6:	4603      	mov	r3, r0
 80067c8:	ee07 3a90 	vmov	s15, r3
 80067cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067d4:	ee17 3a90 	vmov	r3, s15
 80067d8:	b21b      	sxth	r3, r3
 80067da:	e007      	b.n	80067ec <HAL_I2C_MemRxCpltCallback+0x524>
 80067dc:	4b42      	ldr	r3, [pc, #264]	@ (80068e8 <HAL_I2C_MemRxCpltCallback+0x620>)
 80067de:	edd3 7a00 	vldr	s15, [r3]
 80067e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067e6:	ee17 3a90 	vmov	r3, s15
 80067ea:	b21b      	sxth	r3, r3
 80067ec:	4a51      	ldr	r2, [pc, #324]	@ (8006934 <HAL_I2C_MemRxCpltCallback+0x66c>)
 80067ee:	80d3      	strh	r3, [r2, #6]
			MYDRON.PITCH 	= (pid_angular_rate_pitch > 5000) ? PITCH_MAX_VAL(): (pid_angular_rate_pitch < -5000) ? PITCH_MIN_VAL(): pid_angular_rate_pitch;
 80067f0:	4b3b      	ldr	r3, [pc, #236]	@ (80068e0 <HAL_I2C_MemRxCpltCallback+0x618>)
 80067f2:	edd3 7a00 	vldr	s15, [r3]
 80067f6:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800692c <HAL_I2C_MemRxCpltCallback+0x664>
 80067fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006802:	dd0c      	ble.n	800681e <HAL_I2C_MemRxCpltCallback+0x556>
 8006804:	f001 f898 	bl	8007938 <PITCH_MAX_VAL>
 8006808:	4603      	mov	r3, r0
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006816:	ee17 3a90 	vmov	r3, s15
 800681a:	b21b      	sxth	r3, r3
 800681c:	e01e      	b.n	800685c <HAL_I2C_MemRxCpltCallback+0x594>
 800681e:	4b30      	ldr	r3, [pc, #192]	@ (80068e0 <HAL_I2C_MemRxCpltCallback+0x618>)
 8006820:	edd3 7a00 	vldr	s15, [r3]
 8006824:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006930 <HAL_I2C_MemRxCpltCallback+0x668>
 8006828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800682c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006830:	d50c      	bpl.n	800684c <HAL_I2C_MemRxCpltCallback+0x584>
 8006832:	f001 f891 	bl	8007958 <PITCH_MIN_VAL>
 8006836:	4603      	mov	r3, r0
 8006838:	ee07 3a90 	vmov	s15, r3
 800683c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006844:	ee17 3a90 	vmov	r3, s15
 8006848:	b21b      	sxth	r3, r3
 800684a:	e007      	b.n	800685c <HAL_I2C_MemRxCpltCallback+0x594>
 800684c:	4b24      	ldr	r3, [pc, #144]	@ (80068e0 <HAL_I2C_MemRxCpltCallback+0x618>)
 800684e:	edd3 7a00 	vldr	s15, [r3]
 8006852:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006856:	ee17 3a90 	vmov	r3, s15
 800685a:	b21b      	sxth	r3, r3
 800685c:	4a35      	ldr	r2, [pc, #212]	@ (8006934 <HAL_I2C_MemRxCpltCallback+0x66c>)
 800685e:	8093      	strh	r3, [r2, #4]
			MYDRON.YAW 		= (pid_angular_rate_yaw > 5000) ? YAW_MAX_VAL(): (pid_angular_rate_yaw < -5000) ? YAW_MIN_VAL(): pid_angular_rate_yaw;
 8006860:	4b23      	ldr	r3, [pc, #140]	@ (80068f0 <HAL_I2C_MemRxCpltCallback+0x628>)
 8006862:	edd3 7a00 	vldr	s15, [r3]
 8006866:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800692c <HAL_I2C_MemRxCpltCallback+0x664>
 800686a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800686e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006872:	dd0c      	ble.n	800688e <HAL_I2C_MemRxCpltCallback+0x5c6>
 8006874:	f001 f880 	bl	8007978 <YAW_MAX_VAL>
 8006878:	4603      	mov	r3, r0
 800687a:	ee07 3a90 	vmov	s15, r3
 800687e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006886:	ee17 3a90 	vmov	r3, s15
 800688a:	b21b      	sxth	r3, r3
 800688c:	e05c      	b.n	8006948 <HAL_I2C_MemRxCpltCallback+0x680>
 800688e:	4b18      	ldr	r3, [pc, #96]	@ (80068f0 <HAL_I2C_MemRxCpltCallback+0x628>)
 8006890:	edd3 7a00 	vldr	s15, [r3]
 8006894:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006930 <HAL_I2C_MemRxCpltCallback+0x668>
 8006898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800689c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a0:	d54a      	bpl.n	8006938 <HAL_I2C_MemRxCpltCallback+0x670>
 80068a2:	f001 f879 	bl	8007998 <YAW_MIN_VAL>
 80068a6:	4603      	mov	r3, r0
 80068a8:	ee07 3a90 	vmov	s15, r3
 80068ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068b4:	ee17 3a90 	vmov	r3, s15
 80068b8:	b21b      	sxth	r3, r3
 80068ba:	e045      	b.n	8006948 <HAL_I2C_MemRxCpltCallback+0x680>
 80068bc:	00004098 	.word	0x00004098
 80068c0:	000040a0 	.word	0x000040a0
 80068c4:	00000014 	.word	0x00000014
 80068c8:	000040d8 	.word	0x000040d8
 80068cc:	0000409c 	.word	0x0000409c
 80068d0:	000040ec 	.word	0x000040ec
 80068d4:	000040a4 	.word	0x000040a4
 80068d8:	00004100 	.word	0x00004100
 80068dc:	00004138 	.word	0x00004138
 80068e0:	000040a8 	.word	0x000040a8
 80068e4:	0000414c 	.word	0x0000414c
 80068e8:	000040b0 	.word	0x000040b0
 80068ec:	00004160 	.word	0x00004160
 80068f0:	000040ac 	.word	0x000040ac
 80068f4:	00004050 	.word	0x00004050
 80068f8:	00004060 	.word	0x00004060
 80068fc:	0000406c 	.word	0x0000406c
 8006900:	00004054 	.word	0x00004054
 8006904:	00004064 	.word	0x00004064
 8006908:	00004070 	.word	0x00004070
 800690c:	00004058 	.word	0x00004058
 8006910:	00004068 	.word	0x00004068
 8006914:	00004074 	.word	0x00004074
 8006918:	0000000c 	.word	0x0000000c
 800691c:	00004078 	.word	0x00004078
 8006920:	00000010 	.word	0x00000010
 8006924:	0000407c 	.word	0x0000407c
 8006928:	00004080 	.word	0x00004080
 800692c:	459c4000 	.word	0x459c4000
 8006930:	c59c4000 	.word	0xc59c4000
 8006934:	00000160 	.word	0x00000160
 8006938:	4bc7      	ldr	r3, [pc, #796]	@ (8006c58 <HAL_I2C_MemRxCpltCallback+0x990>)
 800693a:	edd3 7a00 	vldr	s15, [r3]
 800693e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006942:	ee17 3a90 	vmov	r3, s15
 8006946:	b21b      	sxth	r3, r3
 8006948:	4ac4      	ldr	r2, [pc, #784]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 800694a:	8113      	strh	r3, [r2, #8]
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 800694c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006950:	f7fc ff42 	bl	80037d8 <Thrust_filter>
			if(MYDRON.THRUST > thrust_limit){
 8006954:	4bc1      	ldr	r3, [pc, #772]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006956:	885b      	ldrh	r3, [r3, #2]
 8006958:	461a      	mov	r2, r3
 800695a:	4bc1      	ldr	r3, [pc, #772]	@ (8006c60 <HAL_I2C_MemRxCpltCallback+0x998>)
 800695c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006960:	429a      	cmp	r2, r3
 8006962:	dd05      	ble.n	8006970 <HAL_I2C_MemRxCpltCallback+0x6a8>
				MYDRON.THRUST = thrust_limit;
 8006964:	4bbe      	ldr	r3, [pc, #760]	@ (8006c60 <HAL_I2C_MemRxCpltCallback+0x998>)
 8006966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800696a:	b29a      	uxth	r2, r3
 800696c:	4bbb      	ldr	r3, [pc, #748]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 800696e:	805a      	strh	r2, [r3, #2]
			}


			Stack_Push(WartoscBezwgledna(PID_FAC_Pitch[4]));
 8006970:	4bbc      	ldr	r3, [pc, #752]	@ (8006c64 <HAL_I2C_MemRxCpltCallback+0x99c>)
 8006972:	edd3 7a04 	vldr	s15, [r3, #16]
 8006976:	eeb0 0a67 	vmov.f32	s0, s15
 800697a:	f000 fbcb 	bl	8007114 <WartoscBezwgledna>
 800697e:	eef0 7a40 	vmov.f32	s15, s0
 8006982:	eeb0 0a67 	vmov.f32	s0, s15
 8006986:	f000 ff6b 	bl	8007860 <Stack_Push>
			Stack_Push(WartoscBezwgledna(PID_FAC_Rool[4]));
 800698a:	4bb7      	ldr	r3, [pc, #732]	@ (8006c68 <HAL_I2C_MemRxCpltCallback+0x9a0>)
 800698c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006990:	eeb0 0a67 	vmov.f32	s0, s15
 8006994:	f000 fbbe 	bl	8007114 <WartoscBezwgledna>
 8006998:	eef0 7a40 	vmov.f32	s15, s0
 800699c:	eeb0 0a67 	vmov.f32	s0, s15
 80069a0:	f000 ff5e 	bl	8007860 <Stack_Push>
			Stack_Push(now_pitch);
 80069a4:	4bb1      	ldr	r3, [pc, #708]	@ (8006c6c <HAL_I2C_MemRxCpltCallback+0x9a4>)
 80069a6:	edd3 7a00 	vldr	s15, [r3]
 80069aa:	eeb0 0a67 	vmov.f32	s0, s15
 80069ae:	f000 ff57 	bl	8007860 <Stack_Push>
			Stack_Push(now_rool);
 80069b2:	4baf      	ldr	r3, [pc, #700]	@ (8006c70 <HAL_I2C_MemRxCpltCallback+0x9a8>)
 80069b4:	edd3 7a00 	vldr	s15, [r3]
 80069b8:	eeb0 0a67 	vmov.f32	s0, s15
 80069bc:	f000 ff50 	bl	8007860 <Stack_Push>


			SPEED1 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < 20000) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : 20000;//trust 7000 max
 80069c0:	4ba6      	ldr	r3, [pc, #664]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 80069c2:	885b      	ldrh	r3, [r3, #2]
 80069c4:	ee07 3a90 	vmov	s15, r3
 80069c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80069cc:	ed9f 6b9c 	vldr	d6, [pc, #624]	@ 8006c40 <HAL_I2C_MemRxCpltCallback+0x978>
 80069d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80069d4:	4ba1      	ldr	r3, [pc, #644]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 80069d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80069da:	ee07 3a90 	vmov	s15, r3
 80069de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80069e2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80069e6:	4b9d      	ldr	r3, [pc, #628]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 80069e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80069ec:	ee07 3a90 	vmov	s15, r3
 80069f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80069f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80069f8:	4b98      	ldr	r3, [pc, #608]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 80069fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006a0a:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 8006c48 <HAL_I2C_MemRxCpltCallback+0x980>
 8006a0e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006a12:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 8006c50 <HAL_I2C_MemRxCpltCallback+0x988>
 8006a16:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006a1a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006a1e:	ee17 2a90 	vmov	r2, s15
 8006a22:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d832      	bhi.n	8006a90 <HAL_I2C_MemRxCpltCallback+0x7c8>
 8006a2a:	4b8c      	ldr	r3, [pc, #560]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006a2c:	885b      	ldrh	r3, [r3, #2]
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a36:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 8006c40 <HAL_I2C_MemRxCpltCallback+0x978>
 8006a3a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006a3e:	4b87      	ldr	r3, [pc, #540]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006a40:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006a44:	ee07 3a90 	vmov	s15, r3
 8006a48:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a4c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006a50:	4b82      	ldr	r3, [pc, #520]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006a52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a5e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006a62:	4b7e      	ldr	r3, [pc, #504]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006a64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006a68:	ee07 3a90 	vmov	s15, r3
 8006a6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006a70:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006a74:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8006c48 <HAL_I2C_MemRxCpltCallback+0x980>
 8006a78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006a7c:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8006c50 <HAL_I2C_MemRxCpltCallback+0x988>
 8006a80:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006a84:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006a88:	ee17 3a90 	vmov	r3, s15
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	e001      	b.n	8006a94 <HAL_I2C_MemRxCpltCallback+0x7cc>
 8006a90:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006a94:	4a77      	ldr	r2, [pc, #476]	@ (8006c74 <HAL_I2C_MemRxCpltCallback+0x9ac>)
 8006a96:	8013      	strh	r3, [r2, #0]
			SPEED2 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < 20000) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : 20000;//
 8006a98:	4b70      	ldr	r3, [pc, #448]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006a9a:	885b      	ldrh	r3, [r3, #2]
 8006a9c:	ee07 3a90 	vmov	s15, r3
 8006aa0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006aa4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8006c40 <HAL_I2C_MemRxCpltCallback+0x978>
 8006aa8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006aac:	4b6b      	ldr	r3, [pc, #428]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006aae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006aba:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006abe:	4b67      	ldr	r3, [pc, #412]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006ac0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ac4:	ee07 3a90 	vmov	s15, r3
 8006ac8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006acc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ad0:	4b62      	ldr	r3, [pc, #392]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006ad2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ade:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006ae2:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8006c48 <HAL_I2C_MemRxCpltCallback+0x980>
 8006ae6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006aea:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8006c50 <HAL_I2C_MemRxCpltCallback+0x988>
 8006aee:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006af2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006af6:	ee17 2a90 	vmov	r2, s15
 8006afa:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d832      	bhi.n	8006b68 <HAL_I2C_MemRxCpltCallback+0x8a0>
 8006b02:	4b56      	ldr	r3, [pc, #344]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006b04:	885b      	ldrh	r3, [r3, #2]
 8006b06:	ee07 3a90 	vmov	s15, r3
 8006b0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b0e:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 8006c40 <HAL_I2C_MemRxCpltCallback+0x978>
 8006b12:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006b16:	4b51      	ldr	r3, [pc, #324]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006b18:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006b1c:	ee07 3a90 	vmov	s15, r3
 8006b20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b24:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006b28:	4b4c      	ldr	r3, [pc, #304]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006b2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b36:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006b3a:	4b48      	ldr	r3, [pc, #288]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006b3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006b40:	ee07 3a90 	vmov	s15, r3
 8006b44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b48:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006b4c:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8006c48 <HAL_I2C_MemRxCpltCallback+0x980>
 8006b50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006b54:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8006c50 <HAL_I2C_MemRxCpltCallback+0x988>
 8006b58:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006b5c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006b60:	ee17 3a90 	vmov	r3, s15
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	e001      	b.n	8006b6c <HAL_I2C_MemRxCpltCallback+0x8a4>
 8006b68:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006b6c:	4a42      	ldr	r2, [pc, #264]	@ (8006c78 <HAL_I2C_MemRxCpltCallback+0x9b0>)
 8006b6e:	8013      	strh	r3, [r2, #0]
			SPEED3 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < 20000) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : 20000;//
 8006b70:	4b3a      	ldr	r3, [pc, #232]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006b72:	885b      	ldrh	r3, [r3, #2]
 8006b74:	ee07 3a90 	vmov	s15, r3
 8006b78:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b7c:	ed9f 6b30 	vldr	d6, [pc, #192]	@ 8006c40 <HAL_I2C_MemRxCpltCallback+0x978>
 8006b80:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006b84:	4b35      	ldr	r3, [pc, #212]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006b86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b92:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006b96:	4b31      	ldr	r3, [pc, #196]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006b98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b9c:	ee07 3a90 	vmov	s15, r3
 8006ba0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ba4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006baa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006bb6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006bba:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8006c48 <HAL_I2C_MemRxCpltCallback+0x980>
 8006bbe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006bc2:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8006c50 <HAL_I2C_MemRxCpltCallback+0x988>
 8006bc6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006bca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006bce:	ee17 2a90 	vmov	r2, s15
 8006bd2:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d850      	bhi.n	8006c7c <HAL_I2C_MemRxCpltCallback+0x9b4>
 8006bda:	4b20      	ldr	r3, [pc, #128]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006bdc:	885b      	ldrh	r3, [r3, #2]
 8006bde:	ee07 3a90 	vmov	s15, r3
 8006be2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006be6:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8006c40 <HAL_I2C_MemRxCpltCallback+0x978>
 8006bea:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006bee:	4b1b      	ldr	r3, [pc, #108]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006bf0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006bf4:	ee07 3a90 	vmov	s15, r3
 8006bf8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006bfc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006c00:	4b16      	ldr	r3, [pc, #88]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006c02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c0e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006c12:	4b12      	ldr	r3, [pc, #72]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x994>)
 8006c14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006c18:	ee07 3a90 	vmov	s15, r3
 8006c1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c20:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006c24:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8006c48 <HAL_I2C_MemRxCpltCallback+0x980>
 8006c28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c2c:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8006c50 <HAL_I2C_MemRxCpltCallback+0x988>
 8006c30:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006c38:	ee17 3a90 	vmov	r3, s15
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	e01f      	b.n	8006c80 <HAL_I2C_MemRxCpltCallback+0x9b8>
 8006c40:	66666666 	.word	0x66666666
 8006c44:	3fe66666 	.word	0x3fe66666
 8006c48:	00000000 	.word	0x00000000
 8006c4c:	40c48200 	.word	0x40c48200
 8006c50:	00000000 	.word	0x00000000
 8006c54:	407f4000 	.word	0x407f4000
 8006c58:	000040ac 	.word	0x000040ac
 8006c5c:	00000160 	.word	0x00000160
 8006c60:	00004046 	.word	0x00004046
 8006c64:	000040d8 	.word	0x000040d8
 8006c68:	000040ec 	.word	0x000040ec
 8006c6c:	00004060 	.word	0x00004060
 8006c70:	00004064 	.word	0x00004064
 8006c74:	00004174 	.word	0x00004174
 8006c78:	00004176 	.word	0x00004176
 8006c7c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006c80:	4a99      	ldr	r2, [pc, #612]	@ (8006ee8 <HAL_I2C_MemRxCpltCallback+0xc20>)
 8006c82:	8013      	strh	r3, [r2, #0]
			SPEED4 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < 20000) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : 20000;//
 8006c84:	4b99      	ldr	r3, [pc, #612]	@ (8006eec <HAL_I2C_MemRxCpltCallback+0xc24>)
 8006c86:	885b      	ldrh	r3, [r3, #2]
 8006c88:	ee07 3a90 	vmov	s15, r3
 8006c8c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c90:	ed9f 6b89 	vldr	d6, [pc, #548]	@ 8006eb8 <HAL_I2C_MemRxCpltCallback+0xbf0>
 8006c94:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006c98:	4b94      	ldr	r3, [pc, #592]	@ (8006eec <HAL_I2C_MemRxCpltCallback+0xc24>)
 8006c9a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ca6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006caa:	4b90      	ldr	r3, [pc, #576]	@ (8006eec <HAL_I2C_MemRxCpltCallback+0xc24>)
 8006cac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006cb0:	ee07 3a90 	vmov	s15, r3
 8006cb4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cb8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006cbc:	4b8b      	ldr	r3, [pc, #556]	@ (8006eec <HAL_I2C_MemRxCpltCallback+0xc24>)
 8006cbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006cc2:	ee07 3a90 	vmov	s15, r3
 8006cc6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cca:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006cce:	ed9f 6b7c 	vldr	d6, [pc, #496]	@ 8006ec0 <HAL_I2C_MemRxCpltCallback+0xbf8>
 8006cd2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006cd6:	ed9f 6b7c 	vldr	d6, [pc, #496]	@ 8006ec8 <HAL_I2C_MemRxCpltCallback+0xc00>
 8006cda:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006cde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006ce2:	ee17 2a90 	vmov	r2, s15
 8006ce6:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d832      	bhi.n	8006d54 <HAL_I2C_MemRxCpltCallback+0xa8c>
 8006cee:	4b7f      	ldr	r3, [pc, #508]	@ (8006eec <HAL_I2C_MemRxCpltCallback+0xc24>)
 8006cf0:	885b      	ldrh	r3, [r3, #2]
 8006cf2:	ee07 3a90 	vmov	s15, r3
 8006cf6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cfa:	ed9f 6b6f 	vldr	d6, [pc, #444]	@ 8006eb8 <HAL_I2C_MemRxCpltCallback+0xbf0>
 8006cfe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006d02:	4b7a      	ldr	r3, [pc, #488]	@ (8006eec <HAL_I2C_MemRxCpltCallback+0xc24>)
 8006d04:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006d08:	ee07 3a90 	vmov	s15, r3
 8006d0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d10:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d14:	4b75      	ldr	r3, [pc, #468]	@ (8006eec <HAL_I2C_MemRxCpltCallback+0xc24>)
 8006d16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d22:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006d26:	4b71      	ldr	r3, [pc, #452]	@ (8006eec <HAL_I2C_MemRxCpltCallback+0xc24>)
 8006d28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d2c:	ee07 3a90 	vmov	s15, r3
 8006d30:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d34:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006d38:	ed9f 6b61 	vldr	d6, [pc, #388]	@ 8006ec0 <HAL_I2C_MemRxCpltCallback+0xbf8>
 8006d3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d40:	ed9f 6b61 	vldr	d6, [pc, #388]	@ 8006ec8 <HAL_I2C_MemRxCpltCallback+0xc00>
 8006d44:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d48:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006d4c:	ee17 3a90 	vmov	r3, s15
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	e001      	b.n	8006d58 <HAL_I2C_MemRxCpltCallback+0xa90>
 8006d54:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006d58:	4a65      	ldr	r2, [pc, #404]	@ (8006ef0 <HAL_I2C_MemRxCpltCallback+0xc28>)
 8006d5a:	8013      	strh	r3, [r2, #0]

			if(SPEED1 != OLD_SPEED1){
 8006d5c:	4b65      	ldr	r3, [pc, #404]	@ (8006ef4 <HAL_I2C_MemRxCpltCallback+0xc2c>)
 8006d5e:	881a      	ldrh	r2, [r3, #0]
 8006d60:	4b65      	ldr	r3, [pc, #404]	@ (8006ef8 <HAL_I2C_MemRxCpltCallback+0xc30>)
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d004      	beq.n	8006d72 <HAL_I2C_MemRxCpltCallback+0xaaa>
				ESC_1_SPEED(SPEED1);
 8006d68:	4b62      	ldr	r3, [pc, #392]	@ (8006ef4 <HAL_I2C_MemRxCpltCallback+0xc2c>)
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fa f861 	bl	8000e34 <ESC_1_SPEED>
			}
			if(SPEED2 != OLD_SPEED2){
 8006d72:	4b62      	ldr	r3, [pc, #392]	@ (8006efc <HAL_I2C_MemRxCpltCallback+0xc34>)
 8006d74:	881a      	ldrh	r2, [r3, #0]
 8006d76:	4b62      	ldr	r3, [pc, #392]	@ (8006f00 <HAL_I2C_MemRxCpltCallback+0xc38>)
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d004      	beq.n	8006d88 <HAL_I2C_MemRxCpltCallback+0xac0>
				ESC_2_SPEED(SPEED2);
 8006d7e:	4b5f      	ldr	r3, [pc, #380]	@ (8006efc <HAL_I2C_MemRxCpltCallback+0xc34>)
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fa f878 	bl	8000e78 <ESC_2_SPEED>
			}
			if(SPEED3 != OLD_SPEED3){
 8006d88:	4b57      	ldr	r3, [pc, #348]	@ (8006ee8 <HAL_I2C_MemRxCpltCallback+0xc20>)
 8006d8a:	881a      	ldrh	r2, [r3, #0]
 8006d8c:	4b5d      	ldr	r3, [pc, #372]	@ (8006f04 <HAL_I2C_MemRxCpltCallback+0xc3c>)
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d004      	beq.n	8006d9e <HAL_I2C_MemRxCpltCallback+0xad6>
				ESC_3_SPEED(SPEED3);
 8006d94:	4b54      	ldr	r3, [pc, #336]	@ (8006ee8 <HAL_I2C_MemRxCpltCallback+0xc20>)
 8006d96:	881b      	ldrh	r3, [r3, #0]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fa f88f 	bl	8000ebc <ESC_3_SPEED>
			}
			if(SPEED4 != OLD_SPEED4){
 8006d9e:	4b54      	ldr	r3, [pc, #336]	@ (8006ef0 <HAL_I2C_MemRxCpltCallback+0xc28>)
 8006da0:	881a      	ldrh	r2, [r3, #0]
 8006da2:	4b59      	ldr	r3, [pc, #356]	@ (8006f08 <HAL_I2C_MemRxCpltCallback+0xc40>)
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d004      	beq.n	8006db4 <HAL_I2C_MemRxCpltCallback+0xaec>
				ESC_4_SPEED(SPEED4);
 8006daa:	4b51      	ldr	r3, [pc, #324]	@ (8006ef0 <HAL_I2C_MemRxCpltCallback+0xc28>)
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fa f8a6 	bl	8000f00 <ESC_4_SPEED>
			}

			OLD_SPEED1 = SPEED1;
 8006db4:	4b4f      	ldr	r3, [pc, #316]	@ (8006ef4 <HAL_I2C_MemRxCpltCallback+0xc2c>)
 8006db6:	881a      	ldrh	r2, [r3, #0]
 8006db8:	4b4f      	ldr	r3, [pc, #316]	@ (8006ef8 <HAL_I2C_MemRxCpltCallback+0xc30>)
 8006dba:	801a      	strh	r2, [r3, #0]
			OLD_SPEED2 = SPEED2;
 8006dbc:	4b4f      	ldr	r3, [pc, #316]	@ (8006efc <HAL_I2C_MemRxCpltCallback+0xc34>)
 8006dbe:	881a      	ldrh	r2, [r3, #0]
 8006dc0:	4b4f      	ldr	r3, [pc, #316]	@ (8006f00 <HAL_I2C_MemRxCpltCallback+0xc38>)
 8006dc2:	801a      	strh	r2, [r3, #0]
			OLD_SPEED3 = SPEED3;
 8006dc4:	4b48      	ldr	r3, [pc, #288]	@ (8006ee8 <HAL_I2C_MemRxCpltCallback+0xc20>)
 8006dc6:	881a      	ldrh	r2, [r3, #0]
 8006dc8:	4b4e      	ldr	r3, [pc, #312]	@ (8006f04 <HAL_I2C_MemRxCpltCallback+0xc3c>)
 8006dca:	801a      	strh	r2, [r3, #0]
			OLD_SPEED4 = SPEED4;
 8006dcc:	4b48      	ldr	r3, [pc, #288]	@ (8006ef0 <HAL_I2C_MemRxCpltCallback+0xc28>)
 8006dce:	881a      	ldrh	r2, [r3, #0]
 8006dd0:	4b4d      	ldr	r3, [pc, #308]	@ (8006f08 <HAL_I2C_MemRxCpltCallback+0xc40>)
 8006dd2:	801a      	strh	r2, [r3, #0]

			LED_G_0;
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006dda:	484c      	ldr	r0, [pc, #304]	@ (8006f0c <HAL_I2C_MemRxCpltCallback+0xc44>)
 8006ddc:	f007 fae0 	bl	800e3a0 <HAL_GPIO_WritePin>
	}
	if(HMC583L_IRQ == 1){
 8006de0:	4b4b      	ldr	r3, [pc, #300]	@ (8006f10 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d132      	bne.n	8006e4e <HAL_I2C_MemRxCpltCallback+0xb86>
		HMC583L_IRQ = 0;
 8006de8:	4b49      	ldr	r3, [pc, #292]	@ (8006f10 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	701a      	strb	r2, [r3, #0]
		Mag_Z = (float)(HMC5883L_Get_Z_End_IT() - Mag_Offset_val);
 8006dee:	f7fa f98b 	bl	8001108 <HMC5883L_Get_Z_End_IT>
 8006df2:	4603      	mov	r3, r0
 8006df4:	461a      	mov	r2, r3
 8006df6:	4b47      	ldr	r3, [pc, #284]	@ (8006f14 <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e06:	4b44      	ldr	r3, [pc, #272]	@ (8006f18 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8006e08:	edc3 7a00 	vstr	s15, [r3]
		Mag_Z = (Mag_Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (Old_Mag_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 8006e0c:	4b42      	ldr	r3, [pc, #264]	@ (8006f18 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8006e0e:	edd3 7a00 	vldr	s15, [r3]
 8006e12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006e16:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8006ed0 <HAL_I2C_MemRxCpltCallback+0xc08>
 8006e1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e1e:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8006ed8 <HAL_I2C_MemRxCpltCallback+0xc10>
 8006e22:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8006e26:	4b3d      	ldr	r3, [pc, #244]	@ (8006f1c <HAL_I2C_MemRxCpltCallback+0xc54>)
 8006e28:	edd3 7a00 	vldr	s15, [r3]
 8006e2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006e30:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8006ee0 <HAL_I2C_MemRxCpltCallback+0xc18>
 8006e34:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006e38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006e3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006e40:	4b35      	ldr	r3, [pc, #212]	@ (8006f18 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8006e42:	edc3 7a00 	vstr	s15, [r3]
		Old_Mag_Z = Mag_Z;
 8006e46:	4b34      	ldr	r3, [pc, #208]	@ (8006f18 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a34      	ldr	r2, [pc, #208]	@ (8006f1c <HAL_I2C_MemRxCpltCallback+0xc54>)
 8006e4c:	6013      	str	r3, [r2, #0]
	}
	if(BMP180_IRQ == 1){
 8006e4e:	4b34      	ldr	r3, [pc, #208]	@ (8006f20 <HAL_I2C_MemRxCpltCallback+0xc58>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d113      	bne.n	8006e7e <HAL_I2C_MemRxCpltCallback+0xbb6>
		temperature = BMP180_GET_temp_IT();
 8006e56:	f7f9 fc9b 	bl	8000790 <BMP180_GET_temp_IT>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	4b31      	ldr	r3, [pc, #196]	@ (8006f24 <HAL_I2C_MemRxCpltCallback+0xc5c>)
 8006e60:	601a      	str	r2, [r3, #0]
		temp = BMP180_GET_temp(temperature);
 8006e62:	4b30      	ldr	r3, [pc, #192]	@ (8006f24 <HAL_I2C_MemRxCpltCallback+0xc5c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7f9 fdb5 	bl	80009d8 <BMP180_GET_temp>
 8006e6e:	eef0 7a40 	vmov.f32	s15, s0
 8006e72:	4b2d      	ldr	r3, [pc, #180]	@ (8006f28 <HAL_I2C_MemRxCpltCallback+0xc60>)
 8006e74:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 8006e78:	4b29      	ldr	r3, [pc, #164]	@ (8006f20 <HAL_I2C_MemRxCpltCallback+0xc58>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	701a      	strb	r2, [r3, #0]
	}
	if(BMP180_IRQ == 2){
 8006e7e:	4b28      	ldr	r3, [pc, #160]	@ (8006f20 <HAL_I2C_MemRxCpltCallback+0xc58>)
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d113      	bne.n	8006eae <HAL_I2C_MemRxCpltCallback+0xbe6>
		pressure = BMP180_GET_pres_IT();
 8006e86:	f7f9 fc99 	bl	80007bc <BMP180_GET_pres_IT>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	4b27      	ldr	r3, [pc, #156]	@ (8006f2c <HAL_I2C_MemRxCpltCallback+0xc64>)
 8006e90:	601a      	str	r2, [r3, #0]
		pres = BMP180_GET_pres(pressure);
 8006e92:	4b26      	ldr	r3, [pc, #152]	@ (8006f2c <HAL_I2C_MemRxCpltCallback+0xc64>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7f9 fdf9 	bl	8000a90 <BMP180_GET_pres>
 8006e9e:	eef0 7a40 	vmov.f32	s15, s0
 8006ea2:	4b23      	ldr	r3, [pc, #140]	@ (8006f30 <HAL_I2C_MemRxCpltCallback+0xc68>)
 8006ea4:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 8006ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8006f20 <HAL_I2C_MemRxCpltCallback+0xc58>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	701a      	strb	r2, [r3, #0]
	}
}
 8006eae:	bf00      	nop
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	66666666 	.word	0x66666666
 8006ebc:	3fe66666 	.word	0x3fe66666
 8006ec0:	00000000 	.word	0x00000000
 8006ec4:	40c48200 	.word	0x40c48200
 8006ec8:	00000000 	.word	0x00000000
 8006ecc:	407f4000 	.word	0x407f4000
 8006ed0:	9999999a 	.word	0x9999999a
 8006ed4:	3fc99999 	.word	0x3fc99999
 8006ed8:	33333333 	.word	0x33333333
 8006edc:	3ff33333 	.word	0x3ff33333
 8006ee0:	aaaaaaab 	.word	0xaaaaaaab
 8006ee4:	3feaaaaa 	.word	0x3feaaaaa
 8006ee8:	00004178 	.word	0x00004178
 8006eec:	00000160 	.word	0x00000160
 8006ef0:	0000417a 	.word	0x0000417a
 8006ef4:	00004174 	.word	0x00004174
 8006ef8:	0000417c 	.word	0x0000417c
 8006efc:	00004176 	.word	0x00004176
 8006f00:	0000417e 	.word	0x0000417e
 8006f04:	00004180 	.word	0x00004180
 8006f08:	00004182 	.word	0x00004182
 8006f0c:	58021000 	.word	0x58021000
 8006f10:	000041bd 	.word	0x000041bd
 8006f14:	00000050 	.word	0x00000050
 8006f18:	00000048 	.word	0x00000048
 8006f1c:	0000004c 	.word	0x0000004c
 8006f20:	000041be 	.word	0x000041be
 8006f24:	000000a0 	.word	0x000000a0
 8006f28:	000000c4 	.word	0x000000c4
 8006f2c:	000000a4 	.word	0x000000a4
 8006f30:	000000c8 	.word	0x000000c8

08006f34 <convert_array_to_value>:


void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 8006f34:	b580      	push	{r7, lr}
 8006f36:	ed2d 8b04 	vpush	{d8-d9}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	4611      	mov	r1, r2
 8006f44:	461a      	mov	r2, r3
 8006f46:	460b      	mov	r3, r1
 8006f48:	71fb      	strb	r3, [r7, #7]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2200      	movs	r2, #0
 8006f52:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 8006f54:	79ba      	ldrb	r2, [r7, #6]
 8006f56:	79fb      	ldrb	r3, [r7, #7]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	e02e      	b.n	8006fc0 <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f68:	ee07 3a90 	vmov	s15, r3
 8006f6c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8006f70:	79fa      	ldrb	r2, [r7, #7]
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	4413      	add	r3, r2
 8006f76:	461a      	mov	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	ee07 3a90 	vmov	s15, r3
 8006f90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f94:	eeb0 1b47 	vmov.f64	d1, d7
 8006f98:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8006f9c:	f016 ff04 	bl	801dda8 <pow>
 8006fa0:	eeb0 7b40 	vmov.f64	d7, d0
 8006fa4:	ee29 7b07 	vmul.f64	d7, d9, d7
 8006fa8:	ee38 7b07 	vadd.f64	d7, d8, d7
 8006fac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006fb0:	ee17 3a90 	vmov	r3, s15
 8006fb4:	b21a      	sxth	r2, r3
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	dacc      	bge.n	8006f62 <convert_array_to_value+0x2e>
	}

}
 8006fc8:	bf00      	nop
 8006fca:	bf00      	nop
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	ecbd 8b04 	vpop	{d8-d9}
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8006fd6:	b590      	push	{r4, r7, lr}
 8006fd8:	b087      	sub	sp, #28
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6039      	str	r1, [r7, #0]
 8006fde:	4611      	mov	r1, r2
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	80fb      	strh	r3, [r7, #6]
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	717b      	strb	r3, [r7, #5]
 8006fea:	4613      	mov	r3, r2
 8006fec:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8006ff6:	793a      	ldrb	r2, [r7, #4]
 8006ff8:	797b      	ldrb	r3, [r7, #5]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 8006ffe:	2300      	movs	r3, #0
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	e03e      	b.n	8007082 <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 8007004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d028      	beq.n	800705e <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	4619      	mov	r1, r3
 8007014:	200a      	movs	r0, #10
 8007016:	f000 f83d 	bl	8007094 <potenga>
 800701a:	4603      	mov	r3, r0
 800701c:	b29b      	uxth	r3, r3
 800701e:	88fa      	ldrh	r2, [r7, #6]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	b29b      	uxth	r3, r3
 8007024:	80fb      	strh	r3, [r7, #6]
			x++;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	3301      	adds	r3, #1
 800702a:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 800702c:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	ee07 3a90 	vmov	s15, r3
 800703a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800703e:	eeb0 1b47 	vmov.f64	d1, d7
 8007042:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007046:	f016 feaf 	bl	801dda8 <pow>
 800704a:	eeb0 7b40 	vmov.f64	d7, d0
 800704e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007052:	ee17 3a90 	vmov	r3, s15
 8007056:	b29b      	uxth	r3, r3
 8007058:	429c      	cmp	r4, r3
 800705a:	dad3      	bge.n	8007004 <convert_value_to_array+0x2e>
 800705c:	e000      	b.n	8007060 <convert_value_to_array+0x8a>
				break;
 800705e:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 8007060:	797a      	ldrb	r2, [r7, #5]
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	4413      	add	r3, r2
 8007066:	461a      	mov	r2, r3
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	4413      	add	r3, r2
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	b2d2      	uxtb	r2, r2
 8007070:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	3301      	adds	r3, #1
 8007076:	613b      	str	r3, [r7, #16]
		x = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	3301      	adds	r3, #1
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	429a      	cmp	r2, r3
 8007088:	dad0      	bge.n	800702c <convert_value_to_array+0x56>
	}
}
 800708a:	bf00      	nop
 800708c:	bf00      	nop
 800708e:	371c      	adds	r7, #28
 8007090:	46bd      	mov	sp, r7
 8007092:	bd90      	pop	{r4, r7, pc}

08007094 <potenga>:
uint32_t potenga(int a, int b){
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <potenga+0x18>
		return 1;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e02d      	b.n	8007108 <potenga+0x74>
	}
	if(b == 1){
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <potenga+0x22>
		return a;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	e028      	b.n	8007108 <potenga+0x74>
	}
	if(b > 1){
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	dd10      	ble.n	80070de <potenga+0x4a>
			for(int i = 1; i < b; i++){
 80070bc:	2301      	movs	r3, #1
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	e007      	b.n	80070d2 <potenga+0x3e>
			a = a*c;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	fb02 f303 	mul.w	r3, r2, r3
 80070ca:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	3301      	adds	r3, #1
 80070d0:	617b      	str	r3, [r7, #20]
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	dbf3      	blt.n	80070c2 <potenga+0x2e>
		}
		return a;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	e014      	b.n	8007108 <potenga+0x74>
	}
	if(b < 0){
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	da10      	bge.n	8007106 <potenga+0x72>
		for(int i = 0; i < b; i++){
 80070e4:	2300      	movs	r3, #0
 80070e6:	613b      	str	r3, [r7, #16]
 80070e8:	e007      	b.n	80070fa <potenga+0x66>
			a = a/c;
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80070f2:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	3301      	adds	r3, #1
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	429a      	cmp	r2, r3
 8007100:	dbf3      	blt.n	80070ea <potenga+0x56>
		}
		return a;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	e000      	b.n	8007108 <potenga+0x74>
	}
	return a;
 8007106:	687b      	ldr	r3, [r7, #4]
}
 8007108:	4618      	mov	r0, r3
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <WartoscBezwgledna>:
void valswitch(uint8_t x){
	if(x == 2){
		x = 0;
	}
}
float WartoscBezwgledna(float a){
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(a < 0){
 800711e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800712a:	d504      	bpl.n	8007136 <WartoscBezwgledna+0x22>
		return a*(-1);
 800712c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007130:	eef1 7a67 	vneg.f32	s15, s15
 8007134:	e001      	b.n	800713a <WartoscBezwgledna+0x26>
	}
	else{
		return a;
 8007136:	edd7 7a01 	vldr	s15, [r7, #4]
	}
}
 800713a:	eeb0 0a67 	vmov.f32	s0, s15
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	4603      	mov	r3, r0
 8007150:	71fb      	strb	r3, [r7, #7]
 8007152:	460b      	mov	r3, r1
 8007154:	71bb      	strb	r3, [r7, #6]
 8007156:	4613      	mov	r3, r2
 8007158:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 800715a:	4b09      	ldr	r3, [pc, #36]	@ (8007180 <RGB_LED_Set_color+0x38>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	797a      	ldrb	r2, [r7, #5]
 8007160:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 8007162:	4b07      	ldr	r3, [pc, #28]	@ (8007180 <RGB_LED_Set_color+0x38>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	79fa      	ldrb	r2, [r7, #7]
 8007168:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 800716a:	4b05      	ldr	r3, [pc, #20]	@ (8007180 <RGB_LED_Set_color+0x38>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	79ba      	ldrb	r2, [r7, #6]
 8007170:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	24000380 	.word	0x24000380
 8007184:	00000000 	.word	0x00000000

08007188 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	4603      	mov	r3, r0
 8007190:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	ee07 3a90 	vmov	s15, r3
 8007198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80071a0:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80071f0 <RGB_LED_For_BAT+0x68>
 80071a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071a8:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80071f8 <RGB_LED_For_BAT+0x70>
 80071ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 80071b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80071b4:	edc7 7a00 	vstr	s15, [r7]
 80071b8:	783b      	ldrb	r3, [r7, #0]
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	79fa      	ldrb	r2, [r7, #7]
 80071be:	ee07 2a90 	vmov	s15, r2
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80071ca:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80071f0 <RGB_LED_For_BAT+0x68>
 80071ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80071d6:	edc7 7a00 	vstr	s15, [r7]
 80071da:	783a      	ldrb	r2, [r7, #0]
 80071dc:	b2d1      	uxtb	r1, r2
 80071de:	2200      	movs	r2, #0
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7ff ffb1 	bl	8007148 <RGB_LED_Set_color>
}
 80071e6:	bf00      	nop
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	66666666 	.word	0x66666666
 80071f4:	40046666 	.word	0x40046666
 80071f8:	00000000 	.word	0x00000000
 80071fc:	406fe000 	.word	0x406fe000

08007200 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007200:	b590      	push	{r4, r7, lr}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6039      	str	r1, [r7, #0]
 8007208:	4611      	mov	r1, r2
 800720a:	461a      	mov	r2, r3
 800720c:	4603      	mov	r3, r0
 800720e:	80fb      	strh	r3, [r7, #6]
 8007210:	460b      	mov	r3, r1
 8007212:	717b      	strb	r3, [r7, #5]
 8007214:	4613      	mov	r3, r2
 8007216:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8007218:	2300      	movs	r3, #0
 800721a:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 800721c:	2300      	movs	r3, #0
 800721e:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8007220:	793a      	ldrb	r2, [r7, #4]
 8007222:	797b      	ldrb	r3, [r7, #5]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 8007228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800722c:	2b00      	cmp	r3, #0
 800722e:	da04      	bge.n	800723a <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 8007230:	797b      	ldrb	r3, [r7, #5]
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	4413      	add	r3, r2
 8007236:	222d      	movs	r2, #45	@ 0x2d
 8007238:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 800723a:	2301      	movs	r3, #1
 800723c:	60fb      	str	r3, [r7, #12]
 800723e:	e035      	b.n	80072ac <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 8007240:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01d      	beq.n	8007284 <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	4619      	mov	r1, r3
 8007250:	200a      	movs	r0, #10
 8007252:	f7ff ff1f 	bl	8007094 <potenga>
 8007256:	4603      	mov	r3, r0
 8007258:	b29b      	uxth	r3, r3
 800725a:	88fa      	ldrh	r2, [r7, #6]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	b29b      	uxth	r3, r3
 8007260:	80fb      	strh	r3, [r7, #6]
			x++;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	3301      	adds	r3, #1
 8007266:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 8007268:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	4619      	mov	r1, r3
 8007274:	200a      	movs	r0, #10
 8007276:	f7ff ff0d 	bl	8007094 <potenga>
 800727a:	4603      	mov	r3, r0
 800727c:	b29b      	uxth	r3, r3
 800727e:	429c      	cmp	r4, r3
 8007280:	dade      	bge.n	8007240 <convert_value_to_array2+0x40>
 8007282:	e000      	b.n	8007286 <convert_value_to_array2+0x86>
				break;
 8007284:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	b2da      	uxtb	r2, r3
 800728a:	7979      	ldrb	r1, [r7, #5]
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	440b      	add	r3, r1
 8007290:	4619      	mov	r1, r3
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	440b      	add	r3, r1
 8007296:	3230      	adds	r2, #48	@ 0x30
 8007298:	b2d2      	uxtb	r2, r2
 800729a:	701a      	strb	r2, [r3, #0]
		loopnum++;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	3301      	adds	r3, #1
 80072a0:	613b      	str	r3, [r7, #16]
		x = 0;
 80072a2:	2300      	movs	r3, #0
 80072a4:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3301      	adds	r3, #1
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	dad9      	bge.n	8007268 <convert_value_to_array2+0x68>
	}
}
 80072b4:	bf00      	nop
 80072b6:	bf00      	nop
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd90      	pop	{r4, r7, pc}

080072be <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80072be:	b580      	push	{r7, lr}
 80072c0:	ed2d 8b02 	vpush	{d8}
 80072c4:	b08c      	sub	sp, #48	@ 0x30
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	ed87 0a03 	vstr	s0, [r7, #12]
 80072cc:	60b8      	str	r0, [r7, #8]
 80072ce:	460b      	mov	r3, r1
 80072d0:	71fb      	strb	r3, [r7, #7]
 80072d2:	4613      	mov	r3, r2
 80072d4:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 80072da:	2300      	movs	r3, #0
 80072dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 80072de:	79ba      	ldrb	r2, [r7, #6]
 80072e0:	79fb      	ldrb	r3, [r7, #7]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 80072ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80072ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f6:	d50a      	bpl.n	800730e <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 80072f8:	79fb      	ldrb	r3, [r7, #7]
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	4413      	add	r3, r2
 80072fe:	222d      	movs	r2, #45	@ 0x2d
 8007300:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 8007302:	edd7 7a03 	vldr	s15, [r7, #12]
 8007306:	eef1 7a67 	vneg.f32	s15, s15
 800730a:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 800730e:	2301      	movs	r3, #1
 8007310:	61fb      	str	r3, [r7, #28]
 8007312:	e021      	b.n	8007358 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007322:	eeb0 1b47 	vmov.f64	d1, d7
 8007326:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800732a:	f016 fd3d 	bl	801dda8 <pow>
 800732e:	eeb0 7b40 	vmov.f64	d7, d0
 8007332:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007336:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 800733a:	ed97 7a03 	vldr	s14, [r7, #12]
 800733e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007342:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800734a:	da0b      	bge.n	8007364 <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 800734c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734e:	3301      	adds	r3, #1
 8007350:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	3301      	adds	r3, #1
 8007356:	61fb      	str	r3, [r7, #28]
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	69fa      	ldr	r2, [r7, #28]
 800735e:	429a      	cmp	r2, r3
 8007360:	dbd8      	blt.n	8007314 <convert_value_to_array3+0x56>
 8007362:	e000      	b.n	8007366 <convert_value_to_array3+0xa8>
			break;
 8007364:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 8007370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007372:	2b00      	cmp	r3, #0
 8007374:	dc07      	bgt.n	8007386 <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	3301      	adds	r3, #1
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	4413      	add	r3, r2
 800737e:	222e      	movs	r2, #46	@ 0x2e
 8007380:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 8007382:	2301      	movs	r3, #1
 8007384:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	2b00      	cmp	r3, #0
 800738a:	dd0a      	ble.n	80073a2 <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 800738c:	79fa      	ldrb	r2, [r7, #7]
 800738e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007390:	4413      	add	r3, r2
 8007392:	3301      	adds	r3, #1
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	4413      	add	r3, r2
 8007398:	222e      	movs	r2, #46	@ 0x2e
 800739a:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	3301      	adds	r3, #1
 80073a0:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 80073a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80073a6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	1e5a      	subs	r2, r3, #1
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80073ba:	eeb0 1b47 	vmov.f64	d1, d7
 80073be:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80073c2:	f016 fcf1 	bl	801dda8 <pow>
 80073c6:	eeb0 7b40 	vmov.f64	d7, d0
 80073ca:	ee28 7b07 	vmul.f64	d7, d8, d7
 80073ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80073d2:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 80073d6:	2300      	movs	r3, #0
 80073d8:	61bb      	str	r3, [r7, #24]
 80073da:	e05f      	b.n	800749c <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 80073dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80073e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e8:	d93d      	bls.n	8007466 <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 80073ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80073ee:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	1e5a      	subs	r2, r3, #1
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007402:	eeb0 1b47 	vmov.f64	d1, d7
 8007406:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800740a:	f016 fccd 	bl	801dda8 <pow>
 800740e:	eeb0 7b40 	vmov.f64	d7, d0
 8007412:	ee38 7b47 	vsub.f64	d7, d8, d7
 8007416:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800741a:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 800741e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007420:	3301      	adds	r3, #1
 8007422:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	1e5a      	subs	r2, r3, #1
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	ee07 3a90 	vmov	s15, r3
 8007430:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007434:	eeb0 1b47 	vmov.f64	d1, d7
 8007438:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800743c:	f016 fcb4 	bl	801dda8 <pow>
 8007440:	eeb0 7b40 	vmov.f64	d7, d0
 8007444:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007448:	ee17 3a90 	vmov	r3, s15
 800744c:	b29b      	uxth	r3, r3
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007456:	ed97 7a03 	vldr	s14, [r7, #12]
 800745a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800745e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007462:	dabb      	bge.n	80073dc <convert_value_to_array3+0x11e>
 8007464:	e000      	b.n	8007468 <convert_value_to_array3+0x1aa>
				break;
 8007466:	bf00      	nop
		}

        if(loopnum == kropka){
 8007468:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	429a      	cmp	r2, r3
 800746e:	d102      	bne.n	8007476 <convert_value_to_array3+0x1b8>
            loopnum++;
 8007470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007472:	3301      	adds	r3, #1
 8007474:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 8007476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007478:	b2da      	uxtb	r2, r3
 800747a:	79f9      	ldrb	r1, [r7, #7]
 800747c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747e:	440b      	add	r3, r1
 8007480:	4619      	mov	r1, r3
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	440b      	add	r3, r1
 8007486:	3230      	adds	r2, #48	@ 0x30
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	701a      	strb	r2, [r3, #0]
		loopnum++;
 800748c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748e:	3301      	adds	r3, #1
 8007490:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	3301      	adds	r3, #1
 800749a:	61bb      	str	r3, [r7, #24]
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	3b02      	subs	r3, #2
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	dbbe      	blt.n	8007424 <convert_value_to_array3+0x166>
	}
}
 80074a6:	bf00      	nop
 80074a8:	bf00      	nop
 80074aa:	3730      	adds	r7, #48	@ 0x30
 80074ac:	46bd      	mov	sp, r7
 80074ae:	ecbd 8b02 	vpop	{d8}
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 80074bc:	4ba6      	ldr	r3, [pc, #664]	@ (8007758 <uSD_Card_SendData_To_Buffer+0x2a4>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	b218      	sxth	r0, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	01db      	lsls	r3, r3, #7
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	01db      	lsls	r3, r3, #7
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	3308      	adds	r3, #8
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	49a1      	ldr	r1, [pc, #644]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80074d8:	f7ff fe92 	bl	8007200 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	01db      	lsls	r3, r3, #7
 80074e0:	3308      	adds	r3, #8
 80074e2:	4a9e      	ldr	r2, [pc, #632]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80074e4:	2120      	movs	r1, #32
 80074e6:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(SPEED1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 80074e8:	4b9d      	ldr	r3, [pc, #628]	@ (8007760 <uSD_Card_SendData_To_Buffer+0x2ac>)
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	b218      	sxth	r0, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	01db      	lsls	r3, r3, #7
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	3309      	adds	r3, #9
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	01db      	lsls	r3, r3, #7
 8007500:	b2db      	uxtb	r3, r3
 8007502:	330f      	adds	r3, #15
 8007504:	b2db      	uxtb	r3, r3
 8007506:	4995      	ldr	r1, [pc, #596]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007508:	f7ff fe7a 	bl	8007200 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	01db      	lsls	r3, r3, #7
 8007510:	330f      	adds	r3, #15
 8007512:	4a92      	ldr	r2, [pc, #584]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007514:	2120      	movs	r1, #32
 8007516:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 8007518:	4b92      	ldr	r3, [pc, #584]	@ (8007764 <uSD_Card_SendData_To_Buffer+0x2b0>)
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	b218      	sxth	r0, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	b2db      	uxtb	r3, r3
 8007522:	01db      	lsls	r3, r3, #7
 8007524:	b2db      	uxtb	r3, r3
 8007526:	3310      	adds	r3, #16
 8007528:	b2da      	uxtb	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	01db      	lsls	r3, r3, #7
 8007530:	b2db      	uxtb	r3, r3
 8007532:	3316      	adds	r3, #22
 8007534:	b2db      	uxtb	r3, r3
 8007536:	4989      	ldr	r1, [pc, #548]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007538:	f7ff fe62 	bl	8007200 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	01db      	lsls	r3, r3, #7
 8007540:	3316      	adds	r3, #22
 8007542:	4a86      	ldr	r2, [pc, #536]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007544:	2120      	movs	r1, #32
 8007546:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 8007548:	4b87      	ldr	r3, [pc, #540]	@ (8007768 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	b218      	sxth	r0, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	b2db      	uxtb	r3, r3
 8007552:	01db      	lsls	r3, r3, #7
 8007554:	b2db      	uxtb	r3, r3
 8007556:	3317      	adds	r3, #23
 8007558:	b2da      	uxtb	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	b2db      	uxtb	r3, r3
 800755e:	01db      	lsls	r3, r3, #7
 8007560:	b2db      	uxtb	r3, r3
 8007562:	331d      	adds	r3, #29
 8007564:	b2db      	uxtb	r3, r3
 8007566:	497d      	ldr	r1, [pc, #500]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007568:	f7ff fe4a 	bl	8007200 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	01db      	lsls	r3, r3, #7
 8007570:	331d      	adds	r3, #29
 8007572:	4a7a      	ldr	r2, [pc, #488]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007574:	2120      	movs	r1, #32
 8007576:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 8007578:	4b7c      	ldr	r3, [pc, #496]	@ (800776c <uSD_Card_SendData_To_Buffer+0x2b8>)
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	b218      	sxth	r0, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	01db      	lsls	r3, r3, #7
 8007584:	b2db      	uxtb	r3, r3
 8007586:	331e      	adds	r3, #30
 8007588:	b2da      	uxtb	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	b2db      	uxtb	r3, r3
 800758e:	01db      	lsls	r3, r3, #7
 8007590:	b2db      	uxtb	r3, r3
 8007592:	3324      	adds	r3, #36	@ 0x24
 8007594:	b2db      	uxtb	r3, r3
 8007596:	4971      	ldr	r1, [pc, #452]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007598:	f7ff fe32 	bl	8007200 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	01db      	lsls	r3, r3, #7
 80075a0:	3324      	adds	r3, #36	@ 0x24
 80075a2:	4a6e      	ldr	r2, [pc, #440]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075a4:	2120      	movs	r1, #32
 80075a6:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(wanted_rool, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 80075a8:	4b71      	ldr	r3, [pc, #452]	@ (8007770 <uSD_Card_SendData_To_Buffer+0x2bc>)
 80075aa:	edd3 7a00 	vldr	s15, [r3]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	01db      	lsls	r3, r3, #7
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	3325      	adds	r3, #37	@ 0x25
 80075b8:	b2d9      	uxtb	r1, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	01db      	lsls	r3, r3, #7
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	332d      	adds	r3, #45	@ 0x2d
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	461a      	mov	r2, r3
 80075c8:	4864      	ldr	r0, [pc, #400]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075ca:	eeb0 0a67 	vmov.f32	s0, s15
 80075ce:	f7ff fe76 	bl	80072be <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	01db      	lsls	r3, r3, #7
 80075d6:	332d      	adds	r3, #45	@ 0x2d
 80075d8:	4a60      	ldr	r2, [pc, #384]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80075da:	2120      	movs	r1, #32
 80075dc:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_pitch, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 80075de:	4b65      	ldr	r3, [pc, #404]	@ (8007774 <uSD_Card_SendData_To_Buffer+0x2c0>)
 80075e0:	edd3 7a00 	vldr	s15, [r3]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	01db      	lsls	r3, r3, #7
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	332e      	adds	r3, #46	@ 0x2e
 80075ee:	b2d9      	uxtb	r1, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	01db      	lsls	r3, r3, #7
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	3336      	adds	r3, #54	@ 0x36
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	461a      	mov	r2, r3
 80075fe:	4857      	ldr	r0, [pc, #348]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007600:	eeb0 0a67 	vmov.f32	s0, s15
 8007604:	f7ff fe5b 	bl	80072be <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	01db      	lsls	r3, r3, #7
 800760c:	3336      	adds	r3, #54	@ 0x36
 800760e:	4a53      	ldr	r2, [pc, #332]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007610:	2120      	movs	r1, #32
 8007612:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_yaw, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 8007614:	4b58      	ldr	r3, [pc, #352]	@ (8007778 <uSD_Card_SendData_To_Buffer+0x2c4>)
 8007616:	edd3 7a00 	vldr	s15, [r3]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	b2db      	uxtb	r3, r3
 800761e:	01db      	lsls	r3, r3, #7
 8007620:	b2db      	uxtb	r3, r3
 8007622:	3337      	adds	r3, #55	@ 0x37
 8007624:	b2d9      	uxtb	r1, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	b2db      	uxtb	r3, r3
 800762a:	01db      	lsls	r3, r3, #7
 800762c:	b2db      	uxtb	r3, r3
 800762e:	333f      	adds	r3, #63	@ 0x3f
 8007630:	b2db      	uxtb	r3, r3
 8007632:	461a      	mov	r2, r3
 8007634:	4849      	ldr	r0, [pc, #292]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007636:	eeb0 0a67 	vmov.f32	s0, s15
 800763a:	f7ff fe40 	bl	80072be <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	01db      	lsls	r3, r3, #7
 8007642:	333f      	adds	r3, #63	@ 0x3f
 8007644:	4a45      	ldr	r2, [pc, #276]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007646:	2120      	movs	r1, #32
 8007648:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(error_sum_pitch, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 800764a:	4b4c      	ldr	r3, [pc, #304]	@ (800777c <uSD_Card_SendData_To_Buffer+0x2c8>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	b218      	sxth	r0, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	b2db      	uxtb	r3, r3
 8007654:	01db      	lsls	r3, r3, #7
 8007656:	b2db      	uxtb	r3, r3
 8007658:	3340      	adds	r3, #64	@ 0x40
 800765a:	b2da      	uxtb	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	b2db      	uxtb	r3, r3
 8007660:	01db      	lsls	r3, r3, #7
 8007662:	b2db      	uxtb	r3, r3
 8007664:	3348      	adds	r3, #72	@ 0x48
 8007666:	b2db      	uxtb	r3, r3
 8007668:	493c      	ldr	r1, [pc, #240]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 800766a:	f7ff fdc9 	bl	8007200 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	01db      	lsls	r3, r3, #7
 8007672:	3348      	adds	r3, #72	@ 0x48
 8007674:	4a39      	ldr	r2, [pc, #228]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007676:	2120      	movs	r1, #32
 8007678:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_rool, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 800767a:	4b41      	ldr	r3, [pc, #260]	@ (8007780 <uSD_Card_SendData_To_Buffer+0x2cc>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	b218      	sxth	r0, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	b2db      	uxtb	r3, r3
 8007684:	01db      	lsls	r3, r3, #7
 8007686:	b2db      	uxtb	r3, r3
 8007688:	3349      	adds	r3, #73	@ 0x49
 800768a:	b2da      	uxtb	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	b2db      	uxtb	r3, r3
 8007690:	01db      	lsls	r3, r3, #7
 8007692:	b2db      	uxtb	r3, r3
 8007694:	3351      	adds	r3, #81	@ 0x51
 8007696:	b2db      	uxtb	r3, r3
 8007698:	4930      	ldr	r1, [pc, #192]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 800769a:	f7ff fdb1 	bl	8007200 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	01db      	lsls	r3, r3, #7
 80076a2:	3351      	adds	r3, #81	@ 0x51
 80076a4:	4a2d      	ldr	r2, [pc, #180]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80076a6:	2120      	movs	r1, #32
 80076a8:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_yaw, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 80076aa:	4b36      	ldr	r3, [pc, #216]	@ (8007784 <uSD_Card_SendData_To_Buffer+0x2d0>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	b218      	sxth	r0, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	01db      	lsls	r3, r3, #7
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	3352      	adds	r3, #82	@ 0x52
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	01db      	lsls	r3, r3, #7
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	335a      	adds	r3, #90	@ 0x5a
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	4924      	ldr	r1, [pc, #144]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80076ca:	f7ff fd99 	bl	8007200 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	01db      	lsls	r3, r3, #7
 80076d2:	335a      	adds	r3, #90	@ 0x5a
 80076d4:	4a21      	ldr	r2, [pc, #132]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80076d6:	2120      	movs	r1, #32
 80076d8:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 80076da:	4b2b      	ldr	r3, [pc, #172]	@ (8007788 <uSD_Card_SendData_To_Buffer+0x2d4>)
 80076dc:	edd3 7a00 	vldr	s15, [r3]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	01db      	lsls	r3, r3, #7
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	335b      	adds	r3, #91	@ 0x5b
 80076ea:	b2d9      	uxtb	r1, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	01db      	lsls	r3, r3, #7
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	3362      	adds	r3, #98	@ 0x62
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	4818      	ldr	r0, [pc, #96]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80076fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007700:	f7ff fddd 	bl	80072be <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	01db      	lsls	r3, r3, #7
 8007708:	3362      	adds	r3, #98	@ 0x62
 800770a:	4a14      	ldr	r2, [pc, #80]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 800770c:	2120      	movs	r1, #32
 800770e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 8007710:	4b1d      	ldr	r3, [pc, #116]	@ (8007788 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007712:	edd3 7a01 	vldr	s15, [r3, #4]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	b2db      	uxtb	r3, r3
 800771a:	01db      	lsls	r3, r3, #7
 800771c:	b2db      	uxtb	r3, r3
 800771e:	3363      	adds	r3, #99	@ 0x63
 8007720:	b2d9      	uxtb	r1, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	b2db      	uxtb	r3, r3
 8007726:	01db      	lsls	r3, r3, #7
 8007728:	b2db      	uxtb	r3, r3
 800772a:	336a      	adds	r3, #106	@ 0x6a
 800772c:	b2db      	uxtb	r3, r3
 800772e:	461a      	mov	r2, r3
 8007730:	480a      	ldr	r0, [pc, #40]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007732:	eeb0 0a67 	vmov.f32	s0, s15
 8007736:	f7ff fdc2 	bl	80072be <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	01db      	lsls	r3, r3, #7
 800773e:	336a      	adds	r3, #106	@ 0x6a
 8007740:	4a06      	ldr	r2, [pc, #24]	@ (800775c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007742:	2120      	movs	r1, #32
 8007744:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 8007746:	4b10      	ldr	r3, [pc, #64]	@ (8007788 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007748:	edd3 7a02 	vldr	s15, [r3, #8]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	01db      	lsls	r3, r3, #7
 8007752:	b2db      	uxtb	r3, r3
 8007754:	336b      	adds	r3, #107	@ 0x6b
 8007756:	e019      	b.n	800778c <uSD_Card_SendData_To_Buffer+0x2d8>
 8007758:	000041ac 	.word	0x000041ac
 800775c:	24002f48 	.word	0x24002f48
 8007760:	00004174 	.word	0x00004174
 8007764:	00004176 	.word	0x00004176
 8007768:	00004178 	.word	0x00004178
 800776c:	0000417a 	.word	0x0000417a
 8007770:	00004054 	.word	0x00004054
 8007774:	00004050 	.word	0x00004050
 8007778:	00004058 	.word	0x00004058
 800777c:	00004084 	.word	0x00004084
 8007780:	00004088 	.word	0x00004088
 8007784:	0000408c 	.word	0x0000408c
 8007788:	00000064 	.word	0x00000064
 800778c:	b2d9      	uxtb	r1, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	b2db      	uxtb	r3, r3
 8007792:	01db      	lsls	r3, r3, #7
 8007794:	b2db      	uxtb	r3, r3
 8007796:	3372      	adds	r3, #114	@ 0x72
 8007798:	b2db      	uxtb	r3, r3
 800779a:	461a      	mov	r2, r3
 800779c:	482d      	ldr	r0, [pc, #180]	@ (8007854 <uSD_Card_SendData_To_Buffer+0x3a0>)
 800779e:	eeb0 0a67 	vmov.f32	s0, s15
 80077a2:	f7ff fd8c 	bl	80072be <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	01db      	lsls	r3, r3, #7
 80077aa:	3372      	adds	r3, #114	@ 0x72
 80077ac:	4a29      	ldr	r2, [pc, #164]	@ (8007854 <uSD_Card_SendData_To_Buffer+0x3a0>)
 80077ae:	2120      	movs	r1, #32
 80077b0:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 80077b2:	4b29      	ldr	r3, [pc, #164]	@ (8007858 <uSD_Card_SendData_To_Buffer+0x3a4>)
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	b218      	sxth	r0, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	01db      	lsls	r3, r3, #7
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	3373      	adds	r3, #115	@ 0x73
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	01db      	lsls	r3, r3, #7
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	3377      	adds	r3, #119	@ 0x77
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	4920      	ldr	r1, [pc, #128]	@ (8007854 <uSD_Card_SendData_To_Buffer+0x3a0>)
 80077d2:	f7ff fd15 	bl	8007200 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	01db      	lsls	r3, r3, #7
 80077da:	3377      	adds	r3, #119	@ 0x77
 80077dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007854 <uSD_Card_SendData_To_Buffer+0x3a0>)
 80077de:	2120      	movs	r1, #32
 80077e0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.dron_status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 80077e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007858 <uSD_Card_SendData_To_Buffer+0x3a4>)
 80077e4:	8a5b      	ldrh	r3, [r3, #18]
 80077e6:	b218      	sxth	r0, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	01db      	lsls	r3, r3, #7
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	3378      	adds	r3, #120	@ 0x78
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	01db      	lsls	r3, r3, #7
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	337a      	adds	r3, #122	@ 0x7a
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	4914      	ldr	r1, [pc, #80]	@ (8007854 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007802:	f7ff fcfd 	bl	8007200 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	01db      	lsls	r3, r3, #7
 800780a:	337a      	adds	r3, #122	@ 0x7a
 800780c:	4a11      	ldr	r2, [pc, #68]	@ (8007854 <uSD_Card_SendData_To_Buffer+0x3a0>)
 800780e:	2120      	movs	r1, #32
 8007810:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(Mag_Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 8007812:	4b12      	ldr	r3, [pc, #72]	@ (800785c <uSD_Card_SendData_To_Buffer+0x3a8>)
 8007814:	edd3 7a00 	vldr	s15, [r3]
 8007818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800781c:	ee17 3a90 	vmov	r3, s15
 8007820:	b218      	sxth	r0, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	01db      	lsls	r3, r3, #7
 8007828:	b2db      	uxtb	r3, r3
 800782a:	337b      	adds	r3, #123	@ 0x7b
 800782c:	b2da      	uxtb	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	01db      	lsls	r3, r3, #7
 8007834:	b2db      	uxtb	r3, r3
 8007836:	337f      	adds	r3, #127	@ 0x7f
 8007838:	b2db      	uxtb	r3, r3
 800783a:	4906      	ldr	r1, [pc, #24]	@ (8007854 <uSD_Card_SendData_To_Buffer+0x3a0>)
 800783c:	f7ff fce0 	bl	8007200 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3301      	adds	r3, #1
 8007844:	01db      	lsls	r3, r3, #7
 8007846:	4a03      	ldr	r2, [pc, #12]	@ (8007854 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007848:	210a      	movs	r1, #10
 800784a:	54d1      	strb	r1, [r2, r3]
}
 800784c:	bf00      	nop
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	24002f48 	.word	0x24002f48
 8007858:	00000160 	.word	0x00000160
 800785c:	00000048 	.word	0x00000048

08007860 <Stack_Push>:

void Stack_Push(float data){
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 800786a:	4b22      	ldr	r3, [pc, #136]	@ (80078f4 <Stack_Push+0x94>)
 800786c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007870:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007874:	3301      	adds	r3, #1
 8007876:	b29a      	uxth	r2, r3
 8007878:	4b1e      	ldr	r3, [pc, #120]	@ (80078f4 <Stack_Push+0x94>)
 800787a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800787e:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 8007882:	4b1c      	ldr	r3, [pc, #112]	@ (80078f4 <Stack_Push+0x94>)
 8007884:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007888:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 800788c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007890:	d105      	bne.n	800789e <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 8007892:	4b18      	ldr	r3, [pc, #96]	@ (80078f4 <Stack_Push+0x94>)
 8007894:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007898:	2200      	movs	r2, #0
 800789a:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 800789e:	4b15      	ldr	r3, [pc, #84]	@ (80078f4 <Stack_Push+0x94>)
 80078a0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80078a4:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 80078a8:	4a12      	ldr	r2, [pc, #72]	@ (80078f4 <Stack_Push+0x94>)
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 80078b2:	4b10      	ldr	r3, [pc, #64]	@ (80078f4 <Stack_Push+0x94>)
 80078b4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80078b8:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 80078bc:	3301      	adds	r3, #1
 80078be:	b29a      	uxth	r2, r3
 80078c0:	4b0c      	ldr	r3, [pc, #48]	@ (80078f4 <Stack_Push+0x94>)
 80078c2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80078c6:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 80078ca:	4b0a      	ldr	r3, [pc, #40]	@ (80078f4 <Stack_Push+0x94>)
 80078cc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80078d0:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 80078d4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80078d8:	d105      	bne.n	80078e6 <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 80078da:	4b06      	ldr	r3, [pc, #24]	@ (80078f4 <Stack_Push+0x94>)
 80078dc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80078e0:	2200      	movs	r2, #0
 80078e2:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 80078e6:	bf00      	nop
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	00000184 	.word	0x00000184

080078f8 <ROOL_MAX_VAL>:

int16_t ROOL_MAX_VAL(void){
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 2;
 80078fc:	4b05      	ldr	r3, [pc, #20]	@ (8007914 <ROOL_MAX_VAL+0x1c>)
 80078fe:	2202      	movs	r2, #2
 8007900:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return 5000;
 8007904:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007908:	4618      	mov	r0, r3
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	00000160 	.word	0x00000160

08007918 <ROOL_MIN_VAL>:
int16_t ROOL_MIN_VAL(void){
 8007918:	b480      	push	{r7}
 800791a:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 1;
 800791c:	4b04      	ldr	r3, [pc, #16]	@ (8007930 <ROOL_MIN_VAL+0x18>)
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return -5000;
 8007924:	4b03      	ldr	r3, [pc, #12]	@ (8007934 <ROOL_MIN_VAL+0x1c>)
}
 8007926:	4618      	mov	r0, r3
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	00000160 	.word	0x00000160
 8007934:	ffffec78 	.word	0xffffec78

08007938 <PITCH_MAX_VAL>:
int16_t PITCH_MAX_VAL(void){
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 2;
 800793c:	4b05      	ldr	r3, [pc, #20]	@ (8007954 <PITCH_MAX_VAL+0x1c>)
 800793e:	2202      	movs	r2, #2
 8007940:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return 5000;
 8007944:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007948:	4618      	mov	r0, r3
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	00000160 	.word	0x00000160

08007958 <PITCH_MIN_VAL>:
int16_t PITCH_MIN_VAL(void){
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 1;
 800795c:	4b04      	ldr	r3, [pc, #16]	@ (8007970 <PITCH_MIN_VAL+0x18>)
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return -5000;
 8007964:	4b03      	ldr	r3, [pc, #12]	@ (8007974 <PITCH_MIN_VAL+0x1c>)
}
 8007966:	4618      	mov	r0, r3
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	00000160 	.word	0x00000160
 8007974:	ffffec78 	.word	0xffffec78

08007978 <YAW_MAX_VAL>:
int16_t YAW_MAX_VAL(void){
 8007978:	b480      	push	{r7}
 800797a:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 2;
 800797c:	4b05      	ldr	r3, [pc, #20]	@ (8007994 <YAW_MAX_VAL+0x1c>)
 800797e:	2202      	movs	r2, #2
 8007980:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return 5000;
 8007984:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007988:	4618      	mov	r0, r3
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	00000160 	.word	0x00000160

08007998 <YAW_MIN_VAL>:
int16_t YAW_MIN_VAL(void){
 8007998:	b480      	push	{r7}
 800799a:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 1;
 800799c:	4b04      	ldr	r3, [pc, #16]	@ (80079b0 <YAW_MIN_VAL+0x18>)
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return -5000;
 80079a4:	4b03      	ldr	r3, [pc, #12]	@ (80079b4 <YAW_MIN_VAL+0x1c>)
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	00000160 	.word	0x00000160
 80079b4:	ffffec78 	.word	0xffffec78

080079b8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80079be:	463b      	mov	r3, r7
 80079c0:	2200      	movs	r2, #0
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	605a      	str	r2, [r3, #4]
 80079c6:	609a      	str	r2, [r3, #8]
 80079c8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80079ca:	f003 fc5f 	bl	800b28c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80079ce:	2301      	movs	r3, #1
 80079d0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80079d2:	2300      	movs	r3, #0
 80079d4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80079d6:	2300      	movs	r3, #0
 80079d8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80079da:	231f      	movs	r3, #31
 80079dc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80079de:	2387      	movs	r3, #135	@ 0x87
 80079e0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80079e6:	2300      	movs	r3, #0
 80079e8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80079ea:	2301      	movs	r3, #1
 80079ec:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80079ee:	2301      	movs	r3, #1
 80079f0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80079f2:	2300      	movs	r3, #0
 80079f4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80079f6:	2300      	movs	r3, #0
 80079f8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80079fa:	463b      	mov	r3, r7
 80079fc:	4618      	mov	r0, r3
 80079fe:	f003 fc7d 	bl	800b2fc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007a02:	2004      	movs	r0, #4
 8007a04:	f003 fc5a 	bl	800b2bc <HAL_MPU_Enable>

}
 8007a08:	bf00      	nop
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a10:	b480      	push	{r7}
 8007a12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007a14:	b672      	cpsid	i
}
 8007a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007a18:	bf00      	nop
 8007a1a:	e7fd      	b.n	8007a18 <Error_Handler+0x8>

08007a1c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi6;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007a20:	4b27      	ldr	r3, [pc, #156]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a22:	4a28      	ldr	r2, [pc, #160]	@ (8007ac4 <MX_SPI2_Init+0xa8>)
 8007a24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007a26:	4b26      	ldr	r3, [pc, #152]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a28:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007a2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007a2e:	4b24      	ldr	r3, [pc, #144]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007a34:	4b22      	ldr	r3, [pc, #136]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a36:	2207      	movs	r2, #7
 8007a38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a3a:	4b21      	ldr	r3, [pc, #132]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007a40:	4b1f      	ldr	r3, [pc, #124]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007a46:	4b1e      	ldr	r3, [pc, #120]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a48:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007a4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007a54:	4b1a      	ldr	r3, [pc, #104]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007a5a:	4b19      	ldr	r3, [pc, #100]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a60:	4b17      	ldr	r3, [pc, #92]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007a66:	4b16      	ldr	r3, [pc, #88]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007a6c:	4b14      	ldr	r3, [pc, #80]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007a72:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007a74:	4b12      	ldr	r3, [pc, #72]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007a7a:	4b11      	ldr	r3, [pc, #68]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007a80:	4b0f      	ldr	r3, [pc, #60]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007a86:	4b0e      	ldr	r3, [pc, #56]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007a92:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007a98:	4b09      	ldr	r3, [pc, #36]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007a9e:	4b08      	ldr	r3, [pc, #32]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007aa4:	4b06      	ldr	r3, [pc, #24]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007aaa:	4805      	ldr	r0, [pc, #20]	@ (8007ac0 <MX_SPI2_Init+0xa4>)
 8007aac:	f00c fcb0 	bl	8014410 <HAL_SPI_Init>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8007ab6:	f7ff ffab 	bl	8007a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007aba:	bf00      	nop
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	240001ec 	.word	0x240001ec
 8007ac4:	40003800 	.word	0x40003800

08007ac8 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8007acc:	4b27      	ldr	r3, [pc, #156]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007ace:	4a28      	ldr	r2, [pc, #160]	@ (8007b70 <MX_SPI6_Init+0xa8>)
 8007ad0:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8007ad2:	4b26      	ldr	r3, [pc, #152]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007ad4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007ad8:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8007ada:	4b24      	ldr	r3, [pc, #144]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8007ae0:	4b22      	ldr	r3, [pc, #136]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007ae2:	2207      	movs	r2, #7
 8007ae4:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ae6:	4b21      	ldr	r3, [pc, #132]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007aec:	4b1f      	ldr	r3, [pc, #124]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8007af2:	4b1e      	ldr	r3, [pc, #120]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007af4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007af8:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007afa:	4b1c      	ldr	r3, [pc, #112]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007b00:	4b1a      	ldr	r3, [pc, #104]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8007b06:	4b19      	ldr	r3, [pc, #100]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b0c:	4b17      	ldr	r3, [pc, #92]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8007b12:	4b16      	ldr	r3, [pc, #88]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007b18:	4b14      	ldr	r3, [pc, #80]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007b1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007b1e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007b20:	4b12      	ldr	r3, [pc, #72]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007b26:	4b11      	ldr	r3, [pc, #68]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007b32:	4b0e      	ldr	r3, [pc, #56]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007b38:	4b0c      	ldr	r3, [pc, #48]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007b44:	4b09      	ldr	r3, [pc, #36]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007b4a:	4b08      	ldr	r3, [pc, #32]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007b50:	4b06      	ldr	r3, [pc, #24]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8007b56:	4805      	ldr	r0, [pc, #20]	@ (8007b6c <MX_SPI6_Init+0xa4>)
 8007b58:	f00c fc5a 	bl	8014410 <HAL_SPI_Init>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8007b62:	f7ff ff55 	bl	8007a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8007b66:	bf00      	nop
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	24000274 	.word	0x24000274
 8007b70:	58001400 	.word	0x58001400

08007b74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b0ba      	sub	sp, #232	@ 0xe8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b7c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	605a      	str	r2, [r3, #4]
 8007b86:	609a      	str	r2, [r3, #8]
 8007b88:	60da      	str	r2, [r3, #12]
 8007b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007b8c:	f107 0318 	add.w	r3, r7, #24
 8007b90:	22b8      	movs	r2, #184	@ 0xb8
 8007b92:	2100      	movs	r1, #0
 8007b94:	4618      	mov	r0, r3
 8007b96:	f016 f87d 	bl	801dc94 <memset>
  if(spiHandle->Instance==SPI2)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a77      	ldr	r2, [pc, #476]	@ (8007d7c <HAL_SPI_MspInit+0x208>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	f040 8089 	bne.w	8007cb8 <HAL_SPI_MspInit+0x144>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007ba6:	4b76      	ldr	r3, [pc, #472]	@ (8007d80 <HAL_SPI_MspInit+0x20c>)
 8007ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007bac:	4a74      	ldr	r2, [pc, #464]	@ (8007d80 <HAL_SPI_MspInit+0x20c>)
 8007bae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007bb2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007bb6:	4b72      	ldr	r3, [pc, #456]	@ (8007d80 <HAL_SPI_MspInit+0x20c>)
 8007bb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bc0:	617b      	str	r3, [r7, #20]
 8007bc2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bc4:	4b6e      	ldr	r3, [pc, #440]	@ (8007d80 <HAL_SPI_MspInit+0x20c>)
 8007bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bca:	4a6d      	ldr	r2, [pc, #436]	@ (8007d80 <HAL_SPI_MspInit+0x20c>)
 8007bcc:	f043 0302 	orr.w	r3, r3, #2
 8007bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8007d80 <HAL_SPI_MspInit+0x20c>)
 8007bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	613b      	str	r3, [r7, #16]
 8007be0:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007be2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007be6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bea:	2302      	movs	r3, #2
 8007bec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007bfc:	2305      	movs	r3, #5
 8007bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c02:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007c06:	4619      	mov	r1, r3
 8007c08:	485e      	ldr	r0, [pc, #376]	@ (8007d84 <HAL_SPI_MspInit+0x210>)
 8007c0a:	f006 fa09 	bl	800e020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007c0e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8007c12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c16:	2302      	movs	r3, #2
 8007c18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007c22:	2301      	movs	r3, #1
 8007c24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007c28:	2305      	movs	r3, #5
 8007c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c2e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007c32:	4619      	mov	r1, r3
 8007c34:	4853      	ldr	r0, [pc, #332]	@ (8007d84 <HAL_SPI_MspInit+0x210>)
 8007c36:	f006 f9f3 	bl	800e020 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream0;
 8007c3a:	4b53      	ldr	r3, [pc, #332]	@ (8007d88 <HAL_SPI_MspInit+0x214>)
 8007c3c:	4a53      	ldr	r2, [pc, #332]	@ (8007d8c <HAL_SPI_MspInit+0x218>)
 8007c3e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8007c40:	4b51      	ldr	r3, [pc, #324]	@ (8007d88 <HAL_SPI_MspInit+0x214>)
 8007c42:	2228      	movs	r2, #40	@ 0x28
 8007c44:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007c46:	4b50      	ldr	r3, [pc, #320]	@ (8007d88 <HAL_SPI_MspInit+0x214>)
 8007c48:	2240      	movs	r2, #64	@ 0x40
 8007c4a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c4c:	4b4e      	ldr	r3, [pc, #312]	@ (8007d88 <HAL_SPI_MspInit+0x214>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007c52:	4b4d      	ldr	r3, [pc, #308]	@ (8007d88 <HAL_SPI_MspInit+0x214>)
 8007c54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007c58:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c5a:	4b4b      	ldr	r3, [pc, #300]	@ (8007d88 <HAL_SPI_MspInit+0x214>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c60:	4b49      	ldr	r3, [pc, #292]	@ (8007d88 <HAL_SPI_MspInit+0x214>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8007c66:	4b48      	ldr	r3, [pc, #288]	@ (8007d88 <HAL_SPI_MspInit+0x214>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007c6c:	4b46      	ldr	r3, [pc, #280]	@ (8007d88 <HAL_SPI_MspInit+0x214>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007c72:	4b45      	ldr	r3, [pc, #276]	@ (8007d88 <HAL_SPI_MspInit+0x214>)
 8007c74:	2204      	movs	r2, #4
 8007c76:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007c78:	4b43      	ldr	r3, [pc, #268]	@ (8007d88 <HAL_SPI_MspInit+0x214>)
 8007c7a:	2203      	movs	r2, #3
 8007c7c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8007c7e:	4b42      	ldr	r3, [pc, #264]	@ (8007d88 <HAL_SPI_MspInit+0x214>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007c84:	4b40      	ldr	r3, [pc, #256]	@ (8007d88 <HAL_SPI_MspInit+0x214>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8007c8a:	483f      	ldr	r0, [pc, #252]	@ (8007d88 <HAL_SPI_MspInit+0x214>)
 8007c8c:	f003 fb76 	bl	800b37c <HAL_DMA_Init>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8007c96:	f7ff febb 	bl	8007a10 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a3a      	ldr	r2, [pc, #232]	@ (8007d88 <HAL_SPI_MspInit+0x214>)
 8007c9e:	679a      	str	r2, [r3, #120]	@ 0x78
 8007ca0:	4a39      	ldr	r2, [pc, #228]	@ (8007d88 <HAL_SPI_MspInit+0x214>)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2100      	movs	r1, #0
 8007caa:	2024      	movs	r0, #36	@ 0x24
 8007cac:	f003 fab9 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007cb0:	2024      	movs	r0, #36	@ 0x24
 8007cb2:	f003 fad0 	bl	800b256 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8007cb6:	e05c      	b.n	8007d72 <HAL_SPI_MspInit+0x1fe>
  else if(spiHandle->Instance==SPI6)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a34      	ldr	r2, [pc, #208]	@ (8007d90 <HAL_SPI_MspInit+0x21c>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d157      	bne.n	8007d72 <HAL_SPI_MspInit+0x1fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8007cc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007cc6:	f04f 0300 	mov.w	r3, #0
 8007cca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8007cce:	2318      	movs	r3, #24
 8007cd0:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 8007cd2:	23c8      	movs	r3, #200	@ 0xc8
 8007cd4:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 1;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8007cda:	230a      	movs	r3, #10
 8007cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8007cde:	2302      	movs	r3, #2
 8007ce0:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8007ce6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cea:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8007cec:	2300      	movs	r3, #0
 8007cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL3;
 8007cf0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8007cf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007cf8:	f107 0318 	add.w	r3, r7, #24
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f009 ffa1 	bl	8011c44 <HAL_RCCEx_PeriphCLKConfig>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <HAL_SPI_MspInit+0x198>
      Error_Handler();
 8007d08:	f7ff fe82 	bl	8007a10 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8007d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8007d80 <HAL_SPI_MspInit+0x20c>)
 8007d0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d12:	4a1b      	ldr	r2, [pc, #108]	@ (8007d80 <HAL_SPI_MspInit+0x20c>)
 8007d14:	f043 0320 	orr.w	r3, r3, #32
 8007d18:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007d1c:	4b18      	ldr	r3, [pc, #96]	@ (8007d80 <HAL_SPI_MspInit+0x20c>)
 8007d1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	60fb      	str	r3, [r7, #12]
 8007d28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d2a:	4b15      	ldr	r3, [pc, #84]	@ (8007d80 <HAL_SPI_MspInit+0x20c>)
 8007d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d30:	4a13      	ldr	r2, [pc, #76]	@ (8007d80 <HAL_SPI_MspInit+0x20c>)
 8007d32:	f043 0302 	orr.w	r3, r3, #2
 8007d36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d3a:	4b11      	ldr	r3, [pc, #68]	@ (8007d80 <HAL_SPI_MspInit+0x20c>)
 8007d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	60bb      	str	r3, [r7, #8]
 8007d46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8007d48:	2338      	movs	r3, #56	@ 0x38
 8007d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d4e:	2302      	movs	r3, #2
 8007d50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d54:	2300      	movs	r3, #0
 8007d56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8007d60:	2308      	movs	r3, #8
 8007d62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d66:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4805      	ldr	r0, [pc, #20]	@ (8007d84 <HAL_SPI_MspInit+0x210>)
 8007d6e:	f006 f957 	bl	800e020 <HAL_GPIO_Init>
}
 8007d72:	bf00      	nop
 8007d74:	37e8      	adds	r7, #232	@ 0xe8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	40003800 	.word	0x40003800
 8007d80:	58024400 	.word	0x58024400
 8007d84:	58020400 	.word	0x58020400
 8007d88:	240002fc 	.word	0x240002fc
 8007d8c:	40020010 	.word	0x40020010
 8007d90:	58001400 	.word	0x58001400

08007d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc4 <HAL_MspInit+0x30>)
 8007d9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007da0:	4a08      	ldr	r2, [pc, #32]	@ (8007dc4 <HAL_MspInit+0x30>)
 8007da2:	f043 0302 	orr.w	r3, r3, #2
 8007da6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007daa:	4b06      	ldr	r3, [pc, #24]	@ (8007dc4 <HAL_MspInit+0x30>)
 8007dac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007db0:	f003 0302 	and.w	r3, r3, #2
 8007db4:	607b      	str	r3, [r7, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	58024400 	.word	0x58024400

08007dc8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 8007dc8:	b480      	push	{r7}
 8007dca:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8007dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8007dfc <SDTimer_Handler+0x34>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d004      	beq.n	8007dde <SDTimer_Handler+0x16>
    Timer1--;
 8007dd4:	4b09      	ldr	r3, [pc, #36]	@ (8007dfc <SDTimer_Handler+0x34>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	4a08      	ldr	r2, [pc, #32]	@ (8007dfc <SDTimer_Handler+0x34>)
 8007ddc:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 8007dde:	4b08      	ldr	r3, [pc, #32]	@ (8007e00 <SDTimer_Handler+0x38>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <SDTimer_Handler+0x28>
    Timer2--;
 8007de6:	4b06      	ldr	r3, [pc, #24]	@ (8007e00 <SDTimer_Handler+0x38>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3b01      	subs	r3, #1
 8007dec:	4a04      	ldr	r2, [pc, #16]	@ (8007e00 <SDTimer_Handler+0x38>)
 8007dee:	6013      	str	r3, [r2, #0]
}
 8007df0:	bf00      	nop
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	24000378 	.word	0x24000378
 8007e00:	2400037c 	.word	0x2400037c
 8007e04:	00000000 	.word	0x00000000

08007e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e14:	48bc      	ldr	r0, [pc, #752]	@ (8008108 <NMI_Handler+0x300>)
 8007e16:	f006 fac3 	bl	800e3a0 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007e20:	48ba      	ldr	r0, [pc, #744]	@ (800810c <NMI_Handler+0x304>)
 8007e22:	f006 fabd 	bl	800e3a0 <HAL_GPIO_WritePin>
	LED_R_1;
 8007e26:	2201      	movs	r2, #1
 8007e28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007e2c:	48b7      	ldr	r0, [pc, #732]	@ (800810c <NMI_Handler+0x304>)
 8007e2e:	f006 fab7 	bl	800e3a0 <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 8007e32:	48b7      	ldr	r0, [pc, #732]	@ (8008110 <NMI_Handler+0x308>)
 8007e34:	f015 fd36 	bl	801d8a4 <f_close>

	wanted_rool = 0;
 8007e38:	4bb6      	ldr	r3, [pc, #728]	@ (8008114 <NMI_Handler+0x30c>)
 8007e3a:	f04f 0200 	mov.w	r2, #0
 8007e3e:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8007e40:	4bb5      	ldr	r3, [pc, #724]	@ (8008118 <NMI_Handler+0x310>)
 8007e42:	f04f 0200 	mov.w	r2, #0
 8007e46:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8007e48:	4bb4      	ldr	r3, [pc, #720]	@ (800811c <NMI_Handler+0x314>)
 8007e4a:	f04f 0200 	mov.w	r2, #0
 8007e4e:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8007e50:	4bb3      	ldr	r3, [pc, #716]	@ (8008120 <NMI_Handler+0x318>)
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	b21a      	sxth	r2, r3
 8007e56:	4bb3      	ldr	r3, [pc, #716]	@ (8008124 <NMI_Handler+0x31c>)
 8007e58:	801a      	strh	r2, [r3, #0]
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   	HAL_Delay(1);
 8007e5a:	2001      	movs	r0, #1
 8007e5c:	f001 f942 	bl	80090e4 <HAL_Delay>
		MPU6050_GET_ACCANDGYR_CALANDSCL(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 8007e60:	4bb1      	ldr	r3, [pc, #708]	@ (8008128 <NMI_Handler+0x320>)
 8007e62:	edd3 7a00 	vldr	s15, [r3]
 8007e66:	4bb1      	ldr	r3, [pc, #708]	@ (800812c <NMI_Handler+0x324>)
 8007e68:	ed93 7a00 	vldr	s14, [r3]
 8007e6c:	4bb0      	ldr	r3, [pc, #704]	@ (8008130 <NMI_Handler+0x328>)
 8007e6e:	edd3 6a00 	vldr	s13, [r3]
 8007e72:	4bb0      	ldr	r3, [pc, #704]	@ (8008134 <NMI_Handler+0x32c>)
 8007e74:	ed93 6a00 	vldr	s12, [r3]
 8007e78:	4baf      	ldr	r3, [pc, #700]	@ (8008138 <NMI_Handler+0x330>)
 8007e7a:	edd3 5a00 	vldr	s11, [r3]
 8007e7e:	4baf      	ldr	r3, [pc, #700]	@ (800813c <NMI_Handler+0x334>)
 8007e80:	ed93 5a00 	vldr	s10, [r3]
 8007e84:	4bae      	ldr	r3, [pc, #696]	@ (8008140 <NMI_Handler+0x338>)
 8007e86:	edd3 4a00 	vldr	s9, [r3]
 8007e8a:	4bae      	ldr	r3, [pc, #696]	@ (8008144 <NMI_Handler+0x33c>)
 8007e8c:	ed93 4a00 	vldr	s8, [r3]
 8007e90:	4bad      	ldr	r3, [pc, #692]	@ (8008148 <NMI_Handler+0x340>)
 8007e92:	9301      	str	r3, [sp, #4]
 8007e94:	4bad      	ldr	r3, [pc, #692]	@ (800814c <NMI_Handler+0x344>)
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	eef0 3a44 	vmov.f32	s7, s8
 8007e9c:	eeb0 3a64 	vmov.f32	s6, s9
 8007ea0:	eef0 2a45 	vmov.f32	s5, s10
 8007ea4:	eeb0 2a65 	vmov.f32	s4, s11
 8007ea8:	eef0 1a46 	vmov.f32	s3, s12
 8007eac:	eeb0 1a66 	vmov.f32	s2, s13
 8007eb0:	eef0 0a47 	vmov.f32	s1, s14
 8007eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8007eb8:	4ba5      	ldr	r3, [pc, #660]	@ (8008150 <NMI_Handler+0x348>)
 8007eba:	4aa6      	ldr	r2, [pc, #664]	@ (8008154 <NMI_Handler+0x34c>)
 8007ebc:	49a6      	ldr	r1, [pc, #664]	@ (8008158 <NMI_Handler+0x350>)
 8007ebe:	48a7      	ldr	r0, [pc, #668]	@ (800815c <NMI_Handler+0x354>)
 8007ec0:	f7f9 fb90 	bl	80015e4 <MPU6050_GET_ACCANDGYR_CALANDSCL>
		MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 8007ec4:	4ba5      	ldr	r3, [pc, #660]	@ (800815c <NMI_Handler+0x354>)
 8007ec6:	edd3 7a00 	vldr	s15, [r3]
 8007eca:	4ba3      	ldr	r3, [pc, #652]	@ (8008158 <NMI_Handler+0x350>)
 8007ecc:	ed93 7a00 	vldr	s14, [r3]
 8007ed0:	4ba0      	ldr	r3, [pc, #640]	@ (8008154 <NMI_Handler+0x34c>)
 8007ed2:	edd3 6a00 	vldr	s13, [r3]
 8007ed6:	49a2      	ldr	r1, [pc, #648]	@ (8008160 <NMI_Handler+0x358>)
 8007ed8:	48a2      	ldr	r0, [pc, #648]	@ (8008164 <NMI_Handler+0x35c>)
 8007eda:	eeb0 1a66 	vmov.f32	s2, s13
 8007ede:	eef0 0a47 	vmov.f32	s1, s14
 8007ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8007ee6:	f7f9 faff 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
		MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 8007eea:	4b9e      	ldr	r3, [pc, #632]	@ (8008164 <NMI_Handler+0x35c>)
 8007eec:	edd3 7a00 	vldr	s15, [r3]
 8007ef0:	4b9b      	ldr	r3, [pc, #620]	@ (8008160 <NMI_Handler+0x358>)
 8007ef2:	ed93 7a00 	vldr	s14, [r3]
 8007ef6:	4b9c      	ldr	r3, [pc, #624]	@ (8008168 <NMI_Handler+0x360>)
 8007ef8:	edd3 6a00 	vldr	s13, [r3]
 8007efc:	4b94      	ldr	r3, [pc, #592]	@ (8008150 <NMI_Handler+0x348>)
 8007efe:	ed93 6a00 	vldr	s12, [r3]
 8007f02:	4b92      	ldr	r3, [pc, #584]	@ (800814c <NMI_Handler+0x344>)
 8007f04:	edd3 5a00 	vldr	s11, [r3]
 8007f08:	4b8f      	ldr	r3, [pc, #572]	@ (8008148 <NMI_Handler+0x340>)
 8007f0a:	ed93 5a00 	vldr	s10, [r3]
 8007f0e:	eef0 2a45 	vmov.f32	s5, s10
 8007f12:	eeb0 2a65 	vmov.f32	s4, s11
 8007f16:	eef0 1a46 	vmov.f32	s3, s12
 8007f1a:	eeb0 1a66 	vmov.f32	s2, s13
 8007f1e:	eef0 0a47 	vmov.f32	s1, s14
 8007f22:	eeb0 0a67 	vmov.f32	s0, s15
 8007f26:	4891      	ldr	r0, [pc, #580]	@ (800816c <NMI_Handler+0x364>)
 8007f28:	f7f9 fcd6 	bl	80018d8 <MPU6050_GET_ACCANDGYR_FILTRED>


		now_pitch = data.x;
 8007f2c:	4b8f      	ldr	r3, [pc, #572]	@ (800816c <NMI_Handler+0x364>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a8f      	ldr	r2, [pc, #572]	@ (8008170 <NMI_Handler+0x368>)
 8007f32:	6013      	str	r3, [r2, #0]
		now_rool = data.y;
 8007f34:	4b8d      	ldr	r3, [pc, #564]	@ (800816c <NMI_Handler+0x364>)
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	4a8e      	ldr	r2, [pc, #568]	@ (8008174 <NMI_Handler+0x36c>)
 8007f3a:	6013      	str	r3, [r2, #0]
		now_yaw = data.z;
 8007f3c:	4b8b      	ldr	r3, [pc, #556]	@ (800816c <NMI_Handler+0x364>)
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	4a8d      	ldr	r2, [pc, #564]	@ (8008178 <NMI_Handler+0x370>)
 8007f42:	6013      	str	r3, [r2, #0]


		last_wanted_rool_rx = wanted_rool;
 8007f44:	4b73      	ldr	r3, [pc, #460]	@ (8008114 <NMI_Handler+0x30c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a8c      	ldr	r2, [pc, #560]	@ (800817c <NMI_Handler+0x374>)
 8007f4a:	6013      	str	r3, [r2, #0]
		last_wanted_pitch_rx = wanted_pitch;
 8007f4c:	4b72      	ldr	r3, [pc, #456]	@ (8008118 <NMI_Handler+0x310>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a8b      	ldr	r2, [pc, #556]	@ (8008180 <NMI_Handler+0x378>)
 8007f52:	6013      	str	r3, [r2, #0]
		last_wanted_yaw_rx = wanted_yaw;
 8007f54:	4b71      	ldr	r3, [pc, #452]	@ (800811c <NMI_Handler+0x314>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a8a      	ldr	r2, [pc, #552]	@ (8008184 <NMI_Handler+0x37c>)
 8007f5a:	6013      	str	r3, [r2, #0]


		error_sum_pitch = error_sum_pitch + (wanted_pitch - now_pitch);
 8007f5c:	4b8a      	ldr	r3, [pc, #552]	@ (8008188 <NMI_Handler+0x380>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	ee07 3a90 	vmov	s15, r3
 8007f64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007f68:	4b6b      	ldr	r3, [pc, #428]	@ (8008118 <NMI_Handler+0x310>)
 8007f6a:	edd3 6a00 	vldr	s13, [r3]
 8007f6e:	4b80      	ldr	r3, [pc, #512]	@ (8008170 <NMI_Handler+0x368>)
 8007f70:	edd3 7a00 	vldr	s15, [r3]
 8007f74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f80:	ee17 2a90 	vmov	r2, s15
 8007f84:	4b80      	ldr	r3, [pc, #512]	@ (8008188 <NMI_Handler+0x380>)
 8007f86:	601a      	str	r2, [r3, #0]
		error_sum_rool = error_sum_rool + (wanted_rool - now_rool);
 8007f88:	4b80      	ldr	r3, [pc, #512]	@ (800818c <NMI_Handler+0x384>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	ee07 3a90 	vmov	s15, r3
 8007f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007f94:	4b5f      	ldr	r3, [pc, #380]	@ (8008114 <NMI_Handler+0x30c>)
 8007f96:	edd3 6a00 	vldr	s13, [r3]
 8007f9a:	4b76      	ldr	r3, [pc, #472]	@ (8008174 <NMI_Handler+0x36c>)
 8007f9c:	edd3 7a00 	vldr	s15, [r3]
 8007fa0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fac:	ee17 2a90 	vmov	r2, s15
 8007fb0:	4b76      	ldr	r3, [pc, #472]	@ (800818c <NMI_Handler+0x384>)
 8007fb2:	601a      	str	r2, [r3, #0]
		error_sum_yaw = error_sum_yaw + (wanted_yaw - now_yaw);
 8007fb4:	4b76      	ldr	r3, [pc, #472]	@ (8008190 <NMI_Handler+0x388>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	ee07 3a90 	vmov	s15, r3
 8007fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007fc0:	4b56      	ldr	r3, [pc, #344]	@ (800811c <NMI_Handler+0x314>)
 8007fc2:	edd3 6a00 	vldr	s13, [r3]
 8007fc6:	4b6c      	ldr	r3, [pc, #432]	@ (8008178 <NMI_Handler+0x370>)
 8007fc8:	edd3 7a00 	vldr	s15, [r3]
 8007fcc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fd8:	ee17 2a90 	vmov	r2, s15
 8007fdc:	4b6c      	ldr	r3, [pc, #432]	@ (8008190 <NMI_Handler+0x388>)
 8007fde:	601a      	str	r2, [r3, #0]

		error_sum_angular_rate_pitch = error_sum_angular_rate_pitch + (pid_pitch - gx);
 8007fe0:	4b6c      	ldr	r3, [pc, #432]	@ (8008194 <NMI_Handler+0x38c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	ee07 3a90 	vmov	s15, r3
 8007fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007fec:	4b6a      	ldr	r3, [pc, #424]	@ (8008198 <NMI_Handler+0x390>)
 8007fee:	edd3 6a00 	vldr	s13, [r3]
 8007ff2:	4b57      	ldr	r3, [pc, #348]	@ (8008150 <NMI_Handler+0x348>)
 8007ff4:	edd3 7a00 	vldr	s15, [r3]
 8007ff8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008004:	ee17 2a90 	vmov	r2, s15
 8008008:	4b62      	ldr	r3, [pc, #392]	@ (8008194 <NMI_Handler+0x38c>)
 800800a:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_rool = error_sum_angular_rate_rool + (pid_rool - gy);
 800800c:	4b63      	ldr	r3, [pc, #396]	@ (800819c <NMI_Handler+0x394>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	ee07 3a90 	vmov	s15, r3
 8008014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008018:	4b61      	ldr	r3, [pc, #388]	@ (80081a0 <NMI_Handler+0x398>)
 800801a:	edd3 6a00 	vldr	s13, [r3]
 800801e:	4b4b      	ldr	r3, [pc, #300]	@ (800814c <NMI_Handler+0x344>)
 8008020:	edd3 7a00 	vldr	s15, [r3]
 8008024:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800802c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008030:	ee17 2a90 	vmov	r2, s15
 8008034:	4b59      	ldr	r3, [pc, #356]	@ (800819c <NMI_Handler+0x394>)
 8008036:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_yaw = error_sum_angular_rate_yaw + (pid_yaw - gz);
 8008038:	4b5a      	ldr	r3, [pc, #360]	@ (80081a4 <NMI_Handler+0x39c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	ee07 3a90 	vmov	s15, r3
 8008040:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008044:	4b58      	ldr	r3, [pc, #352]	@ (80081a8 <NMI_Handler+0x3a0>)
 8008046:	edd3 6a00 	vldr	s13, [r3]
 800804a:	4b3f      	ldr	r3, [pc, #252]	@ (8008148 <NMI_Handler+0x340>)
 800804c:	edd3 7a00 	vldr	s15, [r3]
 8008050:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008058:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800805c:	ee17 2a90 	vmov	r2, s15
 8008060:	4b50      	ldr	r3, [pc, #320]	@ (80081a4 <NMI_Handler+0x39c>)
 8008062:	601a      	str	r2, [r3, #0]


		PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8008064:	2201      	movs	r2, #1
 8008066:	4951      	ldr	r1, [pc, #324]	@ (80081ac <NMI_Handler+0x3a4>)
 8008068:	484b      	ldr	r0, [pc, #300]	@ (8008198 <NMI_Handler+0x390>)
 800806a:	f7fb fceb 	bl	8003a44 <PID_cal>
		PID_cal(&pid_rool, PID_FAC_Rool, 2);
 800806e:	2202      	movs	r2, #2
 8008070:	494f      	ldr	r1, [pc, #316]	@ (80081b0 <NMI_Handler+0x3a8>)
 8008072:	484b      	ldr	r0, [pc, #300]	@ (80081a0 <NMI_Handler+0x398>)
 8008074:	f7fb fce6 	bl	8003a44 <PID_cal>

		PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8008078:	2204      	movs	r2, #4
 800807a:	494e      	ldr	r1, [pc, #312]	@ (80081b4 <NMI_Handler+0x3ac>)
 800807c:	484e      	ldr	r0, [pc, #312]	@ (80081b8 <NMI_Handler+0x3b0>)
 800807e:	f7fb fce1 	bl	8003a44 <PID_cal>
		PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 8008082:	2205      	movs	r2, #5
 8008084:	494d      	ldr	r1, [pc, #308]	@ (80081bc <NMI_Handler+0x3b4>)
 8008086:	484e      	ldr	r0, [pc, #312]	@ (80081c0 <NMI_Handler+0x3b8>)
 8008088:	f7fb fcdc 	bl	8003a44 <PID_cal>
		PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 800808c:	2206      	movs	r2, #6
 800808e:	494d      	ldr	r1, [pc, #308]	@ (80081c4 <NMI_Handler+0x3bc>)
 8008090:	484d      	ldr	r0, [pc, #308]	@ (80081c8 <NMI_Handler+0x3c0>)
 8008092:	f7fb fcd7 	bl	8003a44 <PID_cal>


		old_error_pitch = wanted_pitch - now_pitch;
 8008096:	4b20      	ldr	r3, [pc, #128]	@ (8008118 <NMI_Handler+0x310>)
 8008098:	ed93 7a00 	vldr	s14, [r3]
 800809c:	4b34      	ldr	r3, [pc, #208]	@ (8008170 <NMI_Handler+0x368>)
 800809e:	edd3 7a00 	vldr	s15, [r3]
 80080a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080a6:	4b49      	ldr	r3, [pc, #292]	@ (80081cc <NMI_Handler+0x3c4>)
 80080a8:	edc3 7a00 	vstr	s15, [r3]
		old_error_rool = wanted_rool - now_rool;
 80080ac:	4b19      	ldr	r3, [pc, #100]	@ (8008114 <NMI_Handler+0x30c>)
 80080ae:	ed93 7a00 	vldr	s14, [r3]
 80080b2:	4b30      	ldr	r3, [pc, #192]	@ (8008174 <NMI_Handler+0x36c>)
 80080b4:	edd3 7a00 	vldr	s15, [r3]
 80080b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080bc:	4b44      	ldr	r3, [pc, #272]	@ (80081d0 <NMI_Handler+0x3c8>)
 80080be:	edc3 7a00 	vstr	s15, [r3]

		old_error_angular_rate_pitch = pid_pitch - gx;
 80080c2:	4b35      	ldr	r3, [pc, #212]	@ (8008198 <NMI_Handler+0x390>)
 80080c4:	ed93 7a00 	vldr	s14, [r3]
 80080c8:	4b21      	ldr	r3, [pc, #132]	@ (8008150 <NMI_Handler+0x348>)
 80080ca:	edd3 7a00 	vldr	s15, [r3]
 80080ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080d2:	4b40      	ldr	r3, [pc, #256]	@ (80081d4 <NMI_Handler+0x3cc>)
 80080d4:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_rool = pid_rool - gy;
 80080d8:	4b31      	ldr	r3, [pc, #196]	@ (80081a0 <NMI_Handler+0x398>)
 80080da:	ed93 7a00 	vldr	s14, [r3]
 80080de:	4b1b      	ldr	r3, [pc, #108]	@ (800814c <NMI_Handler+0x344>)
 80080e0:	edd3 7a00 	vldr	s15, [r3]
 80080e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080e8:	4b3b      	ldr	r3, [pc, #236]	@ (80081d8 <NMI_Handler+0x3d0>)
 80080ea:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_yaw = wanted_yaw - gz;
 80080ee:	4b0b      	ldr	r3, [pc, #44]	@ (800811c <NMI_Handler+0x314>)
 80080f0:	ed93 7a00 	vldr	s14, [r3]
 80080f4:	4b14      	ldr	r3, [pc, #80]	@ (8008148 <NMI_Handler+0x340>)
 80080f6:	edd3 7a00 	vldr	s15, [r3]
 80080fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080fe:	4b37      	ldr	r3, [pc, #220]	@ (80081dc <NMI_Handler+0x3d4>)
 8008100:	edc3 7a00 	vstr	s15, [r3]
 8008104:	e06c      	b.n	80081e0 <NMI_Handler+0x3d8>
 8008106:	bf00      	nop
 8008108:	58021000 	.word	0x58021000
 800810c:	58020400 	.word	0x58020400
 8008110:	24001f10 	.word	0x24001f10
 8008114:	00004054 	.word	0x00004054
 8008118:	00004050 	.word	0x00004050
 800811c:	00004058 	.word	0x00004058
 8008120:	0801e758 	.word	0x0801e758
 8008124:	00004044 	.word	0x00004044
 8008128:	00000030 	.word	0x00000030
 800812c:	00000034 	.word	0x00000034
 8008130:	00000038 	.word	0x00000038
 8008134:	0000003c 	.word	0x0000003c
 8008138:	00000040 	.word	0x00000040
 800813c:	00000044 	.word	0x00000044
 8008140:	0801e74c 	.word	0x0801e74c
 8008144:	0801e750 	.word	0x0801e750
 8008148:	00000014 	.word	0x00000014
 800814c:	00000010 	.word	0x00000010
 8008150:	0000000c 	.word	0x0000000c
 8008154:	00000008 	.word	0x00000008
 8008158:	00000004 	.word	0x00000004
 800815c:	00000000 	.word	0x00000000
 8008160:	0000001c 	.word	0x0000001c
 8008164:	00000018 	.word	0x00000018
 8008168:	00000048 	.word	0x00000048
 800816c:	00000064 	.word	0x00000064
 8008170:	00004060 	.word	0x00004060
 8008174:	00004064 	.word	0x00004064
 8008178:	00004068 	.word	0x00004068
 800817c:	0000403c 	.word	0x0000403c
 8008180:	00004038 	.word	0x00004038
 8008184:	00004040 	.word	0x00004040
 8008188:	00004084 	.word	0x00004084
 800818c:	00004088 	.word	0x00004088
 8008190:	0000408c 	.word	0x0000408c
 8008194:	00004090 	.word	0x00004090
 8008198:	0000409c 	.word	0x0000409c
 800819c:	00004094 	.word	0x00004094
 80081a0:	000040a4 	.word	0x000040a4
 80081a4:	00004098 	.word	0x00004098
 80081a8:	000040a0 	.word	0x000040a0
 80081ac:	000040d8 	.word	0x000040d8
 80081b0:	000040ec 	.word	0x000040ec
 80081b4:	00004138 	.word	0x00004138
 80081b8:	000040a8 	.word	0x000040a8
 80081bc:	0000414c 	.word	0x0000414c
 80081c0:	000040b0 	.word	0x000040b0
 80081c4:	00004160 	.word	0x00004160
 80081c8:	000040ac 	.word	0x000040ac
 80081cc:	0000406c 	.word	0x0000406c
 80081d0:	00004070 	.word	0x00004070
 80081d4:	00004078 	.word	0x00004078
 80081d8:	0000407c 	.word	0x0000407c
 80081dc:	00004080 	.word	0x00004080


		MYDRON.ROOL = pid_angular_rate_rool;
 80081e0:	4b99      	ldr	r3, [pc, #612]	@ (8008448 <NMI_Handler+0x640>)
 80081e2:	edd3 7a00 	vldr	s15, [r3]
 80081e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081ea:	ee17 3a90 	vmov	r3, s15
 80081ee:	b21a      	sxth	r2, r3
 80081f0:	4b96      	ldr	r3, [pc, #600]	@ (800844c <NMI_Handler+0x644>)
 80081f2:	80da      	strh	r2, [r3, #6]
		MYDRON.PITCH = pid_angular_rate_pitch;
 80081f4:	4b96      	ldr	r3, [pc, #600]	@ (8008450 <NMI_Handler+0x648>)
 80081f6:	edd3 7a00 	vldr	s15, [r3]
 80081fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081fe:	ee17 3a90 	vmov	r3, s15
 8008202:	b21a      	sxth	r2, r3
 8008204:	4b91      	ldr	r3, [pc, #580]	@ (800844c <NMI_Handler+0x644>)
 8008206:	809a      	strh	r2, [r3, #4]
		MYDRON.YAW = pid_angular_rate_yaw;
 8008208:	4b92      	ldr	r3, [pc, #584]	@ (8008454 <NMI_Handler+0x64c>)
 800820a:	edd3 7a00 	vldr	s15, [r3]
 800820e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008212:	ee17 3a90 	vmov	r3, s15
 8008216:	b21a      	sxth	r2, r3
 8008218:	4b8c      	ldr	r3, [pc, #560]	@ (800844c <NMI_Handler+0x644>)
 800821a:	811a      	strh	r2, [r3, #8]



		Thrust_filter(1);
 800821c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8008220:	f7fb fada 	bl	80037d8 <Thrust_filter>
		if(MYDRON.THRUST > thrust_limit){
 8008224:	4b89      	ldr	r3, [pc, #548]	@ (800844c <NMI_Handler+0x644>)
 8008226:	885b      	ldrh	r3, [r3, #2]
 8008228:	461a      	mov	r2, r3
 800822a:	4b8b      	ldr	r3, [pc, #556]	@ (8008458 <NMI_Handler+0x650>)
 800822c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008230:	429a      	cmp	r2, r3
 8008232:	dd05      	ble.n	8008240 <NMI_Handler+0x438>
			MYDRON.THRUST = thrust_limit;
 8008234:	4b88      	ldr	r3, [pc, #544]	@ (8008458 <NMI_Handler+0x650>)
 8008236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800823a:	b29a      	uxth	r2, r3
 800823c:	4b83      	ldr	r3, [pc, #524]	@ (800844c <NMI_Handler+0x644>)
 800823e:	805a      	strh	r2, [r3, #2]
		}


		SPEED1 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//trust 7000 max
 8008240:	4b82      	ldr	r3, [pc, #520]	@ (800844c <NMI_Handler+0x644>)
 8008242:	885b      	ldrh	r3, [r3, #2]
 8008244:	ee07 3a90 	vmov	s15, r3
 8008248:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800824c:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8008430 <NMI_Handler+0x628>
 8008250:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008254:	4b7d      	ldr	r3, [pc, #500]	@ (800844c <NMI_Handler+0x644>)
 8008256:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800825a:	ee07 3a90 	vmov	s15, r3
 800825e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008262:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008266:	4b79      	ldr	r3, [pc, #484]	@ (800844c <NMI_Handler+0x644>)
 8008268:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800826c:	ee07 3a90 	vmov	s15, r3
 8008270:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008274:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008278:	4b74      	ldr	r3, [pc, #464]	@ (800844c <NMI_Handler+0x644>)
 800827a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800827e:	ee07 3a90 	vmov	s15, r3
 8008282:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008286:	ee36 7b07 	vadd.f64	d7, d6, d7
 800828a:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008438 <NMI_Handler+0x630>
 800828e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008292:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008440 <NMI_Handler+0x638>
 8008296:	ee37 7b06 	vadd.f64	d7, d7, d6
 800829a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800829e:	ee17 3a90 	vmov	r3, s15
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	4b6d      	ldr	r3, [pc, #436]	@ (800845c <NMI_Handler+0x654>)
 80082a6:	801a      	strh	r2, [r3, #0]
		SPEED2 = (MYDRON.THRUST*0.7)- MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 80082a8:	4b68      	ldr	r3, [pc, #416]	@ (800844c <NMI_Handler+0x644>)
 80082aa:	885b      	ldrh	r3, [r3, #2]
 80082ac:	ee07 3a90 	vmov	s15, r3
 80082b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80082b4:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8008430 <NMI_Handler+0x628>
 80082b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80082bc:	4b63      	ldr	r3, [pc, #396]	@ (800844c <NMI_Handler+0x644>)
 80082be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80082c2:	ee07 3a90 	vmov	s15, r3
 80082c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80082ca:	ee36 6b47 	vsub.f64	d6, d6, d7
 80082ce:	4b5f      	ldr	r3, [pc, #380]	@ (800844c <NMI_Handler+0x644>)
 80082d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80082d4:	ee07 3a90 	vmov	s15, r3
 80082d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80082dc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80082e0:	4b5a      	ldr	r3, [pc, #360]	@ (800844c <NMI_Handler+0x644>)
 80082e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80082e6:	ee07 3a90 	vmov	s15, r3
 80082ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80082ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80082f2:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008438 <NMI_Handler+0x630>
 80082f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80082fa:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008440 <NMI_Handler+0x638>
 80082fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008302:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008306:	ee17 3a90 	vmov	r3, s15
 800830a:	b29a      	uxth	r2, r3
 800830c:	4b54      	ldr	r3, [pc, #336]	@ (8008460 <NMI_Handler+0x658>)
 800830e:	801a      	strh	r2, [r3, #0]
		SPEED3 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8008310:	4b4e      	ldr	r3, [pc, #312]	@ (800844c <NMI_Handler+0x644>)
 8008312:	885b      	ldrh	r3, [r3, #2]
 8008314:	ee07 3a90 	vmov	s15, r3
 8008318:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800831c:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8008430 <NMI_Handler+0x628>
 8008320:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008324:	4b49      	ldr	r3, [pc, #292]	@ (800844c <NMI_Handler+0x644>)
 8008326:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800832a:	ee07 3a90 	vmov	s15, r3
 800832e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008332:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008336:	4b45      	ldr	r3, [pc, #276]	@ (800844c <NMI_Handler+0x644>)
 8008338:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800833c:	ee07 3a90 	vmov	s15, r3
 8008340:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008344:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008348:	4b40      	ldr	r3, [pc, #256]	@ (800844c <NMI_Handler+0x644>)
 800834a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008356:	ee36 7b47 	vsub.f64	d7, d6, d7
 800835a:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008438 <NMI_Handler+0x630>
 800835e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008362:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008440 <NMI_Handler+0x638>
 8008366:	ee37 7b06 	vadd.f64	d7, d7, d6
 800836a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800836e:	ee17 3a90 	vmov	r3, s15
 8008372:	b29a      	uxth	r2, r3
 8008374:	4b3b      	ldr	r3, [pc, #236]	@ (8008464 <NMI_Handler+0x65c>)
 8008376:	801a      	strh	r2, [r3, #0]
		SPEED4 = (MYDRON.THRUST*0.7)- MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//
 8008378:	4b34      	ldr	r3, [pc, #208]	@ (800844c <NMI_Handler+0x644>)
 800837a:	885b      	ldrh	r3, [r3, #2]
 800837c:	ee07 3a90 	vmov	s15, r3
 8008380:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008384:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8008430 <NMI_Handler+0x628>
 8008388:	ee27 6b06 	vmul.f64	d6, d7, d6
 800838c:	4b2f      	ldr	r3, [pc, #188]	@ (800844c <NMI_Handler+0x644>)
 800838e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008392:	ee07 3a90 	vmov	s15, r3
 8008396:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800839a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800839e:	4b2b      	ldr	r3, [pc, #172]	@ (800844c <NMI_Handler+0x644>)
 80083a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80083a4:	ee07 3a90 	vmov	s15, r3
 80083a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80083ac:	ee36 6b07 	vadd.f64	d6, d6, d7
 80083b0:	4b26      	ldr	r3, [pc, #152]	@ (800844c <NMI_Handler+0x644>)
 80083b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80083b6:	ee07 3a90 	vmov	s15, r3
 80083ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80083be:	ee36 7b07 	vadd.f64	d7, d6, d7
 80083c2:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008438 <NMI_Handler+0x630>
 80083c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80083ca:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008440 <NMI_Handler+0x638>
 80083ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80083d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80083d6:	ee17 3a90 	vmov	r3, s15
 80083da:	b29a      	uxth	r2, r3
 80083dc:	4b22      	ldr	r3, [pc, #136]	@ (8008468 <NMI_Handler+0x660>)
 80083de:	801a      	strh	r2, [r3, #0]

		ESC_1_SPEED(SPEED1);
 80083e0:	4b1e      	ldr	r3, [pc, #120]	@ (800845c <NMI_Handler+0x654>)
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7f8 fd25 	bl	8000e34 <ESC_1_SPEED>
		ESC_2_SPEED(SPEED2);
 80083ea:	4b1d      	ldr	r3, [pc, #116]	@ (8008460 <NMI_Handler+0x658>)
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7f8 fd42 	bl	8000e78 <ESC_2_SPEED>
		ESC_3_SPEED(SPEED3);
 80083f4:	4b1b      	ldr	r3, [pc, #108]	@ (8008464 <NMI_Handler+0x65c>)
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7f8 fd5f 	bl	8000ebc <ESC_3_SPEED>
		ESC_4_SPEED(SPEED4);
 80083fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008468 <NMI_Handler+0x660>)
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	4618      	mov	r0, r3
 8008404:	f7f8 fd7c 	bl	8000f00 <ESC_4_SPEED>


		OLD_SPEED1 = SPEED1;
 8008408:	4b14      	ldr	r3, [pc, #80]	@ (800845c <NMI_Handler+0x654>)
 800840a:	881a      	ldrh	r2, [r3, #0]
 800840c:	4b17      	ldr	r3, [pc, #92]	@ (800846c <NMI_Handler+0x664>)
 800840e:	801a      	strh	r2, [r3, #0]
		OLD_SPEED2 = SPEED2;
 8008410:	4b13      	ldr	r3, [pc, #76]	@ (8008460 <NMI_Handler+0x658>)
 8008412:	881a      	ldrh	r2, [r3, #0]
 8008414:	4b16      	ldr	r3, [pc, #88]	@ (8008470 <NMI_Handler+0x668>)
 8008416:	801a      	strh	r2, [r3, #0]
		OLD_SPEED3 = SPEED3;
 8008418:	4b12      	ldr	r3, [pc, #72]	@ (8008464 <NMI_Handler+0x65c>)
 800841a:	881a      	ldrh	r2, [r3, #0]
 800841c:	4b15      	ldr	r3, [pc, #84]	@ (8008474 <NMI_Handler+0x66c>)
 800841e:	801a      	strh	r2, [r3, #0]
		OLD_SPEED4 = SPEED4;
 8008420:	4b11      	ldr	r3, [pc, #68]	@ (8008468 <NMI_Handler+0x660>)
 8008422:	881a      	ldrh	r2, [r3, #0]
 8008424:	4b14      	ldr	r3, [pc, #80]	@ (8008478 <NMI_Handler+0x670>)
 8008426:	801a      	strh	r2, [r3, #0]
	   	HAL_Delay(1);
 8008428:	e517      	b.n	8007e5a <NMI_Handler+0x52>
 800842a:	bf00      	nop
 800842c:	f3af 8000 	nop.w
 8008430:	66666666 	.word	0x66666666
 8008434:	3fe66666 	.word	0x3fe66666
 8008438:	00000000 	.word	0x00000000
 800843c:	40c48200 	.word	0x40c48200
 8008440:	00000000 	.word	0x00000000
 8008444:	407f4000 	.word	0x407f4000
 8008448:	000040b0 	.word	0x000040b0
 800844c:	00000160 	.word	0x00000160
 8008450:	000040a8 	.word	0x000040a8
 8008454:	000040ac 	.word	0x000040ac
 8008458:	00004046 	.word	0x00004046
 800845c:	00004174 	.word	0x00004174
 8008460:	00004176 	.word	0x00004176
 8008464:	00004178 	.word	0x00004178
 8008468:	0000417a 	.word	0x0000417a
 800846c:	0000417c 	.word	0x0000417c
 8008470:	0000417e 	.word	0x0000417e
 8008474:	00004180 	.word	0x00004180
 8008478:	00004182 	.word	0x00004182

0800847c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 8008480:	2201      	movs	r2, #1
 8008482:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008486:	4812      	ldr	r0, [pc, #72]	@ (80084d0 <HardFault_Handler+0x54>)
 8008488:	f005 ff8a 	bl	800e3a0 <HAL_GPIO_WritePin>
	LED_Y_0;
 800848c:	2200      	movs	r2, #0
 800848e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008492:	4810      	ldr	r0, [pc, #64]	@ (80084d4 <HardFault_Handler+0x58>)
 8008494:	f005 ff84 	bl	800e3a0 <HAL_GPIO_WritePin>
	LED_R_1;
 8008498:	2201      	movs	r2, #1
 800849a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800849e:	480d      	ldr	r0, [pc, #52]	@ (80084d4 <HardFault_Handler+0x58>)
 80084a0:	f005 ff7e 	bl	800e3a0 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80084a4:	480c      	ldr	r0, [pc, #48]	@ (80084d8 <HardFault_Handler+0x5c>)
 80084a6:	f015 f9fd 	bl	801d8a4 <f_close>
	wanted_rool = 0;
 80084aa:	4b0c      	ldr	r3, [pc, #48]	@ (80084dc <HardFault_Handler+0x60>)
 80084ac:	f04f 0200 	mov.w	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80084b2:	4b0b      	ldr	r3, [pc, #44]	@ (80084e0 <HardFault_Handler+0x64>)
 80084b4:	f04f 0200 	mov.w	r2, #0
 80084b8:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80084ba:	4b0a      	ldr	r3, [pc, #40]	@ (80084e4 <HardFault_Handler+0x68>)
 80084bc:	f04f 0200 	mov.w	r2, #0
 80084c0:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80084c2:	4b09      	ldr	r3, [pc, #36]	@ (80084e8 <HardFault_Handler+0x6c>)
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	b21a      	sxth	r2, r3
 80084c8:	4b08      	ldr	r3, [pc, #32]	@ (80084ec <HardFault_Handler+0x70>)
 80084ca:	801a      	strh	r2, [r3, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80084cc:	bf00      	nop
 80084ce:	e7fd      	b.n	80084cc <HardFault_Handler+0x50>
 80084d0:	58021000 	.word	0x58021000
 80084d4:	58020400 	.word	0x58020400
 80084d8:	24001f10 	.word	0x24001f10
 80084dc:	00004054 	.word	0x00004054
 80084e0:	00004050 	.word	0x00004050
 80084e4:	00004058 	.word	0x00004058
 80084e8:	0801e758 	.word	0x0801e758
 80084ec:	00004044 	.word	0x00004044

080084f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 80084f4:	2200      	movs	r2, #0
 80084f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80084fa:	4812      	ldr	r0, [pc, #72]	@ (8008544 <MemManage_Handler+0x54>)
 80084fc:	f005 ff50 	bl	800e3a0 <HAL_GPIO_WritePin>
	LED_Y_0;
 8008500:	2200      	movs	r2, #0
 8008502:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008506:	4810      	ldr	r0, [pc, #64]	@ (8008548 <MemManage_Handler+0x58>)
 8008508:	f005 ff4a 	bl	800e3a0 <HAL_GPIO_WritePin>
	LED_R_1;
 800850c:	2201      	movs	r2, #1
 800850e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008512:	480d      	ldr	r0, [pc, #52]	@ (8008548 <MemManage_Handler+0x58>)
 8008514:	f005 ff44 	bl	800e3a0 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008518:	480c      	ldr	r0, [pc, #48]	@ (800854c <MemManage_Handler+0x5c>)
 800851a:	f015 f9c3 	bl	801d8a4 <f_close>
	wanted_rool = 0;
 800851e:	4b0c      	ldr	r3, [pc, #48]	@ (8008550 <MemManage_Handler+0x60>)
 8008520:	f04f 0200 	mov.w	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008526:	4b0b      	ldr	r3, [pc, #44]	@ (8008554 <MemManage_Handler+0x64>)
 8008528:	f04f 0200 	mov.w	r2, #0
 800852c:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 800852e:	4b0a      	ldr	r3, [pc, #40]	@ (8008558 <MemManage_Handler+0x68>)
 8008530:	f04f 0200 	mov.w	r2, #0
 8008534:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008536:	4b09      	ldr	r3, [pc, #36]	@ (800855c <MemManage_Handler+0x6c>)
 8008538:	881b      	ldrh	r3, [r3, #0]
 800853a:	b21a      	sxth	r2, r3
 800853c:	4b08      	ldr	r3, [pc, #32]	@ (8008560 <MemManage_Handler+0x70>)
 800853e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008540:	bf00      	nop
 8008542:	e7fd      	b.n	8008540 <MemManage_Handler+0x50>
 8008544:	58021000 	.word	0x58021000
 8008548:	58020400 	.word	0x58020400
 800854c:	24001f10 	.word	0x24001f10
 8008550:	00004054 	.word	0x00004054
 8008554:	00004050 	.word	0x00004050
 8008558:	00004058 	.word	0x00004058
 800855c:	0801e758 	.word	0x0801e758
 8008560:	00004044 	.word	0x00004044

08008564 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 8008568:	2201      	movs	r2, #1
 800856a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800856e:	4812      	ldr	r0, [pc, #72]	@ (80085b8 <BusFault_Handler+0x54>)
 8008570:	f005 ff16 	bl	800e3a0 <HAL_GPIO_WritePin>
	LED_Y_1;
 8008574:	2201      	movs	r2, #1
 8008576:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800857a:	4810      	ldr	r0, [pc, #64]	@ (80085bc <BusFault_Handler+0x58>)
 800857c:	f005 ff10 	bl	800e3a0 <HAL_GPIO_WritePin>
	LED_R_1;
 8008580:	2201      	movs	r2, #1
 8008582:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008586:	480d      	ldr	r0, [pc, #52]	@ (80085bc <BusFault_Handler+0x58>)
 8008588:	f005 ff0a 	bl	800e3a0 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 800858c:	480c      	ldr	r0, [pc, #48]	@ (80085c0 <BusFault_Handler+0x5c>)
 800858e:	f015 f989 	bl	801d8a4 <f_close>
	wanted_rool = 0;
 8008592:	4b0c      	ldr	r3, [pc, #48]	@ (80085c4 <BusFault_Handler+0x60>)
 8008594:	f04f 0200 	mov.w	r2, #0
 8008598:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 800859a:	4b0b      	ldr	r3, [pc, #44]	@ (80085c8 <BusFault_Handler+0x64>)
 800859c:	f04f 0200 	mov.w	r2, #0
 80085a0:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80085a2:	4b0a      	ldr	r3, [pc, #40]	@ (80085cc <BusFault_Handler+0x68>)
 80085a4:	f04f 0200 	mov.w	r2, #0
 80085a8:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80085aa:	4b09      	ldr	r3, [pc, #36]	@ (80085d0 <BusFault_Handler+0x6c>)
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	b21a      	sxth	r2, r3
 80085b0:	4b08      	ldr	r3, [pc, #32]	@ (80085d4 <BusFault_Handler+0x70>)
 80085b2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80085b4:	bf00      	nop
 80085b6:	e7fd      	b.n	80085b4 <BusFault_Handler+0x50>
 80085b8:	58021000 	.word	0x58021000
 80085bc:	58020400 	.word	0x58020400
 80085c0:	24001f10 	.word	0x24001f10
 80085c4:	00004054 	.word	0x00004054
 80085c8:	00004050 	.word	0x00004050
 80085cc:	00004058 	.word	0x00004058
 80085d0:	0801e758 	.word	0x0801e758
 80085d4:	00004044 	.word	0x00004044

080085d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 80085dc:	2200      	movs	r2, #0
 80085de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80085e2:	4812      	ldr	r0, [pc, #72]	@ (800862c <UsageFault_Handler+0x54>)
 80085e4:	f005 fedc 	bl	800e3a0 <HAL_GPIO_WritePin>
	LED_Y_1;
 80085e8:	2201      	movs	r2, #1
 80085ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80085ee:	4810      	ldr	r0, [pc, #64]	@ (8008630 <UsageFault_Handler+0x58>)
 80085f0:	f005 fed6 	bl	800e3a0 <HAL_GPIO_WritePin>
	LED_R_1;
 80085f4:	2201      	movs	r2, #1
 80085f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80085fa:	480d      	ldr	r0, [pc, #52]	@ (8008630 <UsageFault_Handler+0x58>)
 80085fc:	f005 fed0 	bl	800e3a0 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008600:	480c      	ldr	r0, [pc, #48]	@ (8008634 <UsageFault_Handler+0x5c>)
 8008602:	f015 f94f 	bl	801d8a4 <f_close>
	wanted_rool = 0;
 8008606:	4b0c      	ldr	r3, [pc, #48]	@ (8008638 <UsageFault_Handler+0x60>)
 8008608:	f04f 0200 	mov.w	r2, #0
 800860c:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 800860e:	4b0b      	ldr	r3, [pc, #44]	@ (800863c <UsageFault_Handler+0x64>)
 8008610:	f04f 0200 	mov.w	r2, #0
 8008614:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008616:	4b0a      	ldr	r3, [pc, #40]	@ (8008640 <UsageFault_Handler+0x68>)
 8008618:	f04f 0200 	mov.w	r2, #0
 800861c:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 800861e:	4b09      	ldr	r3, [pc, #36]	@ (8008644 <UsageFault_Handler+0x6c>)
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	b21a      	sxth	r2, r3
 8008624:	4b08      	ldr	r3, [pc, #32]	@ (8008648 <UsageFault_Handler+0x70>)
 8008626:	801a      	strh	r2, [r3, #0]
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008628:	bf00      	nop
 800862a:	e7fd      	b.n	8008628 <UsageFault_Handler+0x50>
 800862c:	58021000 	.word	0x58021000
 8008630:	58020400 	.word	0x58020400
 8008634:	24001f10 	.word	0x24001f10
 8008638:	00004054 	.word	0x00004054
 800863c:	00004050 	.word	0x00004050
 8008640:	00004058 	.word	0x00004058
 8008644:	0801e758 	.word	0x0801e758
 8008648:	00004044 	.word	0x00004044

0800864c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800864c:	b480      	push	{r7}
 800864e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008650:	bf00      	nop
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800865a:	b480      	push	{r7}
 800865c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800865e:	bf00      	nop
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008668:	b480      	push	{r7}
 800866a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800866c:	bf00      	nop
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
	...

08008678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 800867c:	4b08      	ldr	r3, [pc, #32]	@ (80086a0 <SysTick_Handler+0x28>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3301      	adds	r3, #1
 8008682:	4a07      	ldr	r2, [pc, #28]	@ (80086a0 <SysTick_Handler+0x28>)
 8008684:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 8008686:	4b06      	ldr	r3, [pc, #24]	@ (80086a0 <SysTick_Handler+0x28>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b09      	cmp	r3, #9
 800868c:	d904      	bls.n	8008698 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 800868e:	4b04      	ldr	r3, [pc, #16]	@ (80086a0 <SysTick_Handler+0x28>)
 8008690:	2200      	movs	r2, #0
 8008692:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 8008694:	f7ff fb98 	bl	8007dc8 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008698:	f000 fd04 	bl	80090a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800869c:	bf00      	nop
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	24000374 	.word	0x24000374

080086a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80086a8:	4802      	ldr	r0, [pc, #8]	@ (80086b4 <DMA1_Stream0_IRQHandler+0x10>)
 80086aa:	f004 f98d 	bl	800c9c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80086ae:	bf00      	nop
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	240002fc 	.word	0x240002fc

080086b8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80086bc:	4802      	ldr	r0, [pc, #8]	@ (80086c8 <ADC_IRQHandler+0x10>)
 80086be:	f001 fb05 	bl	8009ccc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80086c2:	bf00      	nop
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	240000ac 	.word	0x240000ac

080086cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80086d0:	4802      	ldr	r0, [pc, #8]	@ (80086dc <TIM2_IRQHandler+0x10>)
 80086d2:	f00d ff24 	bl	801651e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80086d6:	bf00      	nop
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	240003cc 	.word	0x240003cc

080086e0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80086e4:	4802      	ldr	r0, [pc, #8]	@ (80086f0 <SPI2_IRQHandler+0x10>)
 80086e6:	f00d f893 	bl	8015810 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80086ea:	bf00      	nop
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	240001ec 	.word	0x240001ec

080086f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80086f8:	4802      	ldr	r0, [pc, #8]	@ (8008704 <USART1_IRQHandler+0x10>)
 80086fa:	f00f fb6d 	bl	8017dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80086fe:	bf00      	nop
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	240004b0 	.word	0x240004b0

08008708 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 800870c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008710:	f005 fe5f 	bl	800e3d2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008714:	bf00      	nop
 8008716:	bd80      	pop	{r7, pc}

08008718 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800871c:	4802      	ldr	r0, [pc, #8]	@ (8008728 <DMA2_Stream0_IRQHandler+0x10>)
 800871e:	f004 f953 	bl	800c9c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008722:	bf00      	nop
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	2400011c 	.word	0x2400011c

0800872c <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8008730:	4802      	ldr	r0, [pc, #8]	@ (800873c <I2C5_EV_IRQHandler+0x10>)
 8008732:	f006 fa43 	bl	800ebbc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 8008736:	bf00      	nop
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	24000198 	.word	0x24000198

08008740 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008740:	b480      	push	{r7}
 8008742:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008744:	4b32      	ldr	r3, [pc, #200]	@ (8008810 <SystemInit+0xd0>)
 8008746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800874a:	4a31      	ldr	r2, [pc, #196]	@ (8008810 <SystemInit+0xd0>)
 800874c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008750:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008754:	4b2f      	ldr	r3, [pc, #188]	@ (8008814 <SystemInit+0xd4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 030f 	and.w	r3, r3, #15
 800875c:	2b06      	cmp	r3, #6
 800875e:	d807      	bhi.n	8008770 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008760:	4b2c      	ldr	r3, [pc, #176]	@ (8008814 <SystemInit+0xd4>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f023 030f 	bic.w	r3, r3, #15
 8008768:	4a2a      	ldr	r2, [pc, #168]	@ (8008814 <SystemInit+0xd4>)
 800876a:	f043 0307 	orr.w	r3, r3, #7
 800876e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008770:	4b29      	ldr	r3, [pc, #164]	@ (8008818 <SystemInit+0xd8>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a28      	ldr	r2, [pc, #160]	@ (8008818 <SystemInit+0xd8>)
 8008776:	f043 0301 	orr.w	r3, r3, #1
 800877a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800877c:	4b26      	ldr	r3, [pc, #152]	@ (8008818 <SystemInit+0xd8>)
 800877e:	2200      	movs	r2, #0
 8008780:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008782:	4b25      	ldr	r3, [pc, #148]	@ (8008818 <SystemInit+0xd8>)
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	4924      	ldr	r1, [pc, #144]	@ (8008818 <SystemInit+0xd8>)
 8008788:	4b24      	ldr	r3, [pc, #144]	@ (800881c <SystemInit+0xdc>)
 800878a:	4013      	ands	r3, r2
 800878c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800878e:	4b21      	ldr	r3, [pc, #132]	@ (8008814 <SystemInit+0xd4>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0308 	and.w	r3, r3, #8
 8008796:	2b00      	cmp	r3, #0
 8008798:	d007      	beq.n	80087aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800879a:	4b1e      	ldr	r3, [pc, #120]	@ (8008814 <SystemInit+0xd4>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f023 030f 	bic.w	r3, r3, #15
 80087a2:	4a1c      	ldr	r2, [pc, #112]	@ (8008814 <SystemInit+0xd4>)
 80087a4:	f043 0307 	orr.w	r3, r3, #7
 80087a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80087aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008818 <SystemInit+0xd8>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80087b0:	4b19      	ldr	r3, [pc, #100]	@ (8008818 <SystemInit+0xd8>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80087b6:	4b18      	ldr	r3, [pc, #96]	@ (8008818 <SystemInit+0xd8>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80087bc:	4b16      	ldr	r3, [pc, #88]	@ (8008818 <SystemInit+0xd8>)
 80087be:	4a18      	ldr	r2, [pc, #96]	@ (8008820 <SystemInit+0xe0>)
 80087c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80087c2:	4b15      	ldr	r3, [pc, #84]	@ (8008818 <SystemInit+0xd8>)
 80087c4:	4a17      	ldr	r2, [pc, #92]	@ (8008824 <SystemInit+0xe4>)
 80087c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80087c8:	4b13      	ldr	r3, [pc, #76]	@ (8008818 <SystemInit+0xd8>)
 80087ca:	4a17      	ldr	r2, [pc, #92]	@ (8008828 <SystemInit+0xe8>)
 80087cc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80087ce:	4b12      	ldr	r3, [pc, #72]	@ (8008818 <SystemInit+0xd8>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80087d4:	4b10      	ldr	r3, [pc, #64]	@ (8008818 <SystemInit+0xd8>)
 80087d6:	4a14      	ldr	r2, [pc, #80]	@ (8008828 <SystemInit+0xe8>)
 80087d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80087da:	4b0f      	ldr	r3, [pc, #60]	@ (8008818 <SystemInit+0xd8>)
 80087dc:	2200      	movs	r2, #0
 80087de:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80087e0:	4b0d      	ldr	r3, [pc, #52]	@ (8008818 <SystemInit+0xd8>)
 80087e2:	4a11      	ldr	r2, [pc, #68]	@ (8008828 <SystemInit+0xe8>)
 80087e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80087e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008818 <SystemInit+0xd8>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80087ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008818 <SystemInit+0xd8>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a09      	ldr	r2, [pc, #36]	@ (8008818 <SystemInit+0xd8>)
 80087f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80087f8:	4b07      	ldr	r3, [pc, #28]	@ (8008818 <SystemInit+0xd8>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80087fe:	4b0b      	ldr	r3, [pc, #44]	@ (800882c <SystemInit+0xec>)
 8008800:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8008804:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008806:	bf00      	nop
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	e000ed00 	.word	0xe000ed00
 8008814:	52002000 	.word	0x52002000
 8008818:	58024400 	.word	0x58024400
 800881c:	eaf6ed7f 	.word	0xeaf6ed7f
 8008820:	02020200 	.word	0x02020200
 8008824:	01ff0000 	.word	0x01ff0000
 8008828:	01010280 	.word	0x01010280
 800882c:	52004000 	.word	0x52004000

08008830 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b098      	sub	sp, #96	@ 0x60
 8008834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008836:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800883a:	2200      	movs	r2, #0
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	605a      	str	r2, [r3, #4]
 8008840:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008842:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008846:	2200      	movs	r2, #0
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	605a      	str	r2, [r3, #4]
 800884c:	609a      	str	r2, [r3, #8]
 800884e:	60da      	str	r2, [r3, #12]
 8008850:	611a      	str	r2, [r3, #16]
 8008852:	615a      	str	r2, [r3, #20]
 8008854:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008856:	1d3b      	adds	r3, r7, #4
 8008858:	2234      	movs	r2, #52	@ 0x34
 800885a:	2100      	movs	r1, #0
 800885c:	4618      	mov	r0, r3
 800885e:	f015 fa19 	bl	801dc94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008862:	4b45      	ldr	r3, [pc, #276]	@ (8008978 <MX_TIM1_Init+0x148>)
 8008864:	4a45      	ldr	r2, [pc, #276]	@ (800897c <MX_TIM1_Init+0x14c>)
 8008866:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8008868:	4b43      	ldr	r3, [pc, #268]	@ (8008978 <MX_TIM1_Init+0x148>)
 800886a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800886e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008870:	4b41      	ldr	r3, [pc, #260]	@ (8008978 <MX_TIM1_Init+0x148>)
 8008872:	2200      	movs	r2, #0
 8008874:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8008876:	4b40      	ldr	r3, [pc, #256]	@ (8008978 <MX_TIM1_Init+0x148>)
 8008878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800887c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800887e:	4b3e      	ldr	r3, [pc, #248]	@ (8008978 <MX_TIM1_Init+0x148>)
 8008880:	2200      	movs	r2, #0
 8008882:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008884:	4b3c      	ldr	r3, [pc, #240]	@ (8008978 <MX_TIM1_Init+0x148>)
 8008886:	2200      	movs	r2, #0
 8008888:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800888a:	4b3b      	ldr	r3, [pc, #236]	@ (8008978 <MX_TIM1_Init+0x148>)
 800888c:	2280      	movs	r2, #128	@ 0x80
 800888e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008890:	4839      	ldr	r0, [pc, #228]	@ (8008978 <MX_TIM1_Init+0x148>)
 8008892:	f00d fc79 	bl	8016188 <HAL_TIM_PWM_Init>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d001      	beq.n	80088a0 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 800889c:	f7ff f8b8 	bl	8007a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80088a0:	2300      	movs	r3, #0
 80088a2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80088a4:	2300      	movs	r3, #0
 80088a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80088a8:	2300      	movs	r3, #0
 80088aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80088ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80088b0:	4619      	mov	r1, r3
 80088b2:	4831      	ldr	r0, [pc, #196]	@ (8008978 <MX_TIM1_Init+0x148>)
 80088b4:	f00e ff8c 	bl	80177d0 <HAL_TIMEx_MasterConfigSynchronization>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80088be:	f7ff f8a7 	bl	8007a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80088c2:	2360      	movs	r3, #96	@ 0x60
 80088c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80088c6:	2300      	movs	r3, #0
 80088c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80088ca:	2300      	movs	r3, #0
 80088cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80088ce:	2300      	movs	r3, #0
 80088d0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80088d2:	2300      	movs	r3, #0
 80088d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80088d6:	2300      	movs	r3, #0
 80088d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80088da:	2300      	movs	r3, #0
 80088dc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80088de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80088e2:	2204      	movs	r2, #4
 80088e4:	4619      	mov	r1, r3
 80088e6:	4824      	ldr	r0, [pc, #144]	@ (8008978 <MX_TIM1_Init+0x148>)
 80088e8:	f00d ffbc 	bl	8016864 <HAL_TIM_PWM_ConfigChannel>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80088f2:	f7ff f88d 	bl	8007a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80088f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80088fa:	2208      	movs	r2, #8
 80088fc:	4619      	mov	r1, r3
 80088fe:	481e      	ldr	r0, [pc, #120]	@ (8008978 <MX_TIM1_Init+0x148>)
 8008900:	f00d ffb0 	bl	8016864 <HAL_TIM_PWM_ConfigChannel>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 800890a:	f7ff f881 	bl	8007a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800890e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008912:	220c      	movs	r2, #12
 8008914:	4619      	mov	r1, r3
 8008916:	4818      	ldr	r0, [pc, #96]	@ (8008978 <MX_TIM1_Init+0x148>)
 8008918:	f00d ffa4 	bl	8016864 <HAL_TIM_PWM_ConfigChannel>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8008922:	f7ff f875 	bl	8007a10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008926:	2300      	movs	r3, #0
 8008928:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800892a:	2300      	movs	r3, #0
 800892c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800892e:	2300      	movs	r3, #0
 8008930:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008936:	2300      	movs	r3, #0
 8008938:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800893a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800893e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008940:	2300      	movs	r3, #0
 8008942:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008944:	2300      	movs	r3, #0
 8008946:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008948:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800894c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800894e:	2300      	movs	r3, #0
 8008950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008952:	2300      	movs	r3, #0
 8008954:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008956:	1d3b      	adds	r3, r7, #4
 8008958:	4619      	mov	r1, r3
 800895a:	4807      	ldr	r0, [pc, #28]	@ (8008978 <MX_TIM1_Init+0x148>)
 800895c:	f00e ffd4 	bl	8017908 <HAL_TIMEx_ConfigBreakDeadTime>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8008966:	f7ff f853 	bl	8007a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800896a:	4803      	ldr	r0, [pc, #12]	@ (8008978 <MX_TIM1_Init+0x148>)
 800896c:	f000 f9da 	bl	8008d24 <HAL_TIM_MspPostInit>

}
 8008970:	bf00      	nop
 8008972:	3760      	adds	r7, #96	@ 0x60
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	24000380 	.word	0x24000380
 800897c:	40010000 	.word	0x40010000

08008980 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b088      	sub	sp, #32
 8008984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008986:	f107 0314 	add.w	r3, r7, #20
 800898a:	2200      	movs	r2, #0
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	605a      	str	r2, [r3, #4]
 8008990:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008992:	1d3b      	adds	r3, r7, #4
 8008994:	2200      	movs	r2, #0
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	605a      	str	r2, [r3, #4]
 800899a:	609a      	str	r2, [r3, #8]
 800899c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800899e:	4b21      	ldr	r3, [pc, #132]	@ (8008a24 <MX_TIM2_Init+0xa4>)
 80089a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80089a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 80089a6:	4b1f      	ldr	r3, [pc, #124]	@ (8008a24 <MX_TIM2_Init+0xa4>)
 80089a8:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80089ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80089ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008a24 <MX_TIM2_Init+0xa4>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80089b4:	4b1b      	ldr	r3, [pc, #108]	@ (8008a24 <MX_TIM2_Init+0xa4>)
 80089b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80089ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089bc:	4b19      	ldr	r3, [pc, #100]	@ (8008a24 <MX_TIM2_Init+0xa4>)
 80089be:	2200      	movs	r2, #0
 80089c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80089c2:	4b18      	ldr	r3, [pc, #96]	@ (8008a24 <MX_TIM2_Init+0xa4>)
 80089c4:	2280      	movs	r2, #128	@ 0x80
 80089c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80089c8:	4816      	ldr	r0, [pc, #88]	@ (8008a24 <MX_TIM2_Init+0xa4>)
 80089ca:	f00d fd51 	bl	8016470 <HAL_TIM_IC_Init>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80089d4:	f7ff f81c 	bl	8007a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80089d8:	2300      	movs	r3, #0
 80089da:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80089dc:	2300      	movs	r3, #0
 80089de:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80089e0:	f107 0314 	add.w	r3, r7, #20
 80089e4:	4619      	mov	r1, r3
 80089e6:	480f      	ldr	r0, [pc, #60]	@ (8008a24 <MX_TIM2_Init+0xa4>)
 80089e8:	f00e fef2 	bl	80177d0 <HAL_TIMEx_MasterConfigSynchronization>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80089f2:	f7ff f80d 	bl	8007a10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80089f6:	2300      	movs	r3, #0
 80089f8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80089fa:	2301      	movs	r3, #1
 80089fc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80089fe:	2300      	movs	r3, #0
 8008a00:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8008a02:	2300      	movs	r3, #0
 8008a04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008a06:	1d3b      	adds	r3, r7, #4
 8008a08:	2200      	movs	r2, #0
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4805      	ldr	r0, [pc, #20]	@ (8008a24 <MX_TIM2_Init+0xa4>)
 8008a0e:	f00d fe8d 	bl	801672c <HAL_TIM_IC_ConfigChannel>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008a18:	f7fe fffa 	bl	8007a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008a1c:	bf00      	nop
 8008a1e:	3720      	adds	r7, #32
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	240003cc 	.word	0x240003cc

08008a28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b08a      	sub	sp, #40	@ 0x28
 8008a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a2e:	f107 031c 	add.w	r3, r7, #28
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	605a      	str	r2, [r3, #4]
 8008a38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008a3a:	463b      	mov	r3, r7
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	601a      	str	r2, [r3, #0]
 8008a40:	605a      	str	r2, [r3, #4]
 8008a42:	609a      	str	r2, [r3, #8]
 8008a44:	60da      	str	r2, [r3, #12]
 8008a46:	611a      	str	r2, [r3, #16]
 8008a48:	615a      	str	r2, [r3, #20]
 8008a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008a4c:	4b32      	ldr	r3, [pc, #200]	@ (8008b18 <MX_TIM3_Init+0xf0>)
 8008a4e:	4a33      	ldr	r2, [pc, #204]	@ (8008b1c <MX_TIM3_Init+0xf4>)
 8008a50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 8008a52:	4b31      	ldr	r3, [pc, #196]	@ (8008b18 <MX_TIM3_Init+0xf0>)
 8008a54:	221c      	movs	r2, #28
 8008a56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a58:	4b2f      	ldr	r3, [pc, #188]	@ (8008b18 <MX_TIM3_Init+0xf0>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8008a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8008b18 <MX_TIM3_Init+0xf0>)
 8008a60:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008a64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a66:	4b2c      	ldr	r3, [pc, #176]	@ (8008b18 <MX_TIM3_Init+0xf0>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8008b18 <MX_TIM3_Init+0xf0>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008a72:	4829      	ldr	r0, [pc, #164]	@ (8008b18 <MX_TIM3_Init+0xf0>)
 8008a74:	f00d fb88 	bl	8016188 <HAL_TIM_PWM_Init>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d001      	beq.n	8008a82 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8008a7e:	f7fe ffc7 	bl	8007a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a82:	2300      	movs	r3, #0
 8008a84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008a8a:	f107 031c 	add.w	r3, r7, #28
 8008a8e:	4619      	mov	r1, r3
 8008a90:	4821      	ldr	r0, [pc, #132]	@ (8008b18 <MX_TIM3_Init+0xf0>)
 8008a92:	f00e fe9d 	bl	80177d0 <HAL_TIMEx_MasterConfigSynchronization>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8008a9c:	f7fe ffb8 	bl	8007a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008aa0:	2360      	movs	r3, #96	@ 0x60
 8008aa2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008aac:	2300      	movs	r3, #0
 8008aae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008ab0:	463b      	mov	r3, r7
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4818      	ldr	r0, [pc, #96]	@ (8008b18 <MX_TIM3_Init+0xf0>)
 8008ab8:	f00d fed4 	bl	8016864 <HAL_TIM_PWM_ConfigChannel>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8008ac2:	f7fe ffa5 	bl	8007a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008ac6:	463b      	mov	r3, r7
 8008ac8:	2204      	movs	r2, #4
 8008aca:	4619      	mov	r1, r3
 8008acc:	4812      	ldr	r0, [pc, #72]	@ (8008b18 <MX_TIM3_Init+0xf0>)
 8008ace:	f00d fec9 	bl	8016864 <HAL_TIM_PWM_ConfigChannel>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d001      	beq.n	8008adc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008ad8:	f7fe ff9a 	bl	8007a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008adc:	463b      	mov	r3, r7
 8008ade:	2208      	movs	r2, #8
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	480d      	ldr	r0, [pc, #52]	@ (8008b18 <MX_TIM3_Init+0xf0>)
 8008ae4:	f00d febe 	bl	8016864 <HAL_TIM_PWM_ConfigChannel>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d001      	beq.n	8008af2 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8008aee:	f7fe ff8f 	bl	8007a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008af2:	463b      	mov	r3, r7
 8008af4:	220c      	movs	r2, #12
 8008af6:	4619      	mov	r1, r3
 8008af8:	4807      	ldr	r0, [pc, #28]	@ (8008b18 <MX_TIM3_Init+0xf0>)
 8008afa:	f00d feb3 	bl	8016864 <HAL_TIM_PWM_ConfigChannel>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8008b04:	f7fe ff84 	bl	8007a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008b08:	4803      	ldr	r0, [pc, #12]	@ (8008b18 <MX_TIM3_Init+0xf0>)
 8008b0a:	f000 f90b 	bl	8008d24 <HAL_TIM_MspPostInit>

}
 8008b0e:	bf00      	nop
 8008b10:	3728      	adds	r7, #40	@ 0x28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	24000418 	.word	0x24000418
 8008b1c:	40000400 	.word	0x40000400

08008b20 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008b26:	f107 0310 	add.w	r3, r7, #16
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	605a      	str	r2, [r3, #4]
 8008b30:	609a      	str	r2, [r3, #8]
 8008b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b34:	1d3b      	adds	r3, r7, #4
 8008b36:	2200      	movs	r2, #0
 8008b38:	601a      	str	r2, [r3, #0]
 8008b3a:	605a      	str	r2, [r3, #4]
 8008b3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008b3e:	4b21      	ldr	r3, [pc, #132]	@ (8008bc4 <MX_TIM8_Init+0xa4>)
 8008b40:	4a21      	ldr	r2, [pc, #132]	@ (8008bc8 <MX_TIM8_Init+0xa8>)
 8008b42:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 8008b44:	4b1f      	ldr	r3, [pc, #124]	@ (8008bc4 <MX_TIM8_Init+0xa4>)
 8008b46:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 8008b4a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8008bc4 <MX_TIM8_Init+0xa4>)
 8008b4e:	2200      	movs	r2, #0
 8008b50:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8008b52:	4b1c      	ldr	r3, [pc, #112]	@ (8008bc4 <MX_TIM8_Init+0xa4>)
 8008b54:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008b58:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8008bc4 <MX_TIM8_Init+0xa4>)
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008b60:	4b18      	ldr	r3, [pc, #96]	@ (8008bc4 <MX_TIM8_Init+0xa4>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b66:	4b17      	ldr	r3, [pc, #92]	@ (8008bc4 <MX_TIM8_Init+0xa4>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008b6c:	4815      	ldr	r0, [pc, #84]	@ (8008bc4 <MX_TIM8_Init+0xa4>)
 8008b6e:	f00d f9b0 	bl	8015ed2 <HAL_TIM_Base_Init>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d001      	beq.n	8008b7c <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8008b78:	f7fe ff4a 	bl	8007a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008b82:	f107 0310 	add.w	r3, r7, #16
 8008b86:	4619      	mov	r1, r3
 8008b88:	480e      	ldr	r0, [pc, #56]	@ (8008bc4 <MX_TIM8_Init+0xa4>)
 8008b8a:	f00d ff7f 	bl	8016a8c <HAL_TIM_ConfigClockSource>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8008b94:	f7fe ff3c 	bl	8007a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008b98:	2320      	movs	r3, #32
 8008b9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8008b9c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008ba0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008ba6:	1d3b      	adds	r3, r7, #4
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4806      	ldr	r0, [pc, #24]	@ (8008bc4 <MX_TIM8_Init+0xa4>)
 8008bac:	f00e fe10 	bl	80177d0 <HAL_TIMEx_MasterConfigSynchronization>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8008bb6:	f7fe ff2b 	bl	8007a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8008bba:	bf00      	nop
 8008bbc:	3720      	adds	r7, #32
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	24000464 	.word	0x24000464
 8008bc8:	40010400 	.word	0x40010400

08008bcc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a16      	ldr	r2, [pc, #88]	@ (8008c34 <HAL_TIM_PWM_MspInit+0x68>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d10f      	bne.n	8008bfe <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008bde:	4b16      	ldr	r3, [pc, #88]	@ (8008c38 <HAL_TIM_PWM_MspInit+0x6c>)
 8008be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008be4:	4a14      	ldr	r2, [pc, #80]	@ (8008c38 <HAL_TIM_PWM_MspInit+0x6c>)
 8008be6:	f043 0301 	orr.w	r3, r3, #1
 8008bea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008bee:	4b12      	ldr	r3, [pc, #72]	@ (8008c38 <HAL_TIM_PWM_MspInit+0x6c>)
 8008bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	60fb      	str	r3, [r7, #12]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008bfc:	e013      	b.n	8008c26 <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a0e      	ldr	r2, [pc, #56]	@ (8008c3c <HAL_TIM_PWM_MspInit+0x70>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d10e      	bne.n	8008c26 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008c08:	4b0b      	ldr	r3, [pc, #44]	@ (8008c38 <HAL_TIM_PWM_MspInit+0x6c>)
 8008c0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8008c38 <HAL_TIM_PWM_MspInit+0x6c>)
 8008c10:	f043 0302 	orr.w	r3, r3, #2
 8008c14:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008c18:	4b07      	ldr	r3, [pc, #28]	@ (8008c38 <HAL_TIM_PWM_MspInit+0x6c>)
 8008c1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	60bb      	str	r3, [r7, #8]
 8008c24:	68bb      	ldr	r3, [r7, #8]
}
 8008c26:	bf00      	nop
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	40010000 	.word	0x40010000
 8008c38:	58024400 	.word	0x58024400
 8008c3c:	40000400 	.word	0x40000400

08008c40 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08a      	sub	sp, #40	@ 0x28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c48:	f107 0314 	add.w	r3, r7, #20
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	601a      	str	r2, [r3, #0]
 8008c50:	605a      	str	r2, [r3, #4]
 8008c52:	609a      	str	r2, [r3, #8]
 8008c54:	60da      	str	r2, [r3, #12]
 8008c56:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c60:	d135      	bne.n	8008cce <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008c62:	4b1d      	ldr	r3, [pc, #116]	@ (8008cd8 <HAL_TIM_IC_MspInit+0x98>)
 8008c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c68:	4a1b      	ldr	r2, [pc, #108]	@ (8008cd8 <HAL_TIM_IC_MspInit+0x98>)
 8008c6a:	f043 0301 	orr.w	r3, r3, #1
 8008c6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008c72:	4b19      	ldr	r3, [pc, #100]	@ (8008cd8 <HAL_TIM_IC_MspInit+0x98>)
 8008c74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c78:	f003 0301 	and.w	r3, r3, #1
 8008c7c:	613b      	str	r3, [r7, #16]
 8008c7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c80:	4b15      	ldr	r3, [pc, #84]	@ (8008cd8 <HAL_TIM_IC_MspInit+0x98>)
 8008c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c86:	4a14      	ldr	r2, [pc, #80]	@ (8008cd8 <HAL_TIM_IC_MspInit+0x98>)
 8008c88:	f043 0301 	orr.w	r3, r3, #1
 8008c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008c90:	4b11      	ldr	r3, [pc, #68]	@ (8008cd8 <HAL_TIM_IC_MspInit+0x98>)
 8008c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008caa:	2300      	movs	r3, #0
 8008cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cb2:	f107 0314 	add.w	r3, r7, #20
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	4808      	ldr	r0, [pc, #32]	@ (8008cdc <HAL_TIM_IC_MspInit+0x9c>)
 8008cba:	f005 f9b1 	bl	800e020 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	201c      	movs	r0, #28
 8008cc4:	f002 faad 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008cc8:	201c      	movs	r0, #28
 8008cca:	f002 fac4 	bl	800b256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8008cce:	bf00      	nop
 8008cd0:	3728      	adds	r7, #40	@ 0x28
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	58024400 	.word	0x58024400
 8008cdc:	58020000 	.word	0x58020000

08008ce0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a0b      	ldr	r2, [pc, #44]	@ (8008d1c <HAL_TIM_Base_MspInit+0x3c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d10e      	bne.n	8008d10 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8008d20 <HAL_TIM_Base_MspInit+0x40>)
 8008cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cf8:	4a09      	ldr	r2, [pc, #36]	@ (8008d20 <HAL_TIM_Base_MspInit+0x40>)
 8008cfa:	f043 0302 	orr.w	r3, r3, #2
 8008cfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008d02:	4b07      	ldr	r3, [pc, #28]	@ (8008d20 <HAL_TIM_Base_MspInit+0x40>)
 8008d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	60fb      	str	r3, [r7, #12]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8008d10:	bf00      	nop
 8008d12:	3714      	adds	r7, #20
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	40010400 	.word	0x40010400
 8008d20:	58024400 	.word	0x58024400

08008d24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b08a      	sub	sp, #40	@ 0x28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d2c:	f107 0314 	add.w	r3, r7, #20
 8008d30:	2200      	movs	r2, #0
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	605a      	str	r2, [r3, #4]
 8008d36:	609a      	str	r2, [r3, #8]
 8008d38:	60da      	str	r2, [r3, #12]
 8008d3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a26      	ldr	r2, [pc, #152]	@ (8008ddc <HAL_TIM_MspPostInit+0xb8>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d120      	bne.n	8008d88 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008d46:	4b26      	ldr	r3, [pc, #152]	@ (8008de0 <HAL_TIM_MspPostInit+0xbc>)
 8008d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d4c:	4a24      	ldr	r2, [pc, #144]	@ (8008de0 <HAL_TIM_MspPostInit+0xbc>)
 8008d4e:	f043 0310 	orr.w	r3, r3, #16
 8008d52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008d56:	4b22      	ldr	r3, [pc, #136]	@ (8008de0 <HAL_TIM_MspPostInit+0xbc>)
 8008d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d5c:	f003 0310 	and.w	r3, r3, #16
 8008d60:	613b      	str	r3, [r7, #16]
 8008d62:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8008d64:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8008d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d72:	2300      	movs	r3, #0
 8008d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008d76:	2301      	movs	r3, #1
 8008d78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008d7a:	f107 0314 	add.w	r3, r7, #20
 8008d7e:	4619      	mov	r1, r3
 8008d80:	4818      	ldr	r0, [pc, #96]	@ (8008de4 <HAL_TIM_MspPostInit+0xc0>)
 8008d82:	f005 f94d 	bl	800e020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008d86:	e024      	b.n	8008dd2 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a16      	ldr	r2, [pc, #88]	@ (8008de8 <HAL_TIM_MspPostInit+0xc4>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d11f      	bne.n	8008dd2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d92:	4b13      	ldr	r3, [pc, #76]	@ (8008de0 <HAL_TIM_MspPostInit+0xbc>)
 8008d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d98:	4a11      	ldr	r2, [pc, #68]	@ (8008de0 <HAL_TIM_MspPostInit+0xbc>)
 8008d9a:	f043 0304 	orr.w	r3, r3, #4
 8008d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008da2:	4b0f      	ldr	r3, [pc, #60]	@ (8008de0 <HAL_TIM_MspPostInit+0xbc>)
 8008da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008da8:	f003 0304 	and.w	r3, r3, #4
 8008dac:	60fb      	str	r3, [r7, #12]
 8008dae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8008db0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8008db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008db6:	2302      	movs	r3, #2
 8008db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008dc6:	f107 0314 	add.w	r3, r7, #20
 8008dca:	4619      	mov	r1, r3
 8008dcc:	4807      	ldr	r0, [pc, #28]	@ (8008dec <HAL_TIM_MspPostInit+0xc8>)
 8008dce:	f005 f927 	bl	800e020 <HAL_GPIO_Init>
}
 8008dd2:	bf00      	nop
 8008dd4:	3728      	adds	r7, #40	@ 0x28
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	40010000 	.word	0x40010000
 8008de0:	58024400 	.word	0x58024400
 8008de4:	58021000 	.word	0x58021000
 8008de8:	40000400 	.word	0x40000400
 8008dec:	58020800 	.word	0x58020800

08008df0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008df4:	4b22      	ldr	r3, [pc, #136]	@ (8008e80 <MX_USART1_UART_Init+0x90>)
 8008df6:	4a23      	ldr	r2, [pc, #140]	@ (8008e84 <MX_USART1_UART_Init+0x94>)
 8008df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008dfa:	4b21      	ldr	r3, [pc, #132]	@ (8008e80 <MX_USART1_UART_Init+0x90>)
 8008dfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008e00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008e02:	4b1f      	ldr	r3, [pc, #124]	@ (8008e80 <MX_USART1_UART_Init+0x90>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008e08:	4b1d      	ldr	r3, [pc, #116]	@ (8008e80 <MX_USART1_UART_Init+0x90>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8008e80 <MX_USART1_UART_Init+0x90>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008e14:	4b1a      	ldr	r3, [pc, #104]	@ (8008e80 <MX_USART1_UART_Init+0x90>)
 8008e16:	220c      	movs	r2, #12
 8008e18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e1a:	4b19      	ldr	r3, [pc, #100]	@ (8008e80 <MX_USART1_UART_Init+0x90>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008e20:	4b17      	ldr	r3, [pc, #92]	@ (8008e80 <MX_USART1_UART_Init+0x90>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008e26:	4b16      	ldr	r3, [pc, #88]	@ (8008e80 <MX_USART1_UART_Init+0x90>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008e2c:	4b14      	ldr	r3, [pc, #80]	@ (8008e80 <MX_USART1_UART_Init+0x90>)
 8008e2e:	2200      	movs	r2, #0
 8008e30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008e32:	4b13      	ldr	r3, [pc, #76]	@ (8008e80 <MX_USART1_UART_Init+0x90>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008e38:	4811      	ldr	r0, [pc, #68]	@ (8008e80 <MX_USART1_UART_Init+0x90>)
 8008e3a:	f00e fe0f 	bl	8017a5c <HAL_UART_Init>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d001      	beq.n	8008e48 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8008e44:	f7fe fde4 	bl	8007a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008e48:	2100      	movs	r1, #0
 8008e4a:	480d      	ldr	r0, [pc, #52]	@ (8008e80 <MX_USART1_UART_Init+0x90>)
 8008e4c:	f011 fca3 	bl	801a796 <HAL_UARTEx_SetTxFifoThreshold>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8008e56:	f7fe fddb 	bl	8007a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	4808      	ldr	r0, [pc, #32]	@ (8008e80 <MX_USART1_UART_Init+0x90>)
 8008e5e:	f011 fcd8 	bl	801a812 <HAL_UARTEx_SetRxFifoThreshold>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8008e68:	f7fe fdd2 	bl	8007a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008e6c:	4804      	ldr	r0, [pc, #16]	@ (8008e80 <MX_USART1_UART_Init+0x90>)
 8008e6e:	f011 fc59 	bl	801a724 <HAL_UARTEx_DisableFifoMode>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8008e78:	f7fe fdca 	bl	8007a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008e7c:	bf00      	nop
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	240004b0 	.word	0x240004b0
 8008e84:	40011000 	.word	0x40011000

08008e88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b0b8      	sub	sp, #224	@ 0xe0
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e90:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008e94:	2200      	movs	r2, #0
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	605a      	str	r2, [r3, #4]
 8008e9a:	609a      	str	r2, [r3, #8]
 8008e9c:	60da      	str	r2, [r3, #12]
 8008e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008ea0:	f107 0310 	add.w	r3, r7, #16
 8008ea4:	22b8      	movs	r2, #184	@ 0xb8
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f014 fef3 	bl	801dc94 <memset>
  if(uartHandle->Instance==USART1)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a2b      	ldr	r2, [pc, #172]	@ (8008f60 <HAL_UART_MspInit+0xd8>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d14e      	bne.n	8008f56 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008eb8:	f04f 0201 	mov.w	r2, #1
 8008ebc:	f04f 0300 	mov.w	r3, #0
 8008ec0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008eca:	f107 0310 	add.w	r3, r7, #16
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f008 feb8 	bl	8011c44 <HAL_RCCEx_PeriphCLKConfig>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d001      	beq.n	8008ede <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8008eda:	f7fe fd99 	bl	8007a10 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008ede:	4b21      	ldr	r3, [pc, #132]	@ (8008f64 <HAL_UART_MspInit+0xdc>)
 8008ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8008f64 <HAL_UART_MspInit+0xdc>)
 8008ee6:	f043 0310 	orr.w	r3, r3, #16
 8008eea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008eee:	4b1d      	ldr	r3, [pc, #116]	@ (8008f64 <HAL_UART_MspInit+0xdc>)
 8008ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ef4:	f003 0310 	and.w	r3, r3, #16
 8008ef8:	60fb      	str	r3, [r7, #12]
 8008efa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008efc:	4b19      	ldr	r3, [pc, #100]	@ (8008f64 <HAL_UART_MspInit+0xdc>)
 8008efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f02:	4a18      	ldr	r2, [pc, #96]	@ (8008f64 <HAL_UART_MspInit+0xdc>)
 8008f04:	f043 0301 	orr.w	r3, r3, #1
 8008f08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008f0c:	4b15      	ldr	r3, [pc, #84]	@ (8008f64 <HAL_UART_MspInit+0xdc>)
 8008f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	60bb      	str	r3, [r7, #8]
 8008f18:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008f1a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8008f1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f22:	2302      	movs	r3, #2
 8008f24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008f34:	2307      	movs	r3, #7
 8008f36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f3a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4809      	ldr	r0, [pc, #36]	@ (8008f68 <HAL_UART_MspInit+0xe0>)
 8008f42:	f005 f86d 	bl	800e020 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008f46:	2200      	movs	r2, #0
 8008f48:	2100      	movs	r1, #0
 8008f4a:	2025      	movs	r0, #37	@ 0x25
 8008f4c:	f002 f969 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008f50:	2025      	movs	r0, #37	@ 0x25
 8008f52:	f002 f980 	bl	800b256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008f56:	bf00      	nop
 8008f58:	37e0      	adds	r7, #224	@ 0xe0
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	40011000 	.word	0x40011000
 8008f64:	58024400 	.word	0x58024400
 8008f68:	58020000 	.word	0x58020000

08008f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008f6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008fa4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008f70:	f7ff fbe6 	bl	8008740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008f74:	480c      	ldr	r0, [pc, #48]	@ (8008fa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008f76:	490d      	ldr	r1, [pc, #52]	@ (8008fac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008f78:	4a0d      	ldr	r2, [pc, #52]	@ (8008fb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008f7c:	e002      	b.n	8008f84 <LoopCopyDataInit>

08008f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008f82:	3304      	adds	r3, #4

08008f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008f88:	d3f9      	bcc.n	8008f7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8008fb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008f8c:	4c0a      	ldr	r4, [pc, #40]	@ (8008fb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008f90:	e001      	b.n	8008f96 <LoopFillZerobss>

08008f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008f94:	3204      	adds	r2, #4

08008f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008f98:	d3fb      	bcc.n	8008f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008f9a:	f014 fe89 	bl	801dcb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008f9e:	f7fb fef7 	bl	8004d90 <main>
  bx  lr
 8008fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008fa4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8008fa8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008fac:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8008fb0:	08020518 	.word	0x08020518
  ldr r2, =_sbss
 8008fb4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8008fb8:	240008ac 	.word	0x240008ac

08008fbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008fbc:	e7fe      	b.n	8008fbc <ADC3_IRQHandler>
	...

08008fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008fc6:	2003      	movs	r0, #3
 8008fc8:	f002 f920 	bl	800b20c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008fcc:	f008 fc64 	bl	8011898 <HAL_RCC_GetSysClockFreq>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	4b15      	ldr	r3, [pc, #84]	@ (8009028 <HAL_Init+0x68>)
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	0a1b      	lsrs	r3, r3, #8
 8008fd8:	f003 030f 	and.w	r3, r3, #15
 8008fdc:	4913      	ldr	r1, [pc, #76]	@ (800902c <HAL_Init+0x6c>)
 8008fde:	5ccb      	ldrb	r3, [r1, r3]
 8008fe0:	f003 031f 	and.w	r3, r3, #31
 8008fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008fea:	4b0f      	ldr	r3, [pc, #60]	@ (8009028 <HAL_Init+0x68>)
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	f003 030f 	and.w	r3, r3, #15
 8008ff2:	4a0e      	ldr	r2, [pc, #56]	@ (800902c <HAL_Init+0x6c>)
 8008ff4:	5cd3      	ldrb	r3, [r2, r3]
 8008ff6:	f003 031f 	and.w	r3, r3, #31
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8009000:	4a0b      	ldr	r2, [pc, #44]	@ (8009030 <HAL_Init+0x70>)
 8009002:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009004:	4a0b      	ldr	r2, [pc, #44]	@ (8009034 <HAL_Init+0x74>)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800900a:	200f      	movs	r0, #15
 800900c:	f000 f814 	bl	8009038 <HAL_InitTick>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e002      	b.n	8009020 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800901a:	f7fe febb 	bl	8007d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	58024400 	.word	0x58024400
 800902c:	0801e75c 	.word	0x0801e75c
 8009030:	24000008 	.word	0x24000008
 8009034:	24000004 	.word	0x24000004

08009038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8009040:	4b15      	ldr	r3, [pc, #84]	@ (8009098 <HAL_InitTick+0x60>)
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d101      	bne.n	800904c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e021      	b.n	8009090 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800904c:	4b13      	ldr	r3, [pc, #76]	@ (800909c <HAL_InitTick+0x64>)
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	4b11      	ldr	r3, [pc, #68]	@ (8009098 <HAL_InitTick+0x60>)
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	4619      	mov	r1, r3
 8009056:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800905a:	fbb3 f3f1 	udiv	r3, r3, r1
 800905e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009062:	4618      	mov	r0, r3
 8009064:	f002 f905 	bl	800b272 <HAL_SYSTICK_Config>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e00e      	b.n	8009090 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b0f      	cmp	r3, #15
 8009076:	d80a      	bhi.n	800908e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009078:	2200      	movs	r2, #0
 800907a:	6879      	ldr	r1, [r7, #4]
 800907c:	f04f 30ff 	mov.w	r0, #4294967295
 8009080:	f002 f8cf 	bl	800b222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009084:	4a06      	ldr	r2, [pc, #24]	@ (80090a0 <HAL_InitTick+0x68>)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	e000      	b.n	8009090 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
}
 8009090:	4618      	mov	r0, r3
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	24000010 	.word	0x24000010
 800909c:	24000004 	.word	0x24000004
 80090a0:	2400000c 	.word	0x2400000c

080090a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80090a4:	b480      	push	{r7}
 80090a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80090a8:	4b06      	ldr	r3, [pc, #24]	@ (80090c4 <HAL_IncTick+0x20>)
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	461a      	mov	r2, r3
 80090ae:	4b06      	ldr	r3, [pc, #24]	@ (80090c8 <HAL_IncTick+0x24>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4413      	add	r3, r2
 80090b4:	4a04      	ldr	r2, [pc, #16]	@ (80090c8 <HAL_IncTick+0x24>)
 80090b6:	6013      	str	r3, [r2, #0]
}
 80090b8:	bf00      	nop
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	24000010 	.word	0x24000010
 80090c8:	24000544 	.word	0x24000544

080090cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80090cc:	b480      	push	{r7}
 80090ce:	af00      	add	r7, sp, #0
  return uwTick;
 80090d0:	4b03      	ldr	r3, [pc, #12]	@ (80090e0 <HAL_GetTick+0x14>)
 80090d2:	681b      	ldr	r3, [r3, #0]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	24000544 	.word	0x24000544

080090e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80090ec:	f7ff ffee 	bl	80090cc <HAL_GetTick>
 80090f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fc:	d005      	beq.n	800910a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80090fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009128 <HAL_Delay+0x44>)
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	461a      	mov	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	4413      	add	r3, r2
 8009108:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800910a:	bf00      	nop
 800910c:	f7ff ffde 	bl	80090cc <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	429a      	cmp	r2, r3
 800911a:	d8f7      	bhi.n	800910c <HAL_Delay+0x28>
  {
  }
}
 800911c:	bf00      	nop
 800911e:	bf00      	nop
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	24000010 	.word	0x24000010

0800912c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	431a      	orrs	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	609a      	str	r2, [r3, #8]
}
 8009146:	bf00      	nop
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009152:	b480      	push	{r7}
 8009154:	b083      	sub	sp, #12
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	431a      	orrs	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	609a      	str	r2, [r3, #8]
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8009188:	4618      	mov	r0, r3
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009194:	b480      	push	{r7}
 8009196:	b087      	sub	sp, #28
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
 80091a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3360      	adds	r3, #96	@ 0x60
 80091a6:	461a      	mov	r2, r3
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4413      	add	r3, r2
 80091ae:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	4a10      	ldr	r2, [pc, #64]	@ (80091f4 <LL_ADC_SetOffset+0x60>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d10b      	bne.n	80091d0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80091ce:	e00b      	b.n	80091e8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	430b      	orrs	r3, r1
 80091e2:	431a      	orrs	r2, r3
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	601a      	str	r2, [r3, #0]
}
 80091e8:	bf00      	nop
 80091ea:	371c      	adds	r7, #28
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	58026000 	.word	0x58026000

080091f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	3360      	adds	r3, #96	@ 0x60
 8009206:	461a      	mov	r2, r3
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009218:	4618      	mov	r0, r3
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f003 031f 	and.w	r3, r3, #31
 800923e:	6879      	ldr	r1, [r7, #4]
 8009240:	fa01 f303 	lsl.w	r3, r1, r3
 8009244:	431a      	orrs	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	611a      	str	r2, [r3, #16]
}
 800924a:	bf00      	nop
 800924c:	3714      	adds	r7, #20
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
	...

08009258 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8009258:	b480      	push	{r7}
 800925a:	b087      	sub	sp, #28
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4a0c      	ldr	r2, [pc, #48]	@ (8009298 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d00e      	beq.n	800928a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3360      	adds	r3, #96	@ 0x60
 8009270:	461a      	mov	r2, r3
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4413      	add	r3, r2
 8009278:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	431a      	orrs	r2, r3
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	601a      	str	r2, [r3, #0]
  }
}
 800928a:	bf00      	nop
 800928c:	371c      	adds	r7, #28
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	58026000 	.word	0x58026000

0800929c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800929c:	b480      	push	{r7}
 800929e:	b087      	sub	sp, #28
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4a0c      	ldr	r2, [pc, #48]	@ (80092dc <LL_ADC_SetOffsetSaturation+0x40>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d10e      	bne.n	80092ce <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3360      	adds	r3, #96	@ 0x60
 80092b4:	461a      	mov	r2, r3
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4413      	add	r3, r2
 80092bc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	431a      	orrs	r2, r3
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80092ce:	bf00      	nop
 80092d0:	371c      	adds	r7, #28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	58026000 	.word	0x58026000

080092e0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b087      	sub	sp, #28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	4a0c      	ldr	r2, [pc, #48]	@ (8009320 <LL_ADC_SetOffsetSign+0x40>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d10e      	bne.n	8009312 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3360      	adds	r3, #96	@ 0x60
 80092f8:	461a      	mov	r2, r3
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	431a      	orrs	r2, r3
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8009312:	bf00      	nop
 8009314:	371c      	adds	r7, #28
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	58026000 	.word	0x58026000

08009324 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009324:	b480      	push	{r7}
 8009326:	b087      	sub	sp, #28
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	3360      	adds	r3, #96	@ 0x60
 8009334:	461a      	mov	r2, r3
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	4a0c      	ldr	r2, [pc, #48]	@ (8009374 <LL_ADC_SetOffsetState+0x50>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d108      	bne.n	8009358 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	431a      	orrs	r2, r3
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8009356:	e007      	b.n	8009368 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	431a      	orrs	r2, r3
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	601a      	str	r2, [r3, #0]
}
 8009368:	bf00      	nop
 800936a:	371c      	adds	r7, #28
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr
 8009374:	58026000 	.word	0x58026000

08009378 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800938c:	2301      	movs	r3, #1
 800938e:	e000      	b.n	8009392 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	370c      	adds	r7, #12
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800939e:	b480      	push	{r7}
 80093a0:	b087      	sub	sp, #28
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	60f8      	str	r0, [r7, #12]
 80093a6:	60b9      	str	r1, [r7, #8]
 80093a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	3330      	adds	r3, #48	@ 0x30
 80093ae:	461a      	mov	r2, r3
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	0a1b      	lsrs	r3, r3, #8
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	f003 030c 	and.w	r3, r3, #12
 80093ba:	4413      	add	r3, r2
 80093bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	f003 031f 	and.w	r3, r3, #31
 80093c8:	211f      	movs	r1, #31
 80093ca:	fa01 f303 	lsl.w	r3, r1, r3
 80093ce:	43db      	mvns	r3, r3
 80093d0:	401a      	ands	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	0e9b      	lsrs	r3, r3, #26
 80093d6:	f003 011f 	and.w	r1, r3, #31
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	f003 031f 	and.w	r3, r3, #31
 80093e0:	fa01 f303 	lsl.w	r3, r1, r3
 80093e4:	431a      	orrs	r2, r3
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80093ea:	bf00      	nop
 80093ec:	371c      	adds	r7, #28
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80093f6:	b480      	push	{r7}
 80093f8:	b083      	sub	sp, #12
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	f023 0203 	bic.w	r2, r3, #3
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	431a      	orrs	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	60da      	str	r2, [r3, #12]
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	f043 0201 	orr.w	r2, r3, #1
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	60da      	str	r2, [r3, #12]
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a08      	ldr	r2, [pc, #32]	@ (800946c <LL_ADC_REG_SetDMATransferMode+0x30>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d107      	bne.n	800945e <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	f023 0203 	bic.w	r2, r3, #3
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	431a      	orrs	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	60da      	str	r2, [r3, #12]
  }
}
 800945e:	bf00      	nop
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	58026000 	.word	0x58026000

08009470 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800947c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8009484:	2301      	movs	r3, #1
 8009486:	e000      	b.n	800948a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	370c      	adds	r7, #12
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr

08009496 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009496:	b480      	push	{r7}
 8009498:	b087      	sub	sp, #28
 800949a:	af00      	add	r7, sp, #0
 800949c:	60f8      	str	r0, [r7, #12]
 800949e:	60b9      	str	r1, [r7, #8]
 80094a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	3314      	adds	r3, #20
 80094a6:	461a      	mov	r2, r3
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	0e5b      	lsrs	r3, r3, #25
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	f003 0304 	and.w	r3, r3, #4
 80094b2:	4413      	add	r3, r2
 80094b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	0d1b      	lsrs	r3, r3, #20
 80094be:	f003 031f 	and.w	r3, r3, #31
 80094c2:	2107      	movs	r1, #7
 80094c4:	fa01 f303 	lsl.w	r3, r1, r3
 80094c8:	43db      	mvns	r3, r3
 80094ca:	401a      	ands	r2, r3
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	0d1b      	lsrs	r3, r3, #20
 80094d0:	f003 031f 	and.w	r3, r3, #31
 80094d4:	6879      	ldr	r1, [r7, #4]
 80094d6:	fa01 f303 	lsl.w	r3, r1, r3
 80094da:	431a      	orrs	r2, r3
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80094e0:	bf00      	nop
 80094e2:	371c      	adds	r7, #28
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	4a1a      	ldr	r2, [pc, #104]	@ (8009564 <LL_ADC_SetChannelSingleDiff+0x78>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d115      	bne.n	800952c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800950c:	43db      	mvns	r3, r3
 800950e:	401a      	ands	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f003 0318 	and.w	r3, r3, #24
 8009516:	4914      	ldr	r1, [pc, #80]	@ (8009568 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009518:	40d9      	lsrs	r1, r3
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	400b      	ands	r3, r1
 800951e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009522:	431a      	orrs	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800952a:	e014      	b.n	8009556 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009538:	43db      	mvns	r3, r3
 800953a:	401a      	ands	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f003 0318 	and.w	r3, r3, #24
 8009542:	4909      	ldr	r1, [pc, #36]	@ (8009568 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009544:	40d9      	lsrs	r1, r3
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	400b      	ands	r3, r1
 800954a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800954e:	431a      	orrs	r2, r3
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8009556:	bf00      	nop
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	58026000 	.word	0x58026000
 8009568:	000fffff 	.word	0x000fffff

0800956c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f003 031f 	and.w	r3, r3, #31
}
 800957c:	4618      	mov	r0, r3
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8009598:	4618      	mov	r0, r3
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	689a      	ldr	r2, [r3, #8]
 80095b0:	4b04      	ldr	r3, [pc, #16]	@ (80095c4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80095b2:	4013      	ands	r3, r2
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	6093      	str	r3, [r2, #8]
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	5fffffc0 	.word	0x5fffffc0

080095c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095dc:	d101      	bne.n	80095e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80095de:	2301      	movs	r3, #1
 80095e0:	e000      	b.n	80095e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689a      	ldr	r2, [r3, #8]
 80095fc:	4b05      	ldr	r3, [pc, #20]	@ (8009614 <LL_ADC_EnableInternalRegulator+0x24>)
 80095fe:	4013      	ands	r3, r2
 8009600:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr
 8009614:	6fffffc0 	.word	0x6fffffc0

08009618 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009628:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800962c:	d101      	bne.n	8009632 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800962e:	2301      	movs	r3, #1
 8009630:	e000      	b.n	8009634 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	689a      	ldr	r2, [r3, #8]
 800964c:	4b05      	ldr	r3, [pc, #20]	@ (8009664 <LL_ADC_Enable+0x24>)
 800964e:	4013      	ands	r3, r2
 8009650:	f043 0201 	orr.w	r2, r3, #1
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr
 8009664:	7fffffc0 	.word	0x7fffffc0

08009668 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b01      	cmp	r3, #1
 800967a:	d101      	bne.n	8009680 <LL_ADC_IsEnabled+0x18>
 800967c:	2301      	movs	r3, #1
 800967e:	e000      	b.n	8009682 <LL_ADC_IsEnabled+0x1a>
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
	...

08009690 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	689a      	ldr	r2, [r3, #8]
 800969c:	4b05      	ldr	r3, [pc, #20]	@ (80096b4 <LL_ADC_REG_StartConversion+0x24>)
 800969e:	4013      	ands	r3, r2
 80096a0:	f043 0204 	orr.w	r2, r3, #4
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	7fffffc0 	.word	0x7fffffc0

080096b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	f003 0304 	and.w	r3, r3, #4
 80096c8:	2b04      	cmp	r3, #4
 80096ca:	d101      	bne.n	80096d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80096cc:	2301      	movs	r3, #1
 80096ce:	e000      	b.n	80096d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80096de:	b480      	push	{r7}
 80096e0:	b083      	sub	sp, #12
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f003 0308 	and.w	r3, r3, #8
 80096ee:	2b08      	cmp	r3, #8
 80096f0:	d101      	bne.n	80096f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80096f2:	2301      	movs	r3, #1
 80096f4:	e000      	b.n	80096f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009704:	b590      	push	{r4, r7, lr}
 8009706:	b089      	sub	sp, #36	@ 0x24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009710:	2300      	movs	r3, #0
 8009712:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e1ee      	b.n	8009afc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009728:	2b00      	cmp	r3, #0
 800972a:	d109      	bne.n	8009740 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7f9 ff97 	bl	8003660 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4618      	mov	r0, r3
 8009746:	f7ff ff3f 	bl	80095c8 <LL_ADC_IsDeepPowerDownEnabled>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d004      	beq.n	800975a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4618      	mov	r0, r3
 8009756:	f7ff ff25 	bl	80095a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4618      	mov	r0, r3
 8009760:	f7ff ff5a 	bl	8009618 <LL_ADC_IsInternalRegulatorEnabled>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d114      	bne.n	8009794 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4618      	mov	r0, r3
 8009770:	f7ff ff3e 	bl	80095f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009774:	4b8e      	ldr	r3, [pc, #568]	@ (80099b0 <HAL_ADC_Init+0x2ac>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	099b      	lsrs	r3, r3, #6
 800977a:	4a8e      	ldr	r2, [pc, #568]	@ (80099b4 <HAL_ADC_Init+0x2b0>)
 800977c:	fba2 2303 	umull	r2, r3, r2, r3
 8009780:	099b      	lsrs	r3, r3, #6
 8009782:	3301      	adds	r3, #1
 8009784:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009786:	e002      	b.n	800978e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	3b01      	subs	r3, #1
 800978c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1f9      	bne.n	8009788 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4618      	mov	r0, r3
 800979a:	f7ff ff3d 	bl	8009618 <LL_ADC_IsInternalRegulatorEnabled>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10d      	bne.n	80097c0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097a8:	f043 0210 	orr.w	r2, r3, #16
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097b4:	f043 0201 	orr.w	r2, r3, #1
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7ff ff77 	bl	80096b8 <LL_ADC_REG_IsConversionOngoing>
 80097ca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097d0:	f003 0310 	and.w	r3, r3, #16
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f040 8188 	bne.w	8009aea <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f040 8184 	bne.w	8009aea <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097e6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80097ea:	f043 0202 	orr.w	r2, r3, #2
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7ff ff36 	bl	8009668 <LL_ADC_IsEnabled>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d136      	bne.n	8009870 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a6c      	ldr	r2, [pc, #432]	@ (80099b8 <HAL_ADC_Init+0x2b4>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d004      	beq.n	8009816 <HAL_ADC_Init+0x112>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a6a      	ldr	r2, [pc, #424]	@ (80099bc <HAL_ADC_Init+0x2b8>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d10e      	bne.n	8009834 <HAL_ADC_Init+0x130>
 8009816:	4868      	ldr	r0, [pc, #416]	@ (80099b8 <HAL_ADC_Init+0x2b4>)
 8009818:	f7ff ff26 	bl	8009668 <LL_ADC_IsEnabled>
 800981c:	4604      	mov	r4, r0
 800981e:	4867      	ldr	r0, [pc, #412]	@ (80099bc <HAL_ADC_Init+0x2b8>)
 8009820:	f7ff ff22 	bl	8009668 <LL_ADC_IsEnabled>
 8009824:	4603      	mov	r3, r0
 8009826:	4323      	orrs	r3, r4
 8009828:	2b00      	cmp	r3, #0
 800982a:	bf0c      	ite	eq
 800982c:	2301      	moveq	r3, #1
 800982e:	2300      	movne	r3, #0
 8009830:	b2db      	uxtb	r3, r3
 8009832:	e008      	b.n	8009846 <HAL_ADC_Init+0x142>
 8009834:	4862      	ldr	r0, [pc, #392]	@ (80099c0 <HAL_ADC_Init+0x2bc>)
 8009836:	f7ff ff17 	bl	8009668 <LL_ADC_IsEnabled>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	bf0c      	ite	eq
 8009840:	2301      	moveq	r3, #1
 8009842:	2300      	movne	r3, #0
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b00      	cmp	r3, #0
 8009848:	d012      	beq.n	8009870 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a5a      	ldr	r2, [pc, #360]	@ (80099b8 <HAL_ADC_Init+0x2b4>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d004      	beq.n	800985e <HAL_ADC_Init+0x15a>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a58      	ldr	r2, [pc, #352]	@ (80099bc <HAL_ADC_Init+0x2b8>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d101      	bne.n	8009862 <HAL_ADC_Init+0x15e>
 800985e:	4a59      	ldr	r2, [pc, #356]	@ (80099c4 <HAL_ADC_Init+0x2c0>)
 8009860:	e000      	b.n	8009864 <HAL_ADC_Init+0x160>
 8009862:	4a59      	ldr	r2, [pc, #356]	@ (80099c8 <HAL_ADC_Init+0x2c4>)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	4619      	mov	r1, r3
 800986a:	4610      	mov	r0, r2
 800986c:	f7ff fc5e 	bl	800912c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a52      	ldr	r2, [pc, #328]	@ (80099c0 <HAL_ADC_Init+0x2bc>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d129      	bne.n	80098ce <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	7e5b      	ldrb	r3, [r3, #25]
 800987e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009884:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800988a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	2b08      	cmp	r3, #8
 8009892:	d013      	beq.n	80098bc <HAL_ADC_Init+0x1b8>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	2b0c      	cmp	r3, #12
 800989a:	d00d      	beq.n	80098b8 <HAL_ADC_Init+0x1b4>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	2b1c      	cmp	r3, #28
 80098a2:	d007      	beq.n	80098b4 <HAL_ADC_Init+0x1b0>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	2b18      	cmp	r3, #24
 80098aa:	d101      	bne.n	80098b0 <HAL_ADC_Init+0x1ac>
 80098ac:	2318      	movs	r3, #24
 80098ae:	e006      	b.n	80098be <HAL_ADC_Init+0x1ba>
 80098b0:	2300      	movs	r3, #0
 80098b2:	e004      	b.n	80098be <HAL_ADC_Init+0x1ba>
 80098b4:	2310      	movs	r3, #16
 80098b6:	e002      	b.n	80098be <HAL_ADC_Init+0x1ba>
 80098b8:	2308      	movs	r3, #8
 80098ba:	e000      	b.n	80098be <HAL_ADC_Init+0x1ba>
 80098bc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80098be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098c6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80098c8:	4313      	orrs	r3, r2
 80098ca:	61bb      	str	r3, [r7, #24]
 80098cc:	e00e      	b.n	80098ec <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	7e5b      	ldrb	r3, [r3, #25]
 80098d2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80098d8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80098de:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80098e8:	4313      	orrs	r3, r2
 80098ea:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d106      	bne.n	8009904 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098fa:	3b01      	subs	r3, #1
 80098fc:	045b      	lsls	r3, r3, #17
 80098fe:	69ba      	ldr	r2, [r7, #24]
 8009900:	4313      	orrs	r3, r2
 8009902:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009908:	2b00      	cmp	r3, #0
 800990a:	d009      	beq.n	8009920 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009910:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009918:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800991a:	69ba      	ldr	r2, [r7, #24]
 800991c:	4313      	orrs	r3, r2
 800991e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a26      	ldr	r2, [pc, #152]	@ (80099c0 <HAL_ADC_Init+0x2bc>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d115      	bne.n	8009956 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68da      	ldr	r2, [r3, #12]
 8009930:	4b26      	ldr	r3, [pc, #152]	@ (80099cc <HAL_ADC_Init+0x2c8>)
 8009932:	4013      	ands	r3, r2
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	6812      	ldr	r2, [r2, #0]
 8009938:	69b9      	ldr	r1, [r7, #24]
 800993a:	430b      	orrs	r3, r1
 800993c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	430a      	orrs	r2, r1
 8009952:	611a      	str	r2, [r3, #16]
 8009954:	e009      	b.n	800996a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68da      	ldr	r2, [r3, #12]
 800995c:	4b1c      	ldr	r3, [pc, #112]	@ (80099d0 <HAL_ADC_Init+0x2cc>)
 800995e:	4013      	ands	r3, r2
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	6812      	ldr	r2, [r2, #0]
 8009964:	69b9      	ldr	r1, [r7, #24]
 8009966:	430b      	orrs	r3, r1
 8009968:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4618      	mov	r0, r3
 8009970:	f7ff fea2 	bl	80096b8 <LL_ADC_REG_IsConversionOngoing>
 8009974:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4618      	mov	r0, r3
 800997c:	f7ff feaf 	bl	80096de <LL_ADC_INJ_IsConversionOngoing>
 8009980:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	f040 808e 	bne.w	8009aa6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2b00      	cmp	r3, #0
 800998e:	f040 808a 	bne.w	8009aa6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a0a      	ldr	r2, [pc, #40]	@ (80099c0 <HAL_ADC_Init+0x2bc>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d11b      	bne.n	80099d4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	7e1b      	ldrb	r3, [r3, #24]
 80099a0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80099a8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80099aa:	4313      	orrs	r3, r2
 80099ac:	61bb      	str	r3, [r7, #24]
 80099ae:	e018      	b.n	80099e2 <HAL_ADC_Init+0x2de>
 80099b0:	24000004 	.word	0x24000004
 80099b4:	053e2d63 	.word	0x053e2d63
 80099b8:	40022000 	.word	0x40022000
 80099bc:	40022100 	.word	0x40022100
 80099c0:	58026000 	.word	0x58026000
 80099c4:	40022300 	.word	0x40022300
 80099c8:	58026300 	.word	0x58026300
 80099cc:	fff04007 	.word	0xfff04007
 80099d0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	7e1b      	ldrb	r3, [r3, #24]
 80099d8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80099de:	4313      	orrs	r3, r2
 80099e0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68da      	ldr	r2, [r3, #12]
 80099e8:	4b46      	ldr	r3, [pc, #280]	@ (8009b04 <HAL_ADC_Init+0x400>)
 80099ea:	4013      	ands	r3, r2
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	6812      	ldr	r2, [r2, #0]
 80099f0:	69b9      	ldr	r1, [r7, #24]
 80099f2:	430b      	orrs	r3, r1
 80099f4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d137      	bne.n	8009a70 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a04:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a3f      	ldr	r2, [pc, #252]	@ (8009b08 <HAL_ADC_Init+0x404>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d116      	bne.n	8009a3e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	691a      	ldr	r2, [r3, #16]
 8009a16:	4b3d      	ldr	r3, [pc, #244]	@ (8009b0c <HAL_ADC_Init+0x408>)
 8009a18:	4013      	ands	r3, r2
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009a22:	4311      	orrs	r1, r2
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009a28:	4311      	orrs	r1, r2
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009a2e:	430a      	orrs	r2, r1
 8009a30:	431a      	orrs	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f042 0201 	orr.w	r2, r2, #1
 8009a3a:	611a      	str	r2, [r3, #16]
 8009a3c:	e020      	b.n	8009a80 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	691a      	ldr	r2, [r3, #16]
 8009a44:	4b32      	ldr	r3, [pc, #200]	@ (8009b10 <HAL_ADC_Init+0x40c>)
 8009a46:	4013      	ands	r3, r2
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009a4c:	3a01      	subs	r2, #1
 8009a4e:	0411      	lsls	r1, r2, #16
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009a54:	4311      	orrs	r1, r2
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009a5a:	4311      	orrs	r1, r2
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009a60:	430a      	orrs	r2, r1
 8009a62:	431a      	orrs	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f042 0201 	orr.w	r2, r2, #1
 8009a6c:	611a      	str	r2, [r3, #16]
 8009a6e:	e007      	b.n	8009a80 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	691a      	ldr	r2, [r3, #16]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f022 0201 	bic.w	r2, r2, #1
 8009a7e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	430a      	orrs	r2, r1
 8009a94:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8009b08 <HAL_ADC_Init+0x404>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d002      	beq.n	8009aa6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f001 f9c3 	bl	800ae2c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d10c      	bne.n	8009ac8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ab4:	f023 010f 	bic.w	r1, r3, #15
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	69db      	ldr	r3, [r3, #28]
 8009abc:	1e5a      	subs	r2, r3, #1
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	631a      	str	r2, [r3, #48]	@ 0x30
 8009ac6:	e007      	b.n	8009ad8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f022 020f 	bic.w	r2, r2, #15
 8009ad6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009adc:	f023 0303 	bic.w	r3, r3, #3
 8009ae0:	f043 0201 	orr.w	r2, r3, #1
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	661a      	str	r2, [r3, #96]	@ 0x60
 8009ae8:	e007      	b.n	8009afa <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009aee:	f043 0210 	orr.w	r2, r3, #16
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009afa:	7ffb      	ldrb	r3, [r7, #31]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3724      	adds	r7, #36	@ 0x24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd90      	pop	{r4, r7, pc}
 8009b04:	ffffbffc 	.word	0xffffbffc
 8009b08:	58026000 	.word	0x58026000
 8009b0c:	fc00f81f 	.word	0xfc00f81f
 8009b10:	fc00f81e 	.word	0xfc00f81e

08009b14 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b086      	sub	sp, #24
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a60      	ldr	r2, [pc, #384]	@ (8009ca8 <HAL_ADC_Start_DMA+0x194>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d004      	beq.n	8009b34 <HAL_ADC_Start_DMA+0x20>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a5f      	ldr	r2, [pc, #380]	@ (8009cac <HAL_ADC_Start_DMA+0x198>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d101      	bne.n	8009b38 <HAL_ADC_Start_DMA+0x24>
 8009b34:	4b5e      	ldr	r3, [pc, #376]	@ (8009cb0 <HAL_ADC_Start_DMA+0x19c>)
 8009b36:	e000      	b.n	8009b3a <HAL_ADC_Start_DMA+0x26>
 8009b38:	4b5e      	ldr	r3, [pc, #376]	@ (8009cb4 <HAL_ADC_Start_DMA+0x1a0>)
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7ff fd16 	bl	800956c <LL_ADC_GetMultimode>
 8009b40:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff fdb6 	bl	80096b8 <LL_ADC_REG_IsConversionOngoing>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f040 80a2 	bne.w	8009c98 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d101      	bne.n	8009b62 <HAL_ADC_Start_DMA+0x4e>
 8009b5e:	2302      	movs	r3, #2
 8009b60:	e09d      	b.n	8009c9e <HAL_ADC_Start_DMA+0x18a>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d006      	beq.n	8009b7e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	2b05      	cmp	r3, #5
 8009b74:	d003      	beq.n	8009b7e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	2b09      	cmp	r3, #9
 8009b7a:	f040 8086 	bne.w	8009c8a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f001 f836 	bl	800abf0 <ADC_Enable>
 8009b84:	4603      	mov	r3, r0
 8009b86:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009b88:	7dfb      	ldrb	r3, [r7, #23]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d178      	bne.n	8009c80 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009b92:	4b49      	ldr	r3, [pc, #292]	@ (8009cb8 <HAL_ADC_Start_DMA+0x1a4>)
 8009b94:	4013      	ands	r3, r2
 8009b96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a42      	ldr	r2, [pc, #264]	@ (8009cac <HAL_ADC_Start_DMA+0x198>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d002      	beq.n	8009bae <HAL_ADC_Start_DMA+0x9a>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	e000      	b.n	8009bb0 <HAL_ADC_Start_DMA+0x9c>
 8009bae:	4b3e      	ldr	r3, [pc, #248]	@ (8009ca8 <HAL_ADC_Start_DMA+0x194>)
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	6812      	ldr	r2, [r2, #0]
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d002      	beq.n	8009bbe <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d105      	bne.n	8009bca <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bc2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d006      	beq.n	8009be4 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bda:	f023 0206 	bic.w	r2, r3, #6
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	665a      	str	r2, [r3, #100]	@ 0x64
 8009be2:	e002      	b.n	8009bea <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bee:	4a33      	ldr	r2, [pc, #204]	@ (8009cbc <HAL_ADC_Start_DMA+0x1a8>)
 8009bf0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bf6:	4a32      	ldr	r2, [pc, #200]	@ (8009cc0 <HAL_ADC_Start_DMA+0x1ac>)
 8009bf8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bfe:	4a31      	ldr	r2, [pc, #196]	@ (8009cc4 <HAL_ADC_Start_DMA+0x1b0>)
 8009c00:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	221c      	movs	r2, #28
 8009c08:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f042 0210 	orr.w	r2, r2, #16
 8009c20:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a28      	ldr	r2, [pc, #160]	@ (8009cc8 <HAL_ADC_Start_DMA+0x1b4>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d10f      	bne.n	8009c4c <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009c36:	005b      	lsls	r3, r3, #1
 8009c38:	4619      	mov	r1, r3
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	f7ff fbfe 	bl	800943c <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7ff fbe9 	bl	800941c <LL_ADC_EnableDMAReq>
 8009c4a:	e007      	b.n	8009c5c <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c54:	4619      	mov	r1, r3
 8009c56:	4610      	mov	r0, r2
 8009c58:	f7ff fbcd 	bl	80093f6 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3340      	adds	r3, #64	@ 0x40
 8009c66:	4619      	mov	r1, r3
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f001 fede 	bl	800ba2c <HAL_DMA_Start_IT>
 8009c70:	4603      	mov	r3, r0
 8009c72:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7ff fd09 	bl	8009690 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8009c7e:	e00d      	b.n	8009c9c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8009c88:	e008      	b.n	8009c9c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8009c96:	e001      	b.n	8009c9c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009c98:	2302      	movs	r3, #2
 8009c9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	40022000 	.word	0x40022000
 8009cac:	40022100 	.word	0x40022100
 8009cb0:	40022300 	.word	0x40022300
 8009cb4:	58026300 	.word	0x58026300
 8009cb8:	fffff0fe 	.word	0xfffff0fe
 8009cbc:	0800ad05 	.word	0x0800ad05
 8009cc0:	0800addd 	.word	0x0800addd
 8009cc4:	0800adf9 	.word	0x0800adf9
 8009cc8:	58026000 	.word	0x58026000

08009ccc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b08a      	sub	sp, #40	@ 0x28
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a87      	ldr	r2, [pc, #540]	@ (8009f0c <HAL_ADC_IRQHandler+0x240>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d004      	beq.n	8009cfc <HAL_ADC_IRQHandler+0x30>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a86      	ldr	r2, [pc, #536]	@ (8009f10 <HAL_ADC_IRQHandler+0x244>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d101      	bne.n	8009d00 <HAL_ADC_IRQHandler+0x34>
 8009cfc:	4b85      	ldr	r3, [pc, #532]	@ (8009f14 <HAL_ADC_IRQHandler+0x248>)
 8009cfe:	e000      	b.n	8009d02 <HAL_ADC_IRQHandler+0x36>
 8009d00:	4b85      	ldr	r3, [pc, #532]	@ (8009f18 <HAL_ADC_IRQHandler+0x24c>)
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7ff fc32 	bl	800956c <LL_ADC_GetMultimode>
 8009d08:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	f003 0302 	and.w	r3, r3, #2
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d017      	beq.n	8009d44 <HAL_ADC_IRQHandler+0x78>
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	f003 0302 	and.w	r3, r3, #2
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d012      	beq.n	8009d44 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d22:	f003 0310 	and.w	r3, r3, #16
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d105      	bne.n	8009d36 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d2e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f001 f98e 	bl	800b058 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2202      	movs	r2, #2
 8009d42:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	f003 0304 	and.w	r3, r3, #4
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d004      	beq.n	8009d58 <HAL_ADC_IRQHandler+0x8c>
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	f003 0304 	and.w	r3, r3, #4
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10a      	bne.n	8009d6e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 8083 	beq.w	8009e6a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	f003 0308 	and.w	r3, r3, #8
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d07d      	beq.n	8009e6a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d72:	f003 0310 	and.w	r3, r3, #16
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d105      	bne.n	8009d86 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d7e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7ff faf4 	bl	8009378 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d062      	beq.n	8009e5c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a5d      	ldr	r2, [pc, #372]	@ (8009f10 <HAL_ADC_IRQHandler+0x244>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d002      	beq.n	8009da6 <HAL_ADC_IRQHandler+0xda>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	e000      	b.n	8009da8 <HAL_ADC_IRQHandler+0xdc>
 8009da6:	4b59      	ldr	r3, [pc, #356]	@ (8009f0c <HAL_ADC_IRQHandler+0x240>)
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	6812      	ldr	r2, [r2, #0]
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d008      	beq.n	8009dc2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d005      	beq.n	8009dc2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	2b05      	cmp	r3, #5
 8009dba:	d002      	beq.n	8009dc2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	2b09      	cmp	r3, #9
 8009dc0:	d104      	bne.n	8009dcc <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	623b      	str	r3, [r7, #32]
 8009dca:	e00c      	b.n	8009de6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a4f      	ldr	r2, [pc, #316]	@ (8009f10 <HAL_ADC_IRQHandler+0x244>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d002      	beq.n	8009ddc <HAL_ADC_IRQHandler+0x110>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	e000      	b.n	8009dde <HAL_ADC_IRQHandler+0x112>
 8009ddc:	4b4b      	ldr	r3, [pc, #300]	@ (8009f0c <HAL_ADC_IRQHandler+0x240>)
 8009dde:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d135      	bne.n	8009e5c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0308 	and.w	r3, r3, #8
 8009dfa:	2b08      	cmp	r3, #8
 8009dfc:	d12e      	bne.n	8009e5c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7ff fc58 	bl	80096b8 <LL_ADC_REG_IsConversionOngoing>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d11a      	bne.n	8009e44 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	685a      	ldr	r2, [r3, #4]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f022 020c 	bic.w	r2, r2, #12
 8009e1c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d112      	bne.n	8009e5c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e3a:	f043 0201 	orr.w	r2, r3, #1
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	661a      	str	r2, [r3, #96]	@ 0x60
 8009e42:	e00b      	b.n	8009e5c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e48:	f043 0210 	orr.w	r2, r3, #16
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e54:	f043 0201 	orr.w	r2, r3, #1
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f96f 	bl	800a140 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	220c      	movs	r2, #12
 8009e68:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	f003 0320 	and.w	r3, r3, #32
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d004      	beq.n	8009e7e <HAL_ADC_IRQHandler+0x1b2>
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	f003 0320 	and.w	r3, r3, #32
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10b      	bne.n	8009e96 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 80a0 	beq.w	8009fca <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f000 809a 	beq.w	8009fca <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e9a:	f003 0310 	and.w	r3, r3, #16
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d105      	bne.n	8009eae <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ea6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7ff fadc 	bl	8009470 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8009eb8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7ff fa5a 	bl	8009378 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009ec4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a11      	ldr	r2, [pc, #68]	@ (8009f10 <HAL_ADC_IRQHandler+0x244>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d002      	beq.n	8009ed6 <HAL_ADC_IRQHandler+0x20a>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	e000      	b.n	8009ed8 <HAL_ADC_IRQHandler+0x20c>
 8009ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8009f0c <HAL_ADC_IRQHandler+0x240>)
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	6812      	ldr	r2, [r2, #0]
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d008      	beq.n	8009ef2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d005      	beq.n	8009ef2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	2b06      	cmp	r3, #6
 8009eea:	d002      	beq.n	8009ef2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	2b07      	cmp	r3, #7
 8009ef0:	d104      	bne.n	8009efc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	623b      	str	r3, [r7, #32]
 8009efa:	e014      	b.n	8009f26 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a03      	ldr	r2, [pc, #12]	@ (8009f10 <HAL_ADC_IRQHandler+0x244>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d00a      	beq.n	8009f1c <HAL_ADC_IRQHandler+0x250>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	e008      	b.n	8009f1e <HAL_ADC_IRQHandler+0x252>
 8009f0c:	40022000 	.word	0x40022000
 8009f10:	40022100 	.word	0x40022100
 8009f14:	40022300 	.word	0x40022300
 8009f18:	58026300 	.word	0x58026300
 8009f1c:	4b84      	ldr	r3, [pc, #528]	@ (800a130 <HAL_ADC_IRQHandler+0x464>)
 8009f1e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d047      	beq.n	8009fbc <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8009f2c:	6a3b      	ldr	r3, [r7, #32]
 8009f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d007      	beq.n	8009f46 <HAL_ADC_IRQHandler+0x27a>
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d03f      	beq.n	8009fbc <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d13a      	bne.n	8009fbc <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f50:	2b40      	cmp	r3, #64	@ 0x40
 8009f52:	d133      	bne.n	8009fbc <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8009f54:	6a3b      	ldr	r3, [r7, #32]
 8009f56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d12e      	bne.n	8009fbc <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7ff fbbb 	bl	80096de <LL_ADC_INJ_IsConversionOngoing>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d11a      	bne.n	8009fa4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009f7c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d112      	bne.n	8009fbc <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f9a:	f043 0201 	orr.w	r2, r3, #1
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	661a      	str	r2, [r3, #96]	@ 0x60
 8009fa2:	e00b      	b.n	8009fbc <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fa8:	f043 0210 	orr.w	r2, r3, #16
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fb4:	f043 0201 	orr.w	r2, r3, #1
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f001 f823 	bl	800b008 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2260      	movs	r2, #96	@ 0x60
 8009fc8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d011      	beq.n	8009ff8 <HAL_ADC_IRQHandler+0x32c>
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00c      	beq.n	8009ff8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fe2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f8bc 	bl	800a168 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2280      	movs	r2, #128	@ 0x80
 8009ff6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d012      	beq.n	800a028 <HAL_ADC_IRQHandler+0x35c>
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00d      	beq.n	800a028 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a010:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f001 f809 	bl	800b030 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a026:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d012      	beq.n	800a058 <HAL_ADC_IRQHandler+0x38c>
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00d      	beq.n	800a058 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a040:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fffb 	bl	800b044 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a056:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	f003 0310 	and.w	r3, r3, #16
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d043      	beq.n	800a0ea <HAL_ADC_IRQHandler+0x41e>
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	f003 0310 	and.w	r3, r3, #16
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d03e      	beq.n	800a0ea <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a070:	2b00      	cmp	r3, #0
 800a072:	d102      	bne.n	800a07a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800a074:	2301      	movs	r3, #1
 800a076:	627b      	str	r3, [r7, #36]	@ 0x24
 800a078:	e021      	b.n	800a0be <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d015      	beq.n	800a0ac <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a2a      	ldr	r2, [pc, #168]	@ (800a130 <HAL_ADC_IRQHandler+0x464>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d004      	beq.n	800a094 <HAL_ADC_IRQHandler+0x3c8>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a29      	ldr	r2, [pc, #164]	@ (800a134 <HAL_ADC_IRQHandler+0x468>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d101      	bne.n	800a098 <HAL_ADC_IRQHandler+0x3cc>
 800a094:	4b28      	ldr	r3, [pc, #160]	@ (800a138 <HAL_ADC_IRQHandler+0x46c>)
 800a096:	e000      	b.n	800a09a <HAL_ADC_IRQHandler+0x3ce>
 800a098:	4b28      	ldr	r3, [pc, #160]	@ (800a13c <HAL_ADC_IRQHandler+0x470>)
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7ff fa74 	bl	8009588 <LL_ADC_GetMultiDMATransfer>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00b      	beq.n	800a0be <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0aa:	e008      	b.n	800a0be <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	f003 0303 	and.w	r3, r3, #3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d001      	beq.n	800a0be <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d10e      	bne.n	800a0e2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0c8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0d4:	f043 0202 	orr.w	r2, r3, #2
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 f84d 	bl	800a17c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2210      	movs	r2, #16
 800a0e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d018      	beq.n	800a126 <HAL_ADC_IRQHandler+0x45a>
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d013      	beq.n	800a126 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a102:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a10e:	f043 0208 	orr.w	r2, r3, #8
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a11e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 ff7b 	bl	800b01c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a126:	bf00      	nop
 800a128:	3728      	adds	r7, #40	@ 0x28
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	40022000 	.word	0x40022000
 800a134:	40022100 	.word	0x40022100
 800a138:	40022300 	.word	0x40022300
 800a13c:	58026300 	.word	0x58026300

0800a140 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a190:	b590      	push	{r4, r7, lr}
 800a192:	b0b9      	sub	sp, #228	@ 0xe4
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a1aa:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	4aab      	ldr	r2, [pc, #684]	@ (800a460 <HAL_ADC_ConfigChannel+0x2d0>)
 800a1b2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d102      	bne.n	800a1c4 <HAL_ADC_ConfigChannel+0x34>
 800a1be:	2302      	movs	r3, #2
 800a1c0:	f000 bcfe 	b.w	800abc0 <HAL_ADC_ConfigChannel+0xa30>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7ff fa71 	bl	80096b8 <LL_ADC_REG_IsConversionOngoing>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f040 84e2 	bne.w	800aba2 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	db38      	blt.n	800a258 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a9e      	ldr	r2, [pc, #632]	@ (800a464 <HAL_ADC_ConfigChannel+0x2d4>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d033      	beq.n	800a258 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d108      	bne.n	800a20e <HAL_ADC_ConfigChannel+0x7e>
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	0e9b      	lsrs	r3, r3, #26
 800a202:	f003 031f 	and.w	r3, r3, #31
 800a206:	2201      	movs	r2, #1
 800a208:	fa02 f303 	lsl.w	r3, r2, r3
 800a20c:	e01d      	b.n	800a24a <HAL_ADC_ConfigChannel+0xba>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a21a:	fa93 f3a3 	rbit	r3, r3
 800a21e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a222:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a226:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a22a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 800a232:	2320      	movs	r3, #32
 800a234:	e004      	b.n	800a240 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 800a236:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a23a:	fab3 f383 	clz	r3, r3
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	f003 031f 	and.w	r3, r3, #31
 800a244:	2201      	movs	r2, #1
 800a246:	fa02 f303 	lsl.w	r3, r2, r3
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	6812      	ldr	r2, [r2, #0]
 800a24e:	69d1      	ldr	r1, [r2, #28]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	6812      	ldr	r2, [r2, #0]
 800a254:	430b      	orrs	r3, r1
 800a256:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6818      	ldr	r0, [r3, #0]
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	6859      	ldr	r1, [r3, #4]
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	461a      	mov	r2, r3
 800a266:	f7ff f89a 	bl	800939e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4618      	mov	r0, r3
 800a270:	f7ff fa22 	bl	80096b8 <LL_ADC_REG_IsConversionOngoing>
 800a274:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7ff fa2e 	bl	80096de <LL_ADC_INJ_IsConversionOngoing>
 800a282:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f040 8270 	bne.w	800a770 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a290:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a294:	2b00      	cmp	r3, #0
 800a296:	f040 826b 	bne.w	800a770 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6818      	ldr	r0, [r3, #0]
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	6819      	ldr	r1, [r3, #0]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	f7ff f8f5 	bl	8009496 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a6c      	ldr	r2, [pc, #432]	@ (800a464 <HAL_ADC_ConfigChannel+0x2d4>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d10d      	bne.n	800a2d2 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	695a      	ldr	r2, [r3, #20]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	08db      	lsrs	r3, r3, #3
 800a2c2:	f003 0303 	and.w	r3, r3, #3
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a2d0:	e032      	b.n	800a338 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a2d2:	4b65      	ldr	r3, [pc, #404]	@ (800a468 <HAL_ADC_ConfigChannel+0x2d8>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a2da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2de:	d10b      	bne.n	800a2f8 <HAL_ADC_ConfigChannel+0x168>
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	695a      	ldr	r2, [r3, #20]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	089b      	lsrs	r3, r3, #2
 800a2ec:	f003 0307 	and.w	r3, r3, #7
 800a2f0:	005b      	lsls	r3, r3, #1
 800a2f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f6:	e01d      	b.n	800a334 <HAL_ADC_ConfigChannel+0x1a4>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	f003 0310 	and.w	r3, r3, #16
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10b      	bne.n	800a31e <HAL_ADC_ConfigChannel+0x18e>
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	695a      	ldr	r2, [r3, #20]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	089b      	lsrs	r3, r3, #2
 800a312:	f003 0307 	and.w	r3, r3, #7
 800a316:	005b      	lsls	r3, r3, #1
 800a318:	fa02 f303 	lsl.w	r3, r2, r3
 800a31c:	e00a      	b.n	800a334 <HAL_ADC_ConfigChannel+0x1a4>
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	695a      	ldr	r2, [r3, #20]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	089b      	lsrs	r3, r3, #2
 800a32a:	f003 0304 	and.w	r3, r3, #4
 800a32e:	005b      	lsls	r3, r3, #1
 800a330:	fa02 f303 	lsl.w	r3, r2, r3
 800a334:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	2b04      	cmp	r3, #4
 800a33e:	d048      	beq.n	800a3d2 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6818      	ldr	r0, [r3, #0]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	6919      	ldr	r1, [r3, #16]
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a350:	f7fe ff20 	bl	8009194 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a42      	ldr	r2, [pc, #264]	@ (800a464 <HAL_ADC_ConfigChannel+0x2d4>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d119      	bne.n	800a392 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6818      	ldr	r0, [r3, #0]
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	6919      	ldr	r1, [r3, #16]
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	461a      	mov	r2, r3
 800a36c:	f7fe ffb8 	bl	80092e0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6818      	ldr	r0, [r3, #0]
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	6919      	ldr	r1, [r3, #16]
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d102      	bne.n	800a388 <HAL_ADC_ConfigChannel+0x1f8>
 800a382:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a386:	e000      	b.n	800a38a <HAL_ADC_ConfigChannel+0x1fa>
 800a388:	2300      	movs	r3, #0
 800a38a:	461a      	mov	r2, r3
 800a38c:	f7fe ff86 	bl	800929c <LL_ADC_SetOffsetSaturation>
 800a390:	e1ee      	b.n	800a770 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6818      	ldr	r0, [r3, #0]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	6919      	ldr	r1, [r3, #16]
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d102      	bne.n	800a3aa <HAL_ADC_ConfigChannel+0x21a>
 800a3a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a3a8:	e000      	b.n	800a3ac <HAL_ADC_ConfigChannel+0x21c>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	f7fe ff53 	bl	8009258 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6818      	ldr	r0, [r3, #0]
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	6919      	ldr	r1, [r3, #16]
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	7e1b      	ldrb	r3, [r3, #24]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d102      	bne.n	800a3c8 <HAL_ADC_ConfigChannel+0x238>
 800a3c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a3c6:	e000      	b.n	800a3ca <HAL_ADC_ConfigChannel+0x23a>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	f7fe ff2a 	bl	8009224 <LL_ADC_SetDataRightShift>
 800a3d0:	e1ce      	b.n	800a770 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a23      	ldr	r2, [pc, #140]	@ (800a464 <HAL_ADC_ConfigChannel+0x2d4>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	f040 8181 	bne.w	800a6e0 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fe ff07 	bl	80091f8 <LL_ADC_GetOffsetChannel>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10a      	bne.n	800a40a <HAL_ADC_ConfigChannel+0x27a>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fe fefc 	bl	80091f8 <LL_ADC_GetOffsetChannel>
 800a400:	4603      	mov	r3, r0
 800a402:	0e9b      	lsrs	r3, r3, #26
 800a404:	f003 021f 	and.w	r2, r3, #31
 800a408:	e01e      	b.n	800a448 <HAL_ADC_ConfigChannel+0x2b8>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2100      	movs	r1, #0
 800a410:	4618      	mov	r0, r3
 800a412:	f7fe fef1 	bl	80091f8 <LL_ADC_GetOffsetChannel>
 800a416:	4603      	mov	r3, r0
 800a418:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a41c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a420:	fa93 f3a3 	rbit	r3, r3
 800a424:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800a428:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a42c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800a430:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 800a438:	2320      	movs	r3, #32
 800a43a:	e004      	b.n	800a446 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 800a43c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a440:	fab3 f383 	clz	r3, r3
 800a444:	b2db      	uxtb	r3, r3
 800a446:	461a      	mov	r2, r3
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10b      	bne.n	800a46c <HAL_ADC_ConfigChannel+0x2dc>
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	0e9b      	lsrs	r3, r3, #26
 800a45a:	f003 031f 	and.w	r3, r3, #31
 800a45e:	e01e      	b.n	800a49e <HAL_ADC_ConfigChannel+0x30e>
 800a460:	47ff0000 	.word	0x47ff0000
 800a464:	58026000 	.word	0x58026000
 800a468:	5c001000 	.word	0x5c001000
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a474:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a478:	fa93 f3a3 	rbit	r3, r3
 800a47c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800a480:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a484:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800a488:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d101      	bne.n	800a494 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 800a490:	2320      	movs	r3, #32
 800a492:	e004      	b.n	800a49e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 800a494:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a498:	fab3 f383 	clz	r3, r3
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d106      	bne.n	800a4b0 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fe ff3a 	bl	8009324 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2101      	movs	r1, #1
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fe fe9e 	bl	80091f8 <LL_ADC_GetOffsetChannel>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10a      	bne.n	800a4dc <HAL_ADC_ConfigChannel+0x34c>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2101      	movs	r1, #1
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7fe fe93 	bl	80091f8 <LL_ADC_GetOffsetChannel>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	0e9b      	lsrs	r3, r3, #26
 800a4d6:	f003 021f 	and.w	r2, r3, #31
 800a4da:	e01e      	b.n	800a51a <HAL_ADC_ConfigChannel+0x38a>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2101      	movs	r1, #1
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fe fe88 	bl	80091f8 <LL_ADC_GetOffsetChannel>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a4f2:	fa93 f3a3 	rbit	r3, r3
 800a4f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800a4fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a4fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800a502:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800a50a:	2320      	movs	r3, #32
 800a50c:	e004      	b.n	800a518 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800a50e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a512:	fab3 f383 	clz	r3, r3
 800a516:	b2db      	uxtb	r3, r3
 800a518:	461a      	mov	r2, r3
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a522:	2b00      	cmp	r3, #0
 800a524:	d105      	bne.n	800a532 <HAL_ADC_ConfigChannel+0x3a2>
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	0e9b      	lsrs	r3, r3, #26
 800a52c:	f003 031f 	and.w	r3, r3, #31
 800a530:	e018      	b.n	800a564 <HAL_ADC_ConfigChannel+0x3d4>
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a53a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a53e:	fa93 f3a3 	rbit	r3, r3
 800a542:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800a546:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a54a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800a54e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a552:	2b00      	cmp	r3, #0
 800a554:	d101      	bne.n	800a55a <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800a556:	2320      	movs	r3, #32
 800a558:	e004      	b.n	800a564 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800a55a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a55e:	fab3 f383 	clz	r3, r3
 800a562:	b2db      	uxtb	r3, r3
 800a564:	429a      	cmp	r2, r3
 800a566:	d106      	bne.n	800a576 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2200      	movs	r2, #0
 800a56e:	2101      	movs	r1, #1
 800a570:	4618      	mov	r0, r3
 800a572:	f7fe fed7 	bl	8009324 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2102      	movs	r1, #2
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fe fe3b 	bl	80091f8 <LL_ADC_GetOffsetChannel>
 800a582:	4603      	mov	r3, r0
 800a584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10a      	bne.n	800a5a2 <HAL_ADC_ConfigChannel+0x412>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2102      	movs	r1, #2
 800a592:	4618      	mov	r0, r3
 800a594:	f7fe fe30 	bl	80091f8 <LL_ADC_GetOffsetChannel>
 800a598:	4603      	mov	r3, r0
 800a59a:	0e9b      	lsrs	r3, r3, #26
 800a59c:	f003 021f 	and.w	r2, r3, #31
 800a5a0:	e01e      	b.n	800a5e0 <HAL_ADC_ConfigChannel+0x450>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2102      	movs	r1, #2
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7fe fe25 	bl	80091f8 <LL_ADC_GetOffsetChannel>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a5b8:	fa93 f3a3 	rbit	r3, r3
 800a5bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800a5c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a5c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800a5c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 800a5d0:	2320      	movs	r3, #32
 800a5d2:	e004      	b.n	800a5de <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 800a5d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5d8:	fab3 f383 	clz	r3, r3
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	461a      	mov	r2, r3
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d105      	bne.n	800a5f8 <HAL_ADC_ConfigChannel+0x468>
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	0e9b      	lsrs	r3, r3, #26
 800a5f2:	f003 031f 	and.w	r3, r3, #31
 800a5f6:	e014      	b.n	800a622 <HAL_ADC_ConfigChannel+0x492>
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a600:	fa93 f3a3 	rbit	r3, r3
 800a604:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800a606:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a608:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800a60c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a610:	2b00      	cmp	r3, #0
 800a612:	d101      	bne.n	800a618 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800a614:	2320      	movs	r3, #32
 800a616:	e004      	b.n	800a622 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800a618:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a61c:	fab3 f383 	clz	r3, r3
 800a620:	b2db      	uxtb	r3, r3
 800a622:	429a      	cmp	r2, r3
 800a624:	d106      	bne.n	800a634 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2200      	movs	r2, #0
 800a62c:	2102      	movs	r1, #2
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fe fe78 	bl	8009324 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2103      	movs	r1, #3
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7fe fddc 	bl	80091f8 <LL_ADC_GetOffsetChannel>
 800a640:	4603      	mov	r3, r0
 800a642:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a646:	2b00      	cmp	r3, #0
 800a648:	d10a      	bne.n	800a660 <HAL_ADC_ConfigChannel+0x4d0>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2103      	movs	r1, #3
 800a650:	4618      	mov	r0, r3
 800a652:	f7fe fdd1 	bl	80091f8 <LL_ADC_GetOffsetChannel>
 800a656:	4603      	mov	r3, r0
 800a658:	0e9b      	lsrs	r3, r3, #26
 800a65a:	f003 021f 	and.w	r2, r3, #31
 800a65e:	e017      	b.n	800a690 <HAL_ADC_ConfigChannel+0x500>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2103      	movs	r1, #3
 800a666:	4618      	mov	r0, r3
 800a668:	f7fe fdc6 	bl	80091f8 <LL_ADC_GetOffsetChannel>
 800a66c:	4603      	mov	r3, r0
 800a66e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a670:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a672:	fa93 f3a3 	rbit	r3, r3
 800a676:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800a678:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a67a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800a67c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d101      	bne.n	800a686 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800a682:	2320      	movs	r3, #32
 800a684:	e003      	b.n	800a68e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800a686:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a688:	fab3 f383 	clz	r3, r3
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	461a      	mov	r2, r3
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d105      	bne.n	800a6a8 <HAL_ADC_ConfigChannel+0x518>
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	0e9b      	lsrs	r3, r3, #26
 800a6a2:	f003 031f 	and.w	r3, r3, #31
 800a6a6:	e011      	b.n	800a6cc <HAL_ADC_ConfigChannel+0x53c>
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6b0:	fa93 f3a3 	rbit	r3, r3
 800a6b4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800a6b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800a6ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d101      	bne.n	800a6c4 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 800a6c0:	2320      	movs	r3, #32
 800a6c2:	e003      	b.n	800a6cc <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 800a6c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a6c6:	fab3 f383 	clz	r3, r3
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d14f      	bne.n	800a770 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2103      	movs	r1, #3
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7fe fe23 	bl	8009324 <LL_ADC_SetOffsetState>
 800a6de:	e047      	b.n	800a770 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	069b      	lsls	r3, r3, #26
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d107      	bne.n	800a704 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a702:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a70a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	069b      	lsls	r3, r3, #26
 800a714:	429a      	cmp	r2, r3
 800a716:	d107      	bne.n	800a728 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a726:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a72e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	069b      	lsls	r3, r3, #26
 800a738:	429a      	cmp	r2, r3
 800a73a:	d107      	bne.n	800a74c <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a74a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a752:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	069b      	lsls	r3, r3, #26
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d107      	bne.n	800a770 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a76e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4618      	mov	r0, r3
 800a776:	f7fe ff77 	bl	8009668 <LL_ADC_IsEnabled>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f040 8219 	bne.w	800abb4 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6818      	ldr	r0, [r3, #0]
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	6819      	ldr	r1, [r3, #0]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	461a      	mov	r2, r3
 800a790:	f7fe feac 	bl	80094ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	4aa1      	ldr	r2, [pc, #644]	@ (800aa20 <HAL_ADC_ConfigChannel+0x890>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	f040 812e 	bne.w	800a9fc <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10b      	bne.n	800a7c8 <HAL_ADC_ConfigChannel+0x638>
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	0e9b      	lsrs	r3, r3, #26
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	f003 031f 	and.w	r3, r3, #31
 800a7bc:	2b09      	cmp	r3, #9
 800a7be:	bf94      	ite	ls
 800a7c0:	2301      	movls	r3, #1
 800a7c2:	2300      	movhi	r3, #0
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	e019      	b.n	800a7fc <HAL_ADC_ConfigChannel+0x66c>
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a7d0:	fa93 f3a3 	rbit	r3, r3
 800a7d4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800a7d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800a7da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d101      	bne.n	800a7e4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800a7e0:	2320      	movs	r3, #32
 800a7e2:	e003      	b.n	800a7ec <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800a7e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7e6:	fab3 f383 	clz	r3, r3
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	f003 031f 	and.w	r3, r3, #31
 800a7f2:	2b09      	cmp	r3, #9
 800a7f4:	bf94      	ite	ls
 800a7f6:	2301      	movls	r3, #1
 800a7f8:	2300      	movhi	r3, #0
 800a7fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d079      	beq.n	800a8f4 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d107      	bne.n	800a81c <HAL_ADC_ConfigChannel+0x68c>
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	0e9b      	lsrs	r3, r3, #26
 800a812:	3301      	adds	r3, #1
 800a814:	069b      	lsls	r3, r3, #26
 800a816:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a81a:	e015      	b.n	800a848 <HAL_ADC_ConfigChannel+0x6b8>
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a822:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a824:	fa93 f3a3 	rbit	r3, r3
 800a828:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800a82a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a82c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800a82e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 800a834:	2320      	movs	r3, #32
 800a836:	e003      	b.n	800a840 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 800a838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a83a:	fab3 f383 	clz	r3, r3
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	3301      	adds	r3, #1
 800a842:	069b      	lsls	r3, r3, #26
 800a844:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a850:	2b00      	cmp	r3, #0
 800a852:	d109      	bne.n	800a868 <HAL_ADC_ConfigChannel+0x6d8>
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	0e9b      	lsrs	r3, r3, #26
 800a85a:	3301      	adds	r3, #1
 800a85c:	f003 031f 	and.w	r3, r3, #31
 800a860:	2101      	movs	r1, #1
 800a862:	fa01 f303 	lsl.w	r3, r1, r3
 800a866:	e017      	b.n	800a898 <HAL_ADC_ConfigChannel+0x708>
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a86e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a870:	fa93 f3a3 	rbit	r3, r3
 800a874:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800a876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a878:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800a87a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d101      	bne.n	800a884 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 800a880:	2320      	movs	r3, #32
 800a882:	e003      	b.n	800a88c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 800a884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a886:	fab3 f383 	clz	r3, r3
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	3301      	adds	r3, #1
 800a88e:	f003 031f 	and.w	r3, r3, #31
 800a892:	2101      	movs	r1, #1
 800a894:	fa01 f303 	lsl.w	r3, r1, r3
 800a898:	ea42 0103 	orr.w	r1, r2, r3
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d10a      	bne.n	800a8be <HAL_ADC_ConfigChannel+0x72e>
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	0e9b      	lsrs	r3, r3, #26
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	f003 021f 	and.w	r2, r3, #31
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	005b      	lsls	r3, r3, #1
 800a8b8:	4413      	add	r3, r2
 800a8ba:	051b      	lsls	r3, r3, #20
 800a8bc:	e018      	b.n	800a8f0 <HAL_ADC_ConfigChannel+0x760>
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8c6:	fa93 f3a3 	rbit	r3, r3
 800a8ca:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d101      	bne.n	800a8da <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800a8d6:	2320      	movs	r3, #32
 800a8d8:	e003      	b.n	800a8e2 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800a8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8dc:	fab3 f383 	clz	r3, r3
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	f003 021f 	and.w	r2, r3, #31
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	005b      	lsls	r3, r3, #1
 800a8ec:	4413      	add	r3, r2
 800a8ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a8f0:	430b      	orrs	r3, r1
 800a8f2:	e07e      	b.n	800a9f2 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d107      	bne.n	800a910 <HAL_ADC_ConfigChannel+0x780>
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	0e9b      	lsrs	r3, r3, #26
 800a906:	3301      	adds	r3, #1
 800a908:	069b      	lsls	r3, r3, #26
 800a90a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a90e:	e015      	b.n	800a93c <HAL_ADC_ConfigChannel+0x7ac>
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a918:	fa93 f3a3 	rbit	r3, r3
 800a91c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800a91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800a922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a924:	2b00      	cmp	r3, #0
 800a926:	d101      	bne.n	800a92c <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 800a928:	2320      	movs	r3, #32
 800a92a:	e003      	b.n	800a934 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 800a92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a92e:	fab3 f383 	clz	r3, r3
 800a932:	b2db      	uxtb	r3, r3
 800a934:	3301      	adds	r3, #1
 800a936:	069b      	lsls	r3, r3, #26
 800a938:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a944:	2b00      	cmp	r3, #0
 800a946:	d109      	bne.n	800a95c <HAL_ADC_ConfigChannel+0x7cc>
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	0e9b      	lsrs	r3, r3, #26
 800a94e:	3301      	adds	r3, #1
 800a950:	f003 031f 	and.w	r3, r3, #31
 800a954:	2101      	movs	r1, #1
 800a956:	fa01 f303 	lsl.w	r3, r1, r3
 800a95a:	e017      	b.n	800a98c <HAL_ADC_ConfigChannel+0x7fc>
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	fa93 f3a3 	rbit	r3, r3
 800a968:	61bb      	str	r3, [r7, #24]
  return result;
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800a96e:	6a3b      	ldr	r3, [r7, #32]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d101      	bne.n	800a978 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 800a974:	2320      	movs	r3, #32
 800a976:	e003      	b.n	800a980 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800a978:	6a3b      	ldr	r3, [r7, #32]
 800a97a:	fab3 f383 	clz	r3, r3
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	3301      	adds	r3, #1
 800a982:	f003 031f 	and.w	r3, r3, #31
 800a986:	2101      	movs	r1, #1
 800a988:	fa01 f303 	lsl.w	r3, r1, r3
 800a98c:	ea42 0103 	orr.w	r1, r2, r3
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10d      	bne.n	800a9b8 <HAL_ADC_ConfigChannel+0x828>
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	0e9b      	lsrs	r3, r3, #26
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	f003 021f 	and.w	r2, r3, #31
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	4413      	add	r3, r2
 800a9ae:	3b1e      	subs	r3, #30
 800a9b0:	051b      	lsls	r3, r3, #20
 800a9b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a9b6:	e01b      	b.n	800a9f0 <HAL_ADC_ConfigChannel+0x860>
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	fa93 f3a3 	rbit	r3, r3
 800a9c4:	60fb      	str	r3, [r7, #12]
  return result;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d101      	bne.n	800a9d4 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 800a9d0:	2320      	movs	r3, #32
 800a9d2:	e003      	b.n	800a9dc <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	fab3 f383 	clz	r3, r3
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	3301      	adds	r3, #1
 800a9de:	f003 021f 	and.w	r2, r3, #31
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	005b      	lsls	r3, r3, #1
 800a9e6:	4413      	add	r3, r2
 800a9e8:	3b1e      	subs	r3, #30
 800a9ea:	051b      	lsls	r3, r3, #20
 800a9ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a9f0:	430b      	orrs	r3, r1
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	6892      	ldr	r2, [r2, #8]
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	f7fe fd4d 	bl	8009496 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f280 80d7 	bge.w	800abb4 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a06      	ldr	r2, [pc, #24]	@ (800aa24 <HAL_ADC_ConfigChannel+0x894>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d004      	beq.n	800aa1a <HAL_ADC_ConfigChannel+0x88a>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a04      	ldr	r2, [pc, #16]	@ (800aa28 <HAL_ADC_ConfigChannel+0x898>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d10a      	bne.n	800aa30 <HAL_ADC_ConfigChannel+0x8a0>
 800aa1a:	4b04      	ldr	r3, [pc, #16]	@ (800aa2c <HAL_ADC_ConfigChannel+0x89c>)
 800aa1c:	e009      	b.n	800aa32 <HAL_ADC_ConfigChannel+0x8a2>
 800aa1e:	bf00      	nop
 800aa20:	47ff0000 	.word	0x47ff0000
 800aa24:	40022000 	.word	0x40022000
 800aa28:	40022100 	.word	0x40022100
 800aa2c:	40022300 	.word	0x40022300
 800aa30:	4b65      	ldr	r3, [pc, #404]	@ (800abc8 <HAL_ADC_ConfigChannel+0xa38>)
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fe fba0 	bl	8009178 <LL_ADC_GetCommonPathInternalCh>
 800aa38:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a62      	ldr	r2, [pc, #392]	@ (800abcc <HAL_ADC_ConfigChannel+0xa3c>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d004      	beq.n	800aa50 <HAL_ADC_ConfigChannel+0x8c0>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a61      	ldr	r2, [pc, #388]	@ (800abd0 <HAL_ADC_ConfigChannel+0xa40>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d10e      	bne.n	800aa6e <HAL_ADC_ConfigChannel+0x8de>
 800aa50:	485e      	ldr	r0, [pc, #376]	@ (800abcc <HAL_ADC_ConfigChannel+0xa3c>)
 800aa52:	f7fe fe09 	bl	8009668 <LL_ADC_IsEnabled>
 800aa56:	4604      	mov	r4, r0
 800aa58:	485d      	ldr	r0, [pc, #372]	@ (800abd0 <HAL_ADC_ConfigChannel+0xa40>)
 800aa5a:	f7fe fe05 	bl	8009668 <LL_ADC_IsEnabled>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	4323      	orrs	r3, r4
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	bf0c      	ite	eq
 800aa66:	2301      	moveq	r3, #1
 800aa68:	2300      	movne	r3, #0
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	e008      	b.n	800aa80 <HAL_ADC_ConfigChannel+0x8f0>
 800aa6e:	4859      	ldr	r0, [pc, #356]	@ (800abd4 <HAL_ADC_ConfigChannel+0xa44>)
 800aa70:	f7fe fdfa 	bl	8009668 <LL_ADC_IsEnabled>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	bf0c      	ite	eq
 800aa7a:	2301      	moveq	r3, #1
 800aa7c:	2300      	movne	r3, #0
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 8084 	beq.w	800ab8e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a53      	ldr	r2, [pc, #332]	@ (800abd8 <HAL_ADC_ConfigChannel+0xa48>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d132      	bne.n	800aaf6 <HAL_ADC_ConfigChannel+0x966>
 800aa90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aa94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d12c      	bne.n	800aaf6 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a4c      	ldr	r2, [pc, #304]	@ (800abd4 <HAL_ADC_ConfigChannel+0xa44>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	f040 8086 	bne.w	800abb4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a47      	ldr	r2, [pc, #284]	@ (800abcc <HAL_ADC_ConfigChannel+0xa3c>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d004      	beq.n	800aabc <HAL_ADC_ConfigChannel+0x92c>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a46      	ldr	r2, [pc, #280]	@ (800abd0 <HAL_ADC_ConfigChannel+0xa40>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d101      	bne.n	800aac0 <HAL_ADC_ConfigChannel+0x930>
 800aabc:	4a47      	ldr	r2, [pc, #284]	@ (800abdc <HAL_ADC_ConfigChannel+0xa4c>)
 800aabe:	e000      	b.n	800aac2 <HAL_ADC_ConfigChannel+0x932>
 800aac0:	4a41      	ldr	r2, [pc, #260]	@ (800abc8 <HAL_ADC_ConfigChannel+0xa38>)
 800aac2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aac6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800aaca:	4619      	mov	r1, r3
 800aacc:	4610      	mov	r0, r2
 800aace:	f7fe fb40 	bl	8009152 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800aad2:	4b43      	ldr	r3, [pc, #268]	@ (800abe0 <HAL_ADC_ConfigChannel+0xa50>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	099b      	lsrs	r3, r3, #6
 800aad8:	4a42      	ldr	r2, [pc, #264]	@ (800abe4 <HAL_ADC_ConfigChannel+0xa54>)
 800aada:	fba2 2303 	umull	r2, r3, r2, r3
 800aade:	099b      	lsrs	r3, r3, #6
 800aae0:	3301      	adds	r3, #1
 800aae2:	005b      	lsls	r3, r3, #1
 800aae4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800aae6:	e002      	b.n	800aaee <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	3b01      	subs	r3, #1
 800aaec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1f9      	bne.n	800aae8 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800aaf4:	e05e      	b.n	800abb4 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a3b      	ldr	r2, [pc, #236]	@ (800abe8 <HAL_ADC_ConfigChannel+0xa58>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d120      	bne.n	800ab42 <HAL_ADC_ConfigChannel+0x9b2>
 800ab00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ab04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d11a      	bne.n	800ab42 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a30      	ldr	r2, [pc, #192]	@ (800abd4 <HAL_ADC_ConfigChannel+0xa44>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d14e      	bne.n	800abb4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a2c      	ldr	r2, [pc, #176]	@ (800abcc <HAL_ADC_ConfigChannel+0xa3c>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d004      	beq.n	800ab2a <HAL_ADC_ConfigChannel+0x99a>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a2a      	ldr	r2, [pc, #168]	@ (800abd0 <HAL_ADC_ConfigChannel+0xa40>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d101      	bne.n	800ab2e <HAL_ADC_ConfigChannel+0x99e>
 800ab2a:	4a2c      	ldr	r2, [pc, #176]	@ (800abdc <HAL_ADC_ConfigChannel+0xa4c>)
 800ab2c:	e000      	b.n	800ab30 <HAL_ADC_ConfigChannel+0x9a0>
 800ab2e:	4a26      	ldr	r2, [pc, #152]	@ (800abc8 <HAL_ADC_ConfigChannel+0xa38>)
 800ab30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ab34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ab38:	4619      	mov	r1, r3
 800ab3a:	4610      	mov	r0, r2
 800ab3c:	f7fe fb09 	bl	8009152 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ab40:	e038      	b.n	800abb4 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a29      	ldr	r2, [pc, #164]	@ (800abec <HAL_ADC_ConfigChannel+0xa5c>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d133      	bne.n	800abb4 <HAL_ADC_ConfigChannel+0xa24>
 800ab4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ab50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d12d      	bne.n	800abb4 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a1d      	ldr	r2, [pc, #116]	@ (800abd4 <HAL_ADC_ConfigChannel+0xa44>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d128      	bne.n	800abb4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a19      	ldr	r2, [pc, #100]	@ (800abcc <HAL_ADC_ConfigChannel+0xa3c>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d004      	beq.n	800ab76 <HAL_ADC_ConfigChannel+0x9e6>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a17      	ldr	r2, [pc, #92]	@ (800abd0 <HAL_ADC_ConfigChannel+0xa40>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d101      	bne.n	800ab7a <HAL_ADC_ConfigChannel+0x9ea>
 800ab76:	4a19      	ldr	r2, [pc, #100]	@ (800abdc <HAL_ADC_ConfigChannel+0xa4c>)
 800ab78:	e000      	b.n	800ab7c <HAL_ADC_ConfigChannel+0x9ec>
 800ab7a:	4a13      	ldr	r2, [pc, #76]	@ (800abc8 <HAL_ADC_ConfigChannel+0xa38>)
 800ab7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ab80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ab84:	4619      	mov	r1, r3
 800ab86:	4610      	mov	r0, r2
 800ab88:	f7fe fae3 	bl	8009152 <LL_ADC_SetCommonPathInternalCh>
 800ab8c:	e012      	b.n	800abb4 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab92:	f043 0220 	orr.w	r2, r3, #32
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800aba0:	e008      	b.n	800abb4 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aba6:	f043 0220 	orr.w	r2, r3, #32
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800abbc:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	37e4      	adds	r7, #228	@ 0xe4
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd90      	pop	{r4, r7, pc}
 800abc8:	58026300 	.word	0x58026300
 800abcc:	40022000 	.word	0x40022000
 800abd0:	40022100 	.word	0x40022100
 800abd4:	58026000 	.word	0x58026000
 800abd8:	c7520000 	.word	0xc7520000
 800abdc:	40022300 	.word	0x40022300
 800abe0:	24000004 	.word	0x24000004
 800abe4:	053e2d63 	.word	0x053e2d63
 800abe8:	c3210000 	.word	0xc3210000
 800abec:	cb840000 	.word	0xcb840000

0800abf0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7fe fd33 	bl	8009668 <LL_ADC_IsEnabled>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d16e      	bne.n	800ace6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	689a      	ldr	r2, [r3, #8]
 800ac0e:	4b38      	ldr	r3, [pc, #224]	@ (800acf0 <ADC_Enable+0x100>)
 800ac10:	4013      	ands	r3, r2
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00d      	beq.n	800ac32 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac1a:	f043 0210 	orr.w	r2, r3, #16
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac26:	f043 0201 	orr.w	r2, r3, #1
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e05a      	b.n	800ace8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fe fd02 	bl	8009640 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800ac3c:	f7fe fa46 	bl	80090cc <HAL_GetTick>
 800ac40:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a2b      	ldr	r2, [pc, #172]	@ (800acf4 <ADC_Enable+0x104>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d004      	beq.n	800ac56 <ADC_Enable+0x66>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a29      	ldr	r2, [pc, #164]	@ (800acf8 <ADC_Enable+0x108>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d101      	bne.n	800ac5a <ADC_Enable+0x6a>
 800ac56:	4b29      	ldr	r3, [pc, #164]	@ (800acfc <ADC_Enable+0x10c>)
 800ac58:	e000      	b.n	800ac5c <ADC_Enable+0x6c>
 800ac5a:	4b29      	ldr	r3, [pc, #164]	@ (800ad00 <ADC_Enable+0x110>)
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7fe fc85 	bl	800956c <LL_ADC_GetMultimode>
 800ac62:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a23      	ldr	r2, [pc, #140]	@ (800acf8 <ADC_Enable+0x108>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d002      	beq.n	800ac74 <ADC_Enable+0x84>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	e000      	b.n	800ac76 <ADC_Enable+0x86>
 800ac74:	4b1f      	ldr	r3, [pc, #124]	@ (800acf4 <ADC_Enable+0x104>)
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	6812      	ldr	r2, [r2, #0]
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d02c      	beq.n	800acd8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d130      	bne.n	800ace6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ac84:	e028      	b.n	800acd8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fe fcec 	bl	8009668 <LL_ADC_IsEnabled>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d104      	bne.n	800aca0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fe fcd0 	bl	8009640 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800aca0:	f7fe fa14 	bl	80090cc <HAL_GetTick>
 800aca4:	4602      	mov	r2, r0
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	2b02      	cmp	r3, #2
 800acac:	d914      	bls.n	800acd8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 0301 	and.w	r3, r3, #1
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d00d      	beq.n	800acd8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acc0:	f043 0210 	orr.w	r2, r3, #16
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800accc:	f043 0201 	orr.w	r2, r3, #1
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800acd4:	2301      	movs	r3, #1
 800acd6:	e007      	b.n	800ace8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f003 0301 	and.w	r3, r3, #1
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d1cf      	bne.n	800ac86 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	8000003f 	.word	0x8000003f
 800acf4:	40022000 	.word	0x40022000
 800acf8:	40022100 	.word	0x40022100
 800acfc:	40022300 	.word	0x40022300
 800ad00:	58026300 	.word	0x58026300

0800ad04 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad10:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad16:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d14b      	bne.n	800adb6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad22:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f003 0308 	and.w	r3, r3, #8
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d021      	beq.n	800ad7c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fe fb1b 	bl	8009378 <LL_ADC_REG_IsTriggerSourceSWStart>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d032      	beq.n	800adae <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d12b      	bne.n	800adae <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad5a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d11f      	bne.n	800adae <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad72:	f043 0201 	orr.w	r2, r3, #1
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	661a      	str	r2, [r3, #96]	@ 0x60
 800ad7a:	e018      	b.n	800adae <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	f003 0303 	and.w	r3, r3, #3
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d111      	bne.n	800adae <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d105      	bne.n	800adae <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ada6:	f043 0201 	orr.w	r2, r3, #1
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f7ff f9c6 	bl	800a140 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800adb4:	e00e      	b.n	800add4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800adba:	f003 0310 	and.w	r3, r3, #16
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d003      	beq.n	800adca <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f7ff f9da 	bl	800a17c <HAL_ADC_ErrorCallback>
}
 800adc8:	e004      	b.n	800add4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	4798      	blx	r3
}
 800add4:	bf00      	nop
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ade8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f7ff f9b2 	bl	800a154 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800adf0:	bf00      	nop
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae04:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae16:	f043 0204 	orr.w	r2, r3, #4
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f7ff f9ac 	bl	800a17c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ae24:	bf00      	nop
 800ae26:	3710      	adds	r7, #16
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a6c      	ldr	r2, [pc, #432]	@ (800afec <ADC_ConfigureBoostMode+0x1c0>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d004      	beq.n	800ae48 <ADC_ConfigureBoostMode+0x1c>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a6b      	ldr	r2, [pc, #428]	@ (800aff0 <ADC_ConfigureBoostMode+0x1c4>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d109      	bne.n	800ae5c <ADC_ConfigureBoostMode+0x30>
 800ae48:	4b6a      	ldr	r3, [pc, #424]	@ (800aff4 <ADC_ConfigureBoostMode+0x1c8>)
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	bf14      	ite	ne
 800ae54:	2301      	movne	r3, #1
 800ae56:	2300      	moveq	r3, #0
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	e008      	b.n	800ae6e <ADC_ConfigureBoostMode+0x42>
 800ae5c:	4b66      	ldr	r3, [pc, #408]	@ (800aff8 <ADC_ConfigureBoostMode+0x1cc>)
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	bf14      	ite	ne
 800ae68:	2301      	movne	r3, #1
 800ae6a:	2300      	moveq	r3, #0
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d01c      	beq.n	800aeac <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800ae72:	f006 fe8b 	bl	8011b8c <HAL_RCC_GetHCLKFreq>
 800ae76:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae80:	d010      	beq.n	800aea4 <ADC_ConfigureBoostMode+0x78>
 800ae82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae86:	d873      	bhi.n	800af70 <ADC_ConfigureBoostMode+0x144>
 800ae88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae8c:	d002      	beq.n	800ae94 <ADC_ConfigureBoostMode+0x68>
 800ae8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae92:	d16d      	bne.n	800af70 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	0c1b      	lsrs	r3, r3, #16
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aea0:	60fb      	str	r3, [r7, #12]
        break;
 800aea2:	e068      	b.n	800af76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	089b      	lsrs	r3, r3, #2
 800aea8:	60fb      	str	r3, [r7, #12]
        break;
 800aeaa:	e064      	b.n	800af76 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800aeac:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800aeb0:	f04f 0100 	mov.w	r1, #0
 800aeb4:	f008 f866 	bl	8012f84 <HAL_RCCEx_GetPeriphCLKFreq>
 800aeb8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800aec2:	d051      	beq.n	800af68 <ADC_ConfigureBoostMode+0x13c>
 800aec4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800aec8:	d854      	bhi.n	800af74 <ADC_ConfigureBoostMode+0x148>
 800aeca:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800aece:	d047      	beq.n	800af60 <ADC_ConfigureBoostMode+0x134>
 800aed0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800aed4:	d84e      	bhi.n	800af74 <ADC_ConfigureBoostMode+0x148>
 800aed6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800aeda:	d03d      	beq.n	800af58 <ADC_ConfigureBoostMode+0x12c>
 800aedc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800aee0:	d848      	bhi.n	800af74 <ADC_ConfigureBoostMode+0x148>
 800aee2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aee6:	d033      	beq.n	800af50 <ADC_ConfigureBoostMode+0x124>
 800aee8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aeec:	d842      	bhi.n	800af74 <ADC_ConfigureBoostMode+0x148>
 800aeee:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800aef2:	d029      	beq.n	800af48 <ADC_ConfigureBoostMode+0x11c>
 800aef4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800aef8:	d83c      	bhi.n	800af74 <ADC_ConfigureBoostMode+0x148>
 800aefa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800aefe:	d01a      	beq.n	800af36 <ADC_ConfigureBoostMode+0x10a>
 800af00:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800af04:	d836      	bhi.n	800af74 <ADC_ConfigureBoostMode+0x148>
 800af06:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800af0a:	d014      	beq.n	800af36 <ADC_ConfigureBoostMode+0x10a>
 800af0c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800af10:	d830      	bhi.n	800af74 <ADC_ConfigureBoostMode+0x148>
 800af12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af16:	d00e      	beq.n	800af36 <ADC_ConfigureBoostMode+0x10a>
 800af18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af1c:	d82a      	bhi.n	800af74 <ADC_ConfigureBoostMode+0x148>
 800af1e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800af22:	d008      	beq.n	800af36 <ADC_ConfigureBoostMode+0x10a>
 800af24:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800af28:	d824      	bhi.n	800af74 <ADC_ConfigureBoostMode+0x148>
 800af2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af2e:	d002      	beq.n	800af36 <ADC_ConfigureBoostMode+0x10a>
 800af30:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800af34:	d11e      	bne.n	800af74 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	0c9b      	lsrs	r3, r3, #18
 800af3c:	005b      	lsls	r3, r3, #1
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	fbb2 f3f3 	udiv	r3, r2, r3
 800af44:	60fb      	str	r3, [r7, #12]
        break;
 800af46:	e016      	b.n	800af76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	091b      	lsrs	r3, r3, #4
 800af4c:	60fb      	str	r3, [r7, #12]
        break;
 800af4e:	e012      	b.n	800af76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	095b      	lsrs	r3, r3, #5
 800af54:	60fb      	str	r3, [r7, #12]
        break;
 800af56:	e00e      	b.n	800af76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	099b      	lsrs	r3, r3, #6
 800af5c:	60fb      	str	r3, [r7, #12]
        break;
 800af5e:	e00a      	b.n	800af76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	09db      	lsrs	r3, r3, #7
 800af64:	60fb      	str	r3, [r7, #12]
        break;
 800af66:	e006      	b.n	800af76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	0a1b      	lsrs	r3, r3, #8
 800af6c:	60fb      	str	r3, [r7, #12]
        break;
 800af6e:	e002      	b.n	800af76 <ADC_ConfigureBoostMode+0x14a>
        break;
 800af70:	bf00      	nop
 800af72:	e000      	b.n	800af76 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800af74:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	085b      	lsrs	r3, r3, #1
 800af7a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	4a1f      	ldr	r2, [pc, #124]	@ (800affc <ADC_ConfigureBoostMode+0x1d0>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d808      	bhi.n	800af96 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	689a      	ldr	r2, [r3, #8]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800af92:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800af94:	e025      	b.n	800afe2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	4a19      	ldr	r2, [pc, #100]	@ (800b000 <ADC_ConfigureBoostMode+0x1d4>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d80a      	bhi.n	800afb4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800afb0:	609a      	str	r2, [r3, #8]
}
 800afb2:	e016      	b.n	800afe2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	4a13      	ldr	r2, [pc, #76]	@ (800b004 <ADC_ConfigureBoostMode+0x1d8>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d80a      	bhi.n	800afd2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afce:	609a      	str	r2, [r3, #8]
}
 800afd0:	e007      	b.n	800afe2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	689a      	ldr	r2, [r3, #8]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800afe0:	609a      	str	r2, [r3, #8]
}
 800afe2:	bf00      	nop
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	40022000 	.word	0x40022000
 800aff0:	40022100 	.word	0x40022100
 800aff4:	40022300 	.word	0x40022300
 800aff8:	58026300 	.word	0x58026300
 800affc:	005f5e10 	.word	0x005f5e10
 800b000:	00bebc20 	.word	0x00bebc20
 800b004:	017d7840 	.word	0x017d7840

0800b008 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800b010:	bf00      	nop
 800b012:	370c      	adds	r7, #12
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr

0800b01c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800b024:	bf00      	nop
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800b038:	bf00      	nop
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800b04c:	bf00      	nop
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800b060:	bf00      	nop
 800b062:	370c      	adds	r7, #12
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <__NVIC_SetPriorityGrouping>:
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f003 0307 	and.w	r3, r3, #7
 800b07a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b07c:	4b0b      	ldr	r3, [pc, #44]	@ (800b0ac <__NVIC_SetPriorityGrouping+0x40>)
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b088:	4013      	ands	r3, r2
 800b08a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b094:	4b06      	ldr	r3, [pc, #24]	@ (800b0b0 <__NVIC_SetPriorityGrouping+0x44>)
 800b096:	4313      	orrs	r3, r2
 800b098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b09a:	4a04      	ldr	r2, [pc, #16]	@ (800b0ac <__NVIC_SetPriorityGrouping+0x40>)
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	60d3      	str	r3, [r2, #12]
}
 800b0a0:	bf00      	nop
 800b0a2:	3714      	adds	r7, #20
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr
 800b0ac:	e000ed00 	.word	0xe000ed00
 800b0b0:	05fa0000 	.word	0x05fa0000

0800b0b4 <__NVIC_GetPriorityGrouping>:
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b0b8:	4b04      	ldr	r3, [pc, #16]	@ (800b0cc <__NVIC_GetPriorityGrouping+0x18>)
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	0a1b      	lsrs	r3, r3, #8
 800b0be:	f003 0307 	and.w	r3, r3, #7
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr
 800b0cc:	e000ed00 	.word	0xe000ed00

0800b0d0 <__NVIC_EnableIRQ>:
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b0da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	db0b      	blt.n	800b0fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b0e2:	88fb      	ldrh	r3, [r7, #6]
 800b0e4:	f003 021f 	and.w	r2, r3, #31
 800b0e8:	4907      	ldr	r1, [pc, #28]	@ (800b108 <__NVIC_EnableIRQ+0x38>)
 800b0ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b0ee:	095b      	lsrs	r3, r3, #5
 800b0f0:	2001      	movs	r0, #1
 800b0f2:	fa00 f202 	lsl.w	r2, r0, r2
 800b0f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b0fa:	bf00      	nop
 800b0fc:	370c      	adds	r7, #12
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	e000e100 	.word	0xe000e100

0800b10c <__NVIC_SetPriority>:
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	4603      	mov	r3, r0
 800b114:	6039      	str	r1, [r7, #0]
 800b116:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b118:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	db0a      	blt.n	800b136 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	b2da      	uxtb	r2, r3
 800b124:	490c      	ldr	r1, [pc, #48]	@ (800b158 <__NVIC_SetPriority+0x4c>)
 800b126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b12a:	0112      	lsls	r2, r2, #4
 800b12c:	b2d2      	uxtb	r2, r2
 800b12e:	440b      	add	r3, r1
 800b130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b134:	e00a      	b.n	800b14c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	b2da      	uxtb	r2, r3
 800b13a:	4908      	ldr	r1, [pc, #32]	@ (800b15c <__NVIC_SetPriority+0x50>)
 800b13c:	88fb      	ldrh	r3, [r7, #6]
 800b13e:	f003 030f 	and.w	r3, r3, #15
 800b142:	3b04      	subs	r3, #4
 800b144:	0112      	lsls	r2, r2, #4
 800b146:	b2d2      	uxtb	r2, r2
 800b148:	440b      	add	r3, r1
 800b14a:	761a      	strb	r2, [r3, #24]
}
 800b14c:	bf00      	nop
 800b14e:	370c      	adds	r7, #12
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr
 800b158:	e000e100 	.word	0xe000e100
 800b15c:	e000ed00 	.word	0xe000ed00

0800b160 <NVIC_EncodePriority>:
{
 800b160:	b480      	push	{r7}
 800b162:	b089      	sub	sp, #36	@ 0x24
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f003 0307 	and.w	r3, r3, #7
 800b172:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	f1c3 0307 	rsb	r3, r3, #7
 800b17a:	2b04      	cmp	r3, #4
 800b17c:	bf28      	it	cs
 800b17e:	2304      	movcs	r3, #4
 800b180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	3304      	adds	r3, #4
 800b186:	2b06      	cmp	r3, #6
 800b188:	d902      	bls.n	800b190 <NVIC_EncodePriority+0x30>
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	3b03      	subs	r3, #3
 800b18e:	e000      	b.n	800b192 <NVIC_EncodePriority+0x32>
 800b190:	2300      	movs	r3, #0
 800b192:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b194:	f04f 32ff 	mov.w	r2, #4294967295
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	fa02 f303 	lsl.w	r3, r2, r3
 800b19e:	43da      	mvns	r2, r3
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	401a      	ands	r2, r3
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b1a8:	f04f 31ff 	mov.w	r1, #4294967295
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	fa01 f303 	lsl.w	r3, r1, r3
 800b1b2:	43d9      	mvns	r1, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b1b8:	4313      	orrs	r3, r2
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3724      	adds	r7, #36	@ 0x24
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
	...

0800b1c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b1d8:	d301      	bcc.n	800b1de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e00f      	b.n	800b1fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b1de:	4a0a      	ldr	r2, [pc, #40]	@ (800b208 <SysTick_Config+0x40>)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b1e6:	210f      	movs	r1, #15
 800b1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ec:	f7ff ff8e 	bl	800b10c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b1f0:	4b05      	ldr	r3, [pc, #20]	@ (800b208 <SysTick_Config+0x40>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b1f6:	4b04      	ldr	r3, [pc, #16]	@ (800b208 <SysTick_Config+0x40>)
 800b1f8:	2207      	movs	r2, #7
 800b1fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	e000e010 	.word	0xe000e010

0800b20c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f7ff ff29 	bl	800b06c <__NVIC_SetPriorityGrouping>
}
 800b21a:	bf00      	nop
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b086      	sub	sp, #24
 800b226:	af00      	add	r7, sp, #0
 800b228:	4603      	mov	r3, r0
 800b22a:	60b9      	str	r1, [r7, #8]
 800b22c:	607a      	str	r2, [r7, #4]
 800b22e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b230:	f7ff ff40 	bl	800b0b4 <__NVIC_GetPriorityGrouping>
 800b234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	68b9      	ldr	r1, [r7, #8]
 800b23a:	6978      	ldr	r0, [r7, #20]
 800b23c:	f7ff ff90 	bl	800b160 <NVIC_EncodePriority>
 800b240:	4602      	mov	r2, r0
 800b242:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b246:	4611      	mov	r1, r2
 800b248:	4618      	mov	r0, r3
 800b24a:	f7ff ff5f 	bl	800b10c <__NVIC_SetPriority>
}
 800b24e:	bf00      	nop
 800b250:	3718      	adds	r7, #24
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b082      	sub	sp, #8
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	4603      	mov	r3, r0
 800b25e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b264:	4618      	mov	r0, r3
 800b266:	f7ff ff33 	bl	800b0d0 <__NVIC_EnableIRQ>
}
 800b26a:	bf00      	nop
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b082      	sub	sp, #8
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7ff ffa4 	bl	800b1c8 <SysTick_Config>
 800b280:	4603      	mov	r3, r0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
	...

0800b28c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800b28c:	b480      	push	{r7}
 800b28e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800b290:	f3bf 8f5f 	dmb	sy
}
 800b294:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b296:	4b07      	ldr	r3, [pc, #28]	@ (800b2b4 <HAL_MPU_Disable+0x28>)
 800b298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b29a:	4a06      	ldr	r2, [pc, #24]	@ (800b2b4 <HAL_MPU_Disable+0x28>)
 800b29c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b2a0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b2a2:	4b05      	ldr	r3, [pc, #20]	@ (800b2b8 <HAL_MPU_Disable+0x2c>)
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	605a      	str	r2, [r3, #4]
}
 800b2a8:	bf00      	nop
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	e000ed00 	.word	0xe000ed00
 800b2b8:	e000ed90 	.word	0xe000ed90

0800b2bc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b2c4:	4a0b      	ldr	r2, [pc, #44]	@ (800b2f4 <HAL_MPU_Enable+0x38>)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f043 0301 	orr.w	r3, r3, #1
 800b2cc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b2ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b2f8 <HAL_MPU_Enable+0x3c>)
 800b2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d2:	4a09      	ldr	r2, [pc, #36]	@ (800b2f8 <HAL_MPU_Enable+0x3c>)
 800b2d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2d8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b2da:	f3bf 8f4f 	dsb	sy
}
 800b2de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b2e0:	f3bf 8f6f 	isb	sy
}
 800b2e4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b2e6:	bf00      	nop
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	e000ed90 	.word	0xe000ed90
 800b2f8:	e000ed00 	.word	0xe000ed00

0800b2fc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	785a      	ldrb	r2, [r3, #1]
 800b308:	4b1b      	ldr	r3, [pc, #108]	@ (800b378 <HAL_MPU_ConfigRegion+0x7c>)
 800b30a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800b30c:	4b1a      	ldr	r3, [pc, #104]	@ (800b378 <HAL_MPU_ConfigRegion+0x7c>)
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	4a19      	ldr	r2, [pc, #100]	@ (800b378 <HAL_MPU_ConfigRegion+0x7c>)
 800b312:	f023 0301 	bic.w	r3, r3, #1
 800b316:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800b318:	4a17      	ldr	r2, [pc, #92]	@ (800b378 <HAL_MPU_ConfigRegion+0x7c>)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	7b1b      	ldrb	r3, [r3, #12]
 800b324:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	7adb      	ldrb	r3, [r3, #11]
 800b32a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b32c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	7a9b      	ldrb	r3, [r3, #10]
 800b332:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b334:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	7b5b      	ldrb	r3, [r3, #13]
 800b33a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b33c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	7b9b      	ldrb	r3, [r3, #14]
 800b342:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b344:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	7bdb      	ldrb	r3, [r3, #15]
 800b34a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b34c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	7a5b      	ldrb	r3, [r3, #9]
 800b352:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b354:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	7a1b      	ldrb	r3, [r3, #8]
 800b35a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b35c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	7812      	ldrb	r2, [r2, #0]
 800b362:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b364:	4a04      	ldr	r2, [pc, #16]	@ (800b378 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b366:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b368:	6113      	str	r3, [r2, #16]
}
 800b36a:	bf00      	nop
 800b36c:	370c      	adds	r7, #12
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	e000ed90 	.word	0xe000ed90

0800b37c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800b384:	f7fd fea2 	bl	80090cc <HAL_GetTick>
 800b388:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d101      	bne.n	800b394 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800b390:	2301      	movs	r3, #1
 800b392:	e312      	b.n	800b9ba <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a66      	ldr	r2, [pc, #408]	@ (800b534 <HAL_DMA_Init+0x1b8>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d04a      	beq.n	800b434 <HAL_DMA_Init+0xb8>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a65      	ldr	r2, [pc, #404]	@ (800b538 <HAL_DMA_Init+0x1bc>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d045      	beq.n	800b434 <HAL_DMA_Init+0xb8>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a63      	ldr	r2, [pc, #396]	@ (800b53c <HAL_DMA_Init+0x1c0>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d040      	beq.n	800b434 <HAL_DMA_Init+0xb8>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a62      	ldr	r2, [pc, #392]	@ (800b540 <HAL_DMA_Init+0x1c4>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d03b      	beq.n	800b434 <HAL_DMA_Init+0xb8>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a60      	ldr	r2, [pc, #384]	@ (800b544 <HAL_DMA_Init+0x1c8>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d036      	beq.n	800b434 <HAL_DMA_Init+0xb8>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a5f      	ldr	r2, [pc, #380]	@ (800b548 <HAL_DMA_Init+0x1cc>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d031      	beq.n	800b434 <HAL_DMA_Init+0xb8>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a5d      	ldr	r2, [pc, #372]	@ (800b54c <HAL_DMA_Init+0x1d0>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d02c      	beq.n	800b434 <HAL_DMA_Init+0xb8>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a5c      	ldr	r2, [pc, #368]	@ (800b550 <HAL_DMA_Init+0x1d4>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d027      	beq.n	800b434 <HAL_DMA_Init+0xb8>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a5a      	ldr	r2, [pc, #360]	@ (800b554 <HAL_DMA_Init+0x1d8>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d022      	beq.n	800b434 <HAL_DMA_Init+0xb8>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a59      	ldr	r2, [pc, #356]	@ (800b558 <HAL_DMA_Init+0x1dc>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d01d      	beq.n	800b434 <HAL_DMA_Init+0xb8>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a57      	ldr	r2, [pc, #348]	@ (800b55c <HAL_DMA_Init+0x1e0>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d018      	beq.n	800b434 <HAL_DMA_Init+0xb8>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a56      	ldr	r2, [pc, #344]	@ (800b560 <HAL_DMA_Init+0x1e4>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d013      	beq.n	800b434 <HAL_DMA_Init+0xb8>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a54      	ldr	r2, [pc, #336]	@ (800b564 <HAL_DMA_Init+0x1e8>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d00e      	beq.n	800b434 <HAL_DMA_Init+0xb8>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a53      	ldr	r2, [pc, #332]	@ (800b568 <HAL_DMA_Init+0x1ec>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d009      	beq.n	800b434 <HAL_DMA_Init+0xb8>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a51      	ldr	r2, [pc, #324]	@ (800b56c <HAL_DMA_Init+0x1f0>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d004      	beq.n	800b434 <HAL_DMA_Init+0xb8>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a50      	ldr	r2, [pc, #320]	@ (800b570 <HAL_DMA_Init+0x1f4>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d101      	bne.n	800b438 <HAL_DMA_Init+0xbc>
 800b434:	2301      	movs	r3, #1
 800b436:	e000      	b.n	800b43a <HAL_DMA_Init+0xbe>
 800b438:	2300      	movs	r3, #0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f000 813c 	beq.w	800b6b8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2202      	movs	r2, #2
 800b444:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a37      	ldr	r2, [pc, #220]	@ (800b534 <HAL_DMA_Init+0x1b8>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d04a      	beq.n	800b4f0 <HAL_DMA_Init+0x174>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a36      	ldr	r2, [pc, #216]	@ (800b538 <HAL_DMA_Init+0x1bc>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d045      	beq.n	800b4f0 <HAL_DMA_Init+0x174>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a34      	ldr	r2, [pc, #208]	@ (800b53c <HAL_DMA_Init+0x1c0>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d040      	beq.n	800b4f0 <HAL_DMA_Init+0x174>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a33      	ldr	r2, [pc, #204]	@ (800b540 <HAL_DMA_Init+0x1c4>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d03b      	beq.n	800b4f0 <HAL_DMA_Init+0x174>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a31      	ldr	r2, [pc, #196]	@ (800b544 <HAL_DMA_Init+0x1c8>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d036      	beq.n	800b4f0 <HAL_DMA_Init+0x174>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a30      	ldr	r2, [pc, #192]	@ (800b548 <HAL_DMA_Init+0x1cc>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d031      	beq.n	800b4f0 <HAL_DMA_Init+0x174>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a2e      	ldr	r2, [pc, #184]	@ (800b54c <HAL_DMA_Init+0x1d0>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d02c      	beq.n	800b4f0 <HAL_DMA_Init+0x174>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a2d      	ldr	r2, [pc, #180]	@ (800b550 <HAL_DMA_Init+0x1d4>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d027      	beq.n	800b4f0 <HAL_DMA_Init+0x174>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a2b      	ldr	r2, [pc, #172]	@ (800b554 <HAL_DMA_Init+0x1d8>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d022      	beq.n	800b4f0 <HAL_DMA_Init+0x174>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a2a      	ldr	r2, [pc, #168]	@ (800b558 <HAL_DMA_Init+0x1dc>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d01d      	beq.n	800b4f0 <HAL_DMA_Init+0x174>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a28      	ldr	r2, [pc, #160]	@ (800b55c <HAL_DMA_Init+0x1e0>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d018      	beq.n	800b4f0 <HAL_DMA_Init+0x174>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a27      	ldr	r2, [pc, #156]	@ (800b560 <HAL_DMA_Init+0x1e4>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d013      	beq.n	800b4f0 <HAL_DMA_Init+0x174>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a25      	ldr	r2, [pc, #148]	@ (800b564 <HAL_DMA_Init+0x1e8>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d00e      	beq.n	800b4f0 <HAL_DMA_Init+0x174>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a24      	ldr	r2, [pc, #144]	@ (800b568 <HAL_DMA_Init+0x1ec>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d009      	beq.n	800b4f0 <HAL_DMA_Init+0x174>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a22      	ldr	r2, [pc, #136]	@ (800b56c <HAL_DMA_Init+0x1f0>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d004      	beq.n	800b4f0 <HAL_DMA_Init+0x174>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a21      	ldr	r2, [pc, #132]	@ (800b570 <HAL_DMA_Init+0x1f4>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d108      	bne.n	800b502 <HAL_DMA_Init+0x186>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f022 0201 	bic.w	r2, r2, #1
 800b4fe:	601a      	str	r2, [r3, #0]
 800b500:	e007      	b.n	800b512 <HAL_DMA_Init+0x196>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f022 0201 	bic.w	r2, r2, #1
 800b510:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b512:	e02f      	b.n	800b574 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b514:	f7fd fdda 	bl	80090cc <HAL_GetTick>
 800b518:	4602      	mov	r2, r0
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	1ad3      	subs	r3, r2, r3
 800b51e:	2b05      	cmp	r3, #5
 800b520:	d928      	bls.n	800b574 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2220      	movs	r2, #32
 800b526:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2203      	movs	r2, #3
 800b52c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	e242      	b.n	800b9ba <HAL_DMA_Init+0x63e>
 800b534:	40020010 	.word	0x40020010
 800b538:	40020028 	.word	0x40020028
 800b53c:	40020040 	.word	0x40020040
 800b540:	40020058 	.word	0x40020058
 800b544:	40020070 	.word	0x40020070
 800b548:	40020088 	.word	0x40020088
 800b54c:	400200a0 	.word	0x400200a0
 800b550:	400200b8 	.word	0x400200b8
 800b554:	40020410 	.word	0x40020410
 800b558:	40020428 	.word	0x40020428
 800b55c:	40020440 	.word	0x40020440
 800b560:	40020458 	.word	0x40020458
 800b564:	40020470 	.word	0x40020470
 800b568:	40020488 	.word	0x40020488
 800b56c:	400204a0 	.word	0x400204a0
 800b570:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f003 0301 	and.w	r3, r3, #1
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d1c8      	bne.n	800b514 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	4b83      	ldr	r3, [pc, #524]	@ (800b79c <HAL_DMA_Init+0x420>)
 800b58e:	4013      	ands	r3, r2
 800b590:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800b59a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	691b      	ldr	r3, [r3, #16]
 800b5a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b5a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	699b      	ldr	r3, [r3, #24]
 800b5ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b5b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6a1b      	ldr	r3, [r3, #32]
 800b5b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5c4:	2b04      	cmp	r3, #4
 800b5c6:	d107      	bne.n	800b5d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	697a      	ldr	r2, [r7, #20]
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	2b28      	cmp	r3, #40	@ 0x28
 800b5de:	d903      	bls.n	800b5e8 <HAL_DMA_Init+0x26c>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5e6:	d91f      	bls.n	800b628 <HAL_DMA_Init+0x2ac>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	2b3e      	cmp	r3, #62	@ 0x3e
 800b5ee:	d903      	bls.n	800b5f8 <HAL_DMA_Init+0x27c>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	2b42      	cmp	r3, #66	@ 0x42
 800b5f6:	d917      	bls.n	800b628 <HAL_DMA_Init+0x2ac>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	2b46      	cmp	r3, #70	@ 0x46
 800b5fe:	d903      	bls.n	800b608 <HAL_DMA_Init+0x28c>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	2b48      	cmp	r3, #72	@ 0x48
 800b606:	d90f      	bls.n	800b628 <HAL_DMA_Init+0x2ac>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	2b4e      	cmp	r3, #78	@ 0x4e
 800b60e:	d903      	bls.n	800b618 <HAL_DMA_Init+0x29c>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	2b52      	cmp	r3, #82	@ 0x52
 800b616:	d907      	bls.n	800b628 <HAL_DMA_Init+0x2ac>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	2b73      	cmp	r3, #115	@ 0x73
 800b61e:	d905      	bls.n	800b62c <HAL_DMA_Init+0x2b0>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	2b77      	cmp	r3, #119	@ 0x77
 800b626:	d801      	bhi.n	800b62c <HAL_DMA_Init+0x2b0>
 800b628:	2301      	movs	r3, #1
 800b62a:	e000      	b.n	800b62e <HAL_DMA_Init+0x2b2>
 800b62c:	2300      	movs	r3, #0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d003      	beq.n	800b63a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b638:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	695b      	ldr	r3, [r3, #20]
 800b648:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	f023 0307 	bic.w	r3, r3, #7
 800b650:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	4313      	orrs	r3, r2
 800b65a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b660:	2b04      	cmp	r3, #4
 800b662:	d117      	bne.n	800b694 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b668:	697a      	ldr	r2, [r7, #20]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00e      	beq.n	800b694 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f002 fb48 	bl	800dd0c <DMA_CheckFifoParam>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d008      	beq.n	800b694 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2240      	movs	r2, #64	@ 0x40
 800b686:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800b690:	2301      	movs	r3, #1
 800b692:	e192      	b.n	800b9ba <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	697a      	ldr	r2, [r7, #20]
 800b69a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f002 fa83 	bl	800dba8 <DMA_CalcBaseAndBitshift>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6aa:	f003 031f 	and.w	r3, r3, #31
 800b6ae:	223f      	movs	r2, #63	@ 0x3f
 800b6b0:	409a      	lsls	r2, r3
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	609a      	str	r2, [r3, #8]
 800b6b6:	e0c8      	b.n	800b84a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a38      	ldr	r2, [pc, #224]	@ (800b7a0 <HAL_DMA_Init+0x424>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d022      	beq.n	800b708 <HAL_DMA_Init+0x38c>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a37      	ldr	r2, [pc, #220]	@ (800b7a4 <HAL_DMA_Init+0x428>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d01d      	beq.n	800b708 <HAL_DMA_Init+0x38c>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a35      	ldr	r2, [pc, #212]	@ (800b7a8 <HAL_DMA_Init+0x42c>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d018      	beq.n	800b708 <HAL_DMA_Init+0x38c>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a34      	ldr	r2, [pc, #208]	@ (800b7ac <HAL_DMA_Init+0x430>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d013      	beq.n	800b708 <HAL_DMA_Init+0x38c>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a32      	ldr	r2, [pc, #200]	@ (800b7b0 <HAL_DMA_Init+0x434>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d00e      	beq.n	800b708 <HAL_DMA_Init+0x38c>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a31      	ldr	r2, [pc, #196]	@ (800b7b4 <HAL_DMA_Init+0x438>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d009      	beq.n	800b708 <HAL_DMA_Init+0x38c>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a2f      	ldr	r2, [pc, #188]	@ (800b7b8 <HAL_DMA_Init+0x43c>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d004      	beq.n	800b708 <HAL_DMA_Init+0x38c>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a2e      	ldr	r2, [pc, #184]	@ (800b7bc <HAL_DMA_Init+0x440>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d101      	bne.n	800b70c <HAL_DMA_Init+0x390>
 800b708:	2301      	movs	r3, #1
 800b70a:	e000      	b.n	800b70e <HAL_DMA_Init+0x392>
 800b70c:	2300      	movs	r3, #0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	f000 8092 	beq.w	800b838 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a21      	ldr	r2, [pc, #132]	@ (800b7a0 <HAL_DMA_Init+0x424>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d021      	beq.n	800b762 <HAL_DMA_Init+0x3e6>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a20      	ldr	r2, [pc, #128]	@ (800b7a4 <HAL_DMA_Init+0x428>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d01c      	beq.n	800b762 <HAL_DMA_Init+0x3e6>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a1e      	ldr	r2, [pc, #120]	@ (800b7a8 <HAL_DMA_Init+0x42c>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d017      	beq.n	800b762 <HAL_DMA_Init+0x3e6>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a1d      	ldr	r2, [pc, #116]	@ (800b7ac <HAL_DMA_Init+0x430>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d012      	beq.n	800b762 <HAL_DMA_Init+0x3e6>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a1b      	ldr	r2, [pc, #108]	@ (800b7b0 <HAL_DMA_Init+0x434>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d00d      	beq.n	800b762 <HAL_DMA_Init+0x3e6>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a1a      	ldr	r2, [pc, #104]	@ (800b7b4 <HAL_DMA_Init+0x438>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d008      	beq.n	800b762 <HAL_DMA_Init+0x3e6>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a18      	ldr	r2, [pc, #96]	@ (800b7b8 <HAL_DMA_Init+0x43c>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d003      	beq.n	800b762 <HAL_DMA_Init+0x3e6>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a17      	ldr	r2, [pc, #92]	@ (800b7bc <HAL_DMA_Init+0x440>)
 800b760:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2202      	movs	r2, #2
 800b766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800b77a:	697a      	ldr	r2, [r7, #20]
 800b77c:	4b10      	ldr	r3, [pc, #64]	@ (800b7c0 <HAL_DMA_Init+0x444>)
 800b77e:	4013      	ands	r3, r2
 800b780:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	2b40      	cmp	r3, #64	@ 0x40
 800b788:	d01c      	beq.n	800b7c4 <HAL_DMA_Init+0x448>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	2b80      	cmp	r3, #128	@ 0x80
 800b790:	d102      	bne.n	800b798 <HAL_DMA_Init+0x41c>
 800b792:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b796:	e016      	b.n	800b7c6 <HAL_DMA_Init+0x44a>
 800b798:	2300      	movs	r3, #0
 800b79a:	e014      	b.n	800b7c6 <HAL_DMA_Init+0x44a>
 800b79c:	fe10803f 	.word	0xfe10803f
 800b7a0:	58025408 	.word	0x58025408
 800b7a4:	5802541c 	.word	0x5802541c
 800b7a8:	58025430 	.word	0x58025430
 800b7ac:	58025444 	.word	0x58025444
 800b7b0:	58025458 	.word	0x58025458
 800b7b4:	5802546c 	.word	0x5802546c
 800b7b8:	58025480 	.word	0x58025480
 800b7bc:	58025494 	.word	0x58025494
 800b7c0:	fffe000f 	.word	0xfffe000f
 800b7c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	68d2      	ldr	r2, [r2, #12]
 800b7ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b7cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	691b      	ldr	r3, [r3, #16]
 800b7d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800b7d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b7dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	699b      	ldr	r3, [r3, #24]
 800b7e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b7e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	69db      	ldr	r3, [r3, #28]
 800b7ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b7ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6a1b      	ldr	r3, [r3, #32]
 800b7f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b7f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b7f6:	697a      	ldr	r2, [r7, #20]
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	697a      	ldr	r2, [r7, #20]
 800b802:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	461a      	mov	r2, r3
 800b80a:	4b6e      	ldr	r3, [pc, #440]	@ (800b9c4 <HAL_DMA_Init+0x648>)
 800b80c:	4413      	add	r3, r2
 800b80e:	4a6e      	ldr	r2, [pc, #440]	@ (800b9c8 <HAL_DMA_Init+0x64c>)
 800b810:	fba2 2303 	umull	r2, r3, r2, r3
 800b814:	091b      	lsrs	r3, r3, #4
 800b816:	009a      	lsls	r2, r3, #2
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f002 f9c3 	bl	800dba8 <DMA_CalcBaseAndBitshift>
 800b822:	4603      	mov	r3, r0
 800b824:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b82a:	f003 031f 	and.w	r3, r3, #31
 800b82e:	2201      	movs	r2, #1
 800b830:	409a      	lsls	r2, r3
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	605a      	str	r2, [r3, #4]
 800b836:	e008      	b.n	800b84a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2240      	movs	r2, #64	@ 0x40
 800b83c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2203      	movs	r2, #3
 800b842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	e0b7      	b.n	800b9ba <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a5f      	ldr	r2, [pc, #380]	@ (800b9cc <HAL_DMA_Init+0x650>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d072      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a5d      	ldr	r2, [pc, #372]	@ (800b9d0 <HAL_DMA_Init+0x654>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d06d      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a5c      	ldr	r2, [pc, #368]	@ (800b9d4 <HAL_DMA_Init+0x658>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d068      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a5a      	ldr	r2, [pc, #360]	@ (800b9d8 <HAL_DMA_Init+0x65c>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d063      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a59      	ldr	r2, [pc, #356]	@ (800b9dc <HAL_DMA_Init+0x660>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d05e      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a57      	ldr	r2, [pc, #348]	@ (800b9e0 <HAL_DMA_Init+0x664>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d059      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a56      	ldr	r2, [pc, #344]	@ (800b9e4 <HAL_DMA_Init+0x668>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d054      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a54      	ldr	r2, [pc, #336]	@ (800b9e8 <HAL_DMA_Init+0x66c>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d04f      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a53      	ldr	r2, [pc, #332]	@ (800b9ec <HAL_DMA_Init+0x670>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d04a      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a51      	ldr	r2, [pc, #324]	@ (800b9f0 <HAL_DMA_Init+0x674>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d045      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4a50      	ldr	r2, [pc, #320]	@ (800b9f4 <HAL_DMA_Init+0x678>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d040      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a4e      	ldr	r2, [pc, #312]	@ (800b9f8 <HAL_DMA_Init+0x67c>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d03b      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a4d      	ldr	r2, [pc, #308]	@ (800b9fc <HAL_DMA_Init+0x680>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d036      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a4b      	ldr	r2, [pc, #300]	@ (800ba00 <HAL_DMA_Init+0x684>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d031      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a4a      	ldr	r2, [pc, #296]	@ (800ba04 <HAL_DMA_Init+0x688>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d02c      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a48      	ldr	r2, [pc, #288]	@ (800ba08 <HAL_DMA_Init+0x68c>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d027      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a47      	ldr	r2, [pc, #284]	@ (800ba0c <HAL_DMA_Init+0x690>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d022      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a45      	ldr	r2, [pc, #276]	@ (800ba10 <HAL_DMA_Init+0x694>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d01d      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a44      	ldr	r2, [pc, #272]	@ (800ba14 <HAL_DMA_Init+0x698>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d018      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a42      	ldr	r2, [pc, #264]	@ (800ba18 <HAL_DMA_Init+0x69c>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d013      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a41      	ldr	r2, [pc, #260]	@ (800ba1c <HAL_DMA_Init+0x6a0>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d00e      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a3f      	ldr	r2, [pc, #252]	@ (800ba20 <HAL_DMA_Init+0x6a4>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d009      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a3e      	ldr	r2, [pc, #248]	@ (800ba24 <HAL_DMA_Init+0x6a8>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d004      	beq.n	800b93a <HAL_DMA_Init+0x5be>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a3c      	ldr	r2, [pc, #240]	@ (800ba28 <HAL_DMA_Init+0x6ac>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d101      	bne.n	800b93e <HAL_DMA_Init+0x5c2>
 800b93a:	2301      	movs	r3, #1
 800b93c:	e000      	b.n	800b940 <HAL_DMA_Init+0x5c4>
 800b93e:	2300      	movs	r3, #0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d032      	beq.n	800b9aa <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f002 fa5d 	bl	800de04 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	2b80      	cmp	r3, #128	@ 0x80
 800b950:	d102      	bne.n	800b958 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	685a      	ldr	r2, [r3, #4]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b960:	b2d2      	uxtb	r2, r2
 800b962:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800b96c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d010      	beq.n	800b998 <HAL_DMA_Init+0x61c>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	2b08      	cmp	r3, #8
 800b97c:	d80c      	bhi.n	800b998 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f002 fada 	bl	800df38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b988:	2200      	movs	r2, #0
 800b98a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b994:	605a      	str	r2, [r3, #4]
 800b996:	e008      	b.n	800b9aa <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3718      	adds	r7, #24
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	a7fdabf8 	.word	0xa7fdabf8
 800b9c8:	cccccccd 	.word	0xcccccccd
 800b9cc:	40020010 	.word	0x40020010
 800b9d0:	40020028 	.word	0x40020028
 800b9d4:	40020040 	.word	0x40020040
 800b9d8:	40020058 	.word	0x40020058
 800b9dc:	40020070 	.word	0x40020070
 800b9e0:	40020088 	.word	0x40020088
 800b9e4:	400200a0 	.word	0x400200a0
 800b9e8:	400200b8 	.word	0x400200b8
 800b9ec:	40020410 	.word	0x40020410
 800b9f0:	40020428 	.word	0x40020428
 800b9f4:	40020440 	.word	0x40020440
 800b9f8:	40020458 	.word	0x40020458
 800b9fc:	40020470 	.word	0x40020470
 800ba00:	40020488 	.word	0x40020488
 800ba04:	400204a0 	.word	0x400204a0
 800ba08:	400204b8 	.word	0x400204b8
 800ba0c:	58025408 	.word	0x58025408
 800ba10:	5802541c 	.word	0x5802541c
 800ba14:	58025430 	.word	0x58025430
 800ba18:	58025444 	.word	0x58025444
 800ba1c:	58025458 	.word	0x58025458
 800ba20:	5802546c 	.word	0x5802546c
 800ba24:	58025480 	.word	0x58025480
 800ba28:	58025494 	.word	0x58025494

0800ba2c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	607a      	str	r2, [r7, #4]
 800ba38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d101      	bne.n	800ba48 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	e226      	b.n	800be96 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d101      	bne.n	800ba56 <HAL_DMA_Start_IT+0x2a>
 800ba52:	2302      	movs	r3, #2
 800ba54:	e21f      	b.n	800be96 <HAL_DMA_Start_IT+0x46a>
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	f040 820a 	bne.w	800be80 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2202      	movs	r2, #2
 800ba70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2200      	movs	r2, #0
 800ba78:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a68      	ldr	r2, [pc, #416]	@ (800bc20 <HAL_DMA_Start_IT+0x1f4>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d04a      	beq.n	800bb1a <HAL_DMA_Start_IT+0xee>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a66      	ldr	r2, [pc, #408]	@ (800bc24 <HAL_DMA_Start_IT+0x1f8>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d045      	beq.n	800bb1a <HAL_DMA_Start_IT+0xee>
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a65      	ldr	r2, [pc, #404]	@ (800bc28 <HAL_DMA_Start_IT+0x1fc>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d040      	beq.n	800bb1a <HAL_DMA_Start_IT+0xee>
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a63      	ldr	r2, [pc, #396]	@ (800bc2c <HAL_DMA_Start_IT+0x200>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d03b      	beq.n	800bb1a <HAL_DMA_Start_IT+0xee>
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4a62      	ldr	r2, [pc, #392]	@ (800bc30 <HAL_DMA_Start_IT+0x204>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d036      	beq.n	800bb1a <HAL_DMA_Start_IT+0xee>
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a60      	ldr	r2, [pc, #384]	@ (800bc34 <HAL_DMA_Start_IT+0x208>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d031      	beq.n	800bb1a <HAL_DMA_Start_IT+0xee>
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a5f      	ldr	r2, [pc, #380]	@ (800bc38 <HAL_DMA_Start_IT+0x20c>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d02c      	beq.n	800bb1a <HAL_DMA_Start_IT+0xee>
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a5d      	ldr	r2, [pc, #372]	@ (800bc3c <HAL_DMA_Start_IT+0x210>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d027      	beq.n	800bb1a <HAL_DMA_Start_IT+0xee>
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a5c      	ldr	r2, [pc, #368]	@ (800bc40 <HAL_DMA_Start_IT+0x214>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d022      	beq.n	800bb1a <HAL_DMA_Start_IT+0xee>
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a5a      	ldr	r2, [pc, #360]	@ (800bc44 <HAL_DMA_Start_IT+0x218>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d01d      	beq.n	800bb1a <HAL_DMA_Start_IT+0xee>
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a59      	ldr	r2, [pc, #356]	@ (800bc48 <HAL_DMA_Start_IT+0x21c>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d018      	beq.n	800bb1a <HAL_DMA_Start_IT+0xee>
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a57      	ldr	r2, [pc, #348]	@ (800bc4c <HAL_DMA_Start_IT+0x220>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d013      	beq.n	800bb1a <HAL_DMA_Start_IT+0xee>
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a56      	ldr	r2, [pc, #344]	@ (800bc50 <HAL_DMA_Start_IT+0x224>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d00e      	beq.n	800bb1a <HAL_DMA_Start_IT+0xee>
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a54      	ldr	r2, [pc, #336]	@ (800bc54 <HAL_DMA_Start_IT+0x228>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d009      	beq.n	800bb1a <HAL_DMA_Start_IT+0xee>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a53      	ldr	r2, [pc, #332]	@ (800bc58 <HAL_DMA_Start_IT+0x22c>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d004      	beq.n	800bb1a <HAL_DMA_Start_IT+0xee>
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a51      	ldr	r2, [pc, #324]	@ (800bc5c <HAL_DMA_Start_IT+0x230>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d108      	bne.n	800bb2c <HAL_DMA_Start_IT+0x100>
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f022 0201 	bic.w	r2, r2, #1
 800bb28:	601a      	str	r2, [r3, #0]
 800bb2a:	e007      	b.n	800bb3c <HAL_DMA_Start_IT+0x110>
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f022 0201 	bic.w	r2, r2, #1
 800bb3a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	68b9      	ldr	r1, [r7, #8]
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f001 fe84 	bl	800d850 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a34      	ldr	r2, [pc, #208]	@ (800bc20 <HAL_DMA_Start_IT+0x1f4>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d04a      	beq.n	800bbe8 <HAL_DMA_Start_IT+0x1bc>
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a33      	ldr	r2, [pc, #204]	@ (800bc24 <HAL_DMA_Start_IT+0x1f8>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d045      	beq.n	800bbe8 <HAL_DMA_Start_IT+0x1bc>
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a31      	ldr	r2, [pc, #196]	@ (800bc28 <HAL_DMA_Start_IT+0x1fc>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d040      	beq.n	800bbe8 <HAL_DMA_Start_IT+0x1bc>
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a30      	ldr	r2, [pc, #192]	@ (800bc2c <HAL_DMA_Start_IT+0x200>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d03b      	beq.n	800bbe8 <HAL_DMA_Start_IT+0x1bc>
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a2e      	ldr	r2, [pc, #184]	@ (800bc30 <HAL_DMA_Start_IT+0x204>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d036      	beq.n	800bbe8 <HAL_DMA_Start_IT+0x1bc>
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a2d      	ldr	r2, [pc, #180]	@ (800bc34 <HAL_DMA_Start_IT+0x208>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d031      	beq.n	800bbe8 <HAL_DMA_Start_IT+0x1bc>
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a2b      	ldr	r2, [pc, #172]	@ (800bc38 <HAL_DMA_Start_IT+0x20c>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d02c      	beq.n	800bbe8 <HAL_DMA_Start_IT+0x1bc>
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4a2a      	ldr	r2, [pc, #168]	@ (800bc3c <HAL_DMA_Start_IT+0x210>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d027      	beq.n	800bbe8 <HAL_DMA_Start_IT+0x1bc>
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a28      	ldr	r2, [pc, #160]	@ (800bc40 <HAL_DMA_Start_IT+0x214>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d022      	beq.n	800bbe8 <HAL_DMA_Start_IT+0x1bc>
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4a27      	ldr	r2, [pc, #156]	@ (800bc44 <HAL_DMA_Start_IT+0x218>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d01d      	beq.n	800bbe8 <HAL_DMA_Start_IT+0x1bc>
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a25      	ldr	r2, [pc, #148]	@ (800bc48 <HAL_DMA_Start_IT+0x21c>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d018      	beq.n	800bbe8 <HAL_DMA_Start_IT+0x1bc>
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a24      	ldr	r2, [pc, #144]	@ (800bc4c <HAL_DMA_Start_IT+0x220>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d013      	beq.n	800bbe8 <HAL_DMA_Start_IT+0x1bc>
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4a22      	ldr	r2, [pc, #136]	@ (800bc50 <HAL_DMA_Start_IT+0x224>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d00e      	beq.n	800bbe8 <HAL_DMA_Start_IT+0x1bc>
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4a21      	ldr	r2, [pc, #132]	@ (800bc54 <HAL_DMA_Start_IT+0x228>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d009      	beq.n	800bbe8 <HAL_DMA_Start_IT+0x1bc>
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4a1f      	ldr	r2, [pc, #124]	@ (800bc58 <HAL_DMA_Start_IT+0x22c>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d004      	beq.n	800bbe8 <HAL_DMA_Start_IT+0x1bc>
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4a1e      	ldr	r2, [pc, #120]	@ (800bc5c <HAL_DMA_Start_IT+0x230>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d101      	bne.n	800bbec <HAL_DMA_Start_IT+0x1c0>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e000      	b.n	800bbee <HAL_DMA_Start_IT+0x1c2>
 800bbec:	2300      	movs	r3, #0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d036      	beq.n	800bc60 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f023 021e 	bic.w	r2, r3, #30
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f042 0216 	orr.w	r2, r2, #22
 800bc04:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d03e      	beq.n	800bc8c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f042 0208 	orr.w	r2, r2, #8
 800bc1c:	601a      	str	r2, [r3, #0]
 800bc1e:	e035      	b.n	800bc8c <HAL_DMA_Start_IT+0x260>
 800bc20:	40020010 	.word	0x40020010
 800bc24:	40020028 	.word	0x40020028
 800bc28:	40020040 	.word	0x40020040
 800bc2c:	40020058 	.word	0x40020058
 800bc30:	40020070 	.word	0x40020070
 800bc34:	40020088 	.word	0x40020088
 800bc38:	400200a0 	.word	0x400200a0
 800bc3c:	400200b8 	.word	0x400200b8
 800bc40:	40020410 	.word	0x40020410
 800bc44:	40020428 	.word	0x40020428
 800bc48:	40020440 	.word	0x40020440
 800bc4c:	40020458 	.word	0x40020458
 800bc50:	40020470 	.word	0x40020470
 800bc54:	40020488 	.word	0x40020488
 800bc58:	400204a0 	.word	0x400204a0
 800bc5c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f023 020e 	bic.w	r2, r3, #14
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f042 020a 	orr.w	r2, r2, #10
 800bc72:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d007      	beq.n	800bc8c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f042 0204 	orr.w	r2, r2, #4
 800bc8a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a83      	ldr	r2, [pc, #524]	@ (800bea0 <HAL_DMA_Start_IT+0x474>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d072      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a82      	ldr	r2, [pc, #520]	@ (800bea4 <HAL_DMA_Start_IT+0x478>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d06d      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a80      	ldr	r2, [pc, #512]	@ (800bea8 <HAL_DMA_Start_IT+0x47c>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d068      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a7f      	ldr	r2, [pc, #508]	@ (800beac <HAL_DMA_Start_IT+0x480>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d063      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a7d      	ldr	r2, [pc, #500]	@ (800beb0 <HAL_DMA_Start_IT+0x484>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d05e      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a7c      	ldr	r2, [pc, #496]	@ (800beb4 <HAL_DMA_Start_IT+0x488>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d059      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a7a      	ldr	r2, [pc, #488]	@ (800beb8 <HAL_DMA_Start_IT+0x48c>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d054      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a79      	ldr	r2, [pc, #484]	@ (800bebc <HAL_DMA_Start_IT+0x490>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d04f      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a77      	ldr	r2, [pc, #476]	@ (800bec0 <HAL_DMA_Start_IT+0x494>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d04a      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a76      	ldr	r2, [pc, #472]	@ (800bec4 <HAL_DMA_Start_IT+0x498>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d045      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a74      	ldr	r2, [pc, #464]	@ (800bec8 <HAL_DMA_Start_IT+0x49c>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d040      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a73      	ldr	r2, [pc, #460]	@ (800becc <HAL_DMA_Start_IT+0x4a0>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d03b      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a71      	ldr	r2, [pc, #452]	@ (800bed0 <HAL_DMA_Start_IT+0x4a4>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d036      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4a70      	ldr	r2, [pc, #448]	@ (800bed4 <HAL_DMA_Start_IT+0x4a8>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d031      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a6e      	ldr	r2, [pc, #440]	@ (800bed8 <HAL_DMA_Start_IT+0x4ac>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d02c      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4a6d      	ldr	r2, [pc, #436]	@ (800bedc <HAL_DMA_Start_IT+0x4b0>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d027      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a6b      	ldr	r2, [pc, #428]	@ (800bee0 <HAL_DMA_Start_IT+0x4b4>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d022      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a6a      	ldr	r2, [pc, #424]	@ (800bee4 <HAL_DMA_Start_IT+0x4b8>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d01d      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a68      	ldr	r2, [pc, #416]	@ (800bee8 <HAL_DMA_Start_IT+0x4bc>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d018      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a67      	ldr	r2, [pc, #412]	@ (800beec <HAL_DMA_Start_IT+0x4c0>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d013      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a65      	ldr	r2, [pc, #404]	@ (800bef0 <HAL_DMA_Start_IT+0x4c4>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d00e      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a64      	ldr	r2, [pc, #400]	@ (800bef4 <HAL_DMA_Start_IT+0x4c8>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d009      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a62      	ldr	r2, [pc, #392]	@ (800bef8 <HAL_DMA_Start_IT+0x4cc>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d004      	beq.n	800bd7c <HAL_DMA_Start_IT+0x350>
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a61      	ldr	r2, [pc, #388]	@ (800befc <HAL_DMA_Start_IT+0x4d0>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d101      	bne.n	800bd80 <HAL_DMA_Start_IT+0x354>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e000      	b.n	800bd82 <HAL_DMA_Start_IT+0x356>
 800bd80:	2300      	movs	r3, #0
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d01a      	beq.n	800bdbc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d007      	beq.n	800bda4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bda2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d007      	beq.n	800bdbc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bdba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a37      	ldr	r2, [pc, #220]	@ (800bea0 <HAL_DMA_Start_IT+0x474>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d04a      	beq.n	800be5c <HAL_DMA_Start_IT+0x430>
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a36      	ldr	r2, [pc, #216]	@ (800bea4 <HAL_DMA_Start_IT+0x478>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d045      	beq.n	800be5c <HAL_DMA_Start_IT+0x430>
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a34      	ldr	r2, [pc, #208]	@ (800bea8 <HAL_DMA_Start_IT+0x47c>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d040      	beq.n	800be5c <HAL_DMA_Start_IT+0x430>
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4a33      	ldr	r2, [pc, #204]	@ (800beac <HAL_DMA_Start_IT+0x480>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d03b      	beq.n	800be5c <HAL_DMA_Start_IT+0x430>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a31      	ldr	r2, [pc, #196]	@ (800beb0 <HAL_DMA_Start_IT+0x484>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d036      	beq.n	800be5c <HAL_DMA_Start_IT+0x430>
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a30      	ldr	r2, [pc, #192]	@ (800beb4 <HAL_DMA_Start_IT+0x488>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d031      	beq.n	800be5c <HAL_DMA_Start_IT+0x430>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a2e      	ldr	r2, [pc, #184]	@ (800beb8 <HAL_DMA_Start_IT+0x48c>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d02c      	beq.n	800be5c <HAL_DMA_Start_IT+0x430>
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a2d      	ldr	r2, [pc, #180]	@ (800bebc <HAL_DMA_Start_IT+0x490>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d027      	beq.n	800be5c <HAL_DMA_Start_IT+0x430>
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a2b      	ldr	r2, [pc, #172]	@ (800bec0 <HAL_DMA_Start_IT+0x494>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d022      	beq.n	800be5c <HAL_DMA_Start_IT+0x430>
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a2a      	ldr	r2, [pc, #168]	@ (800bec4 <HAL_DMA_Start_IT+0x498>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d01d      	beq.n	800be5c <HAL_DMA_Start_IT+0x430>
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a28      	ldr	r2, [pc, #160]	@ (800bec8 <HAL_DMA_Start_IT+0x49c>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d018      	beq.n	800be5c <HAL_DMA_Start_IT+0x430>
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a27      	ldr	r2, [pc, #156]	@ (800becc <HAL_DMA_Start_IT+0x4a0>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d013      	beq.n	800be5c <HAL_DMA_Start_IT+0x430>
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a25      	ldr	r2, [pc, #148]	@ (800bed0 <HAL_DMA_Start_IT+0x4a4>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d00e      	beq.n	800be5c <HAL_DMA_Start_IT+0x430>
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a24      	ldr	r2, [pc, #144]	@ (800bed4 <HAL_DMA_Start_IT+0x4a8>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d009      	beq.n	800be5c <HAL_DMA_Start_IT+0x430>
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a22      	ldr	r2, [pc, #136]	@ (800bed8 <HAL_DMA_Start_IT+0x4ac>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d004      	beq.n	800be5c <HAL_DMA_Start_IT+0x430>
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a21      	ldr	r2, [pc, #132]	@ (800bedc <HAL_DMA_Start_IT+0x4b0>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d108      	bne.n	800be6e <HAL_DMA_Start_IT+0x442>
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f042 0201 	orr.w	r2, r2, #1
 800be6a:	601a      	str	r2, [r3, #0]
 800be6c:	e012      	b.n	800be94 <HAL_DMA_Start_IT+0x468>
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f042 0201 	orr.w	r2, r2, #1
 800be7c:	601a      	str	r2, [r3, #0]
 800be7e:	e009      	b.n	800be94 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800be86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800be90:	2301      	movs	r3, #1
 800be92:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800be94:	7dfb      	ldrb	r3, [r7, #23]
}
 800be96:	4618      	mov	r0, r3
 800be98:	3718      	adds	r7, #24
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	40020010 	.word	0x40020010
 800bea4:	40020028 	.word	0x40020028
 800bea8:	40020040 	.word	0x40020040
 800beac:	40020058 	.word	0x40020058
 800beb0:	40020070 	.word	0x40020070
 800beb4:	40020088 	.word	0x40020088
 800beb8:	400200a0 	.word	0x400200a0
 800bebc:	400200b8 	.word	0x400200b8
 800bec0:	40020410 	.word	0x40020410
 800bec4:	40020428 	.word	0x40020428
 800bec8:	40020440 	.word	0x40020440
 800becc:	40020458 	.word	0x40020458
 800bed0:	40020470 	.word	0x40020470
 800bed4:	40020488 	.word	0x40020488
 800bed8:	400204a0 	.word	0x400204a0
 800bedc:	400204b8 	.word	0x400204b8
 800bee0:	58025408 	.word	0x58025408
 800bee4:	5802541c 	.word	0x5802541c
 800bee8:	58025430 	.word	0x58025430
 800beec:	58025444 	.word	0x58025444
 800bef0:	58025458 	.word	0x58025458
 800bef4:	5802546c 	.word	0x5802546c
 800bef8:	58025480 	.word	0x58025480
 800befc:	58025494 	.word	0x58025494

0800bf00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b086      	sub	sp, #24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800bf08:	f7fd f8e0 	bl	80090cc <HAL_GetTick>
 800bf0c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d101      	bne.n	800bf18 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	e2dc      	b.n	800c4d2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d008      	beq.n	800bf36 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2280      	movs	r2, #128	@ 0x80
 800bf28:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800bf32:	2301      	movs	r3, #1
 800bf34:	e2cd      	b.n	800c4d2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a76      	ldr	r2, [pc, #472]	@ (800c114 <HAL_DMA_Abort+0x214>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d04a      	beq.n	800bfd6 <HAL_DMA_Abort+0xd6>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a74      	ldr	r2, [pc, #464]	@ (800c118 <HAL_DMA_Abort+0x218>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d045      	beq.n	800bfd6 <HAL_DMA_Abort+0xd6>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a73      	ldr	r2, [pc, #460]	@ (800c11c <HAL_DMA_Abort+0x21c>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d040      	beq.n	800bfd6 <HAL_DMA_Abort+0xd6>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a71      	ldr	r2, [pc, #452]	@ (800c120 <HAL_DMA_Abort+0x220>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d03b      	beq.n	800bfd6 <HAL_DMA_Abort+0xd6>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a70      	ldr	r2, [pc, #448]	@ (800c124 <HAL_DMA_Abort+0x224>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d036      	beq.n	800bfd6 <HAL_DMA_Abort+0xd6>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a6e      	ldr	r2, [pc, #440]	@ (800c128 <HAL_DMA_Abort+0x228>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d031      	beq.n	800bfd6 <HAL_DMA_Abort+0xd6>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a6d      	ldr	r2, [pc, #436]	@ (800c12c <HAL_DMA_Abort+0x22c>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d02c      	beq.n	800bfd6 <HAL_DMA_Abort+0xd6>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a6b      	ldr	r2, [pc, #428]	@ (800c130 <HAL_DMA_Abort+0x230>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d027      	beq.n	800bfd6 <HAL_DMA_Abort+0xd6>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a6a      	ldr	r2, [pc, #424]	@ (800c134 <HAL_DMA_Abort+0x234>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d022      	beq.n	800bfd6 <HAL_DMA_Abort+0xd6>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a68      	ldr	r2, [pc, #416]	@ (800c138 <HAL_DMA_Abort+0x238>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d01d      	beq.n	800bfd6 <HAL_DMA_Abort+0xd6>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4a67      	ldr	r2, [pc, #412]	@ (800c13c <HAL_DMA_Abort+0x23c>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d018      	beq.n	800bfd6 <HAL_DMA_Abort+0xd6>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a65      	ldr	r2, [pc, #404]	@ (800c140 <HAL_DMA_Abort+0x240>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d013      	beq.n	800bfd6 <HAL_DMA_Abort+0xd6>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4a64      	ldr	r2, [pc, #400]	@ (800c144 <HAL_DMA_Abort+0x244>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d00e      	beq.n	800bfd6 <HAL_DMA_Abort+0xd6>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a62      	ldr	r2, [pc, #392]	@ (800c148 <HAL_DMA_Abort+0x248>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d009      	beq.n	800bfd6 <HAL_DMA_Abort+0xd6>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4a61      	ldr	r2, [pc, #388]	@ (800c14c <HAL_DMA_Abort+0x24c>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d004      	beq.n	800bfd6 <HAL_DMA_Abort+0xd6>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	4a5f      	ldr	r2, [pc, #380]	@ (800c150 <HAL_DMA_Abort+0x250>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d101      	bne.n	800bfda <HAL_DMA_Abort+0xda>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e000      	b.n	800bfdc <HAL_DMA_Abort+0xdc>
 800bfda:	2300      	movs	r3, #0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d013      	beq.n	800c008 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f022 021e 	bic.w	r2, r2, #30
 800bfee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	695a      	ldr	r2, [r3, #20]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bffe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	617b      	str	r3, [r7, #20]
 800c006:	e00a      	b.n	800c01e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f022 020e 	bic.w	r2, r2, #14
 800c016:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a3c      	ldr	r2, [pc, #240]	@ (800c114 <HAL_DMA_Abort+0x214>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d072      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a3a      	ldr	r2, [pc, #232]	@ (800c118 <HAL_DMA_Abort+0x218>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d06d      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a39      	ldr	r2, [pc, #228]	@ (800c11c <HAL_DMA_Abort+0x21c>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d068      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a37      	ldr	r2, [pc, #220]	@ (800c120 <HAL_DMA_Abort+0x220>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d063      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a36      	ldr	r2, [pc, #216]	@ (800c124 <HAL_DMA_Abort+0x224>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d05e      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a34      	ldr	r2, [pc, #208]	@ (800c128 <HAL_DMA_Abort+0x228>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d059      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a33      	ldr	r2, [pc, #204]	@ (800c12c <HAL_DMA_Abort+0x22c>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d054      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a31      	ldr	r2, [pc, #196]	@ (800c130 <HAL_DMA_Abort+0x230>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d04f      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4a30      	ldr	r2, [pc, #192]	@ (800c134 <HAL_DMA_Abort+0x234>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d04a      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a2e      	ldr	r2, [pc, #184]	@ (800c138 <HAL_DMA_Abort+0x238>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d045      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a2d      	ldr	r2, [pc, #180]	@ (800c13c <HAL_DMA_Abort+0x23c>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d040      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a2b      	ldr	r2, [pc, #172]	@ (800c140 <HAL_DMA_Abort+0x240>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d03b      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a2a      	ldr	r2, [pc, #168]	@ (800c144 <HAL_DMA_Abort+0x244>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d036      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a28      	ldr	r2, [pc, #160]	@ (800c148 <HAL_DMA_Abort+0x248>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d031      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4a27      	ldr	r2, [pc, #156]	@ (800c14c <HAL_DMA_Abort+0x24c>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d02c      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a25      	ldr	r2, [pc, #148]	@ (800c150 <HAL_DMA_Abort+0x250>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d027      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a24      	ldr	r2, [pc, #144]	@ (800c154 <HAL_DMA_Abort+0x254>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d022      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a22      	ldr	r2, [pc, #136]	@ (800c158 <HAL_DMA_Abort+0x258>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d01d      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a21      	ldr	r2, [pc, #132]	@ (800c15c <HAL_DMA_Abort+0x25c>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d018      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a1f      	ldr	r2, [pc, #124]	@ (800c160 <HAL_DMA_Abort+0x260>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d013      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a1e      	ldr	r2, [pc, #120]	@ (800c164 <HAL_DMA_Abort+0x264>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d00e      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a1c      	ldr	r2, [pc, #112]	@ (800c168 <HAL_DMA_Abort+0x268>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d009      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a1b      	ldr	r2, [pc, #108]	@ (800c16c <HAL_DMA_Abort+0x26c>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d004      	beq.n	800c10e <HAL_DMA_Abort+0x20e>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a19      	ldr	r2, [pc, #100]	@ (800c170 <HAL_DMA_Abort+0x270>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d132      	bne.n	800c174 <HAL_DMA_Abort+0x274>
 800c10e:	2301      	movs	r3, #1
 800c110:	e031      	b.n	800c176 <HAL_DMA_Abort+0x276>
 800c112:	bf00      	nop
 800c114:	40020010 	.word	0x40020010
 800c118:	40020028 	.word	0x40020028
 800c11c:	40020040 	.word	0x40020040
 800c120:	40020058 	.word	0x40020058
 800c124:	40020070 	.word	0x40020070
 800c128:	40020088 	.word	0x40020088
 800c12c:	400200a0 	.word	0x400200a0
 800c130:	400200b8 	.word	0x400200b8
 800c134:	40020410 	.word	0x40020410
 800c138:	40020428 	.word	0x40020428
 800c13c:	40020440 	.word	0x40020440
 800c140:	40020458 	.word	0x40020458
 800c144:	40020470 	.word	0x40020470
 800c148:	40020488 	.word	0x40020488
 800c14c:	400204a0 	.word	0x400204a0
 800c150:	400204b8 	.word	0x400204b8
 800c154:	58025408 	.word	0x58025408
 800c158:	5802541c 	.word	0x5802541c
 800c15c:	58025430 	.word	0x58025430
 800c160:	58025444 	.word	0x58025444
 800c164:	58025458 	.word	0x58025458
 800c168:	5802546c 	.word	0x5802546c
 800c16c:	58025480 	.word	0x58025480
 800c170:	58025494 	.word	0x58025494
 800c174:	2300      	movs	r3, #0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d007      	beq.n	800c18a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c188:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4a6d      	ldr	r2, [pc, #436]	@ (800c344 <HAL_DMA_Abort+0x444>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d04a      	beq.n	800c22a <HAL_DMA_Abort+0x32a>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a6b      	ldr	r2, [pc, #428]	@ (800c348 <HAL_DMA_Abort+0x448>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d045      	beq.n	800c22a <HAL_DMA_Abort+0x32a>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a6a      	ldr	r2, [pc, #424]	@ (800c34c <HAL_DMA_Abort+0x44c>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d040      	beq.n	800c22a <HAL_DMA_Abort+0x32a>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a68      	ldr	r2, [pc, #416]	@ (800c350 <HAL_DMA_Abort+0x450>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d03b      	beq.n	800c22a <HAL_DMA_Abort+0x32a>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a67      	ldr	r2, [pc, #412]	@ (800c354 <HAL_DMA_Abort+0x454>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d036      	beq.n	800c22a <HAL_DMA_Abort+0x32a>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a65      	ldr	r2, [pc, #404]	@ (800c358 <HAL_DMA_Abort+0x458>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d031      	beq.n	800c22a <HAL_DMA_Abort+0x32a>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a64      	ldr	r2, [pc, #400]	@ (800c35c <HAL_DMA_Abort+0x45c>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d02c      	beq.n	800c22a <HAL_DMA_Abort+0x32a>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4a62      	ldr	r2, [pc, #392]	@ (800c360 <HAL_DMA_Abort+0x460>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d027      	beq.n	800c22a <HAL_DMA_Abort+0x32a>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4a61      	ldr	r2, [pc, #388]	@ (800c364 <HAL_DMA_Abort+0x464>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d022      	beq.n	800c22a <HAL_DMA_Abort+0x32a>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4a5f      	ldr	r2, [pc, #380]	@ (800c368 <HAL_DMA_Abort+0x468>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d01d      	beq.n	800c22a <HAL_DMA_Abort+0x32a>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a5e      	ldr	r2, [pc, #376]	@ (800c36c <HAL_DMA_Abort+0x46c>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d018      	beq.n	800c22a <HAL_DMA_Abort+0x32a>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a5c      	ldr	r2, [pc, #368]	@ (800c370 <HAL_DMA_Abort+0x470>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d013      	beq.n	800c22a <HAL_DMA_Abort+0x32a>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4a5b      	ldr	r2, [pc, #364]	@ (800c374 <HAL_DMA_Abort+0x474>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d00e      	beq.n	800c22a <HAL_DMA_Abort+0x32a>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a59      	ldr	r2, [pc, #356]	@ (800c378 <HAL_DMA_Abort+0x478>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d009      	beq.n	800c22a <HAL_DMA_Abort+0x32a>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a58      	ldr	r2, [pc, #352]	@ (800c37c <HAL_DMA_Abort+0x47c>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d004      	beq.n	800c22a <HAL_DMA_Abort+0x32a>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4a56      	ldr	r2, [pc, #344]	@ (800c380 <HAL_DMA_Abort+0x480>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d108      	bne.n	800c23c <HAL_DMA_Abort+0x33c>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f022 0201 	bic.w	r2, r2, #1
 800c238:	601a      	str	r2, [r3, #0]
 800c23a:	e007      	b.n	800c24c <HAL_DMA_Abort+0x34c>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f022 0201 	bic.w	r2, r2, #1
 800c24a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c24c:	e013      	b.n	800c276 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c24e:	f7fc ff3d 	bl	80090cc <HAL_GetTick>
 800c252:	4602      	mov	r2, r0
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	1ad3      	subs	r3, r2, r3
 800c258:	2b05      	cmp	r3, #5
 800c25a:	d90c      	bls.n	800c276 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2220      	movs	r2, #32
 800c260:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2203      	movs	r2, #3
 800c266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800c272:	2301      	movs	r3, #1
 800c274:	e12d      	b.n	800c4d2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f003 0301 	and.w	r3, r3, #1
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d1e5      	bne.n	800c24e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4a2f      	ldr	r2, [pc, #188]	@ (800c344 <HAL_DMA_Abort+0x444>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d04a      	beq.n	800c322 <HAL_DMA_Abort+0x422>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a2d      	ldr	r2, [pc, #180]	@ (800c348 <HAL_DMA_Abort+0x448>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d045      	beq.n	800c322 <HAL_DMA_Abort+0x422>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a2c      	ldr	r2, [pc, #176]	@ (800c34c <HAL_DMA_Abort+0x44c>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d040      	beq.n	800c322 <HAL_DMA_Abort+0x422>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a2a      	ldr	r2, [pc, #168]	@ (800c350 <HAL_DMA_Abort+0x450>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d03b      	beq.n	800c322 <HAL_DMA_Abort+0x422>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4a29      	ldr	r2, [pc, #164]	@ (800c354 <HAL_DMA_Abort+0x454>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d036      	beq.n	800c322 <HAL_DMA_Abort+0x422>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a27      	ldr	r2, [pc, #156]	@ (800c358 <HAL_DMA_Abort+0x458>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d031      	beq.n	800c322 <HAL_DMA_Abort+0x422>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4a26      	ldr	r2, [pc, #152]	@ (800c35c <HAL_DMA_Abort+0x45c>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d02c      	beq.n	800c322 <HAL_DMA_Abort+0x422>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a24      	ldr	r2, [pc, #144]	@ (800c360 <HAL_DMA_Abort+0x460>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d027      	beq.n	800c322 <HAL_DMA_Abort+0x422>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a23      	ldr	r2, [pc, #140]	@ (800c364 <HAL_DMA_Abort+0x464>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d022      	beq.n	800c322 <HAL_DMA_Abort+0x422>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a21      	ldr	r2, [pc, #132]	@ (800c368 <HAL_DMA_Abort+0x468>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d01d      	beq.n	800c322 <HAL_DMA_Abort+0x422>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a20      	ldr	r2, [pc, #128]	@ (800c36c <HAL_DMA_Abort+0x46c>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d018      	beq.n	800c322 <HAL_DMA_Abort+0x422>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a1e      	ldr	r2, [pc, #120]	@ (800c370 <HAL_DMA_Abort+0x470>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d013      	beq.n	800c322 <HAL_DMA_Abort+0x422>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4a1d      	ldr	r2, [pc, #116]	@ (800c374 <HAL_DMA_Abort+0x474>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d00e      	beq.n	800c322 <HAL_DMA_Abort+0x422>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a1b      	ldr	r2, [pc, #108]	@ (800c378 <HAL_DMA_Abort+0x478>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d009      	beq.n	800c322 <HAL_DMA_Abort+0x422>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a1a      	ldr	r2, [pc, #104]	@ (800c37c <HAL_DMA_Abort+0x47c>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d004      	beq.n	800c322 <HAL_DMA_Abort+0x422>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a18      	ldr	r2, [pc, #96]	@ (800c380 <HAL_DMA_Abort+0x480>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d101      	bne.n	800c326 <HAL_DMA_Abort+0x426>
 800c322:	2301      	movs	r3, #1
 800c324:	e000      	b.n	800c328 <HAL_DMA_Abort+0x428>
 800c326:	2300      	movs	r3, #0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d02b      	beq.n	800c384 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c330:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c336:	f003 031f 	and.w	r3, r3, #31
 800c33a:	223f      	movs	r2, #63	@ 0x3f
 800c33c:	409a      	lsls	r2, r3
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	609a      	str	r2, [r3, #8]
 800c342:	e02a      	b.n	800c39a <HAL_DMA_Abort+0x49a>
 800c344:	40020010 	.word	0x40020010
 800c348:	40020028 	.word	0x40020028
 800c34c:	40020040 	.word	0x40020040
 800c350:	40020058 	.word	0x40020058
 800c354:	40020070 	.word	0x40020070
 800c358:	40020088 	.word	0x40020088
 800c35c:	400200a0 	.word	0x400200a0
 800c360:	400200b8 	.word	0x400200b8
 800c364:	40020410 	.word	0x40020410
 800c368:	40020428 	.word	0x40020428
 800c36c:	40020440 	.word	0x40020440
 800c370:	40020458 	.word	0x40020458
 800c374:	40020470 	.word	0x40020470
 800c378:	40020488 	.word	0x40020488
 800c37c:	400204a0 	.word	0x400204a0
 800c380:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c388:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c38e:	f003 031f 	and.w	r3, r3, #31
 800c392:	2201      	movs	r2, #1
 800c394:	409a      	lsls	r2, r3
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a4f      	ldr	r2, [pc, #316]	@ (800c4dc <HAL_DMA_Abort+0x5dc>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d072      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a4d      	ldr	r2, [pc, #308]	@ (800c4e0 <HAL_DMA_Abort+0x5e0>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d06d      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a4c      	ldr	r2, [pc, #304]	@ (800c4e4 <HAL_DMA_Abort+0x5e4>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d068      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a4a      	ldr	r2, [pc, #296]	@ (800c4e8 <HAL_DMA_Abort+0x5e8>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d063      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a49      	ldr	r2, [pc, #292]	@ (800c4ec <HAL_DMA_Abort+0x5ec>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d05e      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a47      	ldr	r2, [pc, #284]	@ (800c4f0 <HAL_DMA_Abort+0x5f0>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d059      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a46      	ldr	r2, [pc, #280]	@ (800c4f4 <HAL_DMA_Abort+0x5f4>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d054      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a44      	ldr	r2, [pc, #272]	@ (800c4f8 <HAL_DMA_Abort+0x5f8>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d04f      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4a43      	ldr	r2, [pc, #268]	@ (800c4fc <HAL_DMA_Abort+0x5fc>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d04a      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4a41      	ldr	r2, [pc, #260]	@ (800c500 <HAL_DMA_Abort+0x600>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d045      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4a40      	ldr	r2, [pc, #256]	@ (800c504 <HAL_DMA_Abort+0x604>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d040      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a3e      	ldr	r2, [pc, #248]	@ (800c508 <HAL_DMA_Abort+0x608>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d03b      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a3d      	ldr	r2, [pc, #244]	@ (800c50c <HAL_DMA_Abort+0x60c>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d036      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a3b      	ldr	r2, [pc, #236]	@ (800c510 <HAL_DMA_Abort+0x610>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d031      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a3a      	ldr	r2, [pc, #232]	@ (800c514 <HAL_DMA_Abort+0x614>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d02c      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a38      	ldr	r2, [pc, #224]	@ (800c518 <HAL_DMA_Abort+0x618>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d027      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a37      	ldr	r2, [pc, #220]	@ (800c51c <HAL_DMA_Abort+0x61c>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d022      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a35      	ldr	r2, [pc, #212]	@ (800c520 <HAL_DMA_Abort+0x620>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d01d      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a34      	ldr	r2, [pc, #208]	@ (800c524 <HAL_DMA_Abort+0x624>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d018      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a32      	ldr	r2, [pc, #200]	@ (800c528 <HAL_DMA_Abort+0x628>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d013      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a31      	ldr	r2, [pc, #196]	@ (800c52c <HAL_DMA_Abort+0x62c>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d00e      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a2f      	ldr	r2, [pc, #188]	@ (800c530 <HAL_DMA_Abort+0x630>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d009      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a2e      	ldr	r2, [pc, #184]	@ (800c534 <HAL_DMA_Abort+0x634>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d004      	beq.n	800c48a <HAL_DMA_Abort+0x58a>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a2c      	ldr	r2, [pc, #176]	@ (800c538 <HAL_DMA_Abort+0x638>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d101      	bne.n	800c48e <HAL_DMA_Abort+0x58e>
 800c48a:	2301      	movs	r3, #1
 800c48c:	e000      	b.n	800c490 <HAL_DMA_Abort+0x590>
 800c48e:	2300      	movs	r3, #0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d015      	beq.n	800c4c0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c49c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00c      	beq.n	800c4c0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c4b4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c4be:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3718      	adds	r7, #24
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	40020010 	.word	0x40020010
 800c4e0:	40020028 	.word	0x40020028
 800c4e4:	40020040 	.word	0x40020040
 800c4e8:	40020058 	.word	0x40020058
 800c4ec:	40020070 	.word	0x40020070
 800c4f0:	40020088 	.word	0x40020088
 800c4f4:	400200a0 	.word	0x400200a0
 800c4f8:	400200b8 	.word	0x400200b8
 800c4fc:	40020410 	.word	0x40020410
 800c500:	40020428 	.word	0x40020428
 800c504:	40020440 	.word	0x40020440
 800c508:	40020458 	.word	0x40020458
 800c50c:	40020470 	.word	0x40020470
 800c510:	40020488 	.word	0x40020488
 800c514:	400204a0 	.word	0x400204a0
 800c518:	400204b8 	.word	0x400204b8
 800c51c:	58025408 	.word	0x58025408
 800c520:	5802541c 	.word	0x5802541c
 800c524:	58025430 	.word	0x58025430
 800c528:	58025444 	.word	0x58025444
 800c52c:	58025458 	.word	0x58025458
 800c530:	5802546c 	.word	0x5802546c
 800c534:	58025480 	.word	0x58025480
 800c538:	58025494 	.word	0x58025494

0800c53c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d101      	bne.n	800c54e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e237      	b.n	800c9be <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c554:	b2db      	uxtb	r3, r3
 800c556:	2b02      	cmp	r3, #2
 800c558:	d004      	beq.n	800c564 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2280      	movs	r2, #128	@ 0x80
 800c55e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800c560:	2301      	movs	r3, #1
 800c562:	e22c      	b.n	800c9be <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a5c      	ldr	r2, [pc, #368]	@ (800c6dc <HAL_DMA_Abort_IT+0x1a0>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d04a      	beq.n	800c604 <HAL_DMA_Abort_IT+0xc8>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a5b      	ldr	r2, [pc, #364]	@ (800c6e0 <HAL_DMA_Abort_IT+0x1a4>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d045      	beq.n	800c604 <HAL_DMA_Abort_IT+0xc8>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a59      	ldr	r2, [pc, #356]	@ (800c6e4 <HAL_DMA_Abort_IT+0x1a8>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d040      	beq.n	800c604 <HAL_DMA_Abort_IT+0xc8>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a58      	ldr	r2, [pc, #352]	@ (800c6e8 <HAL_DMA_Abort_IT+0x1ac>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d03b      	beq.n	800c604 <HAL_DMA_Abort_IT+0xc8>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a56      	ldr	r2, [pc, #344]	@ (800c6ec <HAL_DMA_Abort_IT+0x1b0>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d036      	beq.n	800c604 <HAL_DMA_Abort_IT+0xc8>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a55      	ldr	r2, [pc, #340]	@ (800c6f0 <HAL_DMA_Abort_IT+0x1b4>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d031      	beq.n	800c604 <HAL_DMA_Abort_IT+0xc8>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a53      	ldr	r2, [pc, #332]	@ (800c6f4 <HAL_DMA_Abort_IT+0x1b8>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d02c      	beq.n	800c604 <HAL_DMA_Abort_IT+0xc8>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4a52      	ldr	r2, [pc, #328]	@ (800c6f8 <HAL_DMA_Abort_IT+0x1bc>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d027      	beq.n	800c604 <HAL_DMA_Abort_IT+0xc8>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a50      	ldr	r2, [pc, #320]	@ (800c6fc <HAL_DMA_Abort_IT+0x1c0>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d022      	beq.n	800c604 <HAL_DMA_Abort_IT+0xc8>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a4f      	ldr	r2, [pc, #316]	@ (800c700 <HAL_DMA_Abort_IT+0x1c4>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d01d      	beq.n	800c604 <HAL_DMA_Abort_IT+0xc8>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a4d      	ldr	r2, [pc, #308]	@ (800c704 <HAL_DMA_Abort_IT+0x1c8>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d018      	beq.n	800c604 <HAL_DMA_Abort_IT+0xc8>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a4c      	ldr	r2, [pc, #304]	@ (800c708 <HAL_DMA_Abort_IT+0x1cc>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d013      	beq.n	800c604 <HAL_DMA_Abort_IT+0xc8>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a4a      	ldr	r2, [pc, #296]	@ (800c70c <HAL_DMA_Abort_IT+0x1d0>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d00e      	beq.n	800c604 <HAL_DMA_Abort_IT+0xc8>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a49      	ldr	r2, [pc, #292]	@ (800c710 <HAL_DMA_Abort_IT+0x1d4>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d009      	beq.n	800c604 <HAL_DMA_Abort_IT+0xc8>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a47      	ldr	r2, [pc, #284]	@ (800c714 <HAL_DMA_Abort_IT+0x1d8>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d004      	beq.n	800c604 <HAL_DMA_Abort_IT+0xc8>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4a46      	ldr	r2, [pc, #280]	@ (800c718 <HAL_DMA_Abort_IT+0x1dc>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d101      	bne.n	800c608 <HAL_DMA_Abort_IT+0xcc>
 800c604:	2301      	movs	r3, #1
 800c606:	e000      	b.n	800c60a <HAL_DMA_Abort_IT+0xce>
 800c608:	2300      	movs	r3, #0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f000 8086 	beq.w	800c71c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2204      	movs	r2, #4
 800c614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a2f      	ldr	r2, [pc, #188]	@ (800c6dc <HAL_DMA_Abort_IT+0x1a0>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d04a      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0x17c>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a2e      	ldr	r2, [pc, #184]	@ (800c6e0 <HAL_DMA_Abort_IT+0x1a4>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d045      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0x17c>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a2c      	ldr	r2, [pc, #176]	@ (800c6e4 <HAL_DMA_Abort_IT+0x1a8>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d040      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0x17c>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a2b      	ldr	r2, [pc, #172]	@ (800c6e8 <HAL_DMA_Abort_IT+0x1ac>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d03b      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0x17c>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a29      	ldr	r2, [pc, #164]	@ (800c6ec <HAL_DMA_Abort_IT+0x1b0>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d036      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0x17c>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a28      	ldr	r2, [pc, #160]	@ (800c6f0 <HAL_DMA_Abort_IT+0x1b4>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d031      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0x17c>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4a26      	ldr	r2, [pc, #152]	@ (800c6f4 <HAL_DMA_Abort_IT+0x1b8>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d02c      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0x17c>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4a25      	ldr	r2, [pc, #148]	@ (800c6f8 <HAL_DMA_Abort_IT+0x1bc>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d027      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0x17c>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4a23      	ldr	r2, [pc, #140]	@ (800c6fc <HAL_DMA_Abort_IT+0x1c0>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d022      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0x17c>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4a22      	ldr	r2, [pc, #136]	@ (800c700 <HAL_DMA_Abort_IT+0x1c4>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d01d      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0x17c>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a20      	ldr	r2, [pc, #128]	@ (800c704 <HAL_DMA_Abort_IT+0x1c8>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d018      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0x17c>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a1f      	ldr	r2, [pc, #124]	@ (800c708 <HAL_DMA_Abort_IT+0x1cc>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d013      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0x17c>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a1d      	ldr	r2, [pc, #116]	@ (800c70c <HAL_DMA_Abort_IT+0x1d0>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d00e      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0x17c>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4a1c      	ldr	r2, [pc, #112]	@ (800c710 <HAL_DMA_Abort_IT+0x1d4>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d009      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0x17c>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4a1a      	ldr	r2, [pc, #104]	@ (800c714 <HAL_DMA_Abort_IT+0x1d8>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d004      	beq.n	800c6b8 <HAL_DMA_Abort_IT+0x17c>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a19      	ldr	r2, [pc, #100]	@ (800c718 <HAL_DMA_Abort_IT+0x1dc>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d108      	bne.n	800c6ca <HAL_DMA_Abort_IT+0x18e>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f022 0201 	bic.w	r2, r2, #1
 800c6c6:	601a      	str	r2, [r3, #0]
 800c6c8:	e178      	b.n	800c9bc <HAL_DMA_Abort_IT+0x480>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f022 0201 	bic.w	r2, r2, #1
 800c6d8:	601a      	str	r2, [r3, #0]
 800c6da:	e16f      	b.n	800c9bc <HAL_DMA_Abort_IT+0x480>
 800c6dc:	40020010 	.word	0x40020010
 800c6e0:	40020028 	.word	0x40020028
 800c6e4:	40020040 	.word	0x40020040
 800c6e8:	40020058 	.word	0x40020058
 800c6ec:	40020070 	.word	0x40020070
 800c6f0:	40020088 	.word	0x40020088
 800c6f4:	400200a0 	.word	0x400200a0
 800c6f8:	400200b8 	.word	0x400200b8
 800c6fc:	40020410 	.word	0x40020410
 800c700:	40020428 	.word	0x40020428
 800c704:	40020440 	.word	0x40020440
 800c708:	40020458 	.word	0x40020458
 800c70c:	40020470 	.word	0x40020470
 800c710:	40020488 	.word	0x40020488
 800c714:	400204a0 	.word	0x400204a0
 800c718:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f022 020e 	bic.w	r2, r2, #14
 800c72a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a6c      	ldr	r2, [pc, #432]	@ (800c8e4 <HAL_DMA_Abort_IT+0x3a8>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d04a      	beq.n	800c7cc <HAL_DMA_Abort_IT+0x290>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a6b      	ldr	r2, [pc, #428]	@ (800c8e8 <HAL_DMA_Abort_IT+0x3ac>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d045      	beq.n	800c7cc <HAL_DMA_Abort_IT+0x290>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a69      	ldr	r2, [pc, #420]	@ (800c8ec <HAL_DMA_Abort_IT+0x3b0>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d040      	beq.n	800c7cc <HAL_DMA_Abort_IT+0x290>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a68      	ldr	r2, [pc, #416]	@ (800c8f0 <HAL_DMA_Abort_IT+0x3b4>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d03b      	beq.n	800c7cc <HAL_DMA_Abort_IT+0x290>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a66      	ldr	r2, [pc, #408]	@ (800c8f4 <HAL_DMA_Abort_IT+0x3b8>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d036      	beq.n	800c7cc <HAL_DMA_Abort_IT+0x290>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a65      	ldr	r2, [pc, #404]	@ (800c8f8 <HAL_DMA_Abort_IT+0x3bc>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d031      	beq.n	800c7cc <HAL_DMA_Abort_IT+0x290>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a63      	ldr	r2, [pc, #396]	@ (800c8fc <HAL_DMA_Abort_IT+0x3c0>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d02c      	beq.n	800c7cc <HAL_DMA_Abort_IT+0x290>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a62      	ldr	r2, [pc, #392]	@ (800c900 <HAL_DMA_Abort_IT+0x3c4>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d027      	beq.n	800c7cc <HAL_DMA_Abort_IT+0x290>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a60      	ldr	r2, [pc, #384]	@ (800c904 <HAL_DMA_Abort_IT+0x3c8>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d022      	beq.n	800c7cc <HAL_DMA_Abort_IT+0x290>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4a5f      	ldr	r2, [pc, #380]	@ (800c908 <HAL_DMA_Abort_IT+0x3cc>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d01d      	beq.n	800c7cc <HAL_DMA_Abort_IT+0x290>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a5d      	ldr	r2, [pc, #372]	@ (800c90c <HAL_DMA_Abort_IT+0x3d0>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d018      	beq.n	800c7cc <HAL_DMA_Abort_IT+0x290>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a5c      	ldr	r2, [pc, #368]	@ (800c910 <HAL_DMA_Abort_IT+0x3d4>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d013      	beq.n	800c7cc <HAL_DMA_Abort_IT+0x290>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a5a      	ldr	r2, [pc, #360]	@ (800c914 <HAL_DMA_Abort_IT+0x3d8>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d00e      	beq.n	800c7cc <HAL_DMA_Abort_IT+0x290>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a59      	ldr	r2, [pc, #356]	@ (800c918 <HAL_DMA_Abort_IT+0x3dc>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d009      	beq.n	800c7cc <HAL_DMA_Abort_IT+0x290>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a57      	ldr	r2, [pc, #348]	@ (800c91c <HAL_DMA_Abort_IT+0x3e0>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d004      	beq.n	800c7cc <HAL_DMA_Abort_IT+0x290>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a56      	ldr	r2, [pc, #344]	@ (800c920 <HAL_DMA_Abort_IT+0x3e4>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d108      	bne.n	800c7de <HAL_DMA_Abort_IT+0x2a2>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f022 0201 	bic.w	r2, r2, #1
 800c7da:	601a      	str	r2, [r3, #0]
 800c7dc:	e007      	b.n	800c7ee <HAL_DMA_Abort_IT+0x2b2>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f022 0201 	bic.w	r2, r2, #1
 800c7ec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4a3c      	ldr	r2, [pc, #240]	@ (800c8e4 <HAL_DMA_Abort_IT+0x3a8>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d072      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a3a      	ldr	r2, [pc, #232]	@ (800c8e8 <HAL_DMA_Abort_IT+0x3ac>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d06d      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4a39      	ldr	r2, [pc, #228]	@ (800c8ec <HAL_DMA_Abort_IT+0x3b0>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d068      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a37      	ldr	r2, [pc, #220]	@ (800c8f0 <HAL_DMA_Abort_IT+0x3b4>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d063      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4a36      	ldr	r2, [pc, #216]	@ (800c8f4 <HAL_DMA_Abort_IT+0x3b8>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d05e      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4a34      	ldr	r2, [pc, #208]	@ (800c8f8 <HAL_DMA_Abort_IT+0x3bc>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d059      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a33      	ldr	r2, [pc, #204]	@ (800c8fc <HAL_DMA_Abort_IT+0x3c0>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d054      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a31      	ldr	r2, [pc, #196]	@ (800c900 <HAL_DMA_Abort_IT+0x3c4>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d04f      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	4a30      	ldr	r2, [pc, #192]	@ (800c904 <HAL_DMA_Abort_IT+0x3c8>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d04a      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a2e      	ldr	r2, [pc, #184]	@ (800c908 <HAL_DMA_Abort_IT+0x3cc>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d045      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4a2d      	ldr	r2, [pc, #180]	@ (800c90c <HAL_DMA_Abort_IT+0x3d0>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d040      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a2b      	ldr	r2, [pc, #172]	@ (800c910 <HAL_DMA_Abort_IT+0x3d4>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d03b      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4a2a      	ldr	r2, [pc, #168]	@ (800c914 <HAL_DMA_Abort_IT+0x3d8>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d036      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4a28      	ldr	r2, [pc, #160]	@ (800c918 <HAL_DMA_Abort_IT+0x3dc>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d031      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	4a27      	ldr	r2, [pc, #156]	@ (800c91c <HAL_DMA_Abort_IT+0x3e0>)
 800c880:	4293      	cmp	r3, r2
 800c882:	d02c      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a25      	ldr	r2, [pc, #148]	@ (800c920 <HAL_DMA_Abort_IT+0x3e4>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d027      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4a24      	ldr	r2, [pc, #144]	@ (800c924 <HAL_DMA_Abort_IT+0x3e8>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d022      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a22      	ldr	r2, [pc, #136]	@ (800c928 <HAL_DMA_Abort_IT+0x3ec>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d01d      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4a21      	ldr	r2, [pc, #132]	@ (800c92c <HAL_DMA_Abort_IT+0x3f0>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d018      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a1f      	ldr	r2, [pc, #124]	@ (800c930 <HAL_DMA_Abort_IT+0x3f4>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d013      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a1e      	ldr	r2, [pc, #120]	@ (800c934 <HAL_DMA_Abort_IT+0x3f8>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d00e      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a1c      	ldr	r2, [pc, #112]	@ (800c938 <HAL_DMA_Abort_IT+0x3fc>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d009      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4a1b      	ldr	r2, [pc, #108]	@ (800c93c <HAL_DMA_Abort_IT+0x400>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d004      	beq.n	800c8de <HAL_DMA_Abort_IT+0x3a2>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a19      	ldr	r2, [pc, #100]	@ (800c940 <HAL_DMA_Abort_IT+0x404>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d132      	bne.n	800c944 <HAL_DMA_Abort_IT+0x408>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e031      	b.n	800c946 <HAL_DMA_Abort_IT+0x40a>
 800c8e2:	bf00      	nop
 800c8e4:	40020010 	.word	0x40020010
 800c8e8:	40020028 	.word	0x40020028
 800c8ec:	40020040 	.word	0x40020040
 800c8f0:	40020058 	.word	0x40020058
 800c8f4:	40020070 	.word	0x40020070
 800c8f8:	40020088 	.word	0x40020088
 800c8fc:	400200a0 	.word	0x400200a0
 800c900:	400200b8 	.word	0x400200b8
 800c904:	40020410 	.word	0x40020410
 800c908:	40020428 	.word	0x40020428
 800c90c:	40020440 	.word	0x40020440
 800c910:	40020458 	.word	0x40020458
 800c914:	40020470 	.word	0x40020470
 800c918:	40020488 	.word	0x40020488
 800c91c:	400204a0 	.word	0x400204a0
 800c920:	400204b8 	.word	0x400204b8
 800c924:	58025408 	.word	0x58025408
 800c928:	5802541c 	.word	0x5802541c
 800c92c:	58025430 	.word	0x58025430
 800c930:	58025444 	.word	0x58025444
 800c934:	58025458 	.word	0x58025458
 800c938:	5802546c 	.word	0x5802546c
 800c93c:	58025480 	.word	0x58025480
 800c940:	58025494 	.word	0x58025494
 800c944:	2300      	movs	r3, #0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d028      	beq.n	800c99c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c954:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c958:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c95e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c964:	f003 031f 	and.w	r3, r3, #31
 800c968:	2201      	movs	r2, #1
 800c96a:	409a      	lsls	r2, r3
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c978:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d00c      	beq.n	800c99c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c98c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c990:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c99a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d003      	beq.n	800c9bc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800c9bc:	2300      	movs	r3, #0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop

0800c9c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b08a      	sub	sp, #40	@ 0x28
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c9d4:	4b67      	ldr	r3, [pc, #412]	@ (800cb74 <HAL_DMA_IRQHandler+0x1ac>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a67      	ldr	r2, [pc, #412]	@ (800cb78 <HAL_DMA_IRQHandler+0x1b0>)
 800c9da:	fba2 2303 	umull	r2, r3, r2, r3
 800c9de:	0a9b      	lsrs	r3, r3, #10
 800c9e0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800c9ee:	6a3b      	ldr	r3, [r7, #32]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800c9f4:	69fb      	ldr	r3, [r7, #28]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a5f      	ldr	r2, [pc, #380]	@ (800cb7c <HAL_DMA_IRQHandler+0x1b4>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d04a      	beq.n	800ca9a <HAL_DMA_IRQHandler+0xd2>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a5d      	ldr	r2, [pc, #372]	@ (800cb80 <HAL_DMA_IRQHandler+0x1b8>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d045      	beq.n	800ca9a <HAL_DMA_IRQHandler+0xd2>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4a5c      	ldr	r2, [pc, #368]	@ (800cb84 <HAL_DMA_IRQHandler+0x1bc>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d040      	beq.n	800ca9a <HAL_DMA_IRQHandler+0xd2>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a5a      	ldr	r2, [pc, #360]	@ (800cb88 <HAL_DMA_IRQHandler+0x1c0>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d03b      	beq.n	800ca9a <HAL_DMA_IRQHandler+0xd2>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a59      	ldr	r2, [pc, #356]	@ (800cb8c <HAL_DMA_IRQHandler+0x1c4>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d036      	beq.n	800ca9a <HAL_DMA_IRQHandler+0xd2>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a57      	ldr	r2, [pc, #348]	@ (800cb90 <HAL_DMA_IRQHandler+0x1c8>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d031      	beq.n	800ca9a <HAL_DMA_IRQHandler+0xd2>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4a56      	ldr	r2, [pc, #344]	@ (800cb94 <HAL_DMA_IRQHandler+0x1cc>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d02c      	beq.n	800ca9a <HAL_DMA_IRQHandler+0xd2>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4a54      	ldr	r2, [pc, #336]	@ (800cb98 <HAL_DMA_IRQHandler+0x1d0>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d027      	beq.n	800ca9a <HAL_DMA_IRQHandler+0xd2>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a53      	ldr	r2, [pc, #332]	@ (800cb9c <HAL_DMA_IRQHandler+0x1d4>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d022      	beq.n	800ca9a <HAL_DMA_IRQHandler+0xd2>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a51      	ldr	r2, [pc, #324]	@ (800cba0 <HAL_DMA_IRQHandler+0x1d8>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d01d      	beq.n	800ca9a <HAL_DMA_IRQHandler+0xd2>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a50      	ldr	r2, [pc, #320]	@ (800cba4 <HAL_DMA_IRQHandler+0x1dc>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d018      	beq.n	800ca9a <HAL_DMA_IRQHandler+0xd2>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4a4e      	ldr	r2, [pc, #312]	@ (800cba8 <HAL_DMA_IRQHandler+0x1e0>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d013      	beq.n	800ca9a <HAL_DMA_IRQHandler+0xd2>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a4d      	ldr	r2, [pc, #308]	@ (800cbac <HAL_DMA_IRQHandler+0x1e4>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d00e      	beq.n	800ca9a <HAL_DMA_IRQHandler+0xd2>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a4b      	ldr	r2, [pc, #300]	@ (800cbb0 <HAL_DMA_IRQHandler+0x1e8>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d009      	beq.n	800ca9a <HAL_DMA_IRQHandler+0xd2>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4a4a      	ldr	r2, [pc, #296]	@ (800cbb4 <HAL_DMA_IRQHandler+0x1ec>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d004      	beq.n	800ca9a <HAL_DMA_IRQHandler+0xd2>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a48      	ldr	r2, [pc, #288]	@ (800cbb8 <HAL_DMA_IRQHandler+0x1f0>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d101      	bne.n	800ca9e <HAL_DMA_IRQHandler+0xd6>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e000      	b.n	800caa0 <HAL_DMA_IRQHandler+0xd8>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f000 842b 	beq.w	800d2fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800caaa:	f003 031f 	and.w	r3, r3, #31
 800caae:	2208      	movs	r2, #8
 800cab0:	409a      	lsls	r2, r3
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	4013      	ands	r3, r2
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	f000 80a2 	beq.w	800cc00 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a2e      	ldr	r2, [pc, #184]	@ (800cb7c <HAL_DMA_IRQHandler+0x1b4>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d04a      	beq.n	800cb5c <HAL_DMA_IRQHandler+0x194>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a2d      	ldr	r2, [pc, #180]	@ (800cb80 <HAL_DMA_IRQHandler+0x1b8>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d045      	beq.n	800cb5c <HAL_DMA_IRQHandler+0x194>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a2b      	ldr	r2, [pc, #172]	@ (800cb84 <HAL_DMA_IRQHandler+0x1bc>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d040      	beq.n	800cb5c <HAL_DMA_IRQHandler+0x194>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a2a      	ldr	r2, [pc, #168]	@ (800cb88 <HAL_DMA_IRQHandler+0x1c0>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d03b      	beq.n	800cb5c <HAL_DMA_IRQHandler+0x194>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a28      	ldr	r2, [pc, #160]	@ (800cb8c <HAL_DMA_IRQHandler+0x1c4>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d036      	beq.n	800cb5c <HAL_DMA_IRQHandler+0x194>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a27      	ldr	r2, [pc, #156]	@ (800cb90 <HAL_DMA_IRQHandler+0x1c8>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d031      	beq.n	800cb5c <HAL_DMA_IRQHandler+0x194>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a25      	ldr	r2, [pc, #148]	@ (800cb94 <HAL_DMA_IRQHandler+0x1cc>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d02c      	beq.n	800cb5c <HAL_DMA_IRQHandler+0x194>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4a24      	ldr	r2, [pc, #144]	@ (800cb98 <HAL_DMA_IRQHandler+0x1d0>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d027      	beq.n	800cb5c <HAL_DMA_IRQHandler+0x194>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a22      	ldr	r2, [pc, #136]	@ (800cb9c <HAL_DMA_IRQHandler+0x1d4>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d022      	beq.n	800cb5c <HAL_DMA_IRQHandler+0x194>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a21      	ldr	r2, [pc, #132]	@ (800cba0 <HAL_DMA_IRQHandler+0x1d8>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d01d      	beq.n	800cb5c <HAL_DMA_IRQHandler+0x194>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a1f      	ldr	r2, [pc, #124]	@ (800cba4 <HAL_DMA_IRQHandler+0x1dc>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d018      	beq.n	800cb5c <HAL_DMA_IRQHandler+0x194>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a1e      	ldr	r2, [pc, #120]	@ (800cba8 <HAL_DMA_IRQHandler+0x1e0>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d013      	beq.n	800cb5c <HAL_DMA_IRQHandler+0x194>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a1c      	ldr	r2, [pc, #112]	@ (800cbac <HAL_DMA_IRQHandler+0x1e4>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d00e      	beq.n	800cb5c <HAL_DMA_IRQHandler+0x194>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a1b      	ldr	r2, [pc, #108]	@ (800cbb0 <HAL_DMA_IRQHandler+0x1e8>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d009      	beq.n	800cb5c <HAL_DMA_IRQHandler+0x194>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a19      	ldr	r2, [pc, #100]	@ (800cbb4 <HAL_DMA_IRQHandler+0x1ec>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d004      	beq.n	800cb5c <HAL_DMA_IRQHandler+0x194>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a18      	ldr	r2, [pc, #96]	@ (800cbb8 <HAL_DMA_IRQHandler+0x1f0>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d12f      	bne.n	800cbbc <HAL_DMA_IRQHandler+0x1f4>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f003 0304 	and.w	r3, r3, #4
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	bf14      	ite	ne
 800cb6a:	2301      	movne	r3, #1
 800cb6c:	2300      	moveq	r3, #0
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	e02e      	b.n	800cbd0 <HAL_DMA_IRQHandler+0x208>
 800cb72:	bf00      	nop
 800cb74:	24000004 	.word	0x24000004
 800cb78:	1b4e81b5 	.word	0x1b4e81b5
 800cb7c:	40020010 	.word	0x40020010
 800cb80:	40020028 	.word	0x40020028
 800cb84:	40020040 	.word	0x40020040
 800cb88:	40020058 	.word	0x40020058
 800cb8c:	40020070 	.word	0x40020070
 800cb90:	40020088 	.word	0x40020088
 800cb94:	400200a0 	.word	0x400200a0
 800cb98:	400200b8 	.word	0x400200b8
 800cb9c:	40020410 	.word	0x40020410
 800cba0:	40020428 	.word	0x40020428
 800cba4:	40020440 	.word	0x40020440
 800cba8:	40020458 	.word	0x40020458
 800cbac:	40020470 	.word	0x40020470
 800cbb0:	40020488 	.word	0x40020488
 800cbb4:	400204a0 	.word	0x400204a0
 800cbb8:	400204b8 	.word	0x400204b8
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 0308 	and.w	r3, r3, #8
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	bf14      	ite	ne
 800cbca:	2301      	movne	r3, #1
 800cbcc:	2300      	moveq	r3, #0
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d015      	beq.n	800cc00 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f022 0204 	bic.w	r2, r2, #4
 800cbe2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbe8:	f003 031f 	and.w	r3, r3, #31
 800cbec:	2208      	movs	r2, #8
 800cbee:	409a      	lsls	r2, r3
 800cbf0:	6a3b      	ldr	r3, [r7, #32]
 800cbf2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbf8:	f043 0201 	orr.w	r2, r3, #1
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc04:	f003 031f 	and.w	r3, r3, #31
 800cc08:	69ba      	ldr	r2, [r7, #24]
 800cc0a:	fa22 f303 	lsr.w	r3, r2, r3
 800cc0e:	f003 0301 	and.w	r3, r3, #1
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d06e      	beq.n	800ccf4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a69      	ldr	r2, [pc, #420]	@ (800cdc0 <HAL_DMA_IRQHandler+0x3f8>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d04a      	beq.n	800ccb6 <HAL_DMA_IRQHandler+0x2ee>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4a67      	ldr	r2, [pc, #412]	@ (800cdc4 <HAL_DMA_IRQHandler+0x3fc>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d045      	beq.n	800ccb6 <HAL_DMA_IRQHandler+0x2ee>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	4a66      	ldr	r2, [pc, #408]	@ (800cdc8 <HAL_DMA_IRQHandler+0x400>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d040      	beq.n	800ccb6 <HAL_DMA_IRQHandler+0x2ee>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a64      	ldr	r2, [pc, #400]	@ (800cdcc <HAL_DMA_IRQHandler+0x404>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d03b      	beq.n	800ccb6 <HAL_DMA_IRQHandler+0x2ee>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4a63      	ldr	r2, [pc, #396]	@ (800cdd0 <HAL_DMA_IRQHandler+0x408>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d036      	beq.n	800ccb6 <HAL_DMA_IRQHandler+0x2ee>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a61      	ldr	r2, [pc, #388]	@ (800cdd4 <HAL_DMA_IRQHandler+0x40c>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d031      	beq.n	800ccb6 <HAL_DMA_IRQHandler+0x2ee>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4a60      	ldr	r2, [pc, #384]	@ (800cdd8 <HAL_DMA_IRQHandler+0x410>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d02c      	beq.n	800ccb6 <HAL_DMA_IRQHandler+0x2ee>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a5e      	ldr	r2, [pc, #376]	@ (800cddc <HAL_DMA_IRQHandler+0x414>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d027      	beq.n	800ccb6 <HAL_DMA_IRQHandler+0x2ee>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4a5d      	ldr	r2, [pc, #372]	@ (800cde0 <HAL_DMA_IRQHandler+0x418>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d022      	beq.n	800ccb6 <HAL_DMA_IRQHandler+0x2ee>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4a5b      	ldr	r2, [pc, #364]	@ (800cde4 <HAL_DMA_IRQHandler+0x41c>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d01d      	beq.n	800ccb6 <HAL_DMA_IRQHandler+0x2ee>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a5a      	ldr	r2, [pc, #360]	@ (800cde8 <HAL_DMA_IRQHandler+0x420>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d018      	beq.n	800ccb6 <HAL_DMA_IRQHandler+0x2ee>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a58      	ldr	r2, [pc, #352]	@ (800cdec <HAL_DMA_IRQHandler+0x424>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d013      	beq.n	800ccb6 <HAL_DMA_IRQHandler+0x2ee>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a57      	ldr	r2, [pc, #348]	@ (800cdf0 <HAL_DMA_IRQHandler+0x428>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d00e      	beq.n	800ccb6 <HAL_DMA_IRQHandler+0x2ee>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a55      	ldr	r2, [pc, #340]	@ (800cdf4 <HAL_DMA_IRQHandler+0x42c>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d009      	beq.n	800ccb6 <HAL_DMA_IRQHandler+0x2ee>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a54      	ldr	r2, [pc, #336]	@ (800cdf8 <HAL_DMA_IRQHandler+0x430>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d004      	beq.n	800ccb6 <HAL_DMA_IRQHandler+0x2ee>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a52      	ldr	r2, [pc, #328]	@ (800cdfc <HAL_DMA_IRQHandler+0x434>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d10a      	bne.n	800cccc <HAL_DMA_IRQHandler+0x304>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	695b      	ldr	r3, [r3, #20]
 800ccbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	bf14      	ite	ne
 800ccc4:	2301      	movne	r3, #1
 800ccc6:	2300      	moveq	r3, #0
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	e003      	b.n	800ccd4 <HAL_DMA_IRQHandler+0x30c>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00d      	beq.n	800ccf4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccdc:	f003 031f 	and.w	r3, r3, #31
 800cce0:	2201      	movs	r2, #1
 800cce2:	409a      	lsls	r2, r3
 800cce4:	6a3b      	ldr	r3, [r7, #32]
 800cce6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccec:	f043 0202 	orr.w	r2, r3, #2
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccf8:	f003 031f 	and.w	r3, r3, #31
 800ccfc:	2204      	movs	r2, #4
 800ccfe:	409a      	lsls	r2, r3
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	4013      	ands	r3, r2
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	f000 808f 	beq.w	800ce28 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a2c      	ldr	r2, [pc, #176]	@ (800cdc0 <HAL_DMA_IRQHandler+0x3f8>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d04a      	beq.n	800cdaa <HAL_DMA_IRQHandler+0x3e2>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a2a      	ldr	r2, [pc, #168]	@ (800cdc4 <HAL_DMA_IRQHandler+0x3fc>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d045      	beq.n	800cdaa <HAL_DMA_IRQHandler+0x3e2>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a29      	ldr	r2, [pc, #164]	@ (800cdc8 <HAL_DMA_IRQHandler+0x400>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d040      	beq.n	800cdaa <HAL_DMA_IRQHandler+0x3e2>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a27      	ldr	r2, [pc, #156]	@ (800cdcc <HAL_DMA_IRQHandler+0x404>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d03b      	beq.n	800cdaa <HAL_DMA_IRQHandler+0x3e2>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a26      	ldr	r2, [pc, #152]	@ (800cdd0 <HAL_DMA_IRQHandler+0x408>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d036      	beq.n	800cdaa <HAL_DMA_IRQHandler+0x3e2>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a24      	ldr	r2, [pc, #144]	@ (800cdd4 <HAL_DMA_IRQHandler+0x40c>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d031      	beq.n	800cdaa <HAL_DMA_IRQHandler+0x3e2>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a23      	ldr	r2, [pc, #140]	@ (800cdd8 <HAL_DMA_IRQHandler+0x410>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d02c      	beq.n	800cdaa <HAL_DMA_IRQHandler+0x3e2>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a21      	ldr	r2, [pc, #132]	@ (800cddc <HAL_DMA_IRQHandler+0x414>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d027      	beq.n	800cdaa <HAL_DMA_IRQHandler+0x3e2>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4a20      	ldr	r2, [pc, #128]	@ (800cde0 <HAL_DMA_IRQHandler+0x418>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d022      	beq.n	800cdaa <HAL_DMA_IRQHandler+0x3e2>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a1e      	ldr	r2, [pc, #120]	@ (800cde4 <HAL_DMA_IRQHandler+0x41c>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d01d      	beq.n	800cdaa <HAL_DMA_IRQHandler+0x3e2>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4a1d      	ldr	r2, [pc, #116]	@ (800cde8 <HAL_DMA_IRQHandler+0x420>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d018      	beq.n	800cdaa <HAL_DMA_IRQHandler+0x3e2>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a1b      	ldr	r2, [pc, #108]	@ (800cdec <HAL_DMA_IRQHandler+0x424>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d013      	beq.n	800cdaa <HAL_DMA_IRQHandler+0x3e2>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4a1a      	ldr	r2, [pc, #104]	@ (800cdf0 <HAL_DMA_IRQHandler+0x428>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d00e      	beq.n	800cdaa <HAL_DMA_IRQHandler+0x3e2>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a18      	ldr	r2, [pc, #96]	@ (800cdf4 <HAL_DMA_IRQHandler+0x42c>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d009      	beq.n	800cdaa <HAL_DMA_IRQHandler+0x3e2>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4a17      	ldr	r2, [pc, #92]	@ (800cdf8 <HAL_DMA_IRQHandler+0x430>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d004      	beq.n	800cdaa <HAL_DMA_IRQHandler+0x3e2>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4a15      	ldr	r2, [pc, #84]	@ (800cdfc <HAL_DMA_IRQHandler+0x434>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d12a      	bne.n	800ce00 <HAL_DMA_IRQHandler+0x438>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f003 0302 	and.w	r3, r3, #2
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	bf14      	ite	ne
 800cdb8:	2301      	movne	r3, #1
 800cdba:	2300      	moveq	r3, #0
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	e023      	b.n	800ce08 <HAL_DMA_IRQHandler+0x440>
 800cdc0:	40020010 	.word	0x40020010
 800cdc4:	40020028 	.word	0x40020028
 800cdc8:	40020040 	.word	0x40020040
 800cdcc:	40020058 	.word	0x40020058
 800cdd0:	40020070 	.word	0x40020070
 800cdd4:	40020088 	.word	0x40020088
 800cdd8:	400200a0 	.word	0x400200a0
 800cddc:	400200b8 	.word	0x400200b8
 800cde0:	40020410 	.word	0x40020410
 800cde4:	40020428 	.word	0x40020428
 800cde8:	40020440 	.word	0x40020440
 800cdec:	40020458 	.word	0x40020458
 800cdf0:	40020470 	.word	0x40020470
 800cdf4:	40020488 	.word	0x40020488
 800cdf8:	400204a0 	.word	0x400204a0
 800cdfc:	400204b8 	.word	0x400204b8
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2300      	movs	r3, #0
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00d      	beq.n	800ce28 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce10:	f003 031f 	and.w	r3, r3, #31
 800ce14:	2204      	movs	r2, #4
 800ce16:	409a      	lsls	r2, r3
 800ce18:	6a3b      	ldr	r3, [r7, #32]
 800ce1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce20:	f043 0204 	orr.w	r2, r3, #4
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce2c:	f003 031f 	and.w	r3, r3, #31
 800ce30:	2210      	movs	r2, #16
 800ce32:	409a      	lsls	r2, r3
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	4013      	ands	r3, r2
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f000 80a6 	beq.w	800cf8a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4a85      	ldr	r2, [pc, #532]	@ (800d058 <HAL_DMA_IRQHandler+0x690>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d04a      	beq.n	800cede <HAL_DMA_IRQHandler+0x516>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4a83      	ldr	r2, [pc, #524]	@ (800d05c <HAL_DMA_IRQHandler+0x694>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d045      	beq.n	800cede <HAL_DMA_IRQHandler+0x516>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4a82      	ldr	r2, [pc, #520]	@ (800d060 <HAL_DMA_IRQHandler+0x698>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d040      	beq.n	800cede <HAL_DMA_IRQHandler+0x516>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a80      	ldr	r2, [pc, #512]	@ (800d064 <HAL_DMA_IRQHandler+0x69c>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d03b      	beq.n	800cede <HAL_DMA_IRQHandler+0x516>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4a7f      	ldr	r2, [pc, #508]	@ (800d068 <HAL_DMA_IRQHandler+0x6a0>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d036      	beq.n	800cede <HAL_DMA_IRQHandler+0x516>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a7d      	ldr	r2, [pc, #500]	@ (800d06c <HAL_DMA_IRQHandler+0x6a4>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d031      	beq.n	800cede <HAL_DMA_IRQHandler+0x516>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4a7c      	ldr	r2, [pc, #496]	@ (800d070 <HAL_DMA_IRQHandler+0x6a8>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d02c      	beq.n	800cede <HAL_DMA_IRQHandler+0x516>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a7a      	ldr	r2, [pc, #488]	@ (800d074 <HAL_DMA_IRQHandler+0x6ac>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d027      	beq.n	800cede <HAL_DMA_IRQHandler+0x516>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a79      	ldr	r2, [pc, #484]	@ (800d078 <HAL_DMA_IRQHandler+0x6b0>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d022      	beq.n	800cede <HAL_DMA_IRQHandler+0x516>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a77      	ldr	r2, [pc, #476]	@ (800d07c <HAL_DMA_IRQHandler+0x6b4>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d01d      	beq.n	800cede <HAL_DMA_IRQHandler+0x516>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4a76      	ldr	r2, [pc, #472]	@ (800d080 <HAL_DMA_IRQHandler+0x6b8>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d018      	beq.n	800cede <HAL_DMA_IRQHandler+0x516>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a74      	ldr	r2, [pc, #464]	@ (800d084 <HAL_DMA_IRQHandler+0x6bc>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d013      	beq.n	800cede <HAL_DMA_IRQHandler+0x516>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a73      	ldr	r2, [pc, #460]	@ (800d088 <HAL_DMA_IRQHandler+0x6c0>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d00e      	beq.n	800cede <HAL_DMA_IRQHandler+0x516>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a71      	ldr	r2, [pc, #452]	@ (800d08c <HAL_DMA_IRQHandler+0x6c4>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d009      	beq.n	800cede <HAL_DMA_IRQHandler+0x516>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a70      	ldr	r2, [pc, #448]	@ (800d090 <HAL_DMA_IRQHandler+0x6c8>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d004      	beq.n	800cede <HAL_DMA_IRQHandler+0x516>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a6e      	ldr	r2, [pc, #440]	@ (800d094 <HAL_DMA_IRQHandler+0x6cc>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d10a      	bne.n	800cef4 <HAL_DMA_IRQHandler+0x52c>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f003 0308 	and.w	r3, r3, #8
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	bf14      	ite	ne
 800ceec:	2301      	movne	r3, #1
 800ceee:	2300      	moveq	r3, #0
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	e009      	b.n	800cf08 <HAL_DMA_IRQHandler+0x540>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f003 0304 	and.w	r3, r3, #4
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	bf14      	ite	ne
 800cf02:	2301      	movne	r3, #1
 800cf04:	2300      	moveq	r3, #0
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d03e      	beq.n	800cf8a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf10:	f003 031f 	and.w	r3, r3, #31
 800cf14:	2210      	movs	r2, #16
 800cf16:	409a      	lsls	r2, r3
 800cf18:	6a3b      	ldr	r3, [r7, #32]
 800cf1a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d018      	beq.n	800cf5c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d108      	bne.n	800cf4a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d024      	beq.n	800cf8a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	4798      	blx	r3
 800cf48:	e01f      	b.n	800cf8a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d01b      	beq.n	800cf8a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	4798      	blx	r3
 800cf5a:	e016      	b.n	800cf8a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d107      	bne.n	800cf7a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f022 0208 	bic.w	r2, r2, #8
 800cf78:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d003      	beq.n	800cf8a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf8e:	f003 031f 	and.w	r3, r3, #31
 800cf92:	2220      	movs	r2, #32
 800cf94:	409a      	lsls	r2, r3
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	4013      	ands	r3, r2
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	f000 8110 	beq.w	800d1c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a2c      	ldr	r2, [pc, #176]	@ (800d058 <HAL_DMA_IRQHandler+0x690>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d04a      	beq.n	800d040 <HAL_DMA_IRQHandler+0x678>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4a2b      	ldr	r2, [pc, #172]	@ (800d05c <HAL_DMA_IRQHandler+0x694>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d045      	beq.n	800d040 <HAL_DMA_IRQHandler+0x678>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4a29      	ldr	r2, [pc, #164]	@ (800d060 <HAL_DMA_IRQHandler+0x698>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d040      	beq.n	800d040 <HAL_DMA_IRQHandler+0x678>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a28      	ldr	r2, [pc, #160]	@ (800d064 <HAL_DMA_IRQHandler+0x69c>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d03b      	beq.n	800d040 <HAL_DMA_IRQHandler+0x678>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a26      	ldr	r2, [pc, #152]	@ (800d068 <HAL_DMA_IRQHandler+0x6a0>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d036      	beq.n	800d040 <HAL_DMA_IRQHandler+0x678>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a25      	ldr	r2, [pc, #148]	@ (800d06c <HAL_DMA_IRQHandler+0x6a4>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d031      	beq.n	800d040 <HAL_DMA_IRQHandler+0x678>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a23      	ldr	r2, [pc, #140]	@ (800d070 <HAL_DMA_IRQHandler+0x6a8>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d02c      	beq.n	800d040 <HAL_DMA_IRQHandler+0x678>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a22      	ldr	r2, [pc, #136]	@ (800d074 <HAL_DMA_IRQHandler+0x6ac>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d027      	beq.n	800d040 <HAL_DMA_IRQHandler+0x678>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a20      	ldr	r2, [pc, #128]	@ (800d078 <HAL_DMA_IRQHandler+0x6b0>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d022      	beq.n	800d040 <HAL_DMA_IRQHandler+0x678>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4a1f      	ldr	r2, [pc, #124]	@ (800d07c <HAL_DMA_IRQHandler+0x6b4>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d01d      	beq.n	800d040 <HAL_DMA_IRQHandler+0x678>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a1d      	ldr	r2, [pc, #116]	@ (800d080 <HAL_DMA_IRQHandler+0x6b8>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d018      	beq.n	800d040 <HAL_DMA_IRQHandler+0x678>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4a1c      	ldr	r2, [pc, #112]	@ (800d084 <HAL_DMA_IRQHandler+0x6bc>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d013      	beq.n	800d040 <HAL_DMA_IRQHandler+0x678>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a1a      	ldr	r2, [pc, #104]	@ (800d088 <HAL_DMA_IRQHandler+0x6c0>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d00e      	beq.n	800d040 <HAL_DMA_IRQHandler+0x678>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4a19      	ldr	r2, [pc, #100]	@ (800d08c <HAL_DMA_IRQHandler+0x6c4>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d009      	beq.n	800d040 <HAL_DMA_IRQHandler+0x678>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a17      	ldr	r2, [pc, #92]	@ (800d090 <HAL_DMA_IRQHandler+0x6c8>)
 800d032:	4293      	cmp	r3, r2
 800d034:	d004      	beq.n	800d040 <HAL_DMA_IRQHandler+0x678>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4a16      	ldr	r2, [pc, #88]	@ (800d094 <HAL_DMA_IRQHandler+0x6cc>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d12b      	bne.n	800d098 <HAL_DMA_IRQHandler+0x6d0>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f003 0310 	and.w	r3, r3, #16
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	bf14      	ite	ne
 800d04e:	2301      	movne	r3, #1
 800d050:	2300      	moveq	r3, #0
 800d052:	b2db      	uxtb	r3, r3
 800d054:	e02a      	b.n	800d0ac <HAL_DMA_IRQHandler+0x6e4>
 800d056:	bf00      	nop
 800d058:	40020010 	.word	0x40020010
 800d05c:	40020028 	.word	0x40020028
 800d060:	40020040 	.word	0x40020040
 800d064:	40020058 	.word	0x40020058
 800d068:	40020070 	.word	0x40020070
 800d06c:	40020088 	.word	0x40020088
 800d070:	400200a0 	.word	0x400200a0
 800d074:	400200b8 	.word	0x400200b8
 800d078:	40020410 	.word	0x40020410
 800d07c:	40020428 	.word	0x40020428
 800d080:	40020440 	.word	0x40020440
 800d084:	40020458 	.word	0x40020458
 800d088:	40020470 	.word	0x40020470
 800d08c:	40020488 	.word	0x40020488
 800d090:	400204a0 	.word	0x400204a0
 800d094:	400204b8 	.word	0x400204b8
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f003 0302 	and.w	r3, r3, #2
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	bf14      	ite	ne
 800d0a6:	2301      	movne	r3, #1
 800d0a8:	2300      	moveq	r3, #0
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f000 8087 	beq.w	800d1c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0b6:	f003 031f 	and.w	r3, r3, #31
 800d0ba:	2220      	movs	r2, #32
 800d0bc:	409a      	lsls	r2, r3
 800d0be:	6a3b      	ldr	r3, [r7, #32]
 800d0c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	2b04      	cmp	r3, #4
 800d0cc:	d139      	bne.n	800d142 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f022 0216 	bic.w	r2, r2, #22
 800d0dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	695a      	ldr	r2, [r3, #20]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d0ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d103      	bne.n	800d0fe <HAL_DMA_IRQHandler+0x736>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d007      	beq.n	800d10e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f022 0208 	bic.w	r2, r2, #8
 800d10c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d112:	f003 031f 	and.w	r3, r3, #31
 800d116:	223f      	movs	r2, #63	@ 0x3f
 800d118:	409a      	lsls	r2, r3
 800d11a:	6a3b      	ldr	r3, [r7, #32]
 800d11c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2201      	movs	r2, #1
 800d122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2200      	movs	r2, #0
 800d12a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d132:	2b00      	cmp	r3, #0
 800d134:	f000 834a 	beq.w	800d7cc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	4798      	blx	r3
          }
          return;
 800d140:	e344      	b.n	800d7cc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d018      	beq.n	800d182 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d108      	bne.n	800d170 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d162:	2b00      	cmp	r3, #0
 800d164:	d02c      	beq.n	800d1c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	4798      	blx	r3
 800d16e:	e027      	b.n	800d1c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d174:	2b00      	cmp	r3, #0
 800d176:	d023      	beq.n	800d1c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	4798      	blx	r3
 800d180:	e01e      	b.n	800d1c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d10f      	bne.n	800d1b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f022 0210 	bic.w	r2, r2, #16
 800d19e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d003      	beq.n	800d1c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f000 8306 	beq.w	800d7d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1ce:	f003 0301 	and.w	r3, r3, #1
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f000 8088 	beq.w	800d2e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2204      	movs	r2, #4
 800d1dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a7a      	ldr	r2, [pc, #488]	@ (800d3d0 <HAL_DMA_IRQHandler+0xa08>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d04a      	beq.n	800d280 <HAL_DMA_IRQHandler+0x8b8>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a79      	ldr	r2, [pc, #484]	@ (800d3d4 <HAL_DMA_IRQHandler+0xa0c>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d045      	beq.n	800d280 <HAL_DMA_IRQHandler+0x8b8>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a77      	ldr	r2, [pc, #476]	@ (800d3d8 <HAL_DMA_IRQHandler+0xa10>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d040      	beq.n	800d280 <HAL_DMA_IRQHandler+0x8b8>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4a76      	ldr	r2, [pc, #472]	@ (800d3dc <HAL_DMA_IRQHandler+0xa14>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d03b      	beq.n	800d280 <HAL_DMA_IRQHandler+0x8b8>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a74      	ldr	r2, [pc, #464]	@ (800d3e0 <HAL_DMA_IRQHandler+0xa18>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d036      	beq.n	800d280 <HAL_DMA_IRQHandler+0x8b8>
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4a73      	ldr	r2, [pc, #460]	@ (800d3e4 <HAL_DMA_IRQHandler+0xa1c>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d031      	beq.n	800d280 <HAL_DMA_IRQHandler+0x8b8>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a71      	ldr	r2, [pc, #452]	@ (800d3e8 <HAL_DMA_IRQHandler+0xa20>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d02c      	beq.n	800d280 <HAL_DMA_IRQHandler+0x8b8>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4a70      	ldr	r2, [pc, #448]	@ (800d3ec <HAL_DMA_IRQHandler+0xa24>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d027      	beq.n	800d280 <HAL_DMA_IRQHandler+0x8b8>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4a6e      	ldr	r2, [pc, #440]	@ (800d3f0 <HAL_DMA_IRQHandler+0xa28>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d022      	beq.n	800d280 <HAL_DMA_IRQHandler+0x8b8>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	4a6d      	ldr	r2, [pc, #436]	@ (800d3f4 <HAL_DMA_IRQHandler+0xa2c>)
 800d240:	4293      	cmp	r3, r2
 800d242:	d01d      	beq.n	800d280 <HAL_DMA_IRQHandler+0x8b8>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a6b      	ldr	r2, [pc, #428]	@ (800d3f8 <HAL_DMA_IRQHandler+0xa30>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d018      	beq.n	800d280 <HAL_DMA_IRQHandler+0x8b8>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4a6a      	ldr	r2, [pc, #424]	@ (800d3fc <HAL_DMA_IRQHandler+0xa34>)
 800d254:	4293      	cmp	r3, r2
 800d256:	d013      	beq.n	800d280 <HAL_DMA_IRQHandler+0x8b8>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4a68      	ldr	r2, [pc, #416]	@ (800d400 <HAL_DMA_IRQHandler+0xa38>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d00e      	beq.n	800d280 <HAL_DMA_IRQHandler+0x8b8>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a67      	ldr	r2, [pc, #412]	@ (800d404 <HAL_DMA_IRQHandler+0xa3c>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d009      	beq.n	800d280 <HAL_DMA_IRQHandler+0x8b8>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a65      	ldr	r2, [pc, #404]	@ (800d408 <HAL_DMA_IRQHandler+0xa40>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d004      	beq.n	800d280 <HAL_DMA_IRQHandler+0x8b8>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4a64      	ldr	r2, [pc, #400]	@ (800d40c <HAL_DMA_IRQHandler+0xa44>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d108      	bne.n	800d292 <HAL_DMA_IRQHandler+0x8ca>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f022 0201 	bic.w	r2, r2, #1
 800d28e:	601a      	str	r2, [r3, #0]
 800d290:	e007      	b.n	800d2a2 <HAL_DMA_IRQHandler+0x8da>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f022 0201 	bic.w	r2, r2, #1
 800d2a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	60fb      	str	r3, [r7, #12]
 800d2a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d307      	bcc.n	800d2be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f003 0301 	and.w	r3, r3, #1
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1f2      	bne.n	800d2a2 <HAL_DMA_IRQHandler+0x8da>
 800d2bc:	e000      	b.n	800d2c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800d2be:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f003 0301 	and.w	r3, r3, #1
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d004      	beq.n	800d2d8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2203      	movs	r2, #3
 800d2d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800d2d6:	e003      	b.n	800d2e0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2201      	movs	r2, #1
 800d2dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f000 8272 	beq.w	800d7d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	4798      	blx	r3
 800d2fa:	e26c      	b.n	800d7d6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a43      	ldr	r2, [pc, #268]	@ (800d410 <HAL_DMA_IRQHandler+0xa48>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d022      	beq.n	800d34c <HAL_DMA_IRQHandler+0x984>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a42      	ldr	r2, [pc, #264]	@ (800d414 <HAL_DMA_IRQHandler+0xa4c>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d01d      	beq.n	800d34c <HAL_DMA_IRQHandler+0x984>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a40      	ldr	r2, [pc, #256]	@ (800d418 <HAL_DMA_IRQHandler+0xa50>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d018      	beq.n	800d34c <HAL_DMA_IRQHandler+0x984>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a3f      	ldr	r2, [pc, #252]	@ (800d41c <HAL_DMA_IRQHandler+0xa54>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d013      	beq.n	800d34c <HAL_DMA_IRQHandler+0x984>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a3d      	ldr	r2, [pc, #244]	@ (800d420 <HAL_DMA_IRQHandler+0xa58>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d00e      	beq.n	800d34c <HAL_DMA_IRQHandler+0x984>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	4a3c      	ldr	r2, [pc, #240]	@ (800d424 <HAL_DMA_IRQHandler+0xa5c>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d009      	beq.n	800d34c <HAL_DMA_IRQHandler+0x984>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a3a      	ldr	r2, [pc, #232]	@ (800d428 <HAL_DMA_IRQHandler+0xa60>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d004      	beq.n	800d34c <HAL_DMA_IRQHandler+0x984>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4a39      	ldr	r2, [pc, #228]	@ (800d42c <HAL_DMA_IRQHandler+0xa64>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d101      	bne.n	800d350 <HAL_DMA_IRQHandler+0x988>
 800d34c:	2301      	movs	r3, #1
 800d34e:	e000      	b.n	800d352 <HAL_DMA_IRQHandler+0x98a>
 800d350:	2300      	movs	r3, #0
 800d352:	2b00      	cmp	r3, #0
 800d354:	f000 823f 	beq.w	800d7d6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d364:	f003 031f 	and.w	r3, r3, #31
 800d368:	2204      	movs	r2, #4
 800d36a:	409a      	lsls	r2, r3
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	4013      	ands	r3, r2
 800d370:	2b00      	cmp	r3, #0
 800d372:	f000 80cd 	beq.w	800d510 <HAL_DMA_IRQHandler+0xb48>
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	f003 0304 	and.w	r3, r3, #4
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f000 80c7 	beq.w	800d510 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d386:	f003 031f 	and.w	r3, r3, #31
 800d38a:	2204      	movs	r2, #4
 800d38c:	409a      	lsls	r2, r3
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d049      	beq.n	800d430 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d109      	bne.n	800d3ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f000 8210 	beq.w	800d7d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d3b8:	e20a      	b.n	800d7d0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	f000 8206 	beq.w	800d7d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d3cc:	e200      	b.n	800d7d0 <HAL_DMA_IRQHandler+0xe08>
 800d3ce:	bf00      	nop
 800d3d0:	40020010 	.word	0x40020010
 800d3d4:	40020028 	.word	0x40020028
 800d3d8:	40020040 	.word	0x40020040
 800d3dc:	40020058 	.word	0x40020058
 800d3e0:	40020070 	.word	0x40020070
 800d3e4:	40020088 	.word	0x40020088
 800d3e8:	400200a0 	.word	0x400200a0
 800d3ec:	400200b8 	.word	0x400200b8
 800d3f0:	40020410 	.word	0x40020410
 800d3f4:	40020428 	.word	0x40020428
 800d3f8:	40020440 	.word	0x40020440
 800d3fc:	40020458 	.word	0x40020458
 800d400:	40020470 	.word	0x40020470
 800d404:	40020488 	.word	0x40020488
 800d408:	400204a0 	.word	0x400204a0
 800d40c:	400204b8 	.word	0x400204b8
 800d410:	58025408 	.word	0x58025408
 800d414:	5802541c 	.word	0x5802541c
 800d418:	58025430 	.word	0x58025430
 800d41c:	58025444 	.word	0x58025444
 800d420:	58025458 	.word	0x58025458
 800d424:	5802546c 	.word	0x5802546c
 800d428:	58025480 	.word	0x58025480
 800d42c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	f003 0320 	and.w	r3, r3, #32
 800d436:	2b00      	cmp	r3, #0
 800d438:	d160      	bne.n	800d4fc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	4a7f      	ldr	r2, [pc, #508]	@ (800d63c <HAL_DMA_IRQHandler+0xc74>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d04a      	beq.n	800d4da <HAL_DMA_IRQHandler+0xb12>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4a7d      	ldr	r2, [pc, #500]	@ (800d640 <HAL_DMA_IRQHandler+0xc78>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d045      	beq.n	800d4da <HAL_DMA_IRQHandler+0xb12>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4a7c      	ldr	r2, [pc, #496]	@ (800d644 <HAL_DMA_IRQHandler+0xc7c>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d040      	beq.n	800d4da <HAL_DMA_IRQHandler+0xb12>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a7a      	ldr	r2, [pc, #488]	@ (800d648 <HAL_DMA_IRQHandler+0xc80>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d03b      	beq.n	800d4da <HAL_DMA_IRQHandler+0xb12>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4a79      	ldr	r2, [pc, #484]	@ (800d64c <HAL_DMA_IRQHandler+0xc84>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d036      	beq.n	800d4da <HAL_DMA_IRQHandler+0xb12>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a77      	ldr	r2, [pc, #476]	@ (800d650 <HAL_DMA_IRQHandler+0xc88>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d031      	beq.n	800d4da <HAL_DMA_IRQHandler+0xb12>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4a76      	ldr	r2, [pc, #472]	@ (800d654 <HAL_DMA_IRQHandler+0xc8c>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d02c      	beq.n	800d4da <HAL_DMA_IRQHandler+0xb12>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a74      	ldr	r2, [pc, #464]	@ (800d658 <HAL_DMA_IRQHandler+0xc90>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d027      	beq.n	800d4da <HAL_DMA_IRQHandler+0xb12>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a73      	ldr	r2, [pc, #460]	@ (800d65c <HAL_DMA_IRQHandler+0xc94>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d022      	beq.n	800d4da <HAL_DMA_IRQHandler+0xb12>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a71      	ldr	r2, [pc, #452]	@ (800d660 <HAL_DMA_IRQHandler+0xc98>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d01d      	beq.n	800d4da <HAL_DMA_IRQHandler+0xb12>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a70      	ldr	r2, [pc, #448]	@ (800d664 <HAL_DMA_IRQHandler+0xc9c>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d018      	beq.n	800d4da <HAL_DMA_IRQHandler+0xb12>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a6e      	ldr	r2, [pc, #440]	@ (800d668 <HAL_DMA_IRQHandler+0xca0>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d013      	beq.n	800d4da <HAL_DMA_IRQHandler+0xb12>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a6d      	ldr	r2, [pc, #436]	@ (800d66c <HAL_DMA_IRQHandler+0xca4>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d00e      	beq.n	800d4da <HAL_DMA_IRQHandler+0xb12>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a6b      	ldr	r2, [pc, #428]	@ (800d670 <HAL_DMA_IRQHandler+0xca8>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d009      	beq.n	800d4da <HAL_DMA_IRQHandler+0xb12>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a6a      	ldr	r2, [pc, #424]	@ (800d674 <HAL_DMA_IRQHandler+0xcac>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d004      	beq.n	800d4da <HAL_DMA_IRQHandler+0xb12>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a68      	ldr	r2, [pc, #416]	@ (800d678 <HAL_DMA_IRQHandler+0xcb0>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d108      	bne.n	800d4ec <HAL_DMA_IRQHandler+0xb24>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	681a      	ldr	r2, [r3, #0]
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f022 0208 	bic.w	r2, r2, #8
 800d4e8:	601a      	str	r2, [r3, #0]
 800d4ea:	e007      	b.n	800d4fc <HAL_DMA_IRQHandler+0xb34>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f022 0204 	bic.w	r2, r2, #4
 800d4fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d500:	2b00      	cmp	r3, #0
 800d502:	f000 8165 	beq.w	800d7d0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d50e:	e15f      	b.n	800d7d0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d514:	f003 031f 	and.w	r3, r3, #31
 800d518:	2202      	movs	r2, #2
 800d51a:	409a      	lsls	r2, r3
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	4013      	ands	r3, r2
 800d520:	2b00      	cmp	r3, #0
 800d522:	f000 80c5 	beq.w	800d6b0 <HAL_DMA_IRQHandler+0xce8>
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	f003 0302 	and.w	r3, r3, #2
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f000 80bf 	beq.w	800d6b0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d536:	f003 031f 	and.w	r3, r3, #31
 800d53a:	2202      	movs	r2, #2
 800d53c:	409a      	lsls	r2, r3
 800d53e:	69fb      	ldr	r3, [r7, #28]
 800d540:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d018      	beq.n	800d57e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d552:	2b00      	cmp	r3, #0
 800d554:	d109      	bne.n	800d56a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f000 813a 	beq.w	800d7d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d568:	e134      	b.n	800d7d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d56e:	2b00      	cmp	r3, #0
 800d570:	f000 8130 	beq.w	800d7d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d57c:	e12a      	b.n	800d7d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	f003 0320 	and.w	r3, r3, #32
 800d584:	2b00      	cmp	r3, #0
 800d586:	f040 8089 	bne.w	800d69c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	4a2b      	ldr	r2, [pc, #172]	@ (800d63c <HAL_DMA_IRQHandler+0xc74>)
 800d590:	4293      	cmp	r3, r2
 800d592:	d04a      	beq.n	800d62a <HAL_DMA_IRQHandler+0xc62>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4a29      	ldr	r2, [pc, #164]	@ (800d640 <HAL_DMA_IRQHandler+0xc78>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d045      	beq.n	800d62a <HAL_DMA_IRQHandler+0xc62>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	4a28      	ldr	r2, [pc, #160]	@ (800d644 <HAL_DMA_IRQHandler+0xc7c>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d040      	beq.n	800d62a <HAL_DMA_IRQHandler+0xc62>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4a26      	ldr	r2, [pc, #152]	@ (800d648 <HAL_DMA_IRQHandler+0xc80>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d03b      	beq.n	800d62a <HAL_DMA_IRQHandler+0xc62>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	4a25      	ldr	r2, [pc, #148]	@ (800d64c <HAL_DMA_IRQHandler+0xc84>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d036      	beq.n	800d62a <HAL_DMA_IRQHandler+0xc62>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a23      	ldr	r2, [pc, #140]	@ (800d650 <HAL_DMA_IRQHandler+0xc88>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d031      	beq.n	800d62a <HAL_DMA_IRQHandler+0xc62>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4a22      	ldr	r2, [pc, #136]	@ (800d654 <HAL_DMA_IRQHandler+0xc8c>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d02c      	beq.n	800d62a <HAL_DMA_IRQHandler+0xc62>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4a20      	ldr	r2, [pc, #128]	@ (800d658 <HAL_DMA_IRQHandler+0xc90>)
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d027      	beq.n	800d62a <HAL_DMA_IRQHandler+0xc62>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a1f      	ldr	r2, [pc, #124]	@ (800d65c <HAL_DMA_IRQHandler+0xc94>)
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d022      	beq.n	800d62a <HAL_DMA_IRQHandler+0xc62>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4a1d      	ldr	r2, [pc, #116]	@ (800d660 <HAL_DMA_IRQHandler+0xc98>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d01d      	beq.n	800d62a <HAL_DMA_IRQHandler+0xc62>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4a1c      	ldr	r2, [pc, #112]	@ (800d664 <HAL_DMA_IRQHandler+0xc9c>)
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	d018      	beq.n	800d62a <HAL_DMA_IRQHandler+0xc62>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a1a      	ldr	r2, [pc, #104]	@ (800d668 <HAL_DMA_IRQHandler+0xca0>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d013      	beq.n	800d62a <HAL_DMA_IRQHandler+0xc62>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4a19      	ldr	r2, [pc, #100]	@ (800d66c <HAL_DMA_IRQHandler+0xca4>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d00e      	beq.n	800d62a <HAL_DMA_IRQHandler+0xc62>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4a17      	ldr	r2, [pc, #92]	@ (800d670 <HAL_DMA_IRQHandler+0xca8>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d009      	beq.n	800d62a <HAL_DMA_IRQHandler+0xc62>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4a16      	ldr	r2, [pc, #88]	@ (800d674 <HAL_DMA_IRQHandler+0xcac>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d004      	beq.n	800d62a <HAL_DMA_IRQHandler+0xc62>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4a14      	ldr	r2, [pc, #80]	@ (800d678 <HAL_DMA_IRQHandler+0xcb0>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d128      	bne.n	800d67c <HAL_DMA_IRQHandler+0xcb4>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f022 0214 	bic.w	r2, r2, #20
 800d638:	601a      	str	r2, [r3, #0]
 800d63a:	e027      	b.n	800d68c <HAL_DMA_IRQHandler+0xcc4>
 800d63c:	40020010 	.word	0x40020010
 800d640:	40020028 	.word	0x40020028
 800d644:	40020040 	.word	0x40020040
 800d648:	40020058 	.word	0x40020058
 800d64c:	40020070 	.word	0x40020070
 800d650:	40020088 	.word	0x40020088
 800d654:	400200a0 	.word	0x400200a0
 800d658:	400200b8 	.word	0x400200b8
 800d65c:	40020410 	.word	0x40020410
 800d660:	40020428 	.word	0x40020428
 800d664:	40020440 	.word	0x40020440
 800d668:	40020458 	.word	0x40020458
 800d66c:	40020470 	.word	0x40020470
 800d670:	40020488 	.word	0x40020488
 800d674:	400204a0 	.word	0x400204a0
 800d678:	400204b8 	.word	0x400204b8
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	681a      	ldr	r2, [r3, #0]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f022 020a 	bic.w	r2, r2, #10
 800d68a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2201      	movs	r2, #1
 800d690:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f000 8097 	beq.w	800d7d4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d6ae:	e091      	b.n	800d7d4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d6b4:	f003 031f 	and.w	r3, r3, #31
 800d6b8:	2208      	movs	r2, #8
 800d6ba:	409a      	lsls	r2, r3
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	4013      	ands	r3, r2
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	f000 8088 	beq.w	800d7d6 <HAL_DMA_IRQHandler+0xe0e>
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	f003 0308 	and.w	r3, r3, #8
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	f000 8082 	beq.w	800d7d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a41      	ldr	r2, [pc, #260]	@ (800d7dc <HAL_DMA_IRQHandler+0xe14>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d04a      	beq.n	800d772 <HAL_DMA_IRQHandler+0xdaa>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a3f      	ldr	r2, [pc, #252]	@ (800d7e0 <HAL_DMA_IRQHandler+0xe18>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d045      	beq.n	800d772 <HAL_DMA_IRQHandler+0xdaa>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4a3e      	ldr	r2, [pc, #248]	@ (800d7e4 <HAL_DMA_IRQHandler+0xe1c>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d040      	beq.n	800d772 <HAL_DMA_IRQHandler+0xdaa>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a3c      	ldr	r2, [pc, #240]	@ (800d7e8 <HAL_DMA_IRQHandler+0xe20>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d03b      	beq.n	800d772 <HAL_DMA_IRQHandler+0xdaa>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4a3b      	ldr	r2, [pc, #236]	@ (800d7ec <HAL_DMA_IRQHandler+0xe24>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d036      	beq.n	800d772 <HAL_DMA_IRQHandler+0xdaa>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4a39      	ldr	r2, [pc, #228]	@ (800d7f0 <HAL_DMA_IRQHandler+0xe28>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d031      	beq.n	800d772 <HAL_DMA_IRQHandler+0xdaa>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4a38      	ldr	r2, [pc, #224]	@ (800d7f4 <HAL_DMA_IRQHandler+0xe2c>)
 800d714:	4293      	cmp	r3, r2
 800d716:	d02c      	beq.n	800d772 <HAL_DMA_IRQHandler+0xdaa>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4a36      	ldr	r2, [pc, #216]	@ (800d7f8 <HAL_DMA_IRQHandler+0xe30>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d027      	beq.n	800d772 <HAL_DMA_IRQHandler+0xdaa>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4a35      	ldr	r2, [pc, #212]	@ (800d7fc <HAL_DMA_IRQHandler+0xe34>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d022      	beq.n	800d772 <HAL_DMA_IRQHandler+0xdaa>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a33      	ldr	r2, [pc, #204]	@ (800d800 <HAL_DMA_IRQHandler+0xe38>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d01d      	beq.n	800d772 <HAL_DMA_IRQHandler+0xdaa>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4a32      	ldr	r2, [pc, #200]	@ (800d804 <HAL_DMA_IRQHandler+0xe3c>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d018      	beq.n	800d772 <HAL_DMA_IRQHandler+0xdaa>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a30      	ldr	r2, [pc, #192]	@ (800d808 <HAL_DMA_IRQHandler+0xe40>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d013      	beq.n	800d772 <HAL_DMA_IRQHandler+0xdaa>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4a2f      	ldr	r2, [pc, #188]	@ (800d80c <HAL_DMA_IRQHandler+0xe44>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d00e      	beq.n	800d772 <HAL_DMA_IRQHandler+0xdaa>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a2d      	ldr	r2, [pc, #180]	@ (800d810 <HAL_DMA_IRQHandler+0xe48>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d009      	beq.n	800d772 <HAL_DMA_IRQHandler+0xdaa>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a2c      	ldr	r2, [pc, #176]	@ (800d814 <HAL_DMA_IRQHandler+0xe4c>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d004      	beq.n	800d772 <HAL_DMA_IRQHandler+0xdaa>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a2a      	ldr	r2, [pc, #168]	@ (800d818 <HAL_DMA_IRQHandler+0xe50>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d108      	bne.n	800d784 <HAL_DMA_IRQHandler+0xdbc>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f022 021c 	bic.w	r2, r2, #28
 800d780:	601a      	str	r2, [r3, #0]
 800d782:	e007      	b.n	800d794 <HAL_DMA_IRQHandler+0xdcc>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f022 020e 	bic.w	r2, r2, #14
 800d792:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d798:	f003 031f 	and.w	r3, r3, #31
 800d79c:	2201      	movs	r2, #1
 800d79e:	409a      	lsls	r2, r3
 800d7a0:	69fb      	ldr	r3, [r7, #28]
 800d7a2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d009      	beq.n	800d7d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	4798      	blx	r3
 800d7ca:	e004      	b.n	800d7d6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800d7cc:	bf00      	nop
 800d7ce:	e002      	b.n	800d7d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d7d0:	bf00      	nop
 800d7d2:	e000      	b.n	800d7d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d7d4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800d7d6:	3728      	adds	r7, #40	@ 0x28
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	40020010 	.word	0x40020010
 800d7e0:	40020028 	.word	0x40020028
 800d7e4:	40020040 	.word	0x40020040
 800d7e8:	40020058 	.word	0x40020058
 800d7ec:	40020070 	.word	0x40020070
 800d7f0:	40020088 	.word	0x40020088
 800d7f4:	400200a0 	.word	0x400200a0
 800d7f8:	400200b8 	.word	0x400200b8
 800d7fc:	40020410 	.word	0x40020410
 800d800:	40020428 	.word	0x40020428
 800d804:	40020440 	.word	0x40020440
 800d808:	40020458 	.word	0x40020458
 800d80c:	40020470 	.word	0x40020470
 800d810:	40020488 	.word	0x40020488
 800d814:	400204a0 	.word	0x400204a0
 800d818:	400204b8 	.word	0x400204b8

0800d81c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d82a:	b2db      	uxtb	r3, r3
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	370c      	adds	r7, #12
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr

0800d838 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800d838:	b480      	push	{r7}
 800d83a:	b083      	sub	sp, #12
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800d844:	4618      	mov	r0, r3
 800d846:	370c      	adds	r7, #12
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr

0800d850 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d850:	b480      	push	{r7}
 800d852:	b087      	sub	sp, #28
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	607a      	str	r2, [r7, #4]
 800d85c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d862:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d868:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4a7f      	ldr	r2, [pc, #508]	@ (800da6c <DMA_SetConfig+0x21c>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d072      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a7d      	ldr	r2, [pc, #500]	@ (800da70 <DMA_SetConfig+0x220>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d06d      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4a7c      	ldr	r2, [pc, #496]	@ (800da74 <DMA_SetConfig+0x224>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d068      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a7a      	ldr	r2, [pc, #488]	@ (800da78 <DMA_SetConfig+0x228>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d063      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4a79      	ldr	r2, [pc, #484]	@ (800da7c <DMA_SetConfig+0x22c>)
 800d898:	4293      	cmp	r3, r2
 800d89a:	d05e      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a77      	ldr	r2, [pc, #476]	@ (800da80 <DMA_SetConfig+0x230>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d059      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4a76      	ldr	r2, [pc, #472]	@ (800da84 <DMA_SetConfig+0x234>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d054      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4a74      	ldr	r2, [pc, #464]	@ (800da88 <DMA_SetConfig+0x238>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d04f      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4a73      	ldr	r2, [pc, #460]	@ (800da8c <DMA_SetConfig+0x23c>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d04a      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a71      	ldr	r2, [pc, #452]	@ (800da90 <DMA_SetConfig+0x240>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d045      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4a70      	ldr	r2, [pc, #448]	@ (800da94 <DMA_SetConfig+0x244>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d040      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a6e      	ldr	r2, [pc, #440]	@ (800da98 <DMA_SetConfig+0x248>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d03b      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4a6d      	ldr	r2, [pc, #436]	@ (800da9c <DMA_SetConfig+0x24c>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d036      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4a6b      	ldr	r2, [pc, #428]	@ (800daa0 <DMA_SetConfig+0x250>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d031      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a6a      	ldr	r2, [pc, #424]	@ (800daa4 <DMA_SetConfig+0x254>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d02c      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a68      	ldr	r2, [pc, #416]	@ (800daa8 <DMA_SetConfig+0x258>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d027      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4a67      	ldr	r2, [pc, #412]	@ (800daac <DMA_SetConfig+0x25c>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d022      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4a65      	ldr	r2, [pc, #404]	@ (800dab0 <DMA_SetConfig+0x260>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d01d      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4a64      	ldr	r2, [pc, #400]	@ (800dab4 <DMA_SetConfig+0x264>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d018      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4a62      	ldr	r2, [pc, #392]	@ (800dab8 <DMA_SetConfig+0x268>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d013      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4a61      	ldr	r2, [pc, #388]	@ (800dabc <DMA_SetConfig+0x26c>)
 800d938:	4293      	cmp	r3, r2
 800d93a:	d00e      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4a5f      	ldr	r2, [pc, #380]	@ (800dac0 <DMA_SetConfig+0x270>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d009      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4a5e      	ldr	r2, [pc, #376]	@ (800dac4 <DMA_SetConfig+0x274>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d004      	beq.n	800d95a <DMA_SetConfig+0x10a>
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a5c      	ldr	r2, [pc, #368]	@ (800dac8 <DMA_SetConfig+0x278>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d101      	bne.n	800d95e <DMA_SetConfig+0x10e>
 800d95a:	2301      	movs	r3, #1
 800d95c:	e000      	b.n	800d960 <DMA_SetConfig+0x110>
 800d95e:	2300      	movs	r3, #0
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00d      	beq.n	800d980 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d968:	68fa      	ldr	r2, [r7, #12]
 800d96a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800d96c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d972:	2b00      	cmp	r3, #0
 800d974:	d004      	beq.n	800d980 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800d97e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4a39      	ldr	r2, [pc, #228]	@ (800da6c <DMA_SetConfig+0x21c>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d04a      	beq.n	800da20 <DMA_SetConfig+0x1d0>
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	4a38      	ldr	r2, [pc, #224]	@ (800da70 <DMA_SetConfig+0x220>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d045      	beq.n	800da20 <DMA_SetConfig+0x1d0>
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	4a36      	ldr	r2, [pc, #216]	@ (800da74 <DMA_SetConfig+0x224>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d040      	beq.n	800da20 <DMA_SetConfig+0x1d0>
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4a35      	ldr	r2, [pc, #212]	@ (800da78 <DMA_SetConfig+0x228>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d03b      	beq.n	800da20 <DMA_SetConfig+0x1d0>
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a33      	ldr	r2, [pc, #204]	@ (800da7c <DMA_SetConfig+0x22c>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d036      	beq.n	800da20 <DMA_SetConfig+0x1d0>
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	4a32      	ldr	r2, [pc, #200]	@ (800da80 <DMA_SetConfig+0x230>)
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d031      	beq.n	800da20 <DMA_SetConfig+0x1d0>
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4a30      	ldr	r2, [pc, #192]	@ (800da84 <DMA_SetConfig+0x234>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d02c      	beq.n	800da20 <DMA_SetConfig+0x1d0>
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4a2f      	ldr	r2, [pc, #188]	@ (800da88 <DMA_SetConfig+0x238>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d027      	beq.n	800da20 <DMA_SetConfig+0x1d0>
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4a2d      	ldr	r2, [pc, #180]	@ (800da8c <DMA_SetConfig+0x23c>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d022      	beq.n	800da20 <DMA_SetConfig+0x1d0>
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4a2c      	ldr	r2, [pc, #176]	@ (800da90 <DMA_SetConfig+0x240>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d01d      	beq.n	800da20 <DMA_SetConfig+0x1d0>
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4a2a      	ldr	r2, [pc, #168]	@ (800da94 <DMA_SetConfig+0x244>)
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d018      	beq.n	800da20 <DMA_SetConfig+0x1d0>
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4a29      	ldr	r2, [pc, #164]	@ (800da98 <DMA_SetConfig+0x248>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d013      	beq.n	800da20 <DMA_SetConfig+0x1d0>
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4a27      	ldr	r2, [pc, #156]	@ (800da9c <DMA_SetConfig+0x24c>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d00e      	beq.n	800da20 <DMA_SetConfig+0x1d0>
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	4a26      	ldr	r2, [pc, #152]	@ (800daa0 <DMA_SetConfig+0x250>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	d009      	beq.n	800da20 <DMA_SetConfig+0x1d0>
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a24      	ldr	r2, [pc, #144]	@ (800daa4 <DMA_SetConfig+0x254>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d004      	beq.n	800da20 <DMA_SetConfig+0x1d0>
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	4a23      	ldr	r2, [pc, #140]	@ (800daa8 <DMA_SetConfig+0x258>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d101      	bne.n	800da24 <DMA_SetConfig+0x1d4>
 800da20:	2301      	movs	r3, #1
 800da22:	e000      	b.n	800da26 <DMA_SetConfig+0x1d6>
 800da24:	2300      	movs	r3, #0
 800da26:	2b00      	cmp	r3, #0
 800da28:	d059      	beq.n	800dade <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800da2e:	f003 031f 	and.w	r3, r3, #31
 800da32:	223f      	movs	r2, #63	@ 0x3f
 800da34:	409a      	lsls	r2, r3
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800da48:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	683a      	ldr	r2, [r7, #0]
 800da50:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	689b      	ldr	r3, [r3, #8]
 800da56:	2b40      	cmp	r3, #64	@ 0x40
 800da58:	d138      	bne.n	800dacc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	68ba      	ldr	r2, [r7, #8]
 800da68:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800da6a:	e086      	b.n	800db7a <DMA_SetConfig+0x32a>
 800da6c:	40020010 	.word	0x40020010
 800da70:	40020028 	.word	0x40020028
 800da74:	40020040 	.word	0x40020040
 800da78:	40020058 	.word	0x40020058
 800da7c:	40020070 	.word	0x40020070
 800da80:	40020088 	.word	0x40020088
 800da84:	400200a0 	.word	0x400200a0
 800da88:	400200b8 	.word	0x400200b8
 800da8c:	40020410 	.word	0x40020410
 800da90:	40020428 	.word	0x40020428
 800da94:	40020440 	.word	0x40020440
 800da98:	40020458 	.word	0x40020458
 800da9c:	40020470 	.word	0x40020470
 800daa0:	40020488 	.word	0x40020488
 800daa4:	400204a0 	.word	0x400204a0
 800daa8:	400204b8 	.word	0x400204b8
 800daac:	58025408 	.word	0x58025408
 800dab0:	5802541c 	.word	0x5802541c
 800dab4:	58025430 	.word	0x58025430
 800dab8:	58025444 	.word	0x58025444
 800dabc:	58025458 	.word	0x58025458
 800dac0:	5802546c 	.word	0x5802546c
 800dac4:	58025480 	.word	0x58025480
 800dac8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	68ba      	ldr	r2, [r7, #8]
 800dad2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	60da      	str	r2, [r3, #12]
}
 800dadc:	e04d      	b.n	800db7a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	4a29      	ldr	r2, [pc, #164]	@ (800db88 <DMA_SetConfig+0x338>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d022      	beq.n	800db2e <DMA_SetConfig+0x2de>
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	4a27      	ldr	r2, [pc, #156]	@ (800db8c <DMA_SetConfig+0x33c>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d01d      	beq.n	800db2e <DMA_SetConfig+0x2de>
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a26      	ldr	r2, [pc, #152]	@ (800db90 <DMA_SetConfig+0x340>)
 800daf8:	4293      	cmp	r3, r2
 800dafa:	d018      	beq.n	800db2e <DMA_SetConfig+0x2de>
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a24      	ldr	r2, [pc, #144]	@ (800db94 <DMA_SetConfig+0x344>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d013      	beq.n	800db2e <DMA_SetConfig+0x2de>
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a23      	ldr	r2, [pc, #140]	@ (800db98 <DMA_SetConfig+0x348>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d00e      	beq.n	800db2e <DMA_SetConfig+0x2de>
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4a21      	ldr	r2, [pc, #132]	@ (800db9c <DMA_SetConfig+0x34c>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d009      	beq.n	800db2e <DMA_SetConfig+0x2de>
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	4a20      	ldr	r2, [pc, #128]	@ (800dba0 <DMA_SetConfig+0x350>)
 800db20:	4293      	cmp	r3, r2
 800db22:	d004      	beq.n	800db2e <DMA_SetConfig+0x2de>
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4a1e      	ldr	r2, [pc, #120]	@ (800dba4 <DMA_SetConfig+0x354>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d101      	bne.n	800db32 <DMA_SetConfig+0x2e2>
 800db2e:	2301      	movs	r3, #1
 800db30:	e000      	b.n	800db34 <DMA_SetConfig+0x2e4>
 800db32:	2300      	movs	r3, #0
 800db34:	2b00      	cmp	r3, #0
 800db36:	d020      	beq.n	800db7a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db3c:	f003 031f 	and.w	r3, r3, #31
 800db40:	2201      	movs	r2, #1
 800db42:	409a      	lsls	r2, r3
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	683a      	ldr	r2, [r7, #0]
 800db4e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	2b40      	cmp	r3, #64	@ 0x40
 800db56:	d108      	bne.n	800db6a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	68ba      	ldr	r2, [r7, #8]
 800db66:	60da      	str	r2, [r3, #12]
}
 800db68:	e007      	b.n	800db7a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	68ba      	ldr	r2, [r7, #8]
 800db70:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	60da      	str	r2, [r3, #12]
}
 800db7a:	bf00      	nop
 800db7c:	371c      	adds	r7, #28
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr
 800db86:	bf00      	nop
 800db88:	58025408 	.word	0x58025408
 800db8c:	5802541c 	.word	0x5802541c
 800db90:	58025430 	.word	0x58025430
 800db94:	58025444 	.word	0x58025444
 800db98:	58025458 	.word	0x58025458
 800db9c:	5802546c 	.word	0x5802546c
 800dba0:	58025480 	.word	0x58025480
 800dba4:	58025494 	.word	0x58025494

0800dba8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b085      	sub	sp, #20
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4a42      	ldr	r2, [pc, #264]	@ (800dcc0 <DMA_CalcBaseAndBitshift+0x118>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d04a      	beq.n	800dc50 <DMA_CalcBaseAndBitshift+0xa8>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4a41      	ldr	r2, [pc, #260]	@ (800dcc4 <DMA_CalcBaseAndBitshift+0x11c>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d045      	beq.n	800dc50 <DMA_CalcBaseAndBitshift+0xa8>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4a3f      	ldr	r2, [pc, #252]	@ (800dcc8 <DMA_CalcBaseAndBitshift+0x120>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d040      	beq.n	800dc50 <DMA_CalcBaseAndBitshift+0xa8>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4a3e      	ldr	r2, [pc, #248]	@ (800dccc <DMA_CalcBaseAndBitshift+0x124>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d03b      	beq.n	800dc50 <DMA_CalcBaseAndBitshift+0xa8>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a3c      	ldr	r2, [pc, #240]	@ (800dcd0 <DMA_CalcBaseAndBitshift+0x128>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d036      	beq.n	800dc50 <DMA_CalcBaseAndBitshift+0xa8>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4a3b      	ldr	r2, [pc, #236]	@ (800dcd4 <DMA_CalcBaseAndBitshift+0x12c>)
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	d031      	beq.n	800dc50 <DMA_CalcBaseAndBitshift+0xa8>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4a39      	ldr	r2, [pc, #228]	@ (800dcd8 <DMA_CalcBaseAndBitshift+0x130>)
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d02c      	beq.n	800dc50 <DMA_CalcBaseAndBitshift+0xa8>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4a38      	ldr	r2, [pc, #224]	@ (800dcdc <DMA_CalcBaseAndBitshift+0x134>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d027      	beq.n	800dc50 <DMA_CalcBaseAndBitshift+0xa8>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	4a36      	ldr	r2, [pc, #216]	@ (800dce0 <DMA_CalcBaseAndBitshift+0x138>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d022      	beq.n	800dc50 <DMA_CalcBaseAndBitshift+0xa8>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	4a35      	ldr	r2, [pc, #212]	@ (800dce4 <DMA_CalcBaseAndBitshift+0x13c>)
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d01d      	beq.n	800dc50 <DMA_CalcBaseAndBitshift+0xa8>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	4a33      	ldr	r2, [pc, #204]	@ (800dce8 <DMA_CalcBaseAndBitshift+0x140>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d018      	beq.n	800dc50 <DMA_CalcBaseAndBitshift+0xa8>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	4a32      	ldr	r2, [pc, #200]	@ (800dcec <DMA_CalcBaseAndBitshift+0x144>)
 800dc24:	4293      	cmp	r3, r2
 800dc26:	d013      	beq.n	800dc50 <DMA_CalcBaseAndBitshift+0xa8>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4a30      	ldr	r2, [pc, #192]	@ (800dcf0 <DMA_CalcBaseAndBitshift+0x148>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d00e      	beq.n	800dc50 <DMA_CalcBaseAndBitshift+0xa8>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4a2f      	ldr	r2, [pc, #188]	@ (800dcf4 <DMA_CalcBaseAndBitshift+0x14c>)
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d009      	beq.n	800dc50 <DMA_CalcBaseAndBitshift+0xa8>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a2d      	ldr	r2, [pc, #180]	@ (800dcf8 <DMA_CalcBaseAndBitshift+0x150>)
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d004      	beq.n	800dc50 <DMA_CalcBaseAndBitshift+0xa8>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4a2c      	ldr	r2, [pc, #176]	@ (800dcfc <DMA_CalcBaseAndBitshift+0x154>)
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d101      	bne.n	800dc54 <DMA_CalcBaseAndBitshift+0xac>
 800dc50:	2301      	movs	r3, #1
 800dc52:	e000      	b.n	800dc56 <DMA_CalcBaseAndBitshift+0xae>
 800dc54:	2300      	movs	r3, #0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d024      	beq.n	800dca4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	3b10      	subs	r3, #16
 800dc62:	4a27      	ldr	r2, [pc, #156]	@ (800dd00 <DMA_CalcBaseAndBitshift+0x158>)
 800dc64:	fba2 2303 	umull	r2, r3, r2, r3
 800dc68:	091b      	lsrs	r3, r3, #4
 800dc6a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f003 0307 	and.w	r3, r3, #7
 800dc72:	4a24      	ldr	r2, [pc, #144]	@ (800dd04 <DMA_CalcBaseAndBitshift+0x15c>)
 800dc74:	5cd3      	ldrb	r3, [r2, r3]
 800dc76:	461a      	mov	r2, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2b03      	cmp	r3, #3
 800dc80:	d908      	bls.n	800dc94 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	461a      	mov	r2, r3
 800dc88:	4b1f      	ldr	r3, [pc, #124]	@ (800dd08 <DMA_CalcBaseAndBitshift+0x160>)
 800dc8a:	4013      	ands	r3, r2
 800dc8c:	1d1a      	adds	r2, r3, #4
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	659a      	str	r2, [r3, #88]	@ 0x58
 800dc92:	e00d      	b.n	800dcb0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	461a      	mov	r2, r3
 800dc9a:	4b1b      	ldr	r3, [pc, #108]	@ (800dd08 <DMA_CalcBaseAndBitshift+0x160>)
 800dc9c:	4013      	ands	r3, r2
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	6593      	str	r3, [r2, #88]	@ 0x58
 800dca2:	e005      	b.n	800dcb0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3714      	adds	r7, #20
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr
 800dcc0:	40020010 	.word	0x40020010
 800dcc4:	40020028 	.word	0x40020028
 800dcc8:	40020040 	.word	0x40020040
 800dccc:	40020058 	.word	0x40020058
 800dcd0:	40020070 	.word	0x40020070
 800dcd4:	40020088 	.word	0x40020088
 800dcd8:	400200a0 	.word	0x400200a0
 800dcdc:	400200b8 	.word	0x400200b8
 800dce0:	40020410 	.word	0x40020410
 800dce4:	40020428 	.word	0x40020428
 800dce8:	40020440 	.word	0x40020440
 800dcec:	40020458 	.word	0x40020458
 800dcf0:	40020470 	.word	0x40020470
 800dcf4:	40020488 	.word	0x40020488
 800dcf8:	400204a0 	.word	0x400204a0
 800dcfc:	400204b8 	.word	0x400204b8
 800dd00:	aaaaaaab 	.word	0xaaaaaaab
 800dd04:	0801e76c 	.word	0x0801e76c
 800dd08:	fffffc00 	.word	0xfffffc00

0800dd0c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b085      	sub	sp, #20
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd14:	2300      	movs	r3, #0
 800dd16:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	699b      	ldr	r3, [r3, #24]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d120      	bne.n	800dd62 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd24:	2b03      	cmp	r3, #3
 800dd26:	d858      	bhi.n	800ddda <DMA_CheckFifoParam+0xce>
 800dd28:	a201      	add	r2, pc, #4	@ (adr r2, 800dd30 <DMA_CheckFifoParam+0x24>)
 800dd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd2e:	bf00      	nop
 800dd30:	0800dd41 	.word	0x0800dd41
 800dd34:	0800dd53 	.word	0x0800dd53
 800dd38:	0800dd41 	.word	0x0800dd41
 800dd3c:	0800dddb 	.word	0x0800dddb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d048      	beq.n	800ddde <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800dd50:	e045      	b.n	800ddde <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd56:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800dd5a:	d142      	bne.n	800dde2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800dd60:	e03f      	b.n	800dde2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	699b      	ldr	r3, [r3, #24]
 800dd66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dd6a:	d123      	bne.n	800ddb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd70:	2b03      	cmp	r3, #3
 800dd72:	d838      	bhi.n	800dde6 <DMA_CheckFifoParam+0xda>
 800dd74:	a201      	add	r2, pc, #4	@ (adr r2, 800dd7c <DMA_CheckFifoParam+0x70>)
 800dd76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd7a:	bf00      	nop
 800dd7c:	0800dd8d 	.word	0x0800dd8d
 800dd80:	0800dd93 	.word	0x0800dd93
 800dd84:	0800dd8d 	.word	0x0800dd8d
 800dd88:	0800dda5 	.word	0x0800dda5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	73fb      	strb	r3, [r7, #15]
        break;
 800dd90:	e030      	b.n	800ddf4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d025      	beq.n	800ddea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800dd9e:	2301      	movs	r3, #1
 800dda0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800dda2:	e022      	b.n	800ddea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dda8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800ddac:	d11f      	bne.n	800ddee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ddb2:	e01c      	b.n	800ddee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddb8:	2b02      	cmp	r3, #2
 800ddba:	d902      	bls.n	800ddc2 <DMA_CheckFifoParam+0xb6>
 800ddbc:	2b03      	cmp	r3, #3
 800ddbe:	d003      	beq.n	800ddc8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800ddc0:	e018      	b.n	800ddf4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	73fb      	strb	r3, [r7, #15]
        break;
 800ddc6:	e015      	b.n	800ddf4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d00e      	beq.n	800ddf2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	73fb      	strb	r3, [r7, #15]
    break;
 800ddd8:	e00b      	b.n	800ddf2 <DMA_CheckFifoParam+0xe6>
        break;
 800ddda:	bf00      	nop
 800dddc:	e00a      	b.n	800ddf4 <DMA_CheckFifoParam+0xe8>
        break;
 800ddde:	bf00      	nop
 800dde0:	e008      	b.n	800ddf4 <DMA_CheckFifoParam+0xe8>
        break;
 800dde2:	bf00      	nop
 800dde4:	e006      	b.n	800ddf4 <DMA_CheckFifoParam+0xe8>
        break;
 800dde6:	bf00      	nop
 800dde8:	e004      	b.n	800ddf4 <DMA_CheckFifoParam+0xe8>
        break;
 800ddea:	bf00      	nop
 800ddec:	e002      	b.n	800ddf4 <DMA_CheckFifoParam+0xe8>
        break;
 800ddee:	bf00      	nop
 800ddf0:	e000      	b.n	800ddf4 <DMA_CheckFifoParam+0xe8>
    break;
 800ddf2:	bf00      	nop
    }
  }

  return status;
 800ddf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3714      	adds	r7, #20
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr
 800de02:	bf00      	nop

0800de04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800de04:	b480      	push	{r7}
 800de06:	b085      	sub	sp, #20
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	4a38      	ldr	r2, [pc, #224]	@ (800def8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d022      	beq.n	800de62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4a36      	ldr	r2, [pc, #216]	@ (800defc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d01d      	beq.n	800de62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4a35      	ldr	r2, [pc, #212]	@ (800df00 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d018      	beq.n	800de62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4a33      	ldr	r2, [pc, #204]	@ (800df04 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d013      	beq.n	800de62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4a32      	ldr	r2, [pc, #200]	@ (800df08 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d00e      	beq.n	800de62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	4a30      	ldr	r2, [pc, #192]	@ (800df0c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d009      	beq.n	800de62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	4a2f      	ldr	r2, [pc, #188]	@ (800df10 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800de54:	4293      	cmp	r3, r2
 800de56:	d004      	beq.n	800de62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4a2d      	ldr	r2, [pc, #180]	@ (800df14 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800de5e:	4293      	cmp	r3, r2
 800de60:	d101      	bne.n	800de66 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800de62:	2301      	movs	r3, #1
 800de64:	e000      	b.n	800de68 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800de66:	2300      	movs	r3, #0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d01a      	beq.n	800dea2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	b2db      	uxtb	r3, r3
 800de72:	3b08      	subs	r3, #8
 800de74:	4a28      	ldr	r2, [pc, #160]	@ (800df18 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800de76:	fba2 2303 	umull	r2, r3, r2, r3
 800de7a:	091b      	lsrs	r3, r3, #4
 800de7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	4b26      	ldr	r3, [pc, #152]	@ (800df1c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800de82:	4413      	add	r3, r2
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	461a      	mov	r2, r3
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	4a24      	ldr	r2, [pc, #144]	@ (800df20 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800de90:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f003 031f 	and.w	r3, r3, #31
 800de98:	2201      	movs	r2, #1
 800de9a:	409a      	lsls	r2, r3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800dea0:	e024      	b.n	800deec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	3b10      	subs	r3, #16
 800deaa:	4a1e      	ldr	r2, [pc, #120]	@ (800df24 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800deac:	fba2 2303 	umull	r2, r3, r2, r3
 800deb0:	091b      	lsrs	r3, r3, #4
 800deb2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	4a1c      	ldr	r2, [pc, #112]	@ (800df28 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d806      	bhi.n	800deca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	4a1b      	ldr	r2, [pc, #108]	@ (800df2c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d902      	bls.n	800deca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	3308      	adds	r3, #8
 800dec8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	4b18      	ldr	r3, [pc, #96]	@ (800df30 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800dece:	4413      	add	r3, r2
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	461a      	mov	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	4a16      	ldr	r2, [pc, #88]	@ (800df34 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800dedc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f003 031f 	and.w	r3, r3, #31
 800dee4:	2201      	movs	r2, #1
 800dee6:	409a      	lsls	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800deec:	bf00      	nop
 800deee:	3714      	adds	r7, #20
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr
 800def8:	58025408 	.word	0x58025408
 800defc:	5802541c 	.word	0x5802541c
 800df00:	58025430 	.word	0x58025430
 800df04:	58025444 	.word	0x58025444
 800df08:	58025458 	.word	0x58025458
 800df0c:	5802546c 	.word	0x5802546c
 800df10:	58025480 	.word	0x58025480
 800df14:	58025494 	.word	0x58025494
 800df18:	cccccccd 	.word	0xcccccccd
 800df1c:	16009600 	.word	0x16009600
 800df20:	58025880 	.word	0x58025880
 800df24:	aaaaaaab 	.word	0xaaaaaaab
 800df28:	400204b8 	.word	0x400204b8
 800df2c:	4002040f 	.word	0x4002040f
 800df30:	10008200 	.word	0x10008200
 800df34:	40020880 	.word	0x40020880

0800df38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800df38:	b480      	push	{r7}
 800df3a:	b085      	sub	sp, #20
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	b2db      	uxtb	r3, r3
 800df46:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d04a      	beq.n	800dfe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2b08      	cmp	r3, #8
 800df52:	d847      	bhi.n	800dfe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a25      	ldr	r2, [pc, #148]	@ (800dff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d022      	beq.n	800dfa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a24      	ldr	r2, [pc, #144]	@ (800dff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d01d      	beq.n	800dfa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4a22      	ldr	r2, [pc, #136]	@ (800dff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d018      	beq.n	800dfa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	4a21      	ldr	r2, [pc, #132]	@ (800dffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d013      	beq.n	800dfa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a1f      	ldr	r2, [pc, #124]	@ (800e000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d00e      	beq.n	800dfa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4a1e      	ldr	r2, [pc, #120]	@ (800e004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d009      	beq.n	800dfa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4a1c      	ldr	r2, [pc, #112]	@ (800e008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800df96:	4293      	cmp	r3, r2
 800df98:	d004      	beq.n	800dfa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	4a1b      	ldr	r2, [pc, #108]	@ (800e00c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d101      	bne.n	800dfa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	e000      	b.n	800dfaa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d00a      	beq.n	800dfc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	4b17      	ldr	r3, [pc, #92]	@ (800e010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800dfb2:	4413      	add	r3, r2
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	4a15      	ldr	r2, [pc, #84]	@ (800e014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800dfc0:	671a      	str	r2, [r3, #112]	@ 0x70
 800dfc2:	e009      	b.n	800dfd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800dfc4:	68fa      	ldr	r2, [r7, #12]
 800dfc6:	4b14      	ldr	r3, [pc, #80]	@ (800e018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800dfc8:	4413      	add	r3, r2
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	461a      	mov	r2, r3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	4a11      	ldr	r2, [pc, #68]	@ (800e01c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800dfd6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	2201      	movs	r2, #1
 800dfde:	409a      	lsls	r2, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800dfe4:	bf00      	nop
 800dfe6:	3714      	adds	r7, #20
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfee:	4770      	bx	lr
 800dff0:	58025408 	.word	0x58025408
 800dff4:	5802541c 	.word	0x5802541c
 800dff8:	58025430 	.word	0x58025430
 800dffc:	58025444 	.word	0x58025444
 800e000:	58025458 	.word	0x58025458
 800e004:	5802546c 	.word	0x5802546c
 800e008:	58025480 	.word	0x58025480
 800e00c:	58025494 	.word	0x58025494
 800e010:	1600963f 	.word	0x1600963f
 800e014:	58025940 	.word	0x58025940
 800e018:	1000823f 	.word	0x1000823f
 800e01c:	40020940 	.word	0x40020940

0800e020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e020:	b480      	push	{r7}
 800e022:	b089      	sub	sp, #36	@ 0x24
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e02a:	2300      	movs	r3, #0
 800e02c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800e02e:	4b86      	ldr	r3, [pc, #536]	@ (800e248 <HAL_GPIO_Init+0x228>)
 800e030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e032:	e18c      	b.n	800e34e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	2101      	movs	r1, #1
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	fa01 f303 	lsl.w	r3, r1, r3
 800e040:	4013      	ands	r3, r2
 800e042:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	2b00      	cmp	r3, #0
 800e048:	f000 817e 	beq.w	800e348 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	f003 0303 	and.w	r3, r3, #3
 800e054:	2b01      	cmp	r3, #1
 800e056:	d005      	beq.n	800e064 <HAL_GPIO_Init+0x44>
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	f003 0303 	and.w	r3, r3, #3
 800e060:	2b02      	cmp	r3, #2
 800e062:	d130      	bne.n	800e0c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	689b      	ldr	r3, [r3, #8]
 800e068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	005b      	lsls	r3, r3, #1
 800e06e:	2203      	movs	r2, #3
 800e070:	fa02 f303 	lsl.w	r3, r2, r3
 800e074:	43db      	mvns	r3, r3
 800e076:	69ba      	ldr	r2, [r7, #24]
 800e078:	4013      	ands	r3, r2
 800e07a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	68da      	ldr	r2, [r3, #12]
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	005b      	lsls	r3, r3, #1
 800e084:	fa02 f303 	lsl.w	r3, r2, r3
 800e088:	69ba      	ldr	r2, [r7, #24]
 800e08a:	4313      	orrs	r3, r2
 800e08c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	69ba      	ldr	r2, [r7, #24]
 800e092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e09a:	2201      	movs	r2, #1
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	fa02 f303 	lsl.w	r3, r2, r3
 800e0a2:	43db      	mvns	r3, r3
 800e0a4:	69ba      	ldr	r2, [r7, #24]
 800e0a6:	4013      	ands	r3, r2
 800e0a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	091b      	lsrs	r3, r3, #4
 800e0b0:	f003 0201 	and.w	r2, r3, #1
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	fa02 f303 	lsl.w	r3, r2, r3
 800e0ba:	69ba      	ldr	r2, [r7, #24]
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	69ba      	ldr	r2, [r7, #24]
 800e0c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	f003 0303 	and.w	r3, r3, #3
 800e0ce:	2b03      	cmp	r3, #3
 800e0d0:	d017      	beq.n	800e102 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	005b      	lsls	r3, r3, #1
 800e0dc:	2203      	movs	r2, #3
 800e0de:	fa02 f303 	lsl.w	r3, r2, r3
 800e0e2:	43db      	mvns	r3, r3
 800e0e4:	69ba      	ldr	r2, [r7, #24]
 800e0e6:	4013      	ands	r3, r2
 800e0e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	689a      	ldr	r2, [r3, #8]
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	005b      	lsls	r3, r3, #1
 800e0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e0f6:	69ba      	ldr	r2, [r7, #24]
 800e0f8:	4313      	orrs	r3, r2
 800e0fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	69ba      	ldr	r2, [r7, #24]
 800e100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	f003 0303 	and.w	r3, r3, #3
 800e10a:	2b02      	cmp	r3, #2
 800e10c:	d123      	bne.n	800e156 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e10e:	69fb      	ldr	r3, [r7, #28]
 800e110:	08da      	lsrs	r2, r3, #3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	3208      	adds	r2, #8
 800e116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e11a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	f003 0307 	and.w	r3, r3, #7
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	220f      	movs	r2, #15
 800e126:	fa02 f303 	lsl.w	r3, r2, r3
 800e12a:	43db      	mvns	r3, r3
 800e12c:	69ba      	ldr	r2, [r7, #24]
 800e12e:	4013      	ands	r3, r2
 800e130:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	691a      	ldr	r2, [r3, #16]
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	f003 0307 	and.w	r3, r3, #7
 800e13c:	009b      	lsls	r3, r3, #2
 800e13e:	fa02 f303 	lsl.w	r3, r2, r3
 800e142:	69ba      	ldr	r2, [r7, #24]
 800e144:	4313      	orrs	r3, r2
 800e146:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	08da      	lsrs	r2, r3, #3
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	3208      	adds	r2, #8
 800e150:	69b9      	ldr	r1, [r7, #24]
 800e152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e15c:	69fb      	ldr	r3, [r7, #28]
 800e15e:	005b      	lsls	r3, r3, #1
 800e160:	2203      	movs	r2, #3
 800e162:	fa02 f303 	lsl.w	r3, r2, r3
 800e166:	43db      	mvns	r3, r3
 800e168:	69ba      	ldr	r2, [r7, #24]
 800e16a:	4013      	ands	r3, r2
 800e16c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	f003 0203 	and.w	r2, r3, #3
 800e176:	69fb      	ldr	r3, [r7, #28]
 800e178:	005b      	lsls	r3, r3, #1
 800e17a:	fa02 f303 	lsl.w	r3, r2, r3
 800e17e:	69ba      	ldr	r2, [r7, #24]
 800e180:	4313      	orrs	r3, r2
 800e182:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	69ba      	ldr	r2, [r7, #24]
 800e188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e192:	2b00      	cmp	r3, #0
 800e194:	f000 80d8 	beq.w	800e348 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e198:	4b2c      	ldr	r3, [pc, #176]	@ (800e24c <HAL_GPIO_Init+0x22c>)
 800e19a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e19e:	4a2b      	ldr	r2, [pc, #172]	@ (800e24c <HAL_GPIO_Init+0x22c>)
 800e1a0:	f043 0302 	orr.w	r3, r3, #2
 800e1a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800e1a8:	4b28      	ldr	r3, [pc, #160]	@ (800e24c <HAL_GPIO_Init+0x22c>)
 800e1aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e1ae:	f003 0302 	and.w	r3, r3, #2
 800e1b2:	60fb      	str	r3, [r7, #12]
 800e1b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e1b6:	4a26      	ldr	r2, [pc, #152]	@ (800e250 <HAL_GPIO_Init+0x230>)
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	089b      	lsrs	r3, r3, #2
 800e1bc:	3302      	adds	r3, #2
 800e1be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	f003 0303 	and.w	r3, r3, #3
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	220f      	movs	r2, #15
 800e1ce:	fa02 f303 	lsl.w	r3, r2, r3
 800e1d2:	43db      	mvns	r3, r3
 800e1d4:	69ba      	ldr	r2, [r7, #24]
 800e1d6:	4013      	ands	r3, r2
 800e1d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	4a1d      	ldr	r2, [pc, #116]	@ (800e254 <HAL_GPIO_Init+0x234>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d04a      	beq.n	800e278 <HAL_GPIO_Init+0x258>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	4a1c      	ldr	r2, [pc, #112]	@ (800e258 <HAL_GPIO_Init+0x238>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d02b      	beq.n	800e242 <HAL_GPIO_Init+0x222>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	4a1b      	ldr	r2, [pc, #108]	@ (800e25c <HAL_GPIO_Init+0x23c>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d025      	beq.n	800e23e <HAL_GPIO_Init+0x21e>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	4a1a      	ldr	r2, [pc, #104]	@ (800e260 <HAL_GPIO_Init+0x240>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d01f      	beq.n	800e23a <HAL_GPIO_Init+0x21a>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	4a19      	ldr	r2, [pc, #100]	@ (800e264 <HAL_GPIO_Init+0x244>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d019      	beq.n	800e236 <HAL_GPIO_Init+0x216>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	4a18      	ldr	r2, [pc, #96]	@ (800e268 <HAL_GPIO_Init+0x248>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d013      	beq.n	800e232 <HAL_GPIO_Init+0x212>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	4a17      	ldr	r2, [pc, #92]	@ (800e26c <HAL_GPIO_Init+0x24c>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d00d      	beq.n	800e22e <HAL_GPIO_Init+0x20e>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	4a16      	ldr	r2, [pc, #88]	@ (800e270 <HAL_GPIO_Init+0x250>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d007      	beq.n	800e22a <HAL_GPIO_Init+0x20a>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	4a15      	ldr	r2, [pc, #84]	@ (800e274 <HAL_GPIO_Init+0x254>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d101      	bne.n	800e226 <HAL_GPIO_Init+0x206>
 800e222:	2309      	movs	r3, #9
 800e224:	e029      	b.n	800e27a <HAL_GPIO_Init+0x25a>
 800e226:	230a      	movs	r3, #10
 800e228:	e027      	b.n	800e27a <HAL_GPIO_Init+0x25a>
 800e22a:	2307      	movs	r3, #7
 800e22c:	e025      	b.n	800e27a <HAL_GPIO_Init+0x25a>
 800e22e:	2306      	movs	r3, #6
 800e230:	e023      	b.n	800e27a <HAL_GPIO_Init+0x25a>
 800e232:	2305      	movs	r3, #5
 800e234:	e021      	b.n	800e27a <HAL_GPIO_Init+0x25a>
 800e236:	2304      	movs	r3, #4
 800e238:	e01f      	b.n	800e27a <HAL_GPIO_Init+0x25a>
 800e23a:	2303      	movs	r3, #3
 800e23c:	e01d      	b.n	800e27a <HAL_GPIO_Init+0x25a>
 800e23e:	2302      	movs	r3, #2
 800e240:	e01b      	b.n	800e27a <HAL_GPIO_Init+0x25a>
 800e242:	2301      	movs	r3, #1
 800e244:	e019      	b.n	800e27a <HAL_GPIO_Init+0x25a>
 800e246:	bf00      	nop
 800e248:	58000080 	.word	0x58000080
 800e24c:	58024400 	.word	0x58024400
 800e250:	58000400 	.word	0x58000400
 800e254:	58020000 	.word	0x58020000
 800e258:	58020400 	.word	0x58020400
 800e25c:	58020800 	.word	0x58020800
 800e260:	58020c00 	.word	0x58020c00
 800e264:	58021000 	.word	0x58021000
 800e268:	58021400 	.word	0x58021400
 800e26c:	58021800 	.word	0x58021800
 800e270:	58021c00 	.word	0x58021c00
 800e274:	58022400 	.word	0x58022400
 800e278:	2300      	movs	r3, #0
 800e27a:	69fa      	ldr	r2, [r7, #28]
 800e27c:	f002 0203 	and.w	r2, r2, #3
 800e280:	0092      	lsls	r2, r2, #2
 800e282:	4093      	lsls	r3, r2
 800e284:	69ba      	ldr	r2, [r7, #24]
 800e286:	4313      	orrs	r3, r2
 800e288:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e28a:	4938      	ldr	r1, [pc, #224]	@ (800e36c <HAL_GPIO_Init+0x34c>)
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	089b      	lsrs	r3, r3, #2
 800e290:	3302      	adds	r3, #2
 800e292:	69ba      	ldr	r2, [r7, #24]
 800e294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	43db      	mvns	r3, r3
 800e2a4:	69ba      	ldr	r2, [r7, #24]
 800e2a6:	4013      	ands	r3, r2
 800e2a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d003      	beq.n	800e2be <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800e2b6:	69ba      	ldr	r2, [r7, #24]
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800e2be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e2c2:	69bb      	ldr	r3, [r7, #24]
 800e2c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e2c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	43db      	mvns	r3, r3
 800e2d2:	69ba      	ldr	r2, [r7, #24]
 800e2d4:	4013      	ands	r3, r2
 800e2d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d003      	beq.n	800e2ec <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800e2e4:	69ba      	ldr	r2, [r7, #24]
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800e2ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	43db      	mvns	r3, r3
 800e2fe:	69ba      	ldr	r2, [r7, #24]
 800e300:	4013      	ands	r3, r2
 800e302:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d003      	beq.n	800e318 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800e310:	69ba      	ldr	r2, [r7, #24]
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	4313      	orrs	r3, r2
 800e316:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	69ba      	ldr	r2, [r7, #24]
 800e31c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	43db      	mvns	r3, r3
 800e328:	69ba      	ldr	r2, [r7, #24]
 800e32a:	4013      	ands	r3, r2
 800e32c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	685b      	ldr	r3, [r3, #4]
 800e332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e336:	2b00      	cmp	r3, #0
 800e338:	d003      	beq.n	800e342 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800e33a:	69ba      	ldr	r2, [r7, #24]
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	4313      	orrs	r3, r2
 800e340:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	69ba      	ldr	r2, [r7, #24]
 800e346:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800e348:	69fb      	ldr	r3, [r7, #28]
 800e34a:	3301      	adds	r3, #1
 800e34c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	69fb      	ldr	r3, [r7, #28]
 800e354:	fa22 f303 	lsr.w	r3, r2, r3
 800e358:	2b00      	cmp	r3, #0
 800e35a:	f47f ae6b 	bne.w	800e034 <HAL_GPIO_Init+0x14>
  }
}
 800e35e:	bf00      	nop
 800e360:	bf00      	nop
 800e362:	3724      	adds	r7, #36	@ 0x24
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr
 800e36c:	58000400 	.word	0x58000400

0800e370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	460b      	mov	r3, r1
 800e37a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	691a      	ldr	r2, [r3, #16]
 800e380:	887b      	ldrh	r3, [r7, #2]
 800e382:	4013      	ands	r3, r2
 800e384:	2b00      	cmp	r3, #0
 800e386:	d002      	beq.n	800e38e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e388:	2301      	movs	r3, #1
 800e38a:	73fb      	strb	r3, [r7, #15]
 800e38c:	e001      	b.n	800e392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e38e:	2300      	movs	r3, #0
 800e390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e392:	7bfb      	ldrb	r3, [r7, #15]
}
 800e394:	4618      	mov	r0, r3
 800e396:	3714      	adds	r7, #20
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr

0800e3a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b083      	sub	sp, #12
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	807b      	strh	r3, [r7, #2]
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e3b0:	787b      	ldrb	r3, [r7, #1]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d003      	beq.n	800e3be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e3b6:	887a      	ldrh	r2, [r7, #2]
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800e3bc:	e003      	b.n	800e3c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e3be:	887b      	ldrh	r3, [r7, #2]
 800e3c0:	041a      	lsls	r2, r3, #16
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	619a      	str	r2, [r3, #24]
}
 800e3c6:	bf00      	nop
 800e3c8:	370c      	adds	r7, #12
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr

0800e3d2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b082      	sub	sp, #8
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	4603      	mov	r3, r0
 800e3da:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800e3dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e3e4:	88fb      	ldrh	r3, [r7, #6]
 800e3e6:	4013      	ands	r3, r2
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d008      	beq.n	800e3fe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e3ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e3f0:	88fb      	ldrh	r3, [r7, #6]
 800e3f2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e3f6:	88fb      	ldrh	r3, [r7, #6]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7f7 fd9f 	bl	8005f3c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800e3fe:	bf00      	nop
 800e400:	3708      	adds	r7, #8
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
	...

0800e408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d101      	bne.n	800e41a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e416:	2301      	movs	r3, #1
 800e418:	e08b      	b.n	800e532 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e420:	b2db      	uxtb	r3, r3
 800e422:	2b00      	cmp	r3, #0
 800e424:	d106      	bne.n	800e434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2200      	movs	r2, #0
 800e42a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f7f6 fc26 	bl	8004c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2224      	movs	r2, #36	@ 0x24
 800e438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	681a      	ldr	r2, [r3, #0]
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f022 0201 	bic.w	r2, r2, #1
 800e44a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	685a      	ldr	r2, [r3, #4]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e458:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	689a      	ldr	r2, [r3, #8]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e468:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	68db      	ldr	r3, [r3, #12]
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d107      	bne.n	800e482 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	689a      	ldr	r2, [r3, #8]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e47e:	609a      	str	r2, [r3, #8]
 800e480:	e006      	b.n	800e490 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	689a      	ldr	r2, [r3, #8]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e48e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	2b02      	cmp	r3, #2
 800e496:	d108      	bne.n	800e4aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	685a      	ldr	r2, [r3, #4]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e4a6:	605a      	str	r2, [r3, #4]
 800e4a8:	e007      	b.n	800e4ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	685a      	ldr	r2, [r3, #4]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e4b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	6859      	ldr	r1, [r3, #4]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	4b1d      	ldr	r3, [pc, #116]	@ (800e53c <HAL_I2C_Init+0x134>)
 800e4c6:	430b      	orrs	r3, r1
 800e4c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	68da      	ldr	r2, [r3, #12]
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e4d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	691a      	ldr	r2, [r3, #16]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	695b      	ldr	r3, [r3, #20]
 800e4e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	699b      	ldr	r3, [r3, #24]
 800e4ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	430a      	orrs	r2, r1
 800e4f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	69d9      	ldr	r1, [r3, #28]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6a1a      	ldr	r2, [r3, #32]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	430a      	orrs	r2, r1
 800e502:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f042 0201 	orr.w	r2, r2, #1
 800e512:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2200      	movs	r2, #0
 800e518:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2220      	movs	r2, #32
 800e51e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2200      	movs	r2, #0
 800e526:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2200      	movs	r2, #0
 800e52c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e530:	2300      	movs	r3, #0
}
 800e532:	4618      	mov	r0, r3
 800e534:	3708      	adds	r7, #8
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	02008000 	.word	0x02008000

0800e540 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b088      	sub	sp, #32
 800e544:	af02      	add	r7, sp, #8
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	4608      	mov	r0, r1
 800e54a:	4611      	mov	r1, r2
 800e54c:	461a      	mov	r2, r3
 800e54e:	4603      	mov	r3, r0
 800e550:	817b      	strh	r3, [r7, #10]
 800e552:	460b      	mov	r3, r1
 800e554:	813b      	strh	r3, [r7, #8]
 800e556:	4613      	mov	r3, r2
 800e558:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e560:	b2db      	uxtb	r3, r3
 800e562:	2b20      	cmp	r3, #32
 800e564:	f040 80f9 	bne.w	800e75a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e568:	6a3b      	ldr	r3, [r7, #32]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d002      	beq.n	800e574 <HAL_I2C_Mem_Write+0x34>
 800e56e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e570:	2b00      	cmp	r3, #0
 800e572:	d105      	bne.n	800e580 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e57a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e57c:	2301      	movs	r3, #1
 800e57e:	e0ed      	b.n	800e75c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e586:	2b01      	cmp	r3, #1
 800e588:	d101      	bne.n	800e58e <HAL_I2C_Mem_Write+0x4e>
 800e58a:	2302      	movs	r3, #2
 800e58c:	e0e6      	b.n	800e75c <HAL_I2C_Mem_Write+0x21c>
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2201      	movs	r2, #1
 800e592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e596:	f7fa fd99 	bl	80090cc <HAL_GetTick>
 800e59a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	9300      	str	r3, [sp, #0]
 800e5a0:	2319      	movs	r3, #25
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e5a8:	68f8      	ldr	r0, [r7, #12]
 800e5aa:	f002 f818 	bl	80105de <I2C_WaitOnFlagUntilTimeout>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d001      	beq.n	800e5b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	e0d1      	b.n	800e75c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	2221      	movs	r2, #33	@ 0x21
 800e5bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	2240      	movs	r2, #64	@ 0x40
 800e5c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	6a3a      	ldr	r2, [r7, #32]
 800e5d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e5d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e5e0:	88f8      	ldrh	r0, [r7, #6]
 800e5e2:	893a      	ldrh	r2, [r7, #8]
 800e5e4:	8979      	ldrh	r1, [r7, #10]
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	9301      	str	r3, [sp, #4]
 800e5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5ec:	9300      	str	r3, [sp, #0]
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	68f8      	ldr	r0, [r7, #12]
 800e5f2:	f001 f965 	bl	800f8c0 <I2C_RequestMemoryWrite>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d005      	beq.n	800e608 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2200      	movs	r2, #0
 800e600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e604:	2301      	movs	r3, #1
 800e606:	e0a9      	b.n	800e75c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e60c:	b29b      	uxth	r3, r3
 800e60e:	2bff      	cmp	r3, #255	@ 0xff
 800e610:	d90e      	bls.n	800e630 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	22ff      	movs	r2, #255	@ 0xff
 800e616:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e61c:	b2da      	uxtb	r2, r3
 800e61e:	8979      	ldrh	r1, [r7, #10]
 800e620:	2300      	movs	r3, #0
 800e622:	9300      	str	r3, [sp, #0]
 800e624:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e628:	68f8      	ldr	r0, [r7, #12]
 800e62a:	f002 f99b 	bl	8010964 <I2C_TransferConfig>
 800e62e:	e00f      	b.n	800e650 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e634:	b29a      	uxth	r2, r3
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e63e:	b2da      	uxtb	r2, r3
 800e640:	8979      	ldrh	r1, [r7, #10]
 800e642:	2300      	movs	r3, #0
 800e644:	9300      	str	r3, [sp, #0]
 800e646:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e64a:	68f8      	ldr	r0, [r7, #12]
 800e64c:	f002 f98a 	bl	8010964 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e650:	697a      	ldr	r2, [r7, #20]
 800e652:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	f002 f81b 	bl	8010690 <I2C_WaitOnTXISFlagUntilTimeout>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d001      	beq.n	800e664 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e660:	2301      	movs	r3, #1
 800e662:	e07b      	b.n	800e75c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e668:	781a      	ldrb	r2, [r3, #0]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e674:	1c5a      	adds	r2, r3, #1
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e67e:	b29b      	uxth	r3, r3
 800e680:	3b01      	subs	r3, #1
 800e682:	b29a      	uxth	r2, r3
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e68c:	3b01      	subs	r3, #1
 800e68e:	b29a      	uxth	r2, r3
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e698:	b29b      	uxth	r3, r3
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d034      	beq.n	800e708 <HAL_I2C_Mem_Write+0x1c8>
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d130      	bne.n	800e708 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	9300      	str	r3, [sp, #0]
 800e6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	2180      	movs	r1, #128	@ 0x80
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	f001 ff94 	bl	80105de <I2C_WaitOnFlagUntilTimeout>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d001      	beq.n	800e6c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	e04d      	b.n	800e75c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	2bff      	cmp	r3, #255	@ 0xff
 800e6c8:	d90e      	bls.n	800e6e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	22ff      	movs	r2, #255	@ 0xff
 800e6ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6d4:	b2da      	uxtb	r2, r3
 800e6d6:	8979      	ldrh	r1, [r7, #10]
 800e6d8:	2300      	movs	r3, #0
 800e6da:	9300      	str	r3, [sp, #0]
 800e6dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e6e0:	68f8      	ldr	r0, [r7, #12]
 800e6e2:	f002 f93f 	bl	8010964 <I2C_TransferConfig>
 800e6e6:	e00f      	b.n	800e708 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e6f6:	b2da      	uxtb	r2, r3
 800e6f8:	8979      	ldrh	r1, [r7, #10]
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	9300      	str	r3, [sp, #0]
 800e6fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e702:	68f8      	ldr	r0, [r7, #12]
 800e704:	f002 f92e 	bl	8010964 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d19e      	bne.n	800e650 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e712:	697a      	ldr	r2, [r7, #20]
 800e714:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e716:	68f8      	ldr	r0, [r7, #12]
 800e718:	f002 f801 	bl	801071e <I2C_WaitOnSTOPFlagUntilTimeout>
 800e71c:	4603      	mov	r3, r0
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d001      	beq.n	800e726 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e722:	2301      	movs	r3, #1
 800e724:	e01a      	b.n	800e75c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2220      	movs	r2, #32
 800e72c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	6859      	ldr	r1, [r3, #4]
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	681a      	ldr	r2, [r3, #0]
 800e738:	4b0a      	ldr	r3, [pc, #40]	@ (800e764 <HAL_I2C_Mem_Write+0x224>)
 800e73a:	400b      	ands	r3, r1
 800e73c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2220      	movs	r2, #32
 800e742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2200      	movs	r2, #0
 800e74a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2200      	movs	r2, #0
 800e752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e756:	2300      	movs	r3, #0
 800e758:	e000      	b.n	800e75c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e75a:	2302      	movs	r3, #2
  }
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3718      	adds	r7, #24
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}
 800e764:	fe00e800 	.word	0xfe00e800

0800e768 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b088      	sub	sp, #32
 800e76c:	af02      	add	r7, sp, #8
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	4608      	mov	r0, r1
 800e772:	4611      	mov	r1, r2
 800e774:	461a      	mov	r2, r3
 800e776:	4603      	mov	r3, r0
 800e778:	817b      	strh	r3, [r7, #10]
 800e77a:	460b      	mov	r3, r1
 800e77c:	813b      	strh	r3, [r7, #8]
 800e77e:	4613      	mov	r3, r2
 800e780:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e788:	b2db      	uxtb	r3, r3
 800e78a:	2b20      	cmp	r3, #32
 800e78c:	f040 80fd 	bne.w	800e98a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e790:	6a3b      	ldr	r3, [r7, #32]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d002      	beq.n	800e79c <HAL_I2C_Mem_Read+0x34>
 800e796:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d105      	bne.n	800e7a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e7a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	e0f1      	b.n	800e98c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d101      	bne.n	800e7b6 <HAL_I2C_Mem_Read+0x4e>
 800e7b2:	2302      	movs	r3, #2
 800e7b4:	e0ea      	b.n	800e98c <HAL_I2C_Mem_Read+0x224>
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e7be:	f7fa fc85 	bl	80090cc <HAL_GetTick>
 800e7c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	9300      	str	r3, [sp, #0]
 800e7c8:	2319      	movs	r3, #25
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e7d0:	68f8      	ldr	r0, [r7, #12]
 800e7d2:	f001 ff04 	bl	80105de <I2C_WaitOnFlagUntilTimeout>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d001      	beq.n	800e7e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	e0d5      	b.n	800e98c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2222      	movs	r2, #34	@ 0x22
 800e7e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2240      	movs	r2, #64	@ 0x40
 800e7ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	6a3a      	ldr	r2, [r7, #32]
 800e7fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e800:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2200      	movs	r2, #0
 800e806:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e808:	88f8      	ldrh	r0, [r7, #6]
 800e80a:	893a      	ldrh	r2, [r7, #8]
 800e80c:	8979      	ldrh	r1, [r7, #10]
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	9301      	str	r3, [sp, #4]
 800e812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e814:	9300      	str	r3, [sp, #0]
 800e816:	4603      	mov	r3, r0
 800e818:	68f8      	ldr	r0, [r7, #12]
 800e81a:	f001 f8a5 	bl	800f968 <I2C_RequestMemoryRead>
 800e81e:	4603      	mov	r3, r0
 800e820:	2b00      	cmp	r3, #0
 800e822:	d005      	beq.n	800e830 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2200      	movs	r2, #0
 800e828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e82c:	2301      	movs	r3, #1
 800e82e:	e0ad      	b.n	800e98c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e834:	b29b      	uxth	r3, r3
 800e836:	2bff      	cmp	r3, #255	@ 0xff
 800e838:	d90e      	bls.n	800e858 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	22ff      	movs	r2, #255	@ 0xff
 800e83e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e844:	b2da      	uxtb	r2, r3
 800e846:	8979      	ldrh	r1, [r7, #10]
 800e848:	4b52      	ldr	r3, [pc, #328]	@ (800e994 <HAL_I2C_Mem_Read+0x22c>)
 800e84a:	9300      	str	r3, [sp, #0]
 800e84c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e850:	68f8      	ldr	r0, [r7, #12]
 800e852:	f002 f887 	bl	8010964 <I2C_TransferConfig>
 800e856:	e00f      	b.n	800e878 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e85c:	b29a      	uxth	r2, r3
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e866:	b2da      	uxtb	r2, r3
 800e868:	8979      	ldrh	r1, [r7, #10]
 800e86a:	4b4a      	ldr	r3, [pc, #296]	@ (800e994 <HAL_I2C_Mem_Read+0x22c>)
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e872:	68f8      	ldr	r0, [r7, #12]
 800e874:	f002 f876 	bl	8010964 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	9300      	str	r3, [sp, #0]
 800e87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e87e:	2200      	movs	r2, #0
 800e880:	2104      	movs	r1, #4
 800e882:	68f8      	ldr	r0, [r7, #12]
 800e884:	f001 feab 	bl	80105de <I2C_WaitOnFlagUntilTimeout>
 800e888:	4603      	mov	r3, r0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d001      	beq.n	800e892 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e88e:	2301      	movs	r3, #1
 800e890:	e07c      	b.n	800e98c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e89c:	b2d2      	uxtb	r2, r2
 800e89e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8a4:	1c5a      	adds	r2, r3, #1
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8ae:	3b01      	subs	r3, #1
 800e8b0:	b29a      	uxth	r2, r3
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	3b01      	subs	r3, #1
 800e8be:	b29a      	uxth	r2, r3
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d034      	beq.n	800e938 <HAL_I2C_Mem_Read+0x1d0>
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d130      	bne.n	800e938 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	9300      	str	r3, [sp, #0]
 800e8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8dc:	2200      	movs	r2, #0
 800e8de:	2180      	movs	r1, #128	@ 0x80
 800e8e0:	68f8      	ldr	r0, [r7, #12]
 800e8e2:	f001 fe7c 	bl	80105de <I2C_WaitOnFlagUntilTimeout>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d001      	beq.n	800e8f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	e04d      	b.n	800e98c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	2bff      	cmp	r3, #255	@ 0xff
 800e8f8:	d90e      	bls.n	800e918 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	22ff      	movs	r2, #255	@ 0xff
 800e8fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e904:	b2da      	uxtb	r2, r3
 800e906:	8979      	ldrh	r1, [r7, #10]
 800e908:	2300      	movs	r3, #0
 800e90a:	9300      	str	r3, [sp, #0]
 800e90c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e910:	68f8      	ldr	r0, [r7, #12]
 800e912:	f002 f827 	bl	8010964 <I2C_TransferConfig>
 800e916:	e00f      	b.n	800e938 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e91c:	b29a      	uxth	r2, r3
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e926:	b2da      	uxtb	r2, r3
 800e928:	8979      	ldrh	r1, [r7, #10]
 800e92a:	2300      	movs	r3, #0
 800e92c:	9300      	str	r3, [sp, #0]
 800e92e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	f002 f816 	bl	8010964 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e93c:	b29b      	uxth	r3, r3
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d19a      	bne.n	800e878 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e942:	697a      	ldr	r2, [r7, #20]
 800e944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e946:	68f8      	ldr	r0, [r7, #12]
 800e948:	f001 fee9 	bl	801071e <I2C_WaitOnSTOPFlagUntilTimeout>
 800e94c:	4603      	mov	r3, r0
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d001      	beq.n	800e956 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e952:	2301      	movs	r3, #1
 800e954:	e01a      	b.n	800e98c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	2220      	movs	r2, #32
 800e95c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	6859      	ldr	r1, [r3, #4]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	4b0b      	ldr	r3, [pc, #44]	@ (800e998 <HAL_I2C_Mem_Read+0x230>)
 800e96a:	400b      	ands	r3, r1
 800e96c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2220      	movs	r2, #32
 800e972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2200      	movs	r2, #0
 800e97a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2200      	movs	r2, #0
 800e982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e986:	2300      	movs	r3, #0
 800e988:	e000      	b.n	800e98c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e98a:	2302      	movs	r3, #2
  }
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3718      	adds	r7, #24
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	80002400 	.word	0x80002400
 800e998:	fe00e800 	.word	0xfe00e800

0800e99c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b086      	sub	sp, #24
 800e9a0:	af02      	add	r7, sp, #8
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	4608      	mov	r0, r1
 800e9a6:	4611      	mov	r1, r2
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	817b      	strh	r3, [r7, #10]
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	813b      	strh	r3, [r7, #8]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e9bc:	b2db      	uxtb	r3, r3
 800e9be:	2b20      	cmp	r3, #32
 800e9c0:	d16a      	bne.n	800ea98 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9c2:	69bb      	ldr	r3, [r7, #24]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d002      	beq.n	800e9ce <HAL_I2C_Mem_Write_IT+0x32>
 800e9c8:	8bbb      	ldrh	r3, [r7, #28]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d105      	bne.n	800e9da <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9d4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	e05f      	b.n	800ea9a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	699b      	ldr	r3, [r3, #24]
 800e9e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e9e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e9e8:	d101      	bne.n	800e9ee <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800e9ea:	2302      	movs	r3, #2
 800e9ec:	e055      	b.n	800ea9a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	d101      	bne.n	800e9fc <HAL_I2C_Mem_Write_IT+0x60>
 800e9f8:	2302      	movs	r3, #2
 800e9fa:	e04e      	b.n	800ea9a <HAL_I2C_Mem_Write_IT+0xfe>
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	2201      	movs	r2, #1
 800ea00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2221      	movs	r2, #33	@ 0x21
 800ea08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2240      	movs	r2, #64	@ 0x40
 800ea10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2200      	movs	r2, #0
 800ea18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	69ba      	ldr	r2, [r7, #24]
 800ea24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	8bba      	ldrh	r2, [r7, #28]
 800ea2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	4a1d      	ldr	r2, [pc, #116]	@ (800eaa4 <HAL_I2C_Mem_Write_IT+0x108>)
 800ea30:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	4a1c      	ldr	r2, [pc, #112]	@ (800eaa8 <HAL_I2C_Mem_Write_IT+0x10c>)
 800ea36:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800ea38:	897a      	ldrh	r2, [r7, #10]
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ea3e:	88fb      	ldrh	r3, [r7, #6]
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d109      	bne.n	800ea58 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ea44:	893b      	ldrh	r3, [r7, #8]
 800ea46:	b2da      	uxtb	r2, r3
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f04f 32ff 	mov.w	r2, #4294967295
 800ea54:	651a      	str	r2, [r3, #80]	@ 0x50
 800ea56:	e00b      	b.n	800ea70 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ea58:	893b      	ldrh	r3, [r7, #8]
 800ea5a:	0a1b      	lsrs	r3, r3, #8
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	b2da      	uxtb	r2, r3
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800ea66:	893b      	ldrh	r3, [r7, #8]
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ea70:	88fb      	ldrh	r3, [r7, #6]
 800ea72:	b2da      	uxtb	r2, r3
 800ea74:	8979      	ldrh	r1, [r7, #10]
 800ea76:	4b0d      	ldr	r3, [pc, #52]	@ (800eaac <HAL_I2C_Mem_Write_IT+0x110>)
 800ea78:	9300      	str	r3, [sp, #0]
 800ea7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ea7e:	68f8      	ldr	r0, [r7, #12]
 800ea80:	f001 ff70 	bl	8010964 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2200      	movs	r2, #0
 800ea88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ea8c:	2101      	movs	r1, #1
 800ea8e:	68f8      	ldr	r0, [r7, #12]
 800ea90:	f001 ff9a 	bl	80109c8 <I2C_Enable_IRQ>

    return HAL_OK;
 800ea94:	2300      	movs	r3, #0
 800ea96:	e000      	b.n	800ea9a <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800ea98:	2302      	movs	r3, #2
  }
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3710      	adds	r7, #16
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	ffff0000 	.word	0xffff0000
 800eaa8:	0800ecad 	.word	0x0800ecad
 800eaac:	80002000 	.word	0x80002000

0800eab0 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b086      	sub	sp, #24
 800eab4:	af02      	add	r7, sp, #8
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	4608      	mov	r0, r1
 800eaba:	4611      	mov	r1, r2
 800eabc:	461a      	mov	r2, r3
 800eabe:	4603      	mov	r3, r0
 800eac0:	817b      	strh	r3, [r7, #10]
 800eac2:	460b      	mov	r3, r1
 800eac4:	813b      	strh	r3, [r7, #8]
 800eac6:	4613      	mov	r3, r2
 800eac8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ead0:	b2db      	uxtb	r3, r3
 800ead2:	2b20      	cmp	r3, #32
 800ead4:	d166      	bne.n	800eba4 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800ead6:	69bb      	ldr	r3, [r7, #24]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d002      	beq.n	800eae2 <HAL_I2C_Mem_Read_IT+0x32>
 800eadc:	8bbb      	ldrh	r3, [r7, #28]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d105      	bne.n	800eaee <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eae8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800eaea:	2301      	movs	r3, #1
 800eaec:	e05b      	b.n	800eba6 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	699b      	ldr	r3, [r3, #24]
 800eaf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eaf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eafc:	d101      	bne.n	800eb02 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800eafe:	2302      	movs	r3, #2
 800eb00:	e051      	b.n	800eba6 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eb08:	2b01      	cmp	r3, #1
 800eb0a:	d101      	bne.n	800eb10 <HAL_I2C_Mem_Read_IT+0x60>
 800eb0c:	2302      	movs	r3, #2
 800eb0e:	e04a      	b.n	800eba6 <HAL_I2C_Mem_Read_IT+0xf6>
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	2201      	movs	r2, #1
 800eb14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	2222      	movs	r2, #34	@ 0x22
 800eb1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	2240      	movs	r2, #64	@ 0x40
 800eb24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	69ba      	ldr	r2, [r7, #24]
 800eb32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	8bba      	ldrh	r2, [r7, #28]
 800eb38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	4a1c      	ldr	r2, [pc, #112]	@ (800ebb0 <HAL_I2C_Mem_Read_IT+0x100>)
 800eb3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	4a1c      	ldr	r2, [pc, #112]	@ (800ebb4 <HAL_I2C_Mem_Read_IT+0x104>)
 800eb44:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800eb46:	897a      	ldrh	r2, [r7, #10]
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800eb4c:	88fb      	ldrh	r3, [r7, #6]
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d109      	bne.n	800eb66 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800eb52:	893b      	ldrh	r3, [r7, #8]
 800eb54:	b2da      	uxtb	r2, r3
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f04f 32ff 	mov.w	r2, #4294967295
 800eb62:	651a      	str	r2, [r3, #80]	@ 0x50
 800eb64:	e00b      	b.n	800eb7e <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800eb66:	893b      	ldrh	r3, [r7, #8]
 800eb68:	0a1b      	lsrs	r3, r3, #8
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	b2da      	uxtb	r2, r3
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800eb74:	893b      	ldrh	r3, [r7, #8]
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	461a      	mov	r2, r3
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800eb7e:	88fb      	ldrh	r3, [r7, #6]
 800eb80:	b2da      	uxtb	r2, r3
 800eb82:	8979      	ldrh	r1, [r7, #10]
 800eb84:	4b0c      	ldr	r3, [pc, #48]	@ (800ebb8 <HAL_I2C_Mem_Read_IT+0x108>)
 800eb86:	9300      	str	r3, [sp, #0]
 800eb88:	2300      	movs	r3, #0
 800eb8a:	68f8      	ldr	r0, [r7, #12]
 800eb8c:	f001 feea 	bl	8010964 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2200      	movs	r2, #0
 800eb94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800eb98:	2101      	movs	r1, #1
 800eb9a:	68f8      	ldr	r0, [r7, #12]
 800eb9c:	f001 ff14 	bl	80109c8 <I2C_Enable_IRQ>

    return HAL_OK;
 800eba0:	2300      	movs	r3, #0
 800eba2:	e000      	b.n	800eba6 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800eba4:	2302      	movs	r3, #2
  }
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3710      	adds	r7, #16
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	ffff0000 	.word	0xffff0000
 800ebb4:	0800ecad 	.word	0x0800ecad
 800ebb8:	80002000 	.word	0x80002000

0800ebbc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	699b      	ldr	r3, [r3, #24]
 800ebca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d005      	beq.n	800ebe8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebe0:	68ba      	ldr	r2, [r7, #8]
 800ebe2:	68f9      	ldr	r1, [r7, #12]
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	4798      	blx	r3
  }
}
 800ebe8:	bf00      	nop
 800ebea:	3710      	adds	r7, #16
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ebf8:	bf00      	nop
 800ebfa:	370c      	adds	r7, #12
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ec04:	b480      	push	{r7}
 800ec06:	b083      	sub	sp, #12
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ec0c:	bf00      	nop
 800ec0e:	370c      	adds	r7, #12
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr

0800ec18 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ec18:	b480      	push	{r7}
 800ec1a:	b083      	sub	sp, #12
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ec20:	bf00      	nop
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b083      	sub	sp, #12
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ec34:	bf00      	nop
 800ec36:	370c      	adds	r7, #12
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr

0800ec40 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b083      	sub	sp, #12
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	460b      	mov	r3, r1
 800ec4a:	70fb      	strb	r3, [r7, #3]
 800ec4c:	4613      	mov	r3, r2
 800ec4e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ec50:	bf00      	nop
 800ec52:	370c      	adds	r7, #12
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr

0800ec5c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b083      	sub	sp, #12
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ec64:	bf00      	nop
 800ec66:	370c      	adds	r7, #12
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr

0800ec70 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b083      	sub	sp, #12
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ec78:	bf00      	nop
 800ec7a:	370c      	adds	r7, #12
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr

0800ec84 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b083      	sub	sp, #12
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ec8c:	bf00      	nop
 800ec8e:	370c      	adds	r7, #12
 800ec90:	46bd      	mov	sp, r7
 800ec92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec96:	4770      	bx	lr

0800ec98 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800eca0:	bf00      	nop
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr

0800ecac <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b088      	sub	sp, #32
 800ecb0:	af02      	add	r7, sp, #8
 800ecb2:	60f8      	str	r0, [r7, #12]
 800ecb4:	60b9      	str	r1, [r7, #8]
 800ecb6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800ecb8:	4b8d      	ldr	r3, [pc, #564]	@ (800eef0 <I2C_Mem_ISR_IT+0x244>)
 800ecba:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d101      	bne.n	800ecce <I2C_Mem_ISR_IT+0x22>
 800ecca:	2302      	movs	r3, #2
 800eccc:	e10c      	b.n	800eee8 <I2C_Mem_ISR_IT+0x23c>
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	f003 0310 	and.w	r3, r3, #16
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d012      	beq.n	800ed06 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d00d      	beq.n	800ed06 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	2210      	movs	r2, #16
 800ecf0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ecf6:	f043 0204 	orr.w	r2, r3, #4
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ecfe:	68f8      	ldr	r0, [r7, #12]
 800ed00:	f001 fc2b 	bl	801055a <I2C_Flush_TXDR>
 800ed04:	e0dd      	b.n	800eec2 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	f003 0304 	and.w	r3, r3, #4
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d022      	beq.n	800ed56 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d01d      	beq.n	800ed56 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	f023 0304 	bic.w	r3, r3, #4
 800ed20:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed2c:	b2d2      	uxtb	r2, r2
 800ed2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed34:	1c5a      	adds	r2, r3, #1
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed3e:	3b01      	subs	r3, #1
 800ed40:	b29a      	uxth	r2, r3
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	3b01      	subs	r3, #1
 800ed4e:	b29a      	uxth	r2, r3
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ed54:	e0b5      	b.n	800eec2 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ed56:	693b      	ldr	r3, [r7, #16]
 800ed58:	f003 0302 	and.w	r3, r3, #2
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d02c      	beq.n	800edba <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d027      	beq.n	800edba <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed72:	d118      	bne.n	800eda6 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed78:	781a      	ldrb	r2, [r3, #0]
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed84:	1c5a      	adds	r2, r3, #1
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed8e:	3b01      	subs	r3, #1
 800ed90:	b29a      	uxth	r2, r3
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	3b01      	subs	r3, #1
 800ed9e:	b29a      	uxth	r2, r3
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800eda4:	e08d      	b.n	800eec2 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	68fa      	ldr	r2, [r7, #12]
 800edac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800edae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	f04f 32ff 	mov.w	r2, #4294967295
 800edb6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800edb8:	e083      	b.n	800eec2 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d03c      	beq.n	800ee3e <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d037      	beq.n	800ee3e <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d02c      	beq.n	800ee32 <I2C_Mem_ISR_IT+0x186>
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d128      	bne.n	800ee32 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	2bff      	cmp	r3, #255	@ 0xff
 800ede8:	d910      	bls.n	800ee0c <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	22ff      	movs	r2, #255	@ 0xff
 800edee:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edf4:	b299      	uxth	r1, r3
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800edfa:	b2da      	uxtb	r2, r3
 800edfc:	2300      	movs	r3, #0
 800edfe:	9300      	str	r3, [sp, #0]
 800ee00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ee04:	68f8      	ldr	r0, [r7, #12]
 800ee06:	f001 fdad 	bl	8010964 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ee0a:	e017      	b.n	800ee3c <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee10:	b29a      	uxth	r2, r3
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee1a:	b299      	uxth	r1, r3
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ee20:	b2da      	uxtb	r2, r3
 800ee22:	2300      	movs	r3, #0
 800ee24:	9300      	str	r3, [sp, #0]
 800ee26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ee2a:	68f8      	ldr	r0, [r7, #12]
 800ee2c:	f001 fd9a 	bl	8010964 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ee30:	e004      	b.n	800ee3c <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ee32:	2140      	movs	r1, #64	@ 0x40
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f001 fa79 	bl	801032c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ee3a:	e042      	b.n	800eec2 <I2C_Mem_ISR_IT+0x216>
 800ee3c:	e041      	b.n	800eec2 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d03c      	beq.n	800eec2 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d037      	beq.n	800eec2 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ee52:	2101      	movs	r1, #1
 800ee54:	68f8      	ldr	r0, [r7, #12]
 800ee56:	f001 fe3b 	bl	8010ad0 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ee5a:	2102      	movs	r1, #2
 800ee5c:	68f8      	ldr	r0, [r7, #12]
 800ee5e:	f001 fdb3 	bl	80109c8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ee68:	b2db      	uxtb	r3, r3
 800ee6a:	2b22      	cmp	r3, #34	@ 0x22
 800ee6c:	d101      	bne.n	800ee72 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800ee6e:	4b21      	ldr	r3, [pc, #132]	@ (800eef4 <I2C_Mem_ISR_IT+0x248>)
 800ee70:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	2bff      	cmp	r3, #255	@ 0xff
 800ee7a:	d910      	bls.n	800ee9e <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	22ff      	movs	r2, #255	@ 0xff
 800ee80:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee86:	b299      	uxth	r1, r3
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ee8c:	b2da      	uxtb	r2, r3
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	9300      	str	r3, [sp, #0]
 800ee92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ee96:	68f8      	ldr	r0, [r7, #12]
 800ee98:	f001 fd64 	bl	8010964 <I2C_TransferConfig>
 800ee9c:	e011      	b.n	800eec2 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eea2:	b29a      	uxth	r2, r3
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eeac:	b299      	uxth	r1, r3
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eeb2:	b2da      	uxtb	r2, r3
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	9300      	str	r3, [sp, #0]
 800eeb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f001 fd51 	bl	8010964 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	f003 0320 	and.w	r3, r3, #32
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d008      	beq.n	800eede <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d003      	beq.n	800eede <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800eed6:	6939      	ldr	r1, [r7, #16]
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	f000 feb7 	bl	800fc4c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	2200      	movs	r2, #0
 800eee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800eee6:	2300      	movs	r3, #0
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	3718      	adds	r7, #24
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	80002000 	.word	0x80002000
 800eef4:	80002400 	.word	0x80002400

0800eef8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b086      	sub	sp, #24
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	60f8      	str	r0, [r7, #12]
 800ef00:	60b9      	str	r1, [r7, #8]
 800ef02:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef08:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d101      	bne.n	800ef1c <I2C_Slave_ISR_IT+0x24>
 800ef18:	2302      	movs	r3, #2
 800ef1a:	e0e2      	b.n	800f0e2 <I2C_Slave_ISR_IT+0x1ea>
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	2201      	movs	r2, #1
 800ef20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	f003 0320 	and.w	r3, r3, #32
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d009      	beq.n	800ef42 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d004      	beq.n	800ef42 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800ef38:	6939      	ldr	r1, [r7, #16]
 800ef3a:	68f8      	ldr	r0, [r7, #12]
 800ef3c:	f000 ff4e 	bl	800fddc <I2C_ITSlaveCplt>
 800ef40:	e0ca      	b.n	800f0d8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	f003 0310 	and.w	r3, r3, #16
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d04b      	beq.n	800efe4 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d046      	beq.n	800efe4 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d128      	bne.n	800efb2 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ef66:	b2db      	uxtb	r3, r3
 800ef68:	2b28      	cmp	r3, #40	@ 0x28
 800ef6a:	d108      	bne.n	800ef7e <I2C_Slave_ISR_IT+0x86>
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ef72:	d104      	bne.n	800ef7e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ef74:	6939      	ldr	r1, [r7, #16]
 800ef76:	68f8      	ldr	r0, [r7, #12]
 800ef78:	f001 f984 	bl	8010284 <I2C_ITListenCplt>
 800ef7c:	e031      	b.n	800efe2 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ef84:	b2db      	uxtb	r3, r3
 800ef86:	2b29      	cmp	r3, #41	@ 0x29
 800ef88:	d10e      	bne.n	800efa8 <I2C_Slave_ISR_IT+0xb0>
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ef90:	d00a      	beq.n	800efa8 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	2210      	movs	r2, #16
 800ef98:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ef9a:	68f8      	ldr	r0, [r7, #12]
 800ef9c:	f001 fadd 	bl	801055a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800efa0:	68f8      	ldr	r0, [r7, #12]
 800efa2:	f000 fdf6 	bl	800fb92 <I2C_ITSlaveSeqCplt>
 800efa6:	e01c      	b.n	800efe2 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2210      	movs	r2, #16
 800efae:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800efb0:	e08f      	b.n	800f0d2 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2210      	movs	r2, #16
 800efb8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efbe:	f043 0204 	orr.w	r2, r3, #4
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d003      	beq.n	800efd4 <I2C_Slave_ISR_IT+0xdc>
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800efd2:	d17e      	bne.n	800f0d2 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efd8:	4619      	mov	r1, r3
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	f001 f9a6 	bl	801032c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800efe0:	e077      	b.n	800f0d2 <I2C_Slave_ISR_IT+0x1da>
 800efe2:	e076      	b.n	800f0d2 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	f003 0304 	and.w	r3, r3, #4
 800efea:	2b00      	cmp	r3, #0
 800efec:	d02f      	beq.n	800f04e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d02a      	beq.n	800f04e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800effc:	b29b      	uxth	r3, r3
 800effe:	2b00      	cmp	r3, #0
 800f000:	d018      	beq.n	800f034 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f00c:	b2d2      	uxtb	r2, r2
 800f00e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f014:	1c5a      	adds	r2, r3, #1
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f01e:	3b01      	subs	r3, #1
 800f020:	b29a      	uxth	r2, r3
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	3b01      	subs	r3, #1
 800f02e:	b29a      	uxth	r2, r3
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f038:	b29b      	uxth	r3, r3
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d14b      	bne.n	800f0d6 <I2C_Slave_ISR_IT+0x1de>
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f044:	d047      	beq.n	800f0d6 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800f046:	68f8      	ldr	r0, [r7, #12]
 800f048:	f000 fda3 	bl	800fb92 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800f04c:	e043      	b.n	800f0d6 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	f003 0308 	and.w	r3, r3, #8
 800f054:	2b00      	cmp	r3, #0
 800f056:	d009      	beq.n	800f06c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d004      	beq.n	800f06c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f062:	6939      	ldr	r1, [r7, #16]
 800f064:	68f8      	ldr	r0, [r7, #12]
 800f066:	f000 fcd3 	bl	800fa10 <I2C_ITAddrCplt>
 800f06a:	e035      	b.n	800f0d8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	f003 0302 	and.w	r3, r3, #2
 800f072:	2b00      	cmp	r3, #0
 800f074:	d030      	beq.n	800f0d8 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d02b      	beq.n	800f0d8 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f084:	b29b      	uxth	r3, r3
 800f086:	2b00      	cmp	r3, #0
 800f088:	d018      	beq.n	800f0bc <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f08e:	781a      	ldrb	r2, [r3, #0]
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f09a:	1c5a      	adds	r2, r3, #1
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0a4:	b29b      	uxth	r3, r3
 800f0a6:	3b01      	subs	r3, #1
 800f0a8:	b29a      	uxth	r2, r3
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f0b2:	3b01      	subs	r3, #1
 800f0b4:	b29a      	uxth	r2, r3
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f0ba:	e00d      	b.n	800f0d8 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f0c2:	d002      	beq.n	800f0ca <I2C_Slave_ISR_IT+0x1d2>
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d106      	bne.n	800f0d8 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f0ca:	68f8      	ldr	r0, [r7, #12]
 800f0cc:	f000 fd61 	bl	800fb92 <I2C_ITSlaveSeqCplt>
 800f0d0:	e002      	b.n	800f0d8 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800f0d2:	bf00      	nop
 800f0d4:	e000      	b.n	800f0d8 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800f0d6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f0e0:	2300      	movs	r3, #0
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3718      	adds	r7, #24
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}

0800f0ea <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800f0ea:	b580      	push	{r7, lr}
 800f0ec:	b088      	sub	sp, #32
 800f0ee:	af02      	add	r7, sp, #8
 800f0f0:	60f8      	str	r0, [r7, #12]
 800f0f2:	60b9      	str	r1, [r7, #8]
 800f0f4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d101      	bne.n	800f104 <I2C_Master_ISR_DMA+0x1a>
 800f100:	2302      	movs	r3, #2
 800f102:	e0d9      	b.n	800f2b8 <I2C_Master_ISR_DMA+0x1ce>
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2201      	movs	r2, #1
 800f108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	f003 0310 	and.w	r3, r3, #16
 800f112:	2b00      	cmp	r3, #0
 800f114:	d016      	beq.n	800f144 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d011      	beq.n	800f144 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	2210      	movs	r2, #16
 800f126:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f12c:	f043 0204 	orr.w	r2, r3, #4
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f134:	2120      	movs	r1, #32
 800f136:	68f8      	ldr	r0, [r7, #12]
 800f138:	f001 fc46 	bl	80109c8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f13c:	68f8      	ldr	r0, [r7, #12]
 800f13e:	f001 fa0c 	bl	801055a <I2C_Flush_TXDR>
 800f142:	e0b4      	b.n	800f2ae <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d071      	beq.n	800f232 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f154:	2b00      	cmp	r3, #0
 800f156:	d06c      	beq.n	800f232 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	681a      	ldr	r2, [r3, #0]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f166:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f16c:	b29b      	uxth	r3, r3
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d04e      	beq.n	800f210 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	b29b      	uxth	r3, r3
 800f17a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f17e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f184:	b29b      	uxth	r3, r3
 800f186:	2bff      	cmp	r3, #255	@ 0xff
 800f188:	d906      	bls.n	800f198 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	22ff      	movs	r2, #255	@ 0xff
 800f18e:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800f190:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f194:	617b      	str	r3, [r7, #20]
 800f196:	e010      	b.n	800f1ba <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f1aa:	d003      	beq.n	800f1b4 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1b0:	617b      	str	r3, [r7, #20]
 800f1b2:	e002      	b.n	800f1ba <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800f1b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f1b8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1be:	b2da      	uxtb	r2, r3
 800f1c0:	8a79      	ldrh	r1, [r7, #18]
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	9300      	str	r3, [sp, #0]
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	68f8      	ldr	r0, [r7, #12]
 800f1ca:	f001 fbcb 	bl	8010964 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1d2:	b29a      	uxth	r2, r3
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1d8:	1ad3      	subs	r3, r2, r3
 800f1da:	b29a      	uxth	r2, r3
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f1e6:	b2db      	uxtb	r3, r3
 800f1e8:	2b22      	cmp	r3, #34	@ 0x22
 800f1ea:	d108      	bne.n	800f1fe <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f1fa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f1fc:	e057      	b.n	800f2ae <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	681a      	ldr	r2, [r3, #0]
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f20c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f20e:	e04e      	b.n	800f2ae <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f21a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f21e:	d003      	beq.n	800f228 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f220:	68f8      	ldr	r0, [r7, #12]
 800f222:	f000 fc79 	bl	800fb18 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800f226:	e042      	b.n	800f2ae <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f228:	2140      	movs	r1, #64	@ 0x40
 800f22a:	68f8      	ldr	r0, [r7, #12]
 800f22c:	f001 f87e 	bl	801032c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f230:	e03d      	b.n	800f2ae <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d028      	beq.n	800f28e <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f242:	2b00      	cmp	r3, #0
 800f244:	d023      	beq.n	800f28e <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d119      	bne.n	800f284 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	685b      	ldr	r3, [r3, #4]
 800f256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f25a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f25e:	d025      	beq.n	800f2ac <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f264:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f268:	d108      	bne.n	800f27c <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	685a      	ldr	r2, [r3, #4]
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f278:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800f27a:	e017      	b.n	800f2ac <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f27c:	68f8      	ldr	r0, [r7, #12]
 800f27e:	f000 fc4b 	bl	800fb18 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800f282:	e013      	b.n	800f2ac <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f284:	2140      	movs	r1, #64	@ 0x40
 800f286:	68f8      	ldr	r0, [r7, #12]
 800f288:	f001 f850 	bl	801032c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f28c:	e00e      	b.n	800f2ac <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	f003 0320 	and.w	r3, r3, #32
 800f294:	2b00      	cmp	r3, #0
 800f296:	d00a      	beq.n	800f2ae <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d005      	beq.n	800f2ae <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f2a2:	68b9      	ldr	r1, [r7, #8]
 800f2a4:	68f8      	ldr	r0, [r7, #12]
 800f2a6:	f000 fcd1 	bl	800fc4c <I2C_ITMasterCplt>
 800f2aa:	e000      	b.n	800f2ae <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800f2ac:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f2b6:	2300      	movs	r3, #0
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3718      	adds	r7, #24
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b088      	sub	sp, #32
 800f2c4:	af02      	add	r7, sp, #8
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	60b9      	str	r1, [r7, #8]
 800f2ca:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f2cc:	4b8d      	ldr	r3, [pc, #564]	@ (800f504 <I2C_Mem_ISR_DMA+0x244>)
 800f2ce:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f2d6:	2b01      	cmp	r3, #1
 800f2d8:	d101      	bne.n	800f2de <I2C_Mem_ISR_DMA+0x1e>
 800f2da:	2302      	movs	r3, #2
 800f2dc:	e10e      	b.n	800f4fc <I2C_Mem_ISR_DMA+0x23c>
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	f003 0310 	and.w	r3, r3, #16
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d016      	beq.n	800f31e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d011      	beq.n	800f31e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	2210      	movs	r2, #16
 800f300:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f306:	f043 0204 	orr.w	r2, r3, #4
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f30e:	2120      	movs	r1, #32
 800f310:	68f8      	ldr	r0, [r7, #12]
 800f312:	f001 fb59 	bl	80109c8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	f001 f91f 	bl	801055a <I2C_Flush_TXDR>
 800f31c:	e0e9      	b.n	800f4f2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	f003 0302 	and.w	r3, r3, #2
 800f324:	2b00      	cmp	r3, #0
 800f326:	d00e      	beq.n	800f346 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d009      	beq.n	800f346 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	68fa      	ldr	r2, [r7, #12]
 800f338:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f33a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	f04f 32ff 	mov.w	r2, #4294967295
 800f342:	651a      	str	r2, [r3, #80]	@ 0x50
 800f344:	e0d5      	b.n	800f4f2 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d05f      	beq.n	800f410 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f356:	2b00      	cmp	r3, #0
 800f358:	d05a      	beq.n	800f410 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f35a:	2101      	movs	r1, #1
 800f35c:	68f8      	ldr	r0, [r7, #12]
 800f35e:	f001 fbb7 	bl	8010ad0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f362:	2110      	movs	r1, #16
 800f364:	68f8      	ldr	r0, [r7, #12]
 800f366:	f001 fb2f 	bl	80109c8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f36e:	b29b      	uxth	r3, r3
 800f370:	2b00      	cmp	r3, #0
 800f372:	d048      	beq.n	800f406 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f378:	b29b      	uxth	r3, r3
 800f37a:	2bff      	cmp	r3, #255	@ 0xff
 800f37c:	d910      	bls.n	800f3a0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	22ff      	movs	r2, #255	@ 0xff
 800f382:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f388:	b299      	uxth	r1, r3
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f38e:	b2da      	uxtb	r2, r3
 800f390:	2300      	movs	r3, #0
 800f392:	9300      	str	r3, [sp, #0]
 800f394:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f001 fae3 	bl	8010964 <I2C_TransferConfig>
 800f39e:	e011      	b.n	800f3c4 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3a4:	b29a      	uxth	r2, r3
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f3ae:	b299      	uxth	r1, r3
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3b4:	b2da      	uxtb	r2, r3
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	9300      	str	r3, [sp, #0]
 800f3ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f3be:	68f8      	ldr	r0, [r7, #12]
 800f3c0:	f001 fad0 	bl	8010964 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3c8:	b29a      	uxth	r2, r3
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3ce:	1ad3      	subs	r3, r2, r3
 800f3d0:	b29a      	uxth	r2, r3
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f3dc:	b2db      	uxtb	r3, r3
 800f3de:	2b22      	cmp	r3, #34	@ 0x22
 800f3e0:	d108      	bne.n	800f3f4 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f3f0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f3f2:	e07e      	b.n	800f4f2 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	681a      	ldr	r2, [r3, #0]
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f402:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f404:	e075      	b.n	800f4f2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f406:	2140      	movs	r1, #64	@ 0x40
 800f408:	68f8      	ldr	r0, [r7, #12]
 800f40a:	f000 ff8f 	bl	801032c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f40e:	e070      	b.n	800f4f2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f416:	2b00      	cmp	r3, #0
 800f418:	d05d      	beq.n	800f4d6 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f420:	2b00      	cmp	r3, #0
 800f422:	d058      	beq.n	800f4d6 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f424:	2101      	movs	r1, #1
 800f426:	68f8      	ldr	r0, [r7, #12]
 800f428:	f001 fb52 	bl	8010ad0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f42c:	2110      	movs	r1, #16
 800f42e:	68f8      	ldr	r0, [r7, #12]
 800f430:	f001 faca 	bl	80109c8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	2b22      	cmp	r3, #34	@ 0x22
 800f43e:	d101      	bne.n	800f444 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800f440:	4b31      	ldr	r3, [pc, #196]	@ (800f508 <I2C_Mem_ISR_DMA+0x248>)
 800f442:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f448:	b29b      	uxth	r3, r3
 800f44a:	2bff      	cmp	r3, #255	@ 0xff
 800f44c:	d910      	bls.n	800f470 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	22ff      	movs	r2, #255	@ 0xff
 800f452:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f458:	b299      	uxth	r1, r3
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f45e:	b2da      	uxtb	r2, r3
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	9300      	str	r3, [sp, #0]
 800f464:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	f001 fa7b 	bl	8010964 <I2C_TransferConfig>
 800f46e:	e011      	b.n	800f494 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f474:	b29a      	uxth	r2, r3
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f47e:	b299      	uxth	r1, r3
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f484:	b2da      	uxtb	r2, r3
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	9300      	str	r3, [sp, #0]
 800f48a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f48e:	68f8      	ldr	r0, [r7, #12]
 800f490:	f001 fa68 	bl	8010964 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f498:	b29a      	uxth	r2, r3
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f49e:	1ad3      	subs	r3, r2, r3
 800f4a0:	b29a      	uxth	r2, r3
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	2b22      	cmp	r3, #34	@ 0x22
 800f4b0:	d108      	bne.n	800f4c4 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	681a      	ldr	r2, [r3, #0]
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f4c0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f4c2:	e016      	b.n	800f4f2 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f4d2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f4d4:	e00d      	b.n	800f4f2 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	f003 0320 	and.w	r3, r3, #32
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d008      	beq.n	800f4f2 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d003      	beq.n	800f4f2 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f4ea:	68b9      	ldr	r1, [r7, #8]
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	f000 fbad 	bl	800fc4c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f4fa:	2300      	movs	r3, #0
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3718      	adds	r7, #24
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}
 800f504:	80002000 	.word	0x80002000
 800f508:	80002400 	.word	0x80002400

0800f50c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b088      	sub	sp, #32
 800f510:	af00      	add	r7, sp, #0
 800f512:	60f8      	str	r0, [r7, #12]
 800f514:	60b9      	str	r1, [r7, #8]
 800f516:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f51c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800f51e:	2300      	movs	r3, #0
 800f520:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f528:	2b01      	cmp	r3, #1
 800f52a:	d101      	bne.n	800f530 <I2C_Slave_ISR_DMA+0x24>
 800f52c:	2302      	movs	r3, #2
 800f52e:	e1c2      	b.n	800f8b6 <I2C_Slave_ISR_DMA+0x3aa>
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	2201      	movs	r2, #1
 800f534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	f003 0320 	and.w	r3, r3, #32
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d009      	beq.n	800f556 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d004      	beq.n	800f556 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800f54c:	68b9      	ldr	r1, [r7, #8]
 800f54e:	68f8      	ldr	r0, [r7, #12]
 800f550:	f000 fc44 	bl	800fddc <I2C_ITSlaveCplt>
 800f554:	e1aa      	b.n	800f8ac <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	f003 0310 	and.w	r3, r3, #16
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	f000 8197 	beq.w	800f890 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f568:	2b00      	cmp	r3, #0
 800f56a:	f000 8191 	beq.w	800f890 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f574:	2b00      	cmp	r3, #0
 800f576:	d105      	bne.n	800f584 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f57e:	2b00      	cmp	r3, #0
 800f580:	f000 817f 	beq.w	800f882 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d07b      	beq.n	800f684 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f592:	2b00      	cmp	r3, #0
 800f594:	d076      	beq.n	800f684 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	4a74      	ldr	r2, [pc, #464]	@ (800f770 <I2C_Slave_ISR_DMA+0x264>)
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d059      	beq.n	800f656 <I2C_Slave_ISR_DMA+0x14a>
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4a72      	ldr	r2, [pc, #456]	@ (800f774 <I2C_Slave_ISR_DMA+0x268>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d053      	beq.n	800f656 <I2C_Slave_ISR_DMA+0x14a>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	4a70      	ldr	r2, [pc, #448]	@ (800f778 <I2C_Slave_ISR_DMA+0x26c>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d04d      	beq.n	800f656 <I2C_Slave_ISR_DMA+0x14a>
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	4a6e      	ldr	r2, [pc, #440]	@ (800f77c <I2C_Slave_ISR_DMA+0x270>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d047      	beq.n	800f656 <I2C_Slave_ISR_DMA+0x14a>
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4a6c      	ldr	r2, [pc, #432]	@ (800f780 <I2C_Slave_ISR_DMA+0x274>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d041      	beq.n	800f656 <I2C_Slave_ISR_DMA+0x14a>
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	4a6a      	ldr	r2, [pc, #424]	@ (800f784 <I2C_Slave_ISR_DMA+0x278>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d03b      	beq.n	800f656 <I2C_Slave_ISR_DMA+0x14a>
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4a68      	ldr	r2, [pc, #416]	@ (800f788 <I2C_Slave_ISR_DMA+0x27c>)
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d035      	beq.n	800f656 <I2C_Slave_ISR_DMA+0x14a>
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	4a66      	ldr	r2, [pc, #408]	@ (800f78c <I2C_Slave_ISR_DMA+0x280>)
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d02f      	beq.n	800f656 <I2C_Slave_ISR_DMA+0x14a>
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	4a64      	ldr	r2, [pc, #400]	@ (800f790 <I2C_Slave_ISR_DMA+0x284>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d029      	beq.n	800f656 <I2C_Slave_ISR_DMA+0x14a>
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	4a62      	ldr	r2, [pc, #392]	@ (800f794 <I2C_Slave_ISR_DMA+0x288>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d023      	beq.n	800f656 <I2C_Slave_ISR_DMA+0x14a>
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4a60      	ldr	r2, [pc, #384]	@ (800f798 <I2C_Slave_ISR_DMA+0x28c>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d01d      	beq.n	800f656 <I2C_Slave_ISR_DMA+0x14a>
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	4a5e      	ldr	r2, [pc, #376]	@ (800f79c <I2C_Slave_ISR_DMA+0x290>)
 800f622:	4293      	cmp	r3, r2
 800f624:	d017      	beq.n	800f656 <I2C_Slave_ISR_DMA+0x14a>
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4a5c      	ldr	r2, [pc, #368]	@ (800f7a0 <I2C_Slave_ISR_DMA+0x294>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d011      	beq.n	800f656 <I2C_Slave_ISR_DMA+0x14a>
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4a5a      	ldr	r2, [pc, #360]	@ (800f7a4 <I2C_Slave_ISR_DMA+0x298>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d00b      	beq.n	800f656 <I2C_Slave_ISR_DMA+0x14a>
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	4a58      	ldr	r2, [pc, #352]	@ (800f7a8 <I2C_Slave_ISR_DMA+0x29c>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d005      	beq.n	800f656 <I2C_Slave_ISR_DMA+0x14a>
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4a56      	ldr	r2, [pc, #344]	@ (800f7ac <I2C_Slave_ISR_DMA+0x2a0>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d109      	bne.n	800f66a <I2C_Slave_ISR_DMA+0x15e>
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	bf0c      	ite	eq
 800f662:	2301      	moveq	r3, #1
 800f664:	2300      	movne	r3, #0
 800f666:	b2db      	uxtb	r3, r3
 800f668:	e008      	b.n	800f67c <I2C_Slave_ISR_DMA+0x170>
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	685b      	ldr	r3, [r3, #4]
 800f672:	2b00      	cmp	r3, #0
 800f674:	bf0c      	ite	eq
 800f676:	2301      	moveq	r3, #1
 800f678:	2300      	movne	r3, #0
 800f67a:	b2db      	uxtb	r3, r3
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d001      	beq.n	800f684 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800f680:	2301      	movs	r3, #1
 800f682:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f688:	2b00      	cmp	r3, #0
 800f68a:	f000 809e 	beq.w	800f7ca <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f694:	2b00      	cmp	r3, #0
 800f696:	f000 8098 	beq.w	800f7ca <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4a33      	ldr	r2, [pc, #204]	@ (800f770 <I2C_Slave_ISR_DMA+0x264>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d059      	beq.n	800f75a <I2C_Slave_ISR_DMA+0x24e>
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a31      	ldr	r2, [pc, #196]	@ (800f774 <I2C_Slave_ISR_DMA+0x268>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d053      	beq.n	800f75a <I2C_Slave_ISR_DMA+0x24e>
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	4a2f      	ldr	r2, [pc, #188]	@ (800f778 <I2C_Slave_ISR_DMA+0x26c>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d04d      	beq.n	800f75a <I2C_Slave_ISR_DMA+0x24e>
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	4a2d      	ldr	r2, [pc, #180]	@ (800f77c <I2C_Slave_ISR_DMA+0x270>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d047      	beq.n	800f75a <I2C_Slave_ISR_DMA+0x24e>
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	4a2b      	ldr	r2, [pc, #172]	@ (800f780 <I2C_Slave_ISR_DMA+0x274>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d041      	beq.n	800f75a <I2C_Slave_ISR_DMA+0x24e>
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4a29      	ldr	r2, [pc, #164]	@ (800f784 <I2C_Slave_ISR_DMA+0x278>)
 800f6de:	4293      	cmp	r3, r2
 800f6e0:	d03b      	beq.n	800f75a <I2C_Slave_ISR_DMA+0x24e>
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4a27      	ldr	r2, [pc, #156]	@ (800f788 <I2C_Slave_ISR_DMA+0x27c>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d035      	beq.n	800f75a <I2C_Slave_ISR_DMA+0x24e>
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4a25      	ldr	r2, [pc, #148]	@ (800f78c <I2C_Slave_ISR_DMA+0x280>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d02f      	beq.n	800f75a <I2C_Slave_ISR_DMA+0x24e>
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	4a23      	ldr	r2, [pc, #140]	@ (800f790 <I2C_Slave_ISR_DMA+0x284>)
 800f702:	4293      	cmp	r3, r2
 800f704:	d029      	beq.n	800f75a <I2C_Slave_ISR_DMA+0x24e>
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4a21      	ldr	r2, [pc, #132]	@ (800f794 <I2C_Slave_ISR_DMA+0x288>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d023      	beq.n	800f75a <I2C_Slave_ISR_DMA+0x24e>
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	4a1f      	ldr	r2, [pc, #124]	@ (800f798 <I2C_Slave_ISR_DMA+0x28c>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d01d      	beq.n	800f75a <I2C_Slave_ISR_DMA+0x24e>
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	4a1d      	ldr	r2, [pc, #116]	@ (800f79c <I2C_Slave_ISR_DMA+0x290>)
 800f726:	4293      	cmp	r3, r2
 800f728:	d017      	beq.n	800f75a <I2C_Slave_ISR_DMA+0x24e>
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	4a1b      	ldr	r2, [pc, #108]	@ (800f7a0 <I2C_Slave_ISR_DMA+0x294>)
 800f732:	4293      	cmp	r3, r2
 800f734:	d011      	beq.n	800f75a <I2C_Slave_ISR_DMA+0x24e>
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4a19      	ldr	r2, [pc, #100]	@ (800f7a4 <I2C_Slave_ISR_DMA+0x298>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d00b      	beq.n	800f75a <I2C_Slave_ISR_DMA+0x24e>
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	4a17      	ldr	r2, [pc, #92]	@ (800f7a8 <I2C_Slave_ISR_DMA+0x29c>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d005      	beq.n	800f75a <I2C_Slave_ISR_DMA+0x24e>
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4a15      	ldr	r2, [pc, #84]	@ (800f7ac <I2C_Slave_ISR_DMA+0x2a0>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d12a      	bne.n	800f7b0 <I2C_Slave_ISR_DMA+0x2a4>
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	2b00      	cmp	r3, #0
 800f764:	bf0c      	ite	eq
 800f766:	2301      	moveq	r3, #1
 800f768:	2300      	movne	r3, #0
 800f76a:	b2db      	uxtb	r3, r3
 800f76c:	e029      	b.n	800f7c2 <I2C_Slave_ISR_DMA+0x2b6>
 800f76e:	bf00      	nop
 800f770:	40020010 	.word	0x40020010
 800f774:	40020028 	.word	0x40020028
 800f778:	40020040 	.word	0x40020040
 800f77c:	40020058 	.word	0x40020058
 800f780:	40020070 	.word	0x40020070
 800f784:	40020088 	.word	0x40020088
 800f788:	400200a0 	.word	0x400200a0
 800f78c:	400200b8 	.word	0x400200b8
 800f790:	40020410 	.word	0x40020410
 800f794:	40020428 	.word	0x40020428
 800f798:	40020440 	.word	0x40020440
 800f79c:	40020458 	.word	0x40020458
 800f7a0:	40020470 	.word	0x40020470
 800f7a4:	40020488 	.word	0x40020488
 800f7a8:	400204a0 	.word	0x400204a0
 800f7ac:	400204b8 	.word	0x400204b8
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	bf0c      	ite	eq
 800f7bc:	2301      	moveq	r3, #1
 800f7be:	2300      	movne	r3, #0
 800f7c0:	b2db      	uxtb	r3, r3
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d001      	beq.n	800f7ca <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800f7ca:	69fb      	ldr	r3, [r7, #28]
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	d128      	bne.n	800f822 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f7d6:	b2db      	uxtb	r3, r3
 800f7d8:	2b28      	cmp	r3, #40	@ 0x28
 800f7da:	d108      	bne.n	800f7ee <I2C_Slave_ISR_DMA+0x2e2>
 800f7dc:	69bb      	ldr	r3, [r7, #24]
 800f7de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f7e2:	d104      	bne.n	800f7ee <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800f7e4:	68b9      	ldr	r1, [r7, #8]
 800f7e6:	68f8      	ldr	r0, [r7, #12]
 800f7e8:	f000 fd4c 	bl	8010284 <I2C_ITListenCplt>
 800f7ec:	e048      	b.n	800f880 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f7f4:	b2db      	uxtb	r3, r3
 800f7f6:	2b29      	cmp	r3, #41	@ 0x29
 800f7f8:	d10e      	bne.n	800f818 <I2C_Slave_ISR_DMA+0x30c>
 800f7fa:	69bb      	ldr	r3, [r7, #24]
 800f7fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f800:	d00a      	beq.n	800f818 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	2210      	movs	r2, #16
 800f808:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800f80a:	68f8      	ldr	r0, [r7, #12]
 800f80c:	f000 fea5 	bl	801055a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800f810:	68f8      	ldr	r0, [r7, #12]
 800f812:	f000 f9be 	bl	800fb92 <I2C_ITSlaveSeqCplt>
 800f816:	e033      	b.n	800f880 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2210      	movs	r2, #16
 800f81e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800f820:	e034      	b.n	800f88c <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	2210      	movs	r2, #16
 800f828:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f82e:	f043 0204 	orr.w	r2, r3, #4
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f83c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f83e:	69bb      	ldr	r3, [r7, #24]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d003      	beq.n	800f84c <I2C_Slave_ISR_DMA+0x340>
 800f844:	69bb      	ldr	r3, [r7, #24]
 800f846:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f84a:	d11f      	bne.n	800f88c <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f84c:	7dfb      	ldrb	r3, [r7, #23]
 800f84e:	2b21      	cmp	r3, #33	@ 0x21
 800f850:	d002      	beq.n	800f858 <I2C_Slave_ISR_DMA+0x34c>
 800f852:	7dfb      	ldrb	r3, [r7, #23]
 800f854:	2b29      	cmp	r3, #41	@ 0x29
 800f856:	d103      	bne.n	800f860 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	2221      	movs	r2, #33	@ 0x21
 800f85c:	631a      	str	r2, [r3, #48]	@ 0x30
 800f85e:	e008      	b.n	800f872 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f860:	7dfb      	ldrb	r3, [r7, #23]
 800f862:	2b22      	cmp	r3, #34	@ 0x22
 800f864:	d002      	beq.n	800f86c <I2C_Slave_ISR_DMA+0x360>
 800f866:	7dfb      	ldrb	r3, [r7, #23]
 800f868:	2b2a      	cmp	r3, #42	@ 0x2a
 800f86a:	d102      	bne.n	800f872 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2222      	movs	r2, #34	@ 0x22
 800f870:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f876:	4619      	mov	r1, r3
 800f878:	68f8      	ldr	r0, [r7, #12]
 800f87a:	f000 fd57 	bl	801032c <I2C_ITError>
      if (treatdmanack == 1U)
 800f87e:	e005      	b.n	800f88c <I2C_Slave_ISR_DMA+0x380>
 800f880:	e004      	b.n	800f88c <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	2210      	movs	r2, #16
 800f888:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f88a:	e00f      	b.n	800f8ac <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800f88c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f88e:	e00d      	b.n	800f8ac <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	f003 0308 	and.w	r3, r3, #8
 800f896:	2b00      	cmp	r3, #0
 800f898:	d008      	beq.n	800f8ac <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d003      	beq.n	800f8ac <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800f8a4:	68b9      	ldr	r1, [r7, #8]
 800f8a6:	68f8      	ldr	r0, [r7, #12]
 800f8a8:	f000 f8b2 	bl	800fa10 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f8b4:	2300      	movs	r3, #0
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3720      	adds	r7, #32
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop

0800f8c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b086      	sub	sp, #24
 800f8c4:	af02      	add	r7, sp, #8
 800f8c6:	60f8      	str	r0, [r7, #12]
 800f8c8:	4608      	mov	r0, r1
 800f8ca:	4611      	mov	r1, r2
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	817b      	strh	r3, [r7, #10]
 800f8d2:	460b      	mov	r3, r1
 800f8d4:	813b      	strh	r3, [r7, #8]
 800f8d6:	4613      	mov	r3, r2
 800f8d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800f8da:	88fb      	ldrh	r3, [r7, #6]
 800f8dc:	b2da      	uxtb	r2, r3
 800f8de:	8979      	ldrh	r1, [r7, #10]
 800f8e0:	4b20      	ldr	r3, [pc, #128]	@ (800f964 <I2C_RequestMemoryWrite+0xa4>)
 800f8e2:	9300      	str	r3, [sp, #0]
 800f8e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f8e8:	68f8      	ldr	r0, [r7, #12]
 800f8ea:	f001 f83b 	bl	8010964 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f8ee:	69fa      	ldr	r2, [r7, #28]
 800f8f0:	69b9      	ldr	r1, [r7, #24]
 800f8f2:	68f8      	ldr	r0, [r7, #12]
 800f8f4:	f000 fecc 	bl	8010690 <I2C_WaitOnTXISFlagUntilTimeout>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d001      	beq.n	800f902 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800f8fe:	2301      	movs	r3, #1
 800f900:	e02c      	b.n	800f95c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f902:	88fb      	ldrh	r3, [r7, #6]
 800f904:	2b01      	cmp	r3, #1
 800f906:	d105      	bne.n	800f914 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f908:	893b      	ldrh	r3, [r7, #8]
 800f90a:	b2da      	uxtb	r2, r3
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	629a      	str	r2, [r3, #40]	@ 0x28
 800f912:	e015      	b.n	800f940 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f914:	893b      	ldrh	r3, [r7, #8]
 800f916:	0a1b      	lsrs	r3, r3, #8
 800f918:	b29b      	uxth	r3, r3
 800f91a:	b2da      	uxtb	r2, r3
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f922:	69fa      	ldr	r2, [r7, #28]
 800f924:	69b9      	ldr	r1, [r7, #24]
 800f926:	68f8      	ldr	r0, [r7, #12]
 800f928:	f000 feb2 	bl	8010690 <I2C_WaitOnTXISFlagUntilTimeout>
 800f92c:	4603      	mov	r3, r0
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d001      	beq.n	800f936 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800f932:	2301      	movs	r3, #1
 800f934:	e012      	b.n	800f95c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f936:	893b      	ldrh	r3, [r7, #8]
 800f938:	b2da      	uxtb	r2, r3
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	9300      	str	r3, [sp, #0]
 800f944:	69bb      	ldr	r3, [r7, #24]
 800f946:	2200      	movs	r2, #0
 800f948:	2180      	movs	r1, #128	@ 0x80
 800f94a:	68f8      	ldr	r0, [r7, #12]
 800f94c:	f000 fe47 	bl	80105de <I2C_WaitOnFlagUntilTimeout>
 800f950:	4603      	mov	r3, r0
 800f952:	2b00      	cmp	r3, #0
 800f954:	d001      	beq.n	800f95a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800f956:	2301      	movs	r3, #1
 800f958:	e000      	b.n	800f95c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800f95a:	2300      	movs	r3, #0
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3710      	adds	r7, #16
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}
 800f964:	80002000 	.word	0x80002000

0800f968 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b086      	sub	sp, #24
 800f96c:	af02      	add	r7, sp, #8
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	4608      	mov	r0, r1
 800f972:	4611      	mov	r1, r2
 800f974:	461a      	mov	r2, r3
 800f976:	4603      	mov	r3, r0
 800f978:	817b      	strh	r3, [r7, #10]
 800f97a:	460b      	mov	r3, r1
 800f97c:	813b      	strh	r3, [r7, #8]
 800f97e:	4613      	mov	r3, r2
 800f980:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800f982:	88fb      	ldrh	r3, [r7, #6]
 800f984:	b2da      	uxtb	r2, r3
 800f986:	8979      	ldrh	r1, [r7, #10]
 800f988:	4b20      	ldr	r3, [pc, #128]	@ (800fa0c <I2C_RequestMemoryRead+0xa4>)
 800f98a:	9300      	str	r3, [sp, #0]
 800f98c:	2300      	movs	r3, #0
 800f98e:	68f8      	ldr	r0, [r7, #12]
 800f990:	f000 ffe8 	bl	8010964 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f994:	69fa      	ldr	r2, [r7, #28]
 800f996:	69b9      	ldr	r1, [r7, #24]
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	f000 fe79 	bl	8010690 <I2C_WaitOnTXISFlagUntilTimeout>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d001      	beq.n	800f9a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	e02c      	b.n	800fa02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800f9a8:	88fb      	ldrh	r3, [r7, #6]
 800f9aa:	2b01      	cmp	r3, #1
 800f9ac:	d105      	bne.n	800f9ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f9ae:	893b      	ldrh	r3, [r7, #8]
 800f9b0:	b2da      	uxtb	r2, r3
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	629a      	str	r2, [r3, #40]	@ 0x28
 800f9b8:	e015      	b.n	800f9e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800f9ba:	893b      	ldrh	r3, [r7, #8]
 800f9bc:	0a1b      	lsrs	r3, r3, #8
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	b2da      	uxtb	r2, r3
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800f9c8:	69fa      	ldr	r2, [r7, #28]
 800f9ca:	69b9      	ldr	r1, [r7, #24]
 800f9cc:	68f8      	ldr	r0, [r7, #12]
 800f9ce:	f000 fe5f 	bl	8010690 <I2C_WaitOnTXISFlagUntilTimeout>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d001      	beq.n	800f9dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800f9d8:	2301      	movs	r3, #1
 800f9da:	e012      	b.n	800fa02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800f9dc:	893b      	ldrh	r3, [r7, #8]
 800f9de:	b2da      	uxtb	r2, r3
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800f9e6:	69fb      	ldr	r3, [r7, #28]
 800f9e8:	9300      	str	r3, [sp, #0]
 800f9ea:	69bb      	ldr	r3, [r7, #24]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	2140      	movs	r1, #64	@ 0x40
 800f9f0:	68f8      	ldr	r0, [r7, #12]
 800f9f2:	f000 fdf4 	bl	80105de <I2C_WaitOnFlagUntilTimeout>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d001      	beq.n	800fa00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	e000      	b.n	800fa02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800fa00:	2300      	movs	r3, #0
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	3710      	adds	r7, #16
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}
 800fa0a:	bf00      	nop
 800fa0c:	80002000 	.word	0x80002000

0800fa10 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fa20:	b2db      	uxtb	r3, r3
 800fa22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800fa26:	2b28      	cmp	r3, #40	@ 0x28
 800fa28:	d16a      	bne.n	800fb00 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	699b      	ldr	r3, [r3, #24]
 800fa30:	0c1b      	lsrs	r3, r3, #16
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	f003 0301 	and.w	r3, r3, #1
 800fa38:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	699b      	ldr	r3, [r3, #24]
 800fa40:	0c1b      	lsrs	r3, r3, #16
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fa48:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	689b      	ldr	r3, [r3, #8]
 800fa50:	b29b      	uxth	r3, r3
 800fa52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fa56:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	68db      	ldr	r3, [r3, #12]
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fa64:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	68db      	ldr	r3, [r3, #12]
 800fa6a:	2b02      	cmp	r3, #2
 800fa6c:	d138      	bne.n	800fae0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800fa6e:	897b      	ldrh	r3, [r7, #10]
 800fa70:	09db      	lsrs	r3, r3, #7
 800fa72:	b29a      	uxth	r2, r3
 800fa74:	89bb      	ldrh	r3, [r7, #12]
 800fa76:	4053      	eors	r3, r2
 800fa78:	b29b      	uxth	r3, r3
 800fa7a:	f003 0306 	and.w	r3, r3, #6
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d11c      	bne.n	800fabc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800fa82:	897b      	ldrh	r3, [r7, #10]
 800fa84:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fa8a:	1c5a      	adds	r2, r3, #1
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fa94:	2b02      	cmp	r3, #2
 800fa96:	d13b      	bne.n	800fb10 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2208      	movs	r2, #8
 800faa4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2200      	movs	r2, #0
 800faaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800faae:	89ba      	ldrh	r2, [r7, #12]
 800fab0:	7bfb      	ldrb	r3, [r7, #15]
 800fab2:	4619      	mov	r1, r3
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f7ff f8c3 	bl	800ec40 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800faba:	e029      	b.n	800fb10 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800fabc:	893b      	ldrh	r3, [r7, #8]
 800fabe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fac0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f001 f803 	bl	8010ad0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2200      	movs	r2, #0
 800face:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fad2:	89ba      	ldrh	r2, [r7, #12]
 800fad4:	7bfb      	ldrb	r3, [r7, #15]
 800fad6:	4619      	mov	r1, r3
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f7ff f8b1 	bl	800ec40 <HAL_I2C_AddrCallback>
}
 800fade:	e017      	b.n	800fb10 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fae0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f000 fff3 	bl	8010ad0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2200      	movs	r2, #0
 800faee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800faf2:	89ba      	ldrh	r2, [r7, #12]
 800faf4:	7bfb      	ldrb	r3, [r7, #15]
 800faf6:	4619      	mov	r1, r3
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f7ff f8a1 	bl	800ec40 <HAL_I2C_AddrCallback>
}
 800fafe:	e007      	b.n	800fb10 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	2208      	movs	r2, #8
 800fb06:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800fb10:	bf00      	nop
 800fb12:	3710      	adds	r7, #16
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2200      	movs	r2, #0
 800fb24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fb2e:	b2db      	uxtb	r3, r3
 800fb30:	2b21      	cmp	r3, #33	@ 0x21
 800fb32:	d115      	bne.n	800fb60 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2220      	movs	r2, #32
 800fb38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2211      	movs	r2, #17
 800fb40:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2200      	movs	r2, #0
 800fb46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fb48:	2101      	movs	r1, #1
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 ffc0 	bl	8010ad0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2200      	movs	r2, #0
 800fb54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f7ff f849 	bl	800ebf0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800fb5e:	e014      	b.n	800fb8a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2220      	movs	r2, #32
 800fb64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2212      	movs	r2, #18
 800fb6c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2200      	movs	r2, #0
 800fb72:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fb74:	2102      	movs	r1, #2
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 ffaa 	bl	8010ad0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f7ff f83d 	bl	800ec04 <HAL_I2C_MasterRxCpltCallback>
}
 800fb8a:	bf00      	nop
 800fb8c:	3708      	adds	r7, #8
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}

0800fb92 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fb92:	b580      	push	{r7, lr}
 800fb94:	b084      	sub	sp, #16
 800fb96:	af00      	add	r7, sp, #0
 800fb98:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2200      	movs	r2, #0
 800fba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d008      	beq.n	800fbc6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	681a      	ldr	r2, [r3, #0]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fbc2:	601a      	str	r2, [r3, #0]
 800fbc4:	e00c      	b.n	800fbe0 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d007      	beq.n	800fbe0 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fbde:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fbe6:	b2db      	uxtb	r3, r3
 800fbe8:	2b29      	cmp	r3, #41	@ 0x29
 800fbea:	d112      	bne.n	800fc12 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2228      	movs	r2, #40	@ 0x28
 800fbf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2221      	movs	r2, #33	@ 0x21
 800fbf8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fbfa:	2101      	movs	r1, #1
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f000 ff67 	bl	8010ad0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2200      	movs	r2, #0
 800fc06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f7ff f804 	bl	800ec18 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fc10:	e017      	b.n	800fc42 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc18:	b2db      	uxtb	r3, r3
 800fc1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc1c:	d111      	bne.n	800fc42 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2228      	movs	r2, #40	@ 0x28
 800fc22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2222      	movs	r2, #34	@ 0x22
 800fc2a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fc2c:	2102      	movs	r1, #2
 800fc2e:	6878      	ldr	r0, [r7, #4]
 800fc30:	f000 ff4e 	bl	8010ad0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2200      	movs	r2, #0
 800fc38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f7fe fff5 	bl	800ec2c <HAL_I2C_SlaveRxCpltCallback>
}
 800fc42:	bf00      	nop
 800fc44:	3710      	adds	r7, #16
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
	...

0800fc4c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b086      	sub	sp, #24
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	2220      	movs	r2, #32
 800fc60:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc68:	b2db      	uxtb	r3, r3
 800fc6a:	2b21      	cmp	r3, #33	@ 0x21
 800fc6c:	d107      	bne.n	800fc7e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fc6e:	2101      	movs	r1, #1
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f000 ff2d 	bl	8010ad0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2211      	movs	r2, #17
 800fc7a:	631a      	str	r2, [r3, #48]	@ 0x30
 800fc7c:	e00c      	b.n	800fc98 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc84:	b2db      	uxtb	r3, r3
 800fc86:	2b22      	cmp	r3, #34	@ 0x22
 800fc88:	d106      	bne.n	800fc98 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800fc8a:	2102      	movs	r1, #2
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f000 ff1f 	bl	8010ad0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2212      	movs	r2, #18
 800fc96:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	6859      	ldr	r1, [r3, #4]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681a      	ldr	r2, [r3, #0]
 800fca2:	4b4c      	ldr	r3, [pc, #304]	@ (800fdd4 <I2C_ITMasterCplt+0x188>)
 800fca4:	400b      	ands	r3, r1
 800fca6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	4a49      	ldr	r2, [pc, #292]	@ (800fdd8 <I2C_ITMasterCplt+0x18c>)
 800fcb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	f003 0310 	and.w	r3, r3, #16
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d009      	beq.n	800fcd2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	2210      	movs	r2, #16
 800fcc4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcca:	f043 0204 	orr.w	r2, r3, #4
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	2b60      	cmp	r3, #96	@ 0x60
 800fcdc:	d10a      	bne.n	800fcf4 <I2C_ITMasterCplt+0xa8>
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	f003 0304 	and.w	r3, r3, #4
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d005      	beq.n	800fcf4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcee:	b2db      	uxtb	r3, r3
 800fcf0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800fcf2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f000 fc30 	bl	801055a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcfe:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd06:	b2db      	uxtb	r3, r3
 800fd08:	2b60      	cmp	r3, #96	@ 0x60
 800fd0a:	d002      	beq.n	800fd12 <I2C_ITMasterCplt+0xc6>
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d006      	beq.n	800fd20 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd16:	4619      	mov	r1, r3
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 fb07 	bl	801032c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fd1e:	e054      	b.n	800fdca <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	2b21      	cmp	r3, #33	@ 0x21
 800fd2a:	d124      	bne.n	800fd76 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2220      	movs	r2, #32
 800fd30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2200      	movs	r2, #0
 800fd38:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fd40:	b2db      	uxtb	r3, r3
 800fd42:	2b40      	cmp	r3, #64	@ 0x40
 800fd44:	d10b      	bne.n	800fd5e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f7fe ff8a 	bl	800ec70 <HAL_I2C_MemTxCpltCallback>
}
 800fd5c:	e035      	b.n	800fdca <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2200      	movs	r2, #0
 800fd62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f7fe ff3e 	bl	800ebf0 <HAL_I2C_MasterTxCpltCallback>
}
 800fd74:	e029      	b.n	800fdca <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd7c:	b2db      	uxtb	r3, r3
 800fd7e:	2b22      	cmp	r3, #34	@ 0x22
 800fd80:	d123      	bne.n	800fdca <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2220      	movs	r2, #32
 800fd86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fd96:	b2db      	uxtb	r3, r3
 800fd98:	2b40      	cmp	r3, #64	@ 0x40
 800fd9a:	d10b      	bne.n	800fdb4 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2200      	movs	r2, #0
 800fda8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f7f6 fa8b 	bl	80062c8 <HAL_I2C_MemRxCpltCallback>
}
 800fdb2:	e00a      	b.n	800fdca <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f7fe ff1d 	bl	800ec04 <HAL_I2C_MasterRxCpltCallback>
}
 800fdca:	bf00      	nop
 800fdcc:	3718      	adds	r7, #24
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
 800fdd2:	bf00      	nop
 800fdd4:	fe00e800 	.word	0xfe00e800
 800fdd8:	ffff0000 	.word	0xffff0000

0800fddc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b086      	sub	sp, #24
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdf6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fdfe:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	2220      	movs	r2, #32
 800fe06:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800fe08:	7afb      	ldrb	r3, [r7, #11]
 800fe0a:	2b21      	cmp	r3, #33	@ 0x21
 800fe0c:	d002      	beq.n	800fe14 <I2C_ITSlaveCplt+0x38>
 800fe0e:	7afb      	ldrb	r3, [r7, #11]
 800fe10:	2b29      	cmp	r3, #41	@ 0x29
 800fe12:	d108      	bne.n	800fe26 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800fe14:	f248 0101 	movw	r1, #32769	@ 0x8001
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f000 fe59 	bl	8010ad0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2221      	movs	r2, #33	@ 0x21
 800fe22:	631a      	str	r2, [r3, #48]	@ 0x30
 800fe24:	e019      	b.n	800fe5a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800fe26:	7afb      	ldrb	r3, [r7, #11]
 800fe28:	2b22      	cmp	r3, #34	@ 0x22
 800fe2a:	d002      	beq.n	800fe32 <I2C_ITSlaveCplt+0x56>
 800fe2c:	7afb      	ldrb	r3, [r7, #11]
 800fe2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe30:	d108      	bne.n	800fe44 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800fe32:	f248 0102 	movw	r1, #32770	@ 0x8002
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f000 fe4a 	bl	8010ad0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2222      	movs	r2, #34	@ 0x22
 800fe40:	631a      	str	r2, [r3, #48]	@ 0x30
 800fe42:	e00a      	b.n	800fe5a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800fe44:	7afb      	ldrb	r3, [r7, #11]
 800fe46:	2b28      	cmp	r3, #40	@ 0x28
 800fe48:	d107      	bne.n	800fe5a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800fe4a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f000 fe3e 	bl	8010ad0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2200      	movs	r2, #0
 800fe58:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	685a      	ldr	r2, [r3, #4]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fe68:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	6859      	ldr	r1, [r3, #4]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681a      	ldr	r2, [r3, #0]
 800fe74:	4b7f      	ldr	r3, [pc, #508]	@ (8010074 <I2C_ITSlaveCplt+0x298>)
 800fe76:	400b      	ands	r3, r1
 800fe78:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f000 fb6d 	bl	801055a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d07a      	beq.n	800ff80 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	681a      	ldr	r2, [r3, #0]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fe98:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	f000 8111 	beq.w	80100c6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	4a73      	ldr	r2, [pc, #460]	@ (8010078 <I2C_ITSlaveCplt+0x29c>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d059      	beq.n	800ff64 <I2C_ITSlaveCplt+0x188>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	4a71      	ldr	r2, [pc, #452]	@ (801007c <I2C_ITSlaveCplt+0x2a0>)
 800feb8:	4293      	cmp	r3, r2
 800feba:	d053      	beq.n	800ff64 <I2C_ITSlaveCplt+0x188>
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	4a6f      	ldr	r2, [pc, #444]	@ (8010080 <I2C_ITSlaveCplt+0x2a4>)
 800fec4:	4293      	cmp	r3, r2
 800fec6:	d04d      	beq.n	800ff64 <I2C_ITSlaveCplt+0x188>
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	4a6d      	ldr	r2, [pc, #436]	@ (8010084 <I2C_ITSlaveCplt+0x2a8>)
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d047      	beq.n	800ff64 <I2C_ITSlaveCplt+0x188>
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	4a6b      	ldr	r2, [pc, #428]	@ (8010088 <I2C_ITSlaveCplt+0x2ac>)
 800fedc:	4293      	cmp	r3, r2
 800fede:	d041      	beq.n	800ff64 <I2C_ITSlaveCplt+0x188>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	4a69      	ldr	r2, [pc, #420]	@ (801008c <I2C_ITSlaveCplt+0x2b0>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d03b      	beq.n	800ff64 <I2C_ITSlaveCplt+0x188>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	4a67      	ldr	r2, [pc, #412]	@ (8010090 <I2C_ITSlaveCplt+0x2b4>)
 800fef4:	4293      	cmp	r3, r2
 800fef6:	d035      	beq.n	800ff64 <I2C_ITSlaveCplt+0x188>
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	4a65      	ldr	r2, [pc, #404]	@ (8010094 <I2C_ITSlaveCplt+0x2b8>)
 800ff00:	4293      	cmp	r3, r2
 800ff02:	d02f      	beq.n	800ff64 <I2C_ITSlaveCplt+0x188>
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	4a63      	ldr	r2, [pc, #396]	@ (8010098 <I2C_ITSlaveCplt+0x2bc>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d029      	beq.n	800ff64 <I2C_ITSlaveCplt+0x188>
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	4a61      	ldr	r2, [pc, #388]	@ (801009c <I2C_ITSlaveCplt+0x2c0>)
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	d023      	beq.n	800ff64 <I2C_ITSlaveCplt+0x188>
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	4a5f      	ldr	r2, [pc, #380]	@ (80100a0 <I2C_ITSlaveCplt+0x2c4>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d01d      	beq.n	800ff64 <I2C_ITSlaveCplt+0x188>
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	4a5d      	ldr	r2, [pc, #372]	@ (80100a4 <I2C_ITSlaveCplt+0x2c8>)
 800ff30:	4293      	cmp	r3, r2
 800ff32:	d017      	beq.n	800ff64 <I2C_ITSlaveCplt+0x188>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	4a5b      	ldr	r2, [pc, #364]	@ (80100a8 <I2C_ITSlaveCplt+0x2cc>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d011      	beq.n	800ff64 <I2C_ITSlaveCplt+0x188>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	4a59      	ldr	r2, [pc, #356]	@ (80100ac <I2C_ITSlaveCplt+0x2d0>)
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d00b      	beq.n	800ff64 <I2C_ITSlaveCplt+0x188>
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	4a57      	ldr	r2, [pc, #348]	@ (80100b0 <I2C_ITSlaveCplt+0x2d4>)
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d005      	beq.n	800ff64 <I2C_ITSlaveCplt+0x188>
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	4a55      	ldr	r2, [pc, #340]	@ (80100b4 <I2C_ITSlaveCplt+0x2d8>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d105      	bne.n	800ff70 <I2C_ITSlaveCplt+0x194>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	685b      	ldr	r3, [r3, #4]
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	e004      	b.n	800ff7a <I2C_ITSlaveCplt+0x19e>
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	685b      	ldr	r3, [r3, #4]
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800ff7e:	e0a2      	b.n	80100c6 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	f000 809d 	beq.w	80100c6 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ff9a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	f000 8090 	beq.w	80100c6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4a32      	ldr	r2, [pc, #200]	@ (8010078 <I2C_ITSlaveCplt+0x29c>)
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	d059      	beq.n	8010066 <I2C_ITSlaveCplt+0x28a>
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	4a30      	ldr	r2, [pc, #192]	@ (801007c <I2C_ITSlaveCplt+0x2a0>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d053      	beq.n	8010066 <I2C_ITSlaveCplt+0x28a>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4a2e      	ldr	r2, [pc, #184]	@ (8010080 <I2C_ITSlaveCplt+0x2a4>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d04d      	beq.n	8010066 <I2C_ITSlaveCplt+0x28a>
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4a2c      	ldr	r2, [pc, #176]	@ (8010084 <I2C_ITSlaveCplt+0x2a8>)
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d047      	beq.n	8010066 <I2C_ITSlaveCplt+0x28a>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	4a2a      	ldr	r2, [pc, #168]	@ (8010088 <I2C_ITSlaveCplt+0x2ac>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d041      	beq.n	8010066 <I2C_ITSlaveCplt+0x28a>
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	4a28      	ldr	r2, [pc, #160]	@ (801008c <I2C_ITSlaveCplt+0x2b0>)
 800ffea:	4293      	cmp	r3, r2
 800ffec:	d03b      	beq.n	8010066 <I2C_ITSlaveCplt+0x28a>
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	4a26      	ldr	r2, [pc, #152]	@ (8010090 <I2C_ITSlaveCplt+0x2b4>)
 800fff6:	4293      	cmp	r3, r2
 800fff8:	d035      	beq.n	8010066 <I2C_ITSlaveCplt+0x28a>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4a24      	ldr	r2, [pc, #144]	@ (8010094 <I2C_ITSlaveCplt+0x2b8>)
 8010002:	4293      	cmp	r3, r2
 8010004:	d02f      	beq.n	8010066 <I2C_ITSlaveCplt+0x28a>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	4a22      	ldr	r2, [pc, #136]	@ (8010098 <I2C_ITSlaveCplt+0x2bc>)
 801000e:	4293      	cmp	r3, r2
 8010010:	d029      	beq.n	8010066 <I2C_ITSlaveCplt+0x28a>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	4a20      	ldr	r2, [pc, #128]	@ (801009c <I2C_ITSlaveCplt+0x2c0>)
 801001a:	4293      	cmp	r3, r2
 801001c:	d023      	beq.n	8010066 <I2C_ITSlaveCplt+0x28a>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	4a1e      	ldr	r2, [pc, #120]	@ (80100a0 <I2C_ITSlaveCplt+0x2c4>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d01d      	beq.n	8010066 <I2C_ITSlaveCplt+0x28a>
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	4a1c      	ldr	r2, [pc, #112]	@ (80100a4 <I2C_ITSlaveCplt+0x2c8>)
 8010032:	4293      	cmp	r3, r2
 8010034:	d017      	beq.n	8010066 <I2C_ITSlaveCplt+0x28a>
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	4a1a      	ldr	r2, [pc, #104]	@ (80100a8 <I2C_ITSlaveCplt+0x2cc>)
 801003e:	4293      	cmp	r3, r2
 8010040:	d011      	beq.n	8010066 <I2C_ITSlaveCplt+0x28a>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4a18      	ldr	r2, [pc, #96]	@ (80100ac <I2C_ITSlaveCplt+0x2d0>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d00b      	beq.n	8010066 <I2C_ITSlaveCplt+0x28a>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	4a16      	ldr	r2, [pc, #88]	@ (80100b0 <I2C_ITSlaveCplt+0x2d4>)
 8010056:	4293      	cmp	r3, r2
 8010058:	d005      	beq.n	8010066 <I2C_ITSlaveCplt+0x28a>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4a14      	ldr	r2, [pc, #80]	@ (80100b4 <I2C_ITSlaveCplt+0x2d8>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d128      	bne.n	80100b8 <I2C_ITSlaveCplt+0x2dc>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	b29b      	uxth	r3, r3
 8010070:	e027      	b.n	80100c2 <I2C_ITSlaveCplt+0x2e6>
 8010072:	bf00      	nop
 8010074:	fe00e800 	.word	0xfe00e800
 8010078:	40020010 	.word	0x40020010
 801007c:	40020028 	.word	0x40020028
 8010080:	40020040 	.word	0x40020040
 8010084:	40020058 	.word	0x40020058
 8010088:	40020070 	.word	0x40020070
 801008c:	40020088 	.word	0x40020088
 8010090:	400200a0 	.word	0x400200a0
 8010094:	400200b8 	.word	0x400200b8
 8010098:	40020410 	.word	0x40020410
 801009c:	40020428 	.word	0x40020428
 80100a0:	40020440 	.word	0x40020440
 80100a4:	40020458 	.word	0x40020458
 80100a8:	40020470 	.word	0x40020470
 80100ac:	40020488 	.word	0x40020488
 80100b0:	400204a0 	.word	0x400204a0
 80100b4:	400204b8 	.word	0x400204b8
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	b29b      	uxth	r3, r3
 80100c2:	687a      	ldr	r2, [r7, #4]
 80100c4:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	f003 0304 	and.w	r3, r3, #4
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d020      	beq.n	8010112 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	f023 0304 	bic.w	r3, r3, #4
 80100d6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100e2:	b2d2      	uxtb	r2, r2
 80100e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100ea:	1c5a      	adds	r2, r3, #1
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d00c      	beq.n	8010112 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100fc:	3b01      	subs	r3, #1
 80100fe:	b29a      	uxth	r2, r3
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010108:	b29b      	uxth	r3, r3
 801010a:	3b01      	subs	r3, #1
 801010c:	b29a      	uxth	r2, r3
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010116:	b29b      	uxth	r3, r3
 8010118:	2b00      	cmp	r3, #0
 801011a:	d005      	beq.n	8010128 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010120:	f043 0204 	orr.w	r2, r3, #4
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	f003 0310 	and.w	r3, r3, #16
 801012e:	2b00      	cmp	r3, #0
 8010130:	d049      	beq.n	80101c6 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010138:	2b00      	cmp	r3, #0
 801013a:	d044      	beq.n	80101c6 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010140:	b29b      	uxth	r3, r3
 8010142:	2b00      	cmp	r3, #0
 8010144:	d128      	bne.n	8010198 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801014c:	b2db      	uxtb	r3, r3
 801014e:	2b28      	cmp	r3, #40	@ 0x28
 8010150:	d108      	bne.n	8010164 <I2C_ITSlaveCplt+0x388>
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010158:	d104      	bne.n	8010164 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 801015a:	6979      	ldr	r1, [r7, #20]
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f000 f891 	bl	8010284 <I2C_ITListenCplt>
 8010162:	e030      	b.n	80101c6 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801016a:	b2db      	uxtb	r3, r3
 801016c:	2b29      	cmp	r3, #41	@ 0x29
 801016e:	d10e      	bne.n	801018e <I2C_ITSlaveCplt+0x3b2>
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8010176:	d00a      	beq.n	801018e <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	2210      	movs	r2, #16
 801017e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f000 f9ea 	bl	801055a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	f7ff fd03 	bl	800fb92 <I2C_ITSlaveSeqCplt>
 801018c:	e01b      	b.n	80101c6 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	2210      	movs	r2, #16
 8010194:	61da      	str	r2, [r3, #28]
 8010196:	e016      	b.n	80101c6 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2210      	movs	r2, #16
 801019e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101a4:	f043 0204 	orr.w	r2, r3, #4
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d003      	beq.n	80101ba <I2C_ITSlaveCplt+0x3de>
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80101b8:	d105      	bne.n	80101c6 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101be:	4619      	mov	r1, r3
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f000 f8b3 	bl	801032c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2200      	movs	r2, #0
 80101ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2200      	movs	r2, #0
 80101d2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d010      	beq.n	80101fe <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101e0:	4619      	mov	r1, r3
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f000 f8a2 	bl	801032c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	2b28      	cmp	r3, #40	@ 0x28
 80101f2:	d141      	bne.n	8010278 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80101f4:	6979      	ldr	r1, [r7, #20]
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	f000 f844 	bl	8010284 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80101fc:	e03c      	b.n	8010278 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010202:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8010206:	d014      	beq.n	8010232 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f7ff fcc2 	bl	800fb92 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	4a1b      	ldr	r2, [pc, #108]	@ (8010280 <I2C_ITSlaveCplt+0x4a4>)
 8010212:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2220      	movs	r2, #32
 8010218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2200      	movs	r2, #0
 8010220:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2200      	movs	r2, #0
 8010226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f7fe fd16 	bl	800ec5c <HAL_I2C_ListenCpltCallback>
}
 8010230:	e022      	b.n	8010278 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010238:	b2db      	uxtb	r3, r3
 801023a:	2b22      	cmp	r3, #34	@ 0x22
 801023c:	d10e      	bne.n	801025c <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2220      	movs	r2, #32
 8010242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2200      	movs	r2, #0
 801024a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2200      	movs	r2, #0
 8010250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f7fe fce9 	bl	800ec2c <HAL_I2C_SlaveRxCpltCallback>
}
 801025a:	e00d      	b.n	8010278 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2220      	movs	r2, #32
 8010260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2200      	movs	r2, #0
 8010268:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2200      	movs	r2, #0
 801026e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f7fe fcd0 	bl	800ec18 <HAL_I2C_SlaveTxCpltCallback>
}
 8010278:	bf00      	nop
 801027a:	3718      	adds	r7, #24
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}
 8010280:	ffff0000 	.word	0xffff0000

08010284 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	4a25      	ldr	r2, [pc, #148]	@ (8010328 <I2C_ITListenCplt+0xa4>)
 8010292:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2200      	movs	r2, #0
 8010298:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2220      	movs	r2, #32
 801029e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2200      	movs	r2, #0
 80102a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2200      	movs	r2, #0
 80102ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	f003 0304 	and.w	r3, r3, #4
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d022      	beq.n	8010300 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102c4:	b2d2      	uxtb	r2, r2
 80102c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102cc:	1c5a      	adds	r2, r3, #1
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d012      	beq.n	8010300 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102de:	3b01      	subs	r3, #1
 80102e0:	b29a      	uxth	r2, r3
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80102ea:	b29b      	uxth	r3, r3
 80102ec:	3b01      	subs	r3, #1
 80102ee:	b29a      	uxth	r2, r3
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102f8:	f043 0204 	orr.w	r2, r3, #4
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010300:	f248 0103 	movw	r1, #32771	@ 0x8003
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f000 fbe3 	bl	8010ad0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2210      	movs	r2, #16
 8010310:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2200      	movs	r2, #0
 8010316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f7fe fc9e 	bl	800ec5c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8010320:	bf00      	nop
 8010322:	3708      	adds	r7, #8
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	ffff0000 	.word	0xffff0000

0801032c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b084      	sub	sp, #16
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801033c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2200      	movs	r2, #0
 8010342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	4a6d      	ldr	r2, [pc, #436]	@ (8010500 <I2C_ITError+0x1d4>)
 801034a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2200      	movs	r2, #0
 8010350:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	431a      	orrs	r2, r3
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801035e:	7bfb      	ldrb	r3, [r7, #15]
 8010360:	2b28      	cmp	r3, #40	@ 0x28
 8010362:	d005      	beq.n	8010370 <I2C_ITError+0x44>
 8010364:	7bfb      	ldrb	r3, [r7, #15]
 8010366:	2b29      	cmp	r3, #41	@ 0x29
 8010368:	d002      	beq.n	8010370 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801036a:	7bfb      	ldrb	r3, [r7, #15]
 801036c:	2b2a      	cmp	r3, #42	@ 0x2a
 801036e:	d10b      	bne.n	8010388 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010370:	2103      	movs	r1, #3
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f000 fbac 	bl	8010ad0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2228      	movs	r2, #40	@ 0x28
 801037c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	4a60      	ldr	r2, [pc, #384]	@ (8010504 <I2C_ITError+0x1d8>)
 8010384:	635a      	str	r2, [r3, #52]	@ 0x34
 8010386:	e030      	b.n	80103ea <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010388:	f248 0103 	movw	r1, #32771	@ 0x8003
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f000 fb9f 	bl	8010ad0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	f000 f8e1 	bl	801055a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801039e:	b2db      	uxtb	r3, r3
 80103a0:	2b60      	cmp	r3, #96	@ 0x60
 80103a2:	d01f      	beq.n	80103e4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2220      	movs	r2, #32
 80103a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	699b      	ldr	r3, [r3, #24]
 80103b2:	f003 0320 	and.w	r3, r3, #32
 80103b6:	2b20      	cmp	r3, #32
 80103b8:	d114      	bne.n	80103e4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	699b      	ldr	r3, [r3, #24]
 80103c0:	f003 0310 	and.w	r3, r3, #16
 80103c4:	2b10      	cmp	r3, #16
 80103c6:	d109      	bne.n	80103dc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	2210      	movs	r2, #16
 80103ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103d4:	f043 0204 	orr.w	r2, r3, #4
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	2220      	movs	r2, #32
 80103e2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2200      	movs	r2, #0
 80103e8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103ee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d039      	beq.n	801046c <I2C_ITError+0x140>
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	2b11      	cmp	r3, #17
 80103fc:	d002      	beq.n	8010404 <I2C_ITError+0xd8>
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	2b21      	cmp	r3, #33	@ 0x21
 8010402:	d133      	bne.n	801046c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801040e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010412:	d107      	bne.n	8010424 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	681a      	ldr	r2, [r3, #0]
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010422:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010428:	4618      	mov	r0, r3
 801042a:	f7fd f9f7 	bl	800d81c <HAL_DMA_GetState>
 801042e:	4603      	mov	r3, r0
 8010430:	2b01      	cmp	r3, #1
 8010432:	d017      	beq.n	8010464 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010438:	4a33      	ldr	r2, [pc, #204]	@ (8010508 <I2C_ITError+0x1dc>)
 801043a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010448:	4618      	mov	r0, r3
 801044a:	f7fc f877 	bl	800c53c <HAL_DMA_Abort_IT>
 801044e:	4603      	mov	r3, r0
 8010450:	2b00      	cmp	r3, #0
 8010452:	d04d      	beq.n	80104f0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801045a:	687a      	ldr	r2, [r7, #4]
 801045c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 801045e:	4610      	mov	r0, r2
 8010460:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010462:	e045      	b.n	80104f0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f000 f851 	bl	801050c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801046a:	e041      	b.n	80104f0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010470:	2b00      	cmp	r3, #0
 8010472:	d039      	beq.n	80104e8 <I2C_ITError+0x1bc>
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	2b12      	cmp	r3, #18
 8010478:	d002      	beq.n	8010480 <I2C_ITError+0x154>
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	2b22      	cmp	r3, #34	@ 0x22
 801047e:	d133      	bne.n	80104e8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801048a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801048e:	d107      	bne.n	80104a0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	681a      	ldr	r2, [r3, #0]
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801049e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7fd f9b9 	bl	800d81c <HAL_DMA_GetState>
 80104aa:	4603      	mov	r3, r0
 80104ac:	2b01      	cmp	r3, #1
 80104ae:	d017      	beq.n	80104e0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104b4:	4a14      	ldr	r2, [pc, #80]	@ (8010508 <I2C_ITError+0x1dc>)
 80104b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2200      	movs	r2, #0
 80104bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7fc f839 	bl	800c53c <HAL_DMA_Abort_IT>
 80104ca:	4603      	mov	r3, r0
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d011      	beq.n	80104f4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80104d6:	687a      	ldr	r2, [r7, #4]
 80104d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80104da:	4610      	mov	r0, r2
 80104dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80104de:	e009      	b.n	80104f4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f000 f813 	bl	801050c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80104e6:	e005      	b.n	80104f4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f000 f80f 	bl	801050c <I2C_TreatErrorCallback>
  }
}
 80104ee:	e002      	b.n	80104f6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80104f0:	bf00      	nop
 80104f2:	e000      	b.n	80104f6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80104f4:	bf00      	nop
}
 80104f6:	bf00      	nop
 80104f8:	3710      	adds	r7, #16
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop
 8010500:	ffff0000 	.word	0xffff0000
 8010504:	0800eef9 	.word	0x0800eef9
 8010508:	080105a3 	.word	0x080105a3

0801050c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801051a:	b2db      	uxtb	r3, r3
 801051c:	2b60      	cmp	r3, #96	@ 0x60
 801051e:	d10e      	bne.n	801053e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2220      	movs	r2, #32
 8010524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2200      	movs	r2, #0
 801052c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2200      	movs	r2, #0
 8010532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f7fe fbae 	bl	800ec98 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801053c:	e009      	b.n	8010552 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2200      	movs	r2, #0
 8010542:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2200      	movs	r2, #0
 8010548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f7fe fb99 	bl	800ec84 <HAL_I2C_ErrorCallback>
}
 8010552:	bf00      	nop
 8010554:	3708      	adds	r7, #8
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}

0801055a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801055a:	b480      	push	{r7}
 801055c:	b083      	sub	sp, #12
 801055e:	af00      	add	r7, sp, #0
 8010560:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	699b      	ldr	r3, [r3, #24]
 8010568:	f003 0302 	and.w	r3, r3, #2
 801056c:	2b02      	cmp	r3, #2
 801056e:	d103      	bne.n	8010578 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	2200      	movs	r2, #0
 8010576:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	699b      	ldr	r3, [r3, #24]
 801057e:	f003 0301 	and.w	r3, r3, #1
 8010582:	2b01      	cmp	r3, #1
 8010584:	d007      	beq.n	8010596 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	699a      	ldr	r2, [r3, #24]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	f042 0201 	orr.w	r2, r2, #1
 8010594:	619a      	str	r2, [r3, #24]
  }
}
 8010596:	bf00      	nop
 8010598:	370c      	adds	r7, #12
 801059a:	46bd      	mov	sp, r7
 801059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a0:	4770      	bx	lr

080105a2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b084      	sub	sp, #16
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105ae:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d003      	beq.n	80105c0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105bc:	2200      	movs	r2, #0
 80105be:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d003      	beq.n	80105d0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105cc:	2200      	movs	r2, #0
 80105ce:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80105d0:	68f8      	ldr	r0, [r7, #12]
 80105d2:	f7ff ff9b 	bl	801050c <I2C_TreatErrorCallback>
}
 80105d6:	bf00      	nop
 80105d8:	3710      	adds	r7, #16
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}

080105de <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80105de:	b580      	push	{r7, lr}
 80105e0:	b084      	sub	sp, #16
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	60f8      	str	r0, [r7, #12]
 80105e6:	60b9      	str	r1, [r7, #8]
 80105e8:	603b      	str	r3, [r7, #0]
 80105ea:	4613      	mov	r3, r2
 80105ec:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80105ee:	e03b      	b.n	8010668 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80105f0:	69ba      	ldr	r2, [r7, #24]
 80105f2:	6839      	ldr	r1, [r7, #0]
 80105f4:	68f8      	ldr	r0, [r7, #12]
 80105f6:	f000 f8d5 	bl	80107a4 <I2C_IsErrorOccurred>
 80105fa:	4603      	mov	r3, r0
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d001      	beq.n	8010604 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8010600:	2301      	movs	r3, #1
 8010602:	e041      	b.n	8010688 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	f1b3 3fff 	cmp.w	r3, #4294967295
 801060a:	d02d      	beq.n	8010668 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801060c:	f7f8 fd5e 	bl	80090cc <HAL_GetTick>
 8010610:	4602      	mov	r2, r0
 8010612:	69bb      	ldr	r3, [r7, #24]
 8010614:	1ad3      	subs	r3, r2, r3
 8010616:	683a      	ldr	r2, [r7, #0]
 8010618:	429a      	cmp	r2, r3
 801061a:	d302      	bcc.n	8010622 <I2C_WaitOnFlagUntilTimeout+0x44>
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d122      	bne.n	8010668 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	699a      	ldr	r2, [r3, #24]
 8010628:	68bb      	ldr	r3, [r7, #8]
 801062a:	4013      	ands	r3, r2
 801062c:	68ba      	ldr	r2, [r7, #8]
 801062e:	429a      	cmp	r2, r3
 8010630:	bf0c      	ite	eq
 8010632:	2301      	moveq	r3, #1
 8010634:	2300      	movne	r3, #0
 8010636:	b2db      	uxtb	r3, r3
 8010638:	461a      	mov	r2, r3
 801063a:	79fb      	ldrb	r3, [r7, #7]
 801063c:	429a      	cmp	r2, r3
 801063e:	d113      	bne.n	8010668 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010644:	f043 0220 	orr.w	r2, r3, #32
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	2220      	movs	r2, #32
 8010650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	2200      	movs	r2, #0
 8010658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	2200      	movs	r2, #0
 8010660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8010664:	2301      	movs	r3, #1
 8010666:	e00f      	b.n	8010688 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	699a      	ldr	r2, [r3, #24]
 801066e:	68bb      	ldr	r3, [r7, #8]
 8010670:	4013      	ands	r3, r2
 8010672:	68ba      	ldr	r2, [r7, #8]
 8010674:	429a      	cmp	r2, r3
 8010676:	bf0c      	ite	eq
 8010678:	2301      	moveq	r3, #1
 801067a:	2300      	movne	r3, #0
 801067c:	b2db      	uxtb	r3, r3
 801067e:	461a      	mov	r2, r3
 8010680:	79fb      	ldrb	r3, [r7, #7]
 8010682:	429a      	cmp	r2, r3
 8010684:	d0b4      	beq.n	80105f0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010686:	2300      	movs	r3, #0
}
 8010688:	4618      	mov	r0, r3
 801068a:	3710      	adds	r7, #16
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}

08010690 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b084      	sub	sp, #16
 8010694:	af00      	add	r7, sp, #0
 8010696:	60f8      	str	r0, [r7, #12]
 8010698:	60b9      	str	r1, [r7, #8]
 801069a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801069c:	e033      	b.n	8010706 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801069e:	687a      	ldr	r2, [r7, #4]
 80106a0:	68b9      	ldr	r1, [r7, #8]
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	f000 f87e 	bl	80107a4 <I2C_IsErrorOccurred>
 80106a8:	4603      	mov	r3, r0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d001      	beq.n	80106b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80106ae:	2301      	movs	r3, #1
 80106b0:	e031      	b.n	8010716 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80106b2:	68bb      	ldr	r3, [r7, #8]
 80106b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106b8:	d025      	beq.n	8010706 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80106ba:	f7f8 fd07 	bl	80090cc <HAL_GetTick>
 80106be:	4602      	mov	r2, r0
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	1ad3      	subs	r3, r2, r3
 80106c4:	68ba      	ldr	r2, [r7, #8]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d302      	bcc.n	80106d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d11a      	bne.n	8010706 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	699b      	ldr	r3, [r3, #24]
 80106d6:	f003 0302 	and.w	r3, r3, #2
 80106da:	2b02      	cmp	r3, #2
 80106dc:	d013      	beq.n	8010706 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106e2:	f043 0220 	orr.w	r2, r3, #32
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	2220      	movs	r2, #32
 80106ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	2200      	movs	r2, #0
 80106f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	2200      	movs	r2, #0
 80106fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010702:	2301      	movs	r3, #1
 8010704:	e007      	b.n	8010716 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	699b      	ldr	r3, [r3, #24]
 801070c:	f003 0302 	and.w	r3, r3, #2
 8010710:	2b02      	cmp	r3, #2
 8010712:	d1c4      	bne.n	801069e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8010714:	2300      	movs	r3, #0
}
 8010716:	4618      	mov	r0, r3
 8010718:	3710      	adds	r7, #16
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}

0801071e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801071e:	b580      	push	{r7, lr}
 8010720:	b084      	sub	sp, #16
 8010722:	af00      	add	r7, sp, #0
 8010724:	60f8      	str	r0, [r7, #12]
 8010726:	60b9      	str	r1, [r7, #8]
 8010728:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801072a:	e02f      	b.n	801078c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801072c:	687a      	ldr	r2, [r7, #4]
 801072e:	68b9      	ldr	r1, [r7, #8]
 8010730:	68f8      	ldr	r0, [r7, #12]
 8010732:	f000 f837 	bl	80107a4 <I2C_IsErrorOccurred>
 8010736:	4603      	mov	r3, r0
 8010738:	2b00      	cmp	r3, #0
 801073a:	d001      	beq.n	8010740 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801073c:	2301      	movs	r3, #1
 801073e:	e02d      	b.n	801079c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010740:	f7f8 fcc4 	bl	80090cc <HAL_GetTick>
 8010744:	4602      	mov	r2, r0
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	1ad3      	subs	r3, r2, r3
 801074a:	68ba      	ldr	r2, [r7, #8]
 801074c:	429a      	cmp	r2, r3
 801074e:	d302      	bcc.n	8010756 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d11a      	bne.n	801078c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	699b      	ldr	r3, [r3, #24]
 801075c:	f003 0320 	and.w	r3, r3, #32
 8010760:	2b20      	cmp	r3, #32
 8010762:	d013      	beq.n	801078c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010768:	f043 0220 	orr.w	r2, r3, #32
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2220      	movs	r2, #32
 8010774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	2200      	movs	r2, #0
 801077c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	2200      	movs	r2, #0
 8010784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8010788:	2301      	movs	r3, #1
 801078a:	e007      	b.n	801079c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	699b      	ldr	r3, [r3, #24]
 8010792:	f003 0320 	and.w	r3, r3, #32
 8010796:	2b20      	cmp	r3, #32
 8010798:	d1c8      	bne.n	801072c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801079a:	2300      	movs	r3, #0
}
 801079c:	4618      	mov	r0, r3
 801079e:	3710      	adds	r7, #16
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}

080107a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b08a      	sub	sp, #40	@ 0x28
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	60f8      	str	r0, [r7, #12]
 80107ac:	60b9      	str	r1, [r7, #8]
 80107ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80107b0:	2300      	movs	r3, #0
 80107b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	699b      	ldr	r3, [r3, #24]
 80107bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80107be:	2300      	movs	r3, #0
 80107c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80107c6:	69bb      	ldr	r3, [r7, #24]
 80107c8:	f003 0310 	and.w	r3, r3, #16
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d068      	beq.n	80108a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	2210      	movs	r2, #16
 80107d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80107d8:	e049      	b.n	801086e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107e0:	d045      	beq.n	801086e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80107e2:	f7f8 fc73 	bl	80090cc <HAL_GetTick>
 80107e6:	4602      	mov	r2, r0
 80107e8:	69fb      	ldr	r3, [r7, #28]
 80107ea:	1ad3      	subs	r3, r2, r3
 80107ec:	68ba      	ldr	r2, [r7, #8]
 80107ee:	429a      	cmp	r2, r3
 80107f0:	d302      	bcc.n	80107f8 <I2C_IsErrorOccurred+0x54>
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d13a      	bne.n	801086e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010802:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801080a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	699b      	ldr	r3, [r3, #24]
 8010812:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801081a:	d121      	bne.n	8010860 <I2C_IsErrorOccurred+0xbc>
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010822:	d01d      	beq.n	8010860 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8010824:	7cfb      	ldrb	r3, [r7, #19]
 8010826:	2b20      	cmp	r3, #32
 8010828:	d01a      	beq.n	8010860 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	685a      	ldr	r2, [r3, #4]
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010838:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801083a:	f7f8 fc47 	bl	80090cc <HAL_GetTick>
 801083e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010840:	e00e      	b.n	8010860 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8010842:	f7f8 fc43 	bl	80090cc <HAL_GetTick>
 8010846:	4602      	mov	r2, r0
 8010848:	69fb      	ldr	r3, [r7, #28]
 801084a:	1ad3      	subs	r3, r2, r3
 801084c:	2b19      	cmp	r3, #25
 801084e:	d907      	bls.n	8010860 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8010850:	6a3b      	ldr	r3, [r7, #32]
 8010852:	f043 0320 	orr.w	r3, r3, #32
 8010856:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8010858:	2301      	movs	r3, #1
 801085a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 801085e:	e006      	b.n	801086e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	699b      	ldr	r3, [r3, #24]
 8010866:	f003 0320 	and.w	r3, r3, #32
 801086a:	2b20      	cmp	r3, #32
 801086c:	d1e9      	bne.n	8010842 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	699b      	ldr	r3, [r3, #24]
 8010874:	f003 0320 	and.w	r3, r3, #32
 8010878:	2b20      	cmp	r3, #32
 801087a:	d003      	beq.n	8010884 <I2C_IsErrorOccurred+0xe0>
 801087c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010880:	2b00      	cmp	r3, #0
 8010882:	d0aa      	beq.n	80107da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8010884:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010888:	2b00      	cmp	r3, #0
 801088a:	d103      	bne.n	8010894 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	2220      	movs	r2, #32
 8010892:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8010894:	6a3b      	ldr	r3, [r7, #32]
 8010896:	f043 0304 	orr.w	r3, r3, #4
 801089a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801089c:	2301      	movs	r3, #1
 801089e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	699b      	ldr	r3, [r3, #24]
 80108a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80108aa:	69bb      	ldr	r3, [r7, #24]
 80108ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d00b      	beq.n	80108cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80108b4:	6a3b      	ldr	r3, [r7, #32]
 80108b6:	f043 0301 	orr.w	r3, r3, #1
 80108ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80108c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80108c6:	2301      	movs	r3, #1
 80108c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80108cc:	69bb      	ldr	r3, [r7, #24]
 80108ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d00b      	beq.n	80108ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80108d6:	6a3b      	ldr	r3, [r7, #32]
 80108d8:	f043 0308 	orr.w	r3, r3, #8
 80108dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80108e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80108e8:	2301      	movs	r3, #1
 80108ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80108ee:	69bb      	ldr	r3, [r7, #24]
 80108f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d00b      	beq.n	8010910 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80108f8:	6a3b      	ldr	r3, [r7, #32]
 80108fa:	f043 0302 	orr.w	r3, r3, #2
 80108fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010908:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801090a:	2301      	movs	r3, #1
 801090c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8010910:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010914:	2b00      	cmp	r3, #0
 8010916:	d01c      	beq.n	8010952 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010918:	68f8      	ldr	r0, [r7, #12]
 801091a:	f7ff fe1e 	bl	801055a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	6859      	ldr	r1, [r3, #4]
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	681a      	ldr	r2, [r3, #0]
 8010928:	4b0d      	ldr	r3, [pc, #52]	@ (8010960 <I2C_IsErrorOccurred+0x1bc>)
 801092a:	400b      	ands	r3, r1
 801092c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010932:	6a3b      	ldr	r3, [r7, #32]
 8010934:	431a      	orrs	r2, r3
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	2220      	movs	r2, #32
 801093e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	2200      	movs	r2, #0
 8010946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	2200      	movs	r2, #0
 801094e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8010952:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010956:	4618      	mov	r0, r3
 8010958:	3728      	adds	r7, #40	@ 0x28
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
 801095e:	bf00      	nop
 8010960:	fe00e800 	.word	0xfe00e800

08010964 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8010964:	b480      	push	{r7}
 8010966:	b087      	sub	sp, #28
 8010968:	af00      	add	r7, sp, #0
 801096a:	60f8      	str	r0, [r7, #12]
 801096c:	607b      	str	r3, [r7, #4]
 801096e:	460b      	mov	r3, r1
 8010970:	817b      	strh	r3, [r7, #10]
 8010972:	4613      	mov	r3, r2
 8010974:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010976:	897b      	ldrh	r3, [r7, #10]
 8010978:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801097c:	7a7b      	ldrb	r3, [r7, #9]
 801097e:	041b      	lsls	r3, r3, #16
 8010980:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010984:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801098a:	6a3b      	ldr	r3, [r7, #32]
 801098c:	4313      	orrs	r3, r2
 801098e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010992:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	685a      	ldr	r2, [r3, #4]
 801099a:	6a3b      	ldr	r3, [r7, #32]
 801099c:	0d5b      	lsrs	r3, r3, #21
 801099e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80109a2:	4b08      	ldr	r3, [pc, #32]	@ (80109c4 <I2C_TransferConfig+0x60>)
 80109a4:	430b      	orrs	r3, r1
 80109a6:	43db      	mvns	r3, r3
 80109a8:	ea02 0103 	and.w	r1, r2, r3
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	697a      	ldr	r2, [r7, #20]
 80109b2:	430a      	orrs	r2, r1
 80109b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80109b6:	bf00      	nop
 80109b8:	371c      	adds	r7, #28
 80109ba:	46bd      	mov	sp, r7
 80109bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c0:	4770      	bx	lr
 80109c2:	bf00      	nop
 80109c4:	03ff63ff 	.word	0x03ff63ff

080109c8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80109c8:	b480      	push	{r7}
 80109ca:	b085      	sub	sp, #20
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	460b      	mov	r3, r1
 80109d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80109d4:	2300      	movs	r3, #0
 80109d6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109dc:	4a39      	ldr	r2, [pc, #228]	@ (8010ac4 <I2C_Enable_IRQ+0xfc>)
 80109de:	4293      	cmp	r3, r2
 80109e0:	d032      	beq.n	8010a48 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80109e6:	4a38      	ldr	r2, [pc, #224]	@ (8010ac8 <I2C_Enable_IRQ+0x100>)
 80109e8:	4293      	cmp	r3, r2
 80109ea:	d02d      	beq.n	8010a48 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80109f0:	4a36      	ldr	r2, [pc, #216]	@ (8010acc <I2C_Enable_IRQ+0x104>)
 80109f2:	4293      	cmp	r3, r2
 80109f4:	d028      	beq.n	8010a48 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80109f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	da03      	bge.n	8010a06 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010a04:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010a06:	887b      	ldrh	r3, [r7, #2]
 8010a08:	f003 0301 	and.w	r3, r3, #1
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d003      	beq.n	8010a18 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010a16:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010a18:	887b      	ldrh	r3, [r7, #2]
 8010a1a:	f003 0302 	and.w	r3, r3, #2
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d003      	beq.n	8010a2a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010a28:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010a2a:	887b      	ldrh	r3, [r7, #2]
 8010a2c:	2b10      	cmp	r3, #16
 8010a2e:	d103      	bne.n	8010a38 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010a36:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010a38:	887b      	ldrh	r3, [r7, #2]
 8010a3a:	2b20      	cmp	r3, #32
 8010a3c:	d133      	bne.n	8010aa6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	f043 0320 	orr.w	r3, r3, #32
 8010a44:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010a46:	e02e      	b.n	8010aa6 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010a48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	da03      	bge.n	8010a58 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010a56:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010a58:	887b      	ldrh	r3, [r7, #2]
 8010a5a:	f003 0301 	and.w	r3, r3, #1
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d003      	beq.n	8010a6a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010a68:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010a6a:	887b      	ldrh	r3, [r7, #2]
 8010a6c:	f003 0302 	and.w	r3, r3, #2
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d003      	beq.n	8010a7c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010a7a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010a7c:	887b      	ldrh	r3, [r7, #2]
 8010a7e:	2b10      	cmp	r3, #16
 8010a80:	d103      	bne.n	8010a8a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010a88:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010a8a:	887b      	ldrh	r3, [r7, #2]
 8010a8c:	2b20      	cmp	r3, #32
 8010a8e:	d103      	bne.n	8010a98 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010a96:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010a98:	887b      	ldrh	r3, [r7, #2]
 8010a9a:	2b40      	cmp	r3, #64	@ 0x40
 8010a9c:	d103      	bne.n	8010aa6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010aa4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	6819      	ldr	r1, [r3, #0]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	68fa      	ldr	r2, [r7, #12]
 8010ab2:	430a      	orrs	r2, r1
 8010ab4:	601a      	str	r2, [r3, #0]
}
 8010ab6:	bf00      	nop
 8010ab8:	3714      	adds	r7, #20
 8010aba:	46bd      	mov	sp, r7
 8010abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac0:	4770      	bx	lr
 8010ac2:	bf00      	nop
 8010ac4:	0800f0eb 	.word	0x0800f0eb
 8010ac8:	0800f50d 	.word	0x0800f50d
 8010acc:	0800f2c1 	.word	0x0800f2c1

08010ad0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b085      	sub	sp, #20
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	460b      	mov	r3, r1
 8010ada:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010adc:	2300      	movs	r3, #0
 8010ade:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010ae0:	887b      	ldrh	r3, [r7, #2]
 8010ae2:	f003 0301 	and.w	r3, r3, #1
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d00f      	beq.n	8010b0a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8010af0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010af8:	b2db      	uxtb	r3, r3
 8010afa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010afe:	2b28      	cmp	r3, #40	@ 0x28
 8010b00:	d003      	beq.n	8010b0a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010b08:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010b0a:	887b      	ldrh	r3, [r7, #2]
 8010b0c:	f003 0302 	and.w	r3, r3, #2
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d00f      	beq.n	8010b34 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8010b1a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010b22:	b2db      	uxtb	r3, r3
 8010b24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010b28:	2b28      	cmp	r3, #40	@ 0x28
 8010b2a:	d003      	beq.n	8010b34 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010b32:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010b34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	da03      	bge.n	8010b44 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010b42:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010b44:	887b      	ldrh	r3, [r7, #2]
 8010b46:	2b10      	cmp	r3, #16
 8010b48:	d103      	bne.n	8010b52 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010b50:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010b52:	887b      	ldrh	r3, [r7, #2]
 8010b54:	2b20      	cmp	r3, #32
 8010b56:	d103      	bne.n	8010b60 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	f043 0320 	orr.w	r3, r3, #32
 8010b5e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010b60:	887b      	ldrh	r3, [r7, #2]
 8010b62:	2b40      	cmp	r3, #64	@ 0x40
 8010b64:	d103      	bne.n	8010b6e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b6c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	6819      	ldr	r1, [r3, #0]
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	43da      	mvns	r2, r3
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	400a      	ands	r2, r1
 8010b7e:	601a      	str	r2, [r3, #0]
}
 8010b80:	bf00      	nop
 8010b82:	3714      	adds	r7, #20
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr

08010b8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	b083      	sub	sp, #12
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
 8010b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010b9c:	b2db      	uxtb	r3, r3
 8010b9e:	2b20      	cmp	r3, #32
 8010ba0:	d138      	bne.n	8010c14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010ba8:	2b01      	cmp	r3, #1
 8010baa:	d101      	bne.n	8010bb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010bac:	2302      	movs	r3, #2
 8010bae:	e032      	b.n	8010c16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2224      	movs	r2, #36	@ 0x24
 8010bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	681a      	ldr	r2, [r3, #0]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	f022 0201 	bic.w	r2, r2, #1
 8010bce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	681a      	ldr	r2, [r3, #0]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010bde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	6819      	ldr	r1, [r3, #0]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	683a      	ldr	r2, [r7, #0]
 8010bec:	430a      	orrs	r2, r1
 8010bee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	681a      	ldr	r2, [r3, #0]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	f042 0201 	orr.w	r2, r2, #1
 8010bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2220      	movs	r2, #32
 8010c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010c10:	2300      	movs	r3, #0
 8010c12:	e000      	b.n	8010c16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010c14:	2302      	movs	r3, #2
  }
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	370c      	adds	r7, #12
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c20:	4770      	bx	lr

08010c22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010c22:	b480      	push	{r7}
 8010c24:	b085      	sub	sp, #20
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
 8010c2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010c32:	b2db      	uxtb	r3, r3
 8010c34:	2b20      	cmp	r3, #32
 8010c36:	d139      	bne.n	8010cac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010c3e:	2b01      	cmp	r3, #1
 8010c40:	d101      	bne.n	8010c46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010c42:	2302      	movs	r3, #2
 8010c44:	e033      	b.n	8010cae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2201      	movs	r2, #1
 8010c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	2224      	movs	r2, #36	@ 0x24
 8010c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	f022 0201 	bic.w	r2, r2, #1
 8010c64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8010c74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	021b      	lsls	r3, r3, #8
 8010c7a:	68fa      	ldr	r2, [r7, #12]
 8010c7c:	4313      	orrs	r3, r2
 8010c7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	68fa      	ldr	r2, [r7, #12]
 8010c86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	681a      	ldr	r2, [r3, #0]
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	f042 0201 	orr.w	r2, r2, #1
 8010c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2220      	movs	r2, #32
 8010c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	e000      	b.n	8010cae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010cac:	2302      	movs	r3, #2
  }
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	3714      	adds	r7, #20
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb8:	4770      	bx	lr
	...

08010cbc <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b085      	sub	sp, #20
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8010cfc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010cc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010cca:	4a0c      	ldr	r2, [pc, #48]	@ (8010cfc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010ccc:	f043 0302 	orr.w	r3, r3, #2
 8010cd0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8010cd4:	4b09      	ldr	r3, [pc, #36]	@ (8010cfc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8010cd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010cda:	f003 0302 	and.w	r3, r3, #2
 8010cde:	60fb      	str	r3, [r7, #12]
 8010ce0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8010ce2:	4b07      	ldr	r3, [pc, #28]	@ (8010d00 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010ce4:	685a      	ldr	r2, [r3, #4]
 8010ce6:	4906      	ldr	r1, [pc, #24]	@ (8010d00 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	4313      	orrs	r3, r2
 8010cec:	604b      	str	r3, [r1, #4]
}
 8010cee:	bf00      	nop
 8010cf0:	3714      	adds	r7, #20
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr
 8010cfa:	bf00      	nop
 8010cfc:	58024400 	.word	0x58024400
 8010d00:	58000400 	.word	0x58000400

08010d04 <HAL_PWREx_ConfigSupply>:
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b084      	sub	sp, #16
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	4b19      	ldr	r3, [pc, #100]	@ (8010d74 <HAL_PWREx_ConfigSupply+0x70>)
 8010d0e:	68db      	ldr	r3, [r3, #12]
 8010d10:	f003 0304 	and.w	r3, r3, #4
 8010d14:	2b04      	cmp	r3, #4
 8010d16:	d00a      	beq.n	8010d2e <HAL_PWREx_ConfigSupply+0x2a>
 8010d18:	4b16      	ldr	r3, [pc, #88]	@ (8010d74 <HAL_PWREx_ConfigSupply+0x70>)
 8010d1a:	68db      	ldr	r3, [r3, #12]
 8010d1c:	f003 0307 	and.w	r3, r3, #7
 8010d20:	687a      	ldr	r2, [r7, #4]
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d001      	beq.n	8010d2a <HAL_PWREx_ConfigSupply+0x26>
 8010d26:	2301      	movs	r3, #1
 8010d28:	e01f      	b.n	8010d6a <HAL_PWREx_ConfigSupply+0x66>
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	e01d      	b.n	8010d6a <HAL_PWREx_ConfigSupply+0x66>
 8010d2e:	4b11      	ldr	r3, [pc, #68]	@ (8010d74 <HAL_PWREx_ConfigSupply+0x70>)
 8010d30:	68db      	ldr	r3, [r3, #12]
 8010d32:	f023 0207 	bic.w	r2, r3, #7
 8010d36:	490f      	ldr	r1, [pc, #60]	@ (8010d74 <HAL_PWREx_ConfigSupply+0x70>)
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	4313      	orrs	r3, r2
 8010d3c:	60cb      	str	r3, [r1, #12]
 8010d3e:	f7f8 f9c5 	bl	80090cc <HAL_GetTick>
 8010d42:	60f8      	str	r0, [r7, #12]
 8010d44:	e009      	b.n	8010d5a <HAL_PWREx_ConfigSupply+0x56>
 8010d46:	f7f8 f9c1 	bl	80090cc <HAL_GetTick>
 8010d4a:	4602      	mov	r2, r0
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	1ad3      	subs	r3, r2, r3
 8010d50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010d54:	d901      	bls.n	8010d5a <HAL_PWREx_ConfigSupply+0x56>
 8010d56:	2301      	movs	r3, #1
 8010d58:	e007      	b.n	8010d6a <HAL_PWREx_ConfigSupply+0x66>
 8010d5a:	4b06      	ldr	r3, [pc, #24]	@ (8010d74 <HAL_PWREx_ConfigSupply+0x70>)
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010d62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010d66:	d1ee      	bne.n	8010d46 <HAL_PWREx_ConfigSupply+0x42>
 8010d68:	2300      	movs	r3, #0
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3710      	adds	r7, #16
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}
 8010d72:	bf00      	nop
 8010d74:	58024800 	.word	0x58024800

08010d78 <HAL_RCC_OscConfig>:
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b08c      	sub	sp, #48	@ 0x30
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d101      	bne.n	8010d8a <HAL_RCC_OscConfig+0x12>
 8010d86:	2301      	movs	r3, #1
 8010d88:	e3c8      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	f003 0301 	and.w	r3, r3, #1
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	f000 8087 	beq.w	8010ea6 <HAL_RCC_OscConfig+0x12e>
 8010d98:	4b88      	ldr	r3, [pc, #544]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010d9a:	691b      	ldr	r3, [r3, #16]
 8010d9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010da2:	4b86      	ldr	r3, [pc, #536]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010da6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010daa:	2b10      	cmp	r3, #16
 8010dac:	d007      	beq.n	8010dbe <HAL_RCC_OscConfig+0x46>
 8010dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010db0:	2b18      	cmp	r3, #24
 8010db2:	d110      	bne.n	8010dd6 <HAL_RCC_OscConfig+0x5e>
 8010db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010db6:	f003 0303 	and.w	r3, r3, #3
 8010dba:	2b02      	cmp	r3, #2
 8010dbc:	d10b      	bne.n	8010dd6 <HAL_RCC_OscConfig+0x5e>
 8010dbe:	4b7f      	ldr	r3, [pc, #508]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d06c      	beq.n	8010ea4 <HAL_RCC_OscConfig+0x12c>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d168      	bne.n	8010ea4 <HAL_RCC_OscConfig+0x12c>
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	e3a2      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	685b      	ldr	r3, [r3, #4]
 8010dda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010dde:	d106      	bne.n	8010dee <HAL_RCC_OscConfig+0x76>
 8010de0:	4b76      	ldr	r3, [pc, #472]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	4a75      	ldr	r2, [pc, #468]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010de6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010dea:	6013      	str	r3, [r2, #0]
 8010dec:	e02e      	b.n	8010e4c <HAL_RCC_OscConfig+0xd4>
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	685b      	ldr	r3, [r3, #4]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d10c      	bne.n	8010e10 <HAL_RCC_OscConfig+0x98>
 8010df6:	4b71      	ldr	r3, [pc, #452]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	4a70      	ldr	r2, [pc, #448]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010dfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010e00:	6013      	str	r3, [r2, #0]
 8010e02:	4b6e      	ldr	r3, [pc, #440]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	4a6d      	ldr	r2, [pc, #436]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010e08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010e0c:	6013      	str	r3, [r2, #0]
 8010e0e:	e01d      	b.n	8010e4c <HAL_RCC_OscConfig+0xd4>
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	685b      	ldr	r3, [r3, #4]
 8010e14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010e18:	d10c      	bne.n	8010e34 <HAL_RCC_OscConfig+0xbc>
 8010e1a:	4b68      	ldr	r3, [pc, #416]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	4a67      	ldr	r2, [pc, #412]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010e20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010e24:	6013      	str	r3, [r2, #0]
 8010e26:	4b65      	ldr	r3, [pc, #404]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	4a64      	ldr	r2, [pc, #400]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010e30:	6013      	str	r3, [r2, #0]
 8010e32:	e00b      	b.n	8010e4c <HAL_RCC_OscConfig+0xd4>
 8010e34:	4b61      	ldr	r3, [pc, #388]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	4a60      	ldr	r2, [pc, #384]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010e3e:	6013      	str	r3, [r2, #0]
 8010e40:	4b5e      	ldr	r3, [pc, #376]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	4a5d      	ldr	r2, [pc, #372]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010e46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010e4a:	6013      	str	r3, [r2, #0]
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d013      	beq.n	8010e7c <HAL_RCC_OscConfig+0x104>
 8010e54:	f7f8 f93a 	bl	80090cc <HAL_GetTick>
 8010e58:	6278      	str	r0, [r7, #36]	@ 0x24
 8010e5a:	e008      	b.n	8010e6e <HAL_RCC_OscConfig+0xf6>
 8010e5c:	f7f8 f936 	bl	80090cc <HAL_GetTick>
 8010e60:	4602      	mov	r2, r0
 8010e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e64:	1ad3      	subs	r3, r2, r3
 8010e66:	2b64      	cmp	r3, #100	@ 0x64
 8010e68:	d901      	bls.n	8010e6e <HAL_RCC_OscConfig+0xf6>
 8010e6a:	2303      	movs	r3, #3
 8010e6c:	e356      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 8010e6e:	4b53      	ldr	r3, [pc, #332]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d0f0      	beq.n	8010e5c <HAL_RCC_OscConfig+0xe4>
 8010e7a:	e014      	b.n	8010ea6 <HAL_RCC_OscConfig+0x12e>
 8010e7c:	f7f8 f926 	bl	80090cc <HAL_GetTick>
 8010e80:	6278      	str	r0, [r7, #36]	@ 0x24
 8010e82:	e008      	b.n	8010e96 <HAL_RCC_OscConfig+0x11e>
 8010e84:	f7f8 f922 	bl	80090cc <HAL_GetTick>
 8010e88:	4602      	mov	r2, r0
 8010e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e8c:	1ad3      	subs	r3, r2, r3
 8010e8e:	2b64      	cmp	r3, #100	@ 0x64
 8010e90:	d901      	bls.n	8010e96 <HAL_RCC_OscConfig+0x11e>
 8010e92:	2303      	movs	r3, #3
 8010e94:	e342      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 8010e96:	4b49      	ldr	r3, [pc, #292]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d1f0      	bne.n	8010e84 <HAL_RCC_OscConfig+0x10c>
 8010ea2:	e000      	b.n	8010ea6 <HAL_RCC_OscConfig+0x12e>
 8010ea4:	bf00      	nop
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	f003 0302 	and.w	r3, r3, #2
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	f000 808c 	beq.w	8010fcc <HAL_RCC_OscConfig+0x254>
 8010eb4:	4b41      	ldr	r3, [pc, #260]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010eb6:	691b      	ldr	r3, [r3, #16]
 8010eb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010ebc:	623b      	str	r3, [r7, #32]
 8010ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ec2:	61fb      	str	r3, [r7, #28]
 8010ec4:	6a3b      	ldr	r3, [r7, #32]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d007      	beq.n	8010eda <HAL_RCC_OscConfig+0x162>
 8010eca:	6a3b      	ldr	r3, [r7, #32]
 8010ecc:	2b18      	cmp	r3, #24
 8010ece:	d137      	bne.n	8010f40 <HAL_RCC_OscConfig+0x1c8>
 8010ed0:	69fb      	ldr	r3, [r7, #28]
 8010ed2:	f003 0303 	and.w	r3, r3, #3
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d132      	bne.n	8010f40 <HAL_RCC_OscConfig+0x1c8>
 8010eda:	4b38      	ldr	r3, [pc, #224]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	f003 0304 	and.w	r3, r3, #4
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d005      	beq.n	8010ef2 <HAL_RCC_OscConfig+0x17a>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	68db      	ldr	r3, [r3, #12]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d101      	bne.n	8010ef2 <HAL_RCC_OscConfig+0x17a>
 8010eee:	2301      	movs	r3, #1
 8010ef0:	e314      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 8010ef2:	4b32      	ldr	r3, [pc, #200]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f023 0219 	bic.w	r2, r3, #25
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	68db      	ldr	r3, [r3, #12]
 8010efe:	492f      	ldr	r1, [pc, #188]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010f00:	4313      	orrs	r3, r2
 8010f02:	600b      	str	r3, [r1, #0]
 8010f04:	f7f8 f8e2 	bl	80090cc <HAL_GetTick>
 8010f08:	6278      	str	r0, [r7, #36]	@ 0x24
 8010f0a:	e008      	b.n	8010f1e <HAL_RCC_OscConfig+0x1a6>
 8010f0c:	f7f8 f8de 	bl	80090cc <HAL_GetTick>
 8010f10:	4602      	mov	r2, r0
 8010f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f14:	1ad3      	subs	r3, r2, r3
 8010f16:	2b02      	cmp	r3, #2
 8010f18:	d901      	bls.n	8010f1e <HAL_RCC_OscConfig+0x1a6>
 8010f1a:	2303      	movs	r3, #3
 8010f1c:	e2fe      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 8010f1e:	4b27      	ldr	r3, [pc, #156]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f003 0304 	and.w	r3, r3, #4
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d0f0      	beq.n	8010f0c <HAL_RCC_OscConfig+0x194>
 8010f2a:	4b24      	ldr	r3, [pc, #144]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010f2c:	685b      	ldr	r3, [r3, #4]
 8010f2e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	691b      	ldr	r3, [r3, #16]
 8010f36:	061b      	lsls	r3, r3, #24
 8010f38:	4920      	ldr	r1, [pc, #128]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010f3a:	4313      	orrs	r3, r2
 8010f3c:	604b      	str	r3, [r1, #4]
 8010f3e:	e045      	b.n	8010fcc <HAL_RCC_OscConfig+0x254>
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	68db      	ldr	r3, [r3, #12]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d026      	beq.n	8010f96 <HAL_RCC_OscConfig+0x21e>
 8010f48:	4b1c      	ldr	r3, [pc, #112]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	f023 0219 	bic.w	r2, r3, #25
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	68db      	ldr	r3, [r3, #12]
 8010f54:	4919      	ldr	r1, [pc, #100]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010f56:	4313      	orrs	r3, r2
 8010f58:	600b      	str	r3, [r1, #0]
 8010f5a:	f7f8 f8b7 	bl	80090cc <HAL_GetTick>
 8010f5e:	6278      	str	r0, [r7, #36]	@ 0x24
 8010f60:	e008      	b.n	8010f74 <HAL_RCC_OscConfig+0x1fc>
 8010f62:	f7f8 f8b3 	bl	80090cc <HAL_GetTick>
 8010f66:	4602      	mov	r2, r0
 8010f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f6a:	1ad3      	subs	r3, r2, r3
 8010f6c:	2b02      	cmp	r3, #2
 8010f6e:	d901      	bls.n	8010f74 <HAL_RCC_OscConfig+0x1fc>
 8010f70:	2303      	movs	r3, #3
 8010f72:	e2d3      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 8010f74:	4b11      	ldr	r3, [pc, #68]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	f003 0304 	and.w	r3, r3, #4
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d0f0      	beq.n	8010f62 <HAL_RCC_OscConfig+0x1ea>
 8010f80:	4b0e      	ldr	r3, [pc, #56]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	691b      	ldr	r3, [r3, #16]
 8010f8c:	061b      	lsls	r3, r3, #24
 8010f8e:	490b      	ldr	r1, [pc, #44]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010f90:	4313      	orrs	r3, r2
 8010f92:	604b      	str	r3, [r1, #4]
 8010f94:	e01a      	b.n	8010fcc <HAL_RCC_OscConfig+0x254>
 8010f96:	4b09      	ldr	r3, [pc, #36]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	4a08      	ldr	r2, [pc, #32]	@ (8010fbc <HAL_RCC_OscConfig+0x244>)
 8010f9c:	f023 0301 	bic.w	r3, r3, #1
 8010fa0:	6013      	str	r3, [r2, #0]
 8010fa2:	f7f8 f893 	bl	80090cc <HAL_GetTick>
 8010fa6:	6278      	str	r0, [r7, #36]	@ 0x24
 8010fa8:	e00a      	b.n	8010fc0 <HAL_RCC_OscConfig+0x248>
 8010faa:	f7f8 f88f 	bl	80090cc <HAL_GetTick>
 8010fae:	4602      	mov	r2, r0
 8010fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fb2:	1ad3      	subs	r3, r2, r3
 8010fb4:	2b02      	cmp	r3, #2
 8010fb6:	d903      	bls.n	8010fc0 <HAL_RCC_OscConfig+0x248>
 8010fb8:	2303      	movs	r3, #3
 8010fba:	e2af      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 8010fbc:	58024400 	.word	0x58024400
 8010fc0:	4b96      	ldr	r3, [pc, #600]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	f003 0304 	and.w	r3, r3, #4
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d1ee      	bne.n	8010faa <HAL_RCC_OscConfig+0x232>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	f003 0310 	and.w	r3, r3, #16
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d06a      	beq.n	80110ae <HAL_RCC_OscConfig+0x336>
 8010fd8:	4b90      	ldr	r3, [pc, #576]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8010fda:	691b      	ldr	r3, [r3, #16]
 8010fdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010fe0:	61bb      	str	r3, [r7, #24]
 8010fe2:	4b8e      	ldr	r3, [pc, #568]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8010fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fe6:	617b      	str	r3, [r7, #20]
 8010fe8:	69bb      	ldr	r3, [r7, #24]
 8010fea:	2b08      	cmp	r3, #8
 8010fec:	d007      	beq.n	8010ffe <HAL_RCC_OscConfig+0x286>
 8010fee:	69bb      	ldr	r3, [r7, #24]
 8010ff0:	2b18      	cmp	r3, #24
 8010ff2:	d11b      	bne.n	801102c <HAL_RCC_OscConfig+0x2b4>
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	f003 0303 	and.w	r3, r3, #3
 8010ffa:	2b01      	cmp	r3, #1
 8010ffc:	d116      	bne.n	801102c <HAL_RCC_OscConfig+0x2b4>
 8010ffe:	4b87      	ldr	r3, [pc, #540]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011006:	2b00      	cmp	r3, #0
 8011008:	d005      	beq.n	8011016 <HAL_RCC_OscConfig+0x29e>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	69db      	ldr	r3, [r3, #28]
 801100e:	2b80      	cmp	r3, #128	@ 0x80
 8011010:	d001      	beq.n	8011016 <HAL_RCC_OscConfig+0x29e>
 8011012:	2301      	movs	r3, #1
 8011014:	e282      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 8011016:	4b81      	ldr	r3, [pc, #516]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8011018:	68db      	ldr	r3, [r3, #12]
 801101a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	6a1b      	ldr	r3, [r3, #32]
 8011022:	061b      	lsls	r3, r3, #24
 8011024:	497d      	ldr	r1, [pc, #500]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8011026:	4313      	orrs	r3, r2
 8011028:	60cb      	str	r3, [r1, #12]
 801102a:	e040      	b.n	80110ae <HAL_RCC_OscConfig+0x336>
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	69db      	ldr	r3, [r3, #28]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d023      	beq.n	801107c <HAL_RCC_OscConfig+0x304>
 8011034:	4b79      	ldr	r3, [pc, #484]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	4a78      	ldr	r2, [pc, #480]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 801103a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801103e:	6013      	str	r3, [r2, #0]
 8011040:	f7f8 f844 	bl	80090cc <HAL_GetTick>
 8011044:	6278      	str	r0, [r7, #36]	@ 0x24
 8011046:	e008      	b.n	801105a <HAL_RCC_OscConfig+0x2e2>
 8011048:	f7f8 f840 	bl	80090cc <HAL_GetTick>
 801104c:	4602      	mov	r2, r0
 801104e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011050:	1ad3      	subs	r3, r2, r3
 8011052:	2b02      	cmp	r3, #2
 8011054:	d901      	bls.n	801105a <HAL_RCC_OscConfig+0x2e2>
 8011056:	2303      	movs	r3, #3
 8011058:	e260      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 801105a:	4b70      	ldr	r3, [pc, #448]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011062:	2b00      	cmp	r3, #0
 8011064:	d0f0      	beq.n	8011048 <HAL_RCC_OscConfig+0x2d0>
 8011066:	4b6d      	ldr	r3, [pc, #436]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8011068:	68db      	ldr	r3, [r3, #12]
 801106a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6a1b      	ldr	r3, [r3, #32]
 8011072:	061b      	lsls	r3, r3, #24
 8011074:	4969      	ldr	r1, [pc, #420]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8011076:	4313      	orrs	r3, r2
 8011078:	60cb      	str	r3, [r1, #12]
 801107a:	e018      	b.n	80110ae <HAL_RCC_OscConfig+0x336>
 801107c:	4b67      	ldr	r3, [pc, #412]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	4a66      	ldr	r2, [pc, #408]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8011082:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011086:	6013      	str	r3, [r2, #0]
 8011088:	f7f8 f820 	bl	80090cc <HAL_GetTick>
 801108c:	6278      	str	r0, [r7, #36]	@ 0x24
 801108e:	e008      	b.n	80110a2 <HAL_RCC_OscConfig+0x32a>
 8011090:	f7f8 f81c 	bl	80090cc <HAL_GetTick>
 8011094:	4602      	mov	r2, r0
 8011096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011098:	1ad3      	subs	r3, r2, r3
 801109a:	2b02      	cmp	r3, #2
 801109c:	d901      	bls.n	80110a2 <HAL_RCC_OscConfig+0x32a>
 801109e:	2303      	movs	r3, #3
 80110a0:	e23c      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 80110a2:	4b5e      	ldr	r3, [pc, #376]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d1f0      	bne.n	8011090 <HAL_RCC_OscConfig+0x318>
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	f003 0308 	and.w	r3, r3, #8
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d036      	beq.n	8011128 <HAL_RCC_OscConfig+0x3b0>
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	695b      	ldr	r3, [r3, #20]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d019      	beq.n	80110f6 <HAL_RCC_OscConfig+0x37e>
 80110c2:	4b56      	ldr	r3, [pc, #344]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 80110c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110c6:	4a55      	ldr	r2, [pc, #340]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 80110c8:	f043 0301 	orr.w	r3, r3, #1
 80110cc:	6753      	str	r3, [r2, #116]	@ 0x74
 80110ce:	f7f7 fffd 	bl	80090cc <HAL_GetTick>
 80110d2:	6278      	str	r0, [r7, #36]	@ 0x24
 80110d4:	e008      	b.n	80110e8 <HAL_RCC_OscConfig+0x370>
 80110d6:	f7f7 fff9 	bl	80090cc <HAL_GetTick>
 80110da:	4602      	mov	r2, r0
 80110dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110de:	1ad3      	subs	r3, r2, r3
 80110e0:	2b02      	cmp	r3, #2
 80110e2:	d901      	bls.n	80110e8 <HAL_RCC_OscConfig+0x370>
 80110e4:	2303      	movs	r3, #3
 80110e6:	e219      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 80110e8:	4b4c      	ldr	r3, [pc, #304]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 80110ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110ec:	f003 0302 	and.w	r3, r3, #2
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d0f0      	beq.n	80110d6 <HAL_RCC_OscConfig+0x35e>
 80110f4:	e018      	b.n	8011128 <HAL_RCC_OscConfig+0x3b0>
 80110f6:	4b49      	ldr	r3, [pc, #292]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 80110f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110fa:	4a48      	ldr	r2, [pc, #288]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 80110fc:	f023 0301 	bic.w	r3, r3, #1
 8011100:	6753      	str	r3, [r2, #116]	@ 0x74
 8011102:	f7f7 ffe3 	bl	80090cc <HAL_GetTick>
 8011106:	6278      	str	r0, [r7, #36]	@ 0x24
 8011108:	e008      	b.n	801111c <HAL_RCC_OscConfig+0x3a4>
 801110a:	f7f7 ffdf 	bl	80090cc <HAL_GetTick>
 801110e:	4602      	mov	r2, r0
 8011110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011112:	1ad3      	subs	r3, r2, r3
 8011114:	2b02      	cmp	r3, #2
 8011116:	d901      	bls.n	801111c <HAL_RCC_OscConfig+0x3a4>
 8011118:	2303      	movs	r3, #3
 801111a:	e1ff      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 801111c:	4b3f      	ldr	r3, [pc, #252]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 801111e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011120:	f003 0302 	and.w	r3, r3, #2
 8011124:	2b00      	cmp	r3, #0
 8011126:	d1f0      	bne.n	801110a <HAL_RCC_OscConfig+0x392>
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	f003 0320 	and.w	r3, r3, #32
 8011130:	2b00      	cmp	r3, #0
 8011132:	d036      	beq.n	80111a2 <HAL_RCC_OscConfig+0x42a>
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	699b      	ldr	r3, [r3, #24]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d019      	beq.n	8011170 <HAL_RCC_OscConfig+0x3f8>
 801113c:	4b37      	ldr	r3, [pc, #220]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	4a36      	ldr	r2, [pc, #216]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8011142:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8011146:	6013      	str	r3, [r2, #0]
 8011148:	f7f7 ffc0 	bl	80090cc <HAL_GetTick>
 801114c:	6278      	str	r0, [r7, #36]	@ 0x24
 801114e:	e008      	b.n	8011162 <HAL_RCC_OscConfig+0x3ea>
 8011150:	f7f7 ffbc 	bl	80090cc <HAL_GetTick>
 8011154:	4602      	mov	r2, r0
 8011156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011158:	1ad3      	subs	r3, r2, r3
 801115a:	2b02      	cmp	r3, #2
 801115c:	d901      	bls.n	8011162 <HAL_RCC_OscConfig+0x3ea>
 801115e:	2303      	movs	r3, #3
 8011160:	e1dc      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 8011162:	4b2e      	ldr	r3, [pc, #184]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801116a:	2b00      	cmp	r3, #0
 801116c:	d0f0      	beq.n	8011150 <HAL_RCC_OscConfig+0x3d8>
 801116e:	e018      	b.n	80111a2 <HAL_RCC_OscConfig+0x42a>
 8011170:	4b2a      	ldr	r3, [pc, #168]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	4a29      	ldr	r2, [pc, #164]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8011176:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801117a:	6013      	str	r3, [r2, #0]
 801117c:	f7f7 ffa6 	bl	80090cc <HAL_GetTick>
 8011180:	6278      	str	r0, [r7, #36]	@ 0x24
 8011182:	e008      	b.n	8011196 <HAL_RCC_OscConfig+0x41e>
 8011184:	f7f7 ffa2 	bl	80090cc <HAL_GetTick>
 8011188:	4602      	mov	r2, r0
 801118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801118c:	1ad3      	subs	r3, r2, r3
 801118e:	2b02      	cmp	r3, #2
 8011190:	d901      	bls.n	8011196 <HAL_RCC_OscConfig+0x41e>
 8011192:	2303      	movs	r3, #3
 8011194:	e1c2      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 8011196:	4b21      	ldr	r3, [pc, #132]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d1f0      	bne.n	8011184 <HAL_RCC_OscConfig+0x40c>
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f003 0304 	and.w	r3, r3, #4
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f000 8086 	beq.w	80112bc <HAL_RCC_OscConfig+0x544>
 80111b0:	4b1b      	ldr	r3, [pc, #108]	@ (8011220 <HAL_RCC_OscConfig+0x4a8>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	4a1a      	ldr	r2, [pc, #104]	@ (8011220 <HAL_RCC_OscConfig+0x4a8>)
 80111b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80111ba:	6013      	str	r3, [r2, #0]
 80111bc:	f7f7 ff86 	bl	80090cc <HAL_GetTick>
 80111c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80111c2:	e008      	b.n	80111d6 <HAL_RCC_OscConfig+0x45e>
 80111c4:	f7f7 ff82 	bl	80090cc <HAL_GetTick>
 80111c8:	4602      	mov	r2, r0
 80111ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111cc:	1ad3      	subs	r3, r2, r3
 80111ce:	2b64      	cmp	r3, #100	@ 0x64
 80111d0:	d901      	bls.n	80111d6 <HAL_RCC_OscConfig+0x45e>
 80111d2:	2303      	movs	r3, #3
 80111d4:	e1a2      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 80111d6:	4b12      	ldr	r3, [pc, #72]	@ (8011220 <HAL_RCC_OscConfig+0x4a8>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d0f0      	beq.n	80111c4 <HAL_RCC_OscConfig+0x44c>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	689b      	ldr	r3, [r3, #8]
 80111e6:	2b01      	cmp	r3, #1
 80111e8:	d106      	bne.n	80111f8 <HAL_RCC_OscConfig+0x480>
 80111ea:	4b0c      	ldr	r3, [pc, #48]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 80111ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111ee:	4a0b      	ldr	r2, [pc, #44]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 80111f0:	f043 0301 	orr.w	r3, r3, #1
 80111f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80111f6:	e032      	b.n	801125e <HAL_RCC_OscConfig+0x4e6>
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	689b      	ldr	r3, [r3, #8]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d111      	bne.n	8011224 <HAL_RCC_OscConfig+0x4ac>
 8011200:	4b06      	ldr	r3, [pc, #24]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8011202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011204:	4a05      	ldr	r2, [pc, #20]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8011206:	f023 0301 	bic.w	r3, r3, #1
 801120a:	6713      	str	r3, [r2, #112]	@ 0x70
 801120c:	4b03      	ldr	r3, [pc, #12]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 801120e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011210:	4a02      	ldr	r2, [pc, #8]	@ (801121c <HAL_RCC_OscConfig+0x4a4>)
 8011212:	f023 0304 	bic.w	r3, r3, #4
 8011216:	6713      	str	r3, [r2, #112]	@ 0x70
 8011218:	e021      	b.n	801125e <HAL_RCC_OscConfig+0x4e6>
 801121a:	bf00      	nop
 801121c:	58024400 	.word	0x58024400
 8011220:	58024800 	.word	0x58024800
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	689b      	ldr	r3, [r3, #8]
 8011228:	2b05      	cmp	r3, #5
 801122a:	d10c      	bne.n	8011246 <HAL_RCC_OscConfig+0x4ce>
 801122c:	4b83      	ldr	r3, [pc, #524]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 801122e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011230:	4a82      	ldr	r2, [pc, #520]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 8011232:	f043 0304 	orr.w	r3, r3, #4
 8011236:	6713      	str	r3, [r2, #112]	@ 0x70
 8011238:	4b80      	ldr	r3, [pc, #512]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 801123a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801123c:	4a7f      	ldr	r2, [pc, #508]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 801123e:	f043 0301 	orr.w	r3, r3, #1
 8011242:	6713      	str	r3, [r2, #112]	@ 0x70
 8011244:	e00b      	b.n	801125e <HAL_RCC_OscConfig+0x4e6>
 8011246:	4b7d      	ldr	r3, [pc, #500]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 8011248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801124a:	4a7c      	ldr	r2, [pc, #496]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 801124c:	f023 0301 	bic.w	r3, r3, #1
 8011250:	6713      	str	r3, [r2, #112]	@ 0x70
 8011252:	4b7a      	ldr	r3, [pc, #488]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 8011254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011256:	4a79      	ldr	r2, [pc, #484]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 8011258:	f023 0304 	bic.w	r3, r3, #4
 801125c:	6713      	str	r3, [r2, #112]	@ 0x70
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	689b      	ldr	r3, [r3, #8]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d015      	beq.n	8011292 <HAL_RCC_OscConfig+0x51a>
 8011266:	f7f7 ff31 	bl	80090cc <HAL_GetTick>
 801126a:	6278      	str	r0, [r7, #36]	@ 0x24
 801126c:	e00a      	b.n	8011284 <HAL_RCC_OscConfig+0x50c>
 801126e:	f7f7 ff2d 	bl	80090cc <HAL_GetTick>
 8011272:	4602      	mov	r2, r0
 8011274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011276:	1ad3      	subs	r3, r2, r3
 8011278:	f241 3288 	movw	r2, #5000	@ 0x1388
 801127c:	4293      	cmp	r3, r2
 801127e:	d901      	bls.n	8011284 <HAL_RCC_OscConfig+0x50c>
 8011280:	2303      	movs	r3, #3
 8011282:	e14b      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 8011284:	4b6d      	ldr	r3, [pc, #436]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 8011286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011288:	f003 0302 	and.w	r3, r3, #2
 801128c:	2b00      	cmp	r3, #0
 801128e:	d0ee      	beq.n	801126e <HAL_RCC_OscConfig+0x4f6>
 8011290:	e014      	b.n	80112bc <HAL_RCC_OscConfig+0x544>
 8011292:	f7f7 ff1b 	bl	80090cc <HAL_GetTick>
 8011296:	6278      	str	r0, [r7, #36]	@ 0x24
 8011298:	e00a      	b.n	80112b0 <HAL_RCC_OscConfig+0x538>
 801129a:	f7f7 ff17 	bl	80090cc <HAL_GetTick>
 801129e:	4602      	mov	r2, r0
 80112a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112a2:	1ad3      	subs	r3, r2, r3
 80112a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80112a8:	4293      	cmp	r3, r2
 80112aa:	d901      	bls.n	80112b0 <HAL_RCC_OscConfig+0x538>
 80112ac:	2303      	movs	r3, #3
 80112ae:	e135      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 80112b0:	4b62      	ldr	r3, [pc, #392]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 80112b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112b4:	f003 0302 	and.w	r3, r3, #2
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d1ee      	bne.n	801129a <HAL_RCC_OscConfig+0x522>
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	f000 812a 	beq.w	801151a <HAL_RCC_OscConfig+0x7a2>
 80112c6:	4b5d      	ldr	r3, [pc, #372]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 80112c8:	691b      	ldr	r3, [r3, #16]
 80112ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80112ce:	2b18      	cmp	r3, #24
 80112d0:	f000 80ba 	beq.w	8011448 <HAL_RCC_OscConfig+0x6d0>
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112d8:	2b02      	cmp	r3, #2
 80112da:	f040 8095 	bne.w	8011408 <HAL_RCC_OscConfig+0x690>
 80112de:	4b57      	ldr	r3, [pc, #348]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	4a56      	ldr	r2, [pc, #344]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 80112e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80112e8:	6013      	str	r3, [r2, #0]
 80112ea:	f7f7 feef 	bl	80090cc <HAL_GetTick>
 80112ee:	6278      	str	r0, [r7, #36]	@ 0x24
 80112f0:	e008      	b.n	8011304 <HAL_RCC_OscConfig+0x58c>
 80112f2:	f7f7 feeb 	bl	80090cc <HAL_GetTick>
 80112f6:	4602      	mov	r2, r0
 80112f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112fa:	1ad3      	subs	r3, r2, r3
 80112fc:	2b02      	cmp	r3, #2
 80112fe:	d901      	bls.n	8011304 <HAL_RCC_OscConfig+0x58c>
 8011300:	2303      	movs	r3, #3
 8011302:	e10b      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 8011304:	4b4d      	ldr	r3, [pc, #308]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801130c:	2b00      	cmp	r3, #0
 801130e:	d1f0      	bne.n	80112f2 <HAL_RCC_OscConfig+0x57a>
 8011310:	4b4a      	ldr	r3, [pc, #296]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 8011312:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011314:	4b4a      	ldr	r3, [pc, #296]	@ (8011440 <HAL_RCC_OscConfig+0x6c8>)
 8011316:	4013      	ands	r3, r2
 8011318:	687a      	ldr	r2, [r7, #4]
 801131a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801131c:	687a      	ldr	r2, [r7, #4]
 801131e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011320:	0112      	lsls	r2, r2, #4
 8011322:	430a      	orrs	r2, r1
 8011324:	4945      	ldr	r1, [pc, #276]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 8011326:	4313      	orrs	r3, r2
 8011328:	628b      	str	r3, [r1, #40]	@ 0x28
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801132e:	3b01      	subs	r3, #1
 8011330:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011338:	3b01      	subs	r3, #1
 801133a:	025b      	lsls	r3, r3, #9
 801133c:	b29b      	uxth	r3, r3
 801133e:	431a      	orrs	r2, r3
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011344:	3b01      	subs	r3, #1
 8011346:	041b      	lsls	r3, r3, #16
 8011348:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801134c:	431a      	orrs	r2, r3
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011352:	3b01      	subs	r3, #1
 8011354:	061b      	lsls	r3, r3, #24
 8011356:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801135a:	4938      	ldr	r1, [pc, #224]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 801135c:	4313      	orrs	r3, r2
 801135e:	630b      	str	r3, [r1, #48]	@ 0x30
 8011360:	4b36      	ldr	r3, [pc, #216]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 8011362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011364:	4a35      	ldr	r2, [pc, #212]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 8011366:	f023 0301 	bic.w	r3, r3, #1
 801136a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801136c:	4b33      	ldr	r3, [pc, #204]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 801136e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011370:	4b34      	ldr	r3, [pc, #208]	@ (8011444 <HAL_RCC_OscConfig+0x6cc>)
 8011372:	4013      	ands	r3, r2
 8011374:	687a      	ldr	r2, [r7, #4]
 8011376:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8011378:	00d2      	lsls	r2, r2, #3
 801137a:	4930      	ldr	r1, [pc, #192]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 801137c:	4313      	orrs	r3, r2
 801137e:	634b      	str	r3, [r1, #52]	@ 0x34
 8011380:	4b2e      	ldr	r3, [pc, #184]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 8011382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011384:	f023 020c 	bic.w	r2, r3, #12
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801138c:	492b      	ldr	r1, [pc, #172]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 801138e:	4313      	orrs	r3, r2
 8011390:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8011392:	4b2a      	ldr	r3, [pc, #168]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 8011394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011396:	f023 0202 	bic.w	r2, r3, #2
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801139e:	4927      	ldr	r1, [pc, #156]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 80113a0:	4313      	orrs	r3, r2
 80113a2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80113a4:	4b25      	ldr	r3, [pc, #148]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 80113a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113a8:	4a24      	ldr	r2, [pc, #144]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 80113aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80113ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80113b0:	4b22      	ldr	r3, [pc, #136]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 80113b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113b4:	4a21      	ldr	r2, [pc, #132]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 80113b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80113ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80113bc:	4b1f      	ldr	r3, [pc, #124]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 80113be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113c0:	4a1e      	ldr	r2, [pc, #120]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 80113c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80113c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80113c8:	4b1c      	ldr	r3, [pc, #112]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 80113ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113cc:	4a1b      	ldr	r2, [pc, #108]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 80113ce:	f043 0301 	orr.w	r3, r3, #1
 80113d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80113d4:	4b19      	ldr	r3, [pc, #100]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	4a18      	ldr	r2, [pc, #96]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 80113da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80113de:	6013      	str	r3, [r2, #0]
 80113e0:	f7f7 fe74 	bl	80090cc <HAL_GetTick>
 80113e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80113e6:	e008      	b.n	80113fa <HAL_RCC_OscConfig+0x682>
 80113e8:	f7f7 fe70 	bl	80090cc <HAL_GetTick>
 80113ec:	4602      	mov	r2, r0
 80113ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113f0:	1ad3      	subs	r3, r2, r3
 80113f2:	2b02      	cmp	r3, #2
 80113f4:	d901      	bls.n	80113fa <HAL_RCC_OscConfig+0x682>
 80113f6:	2303      	movs	r3, #3
 80113f8:	e090      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 80113fa:	4b10      	ldr	r3, [pc, #64]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011402:	2b00      	cmp	r3, #0
 8011404:	d0f0      	beq.n	80113e8 <HAL_RCC_OscConfig+0x670>
 8011406:	e088      	b.n	801151a <HAL_RCC_OscConfig+0x7a2>
 8011408:	4b0c      	ldr	r3, [pc, #48]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	4a0b      	ldr	r2, [pc, #44]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 801140e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011412:	6013      	str	r3, [r2, #0]
 8011414:	f7f7 fe5a 	bl	80090cc <HAL_GetTick>
 8011418:	6278      	str	r0, [r7, #36]	@ 0x24
 801141a:	e008      	b.n	801142e <HAL_RCC_OscConfig+0x6b6>
 801141c:	f7f7 fe56 	bl	80090cc <HAL_GetTick>
 8011420:	4602      	mov	r2, r0
 8011422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011424:	1ad3      	subs	r3, r2, r3
 8011426:	2b02      	cmp	r3, #2
 8011428:	d901      	bls.n	801142e <HAL_RCC_OscConfig+0x6b6>
 801142a:	2303      	movs	r3, #3
 801142c:	e076      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 801142e:	4b03      	ldr	r3, [pc, #12]	@ (801143c <HAL_RCC_OscConfig+0x6c4>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011436:	2b00      	cmp	r3, #0
 8011438:	d1f0      	bne.n	801141c <HAL_RCC_OscConfig+0x6a4>
 801143a:	e06e      	b.n	801151a <HAL_RCC_OscConfig+0x7a2>
 801143c:	58024400 	.word	0x58024400
 8011440:	fffffc0c 	.word	0xfffffc0c
 8011444:	ffff0007 	.word	0xffff0007
 8011448:	4b36      	ldr	r3, [pc, #216]	@ (8011524 <HAL_RCC_OscConfig+0x7ac>)
 801144a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801144c:	613b      	str	r3, [r7, #16]
 801144e:	4b35      	ldr	r3, [pc, #212]	@ (8011524 <HAL_RCC_OscConfig+0x7ac>)
 8011450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011452:	60fb      	str	r3, [r7, #12]
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011458:	2b01      	cmp	r3, #1
 801145a:	d031      	beq.n	80114c0 <HAL_RCC_OscConfig+0x748>
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	f003 0203 	and.w	r2, r3, #3
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011466:	429a      	cmp	r2, r3
 8011468:	d12a      	bne.n	80114c0 <HAL_RCC_OscConfig+0x748>
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	091b      	lsrs	r3, r3, #4
 801146e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011476:	429a      	cmp	r2, r3
 8011478:	d122      	bne.n	80114c0 <HAL_RCC_OscConfig+0x748>
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011484:	3b01      	subs	r3, #1
 8011486:	429a      	cmp	r2, r3
 8011488:	d11a      	bne.n	80114c0 <HAL_RCC_OscConfig+0x748>
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	0a5b      	lsrs	r3, r3, #9
 801148e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011496:	3b01      	subs	r3, #1
 8011498:	429a      	cmp	r2, r3
 801149a:	d111      	bne.n	80114c0 <HAL_RCC_OscConfig+0x748>
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	0c1b      	lsrs	r3, r3, #16
 80114a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114a8:	3b01      	subs	r3, #1
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d108      	bne.n	80114c0 <HAL_RCC_OscConfig+0x748>
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	0e1b      	lsrs	r3, r3, #24
 80114b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80114ba:	3b01      	subs	r3, #1
 80114bc:	429a      	cmp	r2, r3
 80114be:	d001      	beq.n	80114c4 <HAL_RCC_OscConfig+0x74c>
 80114c0:	2301      	movs	r3, #1
 80114c2:	e02b      	b.n	801151c <HAL_RCC_OscConfig+0x7a4>
 80114c4:	4b17      	ldr	r3, [pc, #92]	@ (8011524 <HAL_RCC_OscConfig+0x7ac>)
 80114c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114c8:	08db      	lsrs	r3, r3, #3
 80114ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80114ce:	613b      	str	r3, [r7, #16]
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80114d4:	693a      	ldr	r2, [r7, #16]
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d01f      	beq.n	801151a <HAL_RCC_OscConfig+0x7a2>
 80114da:	4b12      	ldr	r3, [pc, #72]	@ (8011524 <HAL_RCC_OscConfig+0x7ac>)
 80114dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114de:	4a11      	ldr	r2, [pc, #68]	@ (8011524 <HAL_RCC_OscConfig+0x7ac>)
 80114e0:	f023 0301 	bic.w	r3, r3, #1
 80114e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80114e6:	f7f7 fdf1 	bl	80090cc <HAL_GetTick>
 80114ea:	6278      	str	r0, [r7, #36]	@ 0x24
 80114ec:	bf00      	nop
 80114ee:	f7f7 fded 	bl	80090cc <HAL_GetTick>
 80114f2:	4602      	mov	r2, r0
 80114f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114f6:	4293      	cmp	r3, r2
 80114f8:	d0f9      	beq.n	80114ee <HAL_RCC_OscConfig+0x776>
 80114fa:	4b0a      	ldr	r3, [pc, #40]	@ (8011524 <HAL_RCC_OscConfig+0x7ac>)
 80114fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80114fe:	4b0a      	ldr	r3, [pc, #40]	@ (8011528 <HAL_RCC_OscConfig+0x7b0>)
 8011500:	4013      	ands	r3, r2
 8011502:	687a      	ldr	r2, [r7, #4]
 8011504:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8011506:	00d2      	lsls	r2, r2, #3
 8011508:	4906      	ldr	r1, [pc, #24]	@ (8011524 <HAL_RCC_OscConfig+0x7ac>)
 801150a:	4313      	orrs	r3, r2
 801150c:	634b      	str	r3, [r1, #52]	@ 0x34
 801150e:	4b05      	ldr	r3, [pc, #20]	@ (8011524 <HAL_RCC_OscConfig+0x7ac>)
 8011510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011512:	4a04      	ldr	r2, [pc, #16]	@ (8011524 <HAL_RCC_OscConfig+0x7ac>)
 8011514:	f043 0301 	orr.w	r3, r3, #1
 8011518:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801151a:	2300      	movs	r3, #0
 801151c:	4618      	mov	r0, r3
 801151e:	3730      	adds	r7, #48	@ 0x30
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	58024400 	.word	0x58024400
 8011528:	ffff0007 	.word	0xffff0007

0801152c <HAL_RCC_ClockConfig>:
 801152c:	b580      	push	{r7, lr}
 801152e:	b086      	sub	sp, #24
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
 8011534:	6039      	str	r1, [r7, #0]
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d101      	bne.n	8011540 <HAL_RCC_ClockConfig+0x14>
 801153c:	2301      	movs	r3, #1
 801153e:	e19c      	b.n	801187a <HAL_RCC_ClockConfig+0x34e>
 8011540:	4b8a      	ldr	r3, [pc, #552]	@ (801176c <HAL_RCC_ClockConfig+0x240>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	f003 030f 	and.w	r3, r3, #15
 8011548:	683a      	ldr	r2, [r7, #0]
 801154a:	429a      	cmp	r2, r3
 801154c:	d910      	bls.n	8011570 <HAL_RCC_ClockConfig+0x44>
 801154e:	4b87      	ldr	r3, [pc, #540]	@ (801176c <HAL_RCC_ClockConfig+0x240>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	f023 020f 	bic.w	r2, r3, #15
 8011556:	4985      	ldr	r1, [pc, #532]	@ (801176c <HAL_RCC_ClockConfig+0x240>)
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	4313      	orrs	r3, r2
 801155c:	600b      	str	r3, [r1, #0]
 801155e:	4b83      	ldr	r3, [pc, #524]	@ (801176c <HAL_RCC_ClockConfig+0x240>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	f003 030f 	and.w	r3, r3, #15
 8011566:	683a      	ldr	r2, [r7, #0]
 8011568:	429a      	cmp	r2, r3
 801156a:	d001      	beq.n	8011570 <HAL_RCC_ClockConfig+0x44>
 801156c:	2301      	movs	r3, #1
 801156e:	e184      	b.n	801187a <HAL_RCC_ClockConfig+0x34e>
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	f003 0304 	and.w	r3, r3, #4
 8011578:	2b00      	cmp	r3, #0
 801157a:	d010      	beq.n	801159e <HAL_RCC_ClockConfig+0x72>
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	691a      	ldr	r2, [r3, #16]
 8011580:	4b7b      	ldr	r3, [pc, #492]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 8011582:	699b      	ldr	r3, [r3, #24]
 8011584:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011588:	429a      	cmp	r2, r3
 801158a:	d908      	bls.n	801159e <HAL_RCC_ClockConfig+0x72>
 801158c:	4b78      	ldr	r3, [pc, #480]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 801158e:	699b      	ldr	r3, [r3, #24]
 8011590:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	691b      	ldr	r3, [r3, #16]
 8011598:	4975      	ldr	r1, [pc, #468]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 801159a:	4313      	orrs	r3, r2
 801159c:	618b      	str	r3, [r1, #24]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	f003 0308 	and.w	r3, r3, #8
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d010      	beq.n	80115cc <HAL_RCC_ClockConfig+0xa0>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	695a      	ldr	r2, [r3, #20]
 80115ae:	4b70      	ldr	r3, [pc, #448]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 80115b0:	69db      	ldr	r3, [r3, #28]
 80115b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d908      	bls.n	80115cc <HAL_RCC_ClockConfig+0xa0>
 80115ba:	4b6d      	ldr	r3, [pc, #436]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 80115bc:	69db      	ldr	r3, [r3, #28]
 80115be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	695b      	ldr	r3, [r3, #20]
 80115c6:	496a      	ldr	r1, [pc, #424]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 80115c8:	4313      	orrs	r3, r2
 80115ca:	61cb      	str	r3, [r1, #28]
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	f003 0310 	and.w	r3, r3, #16
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d010      	beq.n	80115fa <HAL_RCC_ClockConfig+0xce>
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	699a      	ldr	r2, [r3, #24]
 80115dc:	4b64      	ldr	r3, [pc, #400]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 80115de:	69db      	ldr	r3, [r3, #28]
 80115e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d908      	bls.n	80115fa <HAL_RCC_ClockConfig+0xce>
 80115e8:	4b61      	ldr	r3, [pc, #388]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 80115ea:	69db      	ldr	r3, [r3, #28]
 80115ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	699b      	ldr	r3, [r3, #24]
 80115f4:	495e      	ldr	r1, [pc, #376]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 80115f6:	4313      	orrs	r3, r2
 80115f8:	61cb      	str	r3, [r1, #28]
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f003 0320 	and.w	r3, r3, #32
 8011602:	2b00      	cmp	r3, #0
 8011604:	d010      	beq.n	8011628 <HAL_RCC_ClockConfig+0xfc>
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	69da      	ldr	r2, [r3, #28]
 801160a:	4b59      	ldr	r3, [pc, #356]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 801160c:	6a1b      	ldr	r3, [r3, #32]
 801160e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011612:	429a      	cmp	r2, r3
 8011614:	d908      	bls.n	8011628 <HAL_RCC_ClockConfig+0xfc>
 8011616:	4b56      	ldr	r3, [pc, #344]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 8011618:	6a1b      	ldr	r3, [r3, #32]
 801161a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	69db      	ldr	r3, [r3, #28]
 8011622:	4953      	ldr	r1, [pc, #332]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 8011624:	4313      	orrs	r3, r2
 8011626:	620b      	str	r3, [r1, #32]
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	f003 0302 	and.w	r3, r3, #2
 8011630:	2b00      	cmp	r3, #0
 8011632:	d010      	beq.n	8011656 <HAL_RCC_ClockConfig+0x12a>
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	68da      	ldr	r2, [r3, #12]
 8011638:	4b4d      	ldr	r3, [pc, #308]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 801163a:	699b      	ldr	r3, [r3, #24]
 801163c:	f003 030f 	and.w	r3, r3, #15
 8011640:	429a      	cmp	r2, r3
 8011642:	d908      	bls.n	8011656 <HAL_RCC_ClockConfig+0x12a>
 8011644:	4b4a      	ldr	r3, [pc, #296]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 8011646:	699b      	ldr	r3, [r3, #24]
 8011648:	f023 020f 	bic.w	r2, r3, #15
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	68db      	ldr	r3, [r3, #12]
 8011650:	4947      	ldr	r1, [pc, #284]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 8011652:	4313      	orrs	r3, r2
 8011654:	618b      	str	r3, [r1, #24]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	f003 0301 	and.w	r3, r3, #1
 801165e:	2b00      	cmp	r3, #0
 8011660:	d055      	beq.n	801170e <HAL_RCC_ClockConfig+0x1e2>
 8011662:	4b43      	ldr	r3, [pc, #268]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 8011664:	699b      	ldr	r3, [r3, #24]
 8011666:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	689b      	ldr	r3, [r3, #8]
 801166e:	4940      	ldr	r1, [pc, #256]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 8011670:	4313      	orrs	r3, r2
 8011672:	618b      	str	r3, [r1, #24]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	685b      	ldr	r3, [r3, #4]
 8011678:	2b02      	cmp	r3, #2
 801167a:	d107      	bne.n	801168c <HAL_RCC_ClockConfig+0x160>
 801167c:	4b3c      	ldr	r3, [pc, #240]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011684:	2b00      	cmp	r3, #0
 8011686:	d121      	bne.n	80116cc <HAL_RCC_ClockConfig+0x1a0>
 8011688:	2301      	movs	r3, #1
 801168a:	e0f6      	b.n	801187a <HAL_RCC_ClockConfig+0x34e>
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	685b      	ldr	r3, [r3, #4]
 8011690:	2b03      	cmp	r3, #3
 8011692:	d107      	bne.n	80116a4 <HAL_RCC_ClockConfig+0x178>
 8011694:	4b36      	ldr	r3, [pc, #216]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801169c:	2b00      	cmp	r3, #0
 801169e:	d115      	bne.n	80116cc <HAL_RCC_ClockConfig+0x1a0>
 80116a0:	2301      	movs	r3, #1
 80116a2:	e0ea      	b.n	801187a <HAL_RCC_ClockConfig+0x34e>
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	685b      	ldr	r3, [r3, #4]
 80116a8:	2b01      	cmp	r3, #1
 80116aa:	d107      	bne.n	80116bc <HAL_RCC_ClockConfig+0x190>
 80116ac:	4b30      	ldr	r3, [pc, #192]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d109      	bne.n	80116cc <HAL_RCC_ClockConfig+0x1a0>
 80116b8:	2301      	movs	r3, #1
 80116ba:	e0de      	b.n	801187a <HAL_RCC_ClockConfig+0x34e>
 80116bc:	4b2c      	ldr	r3, [pc, #176]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	f003 0304 	and.w	r3, r3, #4
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d101      	bne.n	80116cc <HAL_RCC_ClockConfig+0x1a0>
 80116c8:	2301      	movs	r3, #1
 80116ca:	e0d6      	b.n	801187a <HAL_RCC_ClockConfig+0x34e>
 80116cc:	4b28      	ldr	r3, [pc, #160]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 80116ce:	691b      	ldr	r3, [r3, #16]
 80116d0:	f023 0207 	bic.w	r2, r3, #7
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	685b      	ldr	r3, [r3, #4]
 80116d8:	4925      	ldr	r1, [pc, #148]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 80116da:	4313      	orrs	r3, r2
 80116dc:	610b      	str	r3, [r1, #16]
 80116de:	f7f7 fcf5 	bl	80090cc <HAL_GetTick>
 80116e2:	6178      	str	r0, [r7, #20]
 80116e4:	e00a      	b.n	80116fc <HAL_RCC_ClockConfig+0x1d0>
 80116e6:	f7f7 fcf1 	bl	80090cc <HAL_GetTick>
 80116ea:	4602      	mov	r2, r0
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	1ad3      	subs	r3, r2, r3
 80116f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80116f4:	4293      	cmp	r3, r2
 80116f6:	d901      	bls.n	80116fc <HAL_RCC_ClockConfig+0x1d0>
 80116f8:	2303      	movs	r3, #3
 80116fa:	e0be      	b.n	801187a <HAL_RCC_ClockConfig+0x34e>
 80116fc:	4b1c      	ldr	r3, [pc, #112]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 80116fe:	691b      	ldr	r3, [r3, #16]
 8011700:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	685b      	ldr	r3, [r3, #4]
 8011708:	00db      	lsls	r3, r3, #3
 801170a:	429a      	cmp	r2, r3
 801170c:	d1eb      	bne.n	80116e6 <HAL_RCC_ClockConfig+0x1ba>
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	f003 0302 	and.w	r3, r3, #2
 8011716:	2b00      	cmp	r3, #0
 8011718:	d010      	beq.n	801173c <HAL_RCC_ClockConfig+0x210>
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	68da      	ldr	r2, [r3, #12]
 801171e:	4b14      	ldr	r3, [pc, #80]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 8011720:	699b      	ldr	r3, [r3, #24]
 8011722:	f003 030f 	and.w	r3, r3, #15
 8011726:	429a      	cmp	r2, r3
 8011728:	d208      	bcs.n	801173c <HAL_RCC_ClockConfig+0x210>
 801172a:	4b11      	ldr	r3, [pc, #68]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 801172c:	699b      	ldr	r3, [r3, #24]
 801172e:	f023 020f 	bic.w	r2, r3, #15
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	68db      	ldr	r3, [r3, #12]
 8011736:	490e      	ldr	r1, [pc, #56]	@ (8011770 <HAL_RCC_ClockConfig+0x244>)
 8011738:	4313      	orrs	r3, r2
 801173a:	618b      	str	r3, [r1, #24]
 801173c:	4b0b      	ldr	r3, [pc, #44]	@ (801176c <HAL_RCC_ClockConfig+0x240>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	f003 030f 	and.w	r3, r3, #15
 8011744:	683a      	ldr	r2, [r7, #0]
 8011746:	429a      	cmp	r2, r3
 8011748:	d214      	bcs.n	8011774 <HAL_RCC_ClockConfig+0x248>
 801174a:	4b08      	ldr	r3, [pc, #32]	@ (801176c <HAL_RCC_ClockConfig+0x240>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	f023 020f 	bic.w	r2, r3, #15
 8011752:	4906      	ldr	r1, [pc, #24]	@ (801176c <HAL_RCC_ClockConfig+0x240>)
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	4313      	orrs	r3, r2
 8011758:	600b      	str	r3, [r1, #0]
 801175a:	4b04      	ldr	r3, [pc, #16]	@ (801176c <HAL_RCC_ClockConfig+0x240>)
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	f003 030f 	and.w	r3, r3, #15
 8011762:	683a      	ldr	r2, [r7, #0]
 8011764:	429a      	cmp	r2, r3
 8011766:	d005      	beq.n	8011774 <HAL_RCC_ClockConfig+0x248>
 8011768:	2301      	movs	r3, #1
 801176a:	e086      	b.n	801187a <HAL_RCC_ClockConfig+0x34e>
 801176c:	52002000 	.word	0x52002000
 8011770:	58024400 	.word	0x58024400
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	f003 0304 	and.w	r3, r3, #4
 801177c:	2b00      	cmp	r3, #0
 801177e:	d010      	beq.n	80117a2 <HAL_RCC_ClockConfig+0x276>
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	691a      	ldr	r2, [r3, #16]
 8011784:	4b3f      	ldr	r3, [pc, #252]	@ (8011884 <HAL_RCC_ClockConfig+0x358>)
 8011786:	699b      	ldr	r3, [r3, #24]
 8011788:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801178c:	429a      	cmp	r2, r3
 801178e:	d208      	bcs.n	80117a2 <HAL_RCC_ClockConfig+0x276>
 8011790:	4b3c      	ldr	r3, [pc, #240]	@ (8011884 <HAL_RCC_ClockConfig+0x358>)
 8011792:	699b      	ldr	r3, [r3, #24]
 8011794:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	691b      	ldr	r3, [r3, #16]
 801179c:	4939      	ldr	r1, [pc, #228]	@ (8011884 <HAL_RCC_ClockConfig+0x358>)
 801179e:	4313      	orrs	r3, r2
 80117a0:	618b      	str	r3, [r1, #24]
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	f003 0308 	and.w	r3, r3, #8
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d010      	beq.n	80117d0 <HAL_RCC_ClockConfig+0x2a4>
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	695a      	ldr	r2, [r3, #20]
 80117b2:	4b34      	ldr	r3, [pc, #208]	@ (8011884 <HAL_RCC_ClockConfig+0x358>)
 80117b4:	69db      	ldr	r3, [r3, #28]
 80117b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d208      	bcs.n	80117d0 <HAL_RCC_ClockConfig+0x2a4>
 80117be:	4b31      	ldr	r3, [pc, #196]	@ (8011884 <HAL_RCC_ClockConfig+0x358>)
 80117c0:	69db      	ldr	r3, [r3, #28]
 80117c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	695b      	ldr	r3, [r3, #20]
 80117ca:	492e      	ldr	r1, [pc, #184]	@ (8011884 <HAL_RCC_ClockConfig+0x358>)
 80117cc:	4313      	orrs	r3, r2
 80117ce:	61cb      	str	r3, [r1, #28]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	f003 0310 	and.w	r3, r3, #16
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d010      	beq.n	80117fe <HAL_RCC_ClockConfig+0x2d2>
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	699a      	ldr	r2, [r3, #24]
 80117e0:	4b28      	ldr	r3, [pc, #160]	@ (8011884 <HAL_RCC_ClockConfig+0x358>)
 80117e2:	69db      	ldr	r3, [r3, #28]
 80117e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80117e8:	429a      	cmp	r2, r3
 80117ea:	d208      	bcs.n	80117fe <HAL_RCC_ClockConfig+0x2d2>
 80117ec:	4b25      	ldr	r3, [pc, #148]	@ (8011884 <HAL_RCC_ClockConfig+0x358>)
 80117ee:	69db      	ldr	r3, [r3, #28]
 80117f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	699b      	ldr	r3, [r3, #24]
 80117f8:	4922      	ldr	r1, [pc, #136]	@ (8011884 <HAL_RCC_ClockConfig+0x358>)
 80117fa:	4313      	orrs	r3, r2
 80117fc:	61cb      	str	r3, [r1, #28]
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	f003 0320 	and.w	r3, r3, #32
 8011806:	2b00      	cmp	r3, #0
 8011808:	d010      	beq.n	801182c <HAL_RCC_ClockConfig+0x300>
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	69da      	ldr	r2, [r3, #28]
 801180e:	4b1d      	ldr	r3, [pc, #116]	@ (8011884 <HAL_RCC_ClockConfig+0x358>)
 8011810:	6a1b      	ldr	r3, [r3, #32]
 8011812:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011816:	429a      	cmp	r2, r3
 8011818:	d208      	bcs.n	801182c <HAL_RCC_ClockConfig+0x300>
 801181a:	4b1a      	ldr	r3, [pc, #104]	@ (8011884 <HAL_RCC_ClockConfig+0x358>)
 801181c:	6a1b      	ldr	r3, [r3, #32]
 801181e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	69db      	ldr	r3, [r3, #28]
 8011826:	4917      	ldr	r1, [pc, #92]	@ (8011884 <HAL_RCC_ClockConfig+0x358>)
 8011828:	4313      	orrs	r3, r2
 801182a:	620b      	str	r3, [r1, #32]
 801182c:	f000 f834 	bl	8011898 <HAL_RCC_GetSysClockFreq>
 8011830:	4602      	mov	r2, r0
 8011832:	4b14      	ldr	r3, [pc, #80]	@ (8011884 <HAL_RCC_ClockConfig+0x358>)
 8011834:	699b      	ldr	r3, [r3, #24]
 8011836:	0a1b      	lsrs	r3, r3, #8
 8011838:	f003 030f 	and.w	r3, r3, #15
 801183c:	4912      	ldr	r1, [pc, #72]	@ (8011888 <HAL_RCC_ClockConfig+0x35c>)
 801183e:	5ccb      	ldrb	r3, [r1, r3]
 8011840:	f003 031f 	and.w	r3, r3, #31
 8011844:	fa22 f303 	lsr.w	r3, r2, r3
 8011848:	613b      	str	r3, [r7, #16]
 801184a:	4b0e      	ldr	r3, [pc, #56]	@ (8011884 <HAL_RCC_ClockConfig+0x358>)
 801184c:	699b      	ldr	r3, [r3, #24]
 801184e:	f003 030f 	and.w	r3, r3, #15
 8011852:	4a0d      	ldr	r2, [pc, #52]	@ (8011888 <HAL_RCC_ClockConfig+0x35c>)
 8011854:	5cd3      	ldrb	r3, [r2, r3]
 8011856:	f003 031f 	and.w	r3, r3, #31
 801185a:	693a      	ldr	r2, [r7, #16]
 801185c:	fa22 f303 	lsr.w	r3, r2, r3
 8011860:	4a0a      	ldr	r2, [pc, #40]	@ (801188c <HAL_RCC_ClockConfig+0x360>)
 8011862:	6013      	str	r3, [r2, #0]
 8011864:	4a0a      	ldr	r2, [pc, #40]	@ (8011890 <HAL_RCC_ClockConfig+0x364>)
 8011866:	693b      	ldr	r3, [r7, #16]
 8011868:	6013      	str	r3, [r2, #0]
 801186a:	4b0a      	ldr	r3, [pc, #40]	@ (8011894 <HAL_RCC_ClockConfig+0x368>)
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	4618      	mov	r0, r3
 8011870:	f7f7 fbe2 	bl	8009038 <HAL_InitTick>
 8011874:	4603      	mov	r3, r0
 8011876:	73fb      	strb	r3, [r7, #15]
 8011878:	7bfb      	ldrb	r3, [r7, #15]
 801187a:	4618      	mov	r0, r3
 801187c:	3718      	adds	r7, #24
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}
 8011882:	bf00      	nop
 8011884:	58024400 	.word	0x58024400
 8011888:	0801e75c 	.word	0x0801e75c
 801188c:	24000008 	.word	0x24000008
 8011890:	24000004 	.word	0x24000004
 8011894:	2400000c 	.word	0x2400000c

08011898 <HAL_RCC_GetSysClockFreq>:
 8011898:	b480      	push	{r7}
 801189a:	b089      	sub	sp, #36	@ 0x24
 801189c:	af00      	add	r7, sp, #0
 801189e:	4bb3      	ldr	r3, [pc, #716]	@ (8011b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80118a0:	691b      	ldr	r3, [r3, #16]
 80118a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80118a6:	2b18      	cmp	r3, #24
 80118a8:	f200 8155 	bhi.w	8011b56 <HAL_RCC_GetSysClockFreq+0x2be>
 80118ac:	a201      	add	r2, pc, #4	@ (adr r2, 80118b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80118ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118b2:	bf00      	nop
 80118b4:	08011919 	.word	0x08011919
 80118b8:	08011b57 	.word	0x08011b57
 80118bc:	08011b57 	.word	0x08011b57
 80118c0:	08011b57 	.word	0x08011b57
 80118c4:	08011b57 	.word	0x08011b57
 80118c8:	08011b57 	.word	0x08011b57
 80118cc:	08011b57 	.word	0x08011b57
 80118d0:	08011b57 	.word	0x08011b57
 80118d4:	0801193f 	.word	0x0801193f
 80118d8:	08011b57 	.word	0x08011b57
 80118dc:	08011b57 	.word	0x08011b57
 80118e0:	08011b57 	.word	0x08011b57
 80118e4:	08011b57 	.word	0x08011b57
 80118e8:	08011b57 	.word	0x08011b57
 80118ec:	08011b57 	.word	0x08011b57
 80118f0:	08011b57 	.word	0x08011b57
 80118f4:	08011945 	.word	0x08011945
 80118f8:	08011b57 	.word	0x08011b57
 80118fc:	08011b57 	.word	0x08011b57
 8011900:	08011b57 	.word	0x08011b57
 8011904:	08011b57 	.word	0x08011b57
 8011908:	08011b57 	.word	0x08011b57
 801190c:	08011b57 	.word	0x08011b57
 8011910:	08011b57 	.word	0x08011b57
 8011914:	0801194b 	.word	0x0801194b
 8011918:	4b94      	ldr	r3, [pc, #592]	@ (8011b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	f003 0320 	and.w	r3, r3, #32
 8011920:	2b00      	cmp	r3, #0
 8011922:	d009      	beq.n	8011938 <HAL_RCC_GetSysClockFreq+0xa0>
 8011924:	4b91      	ldr	r3, [pc, #580]	@ (8011b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	08db      	lsrs	r3, r3, #3
 801192a:	f003 0303 	and.w	r3, r3, #3
 801192e:	4a90      	ldr	r2, [pc, #576]	@ (8011b70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011930:	fa22 f303 	lsr.w	r3, r2, r3
 8011934:	61bb      	str	r3, [r7, #24]
 8011936:	e111      	b.n	8011b5c <HAL_RCC_GetSysClockFreq+0x2c4>
 8011938:	4b8d      	ldr	r3, [pc, #564]	@ (8011b70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801193a:	61bb      	str	r3, [r7, #24]
 801193c:	e10e      	b.n	8011b5c <HAL_RCC_GetSysClockFreq+0x2c4>
 801193e:	4b8d      	ldr	r3, [pc, #564]	@ (8011b74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011940:	61bb      	str	r3, [r7, #24]
 8011942:	e10b      	b.n	8011b5c <HAL_RCC_GetSysClockFreq+0x2c4>
 8011944:	4b8c      	ldr	r3, [pc, #560]	@ (8011b78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011946:	61bb      	str	r3, [r7, #24]
 8011948:	e108      	b.n	8011b5c <HAL_RCC_GetSysClockFreq+0x2c4>
 801194a:	4b88      	ldr	r3, [pc, #544]	@ (8011b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801194c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801194e:	f003 0303 	and.w	r3, r3, #3
 8011952:	617b      	str	r3, [r7, #20]
 8011954:	4b85      	ldr	r3, [pc, #532]	@ (8011b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011958:	091b      	lsrs	r3, r3, #4
 801195a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801195e:	613b      	str	r3, [r7, #16]
 8011960:	4b82      	ldr	r3, [pc, #520]	@ (8011b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011964:	f003 0301 	and.w	r3, r3, #1
 8011968:	60fb      	str	r3, [r7, #12]
 801196a:	4b80      	ldr	r3, [pc, #512]	@ (8011b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801196c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801196e:	08db      	lsrs	r3, r3, #3
 8011970:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011974:	68fa      	ldr	r2, [r7, #12]
 8011976:	fb02 f303 	mul.w	r3, r2, r3
 801197a:	ee07 3a90 	vmov	s15, r3
 801197e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011982:	edc7 7a02 	vstr	s15, [r7, #8]
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	2b00      	cmp	r3, #0
 801198a:	f000 80e1 	beq.w	8011b50 <HAL_RCC_GetSysClockFreq+0x2b8>
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	2b02      	cmp	r3, #2
 8011992:	f000 8083 	beq.w	8011a9c <HAL_RCC_GetSysClockFreq+0x204>
 8011996:	697b      	ldr	r3, [r7, #20]
 8011998:	2b02      	cmp	r3, #2
 801199a:	f200 80a1 	bhi.w	8011ae0 <HAL_RCC_GetSysClockFreq+0x248>
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d003      	beq.n	80119ac <HAL_RCC_GetSysClockFreq+0x114>
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	2b01      	cmp	r3, #1
 80119a8:	d056      	beq.n	8011a58 <HAL_RCC_GetSysClockFreq+0x1c0>
 80119aa:	e099      	b.n	8011ae0 <HAL_RCC_GetSysClockFreq+0x248>
 80119ac:	4b6f      	ldr	r3, [pc, #444]	@ (8011b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	f003 0320 	and.w	r3, r3, #32
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d02d      	beq.n	8011a14 <HAL_RCC_GetSysClockFreq+0x17c>
 80119b8:	4b6c      	ldr	r3, [pc, #432]	@ (8011b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	08db      	lsrs	r3, r3, #3
 80119be:	f003 0303 	and.w	r3, r3, #3
 80119c2:	4a6b      	ldr	r2, [pc, #428]	@ (8011b70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80119c4:	fa22 f303 	lsr.w	r3, r2, r3
 80119c8:	607b      	str	r3, [r7, #4]
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	ee07 3a90 	vmov	s15, r3
 80119d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80119d4:	693b      	ldr	r3, [r7, #16]
 80119d6:	ee07 3a90 	vmov	s15, r3
 80119da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80119de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80119e2:	4b62      	ldr	r3, [pc, #392]	@ (8011b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80119e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119ea:	ee07 3a90 	vmov	s15, r3
 80119ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80119f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80119f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8011b7c <HAL_RCC_GetSysClockFreq+0x2e4>
 80119fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80119fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a0e:	edc7 7a07 	vstr	s15, [r7, #28]
 8011a12:	e087      	b.n	8011b24 <HAL_RCC_GetSysClockFreq+0x28c>
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	ee07 3a90 	vmov	s15, r3
 8011a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a1e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8011b80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8011a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a26:	4b51      	ldr	r3, [pc, #324]	@ (8011b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a2e:	ee07 3a90 	vmov	s15, r3
 8011a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a36:	ed97 6a02 	vldr	s12, [r7, #8]
 8011a3a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8011b7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8011a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a52:	edc7 7a07 	vstr	s15, [r7, #28]
 8011a56:	e065      	b.n	8011b24 <HAL_RCC_GetSysClockFreq+0x28c>
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	ee07 3a90 	vmov	s15, r3
 8011a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a62:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8011b84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a6a:	4b40      	ldr	r3, [pc, #256]	@ (8011b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a72:	ee07 3a90 	vmov	s15, r3
 8011a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8011a7e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011b7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8011a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a96:	edc7 7a07 	vstr	s15, [r7, #28]
 8011a9a:	e043      	b.n	8011b24 <HAL_RCC_GetSysClockFreq+0x28c>
 8011a9c:	693b      	ldr	r3, [r7, #16]
 8011a9e:	ee07 3a90 	vmov	s15, r3
 8011aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011aa6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8011b88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8011aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011aae:	4b2f      	ldr	r3, [pc, #188]	@ (8011b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ab6:	ee07 3a90 	vmov	s15, r3
 8011aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8011ac2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8011b7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8011ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ada:	edc7 7a07 	vstr	s15, [r7, #28]
 8011ade:	e021      	b.n	8011b24 <HAL_RCC_GetSysClockFreq+0x28c>
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	ee07 3a90 	vmov	s15, r3
 8011ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011aea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011b84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011af2:	4b1e      	ldr	r3, [pc, #120]	@ (8011b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011afa:	ee07 3a90 	vmov	s15, r3
 8011afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8011b06:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8011b7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8011b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b1e:	edc7 7a07 	vstr	s15, [r7, #28]
 8011b22:	bf00      	nop
 8011b24:	4b11      	ldr	r3, [pc, #68]	@ (8011b6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b28:	0a5b      	lsrs	r3, r3, #9
 8011b2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011b2e:	3301      	adds	r3, #1
 8011b30:	603b      	str	r3, [r7, #0]
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	ee07 3a90 	vmov	s15, r3
 8011b38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011b3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011b48:	ee17 3a90 	vmov	r3, s15
 8011b4c:	61bb      	str	r3, [r7, #24]
 8011b4e:	e005      	b.n	8011b5c <HAL_RCC_GetSysClockFreq+0x2c4>
 8011b50:	2300      	movs	r3, #0
 8011b52:	61bb      	str	r3, [r7, #24]
 8011b54:	e002      	b.n	8011b5c <HAL_RCC_GetSysClockFreq+0x2c4>
 8011b56:	4b07      	ldr	r3, [pc, #28]	@ (8011b74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011b58:	61bb      	str	r3, [r7, #24]
 8011b5a:	bf00      	nop
 8011b5c:	69bb      	ldr	r3, [r7, #24]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3724      	adds	r7, #36	@ 0x24
 8011b62:	46bd      	mov	sp, r7
 8011b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b68:	4770      	bx	lr
 8011b6a:	bf00      	nop
 8011b6c:	58024400 	.word	0x58024400
 8011b70:	03d09000 	.word	0x03d09000
 8011b74:	003d0900 	.word	0x003d0900
 8011b78:	016e3600 	.word	0x016e3600
 8011b7c:	46000000 	.word	0x46000000
 8011b80:	4c742400 	.word	0x4c742400
 8011b84:	4a742400 	.word	0x4a742400
 8011b88:	4bb71b00 	.word	0x4bb71b00

08011b8c <HAL_RCC_GetHCLKFreq>:
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	f7ff fe81 	bl	8011898 <HAL_RCC_GetSysClockFreq>
 8011b96:	4602      	mov	r2, r0
 8011b98:	4b10      	ldr	r3, [pc, #64]	@ (8011bdc <HAL_RCC_GetHCLKFreq+0x50>)
 8011b9a:	699b      	ldr	r3, [r3, #24]
 8011b9c:	0a1b      	lsrs	r3, r3, #8
 8011b9e:	f003 030f 	and.w	r3, r3, #15
 8011ba2:	490f      	ldr	r1, [pc, #60]	@ (8011be0 <HAL_RCC_GetHCLKFreq+0x54>)
 8011ba4:	5ccb      	ldrb	r3, [r1, r3]
 8011ba6:	f003 031f 	and.w	r3, r3, #31
 8011baa:	fa22 f303 	lsr.w	r3, r2, r3
 8011bae:	607b      	str	r3, [r7, #4]
 8011bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8011bdc <HAL_RCC_GetHCLKFreq+0x50>)
 8011bb2:	699b      	ldr	r3, [r3, #24]
 8011bb4:	f003 030f 	and.w	r3, r3, #15
 8011bb8:	4a09      	ldr	r2, [pc, #36]	@ (8011be0 <HAL_RCC_GetHCLKFreq+0x54>)
 8011bba:	5cd3      	ldrb	r3, [r2, r3]
 8011bbc:	f003 031f 	and.w	r3, r3, #31
 8011bc0:	687a      	ldr	r2, [r7, #4]
 8011bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8011bc6:	4a07      	ldr	r2, [pc, #28]	@ (8011be4 <HAL_RCC_GetHCLKFreq+0x58>)
 8011bc8:	6013      	str	r3, [r2, #0]
 8011bca:	4a07      	ldr	r2, [pc, #28]	@ (8011be8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	6013      	str	r3, [r2, #0]
 8011bd0:	4b04      	ldr	r3, [pc, #16]	@ (8011be4 <HAL_RCC_GetHCLKFreq+0x58>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	3708      	adds	r7, #8
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}
 8011bdc:	58024400 	.word	0x58024400
 8011be0:	0801e75c 	.word	0x0801e75c
 8011be4:	24000008 	.word	0x24000008
 8011be8:	24000004 	.word	0x24000004

08011bec <HAL_RCC_GetPCLK1Freq>:
 8011bec:	b580      	push	{r7, lr}
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	f7ff ffcc 	bl	8011b8c <HAL_RCC_GetHCLKFreq>
 8011bf4:	4602      	mov	r2, r0
 8011bf6:	4b06      	ldr	r3, [pc, #24]	@ (8011c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011bf8:	69db      	ldr	r3, [r3, #28]
 8011bfa:	091b      	lsrs	r3, r3, #4
 8011bfc:	f003 0307 	and.w	r3, r3, #7
 8011c00:	4904      	ldr	r1, [pc, #16]	@ (8011c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011c02:	5ccb      	ldrb	r3, [r1, r3]
 8011c04:	f003 031f 	and.w	r3, r3, #31
 8011c08:	fa22 f303 	lsr.w	r3, r2, r3
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	bd80      	pop	{r7, pc}
 8011c10:	58024400 	.word	0x58024400
 8011c14:	0801e75c 	.word	0x0801e75c

08011c18 <HAL_RCC_GetPCLK2Freq>:
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	f7ff ffb6 	bl	8011b8c <HAL_RCC_GetHCLKFreq>
 8011c20:	4602      	mov	r2, r0
 8011c22:	4b06      	ldr	r3, [pc, #24]	@ (8011c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8011c24:	69db      	ldr	r3, [r3, #28]
 8011c26:	0a1b      	lsrs	r3, r3, #8
 8011c28:	f003 0307 	and.w	r3, r3, #7
 8011c2c:	4904      	ldr	r1, [pc, #16]	@ (8011c40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8011c2e:	5ccb      	ldrb	r3, [r1, r3]
 8011c30:	f003 031f 	and.w	r3, r3, #31
 8011c34:	fa22 f303 	lsr.w	r3, r2, r3
 8011c38:	4618      	mov	r0, r3
 8011c3a:	bd80      	pop	{r7, pc}
 8011c3c:	58024400 	.word	0x58024400
 8011c40:	0801e75c 	.word	0x0801e75c

08011c44 <HAL_RCCEx_PeriphCLKConfig>:
 8011c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011c48:	b0c6      	sub	sp, #280	@ 0x118
 8011c4a:	af00      	add	r7, sp, #0
 8011c4c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
 8011c50:	2300      	movs	r3, #0
 8011c52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011c56:	2300      	movs	r3, #0
 8011c58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8011c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c64:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8011c68:	2500      	movs	r5, #0
 8011c6a:	ea54 0305 	orrs.w	r3, r4, r5
 8011c6e:	d049      	beq.n	8011d04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8011c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011c76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011c7a:	d02f      	beq.n	8011cdc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8011c7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011c80:	d828      	bhi.n	8011cd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011c82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011c86:	d01a      	beq.n	8011cbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8011c88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011c8c:	d822      	bhi.n	8011cd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d003      	beq.n	8011c9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8011c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011c96:	d007      	beq.n	8011ca8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8011c98:	e01c      	b.n	8011cd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011c9a:	4bab      	ldr	r3, [pc, #684]	@ (8011f48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c9e:	4aaa      	ldr	r2, [pc, #680]	@ (8011f48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011ca6:	e01a      	b.n	8011cde <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8011ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cac:	3308      	adds	r3, #8
 8011cae:	2102      	movs	r1, #2
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f002 fa49 	bl	8014148 <RCCEx_PLL2_Config>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011cbc:	e00f      	b.n	8011cde <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8011cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cc2:	3328      	adds	r3, #40	@ 0x28
 8011cc4:	2102      	movs	r1, #2
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f002 faf0 	bl	80142ac <RCCEx_PLL3_Config>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011cd2:	e004      	b.n	8011cde <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011cda:	e000      	b.n	8011cde <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8011cdc:	bf00      	nop
 8011cde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d10a      	bne.n	8011cfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8011ce6:	4b98      	ldr	r3, [pc, #608]	@ (8011f48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011cea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8011cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011cf4:	4a94      	ldr	r2, [pc, #592]	@ (8011f48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011cf6:	430b      	orrs	r3, r1
 8011cf8:	6513      	str	r3, [r2, #80]	@ 0x50
 8011cfa:	e003      	b.n	8011d04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8011cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011d00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8011d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d0c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8011d10:	f04f 0900 	mov.w	r9, #0
 8011d14:	ea58 0309 	orrs.w	r3, r8, r9
 8011d18:	d047      	beq.n	8011daa <HAL_RCCEx_PeriphCLKConfig+0x166>
 8011d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d20:	2b04      	cmp	r3, #4
 8011d22:	d82a      	bhi.n	8011d7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8011d24:	a201      	add	r2, pc, #4	@ (adr r2, 8011d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8011d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d2a:	bf00      	nop
 8011d2c:	08011d41 	.word	0x08011d41
 8011d30:	08011d4f 	.word	0x08011d4f
 8011d34:	08011d65 	.word	0x08011d65
 8011d38:	08011d83 	.word	0x08011d83
 8011d3c:	08011d83 	.word	0x08011d83
 8011d40:	4b81      	ldr	r3, [pc, #516]	@ (8011f48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d44:	4a80      	ldr	r2, [pc, #512]	@ (8011f48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011d4c:	e01a      	b.n	8011d84 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8011d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d52:	3308      	adds	r3, #8
 8011d54:	2100      	movs	r1, #0
 8011d56:	4618      	mov	r0, r3
 8011d58:	f002 f9f6 	bl	8014148 <RCCEx_PLL2_Config>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011d62:	e00f      	b.n	8011d84 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8011d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d68:	3328      	adds	r3, #40	@ 0x28
 8011d6a:	2100      	movs	r1, #0
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f002 fa9d 	bl	80142ac <RCCEx_PLL3_Config>
 8011d72:	4603      	mov	r3, r0
 8011d74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011d78:	e004      	b.n	8011d84 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011d80:	e000      	b.n	8011d84 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8011d82:	bf00      	nop
 8011d84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d10a      	bne.n	8011da2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8011d8c:	4b6e      	ldr	r3, [pc, #440]	@ (8011f48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d90:	f023 0107 	bic.w	r1, r3, #7
 8011d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d9a:	4a6b      	ldr	r2, [pc, #428]	@ (8011f48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011d9c:	430b      	orrs	r3, r1
 8011d9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8011da0:	e003      	b.n	8011daa <HAL_RCCEx_PeriphCLKConfig+0x166>
 8011da2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011da6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8011daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8011db6:	f04f 0b00 	mov.w	fp, #0
 8011dba:	ea5a 030b 	orrs.w	r3, sl, fp
 8011dbe:	d05b      	beq.n	8011e78 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8011dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011dc8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8011dcc:	d03b      	beq.n	8011e46 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8011dce:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8011dd2:	d834      	bhi.n	8011e3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011dd4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011dd8:	d037      	beq.n	8011e4a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8011dda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011dde:	d82e      	bhi.n	8011e3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011de0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011de4:	d033      	beq.n	8011e4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8011de6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011dea:	d828      	bhi.n	8011e3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011dec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011df0:	d01a      	beq.n	8011e28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8011df2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011df6:	d822      	bhi.n	8011e3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d003      	beq.n	8011e04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8011dfc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011e00:	d007      	beq.n	8011e12 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8011e02:	e01c      	b.n	8011e3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011e04:	4b50      	ldr	r3, [pc, #320]	@ (8011f48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e08:	4a4f      	ldr	r2, [pc, #316]	@ (8011f48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011e0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011e10:	e01e      	b.n	8011e50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8011e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e16:	3308      	adds	r3, #8
 8011e18:	2100      	movs	r1, #0
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f002 f994 	bl	8014148 <RCCEx_PLL2_Config>
 8011e20:	4603      	mov	r3, r0
 8011e22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011e26:	e013      	b.n	8011e50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8011e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e2c:	3328      	adds	r3, #40	@ 0x28
 8011e2e:	2100      	movs	r1, #0
 8011e30:	4618      	mov	r0, r3
 8011e32:	f002 fa3b 	bl	80142ac <RCCEx_PLL3_Config>
 8011e36:	4603      	mov	r3, r0
 8011e38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011e3c:	e008      	b.n	8011e50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8011e3e:	2301      	movs	r3, #1
 8011e40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011e44:	e004      	b.n	8011e50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8011e46:	bf00      	nop
 8011e48:	e002      	b.n	8011e50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8011e4a:	bf00      	nop
 8011e4c:	e000      	b.n	8011e50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8011e4e:	bf00      	nop
 8011e50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d10b      	bne.n	8011e70 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8011e58:	4b3b      	ldr	r3, [pc, #236]	@ (8011f48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e5c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8011e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011e68:	4a37      	ldr	r2, [pc, #220]	@ (8011f48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e6a:	430b      	orrs	r3, r1
 8011e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8011e6e:	e003      	b.n	8011e78 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8011e70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8011e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e80:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8011e84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8011e88:	2300      	movs	r3, #0
 8011e8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8011e8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8011e92:	460b      	mov	r3, r1
 8011e94:	4313      	orrs	r3, r2
 8011e96:	d05d      	beq.n	8011f54 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8011e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011ea0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8011ea4:	d03b      	beq.n	8011f1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8011ea6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8011eaa:	d834      	bhi.n	8011f16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011eac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011eb0:	d037      	beq.n	8011f22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8011eb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011eb6:	d82e      	bhi.n	8011f16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011eb8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011ebc:	d033      	beq.n	8011f26 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8011ebe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011ec2:	d828      	bhi.n	8011f16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011ec4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011ec8:	d01a      	beq.n	8011f00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8011eca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011ece:	d822      	bhi.n	8011f16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d003      	beq.n	8011edc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011ed4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011ed8:	d007      	beq.n	8011eea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8011eda:	e01c      	b.n	8011f16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011edc:	4b1a      	ldr	r3, [pc, #104]	@ (8011f48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ee0:	4a19      	ldr	r2, [pc, #100]	@ (8011f48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011ee8:	e01e      	b.n	8011f28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8011eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011eee:	3308      	adds	r3, #8
 8011ef0:	2100      	movs	r1, #0
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f002 f928 	bl	8014148 <RCCEx_PLL2_Config>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011efe:	e013      	b.n	8011f28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8011f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f04:	3328      	adds	r3, #40	@ 0x28
 8011f06:	2100      	movs	r1, #0
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f002 f9cf 	bl	80142ac <RCCEx_PLL3_Config>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011f14:	e008      	b.n	8011f28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8011f16:	2301      	movs	r3, #1
 8011f18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011f1c:	e004      	b.n	8011f28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8011f1e:	bf00      	nop
 8011f20:	e002      	b.n	8011f28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8011f22:	bf00      	nop
 8011f24:	e000      	b.n	8011f28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8011f26:	bf00      	nop
 8011f28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d10d      	bne.n	8011f4c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8011f30:	4b05      	ldr	r3, [pc, #20]	@ (8011f48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011f34:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8011f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011f40:	4a01      	ldr	r2, [pc, #4]	@ (8011f48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011f42:	430b      	orrs	r3, r1
 8011f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8011f46:	e005      	b.n	8011f54 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8011f48:	58024400 	.word	0x58024400
 8011f4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8011f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f5c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8011f60:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8011f64:	2300      	movs	r3, #0
 8011f66:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8011f6a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8011f6e:	460b      	mov	r3, r1
 8011f70:	4313      	orrs	r3, r2
 8011f72:	d03a      	beq.n	8011fea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8011f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f7a:	2b30      	cmp	r3, #48	@ 0x30
 8011f7c:	d01f      	beq.n	8011fbe <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8011f7e:	2b30      	cmp	r3, #48	@ 0x30
 8011f80:	d819      	bhi.n	8011fb6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8011f82:	2b20      	cmp	r3, #32
 8011f84:	d00c      	beq.n	8011fa0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8011f86:	2b20      	cmp	r3, #32
 8011f88:	d815      	bhi.n	8011fb6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d019      	beq.n	8011fc2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8011f8e:	2b10      	cmp	r3, #16
 8011f90:	d111      	bne.n	8011fb6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8011f92:	4baa      	ldr	r3, [pc, #680]	@ (801223c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f96:	4aa9      	ldr	r2, [pc, #676]	@ (801223c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011f9e:	e011      	b.n	8011fc4 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8011fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fa4:	3308      	adds	r3, #8
 8011fa6:	2102      	movs	r1, #2
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f002 f8cd 	bl	8014148 <RCCEx_PLL2_Config>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011fb4:	e006      	b.n	8011fc4 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8011fb6:	2301      	movs	r3, #1
 8011fb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8011fbc:	e002      	b.n	8011fc4 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8011fbe:	bf00      	nop
 8011fc0:	e000      	b.n	8011fc4 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8011fc2:	bf00      	nop
 8011fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d10a      	bne.n	8011fe2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8011fcc:	4b9b      	ldr	r3, [pc, #620]	@ (801223c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011fd0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8011fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011fda:	4a98      	ldr	r2, [pc, #608]	@ (801223c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011fdc:	430b      	orrs	r3, r1
 8011fde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8011fe0:	e003      	b.n	8011fea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8011fe2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011fe6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8011fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8011ff6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8012000:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8012004:	460b      	mov	r3, r1
 8012006:	4313      	orrs	r3, r2
 8012008:	d051      	beq.n	80120ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
 801200a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801200e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012010:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012014:	d035      	beq.n	8012082 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8012016:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801201a:	d82e      	bhi.n	801207a <HAL_RCCEx_PeriphCLKConfig+0x436>
 801201c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012020:	d031      	beq.n	8012086 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8012022:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012026:	d828      	bhi.n	801207a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801202c:	d01a      	beq.n	8012064 <HAL_RCCEx_PeriphCLKConfig+0x420>
 801202e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012032:	d822      	bhi.n	801207a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012034:	2b00      	cmp	r3, #0
 8012036:	d003      	beq.n	8012040 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8012038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801203c:	d007      	beq.n	801204e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 801203e:	e01c      	b.n	801207a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012040:	4b7e      	ldr	r3, [pc, #504]	@ (801223c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012044:	4a7d      	ldr	r2, [pc, #500]	@ (801223c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801204a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801204c:	e01c      	b.n	8012088 <HAL_RCCEx_PeriphCLKConfig+0x444>
 801204e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012052:	3308      	adds	r3, #8
 8012054:	2100      	movs	r1, #0
 8012056:	4618      	mov	r0, r3
 8012058:	f002 f876 	bl	8014148 <RCCEx_PLL2_Config>
 801205c:	4603      	mov	r3, r0
 801205e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012062:	e011      	b.n	8012088 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8012064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012068:	3328      	adds	r3, #40	@ 0x28
 801206a:	2100      	movs	r1, #0
 801206c:	4618      	mov	r0, r3
 801206e:	f002 f91d 	bl	80142ac <RCCEx_PLL3_Config>
 8012072:	4603      	mov	r3, r0
 8012074:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012078:	e006      	b.n	8012088 <HAL_RCCEx_PeriphCLKConfig+0x444>
 801207a:	2301      	movs	r3, #1
 801207c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012080:	e002      	b.n	8012088 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8012082:	bf00      	nop
 8012084:	e000      	b.n	8012088 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8012086:	bf00      	nop
 8012088:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801208c:	2b00      	cmp	r3, #0
 801208e:	d10a      	bne.n	80120a6 <HAL_RCCEx_PeriphCLKConfig+0x462>
 8012090:	4b6a      	ldr	r3, [pc, #424]	@ (801223c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012094:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8012098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801209c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801209e:	4a67      	ldr	r2, [pc, #412]	@ (801223c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80120a0:	430b      	orrs	r3, r1
 80120a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80120a4:	e003      	b.n	80120ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
 80120a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80120aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80120ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80120ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80120be:	2300      	movs	r3, #0
 80120c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80120c4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80120c8:	460b      	mov	r3, r1
 80120ca:	4313      	orrs	r3, r2
 80120cc:	d053      	beq.n	8012176 <HAL_RCCEx_PeriphCLKConfig+0x532>
 80120ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80120d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80120d8:	d033      	beq.n	8012142 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80120da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80120de:	d82c      	bhi.n	801213a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80120e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80120e4:	d02f      	beq.n	8012146 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80120e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80120ea:	d826      	bhi.n	801213a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80120ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80120f0:	d02b      	beq.n	801214a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80120f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80120f6:	d820      	bhi.n	801213a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80120f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80120fc:	d012      	beq.n	8012124 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80120fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012102:	d81a      	bhi.n	801213a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012104:	2b00      	cmp	r3, #0
 8012106:	d022      	beq.n	801214e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8012108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801210c:	d115      	bne.n	801213a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801210e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012112:	3308      	adds	r3, #8
 8012114:	2101      	movs	r1, #1
 8012116:	4618      	mov	r0, r3
 8012118:	f002 f816 	bl	8014148 <RCCEx_PLL2_Config>
 801211c:	4603      	mov	r3, r0
 801211e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012122:	e015      	b.n	8012150 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8012124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012128:	3328      	adds	r3, #40	@ 0x28
 801212a:	2101      	movs	r1, #1
 801212c:	4618      	mov	r0, r3
 801212e:	f002 f8bd 	bl	80142ac <RCCEx_PLL3_Config>
 8012132:	4603      	mov	r3, r0
 8012134:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012138:	e00a      	b.n	8012150 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 801213a:	2301      	movs	r3, #1
 801213c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012140:	e006      	b.n	8012150 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8012142:	bf00      	nop
 8012144:	e004      	b.n	8012150 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8012146:	bf00      	nop
 8012148:	e002      	b.n	8012150 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 801214a:	bf00      	nop
 801214c:	e000      	b.n	8012150 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 801214e:	bf00      	nop
 8012150:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012154:	2b00      	cmp	r3, #0
 8012156:	d10a      	bne.n	801216e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8012158:	4b38      	ldr	r3, [pc, #224]	@ (801223c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801215a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801215c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8012160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012166:	4a35      	ldr	r2, [pc, #212]	@ (801223c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012168:	430b      	orrs	r3, r1
 801216a:	6513      	str	r3, [r2, #80]	@ 0x50
 801216c:	e003      	b.n	8012176 <HAL_RCCEx_PeriphCLKConfig+0x532>
 801216e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012172:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8012182:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012186:	2300      	movs	r3, #0
 8012188:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801218c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8012190:	460b      	mov	r3, r1
 8012192:	4313      	orrs	r3, r2
 8012194:	d058      	beq.n	8012248 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8012196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801219a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801219e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80121a2:	d033      	beq.n	801220c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80121a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80121a8:	d82c      	bhi.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80121aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80121ae:	d02f      	beq.n	8012210 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80121b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80121b4:	d826      	bhi.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80121b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80121ba:	d02b      	beq.n	8012214 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80121bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80121c0:	d820      	bhi.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80121c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80121c6:	d012      	beq.n	80121ee <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80121c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80121cc:	d81a      	bhi.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d022      	beq.n	8012218 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80121d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80121d6:	d115      	bne.n	8012204 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80121d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121dc:	3308      	adds	r3, #8
 80121de:	2101      	movs	r1, #1
 80121e0:	4618      	mov	r0, r3
 80121e2:	f001 ffb1 	bl	8014148 <RCCEx_PLL2_Config>
 80121e6:	4603      	mov	r3, r0
 80121e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80121ec:	e015      	b.n	801221a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 80121ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121f2:	3328      	adds	r3, #40	@ 0x28
 80121f4:	2101      	movs	r1, #1
 80121f6:	4618      	mov	r0, r3
 80121f8:	f002 f858 	bl	80142ac <RCCEx_PLL3_Config>
 80121fc:	4603      	mov	r3, r0
 80121fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012202:	e00a      	b.n	801221a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8012204:	2301      	movs	r3, #1
 8012206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 801220a:	e006      	b.n	801221a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 801220c:	bf00      	nop
 801220e:	e004      	b.n	801221a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8012210:	bf00      	nop
 8012212:	e002      	b.n	801221a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8012214:	bf00      	nop
 8012216:	e000      	b.n	801221a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8012218:	bf00      	nop
 801221a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801221e:	2b00      	cmp	r3, #0
 8012220:	d10e      	bne.n	8012240 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8012222:	4b06      	ldr	r3, [pc, #24]	@ (801223c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012226:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801222a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801222e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012232:	4a02      	ldr	r2, [pc, #8]	@ (801223c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012234:	430b      	orrs	r3, r1
 8012236:	6593      	str	r3, [r2, #88]	@ 0x58
 8012238:	e006      	b.n	8012248 <HAL_RCCEx_PeriphCLKConfig+0x604>
 801223a:	bf00      	nop
 801223c:	58024400 	.word	0x58024400
 8012240:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012244:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012250:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8012254:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012258:	2300      	movs	r3, #0
 801225a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801225e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8012262:	460b      	mov	r3, r1
 8012264:	4313      	orrs	r3, r2
 8012266:	d037      	beq.n	80122d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8012268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801226c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801226e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012272:	d00e      	beq.n	8012292 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8012274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012278:	d816      	bhi.n	80122a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 801227a:	2b00      	cmp	r3, #0
 801227c:	d018      	beq.n	80122b0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 801227e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012282:	d111      	bne.n	80122a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8012284:	4bc4      	ldr	r3, [pc, #784]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012288:	4ac3      	ldr	r2, [pc, #780]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801228a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801228e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012290:	e00f      	b.n	80122b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8012292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012296:	3308      	adds	r3, #8
 8012298:	2101      	movs	r1, #1
 801229a:	4618      	mov	r0, r3
 801229c:	f001 ff54 	bl	8014148 <RCCEx_PLL2_Config>
 80122a0:	4603      	mov	r3, r0
 80122a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80122a6:	e004      	b.n	80122b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80122a8:	2301      	movs	r3, #1
 80122aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80122ae:	e000      	b.n	80122b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80122b0:	bf00      	nop
 80122b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d10a      	bne.n	80122d0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80122ba:	4bb7      	ldr	r3, [pc, #732]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80122bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80122be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80122c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122c8:	4ab3      	ldr	r2, [pc, #716]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80122ca:	430b      	orrs	r3, r1
 80122cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80122ce:	e003      	b.n	80122d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 80122d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80122d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80122e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80122e8:	2300      	movs	r3, #0
 80122ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80122ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80122f2:	460b      	mov	r3, r1
 80122f4:	4313      	orrs	r3, r2
 80122f6:	d039      	beq.n	801236c <HAL_RCCEx_PeriphCLKConfig+0x728>
 80122f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80122fe:	2b03      	cmp	r3, #3
 8012300:	d81c      	bhi.n	801233c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8012302:	a201      	add	r2, pc, #4	@ (adr r2, 8012308 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8012304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012308:	08012345 	.word	0x08012345
 801230c:	08012319 	.word	0x08012319
 8012310:	08012327 	.word	0x08012327
 8012314:	08012345 	.word	0x08012345
 8012318:	4b9f      	ldr	r3, [pc, #636]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801231a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801231c:	4a9e      	ldr	r2, [pc, #632]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801231e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012322:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012324:	e00f      	b.n	8012346 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8012326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801232a:	3308      	adds	r3, #8
 801232c:	2102      	movs	r1, #2
 801232e:	4618      	mov	r0, r3
 8012330:	f001 ff0a 	bl	8014148 <RCCEx_PLL2_Config>
 8012334:	4603      	mov	r3, r0
 8012336:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 801233a:	e004      	b.n	8012346 <HAL_RCCEx_PeriphCLKConfig+0x702>
 801233c:	2301      	movs	r3, #1
 801233e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012342:	e000      	b.n	8012346 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8012344:	bf00      	nop
 8012346:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801234a:	2b00      	cmp	r3, #0
 801234c:	d10a      	bne.n	8012364 <HAL_RCCEx_PeriphCLKConfig+0x720>
 801234e:	4b92      	ldr	r3, [pc, #584]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012352:	f023 0103 	bic.w	r1, r3, #3
 8012356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801235a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801235c:	4a8e      	ldr	r2, [pc, #568]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801235e:	430b      	orrs	r3, r1
 8012360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012362:	e003      	b.n	801236c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8012364:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012368:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 801236c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012374:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8012378:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801237c:	2300      	movs	r3, #0
 801237e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012382:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8012386:	460b      	mov	r3, r1
 8012388:	4313      	orrs	r3, r2
 801238a:	f000 8099 	beq.w	80124c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 801238e:	4b83      	ldr	r3, [pc, #524]	@ (801259c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	4a82      	ldr	r2, [pc, #520]	@ (801259c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012398:	6013      	str	r3, [r2, #0]
 801239a:	f7f6 fe97 	bl	80090cc <HAL_GetTick>
 801239e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 80123a2:	e00b      	b.n	80123bc <HAL_RCCEx_PeriphCLKConfig+0x778>
 80123a4:	f7f6 fe92 	bl	80090cc <HAL_GetTick>
 80123a8:	4602      	mov	r2, r0
 80123aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80123ae:	1ad3      	subs	r3, r2, r3
 80123b0:	2b64      	cmp	r3, #100	@ 0x64
 80123b2:	d903      	bls.n	80123bc <HAL_RCCEx_PeriphCLKConfig+0x778>
 80123b4:	2303      	movs	r3, #3
 80123b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80123ba:	e005      	b.n	80123c8 <HAL_RCCEx_PeriphCLKConfig+0x784>
 80123bc:	4b77      	ldr	r3, [pc, #476]	@ (801259c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d0ed      	beq.n	80123a4 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80123c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d173      	bne.n	80124b8 <HAL_RCCEx_PeriphCLKConfig+0x874>
 80123d0:	4b71      	ldr	r3, [pc, #452]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80123d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80123dc:	4053      	eors	r3, r2
 80123de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d015      	beq.n	8012412 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80123e6:	4b6c      	ldr	r3, [pc, #432]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80123ee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80123f2:	4b69      	ldr	r3, [pc, #420]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123f6:	4a68      	ldr	r2, [pc, #416]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80123fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80123fe:	4b66      	ldr	r3, [pc, #408]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012402:	4a65      	ldr	r2, [pc, #404]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012408:	6713      	str	r3, [r2, #112]	@ 0x70
 801240a:	4a63      	ldr	r2, [pc, #396]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801240c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012410:	6713      	str	r3, [r2, #112]	@ 0x70
 8012412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012416:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801241a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801241e:	d118      	bne.n	8012452 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8012420:	f7f6 fe54 	bl	80090cc <HAL_GetTick>
 8012424:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 8012428:	e00d      	b.n	8012446 <HAL_RCCEx_PeriphCLKConfig+0x802>
 801242a:	f7f6 fe4f 	bl	80090cc <HAL_GetTick>
 801242e:	4602      	mov	r2, r0
 8012430:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012434:	1ad2      	subs	r2, r2, r3
 8012436:	f241 3388 	movw	r3, #5000	@ 0x1388
 801243a:	429a      	cmp	r2, r3
 801243c:	d903      	bls.n	8012446 <HAL_RCCEx_PeriphCLKConfig+0x802>
 801243e:	2303      	movs	r3, #3
 8012440:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012444:	e005      	b.n	8012452 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8012446:	4b54      	ldr	r3, [pc, #336]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801244a:	f003 0302 	and.w	r3, r3, #2
 801244e:	2b00      	cmp	r3, #0
 8012450:	d0eb      	beq.n	801242a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8012452:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012456:	2b00      	cmp	r3, #0
 8012458:	d129      	bne.n	80124ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
 801245a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801245e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012466:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801246a:	d10e      	bne.n	801248a <HAL_RCCEx_PeriphCLKConfig+0x846>
 801246c:	4b4a      	ldr	r3, [pc, #296]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801246e:	691b      	ldr	r3, [r3, #16]
 8012470:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8012474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012478:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801247c:	091a      	lsrs	r2, r3, #4
 801247e:	4b48      	ldr	r3, [pc, #288]	@ (80125a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012480:	4013      	ands	r3, r2
 8012482:	4a45      	ldr	r2, [pc, #276]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012484:	430b      	orrs	r3, r1
 8012486:	6113      	str	r3, [r2, #16]
 8012488:	e005      	b.n	8012496 <HAL_RCCEx_PeriphCLKConfig+0x852>
 801248a:	4b43      	ldr	r3, [pc, #268]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801248c:	691b      	ldr	r3, [r3, #16]
 801248e:	4a42      	ldr	r2, [pc, #264]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012490:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012494:	6113      	str	r3, [r2, #16]
 8012496:	4b40      	ldr	r3, [pc, #256]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012498:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801249a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801249e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80124a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80124a6:	4a3c      	ldr	r2, [pc, #240]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80124a8:	430b      	orrs	r3, r1
 80124aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80124ac:	e008      	b.n	80124c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 80124ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80124b6:	e003      	b.n	80124c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 80124b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80124c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124c8:	f002 0301 	and.w	r3, r2, #1
 80124cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80124d0:	2300      	movs	r3, #0
 80124d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80124d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80124da:	460b      	mov	r3, r1
 80124dc:	4313      	orrs	r3, r2
 80124de:	f000 808f 	beq.w	8012600 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 80124e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80124e8:	2b28      	cmp	r3, #40	@ 0x28
 80124ea:	d871      	bhi.n	80125d0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80124ec:	a201      	add	r2, pc, #4	@ (adr r2, 80124f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80124ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124f2:	bf00      	nop
 80124f4:	080125d9 	.word	0x080125d9
 80124f8:	080125d1 	.word	0x080125d1
 80124fc:	080125d1 	.word	0x080125d1
 8012500:	080125d1 	.word	0x080125d1
 8012504:	080125d1 	.word	0x080125d1
 8012508:	080125d1 	.word	0x080125d1
 801250c:	080125d1 	.word	0x080125d1
 8012510:	080125d1 	.word	0x080125d1
 8012514:	080125a5 	.word	0x080125a5
 8012518:	080125d1 	.word	0x080125d1
 801251c:	080125d1 	.word	0x080125d1
 8012520:	080125d1 	.word	0x080125d1
 8012524:	080125d1 	.word	0x080125d1
 8012528:	080125d1 	.word	0x080125d1
 801252c:	080125d1 	.word	0x080125d1
 8012530:	080125d1 	.word	0x080125d1
 8012534:	080125bb 	.word	0x080125bb
 8012538:	080125d1 	.word	0x080125d1
 801253c:	080125d1 	.word	0x080125d1
 8012540:	080125d1 	.word	0x080125d1
 8012544:	080125d1 	.word	0x080125d1
 8012548:	080125d1 	.word	0x080125d1
 801254c:	080125d1 	.word	0x080125d1
 8012550:	080125d1 	.word	0x080125d1
 8012554:	080125d9 	.word	0x080125d9
 8012558:	080125d1 	.word	0x080125d1
 801255c:	080125d1 	.word	0x080125d1
 8012560:	080125d1 	.word	0x080125d1
 8012564:	080125d1 	.word	0x080125d1
 8012568:	080125d1 	.word	0x080125d1
 801256c:	080125d1 	.word	0x080125d1
 8012570:	080125d1 	.word	0x080125d1
 8012574:	080125d9 	.word	0x080125d9
 8012578:	080125d1 	.word	0x080125d1
 801257c:	080125d1 	.word	0x080125d1
 8012580:	080125d1 	.word	0x080125d1
 8012584:	080125d1 	.word	0x080125d1
 8012588:	080125d1 	.word	0x080125d1
 801258c:	080125d1 	.word	0x080125d1
 8012590:	080125d1 	.word	0x080125d1
 8012594:	080125d9 	.word	0x080125d9
 8012598:	58024400 	.word	0x58024400
 801259c:	58024800 	.word	0x58024800
 80125a0:	00ffffcf 	.word	0x00ffffcf
 80125a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125a8:	3308      	adds	r3, #8
 80125aa:	2101      	movs	r1, #1
 80125ac:	4618      	mov	r0, r3
 80125ae:	f001 fdcb 	bl	8014148 <RCCEx_PLL2_Config>
 80125b2:	4603      	mov	r3, r0
 80125b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80125b8:	e00f      	b.n	80125da <HAL_RCCEx_PeriphCLKConfig+0x996>
 80125ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125be:	3328      	adds	r3, #40	@ 0x28
 80125c0:	2101      	movs	r1, #1
 80125c2:	4618      	mov	r0, r3
 80125c4:	f001 fe72 	bl	80142ac <RCCEx_PLL3_Config>
 80125c8:	4603      	mov	r3, r0
 80125ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80125ce:	e004      	b.n	80125da <HAL_RCCEx_PeriphCLKConfig+0x996>
 80125d0:	2301      	movs	r3, #1
 80125d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80125d6:	e000      	b.n	80125da <HAL_RCCEx_PeriphCLKConfig+0x996>
 80125d8:	bf00      	nop
 80125da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d10a      	bne.n	80125f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 80125e2:	4bbf      	ldr	r3, [pc, #764]	@ (80128e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80125e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80125e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80125ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80125f0:	4abb      	ldr	r2, [pc, #748]	@ (80128e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80125f2:	430b      	orrs	r3, r1
 80125f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80125f6:	e003      	b.n	8012600 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 80125f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012608:	f002 0302 	and.w	r3, r2, #2
 801260c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012610:	2300      	movs	r3, #0
 8012612:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012616:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801261a:	460b      	mov	r3, r1
 801261c:	4313      	orrs	r3, r2
 801261e:	d041      	beq.n	80126a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8012620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012626:	2b05      	cmp	r3, #5
 8012628:	d824      	bhi.n	8012674 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 801262a:	a201      	add	r2, pc, #4	@ (adr r2, 8012630 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 801262c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012630:	0801267d 	.word	0x0801267d
 8012634:	08012649 	.word	0x08012649
 8012638:	0801265f 	.word	0x0801265f
 801263c:	0801267d 	.word	0x0801267d
 8012640:	0801267d 	.word	0x0801267d
 8012644:	0801267d 	.word	0x0801267d
 8012648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801264c:	3308      	adds	r3, #8
 801264e:	2101      	movs	r1, #1
 8012650:	4618      	mov	r0, r3
 8012652:	f001 fd79 	bl	8014148 <RCCEx_PLL2_Config>
 8012656:	4603      	mov	r3, r0
 8012658:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 801265c:	e00f      	b.n	801267e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 801265e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012662:	3328      	adds	r3, #40	@ 0x28
 8012664:	2101      	movs	r1, #1
 8012666:	4618      	mov	r0, r3
 8012668:	f001 fe20 	bl	80142ac <RCCEx_PLL3_Config>
 801266c:	4603      	mov	r3, r0
 801266e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012672:	e004      	b.n	801267e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 8012674:	2301      	movs	r3, #1
 8012676:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 801267a:	e000      	b.n	801267e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 801267c:	bf00      	nop
 801267e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012682:	2b00      	cmp	r3, #0
 8012684:	d10a      	bne.n	801269c <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8012686:	4b96      	ldr	r3, [pc, #600]	@ (80128e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801268a:	f023 0107 	bic.w	r1, r3, #7
 801268e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012694:	4a92      	ldr	r2, [pc, #584]	@ (80128e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012696:	430b      	orrs	r3, r1
 8012698:	6553      	str	r3, [r2, #84]	@ 0x54
 801269a:	e003      	b.n	80126a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 801269c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80126a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80126a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ac:	f002 0304 	and.w	r3, r2, #4
 80126b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80126b4:	2300      	movs	r3, #0
 80126b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80126ba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80126be:	460b      	mov	r3, r1
 80126c0:	4313      	orrs	r3, r2
 80126c2:	d044      	beq.n	801274e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80126c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80126cc:	2b05      	cmp	r3, #5
 80126ce:	d825      	bhi.n	801271c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80126d0:	a201      	add	r2, pc, #4	@ (adr r2, 80126d8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80126d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126d6:	bf00      	nop
 80126d8:	08012725 	.word	0x08012725
 80126dc:	080126f1 	.word	0x080126f1
 80126e0:	08012707 	.word	0x08012707
 80126e4:	08012725 	.word	0x08012725
 80126e8:	08012725 	.word	0x08012725
 80126ec:	08012725 	.word	0x08012725
 80126f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126f4:	3308      	adds	r3, #8
 80126f6:	2101      	movs	r1, #1
 80126f8:	4618      	mov	r0, r3
 80126fa:	f001 fd25 	bl	8014148 <RCCEx_PLL2_Config>
 80126fe:	4603      	mov	r3, r0
 8012700:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012704:	e00f      	b.n	8012726 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 8012706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801270a:	3328      	adds	r3, #40	@ 0x28
 801270c:	2101      	movs	r1, #1
 801270e:	4618      	mov	r0, r3
 8012710:	f001 fdcc 	bl	80142ac <RCCEx_PLL3_Config>
 8012714:	4603      	mov	r3, r0
 8012716:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 801271a:	e004      	b.n	8012726 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 801271c:	2301      	movs	r3, #1
 801271e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012722:	e000      	b.n	8012726 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 8012724:	bf00      	nop
 8012726:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801272a:	2b00      	cmp	r3, #0
 801272c:	d10b      	bne.n	8012746 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 801272e:	4b6c      	ldr	r3, [pc, #432]	@ (80128e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012732:	f023 0107 	bic.w	r1, r3, #7
 8012736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801273e:	4a68      	ldr	r2, [pc, #416]	@ (80128e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012740:	430b      	orrs	r3, r1
 8012742:	6593      	str	r3, [r2, #88]	@ 0x58
 8012744:	e003      	b.n	801274e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8012746:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801274a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 801274e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012756:	f002 0320 	and.w	r3, r2, #32
 801275a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801275e:	2300      	movs	r3, #0
 8012760:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012764:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8012768:	460b      	mov	r3, r1
 801276a:	4313      	orrs	r3, r2
 801276c:	d055      	beq.n	801281a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 801276e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012772:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012776:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801277a:	d033      	beq.n	80127e4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 801277c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012780:	d82c      	bhi.n	80127dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012786:	d02f      	beq.n	80127e8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8012788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801278c:	d826      	bhi.n	80127dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801278e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012792:	d02b      	beq.n	80127ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8012794:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012798:	d820      	bhi.n	80127dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801279a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801279e:	d012      	beq.n	80127c6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80127a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80127a4:	d81a      	bhi.n	80127dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d022      	beq.n	80127f0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80127aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80127ae:	d115      	bne.n	80127dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80127b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127b4:	3308      	adds	r3, #8
 80127b6:	2100      	movs	r1, #0
 80127b8:	4618      	mov	r0, r3
 80127ba:	f001 fcc5 	bl	8014148 <RCCEx_PLL2_Config>
 80127be:	4603      	mov	r3, r0
 80127c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80127c4:	e015      	b.n	80127f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80127c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127ca:	3328      	adds	r3, #40	@ 0x28
 80127cc:	2102      	movs	r1, #2
 80127ce:	4618      	mov	r0, r3
 80127d0:	f001 fd6c 	bl	80142ac <RCCEx_PLL3_Config>
 80127d4:	4603      	mov	r3, r0
 80127d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80127da:	e00a      	b.n	80127f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80127dc:	2301      	movs	r3, #1
 80127de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80127e2:	e006      	b.n	80127f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80127e4:	bf00      	nop
 80127e6:	e004      	b.n	80127f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80127e8:	bf00      	nop
 80127ea:	e002      	b.n	80127f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80127ec:	bf00      	nop
 80127ee:	e000      	b.n	80127f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80127f0:	bf00      	nop
 80127f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d10b      	bne.n	8012812 <HAL_RCCEx_PeriphCLKConfig+0xbce>
 80127fa:	4b39      	ldr	r3, [pc, #228]	@ (80128e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80127fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80127fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012806:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801280a:	4a35      	ldr	r2, [pc, #212]	@ (80128e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801280c:	430b      	orrs	r3, r1
 801280e:	6553      	str	r3, [r2, #84]	@ 0x54
 8012810:	e003      	b.n	801281a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8012812:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012816:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 801281a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012822:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8012826:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801282a:	2300      	movs	r3, #0
 801282c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012830:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8012834:	460b      	mov	r3, r1
 8012836:	4313      	orrs	r3, r2
 8012838:	d058      	beq.n	80128ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
 801283a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801283e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012842:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012846:	d033      	beq.n	80128b0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8012848:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801284c:	d82c      	bhi.n	80128a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801284e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012852:	d02f      	beq.n	80128b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8012854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012858:	d826      	bhi.n	80128a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801285a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801285e:	d02b      	beq.n	80128b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8012860:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012864:	d820      	bhi.n	80128a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012866:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801286a:	d012      	beq.n	8012892 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 801286c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012870:	d81a      	bhi.n	80128a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012872:	2b00      	cmp	r3, #0
 8012874:	d022      	beq.n	80128bc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8012876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801287a:	d115      	bne.n	80128a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801287c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012880:	3308      	adds	r3, #8
 8012882:	2100      	movs	r1, #0
 8012884:	4618      	mov	r0, r3
 8012886:	f001 fc5f 	bl	8014148 <RCCEx_PLL2_Config>
 801288a:	4603      	mov	r3, r0
 801288c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012890:	e015      	b.n	80128be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8012892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012896:	3328      	adds	r3, #40	@ 0x28
 8012898:	2102      	movs	r1, #2
 801289a:	4618      	mov	r0, r3
 801289c:	f001 fd06 	bl	80142ac <RCCEx_PLL3_Config>
 80128a0:	4603      	mov	r3, r0
 80128a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80128a6:	e00a      	b.n	80128be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80128a8:	2301      	movs	r3, #1
 80128aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80128ae:	e006      	b.n	80128be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80128b0:	bf00      	nop
 80128b2:	e004      	b.n	80128be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80128b4:	bf00      	nop
 80128b6:	e002      	b.n	80128be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80128b8:	bf00      	nop
 80128ba:	e000      	b.n	80128be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80128bc:	bf00      	nop
 80128be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d10e      	bne.n	80128e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
 80128c6:	4b06      	ldr	r3, [pc, #24]	@ (80128e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80128c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80128ca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80128ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80128d6:	4a02      	ldr	r2, [pc, #8]	@ (80128e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80128d8:	430b      	orrs	r3, r1
 80128da:	6593      	str	r3, [r2, #88]	@ 0x58
 80128dc:	e006      	b.n	80128ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80128de:	bf00      	nop
 80128e0:	58024400 	.word	0x58024400
 80128e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80128e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80128ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128f4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80128f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80128fc:	2300      	movs	r3, #0
 80128fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012902:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8012906:	460b      	mov	r3, r1
 8012908:	4313      	orrs	r3, r2
 801290a:	d055      	beq.n	80129b8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 801290c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012910:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012914:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012918:	d033      	beq.n	8012982 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 801291a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801291e:	d82c      	bhi.n	801297a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012920:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012924:	d02f      	beq.n	8012986 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8012926:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801292a:	d826      	bhi.n	801297a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801292c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012930:	d02b      	beq.n	801298a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8012932:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012936:	d820      	bhi.n	801297a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012938:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801293c:	d012      	beq.n	8012964 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 801293e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012942:	d81a      	bhi.n	801297a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012944:	2b00      	cmp	r3, #0
 8012946:	d022      	beq.n	801298e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8012948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801294c:	d115      	bne.n	801297a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801294e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012952:	3308      	adds	r3, #8
 8012954:	2100      	movs	r1, #0
 8012956:	4618      	mov	r0, r3
 8012958:	f001 fbf6 	bl	8014148 <RCCEx_PLL2_Config>
 801295c:	4603      	mov	r3, r0
 801295e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012962:	e015      	b.n	8012990 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 8012964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012968:	3328      	adds	r3, #40	@ 0x28
 801296a:	2102      	movs	r1, #2
 801296c:	4618      	mov	r0, r3
 801296e:	f001 fc9d 	bl	80142ac <RCCEx_PLL3_Config>
 8012972:	4603      	mov	r3, r0
 8012974:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012978:	e00a      	b.n	8012990 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 801297a:	2301      	movs	r3, #1
 801297c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012980:	e006      	b.n	8012990 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 8012982:	bf00      	nop
 8012984:	e004      	b.n	8012990 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 8012986:	bf00      	nop
 8012988:	e002      	b.n	8012990 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 801298a:	bf00      	nop
 801298c:	e000      	b.n	8012990 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
 801298e:	bf00      	nop
 8012990:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012994:	2b00      	cmp	r3, #0
 8012996:	d10b      	bne.n	80129b0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8012998:	4ba0      	ldr	r3, [pc, #640]	@ (8012c1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801299a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801299c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80129a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80129a8:	4a9c      	ldr	r2, [pc, #624]	@ (8012c1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80129aa:	430b      	orrs	r3, r1
 80129ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80129ae:	e003      	b.n	80129b8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 80129b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80129b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80129b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c0:	f002 0308 	and.w	r3, r2, #8
 80129c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80129c8:	2300      	movs	r3, #0
 80129ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80129ce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80129d2:	460b      	mov	r3, r1
 80129d4:	4313      	orrs	r3, r2
 80129d6:	d01e      	beq.n	8012a16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80129d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80129e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80129e4:	d10c      	bne.n	8012a00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80129e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129ea:	3328      	adds	r3, #40	@ 0x28
 80129ec:	2102      	movs	r1, #2
 80129ee:	4618      	mov	r0, r3
 80129f0:	f001 fc5c 	bl	80142ac <RCCEx_PLL3_Config>
 80129f4:	4603      	mov	r3, r0
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d002      	beq.n	8012a00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80129fa:	2301      	movs	r3, #1
 80129fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012a00:	4b86      	ldr	r3, [pc, #536]	@ (8012c1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a04:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012a10:	4a82      	ldr	r2, [pc, #520]	@ (8012c1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012a12:	430b      	orrs	r3, r1
 8012a14:	6553      	str	r3, [r2, #84]	@ 0x54
 8012a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1e:	f002 0310 	and.w	r3, r2, #16
 8012a22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012a26:	2300      	movs	r3, #0
 8012a28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012a2c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8012a30:	460b      	mov	r3, r1
 8012a32:	4313      	orrs	r3, r2
 8012a34:	d01e      	beq.n	8012a74 <HAL_RCCEx_PeriphCLKConfig+0xe30>
 8012a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012a3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012a42:	d10c      	bne.n	8012a5e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
 8012a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a48:	3328      	adds	r3, #40	@ 0x28
 8012a4a:	2102      	movs	r1, #2
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f001 fc2d 	bl	80142ac <RCCEx_PLL3_Config>
 8012a52:	4603      	mov	r3, r0
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d002      	beq.n	8012a5e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
 8012a58:	2301      	movs	r3, #1
 8012a5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012a5e:	4b6f      	ldr	r3, [pc, #444]	@ (8012c1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012a62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012a6e:	4a6b      	ldr	r2, [pc, #428]	@ (8012c1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012a70:	430b      	orrs	r3, r1
 8012a72:	6593      	str	r3, [r2, #88]	@ 0x58
 8012a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a7c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8012a80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012a82:	2300      	movs	r3, #0
 8012a84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012a86:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8012a8a:	460b      	mov	r3, r1
 8012a8c:	4313      	orrs	r3, r2
 8012a8e:	d03e      	beq.n	8012b0e <HAL_RCCEx_PeriphCLKConfig+0xeca>
 8012a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012a98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012a9c:	d022      	beq.n	8012ae4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8012a9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012aa2:	d81b      	bhi.n	8012adc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d003      	beq.n	8012ab0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8012aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012aac:	d00b      	beq.n	8012ac6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8012aae:	e015      	b.n	8012adc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8012ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ab4:	3308      	adds	r3, #8
 8012ab6:	2100      	movs	r1, #0
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f001 fb45 	bl	8014148 <RCCEx_PLL2_Config>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012ac4:	e00f      	b.n	8012ae6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 8012ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012aca:	3328      	adds	r3, #40	@ 0x28
 8012acc:	2102      	movs	r1, #2
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f001 fbec 	bl	80142ac <RCCEx_PLL3_Config>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012ada:	e004      	b.n	8012ae6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 8012adc:	2301      	movs	r3, #1
 8012ade:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012ae2:	e000      	b.n	8012ae6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 8012ae4:	bf00      	nop
 8012ae6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d10b      	bne.n	8012b06 <HAL_RCCEx_PeriphCLKConfig+0xec2>
 8012aee:	4b4b      	ldr	r3, [pc, #300]	@ (8012c1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012af2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8012af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012afa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012afe:	4a47      	ldr	r2, [pc, #284]	@ (8012c1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b00:	430b      	orrs	r3, r1
 8012b02:	6593      	str	r3, [r2, #88]	@ 0x58
 8012b04:	e003      	b.n	8012b0e <HAL_RCCEx_PeriphCLKConfig+0xeca>
 8012b06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b16:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8012b1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	677b      	str	r3, [r7, #116]	@ 0x74
 8012b20:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8012b24:	460b      	mov	r3, r1
 8012b26:	4313      	orrs	r3, r2
 8012b28:	d03b      	beq.n	8012ba2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
 8012b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012b32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012b36:	d01f      	beq.n	8012b78 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8012b38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012b3c:	d818      	bhi.n	8012b70 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8012b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012b42:	d003      	beq.n	8012b4c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8012b44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012b48:	d007      	beq.n	8012b5a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8012b4a:	e011      	b.n	8012b70 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8012b4c:	4b33      	ldr	r3, [pc, #204]	@ (8012c1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b50:	4a32      	ldr	r2, [pc, #200]	@ (8012c1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012b56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012b58:	e00f      	b.n	8012b7a <HAL_RCCEx_PeriphCLKConfig+0xf36>
 8012b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b5e:	3328      	adds	r3, #40	@ 0x28
 8012b60:	2101      	movs	r1, #1
 8012b62:	4618      	mov	r0, r3
 8012b64:	f001 fba2 	bl	80142ac <RCCEx_PLL3_Config>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012b6e:	e004      	b.n	8012b7a <HAL_RCCEx_PeriphCLKConfig+0xf36>
 8012b70:	2301      	movs	r3, #1
 8012b72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012b76:	e000      	b.n	8012b7a <HAL_RCCEx_PeriphCLKConfig+0xf36>
 8012b78:	bf00      	nop
 8012b7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d10b      	bne.n	8012b9a <HAL_RCCEx_PeriphCLKConfig+0xf56>
 8012b82:	4b26      	ldr	r3, [pc, #152]	@ (8012c1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8012b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012b92:	4a22      	ldr	r2, [pc, #136]	@ (8012c1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b94:	430b      	orrs	r3, r1
 8012b96:	6553      	str	r3, [r2, #84]	@ 0x54
 8012b98:	e003      	b.n	8012ba2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
 8012b9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012baa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8012bae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012bb4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8012bb8:	460b      	mov	r3, r1
 8012bba:	4313      	orrs	r3, r2
 8012bbc:	d034      	beq.n	8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8012bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d003      	beq.n	8012bd0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8012bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012bcc:	d007      	beq.n	8012bde <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8012bce:	e011      	b.n	8012bf4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
 8012bd0:	4b12      	ldr	r3, [pc, #72]	@ (8012c1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bd4:	4a11      	ldr	r2, [pc, #68]	@ (8012c1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012bda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012bdc:	e00e      	b.n	8012bfc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8012bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012be2:	3308      	adds	r3, #8
 8012be4:	2102      	movs	r1, #2
 8012be6:	4618      	mov	r0, r3
 8012be8:	f001 faae 	bl	8014148 <RCCEx_PLL2_Config>
 8012bec:	4603      	mov	r3, r0
 8012bee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012bf2:	e003      	b.n	8012bfc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012bfa:	bf00      	nop
 8012bfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d10d      	bne.n	8012c20 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
 8012c04:	4b05      	ldr	r3, [pc, #20]	@ (8012c1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c08:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012c12:	4a02      	ldr	r2, [pc, #8]	@ (8012c1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012c14:	430b      	orrs	r3, r1
 8012c16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012c18:	e006      	b.n	8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8012c1a:	bf00      	nop
 8012c1c:	58024400 	.word	0x58024400
 8012c20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c30:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8012c34:	663b      	str	r3, [r7, #96]	@ 0x60
 8012c36:	2300      	movs	r3, #0
 8012c38:	667b      	str	r3, [r7, #100]	@ 0x64
 8012c3a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8012c3e:	460b      	mov	r3, r1
 8012c40:	4313      	orrs	r3, r2
 8012c42:	d00c      	beq.n	8012c5e <HAL_RCCEx_PeriphCLKConfig+0x101a>
 8012c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c48:	3328      	adds	r3, #40	@ 0x28
 8012c4a:	2102      	movs	r1, #2
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f001 fb2d 	bl	80142ac <RCCEx_PLL3_Config>
 8012c52:	4603      	mov	r3, r0
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d002      	beq.n	8012c5e <HAL_RCCEx_PeriphCLKConfig+0x101a>
 8012c58:	2301      	movs	r3, #1
 8012c5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c66:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8012c6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012c70:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8012c74:	460b      	mov	r3, r1
 8012c76:	4313      	orrs	r3, r2
 8012c78:	d036      	beq.n	8012ce8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 8012c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012c80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012c84:	d018      	beq.n	8012cb8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8012c86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012c8a:	d811      	bhi.n	8012cb0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012c8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012c90:	d014      	beq.n	8012cbc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8012c92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012c96:	d80b      	bhi.n	8012cb0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d011      	beq.n	8012cc0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8012c9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012ca0:	d106      	bne.n	8012cb0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012ca2:	4bb7      	ldr	r3, [pc, #732]	@ (8012f80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ca6:	4ab6      	ldr	r2, [pc, #728]	@ (8012f80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012cac:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012cae:	e008      	b.n	8012cc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012cb6:	e004      	b.n	8012cc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8012cb8:	bf00      	nop
 8012cba:	e002      	b.n	8012cc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8012cbc:	bf00      	nop
 8012cbe:	e000      	b.n	8012cc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8012cc0:	bf00      	nop
 8012cc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d10a      	bne.n	8012ce0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
 8012cca:	4bad      	ldr	r3, [pc, #692]	@ (8012f80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012cce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012cd8:	4aa9      	ldr	r2, [pc, #676]	@ (8012f80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012cda:	430b      	orrs	r3, r1
 8012cdc:	6553      	str	r3, [r2, #84]	@ 0x54
 8012cde:	e003      	b.n	8012ce8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 8012ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ce4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cf0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8012cf4:	653b      	str	r3, [r7, #80]	@ 0x50
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	657b      	str	r3, [r7, #84]	@ 0x54
 8012cfa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8012cfe:	460b      	mov	r3, r1
 8012d00:	4313      	orrs	r3, r2
 8012d02:	d009      	beq.n	8012d18 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
 8012d04:	4b9e      	ldr	r3, [pc, #632]	@ (8012f80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012d08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d12:	4a9b      	ldr	r2, [pc, #620]	@ (8012f80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d14:	430b      	orrs	r3, r1
 8012d16:	6513      	str	r3, [r2, #80]	@ 0x50
 8012d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d20:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8012d24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012d26:	2300      	movs	r3, #0
 8012d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012d2a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8012d2e:	460b      	mov	r3, r1
 8012d30:	4313      	orrs	r3, r2
 8012d32:	d009      	beq.n	8012d48 <HAL_RCCEx_PeriphCLKConfig+0x1104>
 8012d34:	4b92      	ldr	r3, [pc, #584]	@ (8012f80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012d38:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8012d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012d42:	4a8f      	ldr	r2, [pc, #572]	@ (8012f80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d44:	430b      	orrs	r3, r1
 8012d46:	6513      	str	r3, [r2, #80]	@ 0x50
 8012d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d50:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8012d54:	643b      	str	r3, [r7, #64]	@ 0x40
 8012d56:	2300      	movs	r3, #0
 8012d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8012d5a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8012d5e:	460b      	mov	r3, r1
 8012d60:	4313      	orrs	r3, r2
 8012d62:	d00e      	beq.n	8012d82 <HAL_RCCEx_PeriphCLKConfig+0x113e>
 8012d64:	4b86      	ldr	r3, [pc, #536]	@ (8012f80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d66:	691b      	ldr	r3, [r3, #16]
 8012d68:	4a85      	ldr	r2, [pc, #532]	@ (8012f80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012d6e:	6113      	str	r3, [r2, #16]
 8012d70:	4b83      	ldr	r3, [pc, #524]	@ (8012f80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d72:	6919      	ldr	r1, [r3, #16]
 8012d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012d7c:	4a80      	ldr	r2, [pc, #512]	@ (8012f80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d7e:	430b      	orrs	r3, r1
 8012d80:	6113      	str	r3, [r2, #16]
 8012d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d8a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8012d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012d90:	2300      	movs	r3, #0
 8012d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012d94:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8012d98:	460b      	mov	r3, r1
 8012d9a:	4313      	orrs	r3, r2
 8012d9c:	d009      	beq.n	8012db2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
 8012d9e:	4b78      	ldr	r3, [pc, #480]	@ (8012f80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012da2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012dac:	4a74      	ldr	r2, [pc, #464]	@ (8012f80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012dae:	430b      	orrs	r3, r1
 8012db0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dba:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8012dbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8012dc4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8012dc8:	460b      	mov	r3, r1
 8012dca:	4313      	orrs	r3, r2
 8012dcc:	d00a      	beq.n	8012de4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
 8012dce:	4b6c      	ldr	r3, [pc, #432]	@ (8012f80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012dd2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8012dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012dde:	4a68      	ldr	r2, [pc, #416]	@ (8012f80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012de0:	430b      	orrs	r3, r1
 8012de2:	6553      	str	r3, [r2, #84]	@ 0x54
 8012de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dec:	2100      	movs	r1, #0
 8012dee:	62b9      	str	r1, [r7, #40]	@ 0x28
 8012df0:	f003 0301 	and.w	r3, r3, #1
 8012df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012df6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8012dfa:	460b      	mov	r3, r1
 8012dfc:	4313      	orrs	r3, r2
 8012dfe:	d011      	beq.n	8012e24 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
 8012e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e04:	3308      	adds	r3, #8
 8012e06:	2100      	movs	r1, #0
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f001 f99d 	bl	8014148 <RCCEx_PLL2_Config>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012e14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d003      	beq.n	8012e24 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
 8012e1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2c:	2100      	movs	r1, #0
 8012e2e:	6239      	str	r1, [r7, #32]
 8012e30:	f003 0302 	and.w	r3, r3, #2
 8012e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e36:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8012e3a:	460b      	mov	r3, r1
 8012e3c:	4313      	orrs	r3, r2
 8012e3e:	d011      	beq.n	8012e64 <HAL_RCCEx_PeriphCLKConfig+0x1220>
 8012e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e44:	3308      	adds	r3, #8
 8012e46:	2101      	movs	r1, #1
 8012e48:	4618      	mov	r0, r3
 8012e4a:	f001 f97d 	bl	8014148 <RCCEx_PLL2_Config>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012e54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d003      	beq.n	8012e64 <HAL_RCCEx_PeriphCLKConfig+0x1220>
 8012e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e6c:	2100      	movs	r1, #0
 8012e6e:	61b9      	str	r1, [r7, #24]
 8012e70:	f003 0304 	and.w	r3, r3, #4
 8012e74:	61fb      	str	r3, [r7, #28]
 8012e76:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8012e7a:	460b      	mov	r3, r1
 8012e7c:	4313      	orrs	r3, r2
 8012e7e:	d011      	beq.n	8012ea4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8012e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e84:	3308      	adds	r3, #8
 8012e86:	2102      	movs	r1, #2
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f001 f95d 	bl	8014148 <RCCEx_PLL2_Config>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012e94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d003      	beq.n	8012ea4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8012e9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ea0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eac:	2100      	movs	r1, #0
 8012eae:	6139      	str	r1, [r7, #16]
 8012eb0:	f003 0308 	and.w	r3, r3, #8
 8012eb4:	617b      	str	r3, [r7, #20]
 8012eb6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8012eba:	460b      	mov	r3, r1
 8012ebc:	4313      	orrs	r3, r2
 8012ebe:	d011      	beq.n	8012ee4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
 8012ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ec4:	3328      	adds	r3, #40	@ 0x28
 8012ec6:	2100      	movs	r1, #0
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f001 f9ef 	bl	80142ac <RCCEx_PLL3_Config>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d003      	beq.n	8012ee4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
 8012edc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ee0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eec:	2100      	movs	r1, #0
 8012eee:	60b9      	str	r1, [r7, #8]
 8012ef0:	f003 0310 	and.w	r3, r3, #16
 8012ef4:	60fb      	str	r3, [r7, #12]
 8012ef6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8012efa:	460b      	mov	r3, r1
 8012efc:	4313      	orrs	r3, r2
 8012efe:	d011      	beq.n	8012f24 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8012f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f04:	3328      	adds	r3, #40	@ 0x28
 8012f06:	2101      	movs	r1, #1
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f001 f9cf 	bl	80142ac <RCCEx_PLL3_Config>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012f14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d003      	beq.n	8012f24 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8012f1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2c:	2100      	movs	r1, #0
 8012f2e:	6039      	str	r1, [r7, #0]
 8012f30:	f003 0320 	and.w	r3, r3, #32
 8012f34:	607b      	str	r3, [r7, #4]
 8012f36:	e9d7 1200 	ldrd	r1, r2, [r7]
 8012f3a:	460b      	mov	r3, r1
 8012f3c:	4313      	orrs	r3, r2
 8012f3e:	d011      	beq.n	8012f64 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8012f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f44:	3328      	adds	r3, #40	@ 0x28
 8012f46:	2102      	movs	r1, #2
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f001 f9af 	bl	80142ac <RCCEx_PLL3_Config>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8012f54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d003      	beq.n	8012f64 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8012f5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012f64:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d101      	bne.n	8012f70 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	e000      	b.n	8012f72 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8012f70:	2301      	movs	r3, #1
 8012f72:	4618      	mov	r0, r3
 8012f74:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012f7e:	bf00      	nop
 8012f80:	58024400 	.word	0x58024400

08012f84 <HAL_RCCEx_GetPeriphCLKFreq>:
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b090      	sub	sp, #64	@ 0x40
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	e9c7 0100 	strd	r0, r1, [r7]
 8012f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012f92:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8012f96:	430b      	orrs	r3, r1
 8012f98:	f040 8094 	bne.w	80130c4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8012f9c:	4b9b      	ldr	r3, [pc, #620]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012fa0:	f003 0307 	and.w	r3, r3, #7
 8012fa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8012fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fa8:	2b04      	cmp	r3, #4
 8012faa:	f200 8087 	bhi.w	80130bc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8012fae:	a201      	add	r2, pc, #4	@ (adr r2, 8012fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8012fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fb4:	08012fc9 	.word	0x08012fc9
 8012fb8:	08012ff1 	.word	0x08012ff1
 8012fbc:	08013019 	.word	0x08013019
 8012fc0:	080130b5 	.word	0x080130b5
 8012fc4:	08013041 	.word	0x08013041
 8012fc8:	4b90      	ldr	r3, [pc, #576]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012fd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012fd4:	d108      	bne.n	8012fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8012fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f000 ff62 	bl	8013ea4 <HAL_RCCEx_GetPLL1ClockFreq>
 8012fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012fe4:	f000 bc93 	b.w	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012fe8:	2300      	movs	r3, #0
 8012fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012fec:	f000 bc8f 	b.w	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012ff0:	4b86      	ldr	r3, [pc, #536]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012ff8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012ffc:	d108      	bne.n	8013010 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
 8012ffe:	f107 0318 	add.w	r3, r7, #24
 8013002:	4618      	mov	r0, r3
 8013004:	f000 fca6 	bl	8013954 <HAL_RCCEx_GetPLL2ClockFreq>
 8013008:	69bb      	ldr	r3, [r7, #24]
 801300a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801300c:	f000 bc7f 	b.w	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013010:	2300      	movs	r3, #0
 8013012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013014:	f000 bc7b 	b.w	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013018:	4b7c      	ldr	r3, [pc, #496]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013020:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013024:	d108      	bne.n	8013038 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8013026:	f107 030c 	add.w	r3, r7, #12
 801302a:	4618      	mov	r0, r3
 801302c:	f000 fde6 	bl	8013bfc <HAL_RCCEx_GetPLL3ClockFreq>
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013034:	f000 bc6b 	b.w	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013038:	2300      	movs	r3, #0
 801303a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801303c:	f000 bc67 	b.w	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013040:	4b72      	ldr	r3, [pc, #456]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013044:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013048:	637b      	str	r3, [r7, #52]	@ 0x34
 801304a:	4b70      	ldr	r3, [pc, #448]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	f003 0304 	and.w	r3, r3, #4
 8013052:	2b04      	cmp	r3, #4
 8013054:	d10c      	bne.n	8013070 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8013056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013058:	2b00      	cmp	r3, #0
 801305a:	d109      	bne.n	8013070 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801305c:	4b6b      	ldr	r3, [pc, #428]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	08db      	lsrs	r3, r3, #3
 8013062:	f003 0303 	and.w	r3, r3, #3
 8013066:	4a6a      	ldr	r2, [pc, #424]	@ (8013210 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8013068:	fa22 f303 	lsr.w	r3, r2, r3
 801306c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801306e:	e01f      	b.n	80130b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8013070:	4b66      	ldr	r3, [pc, #408]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801307c:	d106      	bne.n	801308c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801307e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013080:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013084:	d102      	bne.n	801308c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8013086:	4b63      	ldr	r3, [pc, #396]	@ (8013214 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8013088:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801308a:	e011      	b.n	80130b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 801308c:	4b5f      	ldr	r3, [pc, #380]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013094:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013098:	d106      	bne.n	80130a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801309a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801309c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80130a0:	d102      	bne.n	80130a8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80130a2:	4b5d      	ldr	r3, [pc, #372]	@ (8013218 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80130a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80130a6:	e003      	b.n	80130b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80130a8:	2300      	movs	r3, #0
 80130aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80130ac:	f000 bc2f 	b.w	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80130b0:	f000 bc2d 	b.w	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80130b4:	4b59      	ldr	r3, [pc, #356]	@ (801321c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80130b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80130b8:	f000 bc29 	b.w	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80130bc:	2300      	movs	r3, #0
 80130be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80130c0:	f000 bc25 	b.w	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80130c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80130c8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80130cc:	430b      	orrs	r3, r1
 80130ce:	f040 80a7 	bne.w	8013220 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 80130d2:	4b4e      	ldr	r3, [pc, #312]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80130d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80130d6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80130da:	633b      	str	r3, [r7, #48]	@ 0x30
 80130dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80130e2:	d054      	beq.n	801318e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80130e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80130ea:	f200 808b 	bhi.w	8013204 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80130ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80130f4:	f000 8083 	beq.w	80131fe <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80130f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80130fe:	f200 8081 	bhi.w	8013204 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013104:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013108:	d02f      	beq.n	801316a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801310a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801310c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013110:	d878      	bhi.n	8013204 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013114:	2b00      	cmp	r3, #0
 8013116:	d004      	beq.n	8013122 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8013118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801311a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801311e:	d012      	beq.n	8013146 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8013120:	e070      	b.n	8013204 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013122:	4b3a      	ldr	r3, [pc, #232]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801312a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801312e:	d107      	bne.n	8013140 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8013130:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013134:	4618      	mov	r0, r3
 8013136:	f000 feb5 	bl	8013ea4 <HAL_RCCEx_GetPLL1ClockFreq>
 801313a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801313c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801313e:	e3e6      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013140:	2300      	movs	r3, #0
 8013142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013144:	e3e3      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013146:	4b31      	ldr	r3, [pc, #196]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801314e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013152:	d107      	bne.n	8013164 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8013154:	f107 0318 	add.w	r3, r7, #24
 8013158:	4618      	mov	r0, r3
 801315a:	f000 fbfb 	bl	8013954 <HAL_RCCEx_GetPLL2ClockFreq>
 801315e:	69bb      	ldr	r3, [r7, #24]
 8013160:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013162:	e3d4      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013164:	2300      	movs	r3, #0
 8013166:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013168:	e3d1      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801316a:	4b28      	ldr	r3, [pc, #160]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013176:	d107      	bne.n	8013188 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 8013178:	f107 030c 	add.w	r3, r7, #12
 801317c:	4618      	mov	r0, r3
 801317e:	f000 fd3d 	bl	8013bfc <HAL_RCCEx_GetPLL3ClockFreq>
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013186:	e3c2      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013188:	2300      	movs	r3, #0
 801318a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801318c:	e3bf      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801318e:	4b1f      	ldr	r3, [pc, #124]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013192:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013196:	637b      	str	r3, [r7, #52]	@ 0x34
 8013198:	4b1c      	ldr	r3, [pc, #112]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	f003 0304 	and.w	r3, r3, #4
 80131a0:	2b04      	cmp	r3, #4
 80131a2:	d10c      	bne.n	80131be <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80131a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d109      	bne.n	80131be <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80131aa:	4b18      	ldr	r3, [pc, #96]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	08db      	lsrs	r3, r3, #3
 80131b0:	f003 0303 	and.w	r3, r3, #3
 80131b4:	4a16      	ldr	r2, [pc, #88]	@ (8013210 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80131b6:	fa22 f303 	lsr.w	r3, r2, r3
 80131ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131bc:	e01e      	b.n	80131fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 80131be:	4b13      	ldr	r3, [pc, #76]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80131c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80131ca:	d106      	bne.n	80131da <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80131cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80131d2:	d102      	bne.n	80131da <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80131d4:	4b0f      	ldr	r3, [pc, #60]	@ (8013214 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80131d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131d8:	e010      	b.n	80131fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 80131da:	4b0c      	ldr	r3, [pc, #48]	@ (801320c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80131e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80131e6:	d106      	bne.n	80131f6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80131e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80131ee:	d102      	bne.n	80131f6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80131f0:	4b09      	ldr	r3, [pc, #36]	@ (8013218 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80131f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131f4:	e002      	b.n	80131fc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 80131f6:	2300      	movs	r3, #0
 80131f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131fa:	e388      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80131fc:	e387      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80131fe:	4b07      	ldr	r3, [pc, #28]	@ (801321c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8013200:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013202:	e384      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013204:	2300      	movs	r3, #0
 8013206:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013208:	e381      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801320a:	bf00      	nop
 801320c:	58024400 	.word	0x58024400
 8013210:	03d09000 	.word	0x03d09000
 8013214:	003d0900 	.word	0x003d0900
 8013218:	016e3600 	.word	0x016e3600
 801321c:	00bb8000 	.word	0x00bb8000
 8013220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013224:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8013228:	430b      	orrs	r3, r1
 801322a:	f040 809c 	bne.w	8013366 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 801322e:	4b9e      	ldr	r3, [pc, #632]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013232:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8013236:	633b      	str	r3, [r7, #48]	@ 0x30
 8013238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801323a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801323e:	d054      	beq.n	80132ea <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8013240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013242:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013246:	f200 808b 	bhi.w	8013360 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801324a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801324c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8013250:	f000 8083 	beq.w	801335a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8013254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013256:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801325a:	f200 8081 	bhi.w	8013360 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801325e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013260:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013264:	d02f      	beq.n	80132c6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8013266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013268:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801326c:	d878      	bhi.n	8013360 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801326e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013270:	2b00      	cmp	r3, #0
 8013272:	d004      	beq.n	801327e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8013274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013276:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801327a:	d012      	beq.n	80132a2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 801327c:	e070      	b.n	8013360 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801327e:	4b8a      	ldr	r3, [pc, #552]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013286:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801328a:	d107      	bne.n	801329c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 801328c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013290:	4618      	mov	r0, r3
 8013292:	f000 fe07 	bl	8013ea4 <HAL_RCCEx_GetPLL1ClockFreq>
 8013296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801329a:	e338      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801329c:	2300      	movs	r3, #0
 801329e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132a0:	e335      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80132a2:	4b81      	ldr	r3, [pc, #516]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80132aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80132ae:	d107      	bne.n	80132c0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 80132b0:	f107 0318 	add.w	r3, r7, #24
 80132b4:	4618      	mov	r0, r3
 80132b6:	f000 fb4d 	bl	8013954 <HAL_RCCEx_GetPLL2ClockFreq>
 80132ba:	69bb      	ldr	r3, [r7, #24]
 80132bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132be:	e326      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80132c0:	2300      	movs	r3, #0
 80132c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132c4:	e323      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80132c6:	4b78      	ldr	r3, [pc, #480]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80132ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80132d2:	d107      	bne.n	80132e4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 80132d4:	f107 030c 	add.w	r3, r7, #12
 80132d8:	4618      	mov	r0, r3
 80132da:	f000 fc8f 	bl	8013bfc <HAL_RCCEx_GetPLL3ClockFreq>
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132e2:	e314      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80132e4:	2300      	movs	r3, #0
 80132e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132e8:	e311      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80132ea:	4b6f      	ldr	r3, [pc, #444]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80132ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80132ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80132f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80132f4:	4b6c      	ldr	r3, [pc, #432]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	f003 0304 	and.w	r3, r3, #4
 80132fc:	2b04      	cmp	r3, #4
 80132fe:	d10c      	bne.n	801331a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8013300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013302:	2b00      	cmp	r3, #0
 8013304:	d109      	bne.n	801331a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8013306:	4b68      	ldr	r3, [pc, #416]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	08db      	lsrs	r3, r3, #3
 801330c:	f003 0303 	and.w	r3, r3, #3
 8013310:	4a66      	ldr	r2, [pc, #408]	@ (80134ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8013312:	fa22 f303 	lsr.w	r3, r2, r3
 8013316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013318:	e01e      	b.n	8013358 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 801331a:	4b63      	ldr	r3, [pc, #396]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013326:	d106      	bne.n	8013336 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8013328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801332a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801332e:	d102      	bne.n	8013336 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8013330:	4b5f      	ldr	r3, [pc, #380]	@ (80134b0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8013332:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013334:	e010      	b.n	8013358 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 8013336:	4b5c      	ldr	r3, [pc, #368]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801333e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013342:	d106      	bne.n	8013352 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8013344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801334a:	d102      	bne.n	8013352 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 801334c:	4b59      	ldr	r3, [pc, #356]	@ (80134b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801334e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013350:	e002      	b.n	8013358 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 8013352:	2300      	movs	r3, #0
 8013354:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013356:	e2da      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013358:	e2d9      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801335a:	4b57      	ldr	r3, [pc, #348]	@ (80134b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801335c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801335e:	e2d6      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013360:	2300      	movs	r3, #0
 8013362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013364:	e2d3      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013366:	e9d7 2300 	ldrd	r2, r3, [r7]
 801336a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 801336e:	430b      	orrs	r3, r1
 8013370:	f040 80a7 	bne.w	80134c2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
 8013374:	4b4c      	ldr	r3, [pc, #304]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013378:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 801337c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801337e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013380:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013384:	d055      	beq.n	8013432 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8013386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013388:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801338c:	f200 8096 	bhi.w	80134bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013392:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013396:	f000 8084 	beq.w	80134a2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 801339a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801339c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80133a0:	f200 808c 	bhi.w	80134bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80133a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80133aa:	d030      	beq.n	801340e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80133ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80133b2:	f200 8083 	bhi.w	80134bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80133b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d004      	beq.n	80133c6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80133bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80133c2:	d012      	beq.n	80133ea <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80133c4:	e07a      	b.n	80134bc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80133c6:	4b38      	ldr	r3, [pc, #224]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80133ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80133d2:	d107      	bne.n	80133e4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 80133d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80133d8:	4618      	mov	r0, r3
 80133da:	f000 fd63 	bl	8013ea4 <HAL_RCCEx_GetPLL1ClockFreq>
 80133de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80133e2:	e294      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80133e4:	2300      	movs	r3, #0
 80133e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80133e8:	e291      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80133ea:	4b2f      	ldr	r3, [pc, #188]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80133f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80133f6:	d107      	bne.n	8013408 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80133f8:	f107 0318 	add.w	r3, r7, #24
 80133fc:	4618      	mov	r0, r3
 80133fe:	f000 faa9 	bl	8013954 <HAL_RCCEx_GetPLL2ClockFreq>
 8013402:	69bb      	ldr	r3, [r7, #24]
 8013404:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013406:	e282      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013408:	2300      	movs	r3, #0
 801340a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801340c:	e27f      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801340e:	4b26      	ldr	r3, [pc, #152]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801341a:	d107      	bne.n	801342c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 801341c:	f107 030c 	add.w	r3, r7, #12
 8013420:	4618      	mov	r0, r3
 8013422:	f000 fbeb 	bl	8013bfc <HAL_RCCEx_GetPLL3ClockFreq>
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801342a:	e270      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801342c:	2300      	movs	r3, #0
 801342e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013430:	e26d      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013432:	4b1d      	ldr	r3, [pc, #116]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013436:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801343a:	637b      	str	r3, [r7, #52]	@ 0x34
 801343c:	4b1a      	ldr	r3, [pc, #104]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	f003 0304 	and.w	r3, r3, #4
 8013444:	2b04      	cmp	r3, #4
 8013446:	d10c      	bne.n	8013462 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8013448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801344a:	2b00      	cmp	r3, #0
 801344c:	d109      	bne.n	8013462 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 801344e:	4b16      	ldr	r3, [pc, #88]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	08db      	lsrs	r3, r3, #3
 8013454:	f003 0303 	and.w	r3, r3, #3
 8013458:	4a14      	ldr	r2, [pc, #80]	@ (80134ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801345a:	fa22 f303 	lsr.w	r3, r2, r3
 801345e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013460:	e01e      	b.n	80134a0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 8013462:	4b11      	ldr	r3, [pc, #68]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801346a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801346e:	d106      	bne.n	801347e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8013470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013472:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013476:	d102      	bne.n	801347e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8013478:	4b0d      	ldr	r3, [pc, #52]	@ (80134b0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801347a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801347c:	e010      	b.n	80134a0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 801347e:	4b0a      	ldr	r3, [pc, #40]	@ (80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013486:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801348a:	d106      	bne.n	801349a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 801348c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801348e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013492:	d102      	bne.n	801349a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8013494:	4b07      	ldr	r3, [pc, #28]	@ (80134b4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013498:	e002      	b.n	80134a0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 801349a:	2300      	movs	r3, #0
 801349c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801349e:	e236      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80134a0:	e235      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80134a2:	4b05      	ldr	r3, [pc, #20]	@ (80134b8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80134a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134a6:	e232      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80134a8:	58024400 	.word	0x58024400
 80134ac:	03d09000 	.word	0x03d09000
 80134b0:	003d0900 	.word	0x003d0900
 80134b4:	016e3600 	.word	0x016e3600
 80134b8:	00bb8000 	.word	0x00bb8000
 80134bc:	2300      	movs	r3, #0
 80134be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134c0:	e225      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80134c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80134c6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80134ca:	430b      	orrs	r3, r1
 80134cc:	f040 8085 	bne.w	80135da <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 80134d0:	4b9c      	ldr	r3, [pc, #624]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80134d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80134d4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80134d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80134da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80134e0:	d06b      	beq.n	80135ba <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80134e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80134e8:	d874      	bhi.n	80135d4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80134ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80134f0:	d056      	beq.n	80135a0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80134f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80134f8:	d86c      	bhi.n	80135d4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80134fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013500:	d03b      	beq.n	801357a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8013502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013504:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013508:	d864      	bhi.n	80135d4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801350a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801350c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013510:	d021      	beq.n	8013556 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8013512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013514:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013518:	d85c      	bhi.n	80135d4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801351a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801351c:	2b00      	cmp	r3, #0
 801351e:	d004      	beq.n	801352a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8013520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013526:	d004      	beq.n	8013532 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8013528:	e054      	b.n	80135d4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801352a:	f7fe fb5f 	bl	8011bec <HAL_RCC_GetPCLK1Freq>
 801352e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8013530:	e1ed      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013532:	4b84      	ldr	r3, [pc, #528]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801353a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801353e:	d107      	bne.n	8013550 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8013540:	f107 0318 	add.w	r3, r7, #24
 8013544:	4618      	mov	r0, r3
 8013546:	f000 fa05 	bl	8013954 <HAL_RCCEx_GetPLL2ClockFreq>
 801354a:	69fb      	ldr	r3, [r7, #28]
 801354c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801354e:	e1de      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013550:	2300      	movs	r3, #0
 8013552:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013554:	e1db      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013556:	4b7b      	ldr	r3, [pc, #492]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801355e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013562:	d107      	bne.n	8013574 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8013564:	f107 030c 	add.w	r3, r7, #12
 8013568:	4618      	mov	r0, r3
 801356a:	f000 fb47 	bl	8013bfc <HAL_RCCEx_GetPLL3ClockFreq>
 801356e:	693b      	ldr	r3, [r7, #16]
 8013570:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013572:	e1cc      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013574:	2300      	movs	r3, #0
 8013576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013578:	e1c9      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801357a:	4b72      	ldr	r3, [pc, #456]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	f003 0304 	and.w	r3, r3, #4
 8013582:	2b04      	cmp	r3, #4
 8013584:	d109      	bne.n	801359a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8013586:	4b6f      	ldr	r3, [pc, #444]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	08db      	lsrs	r3, r3, #3
 801358c:	f003 0303 	and.w	r3, r3, #3
 8013590:	4a6d      	ldr	r2, [pc, #436]	@ (8013748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8013592:	fa22 f303 	lsr.w	r3, r2, r3
 8013596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013598:	e1b9      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801359a:	2300      	movs	r3, #0
 801359c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801359e:	e1b6      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80135a0:	4b68      	ldr	r3, [pc, #416]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80135a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80135ac:	d102      	bne.n	80135b4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80135ae:	4b67      	ldr	r3, [pc, #412]	@ (801374c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80135b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135b2:	e1ac      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80135b4:	2300      	movs	r3, #0
 80135b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135b8:	e1a9      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80135ba:	4b62      	ldr	r3, [pc, #392]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80135c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80135c6:	d102      	bne.n	80135ce <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80135c8:	4b61      	ldr	r3, [pc, #388]	@ (8013750 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80135ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135cc:	e19f      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80135ce:	2300      	movs	r3, #0
 80135d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135d2:	e19c      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80135d4:	2300      	movs	r3, #0
 80135d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135d8:	e199      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80135da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80135de:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80135e2:	430b      	orrs	r3, r1
 80135e4:	d173      	bne.n	80136ce <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 80135e6:	4b57      	ldr	r3, [pc, #348]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80135e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80135ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80135ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80135f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80135f6:	d02f      	beq.n	8013658 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80135f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80135fe:	d863      	bhi.n	80136c8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8013600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013602:	2b00      	cmp	r3, #0
 8013604:	d004      	beq.n	8013610 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8013606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801360c:	d012      	beq.n	8013634 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 801360e:	e05b      	b.n	80136c8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8013610:	4b4c      	ldr	r3, [pc, #304]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013618:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801361c:	d107      	bne.n	801362e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
 801361e:	f107 0318 	add.w	r3, r7, #24
 8013622:	4618      	mov	r0, r3
 8013624:	f000 f996 	bl	8013954 <HAL_RCCEx_GetPLL2ClockFreq>
 8013628:	69bb      	ldr	r3, [r7, #24]
 801362a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801362c:	e16f      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801362e:	2300      	movs	r3, #0
 8013630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013632:	e16c      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013634:	4b43      	ldr	r3, [pc, #268]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801363c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013640:	d107      	bne.n	8013652 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8013642:	f107 030c 	add.w	r3, r7, #12
 8013646:	4618      	mov	r0, r3
 8013648:	f000 fad8 	bl	8013bfc <HAL_RCCEx_GetPLL3ClockFreq>
 801364c:	697b      	ldr	r3, [r7, #20]
 801364e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013650:	e15d      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013652:	2300      	movs	r3, #0
 8013654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013656:	e15a      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013658:	4b3a      	ldr	r3, [pc, #232]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801365a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801365c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013660:	637b      	str	r3, [r7, #52]	@ 0x34
 8013662:	4b38      	ldr	r3, [pc, #224]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	f003 0304 	and.w	r3, r3, #4
 801366a:	2b04      	cmp	r3, #4
 801366c:	d10c      	bne.n	8013688 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 801366e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013670:	2b00      	cmp	r3, #0
 8013672:	d109      	bne.n	8013688 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8013674:	4b33      	ldr	r3, [pc, #204]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	08db      	lsrs	r3, r3, #3
 801367a:	f003 0303 	and.w	r3, r3, #3
 801367e:	4a32      	ldr	r2, [pc, #200]	@ (8013748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8013680:	fa22 f303 	lsr.w	r3, r2, r3
 8013684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013686:	e01e      	b.n	80136c6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8013688:	4b2e      	ldr	r3, [pc, #184]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013694:	d106      	bne.n	80136a4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8013696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013698:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801369c:	d102      	bne.n	80136a4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 801369e:	4b2b      	ldr	r3, [pc, #172]	@ (801374c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80136a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136a2:	e010      	b.n	80136c6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80136a4:	4b27      	ldr	r3, [pc, #156]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80136ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80136b0:	d106      	bne.n	80136c0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80136b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80136b8:	d102      	bne.n	80136c0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80136ba:	4b25      	ldr	r3, [pc, #148]	@ (8013750 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80136bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136be:	e002      	b.n	80136c6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 80136c0:	2300      	movs	r3, #0
 80136c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136c4:	e123      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80136c6:	e122      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80136c8:	2300      	movs	r3, #0
 80136ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136cc:	e11f      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80136ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80136d2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80136d6:	430b      	orrs	r3, r1
 80136d8:	d13c      	bne.n	8013754 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 80136da:	4b1a      	ldr	r3, [pc, #104]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80136dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80136de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80136e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80136e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d004      	beq.n	80136f4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80136ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80136f0:	d012      	beq.n	8013718 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80136f2:	e023      	b.n	801373c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80136f4:	4b13      	ldr	r3, [pc, #76]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80136fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013700:	d107      	bne.n	8013712 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8013702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013706:	4618      	mov	r0, r3
 8013708:	f000 fbcc 	bl	8013ea4 <HAL_RCCEx_GetPLL1ClockFreq>
 801370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801370e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013710:	e0fd      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013712:	2300      	movs	r3, #0
 8013714:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013716:	e0fa      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013718:	4b0a      	ldr	r3, [pc, #40]	@ (8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013720:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013724:	d107      	bne.n	8013736 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8013726:	f107 0318 	add.w	r3, r7, #24
 801372a:	4618      	mov	r0, r3
 801372c:	f000 f912 	bl	8013954 <HAL_RCCEx_GetPLL2ClockFreq>
 8013730:	6a3b      	ldr	r3, [r7, #32]
 8013732:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013734:	e0eb      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013736:	2300      	movs	r3, #0
 8013738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801373a:	e0e8      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801373c:	2300      	movs	r3, #0
 801373e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013740:	e0e5      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013742:	bf00      	nop
 8013744:	58024400 	.word	0x58024400
 8013748:	03d09000 	.word	0x03d09000
 801374c:	003d0900 	.word	0x003d0900
 8013750:	016e3600 	.word	0x016e3600
 8013754:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013758:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 801375c:	430b      	orrs	r3, r1
 801375e:	f040 8085 	bne.w	801386c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8013762:	4b6d      	ldr	r3, [pc, #436]	@ (8013918 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013766:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 801376a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801376c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801376e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013772:	d06b      	beq.n	801384c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8013774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013776:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801377a:	d874      	bhi.n	8013866 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801377c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801377e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013782:	d056      	beq.n	8013832 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8013784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801378a:	d86c      	bhi.n	8013866 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801378c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801378e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013792:	d03b      	beq.n	801380c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8013794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013796:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801379a:	d864      	bhi.n	8013866 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801379c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801379e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80137a2:	d021      	beq.n	80137e8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80137a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80137aa:	d85c      	bhi.n	8013866 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80137ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d004      	beq.n	80137bc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80137b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80137b8:	d004      	beq.n	80137c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80137ba:	e054      	b.n	8013866 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80137bc:	f000 f8b4 	bl	8013928 <HAL_RCCEx_GetD3PCLK1Freq>
 80137c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80137c2:	e0a4      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80137c4:	4b54      	ldr	r3, [pc, #336]	@ (8013918 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80137cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80137d0:	d107      	bne.n	80137e2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80137d2:	f107 0318 	add.w	r3, r7, #24
 80137d6:	4618      	mov	r0, r3
 80137d8:	f000 f8bc 	bl	8013954 <HAL_RCCEx_GetPLL2ClockFreq>
 80137dc:	69fb      	ldr	r3, [r7, #28]
 80137de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137e0:	e095      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80137e2:	2300      	movs	r3, #0
 80137e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137e6:	e092      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80137e8:	4b4b      	ldr	r3, [pc, #300]	@ (8013918 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80137f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80137f4:	d107      	bne.n	8013806 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
 80137f6:	f107 030c 	add.w	r3, r7, #12
 80137fa:	4618      	mov	r0, r3
 80137fc:	f000 f9fe 	bl	8013bfc <HAL_RCCEx_GetPLL3ClockFreq>
 8013800:	693b      	ldr	r3, [r7, #16]
 8013802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013804:	e083      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013806:	2300      	movs	r3, #0
 8013808:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801380a:	e080      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801380c:	4b42      	ldr	r3, [pc, #264]	@ (8013918 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	f003 0304 	and.w	r3, r3, #4
 8013814:	2b04      	cmp	r3, #4
 8013816:	d109      	bne.n	801382c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
 8013818:	4b3f      	ldr	r3, [pc, #252]	@ (8013918 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	08db      	lsrs	r3, r3, #3
 801381e:	f003 0303 	and.w	r3, r3, #3
 8013822:	4a3e      	ldr	r2, [pc, #248]	@ (801391c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8013824:	fa22 f303 	lsr.w	r3, r2, r3
 8013828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801382a:	e070      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801382c:	2300      	movs	r3, #0
 801382e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013830:	e06d      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013832:	4b39      	ldr	r3, [pc, #228]	@ (8013918 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801383a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801383e:	d102      	bne.n	8013846 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8013840:	4b37      	ldr	r3, [pc, #220]	@ (8013920 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8013842:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013844:	e063      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013846:	2300      	movs	r3, #0
 8013848:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801384a:	e060      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801384c:	4b32      	ldr	r3, [pc, #200]	@ (8013918 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013858:	d102      	bne.n	8013860 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
 801385a:	4b32      	ldr	r3, [pc, #200]	@ (8013924 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801385c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801385e:	e056      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013860:	2300      	movs	r3, #0
 8013862:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013864:	e053      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013866:	2300      	movs	r3, #0
 8013868:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801386a:	e050      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801386c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013870:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8013874:	430b      	orrs	r3, r1
 8013876:	d148      	bne.n	801390a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8013878:	4b27      	ldr	r3, [pc, #156]	@ (8013918 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801387a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801387c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013880:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013888:	d02a      	beq.n	80138e0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 801388a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801388c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013890:	d838      	bhi.n	8013904 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8013892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013894:	2b00      	cmp	r3, #0
 8013896:	d004      	beq.n	80138a2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8013898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801389a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801389e:	d00d      	beq.n	80138bc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80138a0:	e030      	b.n	8013904 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80138a2:	4b1d      	ldr	r3, [pc, #116]	@ (8013918 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80138aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80138ae:	d102      	bne.n	80138b6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
 80138b0:	4b1c      	ldr	r3, [pc, #112]	@ (8013924 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80138b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138b4:	e02b      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80138b6:	2300      	movs	r3, #0
 80138b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138ba:	e028      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80138bc:	4b16      	ldr	r3, [pc, #88]	@ (8013918 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80138c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80138c8:	d107      	bne.n	80138da <HAL_RCCEx_GetPeriphCLKFreq+0x956>
 80138ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80138ce:	4618      	mov	r0, r3
 80138d0:	f000 fae8 	bl	8013ea4 <HAL_RCCEx_GetPLL1ClockFreq>
 80138d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138d8:	e019      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80138da:	2300      	movs	r3, #0
 80138dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138de:	e016      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80138e0:	4b0d      	ldr	r3, [pc, #52]	@ (8013918 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80138e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80138ec:	d107      	bne.n	80138fe <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80138ee:	f107 0318 	add.w	r3, r7, #24
 80138f2:	4618      	mov	r0, r3
 80138f4:	f000 f82e 	bl	8013954 <HAL_RCCEx_GetPLL2ClockFreq>
 80138f8:	69fb      	ldr	r3, [r7, #28]
 80138fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138fc:	e007      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80138fe:	2300      	movs	r3, #0
 8013900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013902:	e004      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013904:	2300      	movs	r3, #0
 8013906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013908:	e001      	b.n	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801390a:	2300      	movs	r3, #0
 801390c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801390e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013910:	4618      	mov	r0, r3
 8013912:	3740      	adds	r7, #64	@ 0x40
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}
 8013918:	58024400 	.word	0x58024400
 801391c:	03d09000 	.word	0x03d09000
 8013920:	003d0900 	.word	0x003d0900
 8013924:	016e3600 	.word	0x016e3600

08013928 <HAL_RCCEx_GetD3PCLK1Freq>:
 8013928:	b580      	push	{r7, lr}
 801392a:	af00      	add	r7, sp, #0
 801392c:	f7fe f92e 	bl	8011b8c <HAL_RCC_GetHCLKFreq>
 8013930:	4602      	mov	r2, r0
 8013932:	4b06      	ldr	r3, [pc, #24]	@ (801394c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013934:	6a1b      	ldr	r3, [r3, #32]
 8013936:	091b      	lsrs	r3, r3, #4
 8013938:	f003 0307 	and.w	r3, r3, #7
 801393c:	4904      	ldr	r1, [pc, #16]	@ (8013950 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801393e:	5ccb      	ldrb	r3, [r1, r3]
 8013940:	f003 031f 	and.w	r3, r3, #31
 8013944:	fa22 f303 	lsr.w	r3, r2, r3
 8013948:	4618      	mov	r0, r3
 801394a:	bd80      	pop	{r7, pc}
 801394c:	58024400 	.word	0x58024400
 8013950:	0801e75c 	.word	0x0801e75c

08013954 <HAL_RCCEx_GetPLL2ClockFreq>:
 8013954:	b480      	push	{r7}
 8013956:	b089      	sub	sp, #36	@ 0x24
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
 801395c:	4ba1      	ldr	r3, [pc, #644]	@ (8013be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801395e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013960:	f003 0303 	and.w	r3, r3, #3
 8013964:	61bb      	str	r3, [r7, #24]
 8013966:	4b9f      	ldr	r3, [pc, #636]	@ (8013be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801396a:	0b1b      	lsrs	r3, r3, #12
 801396c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013970:	617b      	str	r3, [r7, #20]
 8013972:	4b9c      	ldr	r3, [pc, #624]	@ (8013be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013976:	091b      	lsrs	r3, r3, #4
 8013978:	f003 0301 	and.w	r3, r3, #1
 801397c:	613b      	str	r3, [r7, #16]
 801397e:	4b99      	ldr	r3, [pc, #612]	@ (8013be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013982:	08db      	lsrs	r3, r3, #3
 8013984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013988:	693a      	ldr	r2, [r7, #16]
 801398a:	fb02 f303 	mul.w	r3, r2, r3
 801398e:	ee07 3a90 	vmov	s15, r3
 8013992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013996:	edc7 7a03 	vstr	s15, [r7, #12]
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	2b00      	cmp	r3, #0
 801399e:	f000 8111 	beq.w	8013bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
 80139a2:	69bb      	ldr	r3, [r7, #24]
 80139a4:	2b02      	cmp	r3, #2
 80139a6:	f000 8083 	beq.w	8013ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80139aa:	69bb      	ldr	r3, [r7, #24]
 80139ac:	2b02      	cmp	r3, #2
 80139ae:	f200 80a1 	bhi.w	8013af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80139b2:	69bb      	ldr	r3, [r7, #24]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d003      	beq.n	80139c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80139b8:	69bb      	ldr	r3, [r7, #24]
 80139ba:	2b01      	cmp	r3, #1
 80139bc:	d056      	beq.n	8013a6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80139be:	e099      	b.n	8013af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80139c0:	4b88      	ldr	r3, [pc, #544]	@ (8013be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	f003 0320 	and.w	r3, r3, #32
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d02d      	beq.n	8013a28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
 80139cc:	4b85      	ldr	r3, [pc, #532]	@ (8013be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	08db      	lsrs	r3, r3, #3
 80139d2:	f003 0303 	and.w	r3, r3, #3
 80139d6:	4a84      	ldr	r2, [pc, #528]	@ (8013be8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80139d8:	fa22 f303 	lsr.w	r3, r2, r3
 80139dc:	60bb      	str	r3, [r7, #8]
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	ee07 3a90 	vmov	s15, r3
 80139e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80139e8:	697b      	ldr	r3, [r7, #20]
 80139ea:	ee07 3a90 	vmov	s15, r3
 80139ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80139f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80139f6:	4b7b      	ldr	r3, [pc, #492]	@ (8013be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80139f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80139fe:	ee07 3a90 	vmov	s15, r3
 8013a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8013a0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013bec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a22:	edc7 7a07 	vstr	s15, [r7, #28]
 8013a26:	e087      	b.n	8013b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8013a28:	697b      	ldr	r3, [r7, #20]
 8013a2a:	ee07 3a90 	vmov	s15, r3
 8013a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013a3a:	4b6a      	ldr	r3, [pc, #424]	@ (8013be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a42:	ee07 3a90 	vmov	s15, r3
 8013a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013a4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013bec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a66:	edc7 7a07 	vstr	s15, [r7, #28]
 8013a6a:	e065      	b.n	8013b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8013a6c:	697b      	ldr	r3, [r7, #20]
 8013a6e:	ee07 3a90 	vmov	s15, r3
 8013a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013a7e:	4b59      	ldr	r3, [pc, #356]	@ (8013be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a86:	ee07 3a90 	vmov	s15, r3
 8013a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013a92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013bec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013aaa:	edc7 7a07 	vstr	s15, [r7, #28]
 8013aae:	e043      	b.n	8013b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8013ab0:	697b      	ldr	r3, [r7, #20]
 8013ab2:	ee07 3a90 	vmov	s15, r3
 8013ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013aba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ac2:	4b48      	ldr	r3, [pc, #288]	@ (8013be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013aca:	ee07 3a90 	vmov	s15, r3
 8013ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8013ad6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013bec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013aee:	edc7 7a07 	vstr	s15, [r7, #28]
 8013af2:	e021      	b.n	8013b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
 8013af4:	697b      	ldr	r3, [r7, #20]
 8013af6:	ee07 3a90 	vmov	s15, r3
 8013afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013afe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b06:	4b37      	ldr	r3, [pc, #220]	@ (8013be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b0e:	ee07 3a90 	vmov	s15, r3
 8013b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8013b1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013bec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b32:	edc7 7a07 	vstr	s15, [r7, #28]
 8013b36:	bf00      	nop
 8013b38:	4b2a      	ldr	r3, [pc, #168]	@ (8013be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b3c:	0a5b      	lsrs	r3, r3, #9
 8013b3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013b42:	ee07 3a90 	vmov	s15, r3
 8013b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013b4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013b52:	edd7 6a07 	vldr	s13, [r7, #28]
 8013b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013b5e:	ee17 2a90 	vmov	r2, s15
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	601a      	str	r2, [r3, #0]
 8013b66:	4b1f      	ldr	r3, [pc, #124]	@ (8013be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b6a:	0c1b      	lsrs	r3, r3, #16
 8013b6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013b70:	ee07 3a90 	vmov	s15, r3
 8013b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013b7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8013b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013b8c:	ee17 2a90 	vmov	r2, s15
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	605a      	str	r2, [r3, #4]
 8013b94:	4b13      	ldr	r3, [pc, #76]	@ (8013be4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b98:	0e1b      	lsrs	r3, r3, #24
 8013b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013b9e:	ee07 3a90 	vmov	s15, r3
 8013ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ba6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013baa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013bae:	edd7 6a07 	vldr	s13, [r7, #28]
 8013bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013bba:	ee17 2a90 	vmov	r2, s15
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	609a      	str	r2, [r3, #8]
 8013bc2:	e008      	b.n	8013bd6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	601a      	str	r2, [r3, #0]
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2200      	movs	r2, #0
 8013bce:	605a      	str	r2, [r3, #4]
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	609a      	str	r2, [r3, #8]
 8013bd6:	bf00      	nop
 8013bd8:	3724      	adds	r7, #36	@ 0x24
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be0:	4770      	bx	lr
 8013be2:	bf00      	nop
 8013be4:	58024400 	.word	0x58024400
 8013be8:	03d09000 	.word	0x03d09000
 8013bec:	46000000 	.word	0x46000000
 8013bf0:	4c742400 	.word	0x4c742400
 8013bf4:	4a742400 	.word	0x4a742400
 8013bf8:	4bb71b00 	.word	0x4bb71b00

08013bfc <HAL_RCCEx_GetPLL3ClockFreq>:
 8013bfc:	b480      	push	{r7}
 8013bfe:	b089      	sub	sp, #36	@ 0x24
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
 8013c04:	4ba1      	ldr	r3, [pc, #644]	@ (8013e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c08:	f003 0303 	and.w	r3, r3, #3
 8013c0c:	61bb      	str	r3, [r7, #24]
 8013c0e:	4b9f      	ldr	r3, [pc, #636]	@ (8013e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c12:	0d1b      	lsrs	r3, r3, #20
 8013c14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013c18:	617b      	str	r3, [r7, #20]
 8013c1a:	4b9c      	ldr	r3, [pc, #624]	@ (8013e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c1e:	0a1b      	lsrs	r3, r3, #8
 8013c20:	f003 0301 	and.w	r3, r3, #1
 8013c24:	613b      	str	r3, [r7, #16]
 8013c26:	4b99      	ldr	r3, [pc, #612]	@ (8013e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c2a:	08db      	lsrs	r3, r3, #3
 8013c2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013c30:	693a      	ldr	r2, [r7, #16]
 8013c32:	fb02 f303 	mul.w	r3, r2, r3
 8013c36:	ee07 3a90 	vmov	s15, r3
 8013c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c3e:	edc7 7a03 	vstr	s15, [r7, #12]
 8013c42:	697b      	ldr	r3, [r7, #20]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	f000 8111 	beq.w	8013e6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
 8013c4a:	69bb      	ldr	r3, [r7, #24]
 8013c4c:	2b02      	cmp	r3, #2
 8013c4e:	f000 8083 	beq.w	8013d58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8013c52:	69bb      	ldr	r3, [r7, #24]
 8013c54:	2b02      	cmp	r3, #2
 8013c56:	f200 80a1 	bhi.w	8013d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8013c5a:	69bb      	ldr	r3, [r7, #24]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d003      	beq.n	8013c68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8013c60:	69bb      	ldr	r3, [r7, #24]
 8013c62:	2b01      	cmp	r3, #1
 8013c64:	d056      	beq.n	8013d14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8013c66:	e099      	b.n	8013d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8013c68:	4b88      	ldr	r3, [pc, #544]	@ (8013e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	f003 0320 	and.w	r3, r3, #32
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d02d      	beq.n	8013cd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
 8013c74:	4b85      	ldr	r3, [pc, #532]	@ (8013e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	08db      	lsrs	r3, r3, #3
 8013c7a:	f003 0303 	and.w	r3, r3, #3
 8013c7e:	4a84      	ldr	r2, [pc, #528]	@ (8013e90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8013c80:	fa22 f303 	lsr.w	r3, r2, r3
 8013c84:	60bb      	str	r3, [r7, #8]
 8013c86:	68bb      	ldr	r3, [r7, #8]
 8013c88:	ee07 3a90 	vmov	s15, r3
 8013c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c90:	697b      	ldr	r3, [r7, #20]
 8013c92:	ee07 3a90 	vmov	s15, r3
 8013c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c9e:	4b7b      	ldr	r3, [pc, #492]	@ (8013e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ca6:	ee07 3a90 	vmov	s15, r3
 8013caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8013cb2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013e94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013cca:	edc7 7a07 	vstr	s15, [r7, #28]
 8013cce:	e087      	b.n	8013de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	ee07 3a90 	vmov	s15, r3
 8013cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cda:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013e98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8013cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8013e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cea:	ee07 3a90 	vmov	s15, r3
 8013cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8013cf6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013e94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d0e:	edc7 7a07 	vstr	s15, [r7, #28]
 8013d12:	e065      	b.n	8013de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8013d14:	697b      	ldr	r3, [r7, #20]
 8013d16:	ee07 3a90 	vmov	s15, r3
 8013d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d1e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013e9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013d26:	4b59      	ldr	r3, [pc, #356]	@ (8013e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d2e:	ee07 3a90 	vmov	s15, r3
 8013d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8013d3a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013e94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d52:	edc7 7a07 	vstr	s15, [r7, #28]
 8013d56:	e043      	b.n	8013de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	ee07 3a90 	vmov	s15, r3
 8013d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d62:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8013d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013d6a:	4b48      	ldr	r3, [pc, #288]	@ (8013e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d72:	ee07 3a90 	vmov	s15, r3
 8013d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013d7e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013e94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d96:	edc7 7a07 	vstr	s15, [r7, #28]
 8013d9a:	e021      	b.n	8013de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
 8013d9c:	697b      	ldr	r3, [r7, #20]
 8013d9e:	ee07 3a90 	vmov	s15, r3
 8013da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013da6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013e9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013dae:	4b37      	ldr	r3, [pc, #220]	@ (8013e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013db6:	ee07 3a90 	vmov	s15, r3
 8013dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8013dc2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013e94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013dda:	edc7 7a07 	vstr	s15, [r7, #28]
 8013dde:	bf00      	nop
 8013de0:	4b2a      	ldr	r3, [pc, #168]	@ (8013e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013de4:	0a5b      	lsrs	r3, r3, #9
 8013de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013dea:	ee07 3a90 	vmov	s15, r3
 8013dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013df2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013df6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013dfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8013dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013e06:	ee17 2a90 	vmov	r2, s15
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	601a      	str	r2, [r3, #0]
 8013e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8013e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e12:	0c1b      	lsrs	r3, r3, #16
 8013e14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013e18:	ee07 3a90 	vmov	s15, r3
 8013e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013e24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013e28:	edd7 6a07 	vldr	s13, [r7, #28]
 8013e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013e34:	ee17 2a90 	vmov	r2, s15
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	605a      	str	r2, [r3, #4]
 8013e3c:	4b13      	ldr	r3, [pc, #76]	@ (8013e8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e40:	0e1b      	lsrs	r3, r3, #24
 8013e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013e46:	ee07 3a90 	vmov	s15, r3
 8013e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013e52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013e56:	edd7 6a07 	vldr	s13, [r7, #28]
 8013e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013e62:	ee17 2a90 	vmov	r2, s15
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	609a      	str	r2, [r3, #8]
 8013e6a:	e008      	b.n	8013e7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2200      	movs	r2, #0
 8013e70:	601a      	str	r2, [r3, #0]
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	2200      	movs	r2, #0
 8013e76:	605a      	str	r2, [r3, #4]
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	609a      	str	r2, [r3, #8]
 8013e7e:	bf00      	nop
 8013e80:	3724      	adds	r7, #36	@ 0x24
 8013e82:	46bd      	mov	sp, r7
 8013e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e88:	4770      	bx	lr
 8013e8a:	bf00      	nop
 8013e8c:	58024400 	.word	0x58024400
 8013e90:	03d09000 	.word	0x03d09000
 8013e94:	46000000 	.word	0x46000000
 8013e98:	4c742400 	.word	0x4c742400
 8013e9c:	4a742400 	.word	0x4a742400
 8013ea0:	4bb71b00 	.word	0x4bb71b00

08013ea4 <HAL_RCCEx_GetPLL1ClockFreq>:
 8013ea4:	b480      	push	{r7}
 8013ea6:	b089      	sub	sp, #36	@ 0x24
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
 8013eac:	4ba0      	ldr	r3, [pc, #640]	@ (8014130 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013eb0:	f003 0303 	and.w	r3, r3, #3
 8013eb4:	61bb      	str	r3, [r7, #24]
 8013eb6:	4b9e      	ldr	r3, [pc, #632]	@ (8014130 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013eba:	091b      	lsrs	r3, r3, #4
 8013ebc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013ec0:	617b      	str	r3, [r7, #20]
 8013ec2:	4b9b      	ldr	r3, [pc, #620]	@ (8014130 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ec6:	f003 0301 	and.w	r3, r3, #1
 8013eca:	613b      	str	r3, [r7, #16]
 8013ecc:	4b98      	ldr	r3, [pc, #608]	@ (8014130 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ed0:	08db      	lsrs	r3, r3, #3
 8013ed2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013ed6:	693a      	ldr	r2, [r7, #16]
 8013ed8:	fb02 f303 	mul.w	r3, r2, r3
 8013edc:	ee07 3a90 	vmov	s15, r3
 8013ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ee4:	edc7 7a03 	vstr	s15, [r7, #12]
 8013ee8:	697b      	ldr	r3, [r7, #20]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	f000 8111 	beq.w	8014112 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
 8013ef0:	69bb      	ldr	r3, [r7, #24]
 8013ef2:	2b02      	cmp	r3, #2
 8013ef4:	f000 8083 	beq.w	8013ffe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8013ef8:	69bb      	ldr	r3, [r7, #24]
 8013efa:	2b02      	cmp	r3, #2
 8013efc:	f200 80a1 	bhi.w	8014042 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8013f00:	69bb      	ldr	r3, [r7, #24]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d003      	beq.n	8013f0e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8013f06:	69bb      	ldr	r3, [r7, #24]
 8013f08:	2b01      	cmp	r3, #1
 8013f0a:	d056      	beq.n	8013fba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8013f0c:	e099      	b.n	8014042 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8013f0e:	4b88      	ldr	r3, [pc, #544]	@ (8014130 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	f003 0320 	and.w	r3, r3, #32
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d02d      	beq.n	8013f76 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
 8013f1a:	4b85      	ldr	r3, [pc, #532]	@ (8014130 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	08db      	lsrs	r3, r3, #3
 8013f20:	f003 0303 	and.w	r3, r3, #3
 8013f24:	4a83      	ldr	r2, [pc, #524]	@ (8014134 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8013f26:	fa22 f303 	lsr.w	r3, r2, r3
 8013f2a:	60bb      	str	r3, [r7, #8]
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	ee07 3a90 	vmov	s15, r3
 8013f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f36:	697b      	ldr	r3, [r7, #20]
 8013f38:	ee07 3a90 	vmov	s15, r3
 8013f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f44:	4b7a      	ldr	r3, [pc, #488]	@ (8014130 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f4c:	ee07 3a90 	vmov	s15, r3
 8013f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f54:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f58:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8014138 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013f5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f70:	edc7 7a07 	vstr	s15, [r7, #28]
 8013f74:	e087      	b.n	8014086 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 8013f76:	697b      	ldr	r3, [r7, #20]
 8013f78:	ee07 3a90 	vmov	s15, r3
 8013f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f80:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 801413c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8013f84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f88:	4b69      	ldr	r3, [pc, #420]	@ (8014130 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f90:	ee07 3a90 	vmov	s15, r3
 8013f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f98:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f9c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8014138 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013fa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013fa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013fa8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013fac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013fb4:	edc7 7a07 	vstr	s15, [r7, #28]
 8013fb8:	e065      	b.n	8014086 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 8013fba:	697b      	ldr	r3, [r7, #20]
 8013fbc:	ee07 3a90 	vmov	s15, r3
 8013fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fc4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8014140 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8013fc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013fcc:	4b58      	ldr	r3, [pc, #352]	@ (8014130 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fd4:	ee07 3a90 	vmov	s15, r3
 8013fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013fdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8013fe0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8014138 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013fe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013fec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ff8:	edc7 7a07 	vstr	s15, [r7, #28]
 8013ffc:	e043      	b.n	8014086 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 8013ffe:	697b      	ldr	r3, [r7, #20]
 8014000:	ee07 3a90 	vmov	s15, r3
 8014004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014008:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8014144 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801400c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014010:	4b47      	ldr	r3, [pc, #284]	@ (8014130 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014018:	ee07 3a90 	vmov	s15, r3
 801401c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014020:	ed97 6a03 	vldr	s12, [r7, #12]
 8014024:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8014138 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014028:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801402c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014030:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014038:	ee67 7a27 	vmul.f32	s15, s14, s15
 801403c:	edc7 7a07 	vstr	s15, [r7, #28]
 8014040:	e021      	b.n	8014086 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	ee07 3a90 	vmov	s15, r3
 8014048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801404c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801413c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8014050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014054:	4b36      	ldr	r3, [pc, #216]	@ (8014130 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801405c:	ee07 3a90 	vmov	s15, r3
 8014060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014064:	ed97 6a03 	vldr	s12, [r7, #12]
 8014068:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8014138 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801406c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014074:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801407c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014080:	edc7 7a07 	vstr	s15, [r7, #28]
 8014084:	bf00      	nop
 8014086:	4b2a      	ldr	r3, [pc, #168]	@ (8014130 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801408a:	0a5b      	lsrs	r3, r3, #9
 801408c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014090:	ee07 3a90 	vmov	s15, r3
 8014094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014098:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801409c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80140a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80140a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80140a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80140ac:	ee17 2a90 	vmov	r2, s15
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	601a      	str	r2, [r3, #0]
 80140b4:	4b1e      	ldr	r3, [pc, #120]	@ (8014130 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80140b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140b8:	0c1b      	lsrs	r3, r3, #16
 80140ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80140be:	ee07 3a90 	vmov	s15, r3
 80140c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80140ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80140ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80140d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80140d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80140da:	ee17 2a90 	vmov	r2, s15
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	605a      	str	r2, [r3, #4]
 80140e2:	4b13      	ldr	r3, [pc, #76]	@ (8014130 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80140e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140e6:	0e1b      	lsrs	r3, r3, #24
 80140e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80140ec:	ee07 3a90 	vmov	s15, r3
 80140f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80140f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80140fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8014100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014108:	ee17 2a90 	vmov	r2, s15
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	609a      	str	r2, [r3, #8]
 8014110:	e008      	b.n	8014124 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	2200      	movs	r2, #0
 8014116:	601a      	str	r2, [r3, #0]
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	2200      	movs	r2, #0
 801411c:	605a      	str	r2, [r3, #4]
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	2200      	movs	r2, #0
 8014122:	609a      	str	r2, [r3, #8]
 8014124:	bf00      	nop
 8014126:	3724      	adds	r7, #36	@ 0x24
 8014128:	46bd      	mov	sp, r7
 801412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801412e:	4770      	bx	lr
 8014130:	58024400 	.word	0x58024400
 8014134:	03d09000 	.word	0x03d09000
 8014138:	46000000 	.word	0x46000000
 801413c:	4c742400 	.word	0x4c742400
 8014140:	4a742400 	.word	0x4a742400
 8014144:	4bb71b00 	.word	0x4bb71b00

08014148 <RCCEx_PLL2_Config>:
 8014148:	b580      	push	{r7, lr}
 801414a:	b084      	sub	sp, #16
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
 8014150:	6039      	str	r1, [r7, #0]
 8014152:	2300      	movs	r3, #0
 8014154:	73fb      	strb	r3, [r7, #15]
 8014156:	4b53      	ldr	r3, [pc, #332]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 8014158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801415a:	f003 0303 	and.w	r3, r3, #3
 801415e:	2b03      	cmp	r3, #3
 8014160:	d101      	bne.n	8014166 <RCCEx_PLL2_Config+0x1e>
 8014162:	2301      	movs	r3, #1
 8014164:	e099      	b.n	801429a <RCCEx_PLL2_Config+0x152>
 8014166:	4b4f      	ldr	r3, [pc, #316]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	4a4e      	ldr	r2, [pc, #312]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 801416c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8014170:	6013      	str	r3, [r2, #0]
 8014172:	f7f4 ffab 	bl	80090cc <HAL_GetTick>
 8014176:	60b8      	str	r0, [r7, #8]
 8014178:	e008      	b.n	801418c <RCCEx_PLL2_Config+0x44>
 801417a:	f7f4 ffa7 	bl	80090cc <HAL_GetTick>
 801417e:	4602      	mov	r2, r0
 8014180:	68bb      	ldr	r3, [r7, #8]
 8014182:	1ad3      	subs	r3, r2, r3
 8014184:	2b02      	cmp	r3, #2
 8014186:	d901      	bls.n	801418c <RCCEx_PLL2_Config+0x44>
 8014188:	2303      	movs	r3, #3
 801418a:	e086      	b.n	801429a <RCCEx_PLL2_Config+0x152>
 801418c:	4b45      	ldr	r3, [pc, #276]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014194:	2b00      	cmp	r3, #0
 8014196:	d1f0      	bne.n	801417a <RCCEx_PLL2_Config+0x32>
 8014198:	4b42      	ldr	r3, [pc, #264]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 801419a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801419c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	031b      	lsls	r3, r3, #12
 80141a6:	493f      	ldr	r1, [pc, #252]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 80141a8:	4313      	orrs	r3, r2
 80141aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	685b      	ldr	r3, [r3, #4]
 80141b0:	3b01      	subs	r3, #1
 80141b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	689b      	ldr	r3, [r3, #8]
 80141ba:	3b01      	subs	r3, #1
 80141bc:	025b      	lsls	r3, r3, #9
 80141be:	b29b      	uxth	r3, r3
 80141c0:	431a      	orrs	r2, r3
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	68db      	ldr	r3, [r3, #12]
 80141c6:	3b01      	subs	r3, #1
 80141c8:	041b      	lsls	r3, r3, #16
 80141ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80141ce:	431a      	orrs	r2, r3
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	691b      	ldr	r3, [r3, #16]
 80141d4:	3b01      	subs	r3, #1
 80141d6:	061b      	lsls	r3, r3, #24
 80141d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80141dc:	4931      	ldr	r1, [pc, #196]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 80141de:	4313      	orrs	r3, r2
 80141e0:	638b      	str	r3, [r1, #56]	@ 0x38
 80141e2:	4b30      	ldr	r3, [pc, #192]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 80141e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	695b      	ldr	r3, [r3, #20]
 80141ee:	492d      	ldr	r1, [pc, #180]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 80141f0:	4313      	orrs	r3, r2
 80141f2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80141f4:	4b2b      	ldr	r3, [pc, #172]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 80141f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141f8:	f023 0220 	bic.w	r2, r3, #32
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	699b      	ldr	r3, [r3, #24]
 8014200:	4928      	ldr	r1, [pc, #160]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 8014202:	4313      	orrs	r3, r2
 8014204:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8014206:	4b27      	ldr	r3, [pc, #156]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 8014208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801420a:	4a26      	ldr	r2, [pc, #152]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 801420c:	f023 0310 	bic.w	r3, r3, #16
 8014210:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014212:	4b24      	ldr	r3, [pc, #144]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 8014214:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014216:	4b24      	ldr	r3, [pc, #144]	@ (80142a8 <RCCEx_PLL2_Config+0x160>)
 8014218:	4013      	ands	r3, r2
 801421a:	687a      	ldr	r2, [r7, #4]
 801421c:	69d2      	ldr	r2, [r2, #28]
 801421e:	00d2      	lsls	r2, r2, #3
 8014220:	4920      	ldr	r1, [pc, #128]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 8014222:	4313      	orrs	r3, r2
 8014224:	63cb      	str	r3, [r1, #60]	@ 0x3c
 8014226:	4b1f      	ldr	r3, [pc, #124]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 8014228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801422a:	4a1e      	ldr	r2, [pc, #120]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 801422c:	f043 0310 	orr.w	r3, r3, #16
 8014230:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014232:	683b      	ldr	r3, [r7, #0]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d106      	bne.n	8014246 <RCCEx_PLL2_Config+0xfe>
 8014238:	4b1a      	ldr	r3, [pc, #104]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 801423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801423c:	4a19      	ldr	r2, [pc, #100]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 801423e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014242:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014244:	e00f      	b.n	8014266 <RCCEx_PLL2_Config+0x11e>
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	2b01      	cmp	r3, #1
 801424a:	d106      	bne.n	801425a <RCCEx_PLL2_Config+0x112>
 801424c:	4b15      	ldr	r3, [pc, #84]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 801424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014250:	4a14      	ldr	r2, [pc, #80]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 8014252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014256:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014258:	e005      	b.n	8014266 <RCCEx_PLL2_Config+0x11e>
 801425a:	4b12      	ldr	r3, [pc, #72]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 801425c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801425e:	4a11      	ldr	r2, [pc, #68]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 8014260:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8014264:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014266:	4b0f      	ldr	r3, [pc, #60]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	4a0e      	ldr	r2, [pc, #56]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 801426c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8014270:	6013      	str	r3, [r2, #0]
 8014272:	f7f4 ff2b 	bl	80090cc <HAL_GetTick>
 8014276:	60b8      	str	r0, [r7, #8]
 8014278:	e008      	b.n	801428c <RCCEx_PLL2_Config+0x144>
 801427a:	f7f4 ff27 	bl	80090cc <HAL_GetTick>
 801427e:	4602      	mov	r2, r0
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	1ad3      	subs	r3, r2, r3
 8014284:	2b02      	cmp	r3, #2
 8014286:	d901      	bls.n	801428c <RCCEx_PLL2_Config+0x144>
 8014288:	2303      	movs	r3, #3
 801428a:	e006      	b.n	801429a <RCCEx_PLL2_Config+0x152>
 801428c:	4b05      	ldr	r3, [pc, #20]	@ (80142a4 <RCCEx_PLL2_Config+0x15c>)
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014294:	2b00      	cmp	r3, #0
 8014296:	d0f0      	beq.n	801427a <RCCEx_PLL2_Config+0x132>
 8014298:	7bfb      	ldrb	r3, [r7, #15]
 801429a:	4618      	mov	r0, r3
 801429c:	3710      	adds	r7, #16
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}
 80142a2:	bf00      	nop
 80142a4:	58024400 	.word	0x58024400
 80142a8:	ffff0007 	.word	0xffff0007

080142ac <RCCEx_PLL3_Config>:
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b084      	sub	sp, #16
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
 80142b4:	6039      	str	r1, [r7, #0]
 80142b6:	2300      	movs	r3, #0
 80142b8:	73fb      	strb	r3, [r7, #15]
 80142ba:	4b53      	ldr	r3, [pc, #332]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 80142bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142be:	f003 0303 	and.w	r3, r3, #3
 80142c2:	2b03      	cmp	r3, #3
 80142c4:	d101      	bne.n	80142ca <RCCEx_PLL3_Config+0x1e>
 80142c6:	2301      	movs	r3, #1
 80142c8:	e099      	b.n	80143fe <RCCEx_PLL3_Config+0x152>
 80142ca:	4b4f      	ldr	r3, [pc, #316]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	4a4e      	ldr	r2, [pc, #312]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 80142d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80142d4:	6013      	str	r3, [r2, #0]
 80142d6:	f7f4 fef9 	bl	80090cc <HAL_GetTick>
 80142da:	60b8      	str	r0, [r7, #8]
 80142dc:	e008      	b.n	80142f0 <RCCEx_PLL3_Config+0x44>
 80142de:	f7f4 fef5 	bl	80090cc <HAL_GetTick>
 80142e2:	4602      	mov	r2, r0
 80142e4:	68bb      	ldr	r3, [r7, #8]
 80142e6:	1ad3      	subs	r3, r2, r3
 80142e8:	2b02      	cmp	r3, #2
 80142ea:	d901      	bls.n	80142f0 <RCCEx_PLL3_Config+0x44>
 80142ec:	2303      	movs	r3, #3
 80142ee:	e086      	b.n	80143fe <RCCEx_PLL3_Config+0x152>
 80142f0:	4b45      	ldr	r3, [pc, #276]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d1f0      	bne.n	80142de <RCCEx_PLL3_Config+0x32>
 80142fc:	4b42      	ldr	r3, [pc, #264]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 80142fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014300:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	051b      	lsls	r3, r3, #20
 801430a:	493f      	ldr	r1, [pc, #252]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 801430c:	4313      	orrs	r3, r2
 801430e:	628b      	str	r3, [r1, #40]	@ 0x28
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	685b      	ldr	r3, [r3, #4]
 8014314:	3b01      	subs	r3, #1
 8014316:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	689b      	ldr	r3, [r3, #8]
 801431e:	3b01      	subs	r3, #1
 8014320:	025b      	lsls	r3, r3, #9
 8014322:	b29b      	uxth	r3, r3
 8014324:	431a      	orrs	r2, r3
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	68db      	ldr	r3, [r3, #12]
 801432a:	3b01      	subs	r3, #1
 801432c:	041b      	lsls	r3, r3, #16
 801432e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8014332:	431a      	orrs	r2, r3
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	691b      	ldr	r3, [r3, #16]
 8014338:	3b01      	subs	r3, #1
 801433a:	061b      	lsls	r3, r3, #24
 801433c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014340:	4931      	ldr	r1, [pc, #196]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 8014342:	4313      	orrs	r3, r2
 8014344:	640b      	str	r3, [r1, #64]	@ 0x40
 8014346:	4b30      	ldr	r3, [pc, #192]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 8014348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801434a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	695b      	ldr	r3, [r3, #20]
 8014352:	492d      	ldr	r1, [pc, #180]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 8014354:	4313      	orrs	r3, r2
 8014356:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8014358:	4b2b      	ldr	r3, [pc, #172]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 801435a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801435c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	699b      	ldr	r3, [r3, #24]
 8014364:	4928      	ldr	r1, [pc, #160]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 8014366:	4313      	orrs	r3, r2
 8014368:	62cb      	str	r3, [r1, #44]	@ 0x2c
 801436a:	4b27      	ldr	r3, [pc, #156]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 801436c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801436e:	4a26      	ldr	r2, [pc, #152]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 8014370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014374:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014376:	4b24      	ldr	r3, [pc, #144]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 8014378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801437a:	4b24      	ldr	r3, [pc, #144]	@ (801440c <RCCEx_PLL3_Config+0x160>)
 801437c:	4013      	ands	r3, r2
 801437e:	687a      	ldr	r2, [r7, #4]
 8014380:	69d2      	ldr	r2, [r2, #28]
 8014382:	00d2      	lsls	r2, r2, #3
 8014384:	4920      	ldr	r1, [pc, #128]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 8014386:	4313      	orrs	r3, r2
 8014388:	644b      	str	r3, [r1, #68]	@ 0x44
 801438a:	4b1f      	ldr	r3, [pc, #124]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 801438c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801438e:	4a1e      	ldr	r2, [pc, #120]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 8014390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014394:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014396:	683b      	ldr	r3, [r7, #0]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d106      	bne.n	80143aa <RCCEx_PLL3_Config+0xfe>
 801439c:	4b1a      	ldr	r3, [pc, #104]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 801439e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143a0:	4a19      	ldr	r2, [pc, #100]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 80143a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80143a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80143a8:	e00f      	b.n	80143ca <RCCEx_PLL3_Config+0x11e>
 80143aa:	683b      	ldr	r3, [r7, #0]
 80143ac:	2b01      	cmp	r3, #1
 80143ae:	d106      	bne.n	80143be <RCCEx_PLL3_Config+0x112>
 80143b0:	4b15      	ldr	r3, [pc, #84]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 80143b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143b4:	4a14      	ldr	r2, [pc, #80]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 80143b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80143ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80143bc:	e005      	b.n	80143ca <RCCEx_PLL3_Config+0x11e>
 80143be:	4b12      	ldr	r3, [pc, #72]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 80143c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143c2:	4a11      	ldr	r2, [pc, #68]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 80143c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80143c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80143ca:	4b0f      	ldr	r3, [pc, #60]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	4a0e      	ldr	r2, [pc, #56]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 80143d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80143d4:	6013      	str	r3, [r2, #0]
 80143d6:	f7f4 fe79 	bl	80090cc <HAL_GetTick>
 80143da:	60b8      	str	r0, [r7, #8]
 80143dc:	e008      	b.n	80143f0 <RCCEx_PLL3_Config+0x144>
 80143de:	f7f4 fe75 	bl	80090cc <HAL_GetTick>
 80143e2:	4602      	mov	r2, r0
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	1ad3      	subs	r3, r2, r3
 80143e8:	2b02      	cmp	r3, #2
 80143ea:	d901      	bls.n	80143f0 <RCCEx_PLL3_Config+0x144>
 80143ec:	2303      	movs	r3, #3
 80143ee:	e006      	b.n	80143fe <RCCEx_PLL3_Config+0x152>
 80143f0:	4b05      	ldr	r3, [pc, #20]	@ (8014408 <RCCEx_PLL3_Config+0x15c>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d0f0      	beq.n	80143de <RCCEx_PLL3_Config+0x132>
 80143fc:	7bfb      	ldrb	r3, [r7, #15]
 80143fe:	4618      	mov	r0, r3
 8014400:	3710      	adds	r7, #16
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}
 8014406:	bf00      	nop
 8014408:	58024400 	.word	0x58024400
 801440c:	ffff0007 	.word	0xffff0007

08014410 <HAL_SPI_Init>:
 8014410:	b580      	push	{r7, lr}
 8014412:	b084      	sub	sp, #16
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d101      	bne.n	8014422 <HAL_SPI_Init+0x12>
 801441e:	2301      	movs	r3, #1
 8014420:	e10f      	b.n	8014642 <HAL_SPI_Init+0x232>
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	2200      	movs	r2, #0
 8014426:	629a      	str	r2, [r3, #40]	@ 0x28
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	4a87      	ldr	r2, [pc, #540]	@ (801464c <HAL_SPI_Init+0x23c>)
 801442e:	4293      	cmp	r3, r2
 8014430:	d00f      	beq.n	8014452 <HAL_SPI_Init+0x42>
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	4a86      	ldr	r2, [pc, #536]	@ (8014650 <HAL_SPI_Init+0x240>)
 8014438:	4293      	cmp	r3, r2
 801443a:	d00a      	beq.n	8014452 <HAL_SPI_Init+0x42>
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	4a84      	ldr	r2, [pc, #528]	@ (8014654 <HAL_SPI_Init+0x244>)
 8014442:	4293      	cmp	r3, r2
 8014444:	d005      	beq.n	8014452 <HAL_SPI_Init+0x42>
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	68db      	ldr	r3, [r3, #12]
 801444a:	2b0f      	cmp	r3, #15
 801444c:	d901      	bls.n	8014452 <HAL_SPI_Init+0x42>
 801444e:	2301      	movs	r3, #1
 8014450:	e0f7      	b.n	8014642 <HAL_SPI_Init+0x232>
 8014452:	6878      	ldr	r0, [r7, #4]
 8014454:	f001 fd22 	bl	8015e9c <SPI_GetPacketSize>
 8014458:	60f8      	str	r0, [r7, #12]
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	4a7b      	ldr	r2, [pc, #492]	@ (801464c <HAL_SPI_Init+0x23c>)
 8014460:	4293      	cmp	r3, r2
 8014462:	d00c      	beq.n	801447e <HAL_SPI_Init+0x6e>
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	4a79      	ldr	r2, [pc, #484]	@ (8014650 <HAL_SPI_Init+0x240>)
 801446a:	4293      	cmp	r3, r2
 801446c:	d007      	beq.n	801447e <HAL_SPI_Init+0x6e>
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	4a78      	ldr	r2, [pc, #480]	@ (8014654 <HAL_SPI_Init+0x244>)
 8014474:	4293      	cmp	r3, r2
 8014476:	d002      	beq.n	801447e <HAL_SPI_Init+0x6e>
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	2b08      	cmp	r3, #8
 801447c:	d811      	bhi.n	80144a2 <HAL_SPI_Init+0x92>
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	4a72      	ldr	r2, [pc, #456]	@ (801464c <HAL_SPI_Init+0x23c>)
 8014484:	4293      	cmp	r3, r2
 8014486:	d009      	beq.n	801449c <HAL_SPI_Init+0x8c>
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	4a70      	ldr	r2, [pc, #448]	@ (8014650 <HAL_SPI_Init+0x240>)
 801448e:	4293      	cmp	r3, r2
 8014490:	d004      	beq.n	801449c <HAL_SPI_Init+0x8c>
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	4a6f      	ldr	r2, [pc, #444]	@ (8014654 <HAL_SPI_Init+0x244>)
 8014498:	4293      	cmp	r3, r2
 801449a:	d104      	bne.n	80144a6 <HAL_SPI_Init+0x96>
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	2b10      	cmp	r3, #16
 80144a0:	d901      	bls.n	80144a6 <HAL_SPI_Init+0x96>
 80144a2:	2301      	movs	r3, #1
 80144a4:	e0cd      	b.n	8014642 <HAL_SPI_Init+0x232>
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80144ac:	b2db      	uxtb	r3, r3
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d106      	bne.n	80144c0 <HAL_SPI_Init+0xb0>
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	2200      	movs	r2, #0
 80144b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80144ba:	6878      	ldr	r0, [r7, #4]
 80144bc:	f7f3 fb5a 	bl	8007b74 <HAL_SPI_MspInit>
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	2202      	movs	r2, #2
 80144c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	681a      	ldr	r2, [r3, #0]
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	f022 0201 	bic.w	r2, r2, #1
 80144d6:	601a      	str	r2, [r3, #0]
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	689b      	ldr	r3, [r3, #8]
 80144de:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80144e2:	60bb      	str	r3, [r7, #8]
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	699b      	ldr	r3, [r3, #24]
 80144e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80144ec:	d119      	bne.n	8014522 <HAL_SPI_Init+0x112>
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	685b      	ldr	r3, [r3, #4]
 80144f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80144f6:	d103      	bne.n	8014500 <HAL_SPI_Init+0xf0>
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d008      	beq.n	8014512 <HAL_SPI_Init+0x102>
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	685b      	ldr	r3, [r3, #4]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d10c      	bne.n	8014522 <HAL_SPI_Init+0x112>
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801450c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014510:	d107      	bne.n	8014522 <HAL_SPI_Init+0x112>
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	681a      	ldr	r2, [r3, #0]
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8014520:	601a      	str	r2, [r3, #0]
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	685b      	ldr	r3, [r3, #4]
 8014526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801452a:	2b00      	cmp	r3, #0
 801452c:	d00f      	beq.n	801454e <HAL_SPI_Init+0x13e>
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	68db      	ldr	r3, [r3, #12]
 8014532:	2b06      	cmp	r3, #6
 8014534:	d90b      	bls.n	801454e <HAL_SPI_Init+0x13e>
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	430a      	orrs	r2, r1
 801454a:	601a      	str	r2, [r3, #0]
 801454c:	e007      	b.n	801455e <HAL_SPI_Init+0x14e>
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	681a      	ldr	r2, [r3, #0]
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801455c:	601a      	str	r2, [r3, #0]
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	69da      	ldr	r2, [r3, #28]
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014566:	431a      	orrs	r2, r3
 8014568:	68bb      	ldr	r3, [r7, #8]
 801456a:	431a      	orrs	r2, r3
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014570:	ea42 0103 	orr.w	r1, r2, r3
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	68da      	ldr	r2, [r3, #12]
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	430a      	orrs	r2, r1
 801457e:	609a      	str	r2, [r3, #8]
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014588:	431a      	orrs	r2, r3
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801458e:	431a      	orrs	r2, r3
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	699b      	ldr	r3, [r3, #24]
 8014594:	431a      	orrs	r2, r3
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	691b      	ldr	r3, [r3, #16]
 801459a:	431a      	orrs	r2, r3
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	695b      	ldr	r3, [r3, #20]
 80145a0:	431a      	orrs	r2, r3
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	6a1b      	ldr	r3, [r3, #32]
 80145a6:	431a      	orrs	r2, r3
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	685b      	ldr	r3, [r3, #4]
 80145ac:	431a      	orrs	r2, r3
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80145b2:	431a      	orrs	r2, r3
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	689b      	ldr	r3, [r3, #8]
 80145b8:	431a      	orrs	r2, r3
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80145be:	ea42 0103 	orr.w	r1, r2, r3
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	430a      	orrs	r2, r1
 80145cc:	60da      	str	r2, [r3, #12]
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	685b      	ldr	r3, [r3, #4]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d113      	bne.n	80145fe <HAL_SPI_Init+0x1ee>
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	689b      	ldr	r3, [r3, #8]
 80145dc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80145e8:	609a      	str	r2, [r3, #8]
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	689b      	ldr	r3, [r3, #8]
 80145f0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80145fc:	609a      	str	r2, [r3, #8]
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	f022 0201 	bic.w	r2, r2, #1
 801460c:	651a      	str	r2, [r3, #80]	@ 0x50
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	685b      	ldr	r3, [r3, #4]
 8014612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014616:	2b00      	cmp	r3, #0
 8014618:	d00a      	beq.n	8014630 <HAL_SPI_Init+0x220>
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	68db      	ldr	r3, [r3, #12]
 8014620:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	430a      	orrs	r2, r1
 801462e:	60da      	str	r2, [r3, #12]
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	2200      	movs	r2, #0
 8014634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	2201      	movs	r2, #1
 801463c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8014640:	2300      	movs	r3, #0
 8014642:	4618      	mov	r0, r3
 8014644:	3710      	adds	r7, #16
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}
 801464a:	bf00      	nop
 801464c:	40013000 	.word	0x40013000
 8014650:	40003800 	.word	0x40003800
 8014654:	40003c00 	.word	0x40003c00

08014658 <HAL_SPI_Transmit>:
 8014658:	b580      	push	{r7, lr}
 801465a:	b088      	sub	sp, #32
 801465c:	af02      	add	r7, sp, #8
 801465e:	60f8      	str	r0, [r7, #12]
 8014660:	60b9      	str	r1, [r7, #8]
 8014662:	603b      	str	r3, [r7, #0]
 8014664:	4613      	mov	r3, r2
 8014666:	80fb      	strh	r3, [r7, #6]
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	3320      	adds	r3, #32
 801466e:	617b      	str	r3, [r7, #20]
 8014670:	f7f4 fd2c 	bl	80090cc <HAL_GetTick>
 8014674:	6138      	str	r0, [r7, #16]
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801467c:	b2db      	uxtb	r3, r3
 801467e:	2b01      	cmp	r3, #1
 8014680:	d001      	beq.n	8014686 <HAL_SPI_Transmit+0x2e>
 8014682:	2302      	movs	r3, #2
 8014684:	e1d1      	b.n	8014a2a <HAL_SPI_Transmit+0x3d2>
 8014686:	68bb      	ldr	r3, [r7, #8]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d002      	beq.n	8014692 <HAL_SPI_Transmit+0x3a>
 801468c:	88fb      	ldrh	r3, [r7, #6]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d101      	bne.n	8014696 <HAL_SPI_Transmit+0x3e>
 8014692:	2301      	movs	r3, #1
 8014694:	e1c9      	b.n	8014a2a <HAL_SPI_Transmit+0x3d2>
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801469c:	2b01      	cmp	r3, #1
 801469e:	d101      	bne.n	80146a4 <HAL_SPI_Transmit+0x4c>
 80146a0:	2302      	movs	r3, #2
 80146a2:	e1c2      	b.n	8014a2a <HAL_SPI_Transmit+0x3d2>
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	2201      	movs	r2, #1
 80146a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	2203      	movs	r2, #3
 80146b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	2200      	movs	r2, #0
 80146b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	68ba      	ldr	r2, [r7, #8]
 80146c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	88fa      	ldrh	r2, [r7, #6]
 80146c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	88fa      	ldrh	r2, [r7, #6]
 80146ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	2200      	movs	r2, #0
 80146d6:	665a      	str	r2, [r3, #100]	@ 0x64
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	2200      	movs	r2, #0
 80146dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	2200      	movs	r2, #0
 80146e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	2200      	movs	r2, #0
 80146ec:	675a      	str	r2, [r3, #116]	@ 0x74
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	2200      	movs	r2, #0
 80146f2:	671a      	str	r2, [r3, #112]	@ 0x70
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	689b      	ldr	r3, [r3, #8]
 80146f8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80146fc:	d108      	bne.n	8014710 <HAL_SPI_Transmit+0xb8>
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	681a      	ldr	r2, [r3, #0]
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801470c:	601a      	str	r2, [r3, #0]
 801470e:	e009      	b.n	8014724 <HAL_SPI_Transmit+0xcc>
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	68db      	ldr	r3, [r3, #12]
 8014716:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014722:	60da      	str	r2, [r3, #12]
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	685a      	ldr	r2, [r3, #4]
 801472a:	4b96      	ldr	r3, [pc, #600]	@ (8014984 <HAL_SPI_Transmit+0x32c>)
 801472c:	4013      	ands	r3, r2
 801472e:	88f9      	ldrh	r1, [r7, #6]
 8014730:	68fa      	ldr	r2, [r7, #12]
 8014732:	6812      	ldr	r2, [r2, #0]
 8014734:	430b      	orrs	r3, r1
 8014736:	6053      	str	r3, [r2, #4]
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	681a      	ldr	r2, [r3, #0]
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	f042 0201 	orr.w	r2, r2, #1
 8014746:	601a      	str	r2, [r3, #0]
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	685b      	ldr	r3, [r3, #4]
 801474c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014750:	d107      	bne.n	8014762 <HAL_SPI_Transmit+0x10a>
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	681a      	ldr	r2, [r3, #0]
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014760:	601a      	str	r2, [r3, #0]
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	68db      	ldr	r3, [r3, #12]
 8014766:	2b0f      	cmp	r3, #15
 8014768:	d947      	bls.n	80147fa <HAL_SPI_Transmit+0x1a2>
 801476a:	e03f      	b.n	80147ec <HAL_SPI_Transmit+0x194>
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	695b      	ldr	r3, [r3, #20]
 8014772:	f003 0302 	and.w	r3, r3, #2
 8014776:	2b02      	cmp	r3, #2
 8014778:	d114      	bne.n	80147a4 <HAL_SPI_Transmit+0x14c>
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	6812      	ldr	r2, [r2, #0]
 8014784:	621a      	str	r2, [r3, #32]
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801478a:	1d1a      	adds	r2, r3, #4
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014796:	b29b      	uxth	r3, r3
 8014798:	3b01      	subs	r3, #1
 801479a:	b29a      	uxth	r2, r3
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80147a2:	e023      	b.n	80147ec <HAL_SPI_Transmit+0x194>
 80147a4:	f7f4 fc92 	bl	80090cc <HAL_GetTick>
 80147a8:	4602      	mov	r2, r0
 80147aa:	693b      	ldr	r3, [r7, #16]
 80147ac:	1ad3      	subs	r3, r2, r3
 80147ae:	683a      	ldr	r2, [r7, #0]
 80147b0:	429a      	cmp	r2, r3
 80147b2:	d803      	bhi.n	80147bc <HAL_SPI_Transmit+0x164>
 80147b4:	683b      	ldr	r3, [r7, #0]
 80147b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147ba:	d102      	bne.n	80147c2 <HAL_SPI_Transmit+0x16a>
 80147bc:	683b      	ldr	r3, [r7, #0]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d114      	bne.n	80147ec <HAL_SPI_Transmit+0x194>
 80147c2:	68f8      	ldr	r0, [r7, #12]
 80147c4:	f001 fa9c 	bl	8015d00 <SPI_CloseTransfer>
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80147ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	2201      	movs	r2, #1
 80147dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	2200      	movs	r2, #0
 80147e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80147e8:	2303      	movs	r3, #3
 80147ea:	e11e      	b.n	8014a2a <HAL_SPI_Transmit+0x3d2>
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80147f2:	b29b      	uxth	r3, r3
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d1b9      	bne.n	801476c <HAL_SPI_Transmit+0x114>
 80147f8:	e0f1      	b.n	80149de <HAL_SPI_Transmit+0x386>
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	68db      	ldr	r3, [r3, #12]
 80147fe:	2b07      	cmp	r3, #7
 8014800:	f240 80e6 	bls.w	80149d0 <HAL_SPI_Transmit+0x378>
 8014804:	e05d      	b.n	80148c2 <HAL_SPI_Transmit+0x26a>
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	695b      	ldr	r3, [r3, #20]
 801480c:	f003 0302 	and.w	r3, r3, #2
 8014810:	2b02      	cmp	r3, #2
 8014812:	d132      	bne.n	801487a <HAL_SPI_Transmit+0x222>
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801481a:	b29b      	uxth	r3, r3
 801481c:	2b01      	cmp	r3, #1
 801481e:	d918      	bls.n	8014852 <HAL_SPI_Transmit+0x1fa>
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014824:	2b00      	cmp	r3, #0
 8014826:	d014      	beq.n	8014852 <HAL_SPI_Transmit+0x1fa>
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	6812      	ldr	r2, [r2, #0]
 8014832:	621a      	str	r2, [r3, #32]
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014838:	1d1a      	adds	r2, r3, #4
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	65da      	str	r2, [r3, #92]	@ 0x5c
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014844:	b29b      	uxth	r3, r3
 8014846:	3b02      	subs	r3, #2
 8014848:	b29a      	uxth	r2, r3
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014850:	e037      	b.n	80148c2 <HAL_SPI_Transmit+0x26a>
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014856:	881a      	ldrh	r2, [r3, #0]
 8014858:	697b      	ldr	r3, [r7, #20]
 801485a:	801a      	strh	r2, [r3, #0]
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014860:	1c9a      	adds	r2, r3, #2
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801486c:	b29b      	uxth	r3, r3
 801486e:	3b01      	subs	r3, #1
 8014870:	b29a      	uxth	r2, r3
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014878:	e023      	b.n	80148c2 <HAL_SPI_Transmit+0x26a>
 801487a:	f7f4 fc27 	bl	80090cc <HAL_GetTick>
 801487e:	4602      	mov	r2, r0
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	1ad3      	subs	r3, r2, r3
 8014884:	683a      	ldr	r2, [r7, #0]
 8014886:	429a      	cmp	r2, r3
 8014888:	d803      	bhi.n	8014892 <HAL_SPI_Transmit+0x23a>
 801488a:	683b      	ldr	r3, [r7, #0]
 801488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014890:	d102      	bne.n	8014898 <HAL_SPI_Transmit+0x240>
 8014892:	683b      	ldr	r3, [r7, #0]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d114      	bne.n	80148c2 <HAL_SPI_Transmit+0x26a>
 8014898:	68f8      	ldr	r0, [r7, #12]
 801489a:	f001 fa31 	bl	8015d00 <SPI_CloseTransfer>
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80148a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	2201      	movs	r2, #1
 80148b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	2200      	movs	r2, #0
 80148ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80148be:	2303      	movs	r3, #3
 80148c0:	e0b3      	b.n	8014a2a <HAL_SPI_Transmit+0x3d2>
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80148c8:	b29b      	uxth	r3, r3
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d19b      	bne.n	8014806 <HAL_SPI_Transmit+0x1ae>
 80148ce:	e086      	b.n	80149de <HAL_SPI_Transmit+0x386>
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	695b      	ldr	r3, [r3, #20]
 80148d6:	f003 0302 	and.w	r3, r3, #2
 80148da:	2b02      	cmp	r3, #2
 80148dc:	d154      	bne.n	8014988 <HAL_SPI_Transmit+0x330>
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80148e4:	b29b      	uxth	r3, r3
 80148e6:	2b03      	cmp	r3, #3
 80148e8:	d918      	bls.n	801491c <HAL_SPI_Transmit+0x2c4>
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80148ee:	2b40      	cmp	r3, #64	@ 0x40
 80148f0:	d914      	bls.n	801491c <HAL_SPI_Transmit+0x2c4>
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	6812      	ldr	r2, [r2, #0]
 80148fc:	621a      	str	r2, [r3, #32]
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014902:	1d1a      	adds	r2, r3, #4
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801490e:	b29b      	uxth	r3, r3
 8014910:	3b04      	subs	r3, #4
 8014912:	b29a      	uxth	r2, r3
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801491a:	e059      	b.n	80149d0 <HAL_SPI_Transmit+0x378>
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014922:	b29b      	uxth	r3, r3
 8014924:	2b01      	cmp	r3, #1
 8014926:	d917      	bls.n	8014958 <HAL_SPI_Transmit+0x300>
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801492c:	2b00      	cmp	r3, #0
 801492e:	d013      	beq.n	8014958 <HAL_SPI_Transmit+0x300>
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014934:	881a      	ldrh	r2, [r3, #0]
 8014936:	697b      	ldr	r3, [r7, #20]
 8014938:	801a      	strh	r2, [r3, #0]
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801493e:	1c9a      	adds	r2, r3, #2
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801494a:	b29b      	uxth	r3, r3
 801494c:	3b02      	subs	r3, #2
 801494e:	b29a      	uxth	r2, r3
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014956:	e03b      	b.n	80149d0 <HAL_SPI_Transmit+0x378>
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	3320      	adds	r3, #32
 8014962:	7812      	ldrb	r2, [r2, #0]
 8014964:	701a      	strb	r2, [r3, #0]
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801496a:	1c5a      	adds	r2, r3, #1
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014976:	b29b      	uxth	r3, r3
 8014978:	3b01      	subs	r3, #1
 801497a:	b29a      	uxth	r2, r3
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014982:	e025      	b.n	80149d0 <HAL_SPI_Transmit+0x378>
 8014984:	ffff0000 	.word	0xffff0000
 8014988:	f7f4 fba0 	bl	80090cc <HAL_GetTick>
 801498c:	4602      	mov	r2, r0
 801498e:	693b      	ldr	r3, [r7, #16]
 8014990:	1ad3      	subs	r3, r2, r3
 8014992:	683a      	ldr	r2, [r7, #0]
 8014994:	429a      	cmp	r2, r3
 8014996:	d803      	bhi.n	80149a0 <HAL_SPI_Transmit+0x348>
 8014998:	683b      	ldr	r3, [r7, #0]
 801499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801499e:	d102      	bne.n	80149a6 <HAL_SPI_Transmit+0x34e>
 80149a0:	683b      	ldr	r3, [r7, #0]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d114      	bne.n	80149d0 <HAL_SPI_Transmit+0x378>
 80149a6:	68f8      	ldr	r0, [r7, #12]
 80149a8:	f001 f9aa 	bl	8015d00 <SPI_CloseTransfer>
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80149b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	2201      	movs	r2, #1
 80149c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	2200      	movs	r2, #0
 80149c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80149cc:	2303      	movs	r3, #3
 80149ce:	e02c      	b.n	8014a2a <HAL_SPI_Transmit+0x3d2>
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80149d6:	b29b      	uxth	r3, r3
 80149d8:	2b00      	cmp	r3, #0
 80149da:	f47f af79 	bne.w	80148d0 <HAL_SPI_Transmit+0x278>
 80149de:	693b      	ldr	r3, [r7, #16]
 80149e0:	9300      	str	r3, [sp, #0]
 80149e2:	683b      	ldr	r3, [r7, #0]
 80149e4:	2200      	movs	r2, #0
 80149e6:	2108      	movs	r1, #8
 80149e8:	68f8      	ldr	r0, [r7, #12]
 80149ea:	f001 fa29 	bl	8015e40 <SPI_WaitOnFlagUntilTimeout>
 80149ee:	4603      	mov	r3, r0
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d007      	beq.n	8014a04 <HAL_SPI_Transmit+0x3ac>
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80149fa:	f043 0220 	orr.w	r2, r3, #32
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8014a04:	68f8      	ldr	r0, [r7, #12]
 8014a06:	f001 f97b 	bl	8015d00 <SPI_CloseTransfer>
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	2201      	movs	r2, #1
 8014a0e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	2200      	movs	r2, #0
 8014a16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d001      	beq.n	8014a28 <HAL_SPI_Transmit+0x3d0>
 8014a24:	2301      	movs	r3, #1
 8014a26:	e000      	b.n	8014a2a <HAL_SPI_Transmit+0x3d2>
 8014a28:	2300      	movs	r3, #0
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	3718      	adds	r7, #24
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	bd80      	pop	{r7, pc}
 8014a32:	bf00      	nop

08014a34 <HAL_SPI_Receive>:
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b088      	sub	sp, #32
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	60f8      	str	r0, [r7, #12]
 8014a3c:	60b9      	str	r1, [r7, #8]
 8014a3e:	603b      	str	r3, [r7, #0]
 8014a40:	4613      	mov	r3, r2
 8014a42:	80fb      	strh	r3, [r7, #6]
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a48:	095b      	lsrs	r3, r3, #5
 8014a4a:	b29b      	uxth	r3, r3
 8014a4c:	3301      	adds	r3, #1
 8014a4e:	83fb      	strh	r3, [r7, #30]
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	3330      	adds	r3, #48	@ 0x30
 8014a56:	61bb      	str	r3, [r7, #24]
 8014a58:	f7f4 fb38 	bl	80090cc <HAL_GetTick>
 8014a5c:	6178      	str	r0, [r7, #20]
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014a64:	b2db      	uxtb	r3, r3
 8014a66:	2b01      	cmp	r3, #1
 8014a68:	d001      	beq.n	8014a6e <HAL_SPI_Receive+0x3a>
 8014a6a:	2302      	movs	r3, #2
 8014a6c:	e250      	b.n	8014f10 <HAL_SPI_Receive+0x4dc>
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d002      	beq.n	8014a7a <HAL_SPI_Receive+0x46>
 8014a74:	88fb      	ldrh	r3, [r7, #6]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d101      	bne.n	8014a7e <HAL_SPI_Receive+0x4a>
 8014a7a:	2301      	movs	r3, #1
 8014a7c:	e248      	b.n	8014f10 <HAL_SPI_Receive+0x4dc>
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014a84:	2b01      	cmp	r3, #1
 8014a86:	d101      	bne.n	8014a8c <HAL_SPI_Receive+0x58>
 8014a88:	2302      	movs	r3, #2
 8014a8a:	e241      	b.n	8014f10 <HAL_SPI_Receive+0x4dc>
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	2201      	movs	r2, #1
 8014a90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	2204      	movs	r2, #4
 8014a98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	68ba      	ldr	r2, [r7, #8]
 8014aa8:	665a      	str	r2, [r3, #100]	@ 0x64
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	88fa      	ldrh	r2, [r7, #6]
 8014aae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	88fa      	ldrh	r2, [r7, #6]
 8014ab6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	2200      	movs	r2, #0
 8014abe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	2200      	movs	r2, #0
 8014acc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	671a      	str	r2, [r3, #112]	@ 0x70
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	2200      	movs	r2, #0
 8014ada:	675a      	str	r2, [r3, #116]	@ 0x74
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	689b      	ldr	r3, [r3, #8]
 8014ae0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014ae4:	d108      	bne.n	8014af8 <HAL_SPI_Receive+0xc4>
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	681a      	ldr	r2, [r3, #0]
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014af4:	601a      	str	r2, [r3, #0]
 8014af6:	e009      	b.n	8014b0c <HAL_SPI_Receive+0xd8>
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	68db      	ldr	r3, [r3, #12]
 8014afe:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014b0a:	60da      	str	r2, [r3, #12]
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	685a      	ldr	r2, [r3, #4]
 8014b12:	4b95      	ldr	r3, [pc, #596]	@ (8014d68 <HAL_SPI_Receive+0x334>)
 8014b14:	4013      	ands	r3, r2
 8014b16:	88f9      	ldrh	r1, [r7, #6]
 8014b18:	68fa      	ldr	r2, [r7, #12]
 8014b1a:	6812      	ldr	r2, [r2, #0]
 8014b1c:	430b      	orrs	r3, r1
 8014b1e:	6053      	str	r3, [r2, #4]
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	681a      	ldr	r2, [r3, #0]
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	f042 0201 	orr.w	r2, r2, #1
 8014b2e:	601a      	str	r2, [r3, #0]
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	685b      	ldr	r3, [r3, #4]
 8014b34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014b38:	d107      	bne.n	8014b4a <HAL_SPI_Receive+0x116>
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	681a      	ldr	r2, [r3, #0]
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014b48:	601a      	str	r2, [r3, #0]
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	68db      	ldr	r3, [r3, #12]
 8014b4e:	2b0f      	cmp	r3, #15
 8014b50:	d96c      	bls.n	8014c2c <HAL_SPI_Receive+0x1f8>
 8014b52:	e064      	b.n	8014c1e <HAL_SPI_Receive+0x1ea>
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	695b      	ldr	r3, [r3, #20]
 8014b5a:	613b      	str	r3, [r7, #16]
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	695b      	ldr	r3, [r3, #20]
 8014b62:	f003 0301 	and.w	r3, r3, #1
 8014b66:	2b01      	cmp	r3, #1
 8014b68:	d114      	bne.n	8014b94 <HAL_SPI_Receive+0x160>
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	681a      	ldr	r2, [r3, #0]
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b72:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014b74:	601a      	str	r2, [r3, #0]
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014b7a:	1d1a      	adds	r2, r3, #4
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	665a      	str	r2, [r3, #100]	@ 0x64
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b86:	b29b      	uxth	r3, r3
 8014b88:	3b01      	subs	r3, #1
 8014b8a:	b29a      	uxth	r2, r3
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014b92:	e044      	b.n	8014c1e <HAL_SPI_Receive+0x1ea>
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b9a:	b29b      	uxth	r3, r3
 8014b9c:	8bfa      	ldrh	r2, [r7, #30]
 8014b9e:	429a      	cmp	r2, r3
 8014ba0:	d919      	bls.n	8014bd6 <HAL_SPI_Receive+0x1a2>
 8014ba2:	693b      	ldr	r3, [r7, #16]
 8014ba4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d014      	beq.n	8014bd6 <HAL_SPI_Receive+0x1a2>
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	681a      	ldr	r2, [r3, #0]
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014bb4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014bb6:	601a      	str	r2, [r3, #0]
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014bbc:	1d1a      	adds	r2, r3, #4
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	665a      	str	r2, [r3, #100]	@ 0x64
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014bc8:	b29b      	uxth	r3, r3
 8014bca:	3b01      	subs	r3, #1
 8014bcc:	b29a      	uxth	r2, r3
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014bd4:	e023      	b.n	8014c1e <HAL_SPI_Receive+0x1ea>
 8014bd6:	f7f4 fa79 	bl	80090cc <HAL_GetTick>
 8014bda:	4602      	mov	r2, r0
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	1ad3      	subs	r3, r2, r3
 8014be0:	683a      	ldr	r2, [r7, #0]
 8014be2:	429a      	cmp	r2, r3
 8014be4:	d803      	bhi.n	8014bee <HAL_SPI_Receive+0x1ba>
 8014be6:	683b      	ldr	r3, [r7, #0]
 8014be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bec:	d102      	bne.n	8014bf4 <HAL_SPI_Receive+0x1c0>
 8014bee:	683b      	ldr	r3, [r7, #0]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d114      	bne.n	8014c1e <HAL_SPI_Receive+0x1ea>
 8014bf4:	68f8      	ldr	r0, [r7, #12]
 8014bf6:	f001 f883 	bl	8015d00 <SPI_CloseTransfer>
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014c00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	2201      	movs	r2, #1
 8014c0e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	2200      	movs	r2, #0
 8014c16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8014c1a:	2303      	movs	r3, #3
 8014c1c:	e178      	b.n	8014f10 <HAL_SPI_Receive+0x4dc>
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014c24:	b29b      	uxth	r3, r3
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d194      	bne.n	8014b54 <HAL_SPI_Receive+0x120>
 8014c2a:	e15e      	b.n	8014eea <HAL_SPI_Receive+0x4b6>
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	68db      	ldr	r3, [r3, #12]
 8014c30:	2b07      	cmp	r3, #7
 8014c32:	f240 8153 	bls.w	8014edc <HAL_SPI_Receive+0x4a8>
 8014c36:	e08f      	b.n	8014d58 <HAL_SPI_Receive+0x324>
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	695b      	ldr	r3, [r3, #20]
 8014c3e:	613b      	str	r3, [r7, #16]
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	695b      	ldr	r3, [r3, #20]
 8014c46:	f003 0301 	and.w	r3, r3, #1
 8014c4a:	2b01      	cmp	r3, #1
 8014c4c:	d114      	bne.n	8014c78 <HAL_SPI_Receive+0x244>
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c52:	69ba      	ldr	r2, [r7, #24]
 8014c54:	8812      	ldrh	r2, [r2, #0]
 8014c56:	b292      	uxth	r2, r2
 8014c58:	801a      	strh	r2, [r3, #0]
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c5e:	1c9a      	adds	r2, r3, #2
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	665a      	str	r2, [r3, #100]	@ 0x64
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014c6a:	b29b      	uxth	r3, r3
 8014c6c:	3b01      	subs	r3, #1
 8014c6e:	b29a      	uxth	r2, r3
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014c76:	e06f      	b.n	8014d58 <HAL_SPI_Receive+0x324>
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014c7e:	b29b      	uxth	r3, r3
 8014c80:	8bfa      	ldrh	r2, [r7, #30]
 8014c82:	429a      	cmp	r2, r3
 8014c84:	d924      	bls.n	8014cd0 <HAL_SPI_Receive+0x29c>
 8014c86:	693b      	ldr	r3, [r7, #16]
 8014c88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d01f      	beq.n	8014cd0 <HAL_SPI_Receive+0x29c>
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014c94:	69ba      	ldr	r2, [r7, #24]
 8014c96:	8812      	ldrh	r2, [r2, #0]
 8014c98:	b292      	uxth	r2, r2
 8014c9a:	801a      	strh	r2, [r3, #0]
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ca0:	1c9a      	adds	r2, r3, #2
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	665a      	str	r2, [r3, #100]	@ 0x64
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014caa:	69ba      	ldr	r2, [r7, #24]
 8014cac:	8812      	ldrh	r2, [r2, #0]
 8014cae:	b292      	uxth	r2, r2
 8014cb0:	801a      	strh	r2, [r3, #0]
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014cb6:	1c9a      	adds	r2, r3, #2
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	665a      	str	r2, [r3, #100]	@ 0x64
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014cc2:	b29b      	uxth	r3, r3
 8014cc4:	3b02      	subs	r3, #2
 8014cc6:	b29a      	uxth	r2, r3
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014cce:	e043      	b.n	8014d58 <HAL_SPI_Receive+0x324>
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014cd6:	b29b      	uxth	r3, r3
 8014cd8:	2b01      	cmp	r3, #1
 8014cda:	d119      	bne.n	8014d10 <HAL_SPI_Receive+0x2dc>
 8014cdc:	693b      	ldr	r3, [r7, #16]
 8014cde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d014      	beq.n	8014d10 <HAL_SPI_Receive+0x2dc>
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014cea:	69ba      	ldr	r2, [r7, #24]
 8014cec:	8812      	ldrh	r2, [r2, #0]
 8014cee:	b292      	uxth	r2, r2
 8014cf0:	801a      	strh	r2, [r3, #0]
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014cf6:	1c9a      	adds	r2, r3, #2
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	665a      	str	r2, [r3, #100]	@ 0x64
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d02:	b29b      	uxth	r3, r3
 8014d04:	3b01      	subs	r3, #1
 8014d06:	b29a      	uxth	r2, r3
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014d0e:	e023      	b.n	8014d58 <HAL_SPI_Receive+0x324>
 8014d10:	f7f4 f9dc 	bl	80090cc <HAL_GetTick>
 8014d14:	4602      	mov	r2, r0
 8014d16:	697b      	ldr	r3, [r7, #20]
 8014d18:	1ad3      	subs	r3, r2, r3
 8014d1a:	683a      	ldr	r2, [r7, #0]
 8014d1c:	429a      	cmp	r2, r3
 8014d1e:	d803      	bhi.n	8014d28 <HAL_SPI_Receive+0x2f4>
 8014d20:	683b      	ldr	r3, [r7, #0]
 8014d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d26:	d102      	bne.n	8014d2e <HAL_SPI_Receive+0x2fa>
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d114      	bne.n	8014d58 <HAL_SPI_Receive+0x324>
 8014d2e:	68f8      	ldr	r0, [r7, #12]
 8014d30:	f000 ffe6 	bl	8015d00 <SPI_CloseTransfer>
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014d3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	2201      	movs	r2, #1
 8014d48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	2200      	movs	r2, #0
 8014d50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8014d54:	2303      	movs	r3, #3
 8014d56:	e0db      	b.n	8014f10 <HAL_SPI_Receive+0x4dc>
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d5e:	b29b      	uxth	r3, r3
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	f47f af69 	bne.w	8014c38 <HAL_SPI_Receive+0x204>
 8014d66:	e0c0      	b.n	8014eea <HAL_SPI_Receive+0x4b6>
 8014d68:	ffff0000 	.word	0xffff0000
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	695b      	ldr	r3, [r3, #20]
 8014d72:	613b      	str	r3, [r7, #16]
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	695b      	ldr	r3, [r3, #20]
 8014d7a:	f003 0301 	and.w	r3, r3, #1
 8014d7e:	2b01      	cmp	r3, #1
 8014d80:	d117      	bne.n	8014db2 <HAL_SPI_Receive+0x37e>
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d8e:	7812      	ldrb	r2, [r2, #0]
 8014d90:	b2d2      	uxtb	r2, r2
 8014d92:	701a      	strb	r2, [r3, #0]
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d98:	1c5a      	adds	r2, r3, #1
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	665a      	str	r2, [r3, #100]	@ 0x64
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014da4:	b29b      	uxth	r3, r3
 8014da6:	3b01      	subs	r3, #1
 8014da8:	b29a      	uxth	r2, r3
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014db0:	e094      	b.n	8014edc <HAL_SPI_Receive+0x4a8>
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014db8:	b29b      	uxth	r3, r3
 8014dba:	8bfa      	ldrh	r2, [r7, #30]
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	d946      	bls.n	8014e4e <HAL_SPI_Receive+0x41a>
 8014dc0:	693b      	ldr	r3, [r7, #16]
 8014dc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d041      	beq.n	8014e4e <HAL_SPI_Receive+0x41a>
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014dd6:	7812      	ldrb	r2, [r2, #0]
 8014dd8:	b2d2      	uxtb	r2, r2
 8014dda:	701a      	strb	r2, [r3, #0]
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014de0:	1c5a      	adds	r2, r3, #1
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	665a      	str	r2, [r3, #100]	@ 0x64
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014df2:	7812      	ldrb	r2, [r2, #0]
 8014df4:	b2d2      	uxtb	r2, r2
 8014df6:	701a      	strb	r2, [r3, #0]
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014dfc:	1c5a      	adds	r2, r3, #1
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	665a      	str	r2, [r3, #100]	@ 0x64
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e0e:	7812      	ldrb	r2, [r2, #0]
 8014e10:	b2d2      	uxtb	r2, r2
 8014e12:	701a      	strb	r2, [r3, #0]
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e18:	1c5a      	adds	r2, r3, #1
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	665a      	str	r2, [r3, #100]	@ 0x64
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e2a:	7812      	ldrb	r2, [r2, #0]
 8014e2c:	b2d2      	uxtb	r2, r2
 8014e2e:	701a      	strb	r2, [r3, #0]
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e34:	1c5a      	adds	r2, r3, #1
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	665a      	str	r2, [r3, #100]	@ 0x64
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e40:	b29b      	uxth	r3, r3
 8014e42:	3b04      	subs	r3, #4
 8014e44:	b29a      	uxth	r2, r3
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014e4c:	e046      	b.n	8014edc <HAL_SPI_Receive+0x4a8>
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e54:	b29b      	uxth	r3, r3
 8014e56:	2b03      	cmp	r3, #3
 8014e58:	d81c      	bhi.n	8014e94 <HAL_SPI_Receive+0x460>
 8014e5a:	693b      	ldr	r3, [r7, #16]
 8014e5c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d017      	beq.n	8014e94 <HAL_SPI_Receive+0x460>
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e70:	7812      	ldrb	r2, [r2, #0]
 8014e72:	b2d2      	uxtb	r2, r2
 8014e74:	701a      	strb	r2, [r3, #0]
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e7a:	1c5a      	adds	r2, r3, #1
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	665a      	str	r2, [r3, #100]	@ 0x64
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e86:	b29b      	uxth	r3, r3
 8014e88:	3b01      	subs	r3, #1
 8014e8a:	b29a      	uxth	r2, r3
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014e92:	e023      	b.n	8014edc <HAL_SPI_Receive+0x4a8>
 8014e94:	f7f4 f91a 	bl	80090cc <HAL_GetTick>
 8014e98:	4602      	mov	r2, r0
 8014e9a:	697b      	ldr	r3, [r7, #20]
 8014e9c:	1ad3      	subs	r3, r2, r3
 8014e9e:	683a      	ldr	r2, [r7, #0]
 8014ea0:	429a      	cmp	r2, r3
 8014ea2:	d803      	bhi.n	8014eac <HAL_SPI_Receive+0x478>
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014eaa:	d102      	bne.n	8014eb2 <HAL_SPI_Receive+0x47e>
 8014eac:	683b      	ldr	r3, [r7, #0]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d114      	bne.n	8014edc <HAL_SPI_Receive+0x4a8>
 8014eb2:	68f8      	ldr	r0, [r7, #12]
 8014eb4:	f000 ff24 	bl	8015d00 <SPI_CloseTransfer>
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014ebe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	2201      	movs	r2, #1
 8014ecc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8014ed8:	2303      	movs	r3, #3
 8014eda:	e019      	b.n	8014f10 <HAL_SPI_Receive+0x4dc>
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014ee2:	b29b      	uxth	r3, r3
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	f47f af41 	bne.w	8014d6c <HAL_SPI_Receive+0x338>
 8014eea:	68f8      	ldr	r0, [r7, #12]
 8014eec:	f000 ff08 	bl	8015d00 <SPI_CloseTransfer>
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	2201      	movs	r2, #1
 8014ef4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	2200      	movs	r2, #0
 8014efc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d001      	beq.n	8014f0e <HAL_SPI_Receive+0x4da>
 8014f0a:	2301      	movs	r3, #1
 8014f0c:	e000      	b.n	8014f10 <HAL_SPI_Receive+0x4dc>
 8014f0e:	2300      	movs	r3, #0
 8014f10:	4618      	mov	r0, r3
 8014f12:	3720      	adds	r7, #32
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}

08014f18 <HAL_SPI_TransmitReceive>:
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b08e      	sub	sp, #56	@ 0x38
 8014f1c:	af02      	add	r7, sp, #8
 8014f1e:	60f8      	str	r0, [r7, #12]
 8014f20:	60b9      	str	r1, [r7, #8]
 8014f22:	607a      	str	r2, [r7, #4]
 8014f24:	807b      	strh	r3, [r7, #2]
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	3320      	adds	r3, #32
 8014f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	3330      	adds	r3, #48	@ 0x30
 8014f34:	623b      	str	r3, [r7, #32]
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014f3a:	095b      	lsrs	r3, r3, #5
 8014f3c:	b29b      	uxth	r3, r3
 8014f3e:	3301      	adds	r3, #1
 8014f40:	83fb      	strh	r3, [r7, #30]
 8014f42:	f7f4 f8c3 	bl	80090cc <HAL_GetTick>
 8014f46:	61b8      	str	r0, [r7, #24]
 8014f48:	887b      	ldrh	r3, [r7, #2]
 8014f4a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8014f4c:	887b      	ldrh	r3, [r7, #2]
 8014f4e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014f56:	b2db      	uxtb	r3, r3
 8014f58:	2b01      	cmp	r3, #1
 8014f5a:	d001      	beq.n	8014f60 <HAL_SPI_TransmitReceive+0x48>
 8014f5c:	2302      	movs	r3, #2
 8014f5e:	e310      	b.n	8015582 <HAL_SPI_TransmitReceive+0x66a>
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d005      	beq.n	8014f72 <HAL_SPI_TransmitReceive+0x5a>
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d002      	beq.n	8014f72 <HAL_SPI_TransmitReceive+0x5a>
 8014f6c:	887b      	ldrh	r3, [r7, #2]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d101      	bne.n	8014f76 <HAL_SPI_TransmitReceive+0x5e>
 8014f72:	2301      	movs	r3, #1
 8014f74:	e305      	b.n	8015582 <HAL_SPI_TransmitReceive+0x66a>
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014f7c:	2b01      	cmp	r3, #1
 8014f7e:	d101      	bne.n	8014f84 <HAL_SPI_TransmitReceive+0x6c>
 8014f80:	2302      	movs	r3, #2
 8014f82:	e2fe      	b.n	8015582 <HAL_SPI_TransmitReceive+0x66a>
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	2201      	movs	r2, #1
 8014f88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	2205      	movs	r2, #5
 8014f90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	2200      	movs	r2, #0
 8014f98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	687a      	ldr	r2, [r7, #4]
 8014fa0:	665a      	str	r2, [r3, #100]	@ 0x64
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	887a      	ldrh	r2, [r7, #2]
 8014fa6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	887a      	ldrh	r2, [r7, #2]
 8014fae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	68ba      	ldr	r2, [r7, #8]
 8014fb6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	887a      	ldrh	r2, [r7, #2]
 8014fbc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	887a      	ldrh	r2, [r7, #2]
 8014fc4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	2200      	movs	r2, #0
 8014fcc:	671a      	str	r2, [r3, #112]	@ 0x70
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	675a      	str	r2, [r3, #116]	@ 0x74
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	68da      	ldr	r2, [r3, #12]
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8014fe2:	60da      	str	r2, [r3, #12]
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	4a70      	ldr	r2, [pc, #448]	@ (80151ac <HAL_SPI_TransmitReceive+0x294>)
 8014fea:	4293      	cmp	r3, r2
 8014fec:	d009      	beq.n	8015002 <HAL_SPI_TransmitReceive+0xea>
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	4a6f      	ldr	r2, [pc, #444]	@ (80151b0 <HAL_SPI_TransmitReceive+0x298>)
 8014ff4:	4293      	cmp	r3, r2
 8014ff6:	d004      	beq.n	8015002 <HAL_SPI_TransmitReceive+0xea>
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	4a6d      	ldr	r2, [pc, #436]	@ (80151b4 <HAL_SPI_TransmitReceive+0x29c>)
 8014ffe:	4293      	cmp	r3, r2
 8015000:	d102      	bne.n	8015008 <HAL_SPI_TransmitReceive+0xf0>
 8015002:	2310      	movs	r3, #16
 8015004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015006:	e001      	b.n	801500c <HAL_SPI_TransmitReceive+0xf4>
 8015008:	2308      	movs	r3, #8
 801500a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	685a      	ldr	r2, [r3, #4]
 8015012:	4b69      	ldr	r3, [pc, #420]	@ (80151b8 <HAL_SPI_TransmitReceive+0x2a0>)
 8015014:	4013      	ands	r3, r2
 8015016:	8879      	ldrh	r1, [r7, #2]
 8015018:	68fa      	ldr	r2, [r7, #12]
 801501a:	6812      	ldr	r2, [r2, #0]
 801501c:	430b      	orrs	r3, r1
 801501e:	6053      	str	r3, [r2, #4]
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	681a      	ldr	r2, [r3, #0]
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	f042 0201 	orr.w	r2, r2, #1
 801502e:	601a      	str	r2, [r3, #0]
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	685b      	ldr	r3, [r3, #4]
 8015034:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015038:	d107      	bne.n	801504a <HAL_SPI_TransmitReceive+0x132>
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	681a      	ldr	r2, [r3, #0]
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015048:	601a      	str	r2, [r3, #0]
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	68db      	ldr	r3, [r3, #12]
 801504e:	2b0f      	cmp	r3, #15
 8015050:	f240 80a2 	bls.w	8015198 <HAL_SPI_TransmitReceive+0x280>
 8015054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015056:	089b      	lsrs	r3, r3, #2
 8015058:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801505a:	e094      	b.n	8015186 <HAL_SPI_TransmitReceive+0x26e>
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	695b      	ldr	r3, [r3, #20]
 8015062:	f003 0302 	and.w	r3, r3, #2
 8015066:	2b02      	cmp	r3, #2
 8015068:	d120      	bne.n	80150ac <HAL_SPI_TransmitReceive+0x194>
 801506a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801506c:	2b00      	cmp	r3, #0
 801506e:	d01d      	beq.n	80150ac <HAL_SPI_TransmitReceive+0x194>
 8015070:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015072:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015076:	440b      	add	r3, r1
 8015078:	429a      	cmp	r2, r3
 801507a:	d217      	bcs.n	80150ac <HAL_SPI_TransmitReceive+0x194>
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	6812      	ldr	r2, [r2, #0]
 8015086:	621a      	str	r2, [r3, #32]
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801508c:	1d1a      	adds	r2, r3, #4
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	65da      	str	r2, [r3, #92]	@ 0x5c
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015098:	b29b      	uxth	r3, r3
 801509a:	3b01      	subs	r3, #1
 801509c:	b29a      	uxth	r2, r3
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80150aa:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	695b      	ldr	r3, [r3, #20]
 80150b2:	617b      	str	r3, [r7, #20]
 80150b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d065      	beq.n	8015186 <HAL_SPI_TransmitReceive+0x26e>
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	695b      	ldr	r3, [r3, #20]
 80150c0:	f003 0301 	and.w	r3, r3, #1
 80150c4:	2b01      	cmp	r3, #1
 80150c6:	d118      	bne.n	80150fa <HAL_SPI_TransmitReceive+0x1e2>
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	681a      	ldr	r2, [r3, #0]
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80150d2:	601a      	str	r2, [r3, #0]
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150d8:	1d1a      	adds	r2, r3, #4
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	665a      	str	r2, [r3, #100]	@ 0x64
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150e4:	b29b      	uxth	r3, r3
 80150e6:	3b01      	subs	r3, #1
 80150e8:	b29a      	uxth	r2, r3
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150f6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80150f8:	e045      	b.n	8015186 <HAL_SPI_TransmitReceive+0x26e>
 80150fa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80150fc:	8bfb      	ldrh	r3, [r7, #30]
 80150fe:	429a      	cmp	r2, r3
 8015100:	d21d      	bcs.n	801513e <HAL_SPI_TransmitReceive+0x226>
 8015102:	697b      	ldr	r3, [r7, #20]
 8015104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015108:	2b00      	cmp	r3, #0
 801510a:	d018      	beq.n	801513e <HAL_SPI_TransmitReceive+0x226>
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	681a      	ldr	r2, [r3, #0]
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015114:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015116:	601a      	str	r2, [r3, #0]
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801511c:	1d1a      	adds	r2, r3, #4
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	665a      	str	r2, [r3, #100]	@ 0x64
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015128:	b29b      	uxth	r3, r3
 801512a:	3b01      	subs	r3, #1
 801512c:	b29a      	uxth	r2, r3
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801513a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801513c:	e023      	b.n	8015186 <HAL_SPI_TransmitReceive+0x26e>
 801513e:	f7f3 ffc5 	bl	80090cc <HAL_GetTick>
 8015142:	4602      	mov	r2, r0
 8015144:	69bb      	ldr	r3, [r7, #24]
 8015146:	1ad3      	subs	r3, r2, r3
 8015148:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801514a:	429a      	cmp	r2, r3
 801514c:	d803      	bhi.n	8015156 <HAL_SPI_TransmitReceive+0x23e>
 801514e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015154:	d102      	bne.n	801515c <HAL_SPI_TransmitReceive+0x244>
 8015156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015158:	2b00      	cmp	r3, #0
 801515a:	d114      	bne.n	8015186 <HAL_SPI_TransmitReceive+0x26e>
 801515c:	68f8      	ldr	r0, [r7, #12]
 801515e:	f000 fdcf 	bl	8015d00 <SPI_CloseTransfer>
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015168:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	2201      	movs	r2, #1
 8015176:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	2200      	movs	r2, #0
 801517e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8015182:	2303      	movs	r3, #3
 8015184:	e1fd      	b.n	8015582 <HAL_SPI_TransmitReceive+0x66a>
 8015186:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015188:	2b00      	cmp	r3, #0
 801518a:	f47f af67 	bne.w	801505c <HAL_SPI_TransmitReceive+0x144>
 801518e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015190:	2b00      	cmp	r3, #0
 8015192:	f47f af63 	bne.w	801505c <HAL_SPI_TransmitReceive+0x144>
 8015196:	e1ce      	b.n	8015536 <HAL_SPI_TransmitReceive+0x61e>
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	68db      	ldr	r3, [r3, #12]
 801519c:	2b07      	cmp	r3, #7
 801519e:	f240 81c2 	bls.w	8015526 <HAL_SPI_TransmitReceive+0x60e>
 80151a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151a4:	085b      	lsrs	r3, r3, #1
 80151a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80151a8:	e0c9      	b.n	801533e <HAL_SPI_TransmitReceive+0x426>
 80151aa:	bf00      	nop
 80151ac:	40013000 	.word	0x40013000
 80151b0:	40003800 	.word	0x40003800
 80151b4:	40003c00 	.word	0x40003c00
 80151b8:	ffff0000 	.word	0xffff0000
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	695b      	ldr	r3, [r3, #20]
 80151c2:	f003 0302 	and.w	r3, r3, #2
 80151c6:	2b02      	cmp	r3, #2
 80151c8:	d11f      	bne.n	801520a <HAL_SPI_TransmitReceive+0x2f2>
 80151ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d01c      	beq.n	801520a <HAL_SPI_TransmitReceive+0x2f2>
 80151d0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80151d2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80151d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151d6:	440b      	add	r3, r1
 80151d8:	429a      	cmp	r2, r3
 80151da:	d216      	bcs.n	801520a <HAL_SPI_TransmitReceive+0x2f2>
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80151e0:	881a      	ldrh	r2, [r3, #0]
 80151e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151e4:	801a      	strh	r2, [r3, #0]
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80151ea:	1c9a      	adds	r2, r3, #2
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80151f6:	b29b      	uxth	r3, r3
 80151f8:	3b01      	subs	r3, #1
 80151fa:	b29a      	uxth	r2, r3
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015208:	857b      	strh	r3, [r7, #42]	@ 0x2a
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	695b      	ldr	r3, [r3, #20]
 8015210:	617b      	str	r3, [r7, #20]
 8015212:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015214:	2b00      	cmp	r3, #0
 8015216:	f000 8092 	beq.w	801533e <HAL_SPI_TransmitReceive+0x426>
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	695b      	ldr	r3, [r3, #20]
 8015220:	f003 0301 	and.w	r3, r3, #1
 8015224:	2b01      	cmp	r3, #1
 8015226:	d118      	bne.n	801525a <HAL_SPI_TransmitReceive+0x342>
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801522c:	6a3a      	ldr	r2, [r7, #32]
 801522e:	8812      	ldrh	r2, [r2, #0]
 8015230:	b292      	uxth	r2, r2
 8015232:	801a      	strh	r2, [r3, #0]
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015238:	1c9a      	adds	r2, r3, #2
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	665a      	str	r2, [r3, #100]	@ 0x64
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015244:	b29b      	uxth	r3, r3
 8015246:	3b01      	subs	r3, #1
 8015248:	b29a      	uxth	r2, r3
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015256:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015258:	e071      	b.n	801533e <HAL_SPI_TransmitReceive+0x426>
 801525a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801525c:	8bfb      	ldrh	r3, [r7, #30]
 801525e:	429a      	cmp	r2, r3
 8015260:	d228      	bcs.n	80152b4 <HAL_SPI_TransmitReceive+0x39c>
 8015262:	697b      	ldr	r3, [r7, #20]
 8015264:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015268:	2b00      	cmp	r3, #0
 801526a:	d023      	beq.n	80152b4 <HAL_SPI_TransmitReceive+0x39c>
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015270:	6a3a      	ldr	r2, [r7, #32]
 8015272:	8812      	ldrh	r2, [r2, #0]
 8015274:	b292      	uxth	r2, r2
 8015276:	801a      	strh	r2, [r3, #0]
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801527c:	1c9a      	adds	r2, r3, #2
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	665a      	str	r2, [r3, #100]	@ 0x64
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015286:	6a3a      	ldr	r2, [r7, #32]
 8015288:	8812      	ldrh	r2, [r2, #0]
 801528a:	b292      	uxth	r2, r2
 801528c:	801a      	strh	r2, [r3, #0]
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015292:	1c9a      	adds	r2, r3, #2
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	665a      	str	r2, [r3, #100]	@ 0x64
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801529e:	b29b      	uxth	r3, r3
 80152a0:	3b02      	subs	r3, #2
 80152a2:	b29a      	uxth	r2, r3
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152b0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80152b2:	e044      	b.n	801533e <HAL_SPI_TransmitReceive+0x426>
 80152b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80152b6:	2b01      	cmp	r3, #1
 80152b8:	d11d      	bne.n	80152f6 <HAL_SPI_TransmitReceive+0x3de>
 80152ba:	697b      	ldr	r3, [r7, #20]
 80152bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d018      	beq.n	80152f6 <HAL_SPI_TransmitReceive+0x3de>
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152c8:	6a3a      	ldr	r2, [r7, #32]
 80152ca:	8812      	ldrh	r2, [r2, #0]
 80152cc:	b292      	uxth	r2, r2
 80152ce:	801a      	strh	r2, [r3, #0]
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152d4:	1c9a      	adds	r2, r3, #2
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	665a      	str	r2, [r3, #100]	@ 0x64
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152e0:	b29b      	uxth	r3, r3
 80152e2:	3b01      	subs	r3, #1
 80152e4:	b29a      	uxth	r2, r3
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80152f4:	e023      	b.n	801533e <HAL_SPI_TransmitReceive+0x426>
 80152f6:	f7f3 fee9 	bl	80090cc <HAL_GetTick>
 80152fa:	4602      	mov	r2, r0
 80152fc:	69bb      	ldr	r3, [r7, #24]
 80152fe:	1ad3      	subs	r3, r2, r3
 8015300:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015302:	429a      	cmp	r2, r3
 8015304:	d803      	bhi.n	801530e <HAL_SPI_TransmitReceive+0x3f6>
 8015306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015308:	f1b3 3fff 	cmp.w	r3, #4294967295
 801530c:	d102      	bne.n	8015314 <HAL_SPI_TransmitReceive+0x3fc>
 801530e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015310:	2b00      	cmp	r3, #0
 8015312:	d114      	bne.n	801533e <HAL_SPI_TransmitReceive+0x426>
 8015314:	68f8      	ldr	r0, [r7, #12]
 8015316:	f000 fcf3 	bl	8015d00 <SPI_CloseTransfer>
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015320:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	2201      	movs	r2, #1
 801532e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	2200      	movs	r2, #0
 8015336:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801533a:	2303      	movs	r3, #3
 801533c:	e121      	b.n	8015582 <HAL_SPI_TransmitReceive+0x66a>
 801533e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015340:	2b00      	cmp	r3, #0
 8015342:	f47f af3b 	bne.w	80151bc <HAL_SPI_TransmitReceive+0x2a4>
 8015346:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015348:	2b00      	cmp	r3, #0
 801534a:	f47f af37 	bne.w	80151bc <HAL_SPI_TransmitReceive+0x2a4>
 801534e:	e0f2      	b.n	8015536 <HAL_SPI_TransmitReceive+0x61e>
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	695b      	ldr	r3, [r3, #20]
 8015356:	f003 0302 	and.w	r3, r3, #2
 801535a:	2b02      	cmp	r3, #2
 801535c:	d121      	bne.n	80153a2 <HAL_SPI_TransmitReceive+0x48a>
 801535e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015360:	2b00      	cmp	r3, #0
 8015362:	d01e      	beq.n	80153a2 <HAL_SPI_TransmitReceive+0x48a>
 8015364:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015366:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801536a:	440b      	add	r3, r1
 801536c:	429a      	cmp	r2, r3
 801536e:	d218      	bcs.n	80153a2 <HAL_SPI_TransmitReceive+0x48a>
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	3320      	adds	r3, #32
 801537a:	7812      	ldrb	r2, [r2, #0]
 801537c:	701a      	strb	r2, [r3, #0]
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015382:	1c5a      	adds	r2, r3, #1
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	65da      	str	r2, [r3, #92]	@ 0x5c
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801538e:	b29b      	uxth	r3, r3
 8015390:	3b01      	subs	r3, #1
 8015392:	b29a      	uxth	r2, r3
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80153a0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	695b      	ldr	r3, [r3, #20]
 80153a8:	617b      	str	r3, [r7, #20]
 80153aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	f000 80ba 	beq.w	8015526 <HAL_SPI_TransmitReceive+0x60e>
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	695b      	ldr	r3, [r3, #20]
 80153b8:	f003 0301 	and.w	r3, r3, #1
 80153bc:	2b01      	cmp	r3, #1
 80153be:	d11b      	bne.n	80153f8 <HAL_SPI_TransmitReceive+0x4e0>
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80153cc:	7812      	ldrb	r2, [r2, #0]
 80153ce:	b2d2      	uxtb	r2, r2
 80153d0:	701a      	strb	r2, [r3, #0]
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80153d6:	1c5a      	adds	r2, r3, #1
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	665a      	str	r2, [r3, #100]	@ 0x64
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80153e2:	b29b      	uxth	r3, r3
 80153e4:	3b01      	subs	r3, #1
 80153e6:	b29a      	uxth	r2, r3
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80153f4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80153f6:	e096      	b.n	8015526 <HAL_SPI_TransmitReceive+0x60e>
 80153f8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80153fa:	8bfb      	ldrh	r3, [r7, #30]
 80153fc:	429a      	cmp	r2, r3
 80153fe:	d24a      	bcs.n	8015496 <HAL_SPI_TransmitReceive+0x57e>
 8015400:	697b      	ldr	r3, [r7, #20]
 8015402:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015406:	2b00      	cmp	r3, #0
 8015408:	d045      	beq.n	8015496 <HAL_SPI_TransmitReceive+0x57e>
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015416:	7812      	ldrb	r2, [r2, #0]
 8015418:	b2d2      	uxtb	r2, r2
 801541a:	701a      	strb	r2, [r3, #0]
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015420:	1c5a      	adds	r2, r3, #1
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	665a      	str	r2, [r3, #100]	@ 0x64
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015432:	7812      	ldrb	r2, [r2, #0]
 8015434:	b2d2      	uxtb	r2, r2
 8015436:	701a      	strb	r2, [r3, #0]
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801543c:	1c5a      	adds	r2, r3, #1
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	665a      	str	r2, [r3, #100]	@ 0x64
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801544e:	7812      	ldrb	r2, [r2, #0]
 8015450:	b2d2      	uxtb	r2, r2
 8015452:	701a      	strb	r2, [r3, #0]
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015458:	1c5a      	adds	r2, r3, #1
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	665a      	str	r2, [r3, #100]	@ 0x64
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801546a:	7812      	ldrb	r2, [r2, #0]
 801546c:	b2d2      	uxtb	r2, r2
 801546e:	701a      	strb	r2, [r3, #0]
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015474:	1c5a      	adds	r2, r3, #1
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	665a      	str	r2, [r3, #100]	@ 0x64
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015480:	b29b      	uxth	r3, r3
 8015482:	3b04      	subs	r3, #4
 8015484:	b29a      	uxth	r2, r3
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015492:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015494:	e047      	b.n	8015526 <HAL_SPI_TransmitReceive+0x60e>
 8015496:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015498:	2b03      	cmp	r3, #3
 801549a:	d820      	bhi.n	80154de <HAL_SPI_TransmitReceive+0x5c6>
 801549c:	697b      	ldr	r3, [r7, #20]
 801549e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d01b      	beq.n	80154de <HAL_SPI_TransmitReceive+0x5c6>
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154b2:	7812      	ldrb	r2, [r2, #0]
 80154b4:	b2d2      	uxtb	r2, r2
 80154b6:	701a      	strb	r2, [r3, #0]
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154bc:	1c5a      	adds	r2, r3, #1
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	665a      	str	r2, [r3, #100]	@ 0x64
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80154c8:	b29b      	uxth	r3, r3
 80154ca:	3b01      	subs	r3, #1
 80154cc:	b29a      	uxth	r2, r3
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80154da:	853b      	strh	r3, [r7, #40]	@ 0x28
 80154dc:	e023      	b.n	8015526 <HAL_SPI_TransmitReceive+0x60e>
 80154de:	f7f3 fdf5 	bl	80090cc <HAL_GetTick>
 80154e2:	4602      	mov	r2, r0
 80154e4:	69bb      	ldr	r3, [r7, #24]
 80154e6:	1ad3      	subs	r3, r2, r3
 80154e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80154ea:	429a      	cmp	r2, r3
 80154ec:	d803      	bhi.n	80154f6 <HAL_SPI_TransmitReceive+0x5de>
 80154ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154f4:	d102      	bne.n	80154fc <HAL_SPI_TransmitReceive+0x5e4>
 80154f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d114      	bne.n	8015526 <HAL_SPI_TransmitReceive+0x60e>
 80154fc:	68f8      	ldr	r0, [r7, #12]
 80154fe:	f000 fbff 	bl	8015d00 <SPI_CloseTransfer>
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015508:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	2201      	movs	r2, #1
 8015516:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	2200      	movs	r2, #0
 801551e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8015522:	2303      	movs	r3, #3
 8015524:	e02d      	b.n	8015582 <HAL_SPI_TransmitReceive+0x66a>
 8015526:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015528:	2b00      	cmp	r3, #0
 801552a:	f47f af11 	bne.w	8015350 <HAL_SPI_TransmitReceive+0x438>
 801552e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015530:	2b00      	cmp	r3, #0
 8015532:	f47f af0d 	bne.w	8015350 <HAL_SPI_TransmitReceive+0x438>
 8015536:	69bb      	ldr	r3, [r7, #24]
 8015538:	9300      	str	r3, [sp, #0]
 801553a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801553c:	2200      	movs	r2, #0
 801553e:	2108      	movs	r1, #8
 8015540:	68f8      	ldr	r0, [r7, #12]
 8015542:	f000 fc7d 	bl	8015e40 <SPI_WaitOnFlagUntilTimeout>
 8015546:	4603      	mov	r3, r0
 8015548:	2b00      	cmp	r3, #0
 801554a:	d007      	beq.n	801555c <HAL_SPI_TransmitReceive+0x644>
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015552:	f043 0220 	orr.w	r2, r3, #32
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 801555c:	68f8      	ldr	r0, [r7, #12]
 801555e:	f000 fbcf 	bl	8015d00 <SPI_CloseTransfer>
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	2201      	movs	r2, #1
 8015566:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	2200      	movs	r2, #0
 801556e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015578:	2b00      	cmp	r3, #0
 801557a:	d001      	beq.n	8015580 <HAL_SPI_TransmitReceive+0x668>
 801557c:	2301      	movs	r3, #1
 801557e:	e000      	b.n	8015582 <HAL_SPI_TransmitReceive+0x66a>
 8015580:	2300      	movs	r3, #0
 8015582:	4618      	mov	r0, r3
 8015584:	3730      	adds	r7, #48	@ 0x30
 8015586:	46bd      	mov	sp, r7
 8015588:	bd80      	pop	{r7, pc}
 801558a:	bf00      	nop

0801558c <HAL_SPI_Transmit_DMA>:
 801558c:	b580      	push	{r7, lr}
 801558e:	b084      	sub	sp, #16
 8015590:	af00      	add	r7, sp, #0
 8015592:	60f8      	str	r0, [r7, #12]
 8015594:	60b9      	str	r1, [r7, #8]
 8015596:	4613      	mov	r3, r2
 8015598:	80fb      	strh	r3, [r7, #6]
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80155a0:	b2db      	uxtb	r3, r3
 80155a2:	2b01      	cmp	r3, #1
 80155a4:	d001      	beq.n	80155aa <HAL_SPI_Transmit_DMA+0x1e>
 80155a6:	2302      	movs	r3, #2
 80155a8:	e126      	b.n	80157f8 <HAL_SPI_Transmit_DMA+0x26c>
 80155aa:	68bb      	ldr	r3, [r7, #8]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d002      	beq.n	80155b6 <HAL_SPI_Transmit_DMA+0x2a>
 80155b0:	88fb      	ldrh	r3, [r7, #6]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d101      	bne.n	80155ba <HAL_SPI_Transmit_DMA+0x2e>
 80155b6:	2301      	movs	r3, #1
 80155b8:	e11e      	b.n	80157f8 <HAL_SPI_Transmit_DMA+0x26c>
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80155c0:	2b01      	cmp	r3, #1
 80155c2:	d101      	bne.n	80155c8 <HAL_SPI_Transmit_DMA+0x3c>
 80155c4:	2302      	movs	r3, #2
 80155c6:	e117      	b.n	80157f8 <HAL_SPI_Transmit_DMA+0x26c>
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	2201      	movs	r2, #1
 80155cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	2203      	movs	r2, #3
 80155d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	2200      	movs	r2, #0
 80155dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	68ba      	ldr	r2, [r7, #8]
 80155e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	88fa      	ldrh	r2, [r7, #6]
 80155ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	88fa      	ldrh	r2, [r7, #6]
 80155f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	2200      	movs	r2, #0
 80155fa:	665a      	str	r2, [r3, #100]	@ 0x64
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	2200      	movs	r2, #0
 8015600:	675a      	str	r2, [r3, #116]	@ 0x74
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	2200      	movs	r2, #0
 8015606:	671a      	str	r2, [r3, #112]	@ 0x70
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	2200      	movs	r2, #0
 801560c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	2200      	movs	r2, #0
 8015614:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	689b      	ldr	r3, [r3, #8]
 801561c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8015620:	d108      	bne.n	8015634 <HAL_SPI_Transmit_DMA+0xa8>
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	681a      	ldr	r2, [r3, #0]
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015630:	601a      	str	r2, [r3, #0]
 8015632:	e009      	b.n	8015648 <HAL_SPI_Transmit_DMA+0xbc>
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	68db      	ldr	r3, [r3, #12]
 801563a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8015646:	60da      	str	r2, [r3, #12]
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	68db      	ldr	r3, [r3, #12]
 801564c:	2b0f      	cmp	r3, #15
 801564e:	d905      	bls.n	801565c <HAL_SPI_Transmit_DMA+0xd0>
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015654:	699b      	ldr	r3, [r3, #24]
 8015656:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801565a:	d10f      	bne.n	801567c <HAL_SPI_Transmit_DMA+0xf0>
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	68db      	ldr	r3, [r3, #12]
 8015660:	2b07      	cmp	r3, #7
 8015662:	d911      	bls.n	8015688 <HAL_SPI_Transmit_DMA+0xfc>
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015668:	699b      	ldr	r3, [r3, #24]
 801566a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801566e:	d00b      	beq.n	8015688 <HAL_SPI_Transmit_DMA+0xfc>
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015674:	699b      	ldr	r3, [r3, #24]
 8015676:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801567a:	d005      	beq.n	8015688 <HAL_SPI_Transmit_DMA+0xfc>
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	2200      	movs	r2, #0
 8015680:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8015684:	2301      	movs	r3, #1
 8015686:	e0b7      	b.n	80157f8 <HAL_SPI_Transmit_DMA+0x26c>
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	68db      	ldr	r3, [r3, #12]
 801568c:	2b07      	cmp	r3, #7
 801568e:	d820      	bhi.n	80156d2 <HAL_SPI_Transmit_DMA+0x146>
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015694:	699b      	ldr	r3, [r3, #24]
 8015696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801569a:	d109      	bne.n	80156b0 <HAL_SPI_Transmit_DMA+0x124>
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80156a2:	b29b      	uxth	r3, r3
 80156a4:	3301      	adds	r3, #1
 80156a6:	105b      	asrs	r3, r3, #1
 80156a8:	b29a      	uxth	r2, r3
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80156b4:	699b      	ldr	r3, [r3, #24]
 80156b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80156ba:	d11e      	bne.n	80156fa <HAL_SPI_Transmit_DMA+0x16e>
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80156c2:	b29b      	uxth	r3, r3
 80156c4:	3303      	adds	r3, #3
 80156c6:	109b      	asrs	r3, r3, #2
 80156c8:	b29a      	uxth	r2, r3
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80156d0:	e013      	b.n	80156fa <HAL_SPI_Transmit_DMA+0x16e>
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	68db      	ldr	r3, [r3, #12]
 80156d6:	2b0f      	cmp	r3, #15
 80156d8:	d80f      	bhi.n	80156fa <HAL_SPI_Transmit_DMA+0x16e>
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80156de:	699b      	ldr	r3, [r3, #24]
 80156e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80156e4:	d109      	bne.n	80156fa <HAL_SPI_Transmit_DMA+0x16e>
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80156ec:	b29b      	uxth	r3, r3
 80156ee:	3301      	adds	r3, #1
 80156f0:	105b      	asrs	r3, r3, #1
 80156f2:	b29a      	uxth	r2, r3
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80156fe:	4a40      	ldr	r2, [pc, #256]	@ (8015800 <HAL_SPI_Transmit_DMA+0x274>)
 8015700:	641a      	str	r2, [r3, #64]	@ 0x40
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015706:	4a3f      	ldr	r2, [pc, #252]	@ (8015804 <HAL_SPI_Transmit_DMA+0x278>)
 8015708:	63da      	str	r2, [r3, #60]	@ 0x3c
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801570e:	4a3e      	ldr	r2, [pc, #248]	@ (8015808 <HAL_SPI_Transmit_DMA+0x27c>)
 8015710:	64da      	str	r2, [r3, #76]	@ 0x4c
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015716:	2200      	movs	r2, #0
 8015718:	651a      	str	r2, [r3, #80]	@ 0x50
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	689a      	ldr	r2, [r3, #8]
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015728:	609a      	str	r2, [r3, #8]
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015732:	4619      	mov	r1, r3
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	3320      	adds	r3, #32
 801573a:	461a      	mov	r2, r3
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015742:	b29b      	uxth	r3, r3
 8015744:	f7f6 f972 	bl	800ba2c <HAL_DMA_Start_IT>
 8015748:	4603      	mov	r3, r0
 801574a:	2b00      	cmp	r3, #0
 801574c:	d011      	beq.n	8015772 <HAL_SPI_Transmit_DMA+0x1e6>
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015754:	f043 0210 	orr.w	r2, r3, #16
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	2201      	movs	r2, #1
 8015762:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	2200      	movs	r2, #0
 801576a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801576e:	2301      	movs	r3, #1
 8015770:	e042      	b.n	80157f8 <HAL_SPI_Transmit_DMA+0x26c>
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015776:	69db      	ldr	r3, [r3, #28]
 8015778:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801577c:	d108      	bne.n	8015790 <HAL_SPI_Transmit_DMA+0x204>
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	6859      	ldr	r1, [r3, #4]
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	681a      	ldr	r2, [r3, #0]
 8015788:	4b20      	ldr	r3, [pc, #128]	@ (801580c <HAL_SPI_Transmit_DMA+0x280>)
 801578a:	400b      	ands	r3, r1
 801578c:	6053      	str	r3, [r2, #4]
 801578e:	e009      	b.n	80157a4 <HAL_SPI_Transmit_DMA+0x218>
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	685a      	ldr	r2, [r3, #4]
 8015796:	4b1d      	ldr	r3, [pc, #116]	@ (801580c <HAL_SPI_Transmit_DMA+0x280>)
 8015798:	4013      	ands	r3, r2
 801579a:	88f9      	ldrh	r1, [r7, #6]
 801579c:	68fa      	ldr	r2, [r7, #12]
 801579e:	6812      	ldr	r2, [r2, #0]
 80157a0:	430b      	orrs	r3, r1
 80157a2:	6053      	str	r3, [r2, #4]
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	689a      	ldr	r2, [r3, #8]
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80157b2:	609a      	str	r2, [r3, #8]
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	691a      	ldr	r2, [r3, #16]
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 80157c2:	611a      	str	r2, [r3, #16]
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	681a      	ldr	r2, [r3, #0]
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	f042 0201 	orr.w	r2, r2, #1
 80157d2:	601a      	str	r2, [r3, #0]
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	685b      	ldr	r3, [r3, #4]
 80157d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80157dc:	d107      	bne.n	80157ee <HAL_SPI_Transmit_DMA+0x262>
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	681a      	ldr	r2, [r3, #0]
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80157ec:	601a      	str	r2, [r3, #0]
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	2200      	movs	r2, #0
 80157f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80157f6:	2300      	movs	r3, #0
 80157f8:	4618      	mov	r0, r3
 80157fa:	3710      	adds	r7, #16
 80157fc:	46bd      	mov	sp, r7
 80157fe:	bd80      	pop	{r7, pc}
 8015800:	08015c6b 	.word	0x08015c6b
 8015804:	08015c25 	.word	0x08015c25
 8015808:	08015c87 	.word	0x08015c87
 801580c:	ffff0000 	.word	0xffff0000

08015810 <HAL_SPI_IRQHandler>:
 8015810:	b580      	push	{r7, lr}
 8015812:	b08a      	sub	sp, #40	@ 0x28
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	691b      	ldr	r3, [r3, #16]
 801581e:	623b      	str	r3, [r7, #32]
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	695b      	ldr	r3, [r3, #20]
 8015826:	61fb      	str	r3, [r7, #28]
 8015828:	6a3a      	ldr	r2, [r7, #32]
 801582a:	69fb      	ldr	r3, [r7, #28]
 801582c:	4013      	ands	r3, r2
 801582e:	61bb      	str	r3, [r7, #24]
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	689b      	ldr	r3, [r3, #8]
 8015836:	617b      	str	r3, [r7, #20]
 8015838:	2300      	movs	r3, #0
 801583a:	627b      	str	r3, [r7, #36]	@ 0x24
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015842:	74fb      	strb	r3, [r7, #19]
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	3330      	adds	r3, #48	@ 0x30
 801584a:	60fb      	str	r3, [r7, #12]
 801584c:	69fb      	ldr	r3, [r7, #28]
 801584e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015852:	2b00      	cmp	r3, #0
 8015854:	d010      	beq.n	8015878 <HAL_SPI_IRQHandler+0x68>
 8015856:	6a3b      	ldr	r3, [r7, #32]
 8015858:	f003 0308 	and.w	r3, r3, #8
 801585c:	2b00      	cmp	r3, #0
 801585e:	d00b      	beq.n	8015878 <HAL_SPI_IRQHandler+0x68>
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	699a      	ldr	r2, [r3, #24]
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801586e:	619a      	str	r2, [r3, #24]
 8015870:	6878      	ldr	r0, [r7, #4]
 8015872:	f000 f9cd 	bl	8015c10 <HAL_SPI_SuspendCallback>
 8015876:	e192      	b.n	8015b9e <HAL_SPI_IRQHandler+0x38e>
 8015878:	69bb      	ldr	r3, [r7, #24]
 801587a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801587e:	2b00      	cmp	r3, #0
 8015880:	d113      	bne.n	80158aa <HAL_SPI_IRQHandler+0x9a>
 8015882:	69bb      	ldr	r3, [r7, #24]
 8015884:	f003 0320 	and.w	r3, r3, #32
 8015888:	2b00      	cmp	r3, #0
 801588a:	d10e      	bne.n	80158aa <HAL_SPI_IRQHandler+0x9a>
 801588c:	69bb      	ldr	r3, [r7, #24]
 801588e:	f003 0304 	and.w	r3, r3, #4
 8015892:	2b00      	cmp	r3, #0
 8015894:	d009      	beq.n	80158aa <HAL_SPI_IRQHandler+0x9a>
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801589a:	6878      	ldr	r0, [r7, #4]
 801589c:	4798      	blx	r3
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158a2:	6878      	ldr	r0, [r7, #4]
 80158a4:	4798      	blx	r3
 80158a6:	2301      	movs	r3, #1
 80158a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80158aa:	69bb      	ldr	r3, [r7, #24]
 80158ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d10f      	bne.n	80158d4 <HAL_SPI_IRQHandler+0xc4>
 80158b4:	69bb      	ldr	r3, [r7, #24]
 80158b6:	f003 0301 	and.w	r3, r3, #1
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d00a      	beq.n	80158d4 <HAL_SPI_IRQHandler+0xc4>
 80158be:	69bb      	ldr	r3, [r7, #24]
 80158c0:	f003 0304 	and.w	r3, r3, #4
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d105      	bne.n	80158d4 <HAL_SPI_IRQHandler+0xc4>
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	4798      	blx	r3
 80158d0:	2301      	movs	r3, #1
 80158d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80158d4:	69bb      	ldr	r3, [r7, #24]
 80158d6:	f003 0320 	and.w	r3, r3, #32
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d10f      	bne.n	80158fe <HAL_SPI_IRQHandler+0xee>
 80158de:	69bb      	ldr	r3, [r7, #24]
 80158e0:	f003 0302 	and.w	r3, r3, #2
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d00a      	beq.n	80158fe <HAL_SPI_IRQHandler+0xee>
 80158e8:	69bb      	ldr	r3, [r7, #24]
 80158ea:	f003 0304 	and.w	r3, r3, #4
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d105      	bne.n	80158fe <HAL_SPI_IRQHandler+0xee>
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80158f6:	6878      	ldr	r0, [r7, #4]
 80158f8:	4798      	blx	r3
 80158fa:	2301      	movs	r3, #1
 80158fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80158fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015900:	2b00      	cmp	r3, #0
 8015902:	f040 8147 	bne.w	8015b94 <HAL_SPI_IRQHandler+0x384>
 8015906:	69bb      	ldr	r3, [r7, #24]
 8015908:	f003 0308 	and.w	r3, r3, #8
 801590c:	2b00      	cmp	r3, #0
 801590e:	f000 808b 	beq.w	8015a28 <HAL_SPI_IRQHandler+0x218>
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	699a      	ldr	r2, [r3, #24]
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	f042 0208 	orr.w	r2, r2, #8
 8015920:	619a      	str	r2, [r3, #24]
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	699a      	ldr	r2, [r3, #24]
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	f042 0210 	orr.w	r2, r2, #16
 8015930:	619a      	str	r2, [r3, #24]
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	699a      	ldr	r2, [r3, #24]
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015940:	619a      	str	r2, [r3, #24]
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	691a      	ldr	r2, [r3, #16]
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	f022 0208 	bic.w	r2, r2, #8
 8015950:	611a      	str	r2, [r3, #16]
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	689b      	ldr	r3, [r3, #8]
 8015958:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801595c:	2b00      	cmp	r3, #0
 801595e:	d13d      	bne.n	80159dc <HAL_SPI_IRQHandler+0x1cc>
 8015960:	e036      	b.n	80159d0 <HAL_SPI_IRQHandler+0x1c0>
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	68db      	ldr	r3, [r3, #12]
 8015966:	2b0f      	cmp	r3, #15
 8015968:	d90b      	bls.n	8015982 <HAL_SPI_IRQHandler+0x172>
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	681a      	ldr	r2, [r3, #0]
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015972:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015974:	601a      	str	r2, [r3, #0]
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801597a:	1d1a      	adds	r2, r3, #4
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	665a      	str	r2, [r3, #100]	@ 0x64
 8015980:	e01d      	b.n	80159be <HAL_SPI_IRQHandler+0x1ae>
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	68db      	ldr	r3, [r3, #12]
 8015986:	2b07      	cmp	r3, #7
 8015988:	d90b      	bls.n	80159a2 <HAL_SPI_IRQHandler+0x192>
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801598e:	68fa      	ldr	r2, [r7, #12]
 8015990:	8812      	ldrh	r2, [r2, #0]
 8015992:	b292      	uxth	r2, r2
 8015994:	801a      	strh	r2, [r3, #0]
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801599a:	1c9a      	adds	r2, r3, #2
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	665a      	str	r2, [r3, #100]	@ 0x64
 80159a0:	e00d      	b.n	80159be <HAL_SPI_IRQHandler+0x1ae>
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80159ae:	7812      	ldrb	r2, [r2, #0]
 80159b0:	b2d2      	uxtb	r2, r2
 80159b2:	701a      	strb	r2, [r3, #0]
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80159b8:	1c5a      	adds	r2, r3, #1
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	665a      	str	r2, [r3, #100]	@ 0x64
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80159c4:	b29b      	uxth	r3, r3
 80159c6:	3b01      	subs	r3, #1
 80159c8:	b29a      	uxth	r2, r3
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80159d6:	b29b      	uxth	r3, r3
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d1c2      	bne.n	8015962 <HAL_SPI_IRQHandler+0x152>
 80159dc:	6878      	ldr	r0, [r7, #4]
 80159de:	f000 f98f 	bl	8015d00 <SPI_CloseTransfer>
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	2201      	movs	r2, #1
 80159e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d003      	beq.n	80159fc <HAL_SPI_IRQHandler+0x1ec>
 80159f4:	6878      	ldr	r0, [r7, #4]
 80159f6:	f000 f901 	bl	8015bfc <HAL_SPI_ErrorCallback>
 80159fa:	e0d0      	b.n	8015b9e <HAL_SPI_IRQHandler+0x38e>
 80159fc:	7cfb      	ldrb	r3, [r7, #19]
 80159fe:	2b05      	cmp	r3, #5
 8015a00:	d103      	bne.n	8015a0a <HAL_SPI_IRQHandler+0x1fa>
 8015a02:	6878      	ldr	r0, [r7, #4]
 8015a04:	f000 f8e6 	bl	8015bd4 <HAL_SPI_TxRxCpltCallback>
 8015a08:	e0c6      	b.n	8015b98 <HAL_SPI_IRQHandler+0x388>
 8015a0a:	7cfb      	ldrb	r3, [r7, #19]
 8015a0c:	2b04      	cmp	r3, #4
 8015a0e:	d103      	bne.n	8015a18 <HAL_SPI_IRQHandler+0x208>
 8015a10:	6878      	ldr	r0, [r7, #4]
 8015a12:	f000 f8d5 	bl	8015bc0 <HAL_SPI_RxCpltCallback>
 8015a16:	e0bf      	b.n	8015b98 <HAL_SPI_IRQHandler+0x388>
 8015a18:	7cfb      	ldrb	r3, [r7, #19]
 8015a1a:	2b03      	cmp	r3, #3
 8015a1c:	f040 80bc 	bne.w	8015b98 <HAL_SPI_IRQHandler+0x388>
 8015a20:	6878      	ldr	r0, [r7, #4]
 8015a22:	f000 f8c3 	bl	8015bac <HAL_SPI_TxCpltCallback>
 8015a26:	e0b7      	b.n	8015b98 <HAL_SPI_IRQHandler+0x388>
 8015a28:	69bb      	ldr	r3, [r7, #24]
 8015a2a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	f000 80b5 	beq.w	8015b9e <HAL_SPI_IRQHandler+0x38e>
 8015a34:	69bb      	ldr	r3, [r7, #24]
 8015a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d00f      	beq.n	8015a5e <HAL_SPI_IRQHandler+0x24e>
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015a44:	f043 0204 	orr.w	r2, r3, #4
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	699a      	ldr	r2, [r3, #24]
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015a5c:	619a      	str	r2, [r3, #24]
 8015a5e:	69bb      	ldr	r3, [r7, #24]
 8015a60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d00f      	beq.n	8015a88 <HAL_SPI_IRQHandler+0x278>
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015a6e:	f043 0201 	orr.w	r2, r3, #1
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	699a      	ldr	r2, [r3, #24]
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015a86:	619a      	str	r2, [r3, #24]
 8015a88:	69bb      	ldr	r3, [r7, #24]
 8015a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d00f      	beq.n	8015ab2 <HAL_SPI_IRQHandler+0x2a2>
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015a98:	f043 0208 	orr.w	r2, r3, #8
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	699a      	ldr	r2, [r3, #24]
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015ab0:	619a      	str	r2, [r3, #24]
 8015ab2:	69bb      	ldr	r3, [r7, #24]
 8015ab4:	f003 0320 	and.w	r3, r3, #32
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d00f      	beq.n	8015adc <HAL_SPI_IRQHandler+0x2cc>
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ac2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	699a      	ldr	r2, [r3, #24]
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	f042 0220 	orr.w	r2, r2, #32
 8015ada:	619a      	str	r2, [r3, #24]
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d05a      	beq.n	8015b9c <HAL_SPI_IRQHandler+0x38c>
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	681a      	ldr	r2, [r3, #0]
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	f022 0201 	bic.w	r2, r2, #1
 8015af4:	601a      	str	r2, [r3, #0]
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	6919      	ldr	r1, [r3, #16]
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	681a      	ldr	r2, [r3, #0]
 8015b00:	4b28      	ldr	r3, [pc, #160]	@ (8015ba4 <HAL_SPI_IRQHandler+0x394>)
 8015b02:	400b      	ands	r3, r1
 8015b04:	6113      	str	r3, [r2, #16]
 8015b06:	697b      	ldr	r3, [r7, #20]
 8015b08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015b0c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8015b10:	d138      	bne.n	8015b84 <HAL_SPI_IRQHandler+0x374>
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	689a      	ldr	r2, [r3, #8]
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015b20:	609a      	str	r2, [r3, #8]
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d013      	beq.n	8015b52 <HAL_SPI_IRQHandler+0x342>
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015b2e:	4a1e      	ldr	r2, [pc, #120]	@ (8015ba8 <HAL_SPI_IRQHandler+0x398>)
 8015b30:	651a      	str	r2, [r3, #80]	@ 0x50
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7f6 fd00 	bl	800c53c <HAL_DMA_Abort_IT>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d007      	beq.n	8015b52 <HAL_SPI_IRQHandler+0x342>
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015b48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d020      	beq.n	8015b9c <HAL_SPI_IRQHandler+0x38c>
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b5e:	4a12      	ldr	r2, [pc, #72]	@ (8015ba8 <HAL_SPI_IRQHandler+0x398>)
 8015b60:	651a      	str	r2, [r3, #80]	@ 0x50
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b66:	4618      	mov	r0, r3
 8015b68:	f7f6 fce8 	bl	800c53c <HAL_DMA_Abort_IT>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d014      	beq.n	8015b9c <HAL_SPI_IRQHandler+0x38c>
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015b78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015b82:	e00b      	b.n	8015b9c <HAL_SPI_IRQHandler+0x38c>
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	2201      	movs	r2, #1
 8015b88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8015b8c:	6878      	ldr	r0, [r7, #4]
 8015b8e:	f000 f835 	bl	8015bfc <HAL_SPI_ErrorCallback>
 8015b92:	e003      	b.n	8015b9c <HAL_SPI_IRQHandler+0x38c>
 8015b94:	bf00      	nop
 8015b96:	e002      	b.n	8015b9e <HAL_SPI_IRQHandler+0x38e>
 8015b98:	bf00      	nop
 8015b9a:	e000      	b.n	8015b9e <HAL_SPI_IRQHandler+0x38e>
 8015b9c:	bf00      	nop
 8015b9e:	3728      	adds	r7, #40	@ 0x28
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	bd80      	pop	{r7, pc}
 8015ba4:	fffffc94 	.word	0xfffffc94
 8015ba8:	08015ccd 	.word	0x08015ccd

08015bac <HAL_SPI_TxCpltCallback>:
 8015bac:	b480      	push	{r7}
 8015bae:	b083      	sub	sp, #12
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
 8015bb4:	bf00      	nop
 8015bb6:	370c      	adds	r7, #12
 8015bb8:	46bd      	mov	sp, r7
 8015bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bbe:	4770      	bx	lr

08015bc0 <HAL_SPI_RxCpltCallback>:
 8015bc0:	b480      	push	{r7}
 8015bc2:	b083      	sub	sp, #12
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	6078      	str	r0, [r7, #4]
 8015bc8:	bf00      	nop
 8015bca:	370c      	adds	r7, #12
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd2:	4770      	bx	lr

08015bd4 <HAL_SPI_TxRxCpltCallback>:
 8015bd4:	b480      	push	{r7}
 8015bd6:	b083      	sub	sp, #12
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
 8015bdc:	bf00      	nop
 8015bde:	370c      	adds	r7, #12
 8015be0:	46bd      	mov	sp, r7
 8015be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be6:	4770      	bx	lr

08015be8 <HAL_SPI_TxHalfCpltCallback>:
 8015be8:	b480      	push	{r7}
 8015bea:	b083      	sub	sp, #12
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
 8015bf0:	bf00      	nop
 8015bf2:	370c      	adds	r7, #12
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfa:	4770      	bx	lr

08015bfc <HAL_SPI_ErrorCallback>:
 8015bfc:	b480      	push	{r7}
 8015bfe:	b083      	sub	sp, #12
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
 8015c04:	bf00      	nop
 8015c06:	370c      	adds	r7, #12
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c0e:	4770      	bx	lr

08015c10 <HAL_SPI_SuspendCallback>:
 8015c10:	b480      	push	{r7}
 8015c12:	b083      	sub	sp, #12
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
 8015c18:	bf00      	nop
 8015c1a:	370c      	adds	r7, #12
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c22:	4770      	bx	lr

08015c24 <SPI_DMATransmitCplt>:
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b084      	sub	sp, #16
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c30:	60fb      	str	r3, [r7, #12]
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015c38:	b2db      	uxtb	r3, r3
 8015c3a:	2b07      	cmp	r3, #7
 8015c3c:	d011      	beq.n	8015c62 <SPI_DMATransmitCplt+0x3e>
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c42:	69db      	ldr	r3, [r3, #28]
 8015c44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015c48:	d103      	bne.n	8015c52 <SPI_DMATransmitCplt+0x2e>
 8015c4a:	68f8      	ldr	r0, [r7, #12]
 8015c4c:	f7ff ffae 	bl	8015bac <HAL_SPI_TxCpltCallback>
 8015c50:	e007      	b.n	8015c62 <SPI_DMATransmitCplt+0x3e>
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	691a      	ldr	r2, [r3, #16]
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	f042 0208 	orr.w	r2, r2, #8
 8015c60:	611a      	str	r2, [r3, #16]
 8015c62:	bf00      	nop
 8015c64:	3710      	adds	r7, #16
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bd80      	pop	{r7, pc}

08015c6a <SPI_DMAHalfTransmitCplt>:
 8015c6a:	b580      	push	{r7, lr}
 8015c6c:	b084      	sub	sp, #16
 8015c6e:	af00      	add	r7, sp, #0
 8015c70:	6078      	str	r0, [r7, #4]
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c76:	60fb      	str	r3, [r7, #12]
 8015c78:	68f8      	ldr	r0, [r7, #12]
 8015c7a:	f7ff ffb5 	bl	8015be8 <HAL_SPI_TxHalfCpltCallback>
 8015c7e:	bf00      	nop
 8015c80:	3710      	adds	r7, #16
 8015c82:	46bd      	mov	sp, r7
 8015c84:	bd80      	pop	{r7, pc}

08015c86 <SPI_DMAError>:
 8015c86:	b580      	push	{r7, lr}
 8015c88:	b084      	sub	sp, #16
 8015c8a:	af00      	add	r7, sp, #0
 8015c8c:	6078      	str	r0, [r7, #4]
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c92:	60fb      	str	r3, [r7, #12]
 8015c94:	6878      	ldr	r0, [r7, #4]
 8015c96:	f7f7 fdcf 	bl	800d838 <HAL_DMA_GetError>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	2b02      	cmp	r3, #2
 8015c9e:	d011      	beq.n	8015cc4 <SPI_DMAError+0x3e>
 8015ca0:	68f8      	ldr	r0, [r7, #12]
 8015ca2:	f000 f82d 	bl	8015d00 <SPI_CloseTransfer>
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015cac:	f043 0210 	orr.w	r2, r3, #16
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	2201      	movs	r2, #1
 8015cba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8015cbe:	68f8      	ldr	r0, [r7, #12]
 8015cc0:	f7ff ff9c 	bl	8015bfc <HAL_SPI_ErrorCallback>
 8015cc4:	bf00      	nop
 8015cc6:	3710      	adds	r7, #16
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	bd80      	pop	{r7, pc}

08015ccc <SPI_DMAAbortOnError>:
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b084      	sub	sp, #16
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015cd8:	60fb      	str	r3, [r7, #12]
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	2200      	movs	r2, #0
 8015cde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	2201      	movs	r2, #1
 8015cee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8015cf2:	68f8      	ldr	r0, [r7, #12]
 8015cf4:	f7ff ff82 	bl	8015bfc <HAL_SPI_ErrorCallback>
 8015cf8:	bf00      	nop
 8015cfa:	3710      	adds	r7, #16
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}

08015d00 <SPI_CloseTransfer>:
 8015d00:	b480      	push	{r7}
 8015d02:	b085      	sub	sp, #20
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	695b      	ldr	r3, [r3, #20]
 8015d0e:	60fb      	str	r3, [r7, #12]
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	699a      	ldr	r2, [r3, #24]
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	f042 0208 	orr.w	r2, r2, #8
 8015d1e:	619a      	str	r2, [r3, #24]
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	699a      	ldr	r2, [r3, #24]
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	f042 0210 	orr.w	r2, r2, #16
 8015d2e:	619a      	str	r2, [r3, #24]
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	681a      	ldr	r2, [r3, #0]
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	f022 0201 	bic.w	r2, r2, #1
 8015d3e:	601a      	str	r2, [r3, #0]
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	6919      	ldr	r1, [r3, #16]
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	681a      	ldr	r2, [r3, #0]
 8015d4a:	4b3c      	ldr	r3, [pc, #240]	@ (8015e3c <SPI_CloseTransfer+0x13c>)
 8015d4c:	400b      	ands	r3, r1
 8015d4e:	6113      	str	r3, [r2, #16]
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	689a      	ldr	r2, [r3, #8]
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015d5e:	609a      	str	r2, [r3, #8]
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015d66:	b2db      	uxtb	r3, r3
 8015d68:	2b04      	cmp	r3, #4
 8015d6a:	d014      	beq.n	8015d96 <SPI_CloseTransfer+0x96>
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	f003 0320 	and.w	r3, r3, #32
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d00f      	beq.n	8015d96 <SPI_CloseTransfer+0x96>
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015d7c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	699a      	ldr	r2, [r3, #24]
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	f042 0220 	orr.w	r2, r2, #32
 8015d94:	619a      	str	r2, [r3, #24]
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015d9c:	b2db      	uxtb	r3, r3
 8015d9e:	2b03      	cmp	r3, #3
 8015da0:	d014      	beq.n	8015dcc <SPI_CloseTransfer+0xcc>
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d00f      	beq.n	8015dcc <SPI_CloseTransfer+0xcc>
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015db2:	f043 0204 	orr.w	r2, r3, #4
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	699a      	ldr	r2, [r3, #24]
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015dca:	619a      	str	r2, [r3, #24]
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d00f      	beq.n	8015df6 <SPI_CloseTransfer+0xf6>
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ddc:	f043 0201 	orr.w	r2, r3, #1
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	699a      	ldr	r2, [r3, #24]
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015df4:	619a      	str	r2, [r3, #24]
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d00f      	beq.n	8015e20 <SPI_CloseTransfer+0x120>
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e06:	f043 0208 	orr.w	r2, r3, #8
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	699a      	ldr	r2, [r3, #24]
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015e1e:	619a      	str	r2, [r3, #24]
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2200      	movs	r2, #0
 8015e24:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015e30:	bf00      	nop
 8015e32:	3714      	adds	r7, #20
 8015e34:	46bd      	mov	sp, r7
 8015e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3a:	4770      	bx	lr
 8015e3c:	fffffc90 	.word	0xfffffc90

08015e40 <SPI_WaitOnFlagUntilTimeout>:
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b084      	sub	sp, #16
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	60f8      	str	r0, [r7, #12]
 8015e48:	60b9      	str	r1, [r7, #8]
 8015e4a:	603b      	str	r3, [r7, #0]
 8015e4c:	4613      	mov	r3, r2
 8015e4e:	71fb      	strb	r3, [r7, #7]
 8015e50:	e010      	b.n	8015e74 <SPI_WaitOnFlagUntilTimeout+0x34>
 8015e52:	f7f3 f93b 	bl	80090cc <HAL_GetTick>
 8015e56:	4602      	mov	r2, r0
 8015e58:	69bb      	ldr	r3, [r7, #24]
 8015e5a:	1ad3      	subs	r3, r2, r3
 8015e5c:	683a      	ldr	r2, [r7, #0]
 8015e5e:	429a      	cmp	r2, r3
 8015e60:	d803      	bhi.n	8015e6a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8015e62:	683b      	ldr	r3, [r7, #0]
 8015e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e68:	d102      	bne.n	8015e70 <SPI_WaitOnFlagUntilTimeout+0x30>
 8015e6a:	683b      	ldr	r3, [r7, #0]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d101      	bne.n	8015e74 <SPI_WaitOnFlagUntilTimeout+0x34>
 8015e70:	2303      	movs	r3, #3
 8015e72:	e00f      	b.n	8015e94 <SPI_WaitOnFlagUntilTimeout+0x54>
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	695a      	ldr	r2, [r3, #20]
 8015e7a:	68bb      	ldr	r3, [r7, #8]
 8015e7c:	4013      	ands	r3, r2
 8015e7e:	68ba      	ldr	r2, [r7, #8]
 8015e80:	429a      	cmp	r2, r3
 8015e82:	bf0c      	ite	eq
 8015e84:	2301      	moveq	r3, #1
 8015e86:	2300      	movne	r3, #0
 8015e88:	b2db      	uxtb	r3, r3
 8015e8a:	461a      	mov	r2, r3
 8015e8c:	79fb      	ldrb	r3, [r7, #7]
 8015e8e:	429a      	cmp	r2, r3
 8015e90:	d0df      	beq.n	8015e52 <SPI_WaitOnFlagUntilTimeout+0x12>
 8015e92:	2300      	movs	r3, #0
 8015e94:	4618      	mov	r0, r3
 8015e96:	3710      	adds	r7, #16
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	bd80      	pop	{r7, pc}

08015e9c <SPI_GetPacketSize>:
 8015e9c:	b480      	push	{r7}
 8015e9e:	b085      	sub	sp, #20
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015ea8:	095b      	lsrs	r3, r3, #5
 8015eaa:	3301      	adds	r3, #1
 8015eac:	60fb      	str	r3, [r7, #12]
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	68db      	ldr	r3, [r3, #12]
 8015eb2:	3301      	adds	r3, #1
 8015eb4:	60bb      	str	r3, [r7, #8]
 8015eb6:	68bb      	ldr	r3, [r7, #8]
 8015eb8:	3307      	adds	r3, #7
 8015eba:	08db      	lsrs	r3, r3, #3
 8015ebc:	60bb      	str	r3, [r7, #8]
 8015ebe:	68bb      	ldr	r3, [r7, #8]
 8015ec0:	68fa      	ldr	r2, [r7, #12]
 8015ec2:	fb02 f303 	mul.w	r3, r2, r3
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	3714      	adds	r7, #20
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed0:	4770      	bx	lr

08015ed2 <HAL_TIM_Base_Init>:
 8015ed2:	b580      	push	{r7, lr}
 8015ed4:	b082      	sub	sp, #8
 8015ed6:	af00      	add	r7, sp, #0
 8015ed8:	6078      	str	r0, [r7, #4]
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d101      	bne.n	8015ee4 <HAL_TIM_Base_Init+0x12>
 8015ee0:	2301      	movs	r3, #1
 8015ee2:	e049      	b.n	8015f78 <HAL_TIM_Base_Init+0xa6>
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015eea:	b2db      	uxtb	r3, r3
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d106      	bne.n	8015efe <HAL_TIM_Base_Init+0x2c>
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f7f2 fef1 	bl	8008ce0 <HAL_TIM_Base_MspInit>
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	2202      	movs	r2, #2
 8015f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	681a      	ldr	r2, [r3, #0]
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	3304      	adds	r3, #4
 8015f0e:	4619      	mov	r1, r3
 8015f10:	4610      	mov	r0, r2
 8015f12:	f000 fedb 	bl	8016ccc <TIM_Base_SetConfig>
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	2201      	movs	r2, #1
 8015f1a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	2201      	movs	r2, #1
 8015f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	2201      	movs	r2, #1
 8015f2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	2201      	movs	r2, #1
 8015f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	2201      	movs	r2, #1
 8015f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	2201      	movs	r2, #1
 8015f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	2201      	movs	r2, #1
 8015f4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	2201      	movs	r2, #1
 8015f52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	2201      	movs	r2, #1
 8015f5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	2201      	movs	r2, #1
 8015f62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	2201      	movs	r2, #1
 8015f6a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	2201      	movs	r2, #1
 8015f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8015f76:	2300      	movs	r3, #0
 8015f78:	4618      	mov	r0, r3
 8015f7a:	3708      	adds	r7, #8
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bd80      	pop	{r7, pc}

08015f80 <HAL_TIM_Base_Start>:
 8015f80:	b480      	push	{r7}
 8015f82:	b085      	sub	sp, #20
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015f8e:	b2db      	uxtb	r3, r3
 8015f90:	2b01      	cmp	r3, #1
 8015f92:	d001      	beq.n	8015f98 <HAL_TIM_Base_Start+0x18>
 8015f94:	2301      	movs	r3, #1
 8015f96:	e056      	b.n	8016046 <HAL_TIM_Base_Start+0xc6>
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	2202      	movs	r2, #2
 8015f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8016054 <HAL_TIM_Base_Start+0xd4>)
 8015fa6:	4293      	cmp	r3, r2
 8015fa8:	d02c      	beq.n	8016004 <HAL_TIM_Base_Start+0x84>
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015fb2:	d027      	beq.n	8016004 <HAL_TIM_Base_Start+0x84>
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	4a27      	ldr	r2, [pc, #156]	@ (8016058 <HAL_TIM_Base_Start+0xd8>)
 8015fba:	4293      	cmp	r3, r2
 8015fbc:	d022      	beq.n	8016004 <HAL_TIM_Base_Start+0x84>
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	4a26      	ldr	r2, [pc, #152]	@ (801605c <HAL_TIM_Base_Start+0xdc>)
 8015fc4:	4293      	cmp	r3, r2
 8015fc6:	d01d      	beq.n	8016004 <HAL_TIM_Base_Start+0x84>
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	4a24      	ldr	r2, [pc, #144]	@ (8016060 <HAL_TIM_Base_Start+0xe0>)
 8015fce:	4293      	cmp	r3, r2
 8015fd0:	d018      	beq.n	8016004 <HAL_TIM_Base_Start+0x84>
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	4a23      	ldr	r2, [pc, #140]	@ (8016064 <HAL_TIM_Base_Start+0xe4>)
 8015fd8:	4293      	cmp	r3, r2
 8015fda:	d013      	beq.n	8016004 <HAL_TIM_Base_Start+0x84>
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	4a21      	ldr	r2, [pc, #132]	@ (8016068 <HAL_TIM_Base_Start+0xe8>)
 8015fe2:	4293      	cmp	r3, r2
 8015fe4:	d00e      	beq.n	8016004 <HAL_TIM_Base_Start+0x84>
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	4a20      	ldr	r2, [pc, #128]	@ (801606c <HAL_TIM_Base_Start+0xec>)
 8015fec:	4293      	cmp	r3, r2
 8015fee:	d009      	beq.n	8016004 <HAL_TIM_Base_Start+0x84>
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8016070 <HAL_TIM_Base_Start+0xf0>)
 8015ff6:	4293      	cmp	r3, r2
 8015ff8:	d004      	beq.n	8016004 <HAL_TIM_Base_Start+0x84>
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8016074 <HAL_TIM_Base_Start+0xf4>)
 8016000:	4293      	cmp	r3, r2
 8016002:	d115      	bne.n	8016030 <HAL_TIM_Base_Start+0xb0>
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	689a      	ldr	r2, [r3, #8]
 801600a:	4b1b      	ldr	r3, [pc, #108]	@ (8016078 <HAL_TIM_Base_Start+0xf8>)
 801600c:	4013      	ands	r3, r2
 801600e:	60fb      	str	r3, [r7, #12]
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	2b06      	cmp	r3, #6
 8016014:	d015      	beq.n	8016042 <HAL_TIM_Base_Start+0xc2>
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801601c:	d011      	beq.n	8016042 <HAL_TIM_Base_Start+0xc2>
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	681a      	ldr	r2, [r3, #0]
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	f042 0201 	orr.w	r2, r2, #1
 801602c:	601a      	str	r2, [r3, #0]
 801602e:	e008      	b.n	8016042 <HAL_TIM_Base_Start+0xc2>
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	681a      	ldr	r2, [r3, #0]
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	f042 0201 	orr.w	r2, r2, #1
 801603e:	601a      	str	r2, [r3, #0]
 8016040:	e000      	b.n	8016044 <HAL_TIM_Base_Start+0xc4>
 8016042:	bf00      	nop
 8016044:	2300      	movs	r3, #0
 8016046:	4618      	mov	r0, r3
 8016048:	3714      	adds	r7, #20
 801604a:	46bd      	mov	sp, r7
 801604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016050:	4770      	bx	lr
 8016052:	bf00      	nop
 8016054:	40010000 	.word	0x40010000
 8016058:	40000400 	.word	0x40000400
 801605c:	40000800 	.word	0x40000800
 8016060:	40000c00 	.word	0x40000c00
 8016064:	40010400 	.word	0x40010400
 8016068:	40001800 	.word	0x40001800
 801606c:	40014000 	.word	0x40014000
 8016070:	4000e000 	.word	0x4000e000
 8016074:	4000e400 	.word	0x4000e400
 8016078:	00010007 	.word	0x00010007

0801607c <HAL_TIM_Base_Start_IT>:
 801607c:	b480      	push	{r7}
 801607e:	b085      	sub	sp, #20
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801608a:	b2db      	uxtb	r3, r3
 801608c:	2b01      	cmp	r3, #1
 801608e:	d001      	beq.n	8016094 <HAL_TIM_Base_Start_IT+0x18>
 8016090:	2301      	movs	r3, #1
 8016092:	e05e      	b.n	8016152 <HAL_TIM_Base_Start_IT+0xd6>
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	2202      	movs	r2, #2
 8016098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	68da      	ldr	r2, [r3, #12]
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	f042 0201 	orr.w	r2, r2, #1
 80160aa:	60da      	str	r2, [r3, #12]
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	4a2b      	ldr	r2, [pc, #172]	@ (8016160 <HAL_TIM_Base_Start_IT+0xe4>)
 80160b2:	4293      	cmp	r3, r2
 80160b4:	d02c      	beq.n	8016110 <HAL_TIM_Base_Start_IT+0x94>
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80160be:	d027      	beq.n	8016110 <HAL_TIM_Base_Start_IT+0x94>
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	4a27      	ldr	r2, [pc, #156]	@ (8016164 <HAL_TIM_Base_Start_IT+0xe8>)
 80160c6:	4293      	cmp	r3, r2
 80160c8:	d022      	beq.n	8016110 <HAL_TIM_Base_Start_IT+0x94>
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	4a26      	ldr	r2, [pc, #152]	@ (8016168 <HAL_TIM_Base_Start_IT+0xec>)
 80160d0:	4293      	cmp	r3, r2
 80160d2:	d01d      	beq.n	8016110 <HAL_TIM_Base_Start_IT+0x94>
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	4a24      	ldr	r2, [pc, #144]	@ (801616c <HAL_TIM_Base_Start_IT+0xf0>)
 80160da:	4293      	cmp	r3, r2
 80160dc:	d018      	beq.n	8016110 <HAL_TIM_Base_Start_IT+0x94>
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	4a23      	ldr	r2, [pc, #140]	@ (8016170 <HAL_TIM_Base_Start_IT+0xf4>)
 80160e4:	4293      	cmp	r3, r2
 80160e6:	d013      	beq.n	8016110 <HAL_TIM_Base_Start_IT+0x94>
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	4a21      	ldr	r2, [pc, #132]	@ (8016174 <HAL_TIM_Base_Start_IT+0xf8>)
 80160ee:	4293      	cmp	r3, r2
 80160f0:	d00e      	beq.n	8016110 <HAL_TIM_Base_Start_IT+0x94>
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	4a20      	ldr	r2, [pc, #128]	@ (8016178 <HAL_TIM_Base_Start_IT+0xfc>)
 80160f8:	4293      	cmp	r3, r2
 80160fa:	d009      	beq.n	8016110 <HAL_TIM_Base_Start_IT+0x94>
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	4a1e      	ldr	r2, [pc, #120]	@ (801617c <HAL_TIM_Base_Start_IT+0x100>)
 8016102:	4293      	cmp	r3, r2
 8016104:	d004      	beq.n	8016110 <HAL_TIM_Base_Start_IT+0x94>
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	4a1d      	ldr	r2, [pc, #116]	@ (8016180 <HAL_TIM_Base_Start_IT+0x104>)
 801610c:	4293      	cmp	r3, r2
 801610e:	d115      	bne.n	801613c <HAL_TIM_Base_Start_IT+0xc0>
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	689a      	ldr	r2, [r3, #8]
 8016116:	4b1b      	ldr	r3, [pc, #108]	@ (8016184 <HAL_TIM_Base_Start_IT+0x108>)
 8016118:	4013      	ands	r3, r2
 801611a:	60fb      	str	r3, [r7, #12]
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	2b06      	cmp	r3, #6
 8016120:	d015      	beq.n	801614e <HAL_TIM_Base_Start_IT+0xd2>
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016128:	d011      	beq.n	801614e <HAL_TIM_Base_Start_IT+0xd2>
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	681a      	ldr	r2, [r3, #0]
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	f042 0201 	orr.w	r2, r2, #1
 8016138:	601a      	str	r2, [r3, #0]
 801613a:	e008      	b.n	801614e <HAL_TIM_Base_Start_IT+0xd2>
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	681a      	ldr	r2, [r3, #0]
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	f042 0201 	orr.w	r2, r2, #1
 801614a:	601a      	str	r2, [r3, #0]
 801614c:	e000      	b.n	8016150 <HAL_TIM_Base_Start_IT+0xd4>
 801614e:	bf00      	nop
 8016150:	2300      	movs	r3, #0
 8016152:	4618      	mov	r0, r3
 8016154:	3714      	adds	r7, #20
 8016156:	46bd      	mov	sp, r7
 8016158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801615c:	4770      	bx	lr
 801615e:	bf00      	nop
 8016160:	40010000 	.word	0x40010000
 8016164:	40000400 	.word	0x40000400
 8016168:	40000800 	.word	0x40000800
 801616c:	40000c00 	.word	0x40000c00
 8016170:	40010400 	.word	0x40010400
 8016174:	40001800 	.word	0x40001800
 8016178:	40014000 	.word	0x40014000
 801617c:	4000e000 	.word	0x4000e000
 8016180:	4000e400 	.word	0x4000e400
 8016184:	00010007 	.word	0x00010007

08016188 <HAL_TIM_PWM_Init>:
 8016188:	b580      	push	{r7, lr}
 801618a:	b082      	sub	sp, #8
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d101      	bne.n	801619a <HAL_TIM_PWM_Init+0x12>
 8016196:	2301      	movs	r3, #1
 8016198:	e049      	b.n	801622e <HAL_TIM_PWM_Init+0xa6>
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80161a0:	b2db      	uxtb	r3, r3
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d106      	bne.n	80161b4 <HAL_TIM_PWM_Init+0x2c>
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	2200      	movs	r2, #0
 80161aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80161ae:	6878      	ldr	r0, [r7, #4]
 80161b0:	f7f2 fd0c 	bl	8008bcc <HAL_TIM_PWM_MspInit>
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	2202      	movs	r2, #2
 80161b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	681a      	ldr	r2, [r3, #0]
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	3304      	adds	r3, #4
 80161c4:	4619      	mov	r1, r3
 80161c6:	4610      	mov	r0, r2
 80161c8:	f000 fd80 	bl	8016ccc <TIM_Base_SetConfig>
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	2201      	movs	r2, #1
 80161d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	2201      	movs	r2, #1
 80161d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	2201      	movs	r2, #1
 80161e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	2201      	movs	r2, #1
 80161e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	2201      	movs	r2, #1
 80161f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	2201      	movs	r2, #1
 80161f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	2201      	movs	r2, #1
 8016200:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	2201      	movs	r2, #1
 8016208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	2201      	movs	r2, #1
 8016210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2201      	movs	r2, #1
 8016218:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	2201      	movs	r2, #1
 8016220:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	2201      	movs	r2, #1
 8016228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 801622c:	2300      	movs	r3, #0
 801622e:	4618      	mov	r0, r3
 8016230:	3708      	adds	r7, #8
 8016232:	46bd      	mov	sp, r7
 8016234:	bd80      	pop	{r7, pc}
	...

08016238 <HAL_TIM_PWM_Start>:
 8016238:	b580      	push	{r7, lr}
 801623a:	b084      	sub	sp, #16
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
 8016240:	6039      	str	r1, [r7, #0]
 8016242:	683b      	ldr	r3, [r7, #0]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d109      	bne.n	801625c <HAL_TIM_PWM_Start+0x24>
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801624e:	b2db      	uxtb	r3, r3
 8016250:	2b01      	cmp	r3, #1
 8016252:	bf14      	ite	ne
 8016254:	2301      	movne	r3, #1
 8016256:	2300      	moveq	r3, #0
 8016258:	b2db      	uxtb	r3, r3
 801625a:	e03c      	b.n	80162d6 <HAL_TIM_PWM_Start+0x9e>
 801625c:	683b      	ldr	r3, [r7, #0]
 801625e:	2b04      	cmp	r3, #4
 8016260:	d109      	bne.n	8016276 <HAL_TIM_PWM_Start+0x3e>
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8016268:	b2db      	uxtb	r3, r3
 801626a:	2b01      	cmp	r3, #1
 801626c:	bf14      	ite	ne
 801626e:	2301      	movne	r3, #1
 8016270:	2300      	moveq	r3, #0
 8016272:	b2db      	uxtb	r3, r3
 8016274:	e02f      	b.n	80162d6 <HAL_TIM_PWM_Start+0x9e>
 8016276:	683b      	ldr	r3, [r7, #0]
 8016278:	2b08      	cmp	r3, #8
 801627a:	d109      	bne.n	8016290 <HAL_TIM_PWM_Start+0x58>
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8016282:	b2db      	uxtb	r3, r3
 8016284:	2b01      	cmp	r3, #1
 8016286:	bf14      	ite	ne
 8016288:	2301      	movne	r3, #1
 801628a:	2300      	moveq	r3, #0
 801628c:	b2db      	uxtb	r3, r3
 801628e:	e022      	b.n	80162d6 <HAL_TIM_PWM_Start+0x9e>
 8016290:	683b      	ldr	r3, [r7, #0]
 8016292:	2b0c      	cmp	r3, #12
 8016294:	d109      	bne.n	80162aa <HAL_TIM_PWM_Start+0x72>
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801629c:	b2db      	uxtb	r3, r3
 801629e:	2b01      	cmp	r3, #1
 80162a0:	bf14      	ite	ne
 80162a2:	2301      	movne	r3, #1
 80162a4:	2300      	moveq	r3, #0
 80162a6:	b2db      	uxtb	r3, r3
 80162a8:	e015      	b.n	80162d6 <HAL_TIM_PWM_Start+0x9e>
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	2b10      	cmp	r3, #16
 80162ae:	d109      	bne.n	80162c4 <HAL_TIM_PWM_Start+0x8c>
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80162b6:	b2db      	uxtb	r3, r3
 80162b8:	2b01      	cmp	r3, #1
 80162ba:	bf14      	ite	ne
 80162bc:	2301      	movne	r3, #1
 80162be:	2300      	moveq	r3, #0
 80162c0:	b2db      	uxtb	r3, r3
 80162c2:	e008      	b.n	80162d6 <HAL_TIM_PWM_Start+0x9e>
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80162ca:	b2db      	uxtb	r3, r3
 80162cc:	2b01      	cmp	r3, #1
 80162ce:	bf14      	ite	ne
 80162d0:	2301      	movne	r3, #1
 80162d2:	2300      	moveq	r3, #0
 80162d4:	b2db      	uxtb	r3, r3
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d001      	beq.n	80162de <HAL_TIM_PWM_Start+0xa6>
 80162da:	2301      	movs	r3, #1
 80162dc:	e0ab      	b.n	8016436 <HAL_TIM_PWM_Start+0x1fe>
 80162de:	683b      	ldr	r3, [r7, #0]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d104      	bne.n	80162ee <HAL_TIM_PWM_Start+0xb6>
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	2202      	movs	r2, #2
 80162e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80162ec:	e023      	b.n	8016336 <HAL_TIM_PWM_Start+0xfe>
 80162ee:	683b      	ldr	r3, [r7, #0]
 80162f0:	2b04      	cmp	r3, #4
 80162f2:	d104      	bne.n	80162fe <HAL_TIM_PWM_Start+0xc6>
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	2202      	movs	r2, #2
 80162f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80162fc:	e01b      	b.n	8016336 <HAL_TIM_PWM_Start+0xfe>
 80162fe:	683b      	ldr	r3, [r7, #0]
 8016300:	2b08      	cmp	r3, #8
 8016302:	d104      	bne.n	801630e <HAL_TIM_PWM_Start+0xd6>
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	2202      	movs	r2, #2
 8016308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801630c:	e013      	b.n	8016336 <HAL_TIM_PWM_Start+0xfe>
 801630e:	683b      	ldr	r3, [r7, #0]
 8016310:	2b0c      	cmp	r3, #12
 8016312:	d104      	bne.n	801631e <HAL_TIM_PWM_Start+0xe6>
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	2202      	movs	r2, #2
 8016318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801631c:	e00b      	b.n	8016336 <HAL_TIM_PWM_Start+0xfe>
 801631e:	683b      	ldr	r3, [r7, #0]
 8016320:	2b10      	cmp	r3, #16
 8016322:	d104      	bne.n	801632e <HAL_TIM_PWM_Start+0xf6>
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	2202      	movs	r2, #2
 8016328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801632c:	e003      	b.n	8016336 <HAL_TIM_PWM_Start+0xfe>
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	2202      	movs	r2, #2
 8016332:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	2201      	movs	r2, #1
 801633c:	6839      	ldr	r1, [r7, #0]
 801633e:	4618      	mov	r0, r3
 8016340:	f001 fa20 	bl	8017784 <TIM_CCxChannelCmd>
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	4a3d      	ldr	r2, [pc, #244]	@ (8016440 <HAL_TIM_PWM_Start+0x208>)
 801634a:	4293      	cmp	r3, r2
 801634c:	d013      	beq.n	8016376 <HAL_TIM_PWM_Start+0x13e>
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	4a3c      	ldr	r2, [pc, #240]	@ (8016444 <HAL_TIM_PWM_Start+0x20c>)
 8016354:	4293      	cmp	r3, r2
 8016356:	d00e      	beq.n	8016376 <HAL_TIM_PWM_Start+0x13e>
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	4a3a      	ldr	r2, [pc, #232]	@ (8016448 <HAL_TIM_PWM_Start+0x210>)
 801635e:	4293      	cmp	r3, r2
 8016360:	d009      	beq.n	8016376 <HAL_TIM_PWM_Start+0x13e>
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	4a39      	ldr	r2, [pc, #228]	@ (801644c <HAL_TIM_PWM_Start+0x214>)
 8016368:	4293      	cmp	r3, r2
 801636a:	d004      	beq.n	8016376 <HAL_TIM_PWM_Start+0x13e>
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	4a37      	ldr	r2, [pc, #220]	@ (8016450 <HAL_TIM_PWM_Start+0x218>)
 8016372:	4293      	cmp	r3, r2
 8016374:	d101      	bne.n	801637a <HAL_TIM_PWM_Start+0x142>
 8016376:	2301      	movs	r3, #1
 8016378:	e000      	b.n	801637c <HAL_TIM_PWM_Start+0x144>
 801637a:	2300      	movs	r3, #0
 801637c:	2b00      	cmp	r3, #0
 801637e:	d007      	beq.n	8016390 <HAL_TIM_PWM_Start+0x158>
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801638e:	645a      	str	r2, [r3, #68]	@ 0x44
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	4a2a      	ldr	r2, [pc, #168]	@ (8016440 <HAL_TIM_PWM_Start+0x208>)
 8016396:	4293      	cmp	r3, r2
 8016398:	d02c      	beq.n	80163f4 <HAL_TIM_PWM_Start+0x1bc>
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80163a2:	d027      	beq.n	80163f4 <HAL_TIM_PWM_Start+0x1bc>
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	4a2a      	ldr	r2, [pc, #168]	@ (8016454 <HAL_TIM_PWM_Start+0x21c>)
 80163aa:	4293      	cmp	r3, r2
 80163ac:	d022      	beq.n	80163f4 <HAL_TIM_PWM_Start+0x1bc>
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	4a29      	ldr	r2, [pc, #164]	@ (8016458 <HAL_TIM_PWM_Start+0x220>)
 80163b4:	4293      	cmp	r3, r2
 80163b6:	d01d      	beq.n	80163f4 <HAL_TIM_PWM_Start+0x1bc>
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	4a27      	ldr	r2, [pc, #156]	@ (801645c <HAL_TIM_PWM_Start+0x224>)
 80163be:	4293      	cmp	r3, r2
 80163c0:	d018      	beq.n	80163f4 <HAL_TIM_PWM_Start+0x1bc>
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	4a1f      	ldr	r2, [pc, #124]	@ (8016444 <HAL_TIM_PWM_Start+0x20c>)
 80163c8:	4293      	cmp	r3, r2
 80163ca:	d013      	beq.n	80163f4 <HAL_TIM_PWM_Start+0x1bc>
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	4a23      	ldr	r2, [pc, #140]	@ (8016460 <HAL_TIM_PWM_Start+0x228>)
 80163d2:	4293      	cmp	r3, r2
 80163d4:	d00e      	beq.n	80163f4 <HAL_TIM_PWM_Start+0x1bc>
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	4a1b      	ldr	r2, [pc, #108]	@ (8016448 <HAL_TIM_PWM_Start+0x210>)
 80163dc:	4293      	cmp	r3, r2
 80163de:	d009      	beq.n	80163f4 <HAL_TIM_PWM_Start+0x1bc>
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	4a1f      	ldr	r2, [pc, #124]	@ (8016464 <HAL_TIM_PWM_Start+0x22c>)
 80163e6:	4293      	cmp	r3, r2
 80163e8:	d004      	beq.n	80163f4 <HAL_TIM_PWM_Start+0x1bc>
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	4a1e      	ldr	r2, [pc, #120]	@ (8016468 <HAL_TIM_PWM_Start+0x230>)
 80163f0:	4293      	cmp	r3, r2
 80163f2:	d115      	bne.n	8016420 <HAL_TIM_PWM_Start+0x1e8>
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	689a      	ldr	r2, [r3, #8]
 80163fa:	4b1c      	ldr	r3, [pc, #112]	@ (801646c <HAL_TIM_PWM_Start+0x234>)
 80163fc:	4013      	ands	r3, r2
 80163fe:	60fb      	str	r3, [r7, #12]
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	2b06      	cmp	r3, #6
 8016404:	d015      	beq.n	8016432 <HAL_TIM_PWM_Start+0x1fa>
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801640c:	d011      	beq.n	8016432 <HAL_TIM_PWM_Start+0x1fa>
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	681a      	ldr	r2, [r3, #0]
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	f042 0201 	orr.w	r2, r2, #1
 801641c:	601a      	str	r2, [r3, #0]
 801641e:	e008      	b.n	8016432 <HAL_TIM_PWM_Start+0x1fa>
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	681a      	ldr	r2, [r3, #0]
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	f042 0201 	orr.w	r2, r2, #1
 801642e:	601a      	str	r2, [r3, #0]
 8016430:	e000      	b.n	8016434 <HAL_TIM_PWM_Start+0x1fc>
 8016432:	bf00      	nop
 8016434:	2300      	movs	r3, #0
 8016436:	4618      	mov	r0, r3
 8016438:	3710      	adds	r7, #16
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}
 801643e:	bf00      	nop
 8016440:	40010000 	.word	0x40010000
 8016444:	40010400 	.word	0x40010400
 8016448:	40014000 	.word	0x40014000
 801644c:	40014400 	.word	0x40014400
 8016450:	40014800 	.word	0x40014800
 8016454:	40000400 	.word	0x40000400
 8016458:	40000800 	.word	0x40000800
 801645c:	40000c00 	.word	0x40000c00
 8016460:	40001800 	.word	0x40001800
 8016464:	4000e000 	.word	0x4000e000
 8016468:	4000e400 	.word	0x4000e400
 801646c:	00010007 	.word	0x00010007

08016470 <HAL_TIM_IC_Init>:
 8016470:	b580      	push	{r7, lr}
 8016472:	b082      	sub	sp, #8
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d101      	bne.n	8016482 <HAL_TIM_IC_Init+0x12>
 801647e:	2301      	movs	r3, #1
 8016480:	e049      	b.n	8016516 <HAL_TIM_IC_Init+0xa6>
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016488:	b2db      	uxtb	r3, r3
 801648a:	2b00      	cmp	r3, #0
 801648c:	d106      	bne.n	801649c <HAL_TIM_IC_Init+0x2c>
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	2200      	movs	r2, #0
 8016492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8016496:	6878      	ldr	r0, [r7, #4]
 8016498:	f7f2 fbd2 	bl	8008c40 <HAL_TIM_IC_MspInit>
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	2202      	movs	r2, #2
 80164a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	681a      	ldr	r2, [r3, #0]
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	3304      	adds	r3, #4
 80164ac:	4619      	mov	r1, r3
 80164ae:	4610      	mov	r0, r2
 80164b0:	f000 fc0c 	bl	8016ccc <TIM_Base_SetConfig>
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	2201      	movs	r2, #1
 80164b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	2201      	movs	r2, #1
 80164c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	2201      	movs	r2, #1
 80164c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	2201      	movs	r2, #1
 80164d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2201      	movs	r2, #1
 80164d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	2201      	movs	r2, #1
 80164e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	2201      	movs	r2, #1
 80164e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	2201      	movs	r2, #1
 80164f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	2201      	movs	r2, #1
 80164f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	2201      	movs	r2, #1
 8016500:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	2201      	movs	r2, #1
 8016508:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	2201      	movs	r2, #1
 8016510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8016514:	2300      	movs	r3, #0
 8016516:	4618      	mov	r0, r3
 8016518:	3708      	adds	r7, #8
 801651a:	46bd      	mov	sp, r7
 801651c:	bd80      	pop	{r7, pc}

0801651e <HAL_TIM_IRQHandler>:
 801651e:	b580      	push	{r7, lr}
 8016520:	b084      	sub	sp, #16
 8016522:	af00      	add	r7, sp, #0
 8016524:	6078      	str	r0, [r7, #4]
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	68db      	ldr	r3, [r3, #12]
 801652c:	60fb      	str	r3, [r7, #12]
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	691b      	ldr	r3, [r3, #16]
 8016534:	60bb      	str	r3, [r7, #8]
 8016536:	68bb      	ldr	r3, [r7, #8]
 8016538:	f003 0302 	and.w	r3, r3, #2
 801653c:	2b00      	cmp	r3, #0
 801653e:	d020      	beq.n	8016582 <HAL_TIM_IRQHandler+0x64>
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	f003 0302 	and.w	r3, r3, #2
 8016546:	2b00      	cmp	r3, #0
 8016548:	d01b      	beq.n	8016582 <HAL_TIM_IRQHandler+0x64>
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	f06f 0202 	mvn.w	r2, #2
 8016552:	611a      	str	r2, [r3, #16]
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	2201      	movs	r2, #1
 8016558:	771a      	strb	r2, [r3, #28]
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	699b      	ldr	r3, [r3, #24]
 8016560:	f003 0303 	and.w	r3, r3, #3
 8016564:	2b00      	cmp	r3, #0
 8016566:	d003      	beq.n	8016570 <HAL_TIM_IRQHandler+0x52>
 8016568:	6878      	ldr	r0, [r7, #4]
 801656a:	f000 fb91 	bl	8016c90 <HAL_TIM_IC_CaptureCallback>
 801656e:	e005      	b.n	801657c <HAL_TIM_IRQHandler+0x5e>
 8016570:	6878      	ldr	r0, [r7, #4]
 8016572:	f000 fb83 	bl	8016c7c <HAL_TIM_OC_DelayElapsedCallback>
 8016576:	6878      	ldr	r0, [r7, #4]
 8016578:	f000 fb94 	bl	8016ca4 <HAL_TIM_PWM_PulseFinishedCallback>
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	2200      	movs	r2, #0
 8016580:	771a      	strb	r2, [r3, #28]
 8016582:	68bb      	ldr	r3, [r7, #8]
 8016584:	f003 0304 	and.w	r3, r3, #4
 8016588:	2b00      	cmp	r3, #0
 801658a:	d020      	beq.n	80165ce <HAL_TIM_IRQHandler+0xb0>
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	f003 0304 	and.w	r3, r3, #4
 8016592:	2b00      	cmp	r3, #0
 8016594:	d01b      	beq.n	80165ce <HAL_TIM_IRQHandler+0xb0>
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	f06f 0204 	mvn.w	r2, #4
 801659e:	611a      	str	r2, [r3, #16]
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	2202      	movs	r2, #2
 80165a4:	771a      	strb	r2, [r3, #28]
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	699b      	ldr	r3, [r3, #24]
 80165ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d003      	beq.n	80165bc <HAL_TIM_IRQHandler+0x9e>
 80165b4:	6878      	ldr	r0, [r7, #4]
 80165b6:	f000 fb6b 	bl	8016c90 <HAL_TIM_IC_CaptureCallback>
 80165ba:	e005      	b.n	80165c8 <HAL_TIM_IRQHandler+0xaa>
 80165bc:	6878      	ldr	r0, [r7, #4]
 80165be:	f000 fb5d 	bl	8016c7c <HAL_TIM_OC_DelayElapsedCallback>
 80165c2:	6878      	ldr	r0, [r7, #4]
 80165c4:	f000 fb6e 	bl	8016ca4 <HAL_TIM_PWM_PulseFinishedCallback>
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2200      	movs	r2, #0
 80165cc:	771a      	strb	r2, [r3, #28]
 80165ce:	68bb      	ldr	r3, [r7, #8]
 80165d0:	f003 0308 	and.w	r3, r3, #8
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d020      	beq.n	801661a <HAL_TIM_IRQHandler+0xfc>
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	f003 0308 	and.w	r3, r3, #8
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d01b      	beq.n	801661a <HAL_TIM_IRQHandler+0xfc>
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	f06f 0208 	mvn.w	r2, #8
 80165ea:	611a      	str	r2, [r3, #16]
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	2204      	movs	r2, #4
 80165f0:	771a      	strb	r2, [r3, #28]
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	69db      	ldr	r3, [r3, #28]
 80165f8:	f003 0303 	and.w	r3, r3, #3
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d003      	beq.n	8016608 <HAL_TIM_IRQHandler+0xea>
 8016600:	6878      	ldr	r0, [r7, #4]
 8016602:	f000 fb45 	bl	8016c90 <HAL_TIM_IC_CaptureCallback>
 8016606:	e005      	b.n	8016614 <HAL_TIM_IRQHandler+0xf6>
 8016608:	6878      	ldr	r0, [r7, #4]
 801660a:	f000 fb37 	bl	8016c7c <HAL_TIM_OC_DelayElapsedCallback>
 801660e:	6878      	ldr	r0, [r7, #4]
 8016610:	f000 fb48 	bl	8016ca4 <HAL_TIM_PWM_PulseFinishedCallback>
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	2200      	movs	r2, #0
 8016618:	771a      	strb	r2, [r3, #28]
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	f003 0310 	and.w	r3, r3, #16
 8016620:	2b00      	cmp	r3, #0
 8016622:	d020      	beq.n	8016666 <HAL_TIM_IRQHandler+0x148>
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	f003 0310 	and.w	r3, r3, #16
 801662a:	2b00      	cmp	r3, #0
 801662c:	d01b      	beq.n	8016666 <HAL_TIM_IRQHandler+0x148>
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	f06f 0210 	mvn.w	r2, #16
 8016636:	611a      	str	r2, [r3, #16]
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	2208      	movs	r2, #8
 801663c:	771a      	strb	r2, [r3, #28]
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	69db      	ldr	r3, [r3, #28]
 8016644:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016648:	2b00      	cmp	r3, #0
 801664a:	d003      	beq.n	8016654 <HAL_TIM_IRQHandler+0x136>
 801664c:	6878      	ldr	r0, [r7, #4]
 801664e:	f000 fb1f 	bl	8016c90 <HAL_TIM_IC_CaptureCallback>
 8016652:	e005      	b.n	8016660 <HAL_TIM_IRQHandler+0x142>
 8016654:	6878      	ldr	r0, [r7, #4]
 8016656:	f000 fb11 	bl	8016c7c <HAL_TIM_OC_DelayElapsedCallback>
 801665a:	6878      	ldr	r0, [r7, #4]
 801665c:	f000 fb22 	bl	8016ca4 <HAL_TIM_PWM_PulseFinishedCallback>
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2200      	movs	r2, #0
 8016664:	771a      	strb	r2, [r3, #28]
 8016666:	68bb      	ldr	r3, [r7, #8]
 8016668:	f003 0301 	and.w	r3, r3, #1
 801666c:	2b00      	cmp	r3, #0
 801666e:	d00c      	beq.n	801668a <HAL_TIM_IRQHandler+0x16c>
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	f003 0301 	and.w	r3, r3, #1
 8016676:	2b00      	cmp	r3, #0
 8016678:	d007      	beq.n	801668a <HAL_TIM_IRQHandler+0x16c>
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	f06f 0201 	mvn.w	r2, #1
 8016682:	611a      	str	r2, [r3, #16]
 8016684:	6878      	ldr	r0, [r7, #4]
 8016686:	f7ef fb1f 	bl	8005cc8 <HAL_TIM_PeriodElapsedCallback>
 801668a:	68bb      	ldr	r3, [r7, #8]
 801668c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016690:	2b00      	cmp	r3, #0
 8016692:	d104      	bne.n	801669e <HAL_TIM_IRQHandler+0x180>
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801669a:	2b00      	cmp	r3, #0
 801669c:	d00c      	beq.n	80166b8 <HAL_TIM_IRQHandler+0x19a>
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d007      	beq.n	80166b8 <HAL_TIM_IRQHandler+0x19a>
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80166b0:	611a      	str	r2, [r3, #16]
 80166b2:	6878      	ldr	r0, [r7, #4]
 80166b4:	f001 f9be 	bl	8017a34 <HAL_TIMEx_BreakCallback>
 80166b8:	68bb      	ldr	r3, [r7, #8]
 80166ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d00c      	beq.n	80166dc <HAL_TIM_IRQHandler+0x1be>
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d007      	beq.n	80166dc <HAL_TIM_IRQHandler+0x1be>
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80166d4:	611a      	str	r2, [r3, #16]
 80166d6:	6878      	ldr	r0, [r7, #4]
 80166d8:	f001 f9b6 	bl	8017a48 <HAL_TIMEx_Break2Callback>
 80166dc:	68bb      	ldr	r3, [r7, #8]
 80166de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d00c      	beq.n	8016700 <HAL_TIM_IRQHandler+0x1e2>
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d007      	beq.n	8016700 <HAL_TIM_IRQHandler+0x1e2>
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80166f8:	611a      	str	r2, [r3, #16]
 80166fa:	6878      	ldr	r0, [r7, #4]
 80166fc:	f000 fadc 	bl	8016cb8 <HAL_TIM_TriggerCallback>
 8016700:	68bb      	ldr	r3, [r7, #8]
 8016702:	f003 0320 	and.w	r3, r3, #32
 8016706:	2b00      	cmp	r3, #0
 8016708:	d00c      	beq.n	8016724 <HAL_TIM_IRQHandler+0x206>
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	f003 0320 	and.w	r3, r3, #32
 8016710:	2b00      	cmp	r3, #0
 8016712:	d007      	beq.n	8016724 <HAL_TIM_IRQHandler+0x206>
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	f06f 0220 	mvn.w	r2, #32
 801671c:	611a      	str	r2, [r3, #16]
 801671e:	6878      	ldr	r0, [r7, #4]
 8016720:	f001 f97e 	bl	8017a20 <HAL_TIMEx_CommutCallback>
 8016724:	bf00      	nop
 8016726:	3710      	adds	r7, #16
 8016728:	46bd      	mov	sp, r7
 801672a:	bd80      	pop	{r7, pc}

0801672c <HAL_TIM_IC_ConfigChannel>:
 801672c:	b580      	push	{r7, lr}
 801672e:	b086      	sub	sp, #24
 8016730:	af00      	add	r7, sp, #0
 8016732:	60f8      	str	r0, [r7, #12]
 8016734:	60b9      	str	r1, [r7, #8]
 8016736:	607a      	str	r2, [r7, #4]
 8016738:	2300      	movs	r3, #0
 801673a:	75fb      	strb	r3, [r7, #23]
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016742:	2b01      	cmp	r3, #1
 8016744:	d101      	bne.n	801674a <HAL_TIM_IC_ConfigChannel+0x1e>
 8016746:	2302      	movs	r3, #2
 8016748:	e088      	b.n	801685c <HAL_TIM_IC_ConfigChannel+0x130>
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	2201      	movs	r2, #1
 801674e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	2b00      	cmp	r3, #0
 8016756:	d11b      	bne.n	8016790 <HAL_TIM_IC_ConfigChannel+0x64>
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	6818      	ldr	r0, [r3, #0]
 801675c:	68bb      	ldr	r3, [r7, #8]
 801675e:	6819      	ldr	r1, [r3, #0]
 8016760:	68bb      	ldr	r3, [r7, #8]
 8016762:	685a      	ldr	r2, [r3, #4]
 8016764:	68bb      	ldr	r3, [r7, #8]
 8016766:	68db      	ldr	r3, [r3, #12]
 8016768:	f000 fe38 	bl	80173dc <TIM_TI1_SetConfig>
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	699a      	ldr	r2, [r3, #24]
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	f022 020c 	bic.w	r2, r2, #12
 801677a:	619a      	str	r2, [r3, #24]
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	6999      	ldr	r1, [r3, #24]
 8016782:	68bb      	ldr	r3, [r7, #8]
 8016784:	689a      	ldr	r2, [r3, #8]
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	430a      	orrs	r2, r1
 801678c:	619a      	str	r2, [r3, #24]
 801678e:	e060      	b.n	8016852 <HAL_TIM_IC_ConfigChannel+0x126>
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	2b04      	cmp	r3, #4
 8016794:	d11c      	bne.n	80167d0 <HAL_TIM_IC_ConfigChannel+0xa4>
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	6818      	ldr	r0, [r3, #0]
 801679a:	68bb      	ldr	r3, [r7, #8]
 801679c:	6819      	ldr	r1, [r3, #0]
 801679e:	68bb      	ldr	r3, [r7, #8]
 80167a0:	685a      	ldr	r2, [r3, #4]
 80167a2:	68bb      	ldr	r3, [r7, #8]
 80167a4:	68db      	ldr	r3, [r3, #12]
 80167a6:	f000 fec8 	bl	801753a <TIM_TI2_SetConfig>
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	699a      	ldr	r2, [r3, #24]
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80167b8:	619a      	str	r2, [r3, #24]
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	6999      	ldr	r1, [r3, #24]
 80167c0:	68bb      	ldr	r3, [r7, #8]
 80167c2:	689b      	ldr	r3, [r3, #8]
 80167c4:	021a      	lsls	r2, r3, #8
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	430a      	orrs	r2, r1
 80167cc:	619a      	str	r2, [r3, #24]
 80167ce:	e040      	b.n	8016852 <HAL_TIM_IC_ConfigChannel+0x126>
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	2b08      	cmp	r3, #8
 80167d4:	d11b      	bne.n	801680e <HAL_TIM_IC_ConfigChannel+0xe2>
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	6818      	ldr	r0, [r3, #0]
 80167da:	68bb      	ldr	r3, [r7, #8]
 80167dc:	6819      	ldr	r1, [r3, #0]
 80167de:	68bb      	ldr	r3, [r7, #8]
 80167e0:	685a      	ldr	r2, [r3, #4]
 80167e2:	68bb      	ldr	r3, [r7, #8]
 80167e4:	68db      	ldr	r3, [r3, #12]
 80167e6:	f000 ff15 	bl	8017614 <TIM_TI3_SetConfig>
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	69da      	ldr	r2, [r3, #28]
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	f022 020c 	bic.w	r2, r2, #12
 80167f8:	61da      	str	r2, [r3, #28]
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	69d9      	ldr	r1, [r3, #28]
 8016800:	68bb      	ldr	r3, [r7, #8]
 8016802:	689a      	ldr	r2, [r3, #8]
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	430a      	orrs	r2, r1
 801680a:	61da      	str	r2, [r3, #28]
 801680c:	e021      	b.n	8016852 <HAL_TIM_IC_ConfigChannel+0x126>
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	2b0c      	cmp	r3, #12
 8016812:	d11c      	bne.n	801684e <HAL_TIM_IC_ConfigChannel+0x122>
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	6818      	ldr	r0, [r3, #0]
 8016818:	68bb      	ldr	r3, [r7, #8]
 801681a:	6819      	ldr	r1, [r3, #0]
 801681c:	68bb      	ldr	r3, [r7, #8]
 801681e:	685a      	ldr	r2, [r3, #4]
 8016820:	68bb      	ldr	r3, [r7, #8]
 8016822:	68db      	ldr	r3, [r3, #12]
 8016824:	f000 ff32 	bl	801768c <TIM_TI4_SetConfig>
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	69da      	ldr	r2, [r3, #28]
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016836:	61da      	str	r2, [r3, #28]
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	69d9      	ldr	r1, [r3, #28]
 801683e:	68bb      	ldr	r3, [r7, #8]
 8016840:	689b      	ldr	r3, [r3, #8]
 8016842:	021a      	lsls	r2, r3, #8
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	430a      	orrs	r2, r1
 801684a:	61da      	str	r2, [r3, #28]
 801684c:	e001      	b.n	8016852 <HAL_TIM_IC_ConfigChannel+0x126>
 801684e:	2301      	movs	r3, #1
 8016850:	75fb      	strb	r3, [r7, #23]
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	2200      	movs	r2, #0
 8016856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801685a:	7dfb      	ldrb	r3, [r7, #23]
 801685c:	4618      	mov	r0, r3
 801685e:	3718      	adds	r7, #24
 8016860:	46bd      	mov	sp, r7
 8016862:	bd80      	pop	{r7, pc}

08016864 <HAL_TIM_PWM_ConfigChannel>:
 8016864:	b580      	push	{r7, lr}
 8016866:	b086      	sub	sp, #24
 8016868:	af00      	add	r7, sp, #0
 801686a:	60f8      	str	r0, [r7, #12]
 801686c:	60b9      	str	r1, [r7, #8]
 801686e:	607a      	str	r2, [r7, #4]
 8016870:	2300      	movs	r3, #0
 8016872:	75fb      	strb	r3, [r7, #23]
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801687a:	2b01      	cmp	r3, #1
 801687c:	d101      	bne.n	8016882 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801687e:	2302      	movs	r3, #2
 8016880:	e0ff      	b.n	8016a82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	2201      	movs	r2, #1
 8016886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	2b14      	cmp	r3, #20
 801688e:	f200 80f0 	bhi.w	8016a72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8016892:	a201      	add	r2, pc, #4	@ (adr r2, 8016898 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8016894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016898:	080168ed 	.word	0x080168ed
 801689c:	08016a73 	.word	0x08016a73
 80168a0:	08016a73 	.word	0x08016a73
 80168a4:	08016a73 	.word	0x08016a73
 80168a8:	0801692d 	.word	0x0801692d
 80168ac:	08016a73 	.word	0x08016a73
 80168b0:	08016a73 	.word	0x08016a73
 80168b4:	08016a73 	.word	0x08016a73
 80168b8:	0801696f 	.word	0x0801696f
 80168bc:	08016a73 	.word	0x08016a73
 80168c0:	08016a73 	.word	0x08016a73
 80168c4:	08016a73 	.word	0x08016a73
 80168c8:	080169af 	.word	0x080169af
 80168cc:	08016a73 	.word	0x08016a73
 80168d0:	08016a73 	.word	0x08016a73
 80168d4:	08016a73 	.word	0x08016a73
 80168d8:	080169f1 	.word	0x080169f1
 80168dc:	08016a73 	.word	0x08016a73
 80168e0:	08016a73 	.word	0x08016a73
 80168e4:	08016a73 	.word	0x08016a73
 80168e8:	08016a31 	.word	0x08016a31
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	68b9      	ldr	r1, [r7, #8]
 80168f2:	4618      	mov	r0, r3
 80168f4:	f000 fa9c 	bl	8016e30 <TIM_OC1_SetConfig>
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	699a      	ldr	r2, [r3, #24]
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	f042 0208 	orr.w	r2, r2, #8
 8016906:	619a      	str	r2, [r3, #24]
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	699a      	ldr	r2, [r3, #24]
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	f022 0204 	bic.w	r2, r2, #4
 8016916:	619a      	str	r2, [r3, #24]
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	6999      	ldr	r1, [r3, #24]
 801691e:	68bb      	ldr	r3, [r7, #8]
 8016920:	691a      	ldr	r2, [r3, #16]
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	430a      	orrs	r2, r1
 8016928:	619a      	str	r2, [r3, #24]
 801692a:	e0a5      	b.n	8016a78 <HAL_TIM_PWM_ConfigChannel+0x214>
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	68b9      	ldr	r1, [r7, #8]
 8016932:	4618      	mov	r0, r3
 8016934:	f000 fb0c 	bl	8016f50 <TIM_OC2_SetConfig>
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	699a      	ldr	r2, [r3, #24]
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016946:	619a      	str	r2, [r3, #24]
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	699a      	ldr	r2, [r3, #24]
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016956:	619a      	str	r2, [r3, #24]
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	6999      	ldr	r1, [r3, #24]
 801695e:	68bb      	ldr	r3, [r7, #8]
 8016960:	691b      	ldr	r3, [r3, #16]
 8016962:	021a      	lsls	r2, r3, #8
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	430a      	orrs	r2, r1
 801696a:	619a      	str	r2, [r3, #24]
 801696c:	e084      	b.n	8016a78 <HAL_TIM_PWM_ConfigChannel+0x214>
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	68b9      	ldr	r1, [r7, #8]
 8016974:	4618      	mov	r0, r3
 8016976:	f000 fb75 	bl	8017064 <TIM_OC3_SetConfig>
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	69da      	ldr	r2, [r3, #28]
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	f042 0208 	orr.w	r2, r2, #8
 8016988:	61da      	str	r2, [r3, #28]
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	69da      	ldr	r2, [r3, #28]
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	f022 0204 	bic.w	r2, r2, #4
 8016998:	61da      	str	r2, [r3, #28]
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	69d9      	ldr	r1, [r3, #28]
 80169a0:	68bb      	ldr	r3, [r7, #8]
 80169a2:	691a      	ldr	r2, [r3, #16]
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	430a      	orrs	r2, r1
 80169aa:	61da      	str	r2, [r3, #28]
 80169ac:	e064      	b.n	8016a78 <HAL_TIM_PWM_ConfigChannel+0x214>
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	68b9      	ldr	r1, [r7, #8]
 80169b4:	4618      	mov	r0, r3
 80169b6:	f000 fbdd 	bl	8017174 <TIM_OC4_SetConfig>
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	69da      	ldr	r2, [r3, #28]
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80169c8:	61da      	str	r2, [r3, #28]
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	69da      	ldr	r2, [r3, #28]
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80169d8:	61da      	str	r2, [r3, #28]
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	69d9      	ldr	r1, [r3, #28]
 80169e0:	68bb      	ldr	r3, [r7, #8]
 80169e2:	691b      	ldr	r3, [r3, #16]
 80169e4:	021a      	lsls	r2, r3, #8
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	430a      	orrs	r2, r1
 80169ec:	61da      	str	r2, [r3, #28]
 80169ee:	e043      	b.n	8016a78 <HAL_TIM_PWM_ConfigChannel+0x214>
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	68b9      	ldr	r1, [r7, #8]
 80169f6:	4618      	mov	r0, r3
 80169f8:	f000 fc26 	bl	8017248 <TIM_OC5_SetConfig>
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	f042 0208 	orr.w	r2, r2, #8
 8016a0a:	655a      	str	r2, [r3, #84]	@ 0x54
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	f022 0204 	bic.w	r2, r2, #4
 8016a1a:	655a      	str	r2, [r3, #84]	@ 0x54
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	691a      	ldr	r2, [r3, #16]
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	430a      	orrs	r2, r1
 8016a2c:	655a      	str	r2, [r3, #84]	@ 0x54
 8016a2e:	e023      	b.n	8016a78 <HAL_TIM_PWM_ConfigChannel+0x214>
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	68b9      	ldr	r1, [r7, #8]
 8016a36:	4618      	mov	r0, r3
 8016a38:	f000 fc6a 	bl	8017310 <TIM_OC6_SetConfig>
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016a4a:	655a      	str	r2, [r3, #84]	@ 0x54
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016a5a:	655a      	str	r2, [r3, #84]	@ 0x54
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016a62:	68bb      	ldr	r3, [r7, #8]
 8016a64:	691b      	ldr	r3, [r3, #16]
 8016a66:	021a      	lsls	r2, r3, #8
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	430a      	orrs	r2, r1
 8016a6e:	655a      	str	r2, [r3, #84]	@ 0x54
 8016a70:	e002      	b.n	8016a78 <HAL_TIM_PWM_ConfigChannel+0x214>
 8016a72:	2301      	movs	r3, #1
 8016a74:	75fb      	strb	r3, [r7, #23]
 8016a76:	bf00      	nop
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8016a80:	7dfb      	ldrb	r3, [r7, #23]
 8016a82:	4618      	mov	r0, r3
 8016a84:	3718      	adds	r7, #24
 8016a86:	46bd      	mov	sp, r7
 8016a88:	bd80      	pop	{r7, pc}
 8016a8a:	bf00      	nop

08016a8c <HAL_TIM_ConfigClockSource>:
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b084      	sub	sp, #16
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	6078      	str	r0, [r7, #4]
 8016a94:	6039      	str	r1, [r7, #0]
 8016a96:	2300      	movs	r3, #0
 8016a98:	73fb      	strb	r3, [r7, #15]
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016aa0:	2b01      	cmp	r3, #1
 8016aa2:	d101      	bne.n	8016aa8 <HAL_TIM_ConfigClockSource+0x1c>
 8016aa4:	2302      	movs	r3, #2
 8016aa6:	e0dc      	b.n	8016c62 <HAL_TIM_ConfigClockSource+0x1d6>
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	2201      	movs	r2, #1
 8016aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	2202      	movs	r2, #2
 8016ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	689b      	ldr	r3, [r3, #8]
 8016abe:	60bb      	str	r3, [r7, #8]
 8016ac0:	68ba      	ldr	r2, [r7, #8]
 8016ac2:	4b6a      	ldr	r3, [pc, #424]	@ (8016c6c <HAL_TIM_ConfigClockSource+0x1e0>)
 8016ac4:	4013      	ands	r3, r2
 8016ac6:	60bb      	str	r3, [r7, #8]
 8016ac8:	68bb      	ldr	r3, [r7, #8]
 8016aca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016ace:	60bb      	str	r3, [r7, #8]
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	68ba      	ldr	r2, [r7, #8]
 8016ad6:	609a      	str	r2, [r3, #8]
 8016ad8:	683b      	ldr	r3, [r7, #0]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	4a64      	ldr	r2, [pc, #400]	@ (8016c70 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016ade:	4293      	cmp	r3, r2
 8016ae0:	f000 80a9 	beq.w	8016c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8016ae4:	4a62      	ldr	r2, [pc, #392]	@ (8016c70 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016ae6:	4293      	cmp	r3, r2
 8016ae8:	f200 80ae 	bhi.w	8016c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8016aec:	4a61      	ldr	r2, [pc, #388]	@ (8016c74 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016aee:	4293      	cmp	r3, r2
 8016af0:	f000 80a1 	beq.w	8016c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8016af4:	4a5f      	ldr	r2, [pc, #380]	@ (8016c74 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016af6:	4293      	cmp	r3, r2
 8016af8:	f200 80a6 	bhi.w	8016c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8016afc:	4a5e      	ldr	r2, [pc, #376]	@ (8016c78 <HAL_TIM_ConfigClockSource+0x1ec>)
 8016afe:	4293      	cmp	r3, r2
 8016b00:	f000 8099 	beq.w	8016c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8016b04:	4a5c      	ldr	r2, [pc, #368]	@ (8016c78 <HAL_TIM_ConfigClockSource+0x1ec>)
 8016b06:	4293      	cmp	r3, r2
 8016b08:	f200 809e 	bhi.w	8016c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016b10:	f000 8091 	beq.w	8016c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8016b14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016b18:	f200 8096 	bhi.w	8016c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016b20:	f000 8089 	beq.w	8016c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8016b24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016b28:	f200 808e 	bhi.w	8016c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016b30:	d03e      	beq.n	8016bb0 <HAL_TIM_ConfigClockSource+0x124>
 8016b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016b36:	f200 8087 	bhi.w	8016c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016b3e:	f000 8086 	beq.w	8016c4e <HAL_TIM_ConfigClockSource+0x1c2>
 8016b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016b46:	d87f      	bhi.n	8016c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b48:	2b70      	cmp	r3, #112	@ 0x70
 8016b4a:	d01a      	beq.n	8016b82 <HAL_TIM_ConfigClockSource+0xf6>
 8016b4c:	2b70      	cmp	r3, #112	@ 0x70
 8016b4e:	d87b      	bhi.n	8016c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b50:	2b60      	cmp	r3, #96	@ 0x60
 8016b52:	d050      	beq.n	8016bf6 <HAL_TIM_ConfigClockSource+0x16a>
 8016b54:	2b60      	cmp	r3, #96	@ 0x60
 8016b56:	d877      	bhi.n	8016c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b58:	2b50      	cmp	r3, #80	@ 0x50
 8016b5a:	d03c      	beq.n	8016bd6 <HAL_TIM_ConfigClockSource+0x14a>
 8016b5c:	2b50      	cmp	r3, #80	@ 0x50
 8016b5e:	d873      	bhi.n	8016c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b60:	2b40      	cmp	r3, #64	@ 0x40
 8016b62:	d058      	beq.n	8016c16 <HAL_TIM_ConfigClockSource+0x18a>
 8016b64:	2b40      	cmp	r3, #64	@ 0x40
 8016b66:	d86f      	bhi.n	8016c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b68:	2b30      	cmp	r3, #48	@ 0x30
 8016b6a:	d064      	beq.n	8016c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8016b6c:	2b30      	cmp	r3, #48	@ 0x30
 8016b6e:	d86b      	bhi.n	8016c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b70:	2b20      	cmp	r3, #32
 8016b72:	d060      	beq.n	8016c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8016b74:	2b20      	cmp	r3, #32
 8016b76:	d867      	bhi.n	8016c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d05c      	beq.n	8016c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8016b7c:	2b10      	cmp	r3, #16
 8016b7e:	d05a      	beq.n	8016c36 <HAL_TIM_ConfigClockSource+0x1aa>
 8016b80:	e062      	b.n	8016c48 <HAL_TIM_ConfigClockSource+0x1bc>
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	6818      	ldr	r0, [r3, #0]
 8016b86:	683b      	ldr	r3, [r7, #0]
 8016b88:	6899      	ldr	r1, [r3, #8]
 8016b8a:	683b      	ldr	r3, [r7, #0]
 8016b8c:	685a      	ldr	r2, [r3, #4]
 8016b8e:	683b      	ldr	r3, [r7, #0]
 8016b90:	68db      	ldr	r3, [r3, #12]
 8016b92:	f000 fdd7 	bl	8017744 <TIM_ETR_SetConfig>
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	689b      	ldr	r3, [r3, #8]
 8016b9c:	60bb      	str	r3, [r7, #8]
 8016b9e:	68bb      	ldr	r3, [r7, #8]
 8016ba0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8016ba4:	60bb      	str	r3, [r7, #8]
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	68ba      	ldr	r2, [r7, #8]
 8016bac:	609a      	str	r2, [r3, #8]
 8016bae:	e04f      	b.n	8016c50 <HAL_TIM_ConfigClockSource+0x1c4>
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	6818      	ldr	r0, [r3, #0]
 8016bb4:	683b      	ldr	r3, [r7, #0]
 8016bb6:	6899      	ldr	r1, [r3, #8]
 8016bb8:	683b      	ldr	r3, [r7, #0]
 8016bba:	685a      	ldr	r2, [r3, #4]
 8016bbc:	683b      	ldr	r3, [r7, #0]
 8016bbe:	68db      	ldr	r3, [r3, #12]
 8016bc0:	f000 fdc0 	bl	8017744 <TIM_ETR_SetConfig>
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	689a      	ldr	r2, [r3, #8]
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8016bd2:	609a      	str	r2, [r3, #8]
 8016bd4:	e03c      	b.n	8016c50 <HAL_TIM_ConfigClockSource+0x1c4>
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	6818      	ldr	r0, [r3, #0]
 8016bda:	683b      	ldr	r3, [r7, #0]
 8016bdc:	6859      	ldr	r1, [r3, #4]
 8016bde:	683b      	ldr	r3, [r7, #0]
 8016be0:	68db      	ldr	r3, [r3, #12]
 8016be2:	461a      	mov	r2, r3
 8016be4:	f000 fc7a 	bl	80174dc <TIM_TI1_ConfigInputStage>
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	2150      	movs	r1, #80	@ 0x50
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f000 fd8a 	bl	8017708 <TIM_ITRx_SetConfig>
 8016bf4:	e02c      	b.n	8016c50 <HAL_TIM_ConfigClockSource+0x1c4>
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	6818      	ldr	r0, [r3, #0]
 8016bfa:	683b      	ldr	r3, [r7, #0]
 8016bfc:	6859      	ldr	r1, [r3, #4]
 8016bfe:	683b      	ldr	r3, [r7, #0]
 8016c00:	68db      	ldr	r3, [r3, #12]
 8016c02:	461a      	mov	r2, r3
 8016c04:	f000 fcd6 	bl	80175b4 <TIM_TI2_ConfigInputStage>
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	2160      	movs	r1, #96	@ 0x60
 8016c0e:	4618      	mov	r0, r3
 8016c10:	f000 fd7a 	bl	8017708 <TIM_ITRx_SetConfig>
 8016c14:	e01c      	b.n	8016c50 <HAL_TIM_ConfigClockSource+0x1c4>
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	6818      	ldr	r0, [r3, #0]
 8016c1a:	683b      	ldr	r3, [r7, #0]
 8016c1c:	6859      	ldr	r1, [r3, #4]
 8016c1e:	683b      	ldr	r3, [r7, #0]
 8016c20:	68db      	ldr	r3, [r3, #12]
 8016c22:	461a      	mov	r2, r3
 8016c24:	f000 fc5a 	bl	80174dc <TIM_TI1_ConfigInputStage>
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	2140      	movs	r1, #64	@ 0x40
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f000 fd6a 	bl	8017708 <TIM_ITRx_SetConfig>
 8016c34:	e00c      	b.n	8016c50 <HAL_TIM_ConfigClockSource+0x1c4>
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	681a      	ldr	r2, [r3, #0]
 8016c3a:	683b      	ldr	r3, [r7, #0]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	4619      	mov	r1, r3
 8016c40:	4610      	mov	r0, r2
 8016c42:	f000 fd61 	bl	8017708 <TIM_ITRx_SetConfig>
 8016c46:	e003      	b.n	8016c50 <HAL_TIM_ConfigClockSource+0x1c4>
 8016c48:	2301      	movs	r3, #1
 8016c4a:	73fb      	strb	r3, [r7, #15]
 8016c4c:	e000      	b.n	8016c50 <HAL_TIM_ConfigClockSource+0x1c4>
 8016c4e:	bf00      	nop
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	2201      	movs	r2, #1
 8016c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	2200      	movs	r2, #0
 8016c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8016c60:	7bfb      	ldrb	r3, [r7, #15]
 8016c62:	4618      	mov	r0, r3
 8016c64:	3710      	adds	r7, #16
 8016c66:	46bd      	mov	sp, r7
 8016c68:	bd80      	pop	{r7, pc}
 8016c6a:	bf00      	nop
 8016c6c:	ffceff88 	.word	0xffceff88
 8016c70:	00100040 	.word	0x00100040
 8016c74:	00100030 	.word	0x00100030
 8016c78:	00100020 	.word	0x00100020

08016c7c <HAL_TIM_OC_DelayElapsedCallback>:
 8016c7c:	b480      	push	{r7}
 8016c7e:	b083      	sub	sp, #12
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
 8016c84:	bf00      	nop
 8016c86:	370c      	adds	r7, #12
 8016c88:	46bd      	mov	sp, r7
 8016c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8e:	4770      	bx	lr

08016c90 <HAL_TIM_IC_CaptureCallback>:
 8016c90:	b480      	push	{r7}
 8016c92:	b083      	sub	sp, #12
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	6078      	str	r0, [r7, #4]
 8016c98:	bf00      	nop
 8016c9a:	370c      	adds	r7, #12
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca2:	4770      	bx	lr

08016ca4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8016ca4:	b480      	push	{r7}
 8016ca6:	b083      	sub	sp, #12
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
 8016cac:	bf00      	nop
 8016cae:	370c      	adds	r7, #12
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb6:	4770      	bx	lr

08016cb8 <HAL_TIM_TriggerCallback>:
 8016cb8:	b480      	push	{r7}
 8016cba:	b083      	sub	sp, #12
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
 8016cc0:	bf00      	nop
 8016cc2:	370c      	adds	r7, #12
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cca:	4770      	bx	lr

08016ccc <TIM_Base_SetConfig>:
 8016ccc:	b480      	push	{r7}
 8016cce:	b085      	sub	sp, #20
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
 8016cd4:	6039      	str	r1, [r7, #0]
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	60fb      	str	r3, [r7, #12]
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	4a4a      	ldr	r2, [pc, #296]	@ (8016e08 <TIM_Base_SetConfig+0x13c>)
 8016ce0:	4293      	cmp	r3, r2
 8016ce2:	d013      	beq.n	8016d0c <TIM_Base_SetConfig+0x40>
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016cea:	d00f      	beq.n	8016d0c <TIM_Base_SetConfig+0x40>
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	4a47      	ldr	r2, [pc, #284]	@ (8016e0c <TIM_Base_SetConfig+0x140>)
 8016cf0:	4293      	cmp	r3, r2
 8016cf2:	d00b      	beq.n	8016d0c <TIM_Base_SetConfig+0x40>
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	4a46      	ldr	r2, [pc, #280]	@ (8016e10 <TIM_Base_SetConfig+0x144>)
 8016cf8:	4293      	cmp	r3, r2
 8016cfa:	d007      	beq.n	8016d0c <TIM_Base_SetConfig+0x40>
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	4a45      	ldr	r2, [pc, #276]	@ (8016e14 <TIM_Base_SetConfig+0x148>)
 8016d00:	4293      	cmp	r3, r2
 8016d02:	d003      	beq.n	8016d0c <TIM_Base_SetConfig+0x40>
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	4a44      	ldr	r2, [pc, #272]	@ (8016e18 <TIM_Base_SetConfig+0x14c>)
 8016d08:	4293      	cmp	r3, r2
 8016d0a:	d108      	bne.n	8016d1e <TIM_Base_SetConfig+0x52>
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016d12:	60fb      	str	r3, [r7, #12]
 8016d14:	683b      	ldr	r3, [r7, #0]
 8016d16:	685b      	ldr	r3, [r3, #4]
 8016d18:	68fa      	ldr	r2, [r7, #12]
 8016d1a:	4313      	orrs	r3, r2
 8016d1c:	60fb      	str	r3, [r7, #12]
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	4a39      	ldr	r2, [pc, #228]	@ (8016e08 <TIM_Base_SetConfig+0x13c>)
 8016d22:	4293      	cmp	r3, r2
 8016d24:	d027      	beq.n	8016d76 <TIM_Base_SetConfig+0xaa>
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016d2c:	d023      	beq.n	8016d76 <TIM_Base_SetConfig+0xaa>
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	4a36      	ldr	r2, [pc, #216]	@ (8016e0c <TIM_Base_SetConfig+0x140>)
 8016d32:	4293      	cmp	r3, r2
 8016d34:	d01f      	beq.n	8016d76 <TIM_Base_SetConfig+0xaa>
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	4a35      	ldr	r2, [pc, #212]	@ (8016e10 <TIM_Base_SetConfig+0x144>)
 8016d3a:	4293      	cmp	r3, r2
 8016d3c:	d01b      	beq.n	8016d76 <TIM_Base_SetConfig+0xaa>
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	4a34      	ldr	r2, [pc, #208]	@ (8016e14 <TIM_Base_SetConfig+0x148>)
 8016d42:	4293      	cmp	r3, r2
 8016d44:	d017      	beq.n	8016d76 <TIM_Base_SetConfig+0xaa>
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	4a33      	ldr	r2, [pc, #204]	@ (8016e18 <TIM_Base_SetConfig+0x14c>)
 8016d4a:	4293      	cmp	r3, r2
 8016d4c:	d013      	beq.n	8016d76 <TIM_Base_SetConfig+0xaa>
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	4a32      	ldr	r2, [pc, #200]	@ (8016e1c <TIM_Base_SetConfig+0x150>)
 8016d52:	4293      	cmp	r3, r2
 8016d54:	d00f      	beq.n	8016d76 <TIM_Base_SetConfig+0xaa>
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	4a31      	ldr	r2, [pc, #196]	@ (8016e20 <TIM_Base_SetConfig+0x154>)
 8016d5a:	4293      	cmp	r3, r2
 8016d5c:	d00b      	beq.n	8016d76 <TIM_Base_SetConfig+0xaa>
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	4a30      	ldr	r2, [pc, #192]	@ (8016e24 <TIM_Base_SetConfig+0x158>)
 8016d62:	4293      	cmp	r3, r2
 8016d64:	d007      	beq.n	8016d76 <TIM_Base_SetConfig+0xaa>
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	4a2f      	ldr	r2, [pc, #188]	@ (8016e28 <TIM_Base_SetConfig+0x15c>)
 8016d6a:	4293      	cmp	r3, r2
 8016d6c:	d003      	beq.n	8016d76 <TIM_Base_SetConfig+0xaa>
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	4a2e      	ldr	r2, [pc, #184]	@ (8016e2c <TIM_Base_SetConfig+0x160>)
 8016d72:	4293      	cmp	r3, r2
 8016d74:	d108      	bne.n	8016d88 <TIM_Base_SetConfig+0xbc>
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016d7c:	60fb      	str	r3, [r7, #12]
 8016d7e:	683b      	ldr	r3, [r7, #0]
 8016d80:	68db      	ldr	r3, [r3, #12]
 8016d82:	68fa      	ldr	r2, [r7, #12]
 8016d84:	4313      	orrs	r3, r2
 8016d86:	60fb      	str	r3, [r7, #12]
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8016d8e:	683b      	ldr	r3, [r7, #0]
 8016d90:	695b      	ldr	r3, [r3, #20]
 8016d92:	4313      	orrs	r3, r2
 8016d94:	60fb      	str	r3, [r7, #12]
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	68fa      	ldr	r2, [r7, #12]
 8016d9a:	601a      	str	r2, [r3, #0]
 8016d9c:	683b      	ldr	r3, [r7, #0]
 8016d9e:	689a      	ldr	r2, [r3, #8]
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8016da4:	683b      	ldr	r3, [r7, #0]
 8016da6:	681a      	ldr	r2, [r3, #0]
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	629a      	str	r2, [r3, #40]	@ 0x28
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	4a16      	ldr	r2, [pc, #88]	@ (8016e08 <TIM_Base_SetConfig+0x13c>)
 8016db0:	4293      	cmp	r3, r2
 8016db2:	d00f      	beq.n	8016dd4 <TIM_Base_SetConfig+0x108>
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	4a18      	ldr	r2, [pc, #96]	@ (8016e18 <TIM_Base_SetConfig+0x14c>)
 8016db8:	4293      	cmp	r3, r2
 8016dba:	d00b      	beq.n	8016dd4 <TIM_Base_SetConfig+0x108>
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	4a17      	ldr	r2, [pc, #92]	@ (8016e1c <TIM_Base_SetConfig+0x150>)
 8016dc0:	4293      	cmp	r3, r2
 8016dc2:	d007      	beq.n	8016dd4 <TIM_Base_SetConfig+0x108>
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	4a16      	ldr	r2, [pc, #88]	@ (8016e20 <TIM_Base_SetConfig+0x154>)
 8016dc8:	4293      	cmp	r3, r2
 8016dca:	d003      	beq.n	8016dd4 <TIM_Base_SetConfig+0x108>
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	4a15      	ldr	r2, [pc, #84]	@ (8016e24 <TIM_Base_SetConfig+0x158>)
 8016dd0:	4293      	cmp	r3, r2
 8016dd2:	d103      	bne.n	8016ddc <TIM_Base_SetConfig+0x110>
 8016dd4:	683b      	ldr	r3, [r7, #0]
 8016dd6:	691a      	ldr	r2, [r3, #16]
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	631a      	str	r2, [r3, #48]	@ 0x30
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	2201      	movs	r2, #1
 8016de0:	615a      	str	r2, [r3, #20]
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	691b      	ldr	r3, [r3, #16]
 8016de6:	f003 0301 	and.w	r3, r3, #1
 8016dea:	2b01      	cmp	r3, #1
 8016dec:	d105      	bne.n	8016dfa <TIM_Base_SetConfig+0x12e>
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	691b      	ldr	r3, [r3, #16]
 8016df2:	f023 0201 	bic.w	r2, r3, #1
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	611a      	str	r2, [r3, #16]
 8016dfa:	bf00      	nop
 8016dfc:	3714      	adds	r7, #20
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e04:	4770      	bx	lr
 8016e06:	bf00      	nop
 8016e08:	40010000 	.word	0x40010000
 8016e0c:	40000400 	.word	0x40000400
 8016e10:	40000800 	.word	0x40000800
 8016e14:	40000c00 	.word	0x40000c00
 8016e18:	40010400 	.word	0x40010400
 8016e1c:	40014000 	.word	0x40014000
 8016e20:	40014400 	.word	0x40014400
 8016e24:	40014800 	.word	0x40014800
 8016e28:	4000e000 	.word	0x4000e000
 8016e2c:	4000e400 	.word	0x4000e400

08016e30 <TIM_OC1_SetConfig>:
 8016e30:	b480      	push	{r7}
 8016e32:	b087      	sub	sp, #28
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
 8016e38:	6039      	str	r1, [r7, #0]
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	6a1b      	ldr	r3, [r3, #32]
 8016e3e:	617b      	str	r3, [r7, #20]
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	6a1b      	ldr	r3, [r3, #32]
 8016e44:	f023 0201 	bic.w	r2, r3, #1
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	621a      	str	r2, [r3, #32]
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	685b      	ldr	r3, [r3, #4]
 8016e50:	613b      	str	r3, [r7, #16]
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	699b      	ldr	r3, [r3, #24]
 8016e56:	60fb      	str	r3, [r7, #12]
 8016e58:	68fa      	ldr	r2, [r7, #12]
 8016e5a:	4b37      	ldr	r3, [pc, #220]	@ (8016f38 <TIM_OC1_SetConfig+0x108>)
 8016e5c:	4013      	ands	r3, r2
 8016e5e:	60fb      	str	r3, [r7, #12]
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	f023 0303 	bic.w	r3, r3, #3
 8016e66:	60fb      	str	r3, [r7, #12]
 8016e68:	683b      	ldr	r3, [r7, #0]
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	68fa      	ldr	r2, [r7, #12]
 8016e6e:	4313      	orrs	r3, r2
 8016e70:	60fb      	str	r3, [r7, #12]
 8016e72:	697b      	ldr	r3, [r7, #20]
 8016e74:	f023 0302 	bic.w	r3, r3, #2
 8016e78:	617b      	str	r3, [r7, #20]
 8016e7a:	683b      	ldr	r3, [r7, #0]
 8016e7c:	689b      	ldr	r3, [r3, #8]
 8016e7e:	697a      	ldr	r2, [r7, #20]
 8016e80:	4313      	orrs	r3, r2
 8016e82:	617b      	str	r3, [r7, #20]
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	4a2d      	ldr	r2, [pc, #180]	@ (8016f3c <TIM_OC1_SetConfig+0x10c>)
 8016e88:	4293      	cmp	r3, r2
 8016e8a:	d00f      	beq.n	8016eac <TIM_OC1_SetConfig+0x7c>
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	4a2c      	ldr	r2, [pc, #176]	@ (8016f40 <TIM_OC1_SetConfig+0x110>)
 8016e90:	4293      	cmp	r3, r2
 8016e92:	d00b      	beq.n	8016eac <TIM_OC1_SetConfig+0x7c>
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	4a2b      	ldr	r2, [pc, #172]	@ (8016f44 <TIM_OC1_SetConfig+0x114>)
 8016e98:	4293      	cmp	r3, r2
 8016e9a:	d007      	beq.n	8016eac <TIM_OC1_SetConfig+0x7c>
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8016f48 <TIM_OC1_SetConfig+0x118>)
 8016ea0:	4293      	cmp	r3, r2
 8016ea2:	d003      	beq.n	8016eac <TIM_OC1_SetConfig+0x7c>
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	4a29      	ldr	r2, [pc, #164]	@ (8016f4c <TIM_OC1_SetConfig+0x11c>)
 8016ea8:	4293      	cmp	r3, r2
 8016eaa:	d10c      	bne.n	8016ec6 <TIM_OC1_SetConfig+0x96>
 8016eac:	697b      	ldr	r3, [r7, #20]
 8016eae:	f023 0308 	bic.w	r3, r3, #8
 8016eb2:	617b      	str	r3, [r7, #20]
 8016eb4:	683b      	ldr	r3, [r7, #0]
 8016eb6:	68db      	ldr	r3, [r3, #12]
 8016eb8:	697a      	ldr	r2, [r7, #20]
 8016eba:	4313      	orrs	r3, r2
 8016ebc:	617b      	str	r3, [r7, #20]
 8016ebe:	697b      	ldr	r3, [r7, #20]
 8016ec0:	f023 0304 	bic.w	r3, r3, #4
 8016ec4:	617b      	str	r3, [r7, #20]
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	4a1c      	ldr	r2, [pc, #112]	@ (8016f3c <TIM_OC1_SetConfig+0x10c>)
 8016eca:	4293      	cmp	r3, r2
 8016ecc:	d00f      	beq.n	8016eee <TIM_OC1_SetConfig+0xbe>
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8016f40 <TIM_OC1_SetConfig+0x110>)
 8016ed2:	4293      	cmp	r3, r2
 8016ed4:	d00b      	beq.n	8016eee <TIM_OC1_SetConfig+0xbe>
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8016f44 <TIM_OC1_SetConfig+0x114>)
 8016eda:	4293      	cmp	r3, r2
 8016edc:	d007      	beq.n	8016eee <TIM_OC1_SetConfig+0xbe>
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	4a19      	ldr	r2, [pc, #100]	@ (8016f48 <TIM_OC1_SetConfig+0x118>)
 8016ee2:	4293      	cmp	r3, r2
 8016ee4:	d003      	beq.n	8016eee <TIM_OC1_SetConfig+0xbe>
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	4a18      	ldr	r2, [pc, #96]	@ (8016f4c <TIM_OC1_SetConfig+0x11c>)
 8016eea:	4293      	cmp	r3, r2
 8016eec:	d111      	bne.n	8016f12 <TIM_OC1_SetConfig+0xe2>
 8016eee:	693b      	ldr	r3, [r7, #16]
 8016ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016ef4:	613b      	str	r3, [r7, #16]
 8016ef6:	693b      	ldr	r3, [r7, #16]
 8016ef8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8016efc:	613b      	str	r3, [r7, #16]
 8016efe:	683b      	ldr	r3, [r7, #0]
 8016f00:	695b      	ldr	r3, [r3, #20]
 8016f02:	693a      	ldr	r2, [r7, #16]
 8016f04:	4313      	orrs	r3, r2
 8016f06:	613b      	str	r3, [r7, #16]
 8016f08:	683b      	ldr	r3, [r7, #0]
 8016f0a:	699b      	ldr	r3, [r3, #24]
 8016f0c:	693a      	ldr	r2, [r7, #16]
 8016f0e:	4313      	orrs	r3, r2
 8016f10:	613b      	str	r3, [r7, #16]
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	693a      	ldr	r2, [r7, #16]
 8016f16:	605a      	str	r2, [r3, #4]
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	68fa      	ldr	r2, [r7, #12]
 8016f1c:	619a      	str	r2, [r3, #24]
 8016f1e:	683b      	ldr	r3, [r7, #0]
 8016f20:	685a      	ldr	r2, [r3, #4]
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	635a      	str	r2, [r3, #52]	@ 0x34
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	697a      	ldr	r2, [r7, #20]
 8016f2a:	621a      	str	r2, [r3, #32]
 8016f2c:	bf00      	nop
 8016f2e:	371c      	adds	r7, #28
 8016f30:	46bd      	mov	sp, r7
 8016f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f36:	4770      	bx	lr
 8016f38:	fffeff8f 	.word	0xfffeff8f
 8016f3c:	40010000 	.word	0x40010000
 8016f40:	40010400 	.word	0x40010400
 8016f44:	40014000 	.word	0x40014000
 8016f48:	40014400 	.word	0x40014400
 8016f4c:	40014800 	.word	0x40014800

08016f50 <TIM_OC2_SetConfig>:
 8016f50:	b480      	push	{r7}
 8016f52:	b087      	sub	sp, #28
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
 8016f58:	6039      	str	r1, [r7, #0]
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	6a1b      	ldr	r3, [r3, #32]
 8016f5e:	617b      	str	r3, [r7, #20]
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	6a1b      	ldr	r3, [r3, #32]
 8016f64:	f023 0210 	bic.w	r2, r3, #16
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	621a      	str	r2, [r3, #32]
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	685b      	ldr	r3, [r3, #4]
 8016f70:	613b      	str	r3, [r7, #16]
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	699b      	ldr	r3, [r3, #24]
 8016f76:	60fb      	str	r3, [r7, #12]
 8016f78:	68fa      	ldr	r2, [r7, #12]
 8016f7a:	4b34      	ldr	r3, [pc, #208]	@ (801704c <TIM_OC2_SetConfig+0xfc>)
 8016f7c:	4013      	ands	r3, r2
 8016f7e:	60fb      	str	r3, [r7, #12]
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016f86:	60fb      	str	r3, [r7, #12]
 8016f88:	683b      	ldr	r3, [r7, #0]
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	021b      	lsls	r3, r3, #8
 8016f8e:	68fa      	ldr	r2, [r7, #12]
 8016f90:	4313      	orrs	r3, r2
 8016f92:	60fb      	str	r3, [r7, #12]
 8016f94:	697b      	ldr	r3, [r7, #20]
 8016f96:	f023 0320 	bic.w	r3, r3, #32
 8016f9a:	617b      	str	r3, [r7, #20]
 8016f9c:	683b      	ldr	r3, [r7, #0]
 8016f9e:	689b      	ldr	r3, [r3, #8]
 8016fa0:	011b      	lsls	r3, r3, #4
 8016fa2:	697a      	ldr	r2, [r7, #20]
 8016fa4:	4313      	orrs	r3, r2
 8016fa6:	617b      	str	r3, [r7, #20]
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	4a29      	ldr	r2, [pc, #164]	@ (8017050 <TIM_OC2_SetConfig+0x100>)
 8016fac:	4293      	cmp	r3, r2
 8016fae:	d003      	beq.n	8016fb8 <TIM_OC2_SetConfig+0x68>
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	4a28      	ldr	r2, [pc, #160]	@ (8017054 <TIM_OC2_SetConfig+0x104>)
 8016fb4:	4293      	cmp	r3, r2
 8016fb6:	d10d      	bne.n	8016fd4 <TIM_OC2_SetConfig+0x84>
 8016fb8:	697b      	ldr	r3, [r7, #20]
 8016fba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016fbe:	617b      	str	r3, [r7, #20]
 8016fc0:	683b      	ldr	r3, [r7, #0]
 8016fc2:	68db      	ldr	r3, [r3, #12]
 8016fc4:	011b      	lsls	r3, r3, #4
 8016fc6:	697a      	ldr	r2, [r7, #20]
 8016fc8:	4313      	orrs	r3, r2
 8016fca:	617b      	str	r3, [r7, #20]
 8016fcc:	697b      	ldr	r3, [r7, #20]
 8016fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016fd2:	617b      	str	r3, [r7, #20]
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8017050 <TIM_OC2_SetConfig+0x100>)
 8016fd8:	4293      	cmp	r3, r2
 8016fda:	d00f      	beq.n	8016ffc <TIM_OC2_SetConfig+0xac>
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	4a1d      	ldr	r2, [pc, #116]	@ (8017054 <TIM_OC2_SetConfig+0x104>)
 8016fe0:	4293      	cmp	r3, r2
 8016fe2:	d00b      	beq.n	8016ffc <TIM_OC2_SetConfig+0xac>
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8017058 <TIM_OC2_SetConfig+0x108>)
 8016fe8:	4293      	cmp	r3, r2
 8016fea:	d007      	beq.n	8016ffc <TIM_OC2_SetConfig+0xac>
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	4a1b      	ldr	r2, [pc, #108]	@ (801705c <TIM_OC2_SetConfig+0x10c>)
 8016ff0:	4293      	cmp	r3, r2
 8016ff2:	d003      	beq.n	8016ffc <TIM_OC2_SetConfig+0xac>
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	4a1a      	ldr	r2, [pc, #104]	@ (8017060 <TIM_OC2_SetConfig+0x110>)
 8016ff8:	4293      	cmp	r3, r2
 8016ffa:	d113      	bne.n	8017024 <TIM_OC2_SetConfig+0xd4>
 8016ffc:	693b      	ldr	r3, [r7, #16]
 8016ffe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8017002:	613b      	str	r3, [r7, #16]
 8017004:	693b      	ldr	r3, [r7, #16]
 8017006:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801700a:	613b      	str	r3, [r7, #16]
 801700c:	683b      	ldr	r3, [r7, #0]
 801700e:	695b      	ldr	r3, [r3, #20]
 8017010:	009b      	lsls	r3, r3, #2
 8017012:	693a      	ldr	r2, [r7, #16]
 8017014:	4313      	orrs	r3, r2
 8017016:	613b      	str	r3, [r7, #16]
 8017018:	683b      	ldr	r3, [r7, #0]
 801701a:	699b      	ldr	r3, [r3, #24]
 801701c:	009b      	lsls	r3, r3, #2
 801701e:	693a      	ldr	r2, [r7, #16]
 8017020:	4313      	orrs	r3, r2
 8017022:	613b      	str	r3, [r7, #16]
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	693a      	ldr	r2, [r7, #16]
 8017028:	605a      	str	r2, [r3, #4]
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	68fa      	ldr	r2, [r7, #12]
 801702e:	619a      	str	r2, [r3, #24]
 8017030:	683b      	ldr	r3, [r7, #0]
 8017032:	685a      	ldr	r2, [r3, #4]
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	639a      	str	r2, [r3, #56]	@ 0x38
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	697a      	ldr	r2, [r7, #20]
 801703c:	621a      	str	r2, [r3, #32]
 801703e:	bf00      	nop
 8017040:	371c      	adds	r7, #28
 8017042:	46bd      	mov	sp, r7
 8017044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017048:	4770      	bx	lr
 801704a:	bf00      	nop
 801704c:	feff8fff 	.word	0xfeff8fff
 8017050:	40010000 	.word	0x40010000
 8017054:	40010400 	.word	0x40010400
 8017058:	40014000 	.word	0x40014000
 801705c:	40014400 	.word	0x40014400
 8017060:	40014800 	.word	0x40014800

08017064 <TIM_OC3_SetConfig>:
 8017064:	b480      	push	{r7}
 8017066:	b087      	sub	sp, #28
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
 801706c:	6039      	str	r1, [r7, #0]
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	6a1b      	ldr	r3, [r3, #32]
 8017072:	617b      	str	r3, [r7, #20]
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	6a1b      	ldr	r3, [r3, #32]
 8017078:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	621a      	str	r2, [r3, #32]
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	685b      	ldr	r3, [r3, #4]
 8017084:	613b      	str	r3, [r7, #16]
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	69db      	ldr	r3, [r3, #28]
 801708a:	60fb      	str	r3, [r7, #12]
 801708c:	68fa      	ldr	r2, [r7, #12]
 801708e:	4b33      	ldr	r3, [pc, #204]	@ (801715c <TIM_OC3_SetConfig+0xf8>)
 8017090:	4013      	ands	r3, r2
 8017092:	60fb      	str	r3, [r7, #12]
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	f023 0303 	bic.w	r3, r3, #3
 801709a:	60fb      	str	r3, [r7, #12]
 801709c:	683b      	ldr	r3, [r7, #0]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	68fa      	ldr	r2, [r7, #12]
 80170a2:	4313      	orrs	r3, r2
 80170a4:	60fb      	str	r3, [r7, #12]
 80170a6:	697b      	ldr	r3, [r7, #20]
 80170a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80170ac:	617b      	str	r3, [r7, #20]
 80170ae:	683b      	ldr	r3, [r7, #0]
 80170b0:	689b      	ldr	r3, [r3, #8]
 80170b2:	021b      	lsls	r3, r3, #8
 80170b4:	697a      	ldr	r2, [r7, #20]
 80170b6:	4313      	orrs	r3, r2
 80170b8:	617b      	str	r3, [r7, #20]
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	4a28      	ldr	r2, [pc, #160]	@ (8017160 <TIM_OC3_SetConfig+0xfc>)
 80170be:	4293      	cmp	r3, r2
 80170c0:	d003      	beq.n	80170ca <TIM_OC3_SetConfig+0x66>
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	4a27      	ldr	r2, [pc, #156]	@ (8017164 <TIM_OC3_SetConfig+0x100>)
 80170c6:	4293      	cmp	r3, r2
 80170c8:	d10d      	bne.n	80170e6 <TIM_OC3_SetConfig+0x82>
 80170ca:	697b      	ldr	r3, [r7, #20]
 80170cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80170d0:	617b      	str	r3, [r7, #20]
 80170d2:	683b      	ldr	r3, [r7, #0]
 80170d4:	68db      	ldr	r3, [r3, #12]
 80170d6:	021b      	lsls	r3, r3, #8
 80170d8:	697a      	ldr	r2, [r7, #20]
 80170da:	4313      	orrs	r3, r2
 80170dc:	617b      	str	r3, [r7, #20]
 80170de:	697b      	ldr	r3, [r7, #20]
 80170e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80170e4:	617b      	str	r3, [r7, #20]
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	4a1d      	ldr	r2, [pc, #116]	@ (8017160 <TIM_OC3_SetConfig+0xfc>)
 80170ea:	4293      	cmp	r3, r2
 80170ec:	d00f      	beq.n	801710e <TIM_OC3_SetConfig+0xaa>
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	4a1c      	ldr	r2, [pc, #112]	@ (8017164 <TIM_OC3_SetConfig+0x100>)
 80170f2:	4293      	cmp	r3, r2
 80170f4:	d00b      	beq.n	801710e <TIM_OC3_SetConfig+0xaa>
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	4a1b      	ldr	r2, [pc, #108]	@ (8017168 <TIM_OC3_SetConfig+0x104>)
 80170fa:	4293      	cmp	r3, r2
 80170fc:	d007      	beq.n	801710e <TIM_OC3_SetConfig+0xaa>
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	4a1a      	ldr	r2, [pc, #104]	@ (801716c <TIM_OC3_SetConfig+0x108>)
 8017102:	4293      	cmp	r3, r2
 8017104:	d003      	beq.n	801710e <TIM_OC3_SetConfig+0xaa>
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	4a19      	ldr	r2, [pc, #100]	@ (8017170 <TIM_OC3_SetConfig+0x10c>)
 801710a:	4293      	cmp	r3, r2
 801710c:	d113      	bne.n	8017136 <TIM_OC3_SetConfig+0xd2>
 801710e:	693b      	ldr	r3, [r7, #16]
 8017110:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017114:	613b      	str	r3, [r7, #16]
 8017116:	693b      	ldr	r3, [r7, #16]
 8017118:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801711c:	613b      	str	r3, [r7, #16]
 801711e:	683b      	ldr	r3, [r7, #0]
 8017120:	695b      	ldr	r3, [r3, #20]
 8017122:	011b      	lsls	r3, r3, #4
 8017124:	693a      	ldr	r2, [r7, #16]
 8017126:	4313      	orrs	r3, r2
 8017128:	613b      	str	r3, [r7, #16]
 801712a:	683b      	ldr	r3, [r7, #0]
 801712c:	699b      	ldr	r3, [r3, #24]
 801712e:	011b      	lsls	r3, r3, #4
 8017130:	693a      	ldr	r2, [r7, #16]
 8017132:	4313      	orrs	r3, r2
 8017134:	613b      	str	r3, [r7, #16]
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	693a      	ldr	r2, [r7, #16]
 801713a:	605a      	str	r2, [r3, #4]
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	68fa      	ldr	r2, [r7, #12]
 8017140:	61da      	str	r2, [r3, #28]
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	685a      	ldr	r2, [r3, #4]
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	63da      	str	r2, [r3, #60]	@ 0x3c
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	697a      	ldr	r2, [r7, #20]
 801714e:	621a      	str	r2, [r3, #32]
 8017150:	bf00      	nop
 8017152:	371c      	adds	r7, #28
 8017154:	46bd      	mov	sp, r7
 8017156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801715a:	4770      	bx	lr
 801715c:	fffeff8f 	.word	0xfffeff8f
 8017160:	40010000 	.word	0x40010000
 8017164:	40010400 	.word	0x40010400
 8017168:	40014000 	.word	0x40014000
 801716c:	40014400 	.word	0x40014400
 8017170:	40014800 	.word	0x40014800

08017174 <TIM_OC4_SetConfig>:
 8017174:	b480      	push	{r7}
 8017176:	b087      	sub	sp, #28
 8017178:	af00      	add	r7, sp, #0
 801717a:	6078      	str	r0, [r7, #4]
 801717c:	6039      	str	r1, [r7, #0]
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	6a1b      	ldr	r3, [r3, #32]
 8017182:	613b      	str	r3, [r7, #16]
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	6a1b      	ldr	r3, [r3, #32]
 8017188:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	621a      	str	r2, [r3, #32]
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	685b      	ldr	r3, [r3, #4]
 8017194:	617b      	str	r3, [r7, #20]
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	69db      	ldr	r3, [r3, #28]
 801719a:	60fb      	str	r3, [r7, #12]
 801719c:	68fa      	ldr	r2, [r7, #12]
 801719e:	4b24      	ldr	r3, [pc, #144]	@ (8017230 <TIM_OC4_SetConfig+0xbc>)
 80171a0:	4013      	ands	r3, r2
 80171a2:	60fb      	str	r3, [r7, #12]
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80171aa:	60fb      	str	r3, [r7, #12]
 80171ac:	683b      	ldr	r3, [r7, #0]
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	021b      	lsls	r3, r3, #8
 80171b2:	68fa      	ldr	r2, [r7, #12]
 80171b4:	4313      	orrs	r3, r2
 80171b6:	60fb      	str	r3, [r7, #12]
 80171b8:	693b      	ldr	r3, [r7, #16]
 80171ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80171be:	613b      	str	r3, [r7, #16]
 80171c0:	683b      	ldr	r3, [r7, #0]
 80171c2:	689b      	ldr	r3, [r3, #8]
 80171c4:	031b      	lsls	r3, r3, #12
 80171c6:	693a      	ldr	r2, [r7, #16]
 80171c8:	4313      	orrs	r3, r2
 80171ca:	613b      	str	r3, [r7, #16]
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	4a19      	ldr	r2, [pc, #100]	@ (8017234 <TIM_OC4_SetConfig+0xc0>)
 80171d0:	4293      	cmp	r3, r2
 80171d2:	d00f      	beq.n	80171f4 <TIM_OC4_SetConfig+0x80>
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	4a18      	ldr	r2, [pc, #96]	@ (8017238 <TIM_OC4_SetConfig+0xc4>)
 80171d8:	4293      	cmp	r3, r2
 80171da:	d00b      	beq.n	80171f4 <TIM_OC4_SetConfig+0x80>
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	4a17      	ldr	r2, [pc, #92]	@ (801723c <TIM_OC4_SetConfig+0xc8>)
 80171e0:	4293      	cmp	r3, r2
 80171e2:	d007      	beq.n	80171f4 <TIM_OC4_SetConfig+0x80>
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	4a16      	ldr	r2, [pc, #88]	@ (8017240 <TIM_OC4_SetConfig+0xcc>)
 80171e8:	4293      	cmp	r3, r2
 80171ea:	d003      	beq.n	80171f4 <TIM_OC4_SetConfig+0x80>
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	4a15      	ldr	r2, [pc, #84]	@ (8017244 <TIM_OC4_SetConfig+0xd0>)
 80171f0:	4293      	cmp	r3, r2
 80171f2:	d109      	bne.n	8017208 <TIM_OC4_SetConfig+0x94>
 80171f4:	697b      	ldr	r3, [r7, #20]
 80171f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80171fa:	617b      	str	r3, [r7, #20]
 80171fc:	683b      	ldr	r3, [r7, #0]
 80171fe:	695b      	ldr	r3, [r3, #20]
 8017200:	019b      	lsls	r3, r3, #6
 8017202:	697a      	ldr	r2, [r7, #20]
 8017204:	4313      	orrs	r3, r2
 8017206:	617b      	str	r3, [r7, #20]
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	697a      	ldr	r2, [r7, #20]
 801720c:	605a      	str	r2, [r3, #4]
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	68fa      	ldr	r2, [r7, #12]
 8017212:	61da      	str	r2, [r3, #28]
 8017214:	683b      	ldr	r3, [r7, #0]
 8017216:	685a      	ldr	r2, [r3, #4]
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	641a      	str	r2, [r3, #64]	@ 0x40
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	693a      	ldr	r2, [r7, #16]
 8017220:	621a      	str	r2, [r3, #32]
 8017222:	bf00      	nop
 8017224:	371c      	adds	r7, #28
 8017226:	46bd      	mov	sp, r7
 8017228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801722c:	4770      	bx	lr
 801722e:	bf00      	nop
 8017230:	feff8fff 	.word	0xfeff8fff
 8017234:	40010000 	.word	0x40010000
 8017238:	40010400 	.word	0x40010400
 801723c:	40014000 	.word	0x40014000
 8017240:	40014400 	.word	0x40014400
 8017244:	40014800 	.word	0x40014800

08017248 <TIM_OC5_SetConfig>:
 8017248:	b480      	push	{r7}
 801724a:	b087      	sub	sp, #28
 801724c:	af00      	add	r7, sp, #0
 801724e:	6078      	str	r0, [r7, #4]
 8017250:	6039      	str	r1, [r7, #0]
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	6a1b      	ldr	r3, [r3, #32]
 8017256:	613b      	str	r3, [r7, #16]
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	6a1b      	ldr	r3, [r3, #32]
 801725c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	621a      	str	r2, [r3, #32]
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	685b      	ldr	r3, [r3, #4]
 8017268:	617b      	str	r3, [r7, #20]
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801726e:	60fb      	str	r3, [r7, #12]
 8017270:	68fa      	ldr	r2, [r7, #12]
 8017272:	4b21      	ldr	r3, [pc, #132]	@ (80172f8 <TIM_OC5_SetConfig+0xb0>)
 8017274:	4013      	ands	r3, r2
 8017276:	60fb      	str	r3, [r7, #12]
 8017278:	683b      	ldr	r3, [r7, #0]
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	68fa      	ldr	r2, [r7, #12]
 801727e:	4313      	orrs	r3, r2
 8017280:	60fb      	str	r3, [r7, #12]
 8017282:	693b      	ldr	r3, [r7, #16]
 8017284:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8017288:	613b      	str	r3, [r7, #16]
 801728a:	683b      	ldr	r3, [r7, #0]
 801728c:	689b      	ldr	r3, [r3, #8]
 801728e:	041b      	lsls	r3, r3, #16
 8017290:	693a      	ldr	r2, [r7, #16]
 8017292:	4313      	orrs	r3, r2
 8017294:	613b      	str	r3, [r7, #16]
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	4a18      	ldr	r2, [pc, #96]	@ (80172fc <TIM_OC5_SetConfig+0xb4>)
 801729a:	4293      	cmp	r3, r2
 801729c:	d00f      	beq.n	80172be <TIM_OC5_SetConfig+0x76>
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	4a17      	ldr	r2, [pc, #92]	@ (8017300 <TIM_OC5_SetConfig+0xb8>)
 80172a2:	4293      	cmp	r3, r2
 80172a4:	d00b      	beq.n	80172be <TIM_OC5_SetConfig+0x76>
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	4a16      	ldr	r2, [pc, #88]	@ (8017304 <TIM_OC5_SetConfig+0xbc>)
 80172aa:	4293      	cmp	r3, r2
 80172ac:	d007      	beq.n	80172be <TIM_OC5_SetConfig+0x76>
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	4a15      	ldr	r2, [pc, #84]	@ (8017308 <TIM_OC5_SetConfig+0xc0>)
 80172b2:	4293      	cmp	r3, r2
 80172b4:	d003      	beq.n	80172be <TIM_OC5_SetConfig+0x76>
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	4a14      	ldr	r2, [pc, #80]	@ (801730c <TIM_OC5_SetConfig+0xc4>)
 80172ba:	4293      	cmp	r3, r2
 80172bc:	d109      	bne.n	80172d2 <TIM_OC5_SetConfig+0x8a>
 80172be:	697b      	ldr	r3, [r7, #20]
 80172c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80172c4:	617b      	str	r3, [r7, #20]
 80172c6:	683b      	ldr	r3, [r7, #0]
 80172c8:	695b      	ldr	r3, [r3, #20]
 80172ca:	021b      	lsls	r3, r3, #8
 80172cc:	697a      	ldr	r2, [r7, #20]
 80172ce:	4313      	orrs	r3, r2
 80172d0:	617b      	str	r3, [r7, #20]
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	697a      	ldr	r2, [r7, #20]
 80172d6:	605a      	str	r2, [r3, #4]
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	68fa      	ldr	r2, [r7, #12]
 80172dc:	655a      	str	r2, [r3, #84]	@ 0x54
 80172de:	683b      	ldr	r3, [r7, #0]
 80172e0:	685a      	ldr	r2, [r3, #4]
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	693a      	ldr	r2, [r7, #16]
 80172ea:	621a      	str	r2, [r3, #32]
 80172ec:	bf00      	nop
 80172ee:	371c      	adds	r7, #28
 80172f0:	46bd      	mov	sp, r7
 80172f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172f6:	4770      	bx	lr
 80172f8:	fffeff8f 	.word	0xfffeff8f
 80172fc:	40010000 	.word	0x40010000
 8017300:	40010400 	.word	0x40010400
 8017304:	40014000 	.word	0x40014000
 8017308:	40014400 	.word	0x40014400
 801730c:	40014800 	.word	0x40014800

08017310 <TIM_OC6_SetConfig>:
 8017310:	b480      	push	{r7}
 8017312:	b087      	sub	sp, #28
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
 8017318:	6039      	str	r1, [r7, #0]
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	6a1b      	ldr	r3, [r3, #32]
 801731e:	613b      	str	r3, [r7, #16]
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	6a1b      	ldr	r3, [r3, #32]
 8017324:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	621a      	str	r2, [r3, #32]
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	685b      	ldr	r3, [r3, #4]
 8017330:	617b      	str	r3, [r7, #20]
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017336:	60fb      	str	r3, [r7, #12]
 8017338:	68fa      	ldr	r2, [r7, #12]
 801733a:	4b22      	ldr	r3, [pc, #136]	@ (80173c4 <TIM_OC6_SetConfig+0xb4>)
 801733c:	4013      	ands	r3, r2
 801733e:	60fb      	str	r3, [r7, #12]
 8017340:	683b      	ldr	r3, [r7, #0]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	021b      	lsls	r3, r3, #8
 8017346:	68fa      	ldr	r2, [r7, #12]
 8017348:	4313      	orrs	r3, r2
 801734a:	60fb      	str	r3, [r7, #12]
 801734c:	693b      	ldr	r3, [r7, #16]
 801734e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8017352:	613b      	str	r3, [r7, #16]
 8017354:	683b      	ldr	r3, [r7, #0]
 8017356:	689b      	ldr	r3, [r3, #8]
 8017358:	051b      	lsls	r3, r3, #20
 801735a:	693a      	ldr	r2, [r7, #16]
 801735c:	4313      	orrs	r3, r2
 801735e:	613b      	str	r3, [r7, #16]
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	4a19      	ldr	r2, [pc, #100]	@ (80173c8 <TIM_OC6_SetConfig+0xb8>)
 8017364:	4293      	cmp	r3, r2
 8017366:	d00f      	beq.n	8017388 <TIM_OC6_SetConfig+0x78>
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	4a18      	ldr	r2, [pc, #96]	@ (80173cc <TIM_OC6_SetConfig+0xbc>)
 801736c:	4293      	cmp	r3, r2
 801736e:	d00b      	beq.n	8017388 <TIM_OC6_SetConfig+0x78>
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	4a17      	ldr	r2, [pc, #92]	@ (80173d0 <TIM_OC6_SetConfig+0xc0>)
 8017374:	4293      	cmp	r3, r2
 8017376:	d007      	beq.n	8017388 <TIM_OC6_SetConfig+0x78>
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	4a16      	ldr	r2, [pc, #88]	@ (80173d4 <TIM_OC6_SetConfig+0xc4>)
 801737c:	4293      	cmp	r3, r2
 801737e:	d003      	beq.n	8017388 <TIM_OC6_SetConfig+0x78>
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	4a15      	ldr	r2, [pc, #84]	@ (80173d8 <TIM_OC6_SetConfig+0xc8>)
 8017384:	4293      	cmp	r3, r2
 8017386:	d109      	bne.n	801739c <TIM_OC6_SetConfig+0x8c>
 8017388:	697b      	ldr	r3, [r7, #20]
 801738a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801738e:	617b      	str	r3, [r7, #20]
 8017390:	683b      	ldr	r3, [r7, #0]
 8017392:	695b      	ldr	r3, [r3, #20]
 8017394:	029b      	lsls	r3, r3, #10
 8017396:	697a      	ldr	r2, [r7, #20]
 8017398:	4313      	orrs	r3, r2
 801739a:	617b      	str	r3, [r7, #20]
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	697a      	ldr	r2, [r7, #20]
 80173a0:	605a      	str	r2, [r3, #4]
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	68fa      	ldr	r2, [r7, #12]
 80173a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80173a8:	683b      	ldr	r3, [r7, #0]
 80173aa:	685a      	ldr	r2, [r3, #4]
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	693a      	ldr	r2, [r7, #16]
 80173b4:	621a      	str	r2, [r3, #32]
 80173b6:	bf00      	nop
 80173b8:	371c      	adds	r7, #28
 80173ba:	46bd      	mov	sp, r7
 80173bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c0:	4770      	bx	lr
 80173c2:	bf00      	nop
 80173c4:	feff8fff 	.word	0xfeff8fff
 80173c8:	40010000 	.word	0x40010000
 80173cc:	40010400 	.word	0x40010400
 80173d0:	40014000 	.word	0x40014000
 80173d4:	40014400 	.word	0x40014400
 80173d8:	40014800 	.word	0x40014800

080173dc <TIM_TI1_SetConfig>:
 80173dc:	b480      	push	{r7}
 80173de:	b087      	sub	sp, #28
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	60f8      	str	r0, [r7, #12]
 80173e4:	60b9      	str	r1, [r7, #8]
 80173e6:	607a      	str	r2, [r7, #4]
 80173e8:	603b      	str	r3, [r7, #0]
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	6a1b      	ldr	r3, [r3, #32]
 80173ee:	613b      	str	r3, [r7, #16]
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	6a1b      	ldr	r3, [r3, #32]
 80173f4:	f023 0201 	bic.w	r2, r3, #1
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	621a      	str	r2, [r3, #32]
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	699b      	ldr	r3, [r3, #24]
 8017400:	617b      	str	r3, [r7, #20]
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	4a2c      	ldr	r2, [pc, #176]	@ (80174b8 <TIM_TI1_SetConfig+0xdc>)
 8017406:	4293      	cmp	r3, r2
 8017408:	d023      	beq.n	8017452 <TIM_TI1_SetConfig+0x76>
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017410:	d01f      	beq.n	8017452 <TIM_TI1_SetConfig+0x76>
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	4a29      	ldr	r2, [pc, #164]	@ (80174bc <TIM_TI1_SetConfig+0xe0>)
 8017416:	4293      	cmp	r3, r2
 8017418:	d01b      	beq.n	8017452 <TIM_TI1_SetConfig+0x76>
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	4a28      	ldr	r2, [pc, #160]	@ (80174c0 <TIM_TI1_SetConfig+0xe4>)
 801741e:	4293      	cmp	r3, r2
 8017420:	d017      	beq.n	8017452 <TIM_TI1_SetConfig+0x76>
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	4a27      	ldr	r2, [pc, #156]	@ (80174c4 <TIM_TI1_SetConfig+0xe8>)
 8017426:	4293      	cmp	r3, r2
 8017428:	d013      	beq.n	8017452 <TIM_TI1_SetConfig+0x76>
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	4a26      	ldr	r2, [pc, #152]	@ (80174c8 <TIM_TI1_SetConfig+0xec>)
 801742e:	4293      	cmp	r3, r2
 8017430:	d00f      	beq.n	8017452 <TIM_TI1_SetConfig+0x76>
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	4a25      	ldr	r2, [pc, #148]	@ (80174cc <TIM_TI1_SetConfig+0xf0>)
 8017436:	4293      	cmp	r3, r2
 8017438:	d00b      	beq.n	8017452 <TIM_TI1_SetConfig+0x76>
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	4a24      	ldr	r2, [pc, #144]	@ (80174d0 <TIM_TI1_SetConfig+0xf4>)
 801743e:	4293      	cmp	r3, r2
 8017440:	d007      	beq.n	8017452 <TIM_TI1_SetConfig+0x76>
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	4a23      	ldr	r2, [pc, #140]	@ (80174d4 <TIM_TI1_SetConfig+0xf8>)
 8017446:	4293      	cmp	r3, r2
 8017448:	d003      	beq.n	8017452 <TIM_TI1_SetConfig+0x76>
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	4a22      	ldr	r2, [pc, #136]	@ (80174d8 <TIM_TI1_SetConfig+0xfc>)
 801744e:	4293      	cmp	r3, r2
 8017450:	d101      	bne.n	8017456 <TIM_TI1_SetConfig+0x7a>
 8017452:	2301      	movs	r3, #1
 8017454:	e000      	b.n	8017458 <TIM_TI1_SetConfig+0x7c>
 8017456:	2300      	movs	r3, #0
 8017458:	2b00      	cmp	r3, #0
 801745a:	d008      	beq.n	801746e <TIM_TI1_SetConfig+0x92>
 801745c:	697b      	ldr	r3, [r7, #20]
 801745e:	f023 0303 	bic.w	r3, r3, #3
 8017462:	617b      	str	r3, [r7, #20]
 8017464:	697a      	ldr	r2, [r7, #20]
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	4313      	orrs	r3, r2
 801746a:	617b      	str	r3, [r7, #20]
 801746c:	e003      	b.n	8017476 <TIM_TI1_SetConfig+0x9a>
 801746e:	697b      	ldr	r3, [r7, #20]
 8017470:	f043 0301 	orr.w	r3, r3, #1
 8017474:	617b      	str	r3, [r7, #20]
 8017476:	697b      	ldr	r3, [r7, #20]
 8017478:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801747c:	617b      	str	r3, [r7, #20]
 801747e:	683b      	ldr	r3, [r7, #0]
 8017480:	011b      	lsls	r3, r3, #4
 8017482:	b2db      	uxtb	r3, r3
 8017484:	697a      	ldr	r2, [r7, #20]
 8017486:	4313      	orrs	r3, r2
 8017488:	617b      	str	r3, [r7, #20]
 801748a:	693b      	ldr	r3, [r7, #16]
 801748c:	f023 030a 	bic.w	r3, r3, #10
 8017490:	613b      	str	r3, [r7, #16]
 8017492:	68bb      	ldr	r3, [r7, #8]
 8017494:	f003 030a 	and.w	r3, r3, #10
 8017498:	693a      	ldr	r2, [r7, #16]
 801749a:	4313      	orrs	r3, r2
 801749c:	613b      	str	r3, [r7, #16]
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	697a      	ldr	r2, [r7, #20]
 80174a2:	619a      	str	r2, [r3, #24]
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	693a      	ldr	r2, [r7, #16]
 80174a8:	621a      	str	r2, [r3, #32]
 80174aa:	bf00      	nop
 80174ac:	371c      	adds	r7, #28
 80174ae:	46bd      	mov	sp, r7
 80174b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b4:	4770      	bx	lr
 80174b6:	bf00      	nop
 80174b8:	40010000 	.word	0x40010000
 80174bc:	40000400 	.word	0x40000400
 80174c0:	40000800 	.word	0x40000800
 80174c4:	40000c00 	.word	0x40000c00
 80174c8:	40010400 	.word	0x40010400
 80174cc:	40001800 	.word	0x40001800
 80174d0:	40014000 	.word	0x40014000
 80174d4:	4000e000 	.word	0x4000e000
 80174d8:	4000e400 	.word	0x4000e400

080174dc <TIM_TI1_ConfigInputStage>:
 80174dc:	b480      	push	{r7}
 80174de:	b087      	sub	sp, #28
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	60f8      	str	r0, [r7, #12]
 80174e4:	60b9      	str	r1, [r7, #8]
 80174e6:	607a      	str	r2, [r7, #4]
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	6a1b      	ldr	r3, [r3, #32]
 80174ec:	617b      	str	r3, [r7, #20]
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	6a1b      	ldr	r3, [r3, #32]
 80174f2:	f023 0201 	bic.w	r2, r3, #1
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	621a      	str	r2, [r3, #32]
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	699b      	ldr	r3, [r3, #24]
 80174fe:	613b      	str	r3, [r7, #16]
 8017500:	693b      	ldr	r3, [r7, #16]
 8017502:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017506:	613b      	str	r3, [r7, #16]
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	011b      	lsls	r3, r3, #4
 801750c:	693a      	ldr	r2, [r7, #16]
 801750e:	4313      	orrs	r3, r2
 8017510:	613b      	str	r3, [r7, #16]
 8017512:	697b      	ldr	r3, [r7, #20]
 8017514:	f023 030a 	bic.w	r3, r3, #10
 8017518:	617b      	str	r3, [r7, #20]
 801751a:	697a      	ldr	r2, [r7, #20]
 801751c:	68bb      	ldr	r3, [r7, #8]
 801751e:	4313      	orrs	r3, r2
 8017520:	617b      	str	r3, [r7, #20]
 8017522:	68fb      	ldr	r3, [r7, #12]
 8017524:	693a      	ldr	r2, [r7, #16]
 8017526:	619a      	str	r2, [r3, #24]
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	697a      	ldr	r2, [r7, #20]
 801752c:	621a      	str	r2, [r3, #32]
 801752e:	bf00      	nop
 8017530:	371c      	adds	r7, #28
 8017532:	46bd      	mov	sp, r7
 8017534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017538:	4770      	bx	lr

0801753a <TIM_TI2_SetConfig>:
 801753a:	b480      	push	{r7}
 801753c:	b087      	sub	sp, #28
 801753e:	af00      	add	r7, sp, #0
 8017540:	60f8      	str	r0, [r7, #12]
 8017542:	60b9      	str	r1, [r7, #8]
 8017544:	607a      	str	r2, [r7, #4]
 8017546:	603b      	str	r3, [r7, #0]
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	6a1b      	ldr	r3, [r3, #32]
 801754c:	617b      	str	r3, [r7, #20]
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	6a1b      	ldr	r3, [r3, #32]
 8017552:	f023 0210 	bic.w	r2, r3, #16
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	621a      	str	r2, [r3, #32]
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	699b      	ldr	r3, [r3, #24]
 801755e:	613b      	str	r3, [r7, #16]
 8017560:	693b      	ldr	r3, [r7, #16]
 8017562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017566:	613b      	str	r3, [r7, #16]
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	021b      	lsls	r3, r3, #8
 801756c:	693a      	ldr	r2, [r7, #16]
 801756e:	4313      	orrs	r3, r2
 8017570:	613b      	str	r3, [r7, #16]
 8017572:	693b      	ldr	r3, [r7, #16]
 8017574:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017578:	613b      	str	r3, [r7, #16]
 801757a:	683b      	ldr	r3, [r7, #0]
 801757c:	031b      	lsls	r3, r3, #12
 801757e:	b29b      	uxth	r3, r3
 8017580:	693a      	ldr	r2, [r7, #16]
 8017582:	4313      	orrs	r3, r2
 8017584:	613b      	str	r3, [r7, #16]
 8017586:	697b      	ldr	r3, [r7, #20]
 8017588:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801758c:	617b      	str	r3, [r7, #20]
 801758e:	68bb      	ldr	r3, [r7, #8]
 8017590:	011b      	lsls	r3, r3, #4
 8017592:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8017596:	697a      	ldr	r2, [r7, #20]
 8017598:	4313      	orrs	r3, r2
 801759a:	617b      	str	r3, [r7, #20]
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	693a      	ldr	r2, [r7, #16]
 80175a0:	619a      	str	r2, [r3, #24]
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	697a      	ldr	r2, [r7, #20]
 80175a6:	621a      	str	r2, [r3, #32]
 80175a8:	bf00      	nop
 80175aa:	371c      	adds	r7, #28
 80175ac:	46bd      	mov	sp, r7
 80175ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b2:	4770      	bx	lr

080175b4 <TIM_TI2_ConfigInputStage>:
 80175b4:	b480      	push	{r7}
 80175b6:	b087      	sub	sp, #28
 80175b8:	af00      	add	r7, sp, #0
 80175ba:	60f8      	str	r0, [r7, #12]
 80175bc:	60b9      	str	r1, [r7, #8]
 80175be:	607a      	str	r2, [r7, #4]
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	6a1b      	ldr	r3, [r3, #32]
 80175c4:	617b      	str	r3, [r7, #20]
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	6a1b      	ldr	r3, [r3, #32]
 80175ca:	f023 0210 	bic.w	r2, r3, #16
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	621a      	str	r2, [r3, #32]
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	699b      	ldr	r3, [r3, #24]
 80175d6:	613b      	str	r3, [r7, #16]
 80175d8:	693b      	ldr	r3, [r7, #16]
 80175da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80175de:	613b      	str	r3, [r7, #16]
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	031b      	lsls	r3, r3, #12
 80175e4:	693a      	ldr	r2, [r7, #16]
 80175e6:	4313      	orrs	r3, r2
 80175e8:	613b      	str	r3, [r7, #16]
 80175ea:	697b      	ldr	r3, [r7, #20]
 80175ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80175f0:	617b      	str	r3, [r7, #20]
 80175f2:	68bb      	ldr	r3, [r7, #8]
 80175f4:	011b      	lsls	r3, r3, #4
 80175f6:	697a      	ldr	r2, [r7, #20]
 80175f8:	4313      	orrs	r3, r2
 80175fa:	617b      	str	r3, [r7, #20]
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	693a      	ldr	r2, [r7, #16]
 8017600:	619a      	str	r2, [r3, #24]
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	697a      	ldr	r2, [r7, #20]
 8017606:	621a      	str	r2, [r3, #32]
 8017608:	bf00      	nop
 801760a:	371c      	adds	r7, #28
 801760c:	46bd      	mov	sp, r7
 801760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017612:	4770      	bx	lr

08017614 <TIM_TI3_SetConfig>:
 8017614:	b480      	push	{r7}
 8017616:	b087      	sub	sp, #28
 8017618:	af00      	add	r7, sp, #0
 801761a:	60f8      	str	r0, [r7, #12]
 801761c:	60b9      	str	r1, [r7, #8]
 801761e:	607a      	str	r2, [r7, #4]
 8017620:	603b      	str	r3, [r7, #0]
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	6a1b      	ldr	r3, [r3, #32]
 8017626:	617b      	str	r3, [r7, #20]
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	6a1b      	ldr	r3, [r3, #32]
 801762c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	621a      	str	r2, [r3, #32]
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	69db      	ldr	r3, [r3, #28]
 8017638:	613b      	str	r3, [r7, #16]
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	f023 0303 	bic.w	r3, r3, #3
 8017640:	613b      	str	r3, [r7, #16]
 8017642:	693a      	ldr	r2, [r7, #16]
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	4313      	orrs	r3, r2
 8017648:	613b      	str	r3, [r7, #16]
 801764a:	693b      	ldr	r3, [r7, #16]
 801764c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017650:	613b      	str	r3, [r7, #16]
 8017652:	683b      	ldr	r3, [r7, #0]
 8017654:	011b      	lsls	r3, r3, #4
 8017656:	b2db      	uxtb	r3, r3
 8017658:	693a      	ldr	r2, [r7, #16]
 801765a:	4313      	orrs	r3, r2
 801765c:	613b      	str	r3, [r7, #16]
 801765e:	697b      	ldr	r3, [r7, #20]
 8017660:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8017664:	617b      	str	r3, [r7, #20]
 8017666:	68bb      	ldr	r3, [r7, #8]
 8017668:	021b      	lsls	r3, r3, #8
 801766a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 801766e:	697a      	ldr	r2, [r7, #20]
 8017670:	4313      	orrs	r3, r2
 8017672:	617b      	str	r3, [r7, #20]
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	693a      	ldr	r2, [r7, #16]
 8017678:	61da      	str	r2, [r3, #28]
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	697a      	ldr	r2, [r7, #20]
 801767e:	621a      	str	r2, [r3, #32]
 8017680:	bf00      	nop
 8017682:	371c      	adds	r7, #28
 8017684:	46bd      	mov	sp, r7
 8017686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801768a:	4770      	bx	lr

0801768c <TIM_TI4_SetConfig>:
 801768c:	b480      	push	{r7}
 801768e:	b087      	sub	sp, #28
 8017690:	af00      	add	r7, sp, #0
 8017692:	60f8      	str	r0, [r7, #12]
 8017694:	60b9      	str	r1, [r7, #8]
 8017696:	607a      	str	r2, [r7, #4]
 8017698:	603b      	str	r3, [r7, #0]
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	6a1b      	ldr	r3, [r3, #32]
 801769e:	617b      	str	r3, [r7, #20]
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	6a1b      	ldr	r3, [r3, #32]
 80176a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	621a      	str	r2, [r3, #32]
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	69db      	ldr	r3, [r3, #28]
 80176b0:	613b      	str	r3, [r7, #16]
 80176b2:	693b      	ldr	r3, [r7, #16]
 80176b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80176b8:	613b      	str	r3, [r7, #16]
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	021b      	lsls	r3, r3, #8
 80176be:	693a      	ldr	r2, [r7, #16]
 80176c0:	4313      	orrs	r3, r2
 80176c2:	613b      	str	r3, [r7, #16]
 80176c4:	693b      	ldr	r3, [r7, #16]
 80176c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80176ca:	613b      	str	r3, [r7, #16]
 80176cc:	683b      	ldr	r3, [r7, #0]
 80176ce:	031b      	lsls	r3, r3, #12
 80176d0:	b29b      	uxth	r3, r3
 80176d2:	693a      	ldr	r2, [r7, #16]
 80176d4:	4313      	orrs	r3, r2
 80176d6:	613b      	str	r3, [r7, #16]
 80176d8:	697b      	ldr	r3, [r7, #20]
 80176da:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80176de:	617b      	str	r3, [r7, #20]
 80176e0:	68bb      	ldr	r3, [r7, #8]
 80176e2:	031b      	lsls	r3, r3, #12
 80176e4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80176e8:	697a      	ldr	r2, [r7, #20]
 80176ea:	4313      	orrs	r3, r2
 80176ec:	617b      	str	r3, [r7, #20]
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	693a      	ldr	r2, [r7, #16]
 80176f2:	61da      	str	r2, [r3, #28]
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	697a      	ldr	r2, [r7, #20]
 80176f8:	621a      	str	r2, [r3, #32]
 80176fa:	bf00      	nop
 80176fc:	371c      	adds	r7, #28
 80176fe:	46bd      	mov	sp, r7
 8017700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017704:	4770      	bx	lr
	...

08017708 <TIM_ITRx_SetConfig>:
 8017708:	b480      	push	{r7}
 801770a:	b085      	sub	sp, #20
 801770c:	af00      	add	r7, sp, #0
 801770e:	6078      	str	r0, [r7, #4]
 8017710:	6039      	str	r1, [r7, #0]
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	689b      	ldr	r3, [r3, #8]
 8017716:	60fb      	str	r3, [r7, #12]
 8017718:	68fa      	ldr	r2, [r7, #12]
 801771a:	4b09      	ldr	r3, [pc, #36]	@ (8017740 <TIM_ITRx_SetConfig+0x38>)
 801771c:	4013      	ands	r3, r2
 801771e:	60fb      	str	r3, [r7, #12]
 8017720:	683a      	ldr	r2, [r7, #0]
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	4313      	orrs	r3, r2
 8017726:	f043 0307 	orr.w	r3, r3, #7
 801772a:	60fb      	str	r3, [r7, #12]
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	68fa      	ldr	r2, [r7, #12]
 8017730:	609a      	str	r2, [r3, #8]
 8017732:	bf00      	nop
 8017734:	3714      	adds	r7, #20
 8017736:	46bd      	mov	sp, r7
 8017738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801773c:	4770      	bx	lr
 801773e:	bf00      	nop
 8017740:	ffcfff8f 	.word	0xffcfff8f

08017744 <TIM_ETR_SetConfig>:
 8017744:	b480      	push	{r7}
 8017746:	b087      	sub	sp, #28
 8017748:	af00      	add	r7, sp, #0
 801774a:	60f8      	str	r0, [r7, #12]
 801774c:	60b9      	str	r1, [r7, #8]
 801774e:	607a      	str	r2, [r7, #4]
 8017750:	603b      	str	r3, [r7, #0]
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	689b      	ldr	r3, [r3, #8]
 8017756:	617b      	str	r3, [r7, #20]
 8017758:	697b      	ldr	r3, [r7, #20]
 801775a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801775e:	617b      	str	r3, [r7, #20]
 8017760:	683b      	ldr	r3, [r7, #0]
 8017762:	021a      	lsls	r2, r3, #8
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	431a      	orrs	r2, r3
 8017768:	68bb      	ldr	r3, [r7, #8]
 801776a:	4313      	orrs	r3, r2
 801776c:	697a      	ldr	r2, [r7, #20]
 801776e:	4313      	orrs	r3, r2
 8017770:	617b      	str	r3, [r7, #20]
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	697a      	ldr	r2, [r7, #20]
 8017776:	609a      	str	r2, [r3, #8]
 8017778:	bf00      	nop
 801777a:	371c      	adds	r7, #28
 801777c:	46bd      	mov	sp, r7
 801777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017782:	4770      	bx	lr

08017784 <TIM_CCxChannelCmd>:
 8017784:	b480      	push	{r7}
 8017786:	b087      	sub	sp, #28
 8017788:	af00      	add	r7, sp, #0
 801778a:	60f8      	str	r0, [r7, #12]
 801778c:	60b9      	str	r1, [r7, #8]
 801778e:	607a      	str	r2, [r7, #4]
 8017790:	68bb      	ldr	r3, [r7, #8]
 8017792:	f003 031f 	and.w	r3, r3, #31
 8017796:	2201      	movs	r2, #1
 8017798:	fa02 f303 	lsl.w	r3, r2, r3
 801779c:	617b      	str	r3, [r7, #20]
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	6a1a      	ldr	r2, [r3, #32]
 80177a2:	697b      	ldr	r3, [r7, #20]
 80177a4:	43db      	mvns	r3, r3
 80177a6:	401a      	ands	r2, r3
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	621a      	str	r2, [r3, #32]
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	6a1a      	ldr	r2, [r3, #32]
 80177b0:	68bb      	ldr	r3, [r7, #8]
 80177b2:	f003 031f 	and.w	r3, r3, #31
 80177b6:	6879      	ldr	r1, [r7, #4]
 80177b8:	fa01 f303 	lsl.w	r3, r1, r3
 80177bc:	431a      	orrs	r2, r3
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	621a      	str	r2, [r3, #32]
 80177c2:	bf00      	nop
 80177c4:	371c      	adds	r7, #28
 80177c6:	46bd      	mov	sp, r7
 80177c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177cc:	4770      	bx	lr
	...

080177d0 <HAL_TIMEx_MasterConfigSynchronization>:
 80177d0:	b480      	push	{r7}
 80177d2:	b085      	sub	sp, #20
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	6078      	str	r0, [r7, #4]
 80177d8:	6039      	str	r1, [r7, #0]
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80177e0:	2b01      	cmp	r3, #1
 80177e2:	d101      	bne.n	80177e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80177e4:	2302      	movs	r3, #2
 80177e6:	e077      	b.n	80178d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	2201      	movs	r2, #1
 80177ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	2202      	movs	r2, #2
 80177f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	685b      	ldr	r3, [r3, #4]
 80177fe:	60fb      	str	r3, [r7, #12]
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	689b      	ldr	r3, [r3, #8]
 8017806:	60bb      	str	r3, [r7, #8]
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	4a35      	ldr	r2, [pc, #212]	@ (80178e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801780e:	4293      	cmp	r3, r2
 8017810:	d004      	beq.n	801781c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	4a34      	ldr	r2, [pc, #208]	@ (80178e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017818:	4293      	cmp	r3, r2
 801781a:	d108      	bne.n	801782e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8017822:	60fb      	str	r3, [r7, #12]
 8017824:	683b      	ldr	r3, [r7, #0]
 8017826:	685b      	ldr	r3, [r3, #4]
 8017828:	68fa      	ldr	r2, [r7, #12]
 801782a:	4313      	orrs	r3, r2
 801782c:	60fb      	str	r3, [r7, #12]
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017834:	60fb      	str	r3, [r7, #12]
 8017836:	683b      	ldr	r3, [r7, #0]
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	68fa      	ldr	r2, [r7, #12]
 801783c:	4313      	orrs	r3, r2
 801783e:	60fb      	str	r3, [r7, #12]
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	68fa      	ldr	r2, [r7, #12]
 8017846:	605a      	str	r2, [r3, #4]
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	4a25      	ldr	r2, [pc, #148]	@ (80178e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801784e:	4293      	cmp	r3, r2
 8017850:	d02c      	beq.n	80178ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801785a:	d027      	beq.n	80178ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	4a22      	ldr	r2, [pc, #136]	@ (80178ec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8017862:	4293      	cmp	r3, r2
 8017864:	d022      	beq.n	80178ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	4a21      	ldr	r2, [pc, #132]	@ (80178f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 801786c:	4293      	cmp	r3, r2
 801786e:	d01d      	beq.n	80178ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	4a1f      	ldr	r2, [pc, #124]	@ (80178f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8017876:	4293      	cmp	r3, r2
 8017878:	d018      	beq.n	80178ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	4a1a      	ldr	r2, [pc, #104]	@ (80178e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017880:	4293      	cmp	r3, r2
 8017882:	d013      	beq.n	80178ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	4a1b      	ldr	r2, [pc, #108]	@ (80178f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801788a:	4293      	cmp	r3, r2
 801788c:	d00e      	beq.n	80178ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	4a1a      	ldr	r2, [pc, #104]	@ (80178fc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8017894:	4293      	cmp	r3, r2
 8017896:	d009      	beq.n	80178ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	4a18      	ldr	r2, [pc, #96]	@ (8017900 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801789e:	4293      	cmp	r3, r2
 80178a0:	d004      	beq.n	80178ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	4a17      	ldr	r2, [pc, #92]	@ (8017904 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80178a8:	4293      	cmp	r3, r2
 80178aa:	d10c      	bne.n	80178c6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
 80178ac:	68bb      	ldr	r3, [r7, #8]
 80178ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80178b2:	60bb      	str	r3, [r7, #8]
 80178b4:	683b      	ldr	r3, [r7, #0]
 80178b6:	689b      	ldr	r3, [r3, #8]
 80178b8:	68ba      	ldr	r2, [r7, #8]
 80178ba:	4313      	orrs	r3, r2
 80178bc:	60bb      	str	r3, [r7, #8]
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	68ba      	ldr	r2, [r7, #8]
 80178c4:	609a      	str	r2, [r3, #8]
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	2201      	movs	r2, #1
 80178ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	2200      	movs	r2, #0
 80178d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80178d6:	2300      	movs	r3, #0
 80178d8:	4618      	mov	r0, r3
 80178da:	3714      	adds	r7, #20
 80178dc:	46bd      	mov	sp, r7
 80178de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e2:	4770      	bx	lr
 80178e4:	40010000 	.word	0x40010000
 80178e8:	40010400 	.word	0x40010400
 80178ec:	40000400 	.word	0x40000400
 80178f0:	40000800 	.word	0x40000800
 80178f4:	40000c00 	.word	0x40000c00
 80178f8:	40001800 	.word	0x40001800
 80178fc:	40014000 	.word	0x40014000
 8017900:	4000e000 	.word	0x4000e000
 8017904:	4000e400 	.word	0x4000e400

08017908 <HAL_TIMEx_ConfigBreakDeadTime>:
 8017908:	b480      	push	{r7}
 801790a:	b085      	sub	sp, #20
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
 8017910:	6039      	str	r1, [r7, #0]
 8017912:	2300      	movs	r3, #0
 8017914:	60fb      	str	r3, [r7, #12]
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801791c:	2b01      	cmp	r3, #1
 801791e:	d101      	bne.n	8017924 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017920:	2302      	movs	r3, #2
 8017922:	e073      	b.n	8017a0c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	2201      	movs	r2, #1
 8017928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8017932:	683b      	ldr	r3, [r7, #0]
 8017934:	68db      	ldr	r3, [r3, #12]
 8017936:	4313      	orrs	r3, r2
 8017938:	60fb      	str	r3, [r7, #12]
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017940:	683b      	ldr	r3, [r7, #0]
 8017942:	689b      	ldr	r3, [r3, #8]
 8017944:	4313      	orrs	r3, r2
 8017946:	60fb      	str	r3, [r7, #12]
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801794e:	683b      	ldr	r3, [r7, #0]
 8017950:	685b      	ldr	r3, [r3, #4]
 8017952:	4313      	orrs	r3, r2
 8017954:	60fb      	str	r3, [r7, #12]
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801795c:	683b      	ldr	r3, [r7, #0]
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	4313      	orrs	r3, r2
 8017962:	60fb      	str	r3, [r7, #12]
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801796a:	683b      	ldr	r3, [r7, #0]
 801796c:	691b      	ldr	r3, [r3, #16]
 801796e:	4313      	orrs	r3, r2
 8017970:	60fb      	str	r3, [r7, #12]
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8017978:	683b      	ldr	r3, [r7, #0]
 801797a:	695b      	ldr	r3, [r3, #20]
 801797c:	4313      	orrs	r3, r2
 801797e:	60fb      	str	r3, [r7, #12]
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8017986:	683b      	ldr	r3, [r7, #0]
 8017988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801798a:	4313      	orrs	r3, r2
 801798c:	60fb      	str	r3, [r7, #12]
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8017994:	683b      	ldr	r3, [r7, #0]
 8017996:	699b      	ldr	r3, [r3, #24]
 8017998:	041b      	lsls	r3, r3, #16
 801799a:	4313      	orrs	r3, r2
 801799c:	60fb      	str	r3, [r7, #12]
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80179a4:	683b      	ldr	r3, [r7, #0]
 80179a6:	69db      	ldr	r3, [r3, #28]
 80179a8:	4313      	orrs	r3, r2
 80179aa:	60fb      	str	r3, [r7, #12]
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	4a19      	ldr	r2, [pc, #100]	@ (8017a18 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80179b2:	4293      	cmp	r3, r2
 80179b4:	d004      	beq.n	80179c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	4a18      	ldr	r2, [pc, #96]	@ (8017a1c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80179bc:	4293      	cmp	r3, r2
 80179be:	d11c      	bne.n	80179fa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80179c6:	683b      	ldr	r3, [r7, #0]
 80179c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80179ca:	051b      	lsls	r3, r3, #20
 80179cc:	4313      	orrs	r3, r2
 80179ce:	60fb      	str	r3, [r7, #12]
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80179d6:	683b      	ldr	r3, [r7, #0]
 80179d8:	6a1b      	ldr	r3, [r3, #32]
 80179da:	4313      	orrs	r3, r2
 80179dc:	60fb      	str	r3, [r7, #12]
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80179e4:	683b      	ldr	r3, [r7, #0]
 80179e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80179e8:	4313      	orrs	r3, r2
 80179ea:	60fb      	str	r3, [r7, #12]
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80179f2:	683b      	ldr	r3, [r7, #0]
 80179f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80179f6:	4313      	orrs	r3, r2
 80179f8:	60fb      	str	r3, [r7, #12]
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	68fa      	ldr	r2, [r7, #12]
 8017a00:	645a      	str	r2, [r3, #68]	@ 0x44
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	2200      	movs	r2, #0
 8017a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	3714      	adds	r7, #20
 8017a10:	46bd      	mov	sp, r7
 8017a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a16:	4770      	bx	lr
 8017a18:	40010000 	.word	0x40010000
 8017a1c:	40010400 	.word	0x40010400

08017a20 <HAL_TIMEx_CommutCallback>:
 8017a20:	b480      	push	{r7}
 8017a22:	b083      	sub	sp, #12
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	6078      	str	r0, [r7, #4]
 8017a28:	bf00      	nop
 8017a2a:	370c      	adds	r7, #12
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a32:	4770      	bx	lr

08017a34 <HAL_TIMEx_BreakCallback>:
 8017a34:	b480      	push	{r7}
 8017a36:	b083      	sub	sp, #12
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	6078      	str	r0, [r7, #4]
 8017a3c:	bf00      	nop
 8017a3e:	370c      	adds	r7, #12
 8017a40:	46bd      	mov	sp, r7
 8017a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a46:	4770      	bx	lr

08017a48 <HAL_TIMEx_Break2Callback>:
 8017a48:	b480      	push	{r7}
 8017a4a:	b083      	sub	sp, #12
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	6078      	str	r0, [r7, #4]
 8017a50:	bf00      	nop
 8017a52:	370c      	adds	r7, #12
 8017a54:	46bd      	mov	sp, r7
 8017a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a5a:	4770      	bx	lr

08017a5c <HAL_UART_Init>:
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b082      	sub	sp, #8
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d101      	bne.n	8017a6e <HAL_UART_Init+0x12>
 8017a6a:	2301      	movs	r3, #1
 8017a6c:	e042      	b.n	8017af4 <HAL_UART_Init+0x98>
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d106      	bne.n	8017a86 <HAL_UART_Init+0x2a>
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	2200      	movs	r2, #0
 8017a7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8017a80:	6878      	ldr	r0, [r7, #4]
 8017a82:	f7f1 fa01 	bl	8008e88 <HAL_UART_MspInit>
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	2224      	movs	r2, #36	@ 0x24
 8017a8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	681a      	ldr	r2, [r3, #0]
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	f022 0201 	bic.w	r2, r2, #1
 8017a9c:	601a      	str	r2, [r3, #0]
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d002      	beq.n	8017aac <HAL_UART_Init+0x50>
 8017aa6:	6878      	ldr	r0, [r7, #4]
 8017aa8:	f001 fbdc 	bl	8019264 <UART_AdvFeatureConfig>
 8017aac:	6878      	ldr	r0, [r7, #4]
 8017aae:	f000 fd6d 	bl	801858c <UART_SetConfig>
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	2b01      	cmp	r3, #1
 8017ab6:	d101      	bne.n	8017abc <HAL_UART_Init+0x60>
 8017ab8:	2301      	movs	r3, #1
 8017aba:	e01b      	b.n	8017af4 <HAL_UART_Init+0x98>
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	685a      	ldr	r2, [r3, #4]
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017aca:	605a      	str	r2, [r3, #4]
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	689a      	ldr	r2, [r3, #8]
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017ada:	609a      	str	r2, [r3, #8]
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	681a      	ldr	r2, [r3, #0]
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	f042 0201 	orr.w	r2, r2, #1
 8017aea:	601a      	str	r2, [r3, #0]
 8017aec:	6878      	ldr	r0, [r7, #4]
 8017aee:	f001 fc5b 	bl	80193a8 <UART_CheckIdleState>
 8017af2:	4603      	mov	r3, r0
 8017af4:	4618      	mov	r0, r3
 8017af6:	3708      	adds	r7, #8
 8017af8:	46bd      	mov	sp, r7
 8017afa:	bd80      	pop	{r7, pc}

08017afc <HAL_UART_Transmit>:
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b08a      	sub	sp, #40	@ 0x28
 8017b00:	af02      	add	r7, sp, #8
 8017b02:	60f8      	str	r0, [r7, #12]
 8017b04:	60b9      	str	r1, [r7, #8]
 8017b06:	603b      	str	r3, [r7, #0]
 8017b08:	4613      	mov	r3, r2
 8017b0a:	80fb      	strh	r3, [r7, #6]
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017b12:	2b20      	cmp	r3, #32
 8017b14:	d17b      	bne.n	8017c0e <HAL_UART_Transmit+0x112>
 8017b16:	68bb      	ldr	r3, [r7, #8]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d002      	beq.n	8017b22 <HAL_UART_Transmit+0x26>
 8017b1c:	88fb      	ldrh	r3, [r7, #6]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d101      	bne.n	8017b26 <HAL_UART_Transmit+0x2a>
 8017b22:	2301      	movs	r3, #1
 8017b24:	e074      	b.n	8017c10 <HAL_UART_Transmit+0x114>
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	2200      	movs	r2, #0
 8017b2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	2221      	movs	r2, #33	@ 0x21
 8017b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8017b36:	f7f1 fac9 	bl	80090cc <HAL_GetTick>
 8017b3a:	6178      	str	r0, [r7, #20]
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	88fa      	ldrh	r2, [r7, #6]
 8017b40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	88fa      	ldrh	r2, [r7, #6]
 8017b48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	689b      	ldr	r3, [r3, #8]
 8017b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017b54:	d108      	bne.n	8017b68 <HAL_UART_Transmit+0x6c>
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	691b      	ldr	r3, [r3, #16]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d104      	bne.n	8017b68 <HAL_UART_Transmit+0x6c>
 8017b5e:	2300      	movs	r3, #0
 8017b60:	61fb      	str	r3, [r7, #28]
 8017b62:	68bb      	ldr	r3, [r7, #8]
 8017b64:	61bb      	str	r3, [r7, #24]
 8017b66:	e003      	b.n	8017b70 <HAL_UART_Transmit+0x74>
 8017b68:	68bb      	ldr	r3, [r7, #8]
 8017b6a:	61fb      	str	r3, [r7, #28]
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	61bb      	str	r3, [r7, #24]
 8017b70:	e030      	b.n	8017bd4 <HAL_UART_Transmit+0xd8>
 8017b72:	683b      	ldr	r3, [r7, #0]
 8017b74:	9300      	str	r3, [sp, #0]
 8017b76:	697b      	ldr	r3, [r7, #20]
 8017b78:	2200      	movs	r2, #0
 8017b7a:	2180      	movs	r1, #128	@ 0x80
 8017b7c:	68f8      	ldr	r0, [r7, #12]
 8017b7e:	f001 fcbd 	bl	80194fc <UART_WaitOnFlagUntilTimeout>
 8017b82:	4603      	mov	r3, r0
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d005      	beq.n	8017b94 <HAL_UART_Transmit+0x98>
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	2220      	movs	r2, #32
 8017b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8017b90:	2303      	movs	r3, #3
 8017b92:	e03d      	b.n	8017c10 <HAL_UART_Transmit+0x114>
 8017b94:	69fb      	ldr	r3, [r7, #28]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d10b      	bne.n	8017bb2 <HAL_UART_Transmit+0xb6>
 8017b9a:	69bb      	ldr	r3, [r7, #24]
 8017b9c:	881b      	ldrh	r3, [r3, #0]
 8017b9e:	461a      	mov	r2, r3
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017ba8:	629a      	str	r2, [r3, #40]	@ 0x28
 8017baa:	69bb      	ldr	r3, [r7, #24]
 8017bac:	3302      	adds	r3, #2
 8017bae:	61bb      	str	r3, [r7, #24]
 8017bb0:	e007      	b.n	8017bc2 <HAL_UART_Transmit+0xc6>
 8017bb2:	69fb      	ldr	r3, [r7, #28]
 8017bb4:	781a      	ldrb	r2, [r3, #0]
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	629a      	str	r2, [r3, #40]	@ 0x28
 8017bbc:	69fb      	ldr	r3, [r7, #28]
 8017bbe:	3301      	adds	r3, #1
 8017bc0:	61fb      	str	r3, [r7, #28]
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017bc8:	b29b      	uxth	r3, r3
 8017bca:	3b01      	subs	r3, #1
 8017bcc:	b29a      	uxth	r2, r3
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017bda:	b29b      	uxth	r3, r3
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d1c8      	bne.n	8017b72 <HAL_UART_Transmit+0x76>
 8017be0:	683b      	ldr	r3, [r7, #0]
 8017be2:	9300      	str	r3, [sp, #0]
 8017be4:	697b      	ldr	r3, [r7, #20]
 8017be6:	2200      	movs	r2, #0
 8017be8:	2140      	movs	r1, #64	@ 0x40
 8017bea:	68f8      	ldr	r0, [r7, #12]
 8017bec:	f001 fc86 	bl	80194fc <UART_WaitOnFlagUntilTimeout>
 8017bf0:	4603      	mov	r3, r0
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d005      	beq.n	8017c02 <HAL_UART_Transmit+0x106>
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	2220      	movs	r2, #32
 8017bfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8017bfe:	2303      	movs	r3, #3
 8017c00:	e006      	b.n	8017c10 <HAL_UART_Transmit+0x114>
 8017c02:	68fb      	ldr	r3, [r7, #12]
 8017c04:	2220      	movs	r2, #32
 8017c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	e000      	b.n	8017c10 <HAL_UART_Transmit+0x114>
 8017c0e:	2302      	movs	r3, #2
 8017c10:	4618      	mov	r0, r3
 8017c12:	3720      	adds	r7, #32
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bd80      	pop	{r7, pc}

08017c18 <HAL_UART_Transmit_IT>:
 8017c18:	b480      	push	{r7}
 8017c1a:	b091      	sub	sp, #68	@ 0x44
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	60f8      	str	r0, [r7, #12]
 8017c20:	60b9      	str	r1, [r7, #8]
 8017c22:	4613      	mov	r3, r2
 8017c24:	80fb      	strh	r3, [r7, #6]
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017c2c:	2b20      	cmp	r3, #32
 8017c2e:	d178      	bne.n	8017d22 <HAL_UART_Transmit_IT+0x10a>
 8017c30:	68bb      	ldr	r3, [r7, #8]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d002      	beq.n	8017c3c <HAL_UART_Transmit_IT+0x24>
 8017c36:	88fb      	ldrh	r3, [r7, #6]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d101      	bne.n	8017c40 <HAL_UART_Transmit_IT+0x28>
 8017c3c:	2301      	movs	r3, #1
 8017c3e:	e071      	b.n	8017d24 <HAL_UART_Transmit_IT+0x10c>
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	68ba      	ldr	r2, [r7, #8]
 8017c44:	651a      	str	r2, [r3, #80]	@ 0x50
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	88fa      	ldrh	r2, [r7, #6]
 8017c4a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	88fa      	ldrh	r2, [r7, #6]
 8017c52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	2200      	movs	r2, #0
 8017c5a:	679a      	str	r2, [r3, #120]	@ 0x78
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	2200      	movs	r2, #0
 8017c60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	2221      	movs	r2, #33	@ 0x21
 8017c68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017c74:	d12a      	bne.n	8017ccc <HAL_UART_Transmit_IT+0xb4>
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	689b      	ldr	r3, [r3, #8]
 8017c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017c7e:	d107      	bne.n	8017c90 <HAL_UART_Transmit_IT+0x78>
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	691b      	ldr	r3, [r3, #16]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d103      	bne.n	8017c90 <HAL_UART_Transmit_IT+0x78>
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	4a29      	ldr	r2, [pc, #164]	@ (8017d30 <HAL_UART_Transmit_IT+0x118>)
 8017c8c:	679a      	str	r2, [r3, #120]	@ 0x78
 8017c8e:	e002      	b.n	8017c96 <HAL_UART_Transmit_IT+0x7e>
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	4a28      	ldr	r2, [pc, #160]	@ (8017d34 <HAL_UART_Transmit_IT+0x11c>)
 8017c94:	679a      	str	r2, [r3, #120]	@ 0x78
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	3308      	adds	r3, #8
 8017c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ca0:	e853 3f00 	ldrex	r3, [r3]
 8017ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8017ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ca8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017cac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	3308      	adds	r3, #8
 8017cb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017cb6:	637a      	str	r2, [r7, #52]	@ 0x34
 8017cb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8017cba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017cbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017cbe:	e841 2300 	strex	r3, r2, [r1]
 8017cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d1e5      	bne.n	8017c96 <HAL_UART_Transmit_IT+0x7e>
 8017cca:	e028      	b.n	8017d1e <HAL_UART_Transmit_IT+0x106>
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	689b      	ldr	r3, [r3, #8]
 8017cd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017cd4:	d107      	bne.n	8017ce6 <HAL_UART_Transmit_IT+0xce>
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	691b      	ldr	r3, [r3, #16]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d103      	bne.n	8017ce6 <HAL_UART_Transmit_IT+0xce>
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	4a15      	ldr	r2, [pc, #84]	@ (8017d38 <HAL_UART_Transmit_IT+0x120>)
 8017ce2:	679a      	str	r2, [r3, #120]	@ 0x78
 8017ce4:	e002      	b.n	8017cec <HAL_UART_Transmit_IT+0xd4>
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	4a14      	ldr	r2, [pc, #80]	@ (8017d3c <HAL_UART_Transmit_IT+0x124>)
 8017cea:	679a      	str	r2, [r3, #120]	@ 0x78
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	617b      	str	r3, [r7, #20]
 8017cf2:	697b      	ldr	r3, [r7, #20]
 8017cf4:	e853 3f00 	ldrex	r3, [r3]
 8017cf8:	613b      	str	r3, [r7, #16]
 8017cfa:	693b      	ldr	r3, [r7, #16]
 8017cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	461a      	mov	r2, r3
 8017d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017d0a:	623b      	str	r3, [r7, #32]
 8017d0c:	61fa      	str	r2, [r7, #28]
 8017d0e:	69f9      	ldr	r1, [r7, #28]
 8017d10:	6a3a      	ldr	r2, [r7, #32]
 8017d12:	e841 2300 	strex	r3, r2, [r1]
 8017d16:	61bb      	str	r3, [r7, #24]
 8017d18:	69bb      	ldr	r3, [r7, #24]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d1e6      	bne.n	8017cec <HAL_UART_Transmit_IT+0xd4>
 8017d1e:	2300      	movs	r3, #0
 8017d20:	e000      	b.n	8017d24 <HAL_UART_Transmit_IT+0x10c>
 8017d22:	2302      	movs	r3, #2
 8017d24:	4618      	mov	r0, r3
 8017d26:	3744      	adds	r7, #68	@ 0x44
 8017d28:	46bd      	mov	sp, r7
 8017d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d2e:	4770      	bx	lr
 8017d30:	08019b6f 	.word	0x08019b6f
 8017d34:	08019a8f 	.word	0x08019a8f
 8017d38:	080199cd 	.word	0x080199cd
 8017d3c:	08019915 	.word	0x08019915

08017d40 <HAL_UART_Receive_IT>:
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b08a      	sub	sp, #40	@ 0x28
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	60f8      	str	r0, [r7, #12]
 8017d48:	60b9      	str	r1, [r7, #8]
 8017d4a:	4613      	mov	r3, r2
 8017d4c:	80fb      	strh	r3, [r7, #6]
 8017d4e:	68fb      	ldr	r3, [r7, #12]
 8017d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017d54:	2b20      	cmp	r3, #32
 8017d56:	d137      	bne.n	8017dc8 <HAL_UART_Receive_IT+0x88>
 8017d58:	68bb      	ldr	r3, [r7, #8]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d002      	beq.n	8017d64 <HAL_UART_Receive_IT+0x24>
 8017d5e:	88fb      	ldrh	r3, [r7, #6]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d101      	bne.n	8017d68 <HAL_UART_Receive_IT+0x28>
 8017d64:	2301      	movs	r3, #1
 8017d66:	e030      	b.n	8017dca <HAL_UART_Receive_IT+0x8a>
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	2200      	movs	r2, #0
 8017d6c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	4a18      	ldr	r2, [pc, #96]	@ (8017dd4 <HAL_UART_Receive_IT+0x94>)
 8017d74:	4293      	cmp	r3, r2
 8017d76:	d01f      	beq.n	8017db8 <HAL_UART_Receive_IT+0x78>
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	685b      	ldr	r3, [r3, #4]
 8017d7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d018      	beq.n	8017db8 <HAL_UART_Receive_IT+0x78>
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	617b      	str	r3, [r7, #20]
 8017d8c:	697b      	ldr	r3, [r7, #20]
 8017d8e:	e853 3f00 	ldrex	r3, [r3]
 8017d92:	613b      	str	r3, [r7, #16]
 8017d94:	693b      	ldr	r3, [r7, #16]
 8017d96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8017d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	461a      	mov	r2, r3
 8017da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017da4:	623b      	str	r3, [r7, #32]
 8017da6:	61fa      	str	r2, [r7, #28]
 8017da8:	69f9      	ldr	r1, [r7, #28]
 8017daa:	6a3a      	ldr	r2, [r7, #32]
 8017dac:	e841 2300 	strex	r3, r2, [r1]
 8017db0:	61bb      	str	r3, [r7, #24]
 8017db2:	69bb      	ldr	r3, [r7, #24]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d1e6      	bne.n	8017d86 <HAL_UART_Receive_IT+0x46>
 8017db8:	88fb      	ldrh	r3, [r7, #6]
 8017dba:	461a      	mov	r2, r3
 8017dbc:	68b9      	ldr	r1, [r7, #8]
 8017dbe:	68f8      	ldr	r0, [r7, #12]
 8017dc0:	f001 fc0a 	bl	80195d8 <UART_Start_Receive_IT>
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	e000      	b.n	8017dca <HAL_UART_Receive_IT+0x8a>
 8017dc8:	2302      	movs	r3, #2
 8017dca:	4618      	mov	r0, r3
 8017dcc:	3728      	adds	r7, #40	@ 0x28
 8017dce:	46bd      	mov	sp, r7
 8017dd0:	bd80      	pop	{r7, pc}
 8017dd2:	bf00      	nop
 8017dd4:	58000c00 	.word	0x58000c00

08017dd8 <HAL_UART_IRQHandler>:
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b0ba      	sub	sp, #232	@ 0xe8
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	6078      	str	r0, [r7, #4]
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	69db      	ldr	r3, [r3, #28]
 8017de6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	689b      	ldr	r3, [r3, #8]
 8017dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8017dfe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8017e02:	f640 030f 	movw	r3, #2063	@ 0x80f
 8017e06:	4013      	ands	r3, r2
 8017e08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8017e0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d11b      	bne.n	8017e4c <HAL_UART_IRQHandler+0x74>
 8017e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017e18:	f003 0320 	and.w	r3, r3, #32
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d015      	beq.n	8017e4c <HAL_UART_IRQHandler+0x74>
 8017e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017e24:	f003 0320 	and.w	r3, r3, #32
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d105      	bne.n	8017e38 <HAL_UART_IRQHandler+0x60>
 8017e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d009      	beq.n	8017e4c <HAL_UART_IRQHandler+0x74>
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	f000 8377 	beq.w	8018530 <HAL_UART_IRQHandler+0x758>
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017e46:	6878      	ldr	r0, [r7, #4]
 8017e48:	4798      	blx	r3
 8017e4a:	e371      	b.n	8018530 <HAL_UART_IRQHandler+0x758>
 8017e4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	f000 8123 	beq.w	801809c <HAL_UART_IRQHandler+0x2c4>
 8017e56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8017e5a:	4b8d      	ldr	r3, [pc, #564]	@ (8018090 <HAL_UART_IRQHandler+0x2b8>)
 8017e5c:	4013      	ands	r3, r2
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d106      	bne.n	8017e70 <HAL_UART_IRQHandler+0x98>
 8017e62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8017e66:	4b8b      	ldr	r3, [pc, #556]	@ (8018094 <HAL_UART_IRQHandler+0x2bc>)
 8017e68:	4013      	ands	r3, r2
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	f000 8116 	beq.w	801809c <HAL_UART_IRQHandler+0x2c4>
 8017e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017e74:	f003 0301 	and.w	r3, r3, #1
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d011      	beq.n	8017ea0 <HAL_UART_IRQHandler+0xc8>
 8017e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d00b      	beq.n	8017ea0 <HAL_UART_IRQHandler+0xc8>
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	2201      	movs	r2, #1
 8017e8e:	621a      	str	r2, [r3, #32]
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017e96:	f043 0201 	orr.w	r2, r3, #1
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8017ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017ea4:	f003 0302 	and.w	r3, r3, #2
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d011      	beq.n	8017ed0 <HAL_UART_IRQHandler+0xf8>
 8017eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017eb0:	f003 0301 	and.w	r3, r3, #1
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d00b      	beq.n	8017ed0 <HAL_UART_IRQHandler+0xf8>
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	2202      	movs	r2, #2
 8017ebe:	621a      	str	r2, [r3, #32]
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017ec6:	f043 0204 	orr.w	r2, r3, #4
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8017ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017ed4:	f003 0304 	and.w	r3, r3, #4
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d011      	beq.n	8017f00 <HAL_UART_IRQHandler+0x128>
 8017edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017ee0:	f003 0301 	and.w	r3, r3, #1
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d00b      	beq.n	8017f00 <HAL_UART_IRQHandler+0x128>
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	2204      	movs	r2, #4
 8017eee:	621a      	str	r2, [r3, #32]
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017ef6:	f043 0202 	orr.w	r2, r3, #2
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8017f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017f04:	f003 0308 	and.w	r3, r3, #8
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d017      	beq.n	8017f3c <HAL_UART_IRQHandler+0x164>
 8017f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017f10:	f003 0320 	and.w	r3, r3, #32
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d105      	bne.n	8017f24 <HAL_UART_IRQHandler+0x14c>
 8017f18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8017f1c:	4b5c      	ldr	r3, [pc, #368]	@ (8018090 <HAL_UART_IRQHandler+0x2b8>)
 8017f1e:	4013      	ands	r3, r2
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d00b      	beq.n	8017f3c <HAL_UART_IRQHandler+0x164>
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	2208      	movs	r2, #8
 8017f2a:	621a      	str	r2, [r3, #32]
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017f32:	f043 0208 	orr.w	r2, r3, #8
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8017f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d012      	beq.n	8017f6e <HAL_UART_IRQHandler+0x196>
 8017f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017f4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d00c      	beq.n	8017f6e <HAL_UART_IRQHandler+0x196>
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017f5c:	621a      	str	r2, [r3, #32]
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017f64:	f043 0220 	orr.w	r2, r3, #32
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	f000 82dd 	beq.w	8018534 <HAL_UART_IRQHandler+0x75c>
 8017f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017f7e:	f003 0320 	and.w	r3, r3, #32
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d013      	beq.n	8017fae <HAL_UART_IRQHandler+0x1d6>
 8017f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017f8a:	f003 0320 	and.w	r3, r3, #32
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d105      	bne.n	8017f9e <HAL_UART_IRQHandler+0x1c6>
 8017f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d007      	beq.n	8017fae <HAL_UART_IRQHandler+0x1d6>
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d003      	beq.n	8017fae <HAL_UART_IRQHandler+0x1d6>
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017faa:	6878      	ldr	r0, [r7, #4]
 8017fac:	4798      	blx	r3
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017fb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	689b      	ldr	r3, [r3, #8]
 8017fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017fc2:	2b40      	cmp	r3, #64	@ 0x40
 8017fc4:	d005      	beq.n	8017fd2 <HAL_UART_IRQHandler+0x1fa>
 8017fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8017fca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d054      	beq.n	801807c <HAL_UART_IRQHandler+0x2a4>
 8017fd2:	6878      	ldr	r0, [r7, #4]
 8017fd4:	f001 fc22 	bl	801981c <UART_EndRxTransfer>
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	689b      	ldr	r3, [r3, #8]
 8017fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017fe2:	2b40      	cmp	r3, #64	@ 0x40
 8017fe4:	d146      	bne.n	8018074 <HAL_UART_IRQHandler+0x29c>
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	3308      	adds	r3, #8
 8017fec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8017ff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017ff4:	e853 3f00 	ldrex	r3, [r3]
 8017ff8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8017ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8018000:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018004:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	3308      	adds	r3, #8
 801800e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8018012:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8018016:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801801a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801801e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8018022:	e841 2300 	strex	r3, r2, [r1]
 8018026:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801802a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801802e:	2b00      	cmp	r3, #0
 8018030:	d1d9      	bne.n	8017fe6 <HAL_UART_IRQHandler+0x20e>
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018038:	2b00      	cmp	r3, #0
 801803a:	d017      	beq.n	801806c <HAL_UART_IRQHandler+0x294>
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018042:	4a15      	ldr	r2, [pc, #84]	@ (8018098 <HAL_UART_IRQHandler+0x2c0>)
 8018044:	651a      	str	r2, [r3, #80]	@ 0x50
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801804c:	4618      	mov	r0, r3
 801804e:	f7f4 fa75 	bl	800c53c <HAL_DMA_Abort_IT>
 8018052:	4603      	mov	r3, r0
 8018054:	2b00      	cmp	r3, #0
 8018056:	d019      	beq.n	801808c <HAL_UART_IRQHandler+0x2b4>
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801805e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018060:	687a      	ldr	r2, [r7, #4]
 8018062:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8018066:	4610      	mov	r0, r2
 8018068:	4798      	blx	r3
 801806a:	e00f      	b.n	801808c <HAL_UART_IRQHandler+0x2b4>
 801806c:	6878      	ldr	r0, [r7, #4]
 801806e:	f000 fa77 	bl	8018560 <HAL_UART_ErrorCallback>
 8018072:	e00b      	b.n	801808c <HAL_UART_IRQHandler+0x2b4>
 8018074:	6878      	ldr	r0, [r7, #4]
 8018076:	f000 fa73 	bl	8018560 <HAL_UART_ErrorCallback>
 801807a:	e007      	b.n	801808c <HAL_UART_IRQHandler+0x2b4>
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f000 fa6f 	bl	8018560 <HAL_UART_ErrorCallback>
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	2200      	movs	r2, #0
 8018086:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801808a:	e253      	b.n	8018534 <HAL_UART_IRQHandler+0x75c>
 801808c:	bf00      	nop
 801808e:	e251      	b.n	8018534 <HAL_UART_IRQHandler+0x75c>
 8018090:	10000001 	.word	0x10000001
 8018094:	04000120 	.word	0x04000120
 8018098:	080198e9 	.word	0x080198e9
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80180a0:	2b01      	cmp	r3, #1
 80180a2:	f040 81e7 	bne.w	8018474 <HAL_UART_IRQHandler+0x69c>
 80180a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80180aa:	f003 0310 	and.w	r3, r3, #16
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	f000 81e0 	beq.w	8018474 <HAL_UART_IRQHandler+0x69c>
 80180b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80180b8:	f003 0310 	and.w	r3, r3, #16
 80180bc:	2b00      	cmp	r3, #0
 80180be:	f000 81d9 	beq.w	8018474 <HAL_UART_IRQHandler+0x69c>
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	681b      	ldr	r3, [r3, #0]
 80180c6:	2210      	movs	r2, #16
 80180c8:	621a      	str	r2, [r3, #32]
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	689b      	ldr	r3, [r3, #8]
 80180d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80180d4:	2b40      	cmp	r3, #64	@ 0x40
 80180d6:	f040 8151 	bne.w	801837c <HAL_UART_IRQHandler+0x5a4>
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	4a96      	ldr	r2, [pc, #600]	@ (801833c <HAL_UART_IRQHandler+0x564>)
 80180e4:	4293      	cmp	r3, r2
 80180e6:	d068      	beq.n	80181ba <HAL_UART_IRQHandler+0x3e2>
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	4a93      	ldr	r2, [pc, #588]	@ (8018340 <HAL_UART_IRQHandler+0x568>)
 80180f2:	4293      	cmp	r3, r2
 80180f4:	d061      	beq.n	80181ba <HAL_UART_IRQHandler+0x3e2>
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	4a91      	ldr	r2, [pc, #580]	@ (8018344 <HAL_UART_IRQHandler+0x56c>)
 8018100:	4293      	cmp	r3, r2
 8018102:	d05a      	beq.n	80181ba <HAL_UART_IRQHandler+0x3e2>
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	4a8e      	ldr	r2, [pc, #568]	@ (8018348 <HAL_UART_IRQHandler+0x570>)
 801810e:	4293      	cmp	r3, r2
 8018110:	d053      	beq.n	80181ba <HAL_UART_IRQHandler+0x3e2>
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	4a8c      	ldr	r2, [pc, #560]	@ (801834c <HAL_UART_IRQHandler+0x574>)
 801811c:	4293      	cmp	r3, r2
 801811e:	d04c      	beq.n	80181ba <HAL_UART_IRQHandler+0x3e2>
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	4a89      	ldr	r2, [pc, #548]	@ (8018350 <HAL_UART_IRQHandler+0x578>)
 801812a:	4293      	cmp	r3, r2
 801812c:	d045      	beq.n	80181ba <HAL_UART_IRQHandler+0x3e2>
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	4a87      	ldr	r2, [pc, #540]	@ (8018354 <HAL_UART_IRQHandler+0x57c>)
 8018138:	4293      	cmp	r3, r2
 801813a:	d03e      	beq.n	80181ba <HAL_UART_IRQHandler+0x3e2>
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	4a84      	ldr	r2, [pc, #528]	@ (8018358 <HAL_UART_IRQHandler+0x580>)
 8018146:	4293      	cmp	r3, r2
 8018148:	d037      	beq.n	80181ba <HAL_UART_IRQHandler+0x3e2>
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	4a82      	ldr	r2, [pc, #520]	@ (801835c <HAL_UART_IRQHandler+0x584>)
 8018154:	4293      	cmp	r3, r2
 8018156:	d030      	beq.n	80181ba <HAL_UART_IRQHandler+0x3e2>
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	4a7f      	ldr	r2, [pc, #508]	@ (8018360 <HAL_UART_IRQHandler+0x588>)
 8018162:	4293      	cmp	r3, r2
 8018164:	d029      	beq.n	80181ba <HAL_UART_IRQHandler+0x3e2>
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	4a7d      	ldr	r2, [pc, #500]	@ (8018364 <HAL_UART_IRQHandler+0x58c>)
 8018170:	4293      	cmp	r3, r2
 8018172:	d022      	beq.n	80181ba <HAL_UART_IRQHandler+0x3e2>
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	4a7a      	ldr	r2, [pc, #488]	@ (8018368 <HAL_UART_IRQHandler+0x590>)
 801817e:	4293      	cmp	r3, r2
 8018180:	d01b      	beq.n	80181ba <HAL_UART_IRQHandler+0x3e2>
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	4a78      	ldr	r2, [pc, #480]	@ (801836c <HAL_UART_IRQHandler+0x594>)
 801818c:	4293      	cmp	r3, r2
 801818e:	d014      	beq.n	80181ba <HAL_UART_IRQHandler+0x3e2>
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	4a75      	ldr	r2, [pc, #468]	@ (8018370 <HAL_UART_IRQHandler+0x598>)
 801819a:	4293      	cmp	r3, r2
 801819c:	d00d      	beq.n	80181ba <HAL_UART_IRQHandler+0x3e2>
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	4a73      	ldr	r2, [pc, #460]	@ (8018374 <HAL_UART_IRQHandler+0x59c>)
 80181a8:	4293      	cmp	r3, r2
 80181aa:	d006      	beq.n	80181ba <HAL_UART_IRQHandler+0x3e2>
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	4a70      	ldr	r2, [pc, #448]	@ (8018378 <HAL_UART_IRQHandler+0x5a0>)
 80181b6:	4293      	cmp	r3, r2
 80181b8:	d106      	bne.n	80181c8 <HAL_UART_IRQHandler+0x3f0>
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	685b      	ldr	r3, [r3, #4]
 80181c4:	b29b      	uxth	r3, r3
 80181c6:	e005      	b.n	80181d4 <HAL_UART_IRQHandler+0x3fc>
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	685b      	ldr	r3, [r3, #4]
 80181d2:	b29b      	uxth	r3, r3
 80181d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 80181d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80181dc:	2b00      	cmp	r3, #0
 80181de:	f000 81ab 	beq.w	8018538 <HAL_UART_IRQHandler+0x760>
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80181e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80181ec:	429a      	cmp	r2, r3
 80181ee:	f080 81a3 	bcs.w	8018538 <HAL_UART_IRQHandler+0x760>
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80181f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018202:	69db      	ldr	r3, [r3, #28]
 8018204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018208:	f000 8087 	beq.w	801831a <HAL_UART_IRQHandler+0x542>
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8018214:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8018218:	e853 3f00 	ldrex	r3, [r3]
 801821c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8018220:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8018224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018228:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	461a      	mov	r2, r3
 8018232:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8018236:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801823a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 801823e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8018242:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8018246:	e841 2300 	strex	r3, r2, [r1]
 801824a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801824e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018252:	2b00      	cmp	r3, #0
 8018254:	d1da      	bne.n	801820c <HAL_UART_IRQHandler+0x434>
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	3308      	adds	r3, #8
 801825c:	677b      	str	r3, [r7, #116]	@ 0x74
 801825e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018260:	e853 3f00 	ldrex	r3, [r3]
 8018264:	673b      	str	r3, [r7, #112]	@ 0x70
 8018266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018268:	f023 0301 	bic.w	r3, r3, #1
 801826c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	3308      	adds	r3, #8
 8018276:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801827a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801827e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8018280:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8018282:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8018286:	e841 2300 	strex	r3, r2, [r1]
 801828a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801828c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801828e:	2b00      	cmp	r3, #0
 8018290:	d1e1      	bne.n	8018256 <HAL_UART_IRQHandler+0x47e>
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	681b      	ldr	r3, [r3, #0]
 8018296:	3308      	adds	r3, #8
 8018298:	663b      	str	r3, [r7, #96]	@ 0x60
 801829a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801829c:	e853 3f00 	ldrex	r3, [r3]
 80182a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80182a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80182a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80182a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	3308      	adds	r3, #8
 80182b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80182b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80182b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80182ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80182bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80182be:	e841 2300 	strex	r3, r2, [r1]
 80182c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80182c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d1e3      	bne.n	8018292 <HAL_UART_IRQHandler+0x4ba>
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	2220      	movs	r2, #32
 80182ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	2200      	movs	r2, #0
 80182d6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80182de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80182e0:	e853 3f00 	ldrex	r3, [r3]
 80182e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80182e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80182e8:	f023 0310 	bic.w	r3, r3, #16
 80182ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	461a      	mov	r2, r3
 80182f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80182fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80182fc:	657a      	str	r2, [r7, #84]	@ 0x54
 80182fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018300:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018302:	e841 2300 	strex	r3, r2, [r1]
 8018306:	653b      	str	r3, [r7, #80]	@ 0x50
 8018308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801830a:	2b00      	cmp	r3, #0
 801830c:	d1e4      	bne.n	80182d8 <HAL_UART_IRQHandler+0x500>
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018314:	4618      	mov	r0, r3
 8018316:	f7f3 fdf3 	bl	800bf00 <HAL_DMA_Abort>
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	2202      	movs	r2, #2
 801831e:	671a      	str	r2, [r3, #112]	@ 0x70
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801832c:	b29b      	uxth	r3, r3
 801832e:	1ad3      	subs	r3, r2, r3
 8018330:	b29b      	uxth	r3, r3
 8018332:	4619      	mov	r1, r3
 8018334:	6878      	ldr	r0, [r7, #4]
 8018336:	f000 f91d 	bl	8018574 <HAL_UARTEx_RxEventCallback>
 801833a:	e0fd      	b.n	8018538 <HAL_UART_IRQHandler+0x760>
 801833c:	40020010 	.word	0x40020010
 8018340:	40020028 	.word	0x40020028
 8018344:	40020040 	.word	0x40020040
 8018348:	40020058 	.word	0x40020058
 801834c:	40020070 	.word	0x40020070
 8018350:	40020088 	.word	0x40020088
 8018354:	400200a0 	.word	0x400200a0
 8018358:	400200b8 	.word	0x400200b8
 801835c:	40020410 	.word	0x40020410
 8018360:	40020428 	.word	0x40020428
 8018364:	40020440 	.word	0x40020440
 8018368:	40020458 	.word	0x40020458
 801836c:	40020470 	.word	0x40020470
 8018370:	40020488 	.word	0x40020488
 8018374:	400204a0 	.word	0x400204a0
 8018378:	400204b8 	.word	0x400204b8
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018388:	b29b      	uxth	r3, r3
 801838a:	1ad3      	subs	r3, r2, r3
 801838c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018396:	b29b      	uxth	r3, r3
 8018398:	2b00      	cmp	r3, #0
 801839a:	f000 80cf 	beq.w	801853c <HAL_UART_IRQHandler+0x764>
 801839e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	f000 80ca 	beq.w	801853c <HAL_UART_IRQHandler+0x764>
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80183ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183b0:	e853 3f00 	ldrex	r3, [r3]
 80183b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80183b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80183bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	461a      	mov	r2, r3
 80183c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80183ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80183cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80183ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80183d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80183d2:	e841 2300 	strex	r3, r2, [r1]
 80183d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80183d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d1e4      	bne.n	80183a8 <HAL_UART_IRQHandler+0x5d0>
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	3308      	adds	r3, #8
 80183e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80183e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183e8:	e853 3f00 	ldrex	r3, [r3]
 80183ec:	623b      	str	r3, [r7, #32]
 80183ee:	6a3a      	ldr	r2, [r7, #32]
 80183f0:	4b55      	ldr	r3, [pc, #340]	@ (8018548 <HAL_UART_IRQHandler+0x770>)
 80183f2:	4013      	ands	r3, r2
 80183f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	3308      	adds	r3, #8
 80183fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8018402:	633a      	str	r2, [r7, #48]	@ 0x30
 8018404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018406:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801840a:	e841 2300 	strex	r3, r2, [r1]
 801840e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018412:	2b00      	cmp	r3, #0
 8018414:	d1e3      	bne.n	80183de <HAL_UART_IRQHandler+0x606>
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	2220      	movs	r2, #32
 801841a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	2200      	movs	r2, #0
 8018422:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	2200      	movs	r2, #0
 8018428:	675a      	str	r2, [r3, #116]	@ 0x74
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	613b      	str	r3, [r7, #16]
 8018430:	693b      	ldr	r3, [r7, #16]
 8018432:	e853 3f00 	ldrex	r3, [r3]
 8018436:	60fb      	str	r3, [r7, #12]
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	f023 0310 	bic.w	r3, r3, #16
 801843e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	461a      	mov	r2, r3
 8018448:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801844c:	61fb      	str	r3, [r7, #28]
 801844e:	61ba      	str	r2, [r7, #24]
 8018450:	69b9      	ldr	r1, [r7, #24]
 8018452:	69fa      	ldr	r2, [r7, #28]
 8018454:	e841 2300 	strex	r3, r2, [r1]
 8018458:	617b      	str	r3, [r7, #20]
 801845a:	697b      	ldr	r3, [r7, #20]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d1e4      	bne.n	801842a <HAL_UART_IRQHandler+0x652>
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	2202      	movs	r2, #2
 8018464:	671a      	str	r2, [r3, #112]	@ 0x70
 8018466:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801846a:	4619      	mov	r1, r3
 801846c:	6878      	ldr	r0, [r7, #4]
 801846e:	f000 f881 	bl	8018574 <HAL_UARTEx_RxEventCallback>
 8018472:	e063      	b.n	801853c <HAL_UART_IRQHandler+0x764>
 8018474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018478:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801847c:	2b00      	cmp	r3, #0
 801847e:	d00e      	beq.n	801849e <HAL_UART_IRQHandler+0x6c6>
 8018480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018484:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018488:	2b00      	cmp	r3, #0
 801848a:	d008      	beq.n	801849e <HAL_UART_IRQHandler+0x6c6>
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8018494:	621a      	str	r2, [r3, #32]
 8018496:	6878      	ldr	r0, [r7, #4]
 8018498:	f002 f926 	bl	801a6e8 <HAL_UARTEx_WakeupCallback>
 801849c:	e051      	b.n	8018542 <HAL_UART_IRQHandler+0x76a>
 801849e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80184a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d014      	beq.n	80184d4 <HAL_UART_IRQHandler+0x6fc>
 80184aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80184ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d105      	bne.n	80184c2 <HAL_UART_IRQHandler+0x6ea>
 80184b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80184ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d008      	beq.n	80184d4 <HAL_UART_IRQHandler+0x6fc>
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d03a      	beq.n	8018540 <HAL_UART_IRQHandler+0x768>
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80184ce:	6878      	ldr	r0, [r7, #4]
 80184d0:	4798      	blx	r3
 80184d2:	e035      	b.n	8018540 <HAL_UART_IRQHandler+0x768>
 80184d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80184d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d009      	beq.n	80184f4 <HAL_UART_IRQHandler+0x71c>
 80184e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80184e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d003      	beq.n	80184f4 <HAL_UART_IRQHandler+0x71c>
 80184ec:	6878      	ldr	r0, [r7, #4]
 80184ee:	f001 fbb3 	bl	8019c58 <UART_EndTransmit_IT>
 80184f2:	e026      	b.n	8018542 <HAL_UART_IRQHandler+0x76a>
 80184f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80184f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d009      	beq.n	8018514 <HAL_UART_IRQHandler+0x73c>
 8018500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018504:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8018508:	2b00      	cmp	r3, #0
 801850a:	d003      	beq.n	8018514 <HAL_UART_IRQHandler+0x73c>
 801850c:	6878      	ldr	r0, [r7, #4]
 801850e:	f002 f8ff 	bl	801a710 <HAL_UARTEx_TxFifoEmptyCallback>
 8018512:	e016      	b.n	8018542 <HAL_UART_IRQHandler+0x76a>
 8018514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018518:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801851c:	2b00      	cmp	r3, #0
 801851e:	d010      	beq.n	8018542 <HAL_UART_IRQHandler+0x76a>
 8018520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018524:	2b00      	cmp	r3, #0
 8018526:	da0c      	bge.n	8018542 <HAL_UART_IRQHandler+0x76a>
 8018528:	6878      	ldr	r0, [r7, #4]
 801852a:	f002 f8e7 	bl	801a6fc <HAL_UARTEx_RxFifoFullCallback>
 801852e:	e008      	b.n	8018542 <HAL_UART_IRQHandler+0x76a>
 8018530:	bf00      	nop
 8018532:	e006      	b.n	8018542 <HAL_UART_IRQHandler+0x76a>
 8018534:	bf00      	nop
 8018536:	e004      	b.n	8018542 <HAL_UART_IRQHandler+0x76a>
 8018538:	bf00      	nop
 801853a:	e002      	b.n	8018542 <HAL_UART_IRQHandler+0x76a>
 801853c:	bf00      	nop
 801853e:	e000      	b.n	8018542 <HAL_UART_IRQHandler+0x76a>
 8018540:	bf00      	nop
 8018542:	37e8      	adds	r7, #232	@ 0xe8
 8018544:	46bd      	mov	sp, r7
 8018546:	bd80      	pop	{r7, pc}
 8018548:	effffffe 	.word	0xeffffffe

0801854c <HAL_UART_TxCpltCallback>:
 801854c:	b480      	push	{r7}
 801854e:	b083      	sub	sp, #12
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
 8018554:	bf00      	nop
 8018556:	370c      	adds	r7, #12
 8018558:	46bd      	mov	sp, r7
 801855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801855e:	4770      	bx	lr

08018560 <HAL_UART_ErrorCallback>:
 8018560:	b480      	push	{r7}
 8018562:	b083      	sub	sp, #12
 8018564:	af00      	add	r7, sp, #0
 8018566:	6078      	str	r0, [r7, #4]
 8018568:	bf00      	nop
 801856a:	370c      	adds	r7, #12
 801856c:	46bd      	mov	sp, r7
 801856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018572:	4770      	bx	lr

08018574 <HAL_UARTEx_RxEventCallback>:
 8018574:	b480      	push	{r7}
 8018576:	b083      	sub	sp, #12
 8018578:	af00      	add	r7, sp, #0
 801857a:	6078      	str	r0, [r7, #4]
 801857c:	460b      	mov	r3, r1
 801857e:	807b      	strh	r3, [r7, #2]
 8018580:	bf00      	nop
 8018582:	370c      	adds	r7, #12
 8018584:	46bd      	mov	sp, r7
 8018586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858a:	4770      	bx	lr

0801858c <UART_SetConfig>:
 801858c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018590:	b092      	sub	sp, #72	@ 0x48
 8018592:	af00      	add	r7, sp, #0
 8018594:	6178      	str	r0, [r7, #20]
 8018596:	2300      	movs	r3, #0
 8018598:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801859c:	697b      	ldr	r3, [r7, #20]
 801859e:	689a      	ldr	r2, [r3, #8]
 80185a0:	697b      	ldr	r3, [r7, #20]
 80185a2:	691b      	ldr	r3, [r3, #16]
 80185a4:	431a      	orrs	r2, r3
 80185a6:	697b      	ldr	r3, [r7, #20]
 80185a8:	695b      	ldr	r3, [r3, #20]
 80185aa:	431a      	orrs	r2, r3
 80185ac:	697b      	ldr	r3, [r7, #20]
 80185ae:	69db      	ldr	r3, [r3, #28]
 80185b0:	4313      	orrs	r3, r2
 80185b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80185b4:	697b      	ldr	r3, [r7, #20]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	681a      	ldr	r2, [r3, #0]
 80185ba:	4bbe      	ldr	r3, [pc, #760]	@ (80188b4 <UART_SetConfig+0x328>)
 80185bc:	4013      	ands	r3, r2
 80185be:	697a      	ldr	r2, [r7, #20]
 80185c0:	6812      	ldr	r2, [r2, #0]
 80185c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80185c4:	430b      	orrs	r3, r1
 80185c6:	6013      	str	r3, [r2, #0]
 80185c8:	697b      	ldr	r3, [r7, #20]
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	685b      	ldr	r3, [r3, #4]
 80185ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80185d2:	697b      	ldr	r3, [r7, #20]
 80185d4:	68da      	ldr	r2, [r3, #12]
 80185d6:	697b      	ldr	r3, [r7, #20]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	430a      	orrs	r2, r1
 80185dc:	605a      	str	r2, [r3, #4]
 80185de:	697b      	ldr	r3, [r7, #20]
 80185e0:	699b      	ldr	r3, [r3, #24]
 80185e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80185e4:	697b      	ldr	r3, [r7, #20]
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	4ab3      	ldr	r2, [pc, #716]	@ (80188b8 <UART_SetConfig+0x32c>)
 80185ea:	4293      	cmp	r3, r2
 80185ec:	d004      	beq.n	80185f8 <UART_SetConfig+0x6c>
 80185ee:	697b      	ldr	r3, [r7, #20]
 80185f0:	6a1b      	ldr	r3, [r3, #32]
 80185f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80185f4:	4313      	orrs	r3, r2
 80185f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80185f8:	697b      	ldr	r3, [r7, #20]
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	689a      	ldr	r2, [r3, #8]
 80185fe:	4baf      	ldr	r3, [pc, #700]	@ (80188bc <UART_SetConfig+0x330>)
 8018600:	4013      	ands	r3, r2
 8018602:	697a      	ldr	r2, [r7, #20]
 8018604:	6812      	ldr	r2, [r2, #0]
 8018606:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018608:	430b      	orrs	r3, r1
 801860a:	6093      	str	r3, [r2, #8]
 801860c:	697b      	ldr	r3, [r7, #20]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018612:	f023 010f 	bic.w	r1, r3, #15
 8018616:	697b      	ldr	r3, [r7, #20]
 8018618:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801861a:	697b      	ldr	r3, [r7, #20]
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	430a      	orrs	r2, r1
 8018620:	62da      	str	r2, [r3, #44]	@ 0x2c
 8018622:	697b      	ldr	r3, [r7, #20]
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	4aa6      	ldr	r2, [pc, #664]	@ (80188c0 <UART_SetConfig+0x334>)
 8018628:	4293      	cmp	r3, r2
 801862a:	d177      	bne.n	801871c <UART_SetConfig+0x190>
 801862c:	4ba5      	ldr	r3, [pc, #660]	@ (80188c4 <UART_SetConfig+0x338>)
 801862e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018630:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018634:	2b28      	cmp	r3, #40	@ 0x28
 8018636:	d86d      	bhi.n	8018714 <UART_SetConfig+0x188>
 8018638:	a201      	add	r2, pc, #4	@ (adr r2, 8018640 <UART_SetConfig+0xb4>)
 801863a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801863e:	bf00      	nop
 8018640:	080186e5 	.word	0x080186e5
 8018644:	08018715 	.word	0x08018715
 8018648:	08018715 	.word	0x08018715
 801864c:	08018715 	.word	0x08018715
 8018650:	08018715 	.word	0x08018715
 8018654:	08018715 	.word	0x08018715
 8018658:	08018715 	.word	0x08018715
 801865c:	08018715 	.word	0x08018715
 8018660:	080186ed 	.word	0x080186ed
 8018664:	08018715 	.word	0x08018715
 8018668:	08018715 	.word	0x08018715
 801866c:	08018715 	.word	0x08018715
 8018670:	08018715 	.word	0x08018715
 8018674:	08018715 	.word	0x08018715
 8018678:	08018715 	.word	0x08018715
 801867c:	08018715 	.word	0x08018715
 8018680:	080186f5 	.word	0x080186f5
 8018684:	08018715 	.word	0x08018715
 8018688:	08018715 	.word	0x08018715
 801868c:	08018715 	.word	0x08018715
 8018690:	08018715 	.word	0x08018715
 8018694:	08018715 	.word	0x08018715
 8018698:	08018715 	.word	0x08018715
 801869c:	08018715 	.word	0x08018715
 80186a0:	080186fd 	.word	0x080186fd
 80186a4:	08018715 	.word	0x08018715
 80186a8:	08018715 	.word	0x08018715
 80186ac:	08018715 	.word	0x08018715
 80186b0:	08018715 	.word	0x08018715
 80186b4:	08018715 	.word	0x08018715
 80186b8:	08018715 	.word	0x08018715
 80186bc:	08018715 	.word	0x08018715
 80186c0:	08018705 	.word	0x08018705
 80186c4:	08018715 	.word	0x08018715
 80186c8:	08018715 	.word	0x08018715
 80186cc:	08018715 	.word	0x08018715
 80186d0:	08018715 	.word	0x08018715
 80186d4:	08018715 	.word	0x08018715
 80186d8:	08018715 	.word	0x08018715
 80186dc:	08018715 	.word	0x08018715
 80186e0:	0801870d 	.word	0x0801870d
 80186e4:	2301      	movs	r3, #1
 80186e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186ea:	e326      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80186ec:	2304      	movs	r3, #4
 80186ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186f2:	e322      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80186f4:	2308      	movs	r3, #8
 80186f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186fa:	e31e      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80186fc:	2310      	movs	r3, #16
 80186fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018702:	e31a      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018704:	2320      	movs	r3, #32
 8018706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801870a:	e316      	b.n	8018d3a <UART_SetConfig+0x7ae>
 801870c:	2340      	movs	r3, #64	@ 0x40
 801870e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018712:	e312      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018714:	2380      	movs	r3, #128	@ 0x80
 8018716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801871a:	e30e      	b.n	8018d3a <UART_SetConfig+0x7ae>
 801871c:	697b      	ldr	r3, [r7, #20]
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	4a69      	ldr	r2, [pc, #420]	@ (80188c8 <UART_SetConfig+0x33c>)
 8018722:	4293      	cmp	r3, r2
 8018724:	d130      	bne.n	8018788 <UART_SetConfig+0x1fc>
 8018726:	4b67      	ldr	r3, [pc, #412]	@ (80188c4 <UART_SetConfig+0x338>)
 8018728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801872a:	f003 0307 	and.w	r3, r3, #7
 801872e:	2b05      	cmp	r3, #5
 8018730:	d826      	bhi.n	8018780 <UART_SetConfig+0x1f4>
 8018732:	a201      	add	r2, pc, #4	@ (adr r2, 8018738 <UART_SetConfig+0x1ac>)
 8018734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018738:	08018751 	.word	0x08018751
 801873c:	08018759 	.word	0x08018759
 8018740:	08018761 	.word	0x08018761
 8018744:	08018769 	.word	0x08018769
 8018748:	08018771 	.word	0x08018771
 801874c:	08018779 	.word	0x08018779
 8018750:	2300      	movs	r3, #0
 8018752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018756:	e2f0      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018758:	2304      	movs	r3, #4
 801875a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801875e:	e2ec      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018760:	2308      	movs	r3, #8
 8018762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018766:	e2e8      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018768:	2310      	movs	r3, #16
 801876a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801876e:	e2e4      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018770:	2320      	movs	r3, #32
 8018772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018776:	e2e0      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018778:	2340      	movs	r3, #64	@ 0x40
 801877a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801877e:	e2dc      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018780:	2380      	movs	r3, #128	@ 0x80
 8018782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018786:	e2d8      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018788:	697b      	ldr	r3, [r7, #20]
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	4a4f      	ldr	r2, [pc, #316]	@ (80188cc <UART_SetConfig+0x340>)
 801878e:	4293      	cmp	r3, r2
 8018790:	d130      	bne.n	80187f4 <UART_SetConfig+0x268>
 8018792:	4b4c      	ldr	r3, [pc, #304]	@ (80188c4 <UART_SetConfig+0x338>)
 8018794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018796:	f003 0307 	and.w	r3, r3, #7
 801879a:	2b05      	cmp	r3, #5
 801879c:	d826      	bhi.n	80187ec <UART_SetConfig+0x260>
 801879e:	a201      	add	r2, pc, #4	@ (adr r2, 80187a4 <UART_SetConfig+0x218>)
 80187a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187a4:	080187bd 	.word	0x080187bd
 80187a8:	080187c5 	.word	0x080187c5
 80187ac:	080187cd 	.word	0x080187cd
 80187b0:	080187d5 	.word	0x080187d5
 80187b4:	080187dd 	.word	0x080187dd
 80187b8:	080187e5 	.word	0x080187e5
 80187bc:	2300      	movs	r3, #0
 80187be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187c2:	e2ba      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80187c4:	2304      	movs	r3, #4
 80187c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187ca:	e2b6      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80187cc:	2308      	movs	r3, #8
 80187ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187d2:	e2b2      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80187d4:	2310      	movs	r3, #16
 80187d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187da:	e2ae      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80187dc:	2320      	movs	r3, #32
 80187de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187e2:	e2aa      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80187e4:	2340      	movs	r3, #64	@ 0x40
 80187e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187ea:	e2a6      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80187ec:	2380      	movs	r3, #128	@ 0x80
 80187ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187f2:	e2a2      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80187f4:	697b      	ldr	r3, [r7, #20]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	4a35      	ldr	r2, [pc, #212]	@ (80188d0 <UART_SetConfig+0x344>)
 80187fa:	4293      	cmp	r3, r2
 80187fc:	d130      	bne.n	8018860 <UART_SetConfig+0x2d4>
 80187fe:	4b31      	ldr	r3, [pc, #196]	@ (80188c4 <UART_SetConfig+0x338>)
 8018800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018802:	f003 0307 	and.w	r3, r3, #7
 8018806:	2b05      	cmp	r3, #5
 8018808:	d826      	bhi.n	8018858 <UART_SetConfig+0x2cc>
 801880a:	a201      	add	r2, pc, #4	@ (adr r2, 8018810 <UART_SetConfig+0x284>)
 801880c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018810:	08018829 	.word	0x08018829
 8018814:	08018831 	.word	0x08018831
 8018818:	08018839 	.word	0x08018839
 801881c:	08018841 	.word	0x08018841
 8018820:	08018849 	.word	0x08018849
 8018824:	08018851 	.word	0x08018851
 8018828:	2300      	movs	r3, #0
 801882a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801882e:	e284      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018830:	2304      	movs	r3, #4
 8018832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018836:	e280      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018838:	2308      	movs	r3, #8
 801883a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801883e:	e27c      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018840:	2310      	movs	r3, #16
 8018842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018846:	e278      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018848:	2320      	movs	r3, #32
 801884a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801884e:	e274      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018850:	2340      	movs	r3, #64	@ 0x40
 8018852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018856:	e270      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018858:	2380      	movs	r3, #128	@ 0x80
 801885a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801885e:	e26c      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018860:	697b      	ldr	r3, [r7, #20]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	4a1b      	ldr	r2, [pc, #108]	@ (80188d4 <UART_SetConfig+0x348>)
 8018866:	4293      	cmp	r3, r2
 8018868:	d142      	bne.n	80188f0 <UART_SetConfig+0x364>
 801886a:	4b16      	ldr	r3, [pc, #88]	@ (80188c4 <UART_SetConfig+0x338>)
 801886c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801886e:	f003 0307 	and.w	r3, r3, #7
 8018872:	2b05      	cmp	r3, #5
 8018874:	d838      	bhi.n	80188e8 <UART_SetConfig+0x35c>
 8018876:	a201      	add	r2, pc, #4	@ (adr r2, 801887c <UART_SetConfig+0x2f0>)
 8018878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801887c:	08018895 	.word	0x08018895
 8018880:	0801889d 	.word	0x0801889d
 8018884:	080188a5 	.word	0x080188a5
 8018888:	080188ad 	.word	0x080188ad
 801888c:	080188d9 	.word	0x080188d9
 8018890:	080188e1 	.word	0x080188e1
 8018894:	2300      	movs	r3, #0
 8018896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801889a:	e24e      	b.n	8018d3a <UART_SetConfig+0x7ae>
 801889c:	2304      	movs	r3, #4
 801889e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188a2:	e24a      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80188a4:	2308      	movs	r3, #8
 80188a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188aa:	e246      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80188ac:	2310      	movs	r3, #16
 80188ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188b2:	e242      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80188b4:	cfff69f3 	.word	0xcfff69f3
 80188b8:	58000c00 	.word	0x58000c00
 80188bc:	11fff4ff 	.word	0x11fff4ff
 80188c0:	40011000 	.word	0x40011000
 80188c4:	58024400 	.word	0x58024400
 80188c8:	40004400 	.word	0x40004400
 80188cc:	40004800 	.word	0x40004800
 80188d0:	40004c00 	.word	0x40004c00
 80188d4:	40005000 	.word	0x40005000
 80188d8:	2320      	movs	r3, #32
 80188da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188de:	e22c      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80188e0:	2340      	movs	r3, #64	@ 0x40
 80188e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188e6:	e228      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80188e8:	2380      	movs	r3, #128	@ 0x80
 80188ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188ee:	e224      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80188f0:	697b      	ldr	r3, [r7, #20]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	4ab1      	ldr	r2, [pc, #708]	@ (8018bbc <UART_SetConfig+0x630>)
 80188f6:	4293      	cmp	r3, r2
 80188f8:	d176      	bne.n	80189e8 <UART_SetConfig+0x45c>
 80188fa:	4bb1      	ldr	r3, [pc, #708]	@ (8018bc0 <UART_SetConfig+0x634>)
 80188fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80188fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018902:	2b28      	cmp	r3, #40	@ 0x28
 8018904:	d86c      	bhi.n	80189e0 <UART_SetConfig+0x454>
 8018906:	a201      	add	r2, pc, #4	@ (adr r2, 801890c <UART_SetConfig+0x380>)
 8018908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801890c:	080189b1 	.word	0x080189b1
 8018910:	080189e1 	.word	0x080189e1
 8018914:	080189e1 	.word	0x080189e1
 8018918:	080189e1 	.word	0x080189e1
 801891c:	080189e1 	.word	0x080189e1
 8018920:	080189e1 	.word	0x080189e1
 8018924:	080189e1 	.word	0x080189e1
 8018928:	080189e1 	.word	0x080189e1
 801892c:	080189b9 	.word	0x080189b9
 8018930:	080189e1 	.word	0x080189e1
 8018934:	080189e1 	.word	0x080189e1
 8018938:	080189e1 	.word	0x080189e1
 801893c:	080189e1 	.word	0x080189e1
 8018940:	080189e1 	.word	0x080189e1
 8018944:	080189e1 	.word	0x080189e1
 8018948:	080189e1 	.word	0x080189e1
 801894c:	080189c1 	.word	0x080189c1
 8018950:	080189e1 	.word	0x080189e1
 8018954:	080189e1 	.word	0x080189e1
 8018958:	080189e1 	.word	0x080189e1
 801895c:	080189e1 	.word	0x080189e1
 8018960:	080189e1 	.word	0x080189e1
 8018964:	080189e1 	.word	0x080189e1
 8018968:	080189e1 	.word	0x080189e1
 801896c:	080189c9 	.word	0x080189c9
 8018970:	080189e1 	.word	0x080189e1
 8018974:	080189e1 	.word	0x080189e1
 8018978:	080189e1 	.word	0x080189e1
 801897c:	080189e1 	.word	0x080189e1
 8018980:	080189e1 	.word	0x080189e1
 8018984:	080189e1 	.word	0x080189e1
 8018988:	080189e1 	.word	0x080189e1
 801898c:	080189d1 	.word	0x080189d1
 8018990:	080189e1 	.word	0x080189e1
 8018994:	080189e1 	.word	0x080189e1
 8018998:	080189e1 	.word	0x080189e1
 801899c:	080189e1 	.word	0x080189e1
 80189a0:	080189e1 	.word	0x080189e1
 80189a4:	080189e1 	.word	0x080189e1
 80189a8:	080189e1 	.word	0x080189e1
 80189ac:	080189d9 	.word	0x080189d9
 80189b0:	2301      	movs	r3, #1
 80189b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189b6:	e1c0      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80189b8:	2304      	movs	r3, #4
 80189ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189be:	e1bc      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80189c0:	2308      	movs	r3, #8
 80189c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189c6:	e1b8      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80189c8:	2310      	movs	r3, #16
 80189ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189ce:	e1b4      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80189d0:	2320      	movs	r3, #32
 80189d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189d6:	e1b0      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80189d8:	2340      	movs	r3, #64	@ 0x40
 80189da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189de:	e1ac      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80189e0:	2380      	movs	r3, #128	@ 0x80
 80189e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80189e6:	e1a8      	b.n	8018d3a <UART_SetConfig+0x7ae>
 80189e8:	697b      	ldr	r3, [r7, #20]
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	4a75      	ldr	r2, [pc, #468]	@ (8018bc4 <UART_SetConfig+0x638>)
 80189ee:	4293      	cmp	r3, r2
 80189f0:	d130      	bne.n	8018a54 <UART_SetConfig+0x4c8>
 80189f2:	4b73      	ldr	r3, [pc, #460]	@ (8018bc0 <UART_SetConfig+0x634>)
 80189f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80189f6:	f003 0307 	and.w	r3, r3, #7
 80189fa:	2b05      	cmp	r3, #5
 80189fc:	d826      	bhi.n	8018a4c <UART_SetConfig+0x4c0>
 80189fe:	a201      	add	r2, pc, #4	@ (adr r2, 8018a04 <UART_SetConfig+0x478>)
 8018a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a04:	08018a1d 	.word	0x08018a1d
 8018a08:	08018a25 	.word	0x08018a25
 8018a0c:	08018a2d 	.word	0x08018a2d
 8018a10:	08018a35 	.word	0x08018a35
 8018a14:	08018a3d 	.word	0x08018a3d
 8018a18:	08018a45 	.word	0x08018a45
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a22:	e18a      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018a24:	2304      	movs	r3, #4
 8018a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a2a:	e186      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018a2c:	2308      	movs	r3, #8
 8018a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a32:	e182      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018a34:	2310      	movs	r3, #16
 8018a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a3a:	e17e      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018a3c:	2320      	movs	r3, #32
 8018a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a42:	e17a      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018a44:	2340      	movs	r3, #64	@ 0x40
 8018a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a4a:	e176      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018a4c:	2380      	movs	r3, #128	@ 0x80
 8018a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a52:	e172      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018a54:	697b      	ldr	r3, [r7, #20]
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	4a5b      	ldr	r2, [pc, #364]	@ (8018bc8 <UART_SetConfig+0x63c>)
 8018a5a:	4293      	cmp	r3, r2
 8018a5c:	d130      	bne.n	8018ac0 <UART_SetConfig+0x534>
 8018a5e:	4b58      	ldr	r3, [pc, #352]	@ (8018bc0 <UART_SetConfig+0x634>)
 8018a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018a62:	f003 0307 	and.w	r3, r3, #7
 8018a66:	2b05      	cmp	r3, #5
 8018a68:	d826      	bhi.n	8018ab8 <UART_SetConfig+0x52c>
 8018a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8018a70 <UART_SetConfig+0x4e4>)
 8018a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a70:	08018a89 	.word	0x08018a89
 8018a74:	08018a91 	.word	0x08018a91
 8018a78:	08018a99 	.word	0x08018a99
 8018a7c:	08018aa1 	.word	0x08018aa1
 8018a80:	08018aa9 	.word	0x08018aa9
 8018a84:	08018ab1 	.word	0x08018ab1
 8018a88:	2300      	movs	r3, #0
 8018a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a8e:	e154      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018a90:	2304      	movs	r3, #4
 8018a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a96:	e150      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018a98:	2308      	movs	r3, #8
 8018a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018a9e:	e14c      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018aa0:	2310      	movs	r3, #16
 8018aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018aa6:	e148      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018aa8:	2320      	movs	r3, #32
 8018aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018aae:	e144      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018ab0:	2340      	movs	r3, #64	@ 0x40
 8018ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ab6:	e140      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018ab8:	2380      	movs	r3, #128	@ 0x80
 8018aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018abe:	e13c      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018ac0:	697b      	ldr	r3, [r7, #20]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	4a41      	ldr	r2, [pc, #260]	@ (8018bcc <UART_SetConfig+0x640>)
 8018ac6:	4293      	cmp	r3, r2
 8018ac8:	f040 8082 	bne.w	8018bd0 <UART_SetConfig+0x644>
 8018acc:	4b3c      	ldr	r3, [pc, #240]	@ (8018bc0 <UART_SetConfig+0x634>)
 8018ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ad0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018ad4:	2b28      	cmp	r3, #40	@ 0x28
 8018ad6:	d86d      	bhi.n	8018bb4 <UART_SetConfig+0x628>
 8018ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8018ae0 <UART_SetConfig+0x554>)
 8018ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ade:	bf00      	nop
 8018ae0:	08018b85 	.word	0x08018b85
 8018ae4:	08018bb5 	.word	0x08018bb5
 8018ae8:	08018bb5 	.word	0x08018bb5
 8018aec:	08018bb5 	.word	0x08018bb5
 8018af0:	08018bb5 	.word	0x08018bb5
 8018af4:	08018bb5 	.word	0x08018bb5
 8018af8:	08018bb5 	.word	0x08018bb5
 8018afc:	08018bb5 	.word	0x08018bb5
 8018b00:	08018b8d 	.word	0x08018b8d
 8018b04:	08018bb5 	.word	0x08018bb5
 8018b08:	08018bb5 	.word	0x08018bb5
 8018b0c:	08018bb5 	.word	0x08018bb5
 8018b10:	08018bb5 	.word	0x08018bb5
 8018b14:	08018bb5 	.word	0x08018bb5
 8018b18:	08018bb5 	.word	0x08018bb5
 8018b1c:	08018bb5 	.word	0x08018bb5
 8018b20:	08018b95 	.word	0x08018b95
 8018b24:	08018bb5 	.word	0x08018bb5
 8018b28:	08018bb5 	.word	0x08018bb5
 8018b2c:	08018bb5 	.word	0x08018bb5
 8018b30:	08018bb5 	.word	0x08018bb5
 8018b34:	08018bb5 	.word	0x08018bb5
 8018b38:	08018bb5 	.word	0x08018bb5
 8018b3c:	08018bb5 	.word	0x08018bb5
 8018b40:	08018b9d 	.word	0x08018b9d
 8018b44:	08018bb5 	.word	0x08018bb5
 8018b48:	08018bb5 	.word	0x08018bb5
 8018b4c:	08018bb5 	.word	0x08018bb5
 8018b50:	08018bb5 	.word	0x08018bb5
 8018b54:	08018bb5 	.word	0x08018bb5
 8018b58:	08018bb5 	.word	0x08018bb5
 8018b5c:	08018bb5 	.word	0x08018bb5
 8018b60:	08018ba5 	.word	0x08018ba5
 8018b64:	08018bb5 	.word	0x08018bb5
 8018b68:	08018bb5 	.word	0x08018bb5
 8018b6c:	08018bb5 	.word	0x08018bb5
 8018b70:	08018bb5 	.word	0x08018bb5
 8018b74:	08018bb5 	.word	0x08018bb5
 8018b78:	08018bb5 	.word	0x08018bb5
 8018b7c:	08018bb5 	.word	0x08018bb5
 8018b80:	08018bad 	.word	0x08018bad
 8018b84:	2301      	movs	r3, #1
 8018b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b8a:	e0d6      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018b8c:	2304      	movs	r3, #4
 8018b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b92:	e0d2      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018b94:	2308      	movs	r3, #8
 8018b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b9a:	e0ce      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018b9c:	2310      	movs	r3, #16
 8018b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ba2:	e0ca      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018ba4:	2320      	movs	r3, #32
 8018ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018baa:	e0c6      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018bac:	2340      	movs	r3, #64	@ 0x40
 8018bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bb2:	e0c2      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018bb4:	2380      	movs	r3, #128	@ 0x80
 8018bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bba:	e0be      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018bbc:	40011400 	.word	0x40011400
 8018bc0:	58024400 	.word	0x58024400
 8018bc4:	40007800 	.word	0x40007800
 8018bc8:	40007c00 	.word	0x40007c00
 8018bcc:	40011800 	.word	0x40011800
 8018bd0:	697b      	ldr	r3, [r7, #20]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	4aad      	ldr	r2, [pc, #692]	@ (8018e8c <UART_SetConfig+0x900>)
 8018bd6:	4293      	cmp	r3, r2
 8018bd8:	d176      	bne.n	8018cc8 <UART_SetConfig+0x73c>
 8018bda:	4bad      	ldr	r3, [pc, #692]	@ (8018e90 <UART_SetConfig+0x904>)
 8018bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018bde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018be2:	2b28      	cmp	r3, #40	@ 0x28
 8018be4:	d86c      	bhi.n	8018cc0 <UART_SetConfig+0x734>
 8018be6:	a201      	add	r2, pc, #4	@ (adr r2, 8018bec <UART_SetConfig+0x660>)
 8018be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bec:	08018c91 	.word	0x08018c91
 8018bf0:	08018cc1 	.word	0x08018cc1
 8018bf4:	08018cc1 	.word	0x08018cc1
 8018bf8:	08018cc1 	.word	0x08018cc1
 8018bfc:	08018cc1 	.word	0x08018cc1
 8018c00:	08018cc1 	.word	0x08018cc1
 8018c04:	08018cc1 	.word	0x08018cc1
 8018c08:	08018cc1 	.word	0x08018cc1
 8018c0c:	08018c99 	.word	0x08018c99
 8018c10:	08018cc1 	.word	0x08018cc1
 8018c14:	08018cc1 	.word	0x08018cc1
 8018c18:	08018cc1 	.word	0x08018cc1
 8018c1c:	08018cc1 	.word	0x08018cc1
 8018c20:	08018cc1 	.word	0x08018cc1
 8018c24:	08018cc1 	.word	0x08018cc1
 8018c28:	08018cc1 	.word	0x08018cc1
 8018c2c:	08018ca1 	.word	0x08018ca1
 8018c30:	08018cc1 	.word	0x08018cc1
 8018c34:	08018cc1 	.word	0x08018cc1
 8018c38:	08018cc1 	.word	0x08018cc1
 8018c3c:	08018cc1 	.word	0x08018cc1
 8018c40:	08018cc1 	.word	0x08018cc1
 8018c44:	08018cc1 	.word	0x08018cc1
 8018c48:	08018cc1 	.word	0x08018cc1
 8018c4c:	08018ca9 	.word	0x08018ca9
 8018c50:	08018cc1 	.word	0x08018cc1
 8018c54:	08018cc1 	.word	0x08018cc1
 8018c58:	08018cc1 	.word	0x08018cc1
 8018c5c:	08018cc1 	.word	0x08018cc1
 8018c60:	08018cc1 	.word	0x08018cc1
 8018c64:	08018cc1 	.word	0x08018cc1
 8018c68:	08018cc1 	.word	0x08018cc1
 8018c6c:	08018cb1 	.word	0x08018cb1
 8018c70:	08018cc1 	.word	0x08018cc1
 8018c74:	08018cc1 	.word	0x08018cc1
 8018c78:	08018cc1 	.word	0x08018cc1
 8018c7c:	08018cc1 	.word	0x08018cc1
 8018c80:	08018cc1 	.word	0x08018cc1
 8018c84:	08018cc1 	.word	0x08018cc1
 8018c88:	08018cc1 	.word	0x08018cc1
 8018c8c:	08018cb9 	.word	0x08018cb9
 8018c90:	2301      	movs	r3, #1
 8018c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c96:	e050      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018c98:	2304      	movs	r3, #4
 8018c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c9e:	e04c      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018ca0:	2308      	movs	r3, #8
 8018ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ca6:	e048      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018ca8:	2310      	movs	r3, #16
 8018caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cae:	e044      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018cb0:	2320      	movs	r3, #32
 8018cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cb6:	e040      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018cb8:	2340      	movs	r3, #64	@ 0x40
 8018cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cbe:	e03c      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018cc0:	2380      	movs	r3, #128	@ 0x80
 8018cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cc6:	e038      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018cc8:	697b      	ldr	r3, [r7, #20]
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	4a71      	ldr	r2, [pc, #452]	@ (8018e94 <UART_SetConfig+0x908>)
 8018cce:	4293      	cmp	r3, r2
 8018cd0:	d130      	bne.n	8018d34 <UART_SetConfig+0x7a8>
 8018cd2:	4b6f      	ldr	r3, [pc, #444]	@ (8018e90 <UART_SetConfig+0x904>)
 8018cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018cd6:	f003 0307 	and.w	r3, r3, #7
 8018cda:	2b05      	cmp	r3, #5
 8018cdc:	d826      	bhi.n	8018d2c <UART_SetConfig+0x7a0>
 8018cde:	a201      	add	r2, pc, #4	@ (adr r2, 8018ce4 <UART_SetConfig+0x758>)
 8018ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ce4:	08018cfd 	.word	0x08018cfd
 8018ce8:	08018d05 	.word	0x08018d05
 8018cec:	08018d0d 	.word	0x08018d0d
 8018cf0:	08018d15 	.word	0x08018d15
 8018cf4:	08018d1d 	.word	0x08018d1d
 8018cf8:	08018d25 	.word	0x08018d25
 8018cfc:	2302      	movs	r3, #2
 8018cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d02:	e01a      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018d04:	2304      	movs	r3, #4
 8018d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d0a:	e016      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018d0c:	2308      	movs	r3, #8
 8018d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d12:	e012      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018d14:	2310      	movs	r3, #16
 8018d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d1a:	e00e      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018d1c:	2320      	movs	r3, #32
 8018d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d22:	e00a      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018d24:	2340      	movs	r3, #64	@ 0x40
 8018d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d2a:	e006      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018d2c:	2380      	movs	r3, #128	@ 0x80
 8018d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d32:	e002      	b.n	8018d3a <UART_SetConfig+0x7ae>
 8018d34:	2380      	movs	r3, #128	@ 0x80
 8018d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d3a:	697b      	ldr	r3, [r7, #20]
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	4a55      	ldr	r2, [pc, #340]	@ (8018e94 <UART_SetConfig+0x908>)
 8018d40:	4293      	cmp	r3, r2
 8018d42:	f040 80f8 	bne.w	8018f36 <UART_SetConfig+0x9aa>
 8018d46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018d4a:	2b20      	cmp	r3, #32
 8018d4c:	dc46      	bgt.n	8018ddc <UART_SetConfig+0x850>
 8018d4e:	2b02      	cmp	r3, #2
 8018d50:	db75      	blt.n	8018e3e <UART_SetConfig+0x8b2>
 8018d52:	3b02      	subs	r3, #2
 8018d54:	2b1e      	cmp	r3, #30
 8018d56:	d872      	bhi.n	8018e3e <UART_SetConfig+0x8b2>
 8018d58:	a201      	add	r2, pc, #4	@ (adr r2, 8018d60 <UART_SetConfig+0x7d4>)
 8018d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d5e:	bf00      	nop
 8018d60:	08018de3 	.word	0x08018de3
 8018d64:	08018e3f 	.word	0x08018e3f
 8018d68:	08018deb 	.word	0x08018deb
 8018d6c:	08018e3f 	.word	0x08018e3f
 8018d70:	08018e3f 	.word	0x08018e3f
 8018d74:	08018e3f 	.word	0x08018e3f
 8018d78:	08018dfb 	.word	0x08018dfb
 8018d7c:	08018e3f 	.word	0x08018e3f
 8018d80:	08018e3f 	.word	0x08018e3f
 8018d84:	08018e3f 	.word	0x08018e3f
 8018d88:	08018e3f 	.word	0x08018e3f
 8018d8c:	08018e3f 	.word	0x08018e3f
 8018d90:	08018e3f 	.word	0x08018e3f
 8018d94:	08018e3f 	.word	0x08018e3f
 8018d98:	08018e0b 	.word	0x08018e0b
 8018d9c:	08018e3f 	.word	0x08018e3f
 8018da0:	08018e3f 	.word	0x08018e3f
 8018da4:	08018e3f 	.word	0x08018e3f
 8018da8:	08018e3f 	.word	0x08018e3f
 8018dac:	08018e3f 	.word	0x08018e3f
 8018db0:	08018e3f 	.word	0x08018e3f
 8018db4:	08018e3f 	.word	0x08018e3f
 8018db8:	08018e3f 	.word	0x08018e3f
 8018dbc:	08018e3f 	.word	0x08018e3f
 8018dc0:	08018e3f 	.word	0x08018e3f
 8018dc4:	08018e3f 	.word	0x08018e3f
 8018dc8:	08018e3f 	.word	0x08018e3f
 8018dcc:	08018e3f 	.word	0x08018e3f
 8018dd0:	08018e3f 	.word	0x08018e3f
 8018dd4:	08018e3f 	.word	0x08018e3f
 8018dd8:	08018e31 	.word	0x08018e31
 8018ddc:	2b40      	cmp	r3, #64	@ 0x40
 8018dde:	d02a      	beq.n	8018e36 <UART_SetConfig+0x8aa>
 8018de0:	e02d      	b.n	8018e3e <UART_SetConfig+0x8b2>
 8018de2:	f7fa fda1 	bl	8013928 <HAL_RCCEx_GetD3PCLK1Freq>
 8018de6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8018de8:	e02f      	b.n	8018e4a <UART_SetConfig+0x8be>
 8018dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018dee:	4618      	mov	r0, r3
 8018df0:	f7fa fdb0 	bl	8013954 <HAL_RCCEx_GetPLL2ClockFreq>
 8018df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018df8:	e027      	b.n	8018e4a <UART_SetConfig+0x8be>
 8018dfa:	f107 0318 	add.w	r3, r7, #24
 8018dfe:	4618      	mov	r0, r3
 8018e00:	f7fa fefc 	bl	8013bfc <HAL_RCCEx_GetPLL3ClockFreq>
 8018e04:	69fb      	ldr	r3, [r7, #28]
 8018e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018e08:	e01f      	b.n	8018e4a <UART_SetConfig+0x8be>
 8018e0a:	4b21      	ldr	r3, [pc, #132]	@ (8018e90 <UART_SetConfig+0x904>)
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	f003 0320 	and.w	r3, r3, #32
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d009      	beq.n	8018e2a <UART_SetConfig+0x89e>
 8018e16:	4b1e      	ldr	r3, [pc, #120]	@ (8018e90 <UART_SetConfig+0x904>)
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	08db      	lsrs	r3, r3, #3
 8018e1c:	f003 0303 	and.w	r3, r3, #3
 8018e20:	4a1d      	ldr	r2, [pc, #116]	@ (8018e98 <UART_SetConfig+0x90c>)
 8018e22:	fa22 f303 	lsr.w	r3, r2, r3
 8018e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018e28:	e00f      	b.n	8018e4a <UART_SetConfig+0x8be>
 8018e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8018e98 <UART_SetConfig+0x90c>)
 8018e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018e2e:	e00c      	b.n	8018e4a <UART_SetConfig+0x8be>
 8018e30:	4b1a      	ldr	r3, [pc, #104]	@ (8018e9c <UART_SetConfig+0x910>)
 8018e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018e34:	e009      	b.n	8018e4a <UART_SetConfig+0x8be>
 8018e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018e3c:	e005      	b.n	8018e4a <UART_SetConfig+0x8be>
 8018e3e:	2300      	movs	r3, #0
 8018e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018e42:	2301      	movs	r3, #1
 8018e44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018e48:	bf00      	nop
 8018e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	f000 81ee 	beq.w	801922e <UART_SetConfig+0xca2>
 8018e52:	697b      	ldr	r3, [r7, #20]
 8018e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e56:	4a12      	ldr	r2, [pc, #72]	@ (8018ea0 <UART_SetConfig+0x914>)
 8018e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018e5c:	461a      	mov	r2, r3
 8018e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8018e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8018e66:	697b      	ldr	r3, [r7, #20]
 8018e68:	685a      	ldr	r2, [r3, #4]
 8018e6a:	4613      	mov	r3, r2
 8018e6c:	005b      	lsls	r3, r3, #1
 8018e6e:	4413      	add	r3, r2
 8018e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018e72:	429a      	cmp	r2, r3
 8018e74:	d305      	bcc.n	8018e82 <UART_SetConfig+0x8f6>
 8018e76:	697b      	ldr	r3, [r7, #20]
 8018e78:	685b      	ldr	r3, [r3, #4]
 8018e7a:	031b      	lsls	r3, r3, #12
 8018e7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018e7e:	429a      	cmp	r2, r3
 8018e80:	d910      	bls.n	8018ea4 <UART_SetConfig+0x918>
 8018e82:	2301      	movs	r3, #1
 8018e84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018e88:	e1d1      	b.n	801922e <UART_SetConfig+0xca2>
 8018e8a:	bf00      	nop
 8018e8c:	40011c00 	.word	0x40011c00
 8018e90:	58024400 	.word	0x58024400
 8018e94:	58000c00 	.word	0x58000c00
 8018e98:	03d09000 	.word	0x03d09000
 8018e9c:	003d0900 	.word	0x003d0900
 8018ea0:	0801e774 	.word	0x0801e774
 8018ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ea6:	2200      	movs	r2, #0
 8018ea8:	60bb      	str	r3, [r7, #8]
 8018eaa:	60fa      	str	r2, [r7, #12]
 8018eac:	697b      	ldr	r3, [r7, #20]
 8018eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018eb0:	4ac0      	ldr	r2, [pc, #768]	@ (80191b4 <UART_SetConfig+0xc28>)
 8018eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018eb6:	b29b      	uxth	r3, r3
 8018eb8:	2200      	movs	r2, #0
 8018eba:	603b      	str	r3, [r7, #0]
 8018ebc:	607a      	str	r2, [r7, #4]
 8018ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ec2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018ec6:	f7e7 fa73 	bl	80003b0 <__aeabi_uldivmod>
 8018eca:	4602      	mov	r2, r0
 8018ecc:	460b      	mov	r3, r1
 8018ece:	4610      	mov	r0, r2
 8018ed0:	4619      	mov	r1, r3
 8018ed2:	f04f 0200 	mov.w	r2, #0
 8018ed6:	f04f 0300 	mov.w	r3, #0
 8018eda:	020b      	lsls	r3, r1, #8
 8018edc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018ee0:	0202      	lsls	r2, r0, #8
 8018ee2:	6979      	ldr	r1, [r7, #20]
 8018ee4:	6849      	ldr	r1, [r1, #4]
 8018ee6:	0849      	lsrs	r1, r1, #1
 8018ee8:	2000      	movs	r0, #0
 8018eea:	460c      	mov	r4, r1
 8018eec:	4605      	mov	r5, r0
 8018eee:	eb12 0804 	adds.w	r8, r2, r4
 8018ef2:	eb43 0905 	adc.w	r9, r3, r5
 8018ef6:	697b      	ldr	r3, [r7, #20]
 8018ef8:	685b      	ldr	r3, [r3, #4]
 8018efa:	2200      	movs	r2, #0
 8018efc:	469a      	mov	sl, r3
 8018efe:	4693      	mov	fp, r2
 8018f00:	4652      	mov	r2, sl
 8018f02:	465b      	mov	r3, fp
 8018f04:	4640      	mov	r0, r8
 8018f06:	4649      	mov	r1, r9
 8018f08:	f7e7 fa52 	bl	80003b0 <__aeabi_uldivmod>
 8018f0c:	4602      	mov	r2, r0
 8018f0e:	460b      	mov	r3, r1
 8018f10:	4613      	mov	r3, r2
 8018f12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018f1a:	d308      	bcc.n	8018f2e <UART_SetConfig+0x9a2>
 8018f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018f22:	d204      	bcs.n	8018f2e <UART_SetConfig+0x9a2>
 8018f24:	697b      	ldr	r3, [r7, #20]
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018f2a:	60da      	str	r2, [r3, #12]
 8018f2c:	e17f      	b.n	801922e <UART_SetConfig+0xca2>
 8018f2e:	2301      	movs	r3, #1
 8018f30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018f34:	e17b      	b.n	801922e <UART_SetConfig+0xca2>
 8018f36:	697b      	ldr	r3, [r7, #20]
 8018f38:	69db      	ldr	r3, [r3, #28]
 8018f3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018f3e:	f040 80bd 	bne.w	80190bc <UART_SetConfig+0xb30>
 8018f42:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018f46:	2b20      	cmp	r3, #32
 8018f48:	dc48      	bgt.n	8018fdc <UART_SetConfig+0xa50>
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	db7b      	blt.n	8019046 <UART_SetConfig+0xaba>
 8018f4e:	2b20      	cmp	r3, #32
 8018f50:	d879      	bhi.n	8019046 <UART_SetConfig+0xaba>
 8018f52:	a201      	add	r2, pc, #4	@ (adr r2, 8018f58 <UART_SetConfig+0x9cc>)
 8018f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f58:	08018fe3 	.word	0x08018fe3
 8018f5c:	08018feb 	.word	0x08018feb
 8018f60:	08019047 	.word	0x08019047
 8018f64:	08019047 	.word	0x08019047
 8018f68:	08018ff3 	.word	0x08018ff3
 8018f6c:	08019047 	.word	0x08019047
 8018f70:	08019047 	.word	0x08019047
 8018f74:	08019047 	.word	0x08019047
 8018f78:	08019003 	.word	0x08019003
 8018f7c:	08019047 	.word	0x08019047
 8018f80:	08019047 	.word	0x08019047
 8018f84:	08019047 	.word	0x08019047
 8018f88:	08019047 	.word	0x08019047
 8018f8c:	08019047 	.word	0x08019047
 8018f90:	08019047 	.word	0x08019047
 8018f94:	08019047 	.word	0x08019047
 8018f98:	08019013 	.word	0x08019013
 8018f9c:	08019047 	.word	0x08019047
 8018fa0:	08019047 	.word	0x08019047
 8018fa4:	08019047 	.word	0x08019047
 8018fa8:	08019047 	.word	0x08019047
 8018fac:	08019047 	.word	0x08019047
 8018fb0:	08019047 	.word	0x08019047
 8018fb4:	08019047 	.word	0x08019047
 8018fb8:	08019047 	.word	0x08019047
 8018fbc:	08019047 	.word	0x08019047
 8018fc0:	08019047 	.word	0x08019047
 8018fc4:	08019047 	.word	0x08019047
 8018fc8:	08019047 	.word	0x08019047
 8018fcc:	08019047 	.word	0x08019047
 8018fd0:	08019047 	.word	0x08019047
 8018fd4:	08019047 	.word	0x08019047
 8018fd8:	08019039 	.word	0x08019039
 8018fdc:	2b40      	cmp	r3, #64	@ 0x40
 8018fde:	d02e      	beq.n	801903e <UART_SetConfig+0xab2>
 8018fe0:	e031      	b.n	8019046 <UART_SetConfig+0xaba>
 8018fe2:	f7f8 fe03 	bl	8011bec <HAL_RCC_GetPCLK1Freq>
 8018fe6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8018fe8:	e033      	b.n	8019052 <UART_SetConfig+0xac6>
 8018fea:	f7f8 fe15 	bl	8011c18 <HAL_RCC_GetPCLK2Freq>
 8018fee:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8018ff0:	e02f      	b.n	8019052 <UART_SetConfig+0xac6>
 8018ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	f7fa fcac 	bl	8013954 <HAL_RCCEx_GetPLL2ClockFreq>
 8018ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019000:	e027      	b.n	8019052 <UART_SetConfig+0xac6>
 8019002:	f107 0318 	add.w	r3, r7, #24
 8019006:	4618      	mov	r0, r3
 8019008:	f7fa fdf8 	bl	8013bfc <HAL_RCCEx_GetPLL3ClockFreq>
 801900c:	69fb      	ldr	r3, [r7, #28]
 801900e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019010:	e01f      	b.n	8019052 <UART_SetConfig+0xac6>
 8019012:	4b69      	ldr	r3, [pc, #420]	@ (80191b8 <UART_SetConfig+0xc2c>)
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	f003 0320 	and.w	r3, r3, #32
 801901a:	2b00      	cmp	r3, #0
 801901c:	d009      	beq.n	8019032 <UART_SetConfig+0xaa6>
 801901e:	4b66      	ldr	r3, [pc, #408]	@ (80191b8 <UART_SetConfig+0xc2c>)
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	08db      	lsrs	r3, r3, #3
 8019024:	f003 0303 	and.w	r3, r3, #3
 8019028:	4a64      	ldr	r2, [pc, #400]	@ (80191bc <UART_SetConfig+0xc30>)
 801902a:	fa22 f303 	lsr.w	r3, r2, r3
 801902e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019030:	e00f      	b.n	8019052 <UART_SetConfig+0xac6>
 8019032:	4b62      	ldr	r3, [pc, #392]	@ (80191bc <UART_SetConfig+0xc30>)
 8019034:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019036:	e00c      	b.n	8019052 <UART_SetConfig+0xac6>
 8019038:	4b61      	ldr	r3, [pc, #388]	@ (80191c0 <UART_SetConfig+0xc34>)
 801903a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801903c:	e009      	b.n	8019052 <UART_SetConfig+0xac6>
 801903e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019044:	e005      	b.n	8019052 <UART_SetConfig+0xac6>
 8019046:	2300      	movs	r3, #0
 8019048:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801904a:	2301      	movs	r3, #1
 801904c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019050:	bf00      	nop
 8019052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019054:	2b00      	cmp	r3, #0
 8019056:	f000 80ea 	beq.w	801922e <UART_SetConfig+0xca2>
 801905a:	697b      	ldr	r3, [r7, #20]
 801905c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801905e:	4a55      	ldr	r2, [pc, #340]	@ (80191b4 <UART_SetConfig+0xc28>)
 8019060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019064:	461a      	mov	r2, r3
 8019066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019068:	fbb3 f3f2 	udiv	r3, r3, r2
 801906c:	005a      	lsls	r2, r3, #1
 801906e:	697b      	ldr	r3, [r7, #20]
 8019070:	685b      	ldr	r3, [r3, #4]
 8019072:	085b      	lsrs	r3, r3, #1
 8019074:	441a      	add	r2, r3
 8019076:	697b      	ldr	r3, [r7, #20]
 8019078:	685b      	ldr	r3, [r3, #4]
 801907a:	fbb2 f3f3 	udiv	r3, r2, r3
 801907e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019082:	2b0f      	cmp	r3, #15
 8019084:	d916      	bls.n	80190b4 <UART_SetConfig+0xb28>
 8019086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801908c:	d212      	bcs.n	80190b4 <UART_SetConfig+0xb28>
 801908e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019090:	b29b      	uxth	r3, r3
 8019092:	f023 030f 	bic.w	r3, r3, #15
 8019096:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8019098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801909a:	085b      	lsrs	r3, r3, #1
 801909c:	b29b      	uxth	r3, r3
 801909e:	f003 0307 	and.w	r3, r3, #7
 80190a2:	b29a      	uxth	r2, r3
 80190a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80190a6:	4313      	orrs	r3, r2
 80190a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80190aa:	697b      	ldr	r3, [r7, #20]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80190b0:	60da      	str	r2, [r3, #12]
 80190b2:	e0bc      	b.n	801922e <UART_SetConfig+0xca2>
 80190b4:	2301      	movs	r3, #1
 80190b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80190ba:	e0b8      	b.n	801922e <UART_SetConfig+0xca2>
 80190bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80190c0:	2b20      	cmp	r3, #32
 80190c2:	dc4b      	bgt.n	801915c <UART_SetConfig+0xbd0>
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	f2c0 8087 	blt.w	80191d8 <UART_SetConfig+0xc4c>
 80190ca:	2b20      	cmp	r3, #32
 80190cc:	f200 8084 	bhi.w	80191d8 <UART_SetConfig+0xc4c>
 80190d0:	a201      	add	r2, pc, #4	@ (adr r2, 80190d8 <UART_SetConfig+0xb4c>)
 80190d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190d6:	bf00      	nop
 80190d8:	08019163 	.word	0x08019163
 80190dc:	0801916b 	.word	0x0801916b
 80190e0:	080191d9 	.word	0x080191d9
 80190e4:	080191d9 	.word	0x080191d9
 80190e8:	08019173 	.word	0x08019173
 80190ec:	080191d9 	.word	0x080191d9
 80190f0:	080191d9 	.word	0x080191d9
 80190f4:	080191d9 	.word	0x080191d9
 80190f8:	08019183 	.word	0x08019183
 80190fc:	080191d9 	.word	0x080191d9
 8019100:	080191d9 	.word	0x080191d9
 8019104:	080191d9 	.word	0x080191d9
 8019108:	080191d9 	.word	0x080191d9
 801910c:	080191d9 	.word	0x080191d9
 8019110:	080191d9 	.word	0x080191d9
 8019114:	080191d9 	.word	0x080191d9
 8019118:	08019193 	.word	0x08019193
 801911c:	080191d9 	.word	0x080191d9
 8019120:	080191d9 	.word	0x080191d9
 8019124:	080191d9 	.word	0x080191d9
 8019128:	080191d9 	.word	0x080191d9
 801912c:	080191d9 	.word	0x080191d9
 8019130:	080191d9 	.word	0x080191d9
 8019134:	080191d9 	.word	0x080191d9
 8019138:	080191d9 	.word	0x080191d9
 801913c:	080191d9 	.word	0x080191d9
 8019140:	080191d9 	.word	0x080191d9
 8019144:	080191d9 	.word	0x080191d9
 8019148:	080191d9 	.word	0x080191d9
 801914c:	080191d9 	.word	0x080191d9
 8019150:	080191d9 	.word	0x080191d9
 8019154:	080191d9 	.word	0x080191d9
 8019158:	080191cb 	.word	0x080191cb
 801915c:	2b40      	cmp	r3, #64	@ 0x40
 801915e:	d037      	beq.n	80191d0 <UART_SetConfig+0xc44>
 8019160:	e03a      	b.n	80191d8 <UART_SetConfig+0xc4c>
 8019162:	f7f8 fd43 	bl	8011bec <HAL_RCC_GetPCLK1Freq>
 8019166:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8019168:	e03c      	b.n	80191e4 <UART_SetConfig+0xc58>
 801916a:	f7f8 fd55 	bl	8011c18 <HAL_RCC_GetPCLK2Freq>
 801916e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8019170:	e038      	b.n	80191e4 <UART_SetConfig+0xc58>
 8019172:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019176:	4618      	mov	r0, r3
 8019178:	f7fa fbec 	bl	8013954 <HAL_RCCEx_GetPLL2ClockFreq>
 801917c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801917e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019180:	e030      	b.n	80191e4 <UART_SetConfig+0xc58>
 8019182:	f107 0318 	add.w	r3, r7, #24
 8019186:	4618      	mov	r0, r3
 8019188:	f7fa fd38 	bl	8013bfc <HAL_RCCEx_GetPLL3ClockFreq>
 801918c:	69fb      	ldr	r3, [r7, #28]
 801918e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019190:	e028      	b.n	80191e4 <UART_SetConfig+0xc58>
 8019192:	4b09      	ldr	r3, [pc, #36]	@ (80191b8 <UART_SetConfig+0xc2c>)
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	f003 0320 	and.w	r3, r3, #32
 801919a:	2b00      	cmp	r3, #0
 801919c:	d012      	beq.n	80191c4 <UART_SetConfig+0xc38>
 801919e:	4b06      	ldr	r3, [pc, #24]	@ (80191b8 <UART_SetConfig+0xc2c>)
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	08db      	lsrs	r3, r3, #3
 80191a4:	f003 0303 	and.w	r3, r3, #3
 80191a8:	4a04      	ldr	r2, [pc, #16]	@ (80191bc <UART_SetConfig+0xc30>)
 80191aa:	fa22 f303 	lsr.w	r3, r2, r3
 80191ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80191b0:	e018      	b.n	80191e4 <UART_SetConfig+0xc58>
 80191b2:	bf00      	nop
 80191b4:	0801e774 	.word	0x0801e774
 80191b8:	58024400 	.word	0x58024400
 80191bc:	03d09000 	.word	0x03d09000
 80191c0:	003d0900 	.word	0x003d0900
 80191c4:	4b24      	ldr	r3, [pc, #144]	@ (8019258 <UART_SetConfig+0xccc>)
 80191c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80191c8:	e00c      	b.n	80191e4 <UART_SetConfig+0xc58>
 80191ca:	4b24      	ldr	r3, [pc, #144]	@ (801925c <UART_SetConfig+0xcd0>)
 80191cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80191ce:	e009      	b.n	80191e4 <UART_SetConfig+0xc58>
 80191d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80191d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80191d6:	e005      	b.n	80191e4 <UART_SetConfig+0xc58>
 80191d8:	2300      	movs	r3, #0
 80191da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80191dc:	2301      	movs	r3, #1
 80191de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80191e2:	bf00      	nop
 80191e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d021      	beq.n	801922e <UART_SetConfig+0xca2>
 80191ea:	697b      	ldr	r3, [r7, #20]
 80191ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80191ee:	4a1c      	ldr	r2, [pc, #112]	@ (8019260 <UART_SetConfig+0xcd4>)
 80191f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80191f4:	461a      	mov	r2, r3
 80191f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80191fc:	697b      	ldr	r3, [r7, #20]
 80191fe:	685b      	ldr	r3, [r3, #4]
 8019200:	085b      	lsrs	r3, r3, #1
 8019202:	441a      	add	r2, r3
 8019204:	697b      	ldr	r3, [r7, #20]
 8019206:	685b      	ldr	r3, [r3, #4]
 8019208:	fbb2 f3f3 	udiv	r3, r2, r3
 801920c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801920e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019210:	2b0f      	cmp	r3, #15
 8019212:	d909      	bls.n	8019228 <UART_SetConfig+0xc9c>
 8019214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019216:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801921a:	d205      	bcs.n	8019228 <UART_SetConfig+0xc9c>
 801921c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801921e:	b29a      	uxth	r2, r3
 8019220:	697b      	ldr	r3, [r7, #20]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	60da      	str	r2, [r3, #12]
 8019226:	e002      	b.n	801922e <UART_SetConfig+0xca2>
 8019228:	2301      	movs	r3, #1
 801922a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801922e:	697b      	ldr	r3, [r7, #20]
 8019230:	2201      	movs	r2, #1
 8019232:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8019236:	697b      	ldr	r3, [r7, #20]
 8019238:	2201      	movs	r2, #1
 801923a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801923e:	697b      	ldr	r3, [r7, #20]
 8019240:	2200      	movs	r2, #0
 8019242:	675a      	str	r2, [r3, #116]	@ 0x74
 8019244:	697b      	ldr	r3, [r7, #20]
 8019246:	2200      	movs	r2, #0
 8019248:	679a      	str	r2, [r3, #120]	@ 0x78
 801924a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 801924e:	4618      	mov	r0, r3
 8019250:	3748      	adds	r7, #72	@ 0x48
 8019252:	46bd      	mov	sp, r7
 8019254:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019258:	03d09000 	.word	0x03d09000
 801925c:	003d0900 	.word	0x003d0900
 8019260:	0801e774 	.word	0x0801e774

08019264 <UART_AdvFeatureConfig>:
 8019264:	b480      	push	{r7}
 8019266:	b083      	sub	sp, #12
 8019268:	af00      	add	r7, sp, #0
 801926a:	6078      	str	r0, [r7, #4]
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019270:	f003 0308 	and.w	r3, r3, #8
 8019274:	2b00      	cmp	r3, #0
 8019276:	d00a      	beq.n	801928e <UART_AdvFeatureConfig+0x2a>
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	685b      	ldr	r3, [r3, #4]
 801927e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	430a      	orrs	r2, r1
 801928c:	605a      	str	r2, [r3, #4]
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019292:	f003 0301 	and.w	r3, r3, #1
 8019296:	2b00      	cmp	r3, #0
 8019298:	d00a      	beq.n	80192b0 <UART_AdvFeatureConfig+0x4c>
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	685b      	ldr	r3, [r3, #4]
 80192a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	430a      	orrs	r2, r1
 80192ae:	605a      	str	r2, [r3, #4]
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80192b4:	f003 0302 	and.w	r3, r3, #2
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d00a      	beq.n	80192d2 <UART_AdvFeatureConfig+0x6e>
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	685b      	ldr	r3, [r3, #4]
 80192c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	430a      	orrs	r2, r1
 80192d0:	605a      	str	r2, [r3, #4]
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80192d6:	f003 0304 	and.w	r3, r3, #4
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d00a      	beq.n	80192f4 <UART_AdvFeatureConfig+0x90>
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	685b      	ldr	r3, [r3, #4]
 80192e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	430a      	orrs	r2, r1
 80192f2:	605a      	str	r2, [r3, #4]
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80192f8:	f003 0310 	and.w	r3, r3, #16
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d00a      	beq.n	8019316 <UART_AdvFeatureConfig+0xb2>
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	689b      	ldr	r3, [r3, #8]
 8019306:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	430a      	orrs	r2, r1
 8019314:	609a      	str	r2, [r3, #8]
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801931a:	f003 0320 	and.w	r3, r3, #32
 801931e:	2b00      	cmp	r3, #0
 8019320:	d00a      	beq.n	8019338 <UART_AdvFeatureConfig+0xd4>
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	689b      	ldr	r3, [r3, #8]
 8019328:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	430a      	orrs	r2, r1
 8019336:	609a      	str	r2, [r3, #8]
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801933c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019340:	2b00      	cmp	r3, #0
 8019342:	d01a      	beq.n	801937a <UART_AdvFeatureConfig+0x116>
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	685b      	ldr	r3, [r3, #4]
 801934a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	430a      	orrs	r2, r1
 8019358:	605a      	str	r2, [r3, #4]
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801935e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019362:	d10a      	bne.n	801937a <UART_AdvFeatureConfig+0x116>
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	685b      	ldr	r3, [r3, #4]
 801936a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	430a      	orrs	r2, r1
 8019378:	605a      	str	r2, [r3, #4]
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801937e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019382:	2b00      	cmp	r3, #0
 8019384:	d00a      	beq.n	801939c <UART_AdvFeatureConfig+0x138>
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	685b      	ldr	r3, [r3, #4]
 801938c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	430a      	orrs	r2, r1
 801939a:	605a      	str	r2, [r3, #4]
 801939c:	bf00      	nop
 801939e:	370c      	adds	r7, #12
 80193a0:	46bd      	mov	sp, r7
 80193a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a6:	4770      	bx	lr

080193a8 <UART_CheckIdleState>:
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b098      	sub	sp, #96	@ 0x60
 80193ac:	af02      	add	r7, sp, #8
 80193ae:	6078      	str	r0, [r7, #4]
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	2200      	movs	r2, #0
 80193b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80193b8:	f7ef fe88 	bl	80090cc <HAL_GetTick>
 80193bc:	6578      	str	r0, [r7, #84]	@ 0x54
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	f003 0308 	and.w	r3, r3, #8
 80193c8:	2b08      	cmp	r3, #8
 80193ca:	d12f      	bne.n	801942c <UART_CheckIdleState+0x84>
 80193cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80193d0:	9300      	str	r3, [sp, #0]
 80193d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193d4:	2200      	movs	r2, #0
 80193d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80193da:	6878      	ldr	r0, [r7, #4]
 80193dc:	f000 f88e 	bl	80194fc <UART_WaitOnFlagUntilTimeout>
 80193e0:	4603      	mov	r3, r0
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	d022      	beq.n	801942c <UART_CheckIdleState+0x84>
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80193ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193ee:	e853 3f00 	ldrex	r3, [r3]
 80193f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80193f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80193f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80193fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	461a      	mov	r2, r3
 8019402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019404:	647b      	str	r3, [r7, #68]	@ 0x44
 8019406:	643a      	str	r2, [r7, #64]	@ 0x40
 8019408:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801940a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801940c:	e841 2300 	strex	r3, r2, [r1]
 8019410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019414:	2b00      	cmp	r3, #0
 8019416:	d1e6      	bne.n	80193e6 <UART_CheckIdleState+0x3e>
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	2220      	movs	r2, #32
 801941c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	2200      	movs	r2, #0
 8019424:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8019428:	2303      	movs	r3, #3
 801942a:	e063      	b.n	80194f4 <UART_CheckIdleState+0x14c>
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	f003 0304 	and.w	r3, r3, #4
 8019436:	2b04      	cmp	r3, #4
 8019438:	d149      	bne.n	80194ce <UART_CheckIdleState+0x126>
 801943a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801943e:	9300      	str	r3, [sp, #0]
 8019440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019442:	2200      	movs	r2, #0
 8019444:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8019448:	6878      	ldr	r0, [r7, #4]
 801944a:	f000 f857 	bl	80194fc <UART_WaitOnFlagUntilTimeout>
 801944e:	4603      	mov	r3, r0
 8019450:	2b00      	cmp	r3, #0
 8019452:	d03c      	beq.n	80194ce <UART_CheckIdleState+0x126>
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	627b      	str	r3, [r7, #36]	@ 0x24
 801945a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801945c:	e853 3f00 	ldrex	r3, [r3]
 8019460:	623b      	str	r3, [r7, #32]
 8019462:	6a3b      	ldr	r3, [r7, #32]
 8019464:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019468:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	461a      	mov	r2, r3
 8019470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019472:	633b      	str	r3, [r7, #48]	@ 0x30
 8019474:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019476:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801947a:	e841 2300 	strex	r3, r2, [r1]
 801947e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019482:	2b00      	cmp	r3, #0
 8019484:	d1e6      	bne.n	8019454 <UART_CheckIdleState+0xac>
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	3308      	adds	r3, #8
 801948c:	613b      	str	r3, [r7, #16]
 801948e:	693b      	ldr	r3, [r7, #16]
 8019490:	e853 3f00 	ldrex	r3, [r3]
 8019494:	60fb      	str	r3, [r7, #12]
 8019496:	68fb      	ldr	r3, [r7, #12]
 8019498:	f023 0301 	bic.w	r3, r3, #1
 801949c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	3308      	adds	r3, #8
 80194a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80194a6:	61fa      	str	r2, [r7, #28]
 80194a8:	61bb      	str	r3, [r7, #24]
 80194aa:	69b9      	ldr	r1, [r7, #24]
 80194ac:	69fa      	ldr	r2, [r7, #28]
 80194ae:	e841 2300 	strex	r3, r2, [r1]
 80194b2:	617b      	str	r3, [r7, #20]
 80194b4:	697b      	ldr	r3, [r7, #20]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d1e5      	bne.n	8019486 <UART_CheckIdleState+0xde>
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	2220      	movs	r2, #32
 80194be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	2200      	movs	r2, #0
 80194c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80194ca:	2303      	movs	r3, #3
 80194cc:	e012      	b.n	80194f4 <UART_CheckIdleState+0x14c>
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	2220      	movs	r2, #32
 80194d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	2220      	movs	r2, #32
 80194da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	2200      	movs	r2, #0
 80194e2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	2200      	movs	r2, #0
 80194e8:	671a      	str	r2, [r3, #112]	@ 0x70
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	2200      	movs	r2, #0
 80194ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80194f2:	2300      	movs	r3, #0
 80194f4:	4618      	mov	r0, r3
 80194f6:	3758      	adds	r7, #88	@ 0x58
 80194f8:	46bd      	mov	sp, r7
 80194fa:	bd80      	pop	{r7, pc}

080194fc <UART_WaitOnFlagUntilTimeout>:
 80194fc:	b580      	push	{r7, lr}
 80194fe:	b084      	sub	sp, #16
 8019500:	af00      	add	r7, sp, #0
 8019502:	60f8      	str	r0, [r7, #12]
 8019504:	60b9      	str	r1, [r7, #8]
 8019506:	603b      	str	r3, [r7, #0]
 8019508:	4613      	mov	r3, r2
 801950a:	71fb      	strb	r3, [r7, #7]
 801950c:	e04f      	b.n	80195ae <UART_WaitOnFlagUntilTimeout+0xb2>
 801950e:	69bb      	ldr	r3, [r7, #24]
 8019510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019514:	d04b      	beq.n	80195ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8019516:	f7ef fdd9 	bl	80090cc <HAL_GetTick>
 801951a:	4602      	mov	r2, r0
 801951c:	683b      	ldr	r3, [r7, #0]
 801951e:	1ad3      	subs	r3, r2, r3
 8019520:	69ba      	ldr	r2, [r7, #24]
 8019522:	429a      	cmp	r2, r3
 8019524:	d302      	bcc.n	801952c <UART_WaitOnFlagUntilTimeout+0x30>
 8019526:	69bb      	ldr	r3, [r7, #24]
 8019528:	2b00      	cmp	r3, #0
 801952a:	d101      	bne.n	8019530 <UART_WaitOnFlagUntilTimeout+0x34>
 801952c:	2303      	movs	r3, #3
 801952e:	e04e      	b.n	80195ce <UART_WaitOnFlagUntilTimeout+0xd2>
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	f003 0304 	and.w	r3, r3, #4
 801953a:	2b00      	cmp	r3, #0
 801953c:	d037      	beq.n	80195ae <UART_WaitOnFlagUntilTimeout+0xb2>
 801953e:	68bb      	ldr	r3, [r7, #8]
 8019540:	2b80      	cmp	r3, #128	@ 0x80
 8019542:	d034      	beq.n	80195ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8019544:	68bb      	ldr	r3, [r7, #8]
 8019546:	2b40      	cmp	r3, #64	@ 0x40
 8019548:	d031      	beq.n	80195ae <UART_WaitOnFlagUntilTimeout+0xb2>
 801954a:	68fb      	ldr	r3, [r7, #12]
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	69db      	ldr	r3, [r3, #28]
 8019550:	f003 0308 	and.w	r3, r3, #8
 8019554:	2b08      	cmp	r3, #8
 8019556:	d110      	bne.n	801957a <UART_WaitOnFlagUntilTimeout+0x7e>
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	2208      	movs	r2, #8
 801955e:	621a      	str	r2, [r3, #32]
 8019560:	68f8      	ldr	r0, [r7, #12]
 8019562:	f000 f95b 	bl	801981c <UART_EndRxTransfer>
 8019566:	68fb      	ldr	r3, [r7, #12]
 8019568:	2208      	movs	r2, #8
 801956a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	2200      	movs	r2, #0
 8019572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8019576:	2301      	movs	r3, #1
 8019578:	e029      	b.n	80195ce <UART_WaitOnFlagUntilTimeout+0xd2>
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	69db      	ldr	r3, [r3, #28]
 8019580:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019584:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019588:	d111      	bne.n	80195ae <UART_WaitOnFlagUntilTimeout+0xb2>
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019592:	621a      	str	r2, [r3, #32]
 8019594:	68f8      	ldr	r0, [r7, #12]
 8019596:	f000 f941 	bl	801981c <UART_EndRxTransfer>
 801959a:	68fb      	ldr	r3, [r7, #12]
 801959c:	2220      	movs	r2, #32
 801959e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	2200      	movs	r2, #0
 80195a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80195aa:	2303      	movs	r3, #3
 80195ac:	e00f      	b.n	80195ce <UART_WaitOnFlagUntilTimeout+0xd2>
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	69da      	ldr	r2, [r3, #28]
 80195b4:	68bb      	ldr	r3, [r7, #8]
 80195b6:	4013      	ands	r3, r2
 80195b8:	68ba      	ldr	r2, [r7, #8]
 80195ba:	429a      	cmp	r2, r3
 80195bc:	bf0c      	ite	eq
 80195be:	2301      	moveq	r3, #1
 80195c0:	2300      	movne	r3, #0
 80195c2:	b2db      	uxtb	r3, r3
 80195c4:	461a      	mov	r2, r3
 80195c6:	79fb      	ldrb	r3, [r7, #7]
 80195c8:	429a      	cmp	r2, r3
 80195ca:	d0a0      	beq.n	801950e <UART_WaitOnFlagUntilTimeout+0x12>
 80195cc:	2300      	movs	r3, #0
 80195ce:	4618      	mov	r0, r3
 80195d0:	3710      	adds	r7, #16
 80195d2:	46bd      	mov	sp, r7
 80195d4:	bd80      	pop	{r7, pc}
	...

080195d8 <UART_Start_Receive_IT>:
 80195d8:	b480      	push	{r7}
 80195da:	b0a3      	sub	sp, #140	@ 0x8c
 80195dc:	af00      	add	r7, sp, #0
 80195de:	60f8      	str	r0, [r7, #12]
 80195e0:	60b9      	str	r1, [r7, #8]
 80195e2:	4613      	mov	r3, r2
 80195e4:	80fb      	strh	r3, [r7, #6]
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	68ba      	ldr	r2, [r7, #8]
 80195ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80195ec:	68fb      	ldr	r3, [r7, #12]
 80195ee:	88fa      	ldrh	r2, [r7, #6]
 80195f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80195f4:	68fb      	ldr	r3, [r7, #12]
 80195f6:	88fa      	ldrh	r2, [r7, #6]
 80195f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	2200      	movs	r2, #0
 8019600:	675a      	str	r2, [r3, #116]	@ 0x74
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	689b      	ldr	r3, [r3, #8]
 8019606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801960a:	d10e      	bne.n	801962a <UART_Start_Receive_IT+0x52>
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	691b      	ldr	r3, [r3, #16]
 8019610:	2b00      	cmp	r3, #0
 8019612:	d105      	bne.n	8019620 <UART_Start_Receive_IT+0x48>
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801961a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801961e:	e02d      	b.n	801967c <UART_Start_Receive_IT+0xa4>
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	22ff      	movs	r2, #255	@ 0xff
 8019624:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019628:	e028      	b.n	801967c <UART_Start_Receive_IT+0xa4>
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	689b      	ldr	r3, [r3, #8]
 801962e:	2b00      	cmp	r3, #0
 8019630:	d10d      	bne.n	801964e <UART_Start_Receive_IT+0x76>
 8019632:	68fb      	ldr	r3, [r7, #12]
 8019634:	691b      	ldr	r3, [r3, #16]
 8019636:	2b00      	cmp	r3, #0
 8019638:	d104      	bne.n	8019644 <UART_Start_Receive_IT+0x6c>
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	22ff      	movs	r2, #255	@ 0xff
 801963e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019642:	e01b      	b.n	801967c <UART_Start_Receive_IT+0xa4>
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	227f      	movs	r2, #127	@ 0x7f
 8019648:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801964c:	e016      	b.n	801967c <UART_Start_Receive_IT+0xa4>
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	689b      	ldr	r3, [r3, #8]
 8019652:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019656:	d10d      	bne.n	8019674 <UART_Start_Receive_IT+0x9c>
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	691b      	ldr	r3, [r3, #16]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d104      	bne.n	801966a <UART_Start_Receive_IT+0x92>
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	227f      	movs	r2, #127	@ 0x7f
 8019664:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019668:	e008      	b.n	801967c <UART_Start_Receive_IT+0xa4>
 801966a:	68fb      	ldr	r3, [r7, #12]
 801966c:	223f      	movs	r2, #63	@ 0x3f
 801966e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019672:	e003      	b.n	801967c <UART_Start_Receive_IT+0xa4>
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	2200      	movs	r2, #0
 8019678:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801967c:	68fb      	ldr	r3, [r7, #12]
 801967e:	2200      	movs	r2, #0
 8019680:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	2222      	movs	r2, #34	@ 0x22
 8019688:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 801968c:	68fb      	ldr	r3, [r7, #12]
 801968e:	681b      	ldr	r3, [r3, #0]
 8019690:	3308      	adds	r3, #8
 8019692:	667b      	str	r3, [r7, #100]	@ 0x64
 8019694:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019696:	e853 3f00 	ldrex	r3, [r3]
 801969a:	663b      	str	r3, [r7, #96]	@ 0x60
 801969c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801969e:	f043 0301 	orr.w	r3, r3, #1
 80196a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80196a6:	68fb      	ldr	r3, [r7, #12]
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	3308      	adds	r3, #8
 80196ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80196b0:	673a      	str	r2, [r7, #112]	@ 0x70
 80196b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80196b4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80196b6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80196b8:	e841 2300 	strex	r3, r2, [r1]
 80196bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80196be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d1e3      	bne.n	801968c <UART_Start_Receive_IT+0xb4>
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80196c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80196cc:	d14f      	bne.n	801976e <UART_Start_Receive_IT+0x196>
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80196d4:	88fa      	ldrh	r2, [r7, #6]
 80196d6:	429a      	cmp	r2, r3
 80196d8:	d349      	bcc.n	801976e <UART_Start_Receive_IT+0x196>
 80196da:	68fb      	ldr	r3, [r7, #12]
 80196dc:	689b      	ldr	r3, [r3, #8]
 80196de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80196e2:	d107      	bne.n	80196f4 <UART_Start_Receive_IT+0x11c>
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	691b      	ldr	r3, [r3, #16]
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d103      	bne.n	80196f4 <UART_Start_Receive_IT+0x11c>
 80196ec:	68fb      	ldr	r3, [r7, #12]
 80196ee:	4a47      	ldr	r2, [pc, #284]	@ (801980c <UART_Start_Receive_IT+0x234>)
 80196f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80196f2:	e002      	b.n	80196fa <UART_Start_Receive_IT+0x122>
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	4a46      	ldr	r2, [pc, #280]	@ (8019810 <UART_Start_Receive_IT+0x238>)
 80196f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	691b      	ldr	r3, [r3, #16]
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d01a      	beq.n	8019738 <UART_Start_Receive_IT+0x160>
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	653b      	str	r3, [r7, #80]	@ 0x50
 8019708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801970a:	e853 3f00 	ldrex	r3, [r3]
 801970e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019716:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	461a      	mov	r2, r3
 8019720:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019724:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019726:	65ba      	str	r2, [r7, #88]	@ 0x58
 8019728:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801972a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801972c:	e841 2300 	strex	r3, r2, [r1]
 8019730:	657b      	str	r3, [r7, #84]	@ 0x54
 8019732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019734:	2b00      	cmp	r3, #0
 8019736:	d1e4      	bne.n	8019702 <UART_Start_Receive_IT+0x12a>
 8019738:	68fb      	ldr	r3, [r7, #12]
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	3308      	adds	r3, #8
 801973e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019742:	e853 3f00 	ldrex	r3, [r3]
 8019746:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801974a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801974e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019750:	68fb      	ldr	r3, [r7, #12]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	3308      	adds	r3, #8
 8019756:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019758:	64ba      	str	r2, [r7, #72]	@ 0x48
 801975a:	647b      	str	r3, [r7, #68]	@ 0x44
 801975c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801975e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019760:	e841 2300 	strex	r3, r2, [r1]
 8019764:	643b      	str	r3, [r7, #64]	@ 0x40
 8019766:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019768:	2b00      	cmp	r3, #0
 801976a:	d1e5      	bne.n	8019738 <UART_Start_Receive_IT+0x160>
 801976c:	e046      	b.n	80197fc <UART_Start_Receive_IT+0x224>
 801976e:	68fb      	ldr	r3, [r7, #12]
 8019770:	689b      	ldr	r3, [r3, #8]
 8019772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019776:	d107      	bne.n	8019788 <UART_Start_Receive_IT+0x1b0>
 8019778:	68fb      	ldr	r3, [r7, #12]
 801977a:	691b      	ldr	r3, [r3, #16]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d103      	bne.n	8019788 <UART_Start_Receive_IT+0x1b0>
 8019780:	68fb      	ldr	r3, [r7, #12]
 8019782:	4a24      	ldr	r2, [pc, #144]	@ (8019814 <UART_Start_Receive_IT+0x23c>)
 8019784:	675a      	str	r2, [r3, #116]	@ 0x74
 8019786:	e002      	b.n	801978e <UART_Start_Receive_IT+0x1b6>
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	4a23      	ldr	r2, [pc, #140]	@ (8019818 <UART_Start_Receive_IT+0x240>)
 801978c:	675a      	str	r2, [r3, #116]	@ 0x74
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	691b      	ldr	r3, [r3, #16]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d019      	beq.n	80197ca <UART_Start_Receive_IT+0x1f2>
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801979c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801979e:	e853 3f00 	ldrex	r3, [r3]
 80197a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80197a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197a6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80197aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	461a      	mov	r2, r3
 80197b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80197b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80197b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80197b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80197ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80197bc:	e841 2300 	strex	r3, r2, [r1]
 80197c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80197c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d1e6      	bne.n	8019796 <UART_Start_Receive_IT+0x1be>
 80197c8:	e018      	b.n	80197fc <UART_Start_Receive_IT+0x224>
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	617b      	str	r3, [r7, #20]
 80197d0:	697b      	ldr	r3, [r7, #20]
 80197d2:	e853 3f00 	ldrex	r3, [r3]
 80197d6:	613b      	str	r3, [r7, #16]
 80197d8:	693b      	ldr	r3, [r7, #16]
 80197da:	f043 0320 	orr.w	r3, r3, #32
 80197de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	461a      	mov	r2, r3
 80197e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80197e8:	623b      	str	r3, [r7, #32]
 80197ea:	61fa      	str	r2, [r7, #28]
 80197ec:	69f9      	ldr	r1, [r7, #28]
 80197ee:	6a3a      	ldr	r2, [r7, #32]
 80197f0:	e841 2300 	strex	r3, r2, [r1]
 80197f4:	61bb      	str	r3, [r7, #24]
 80197f6:	69bb      	ldr	r3, [r7, #24]
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d1e6      	bne.n	80197ca <UART_Start_Receive_IT+0x1f2>
 80197fc:	2300      	movs	r3, #0
 80197fe:	4618      	mov	r0, r3
 8019800:	378c      	adds	r7, #140	@ 0x8c
 8019802:	46bd      	mov	sp, r7
 8019804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019808:	4770      	bx	lr
 801980a:	bf00      	nop
 801980c:	0801a381 	.word	0x0801a381
 8019810:	0801a021 	.word	0x0801a021
 8019814:	08019e69 	.word	0x08019e69
 8019818:	08019cb1 	.word	0x08019cb1

0801981c <UART_EndRxTransfer>:
 801981c:	b480      	push	{r7}
 801981e:	b095      	sub	sp, #84	@ 0x54
 8019820:	af00      	add	r7, sp, #0
 8019822:	6078      	str	r0, [r7, #4]
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	637b      	str	r3, [r7, #52]	@ 0x34
 801982a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801982c:	e853 3f00 	ldrex	r3, [r3]
 8019830:	633b      	str	r3, [r7, #48]	@ 0x30
 8019832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019834:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019838:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	681b      	ldr	r3, [r3, #0]
 801983e:	461a      	mov	r2, r3
 8019840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019842:	643b      	str	r3, [r7, #64]	@ 0x40
 8019844:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8019846:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019848:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801984a:	e841 2300 	strex	r3, r2, [r1]
 801984e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019852:	2b00      	cmp	r3, #0
 8019854:	d1e6      	bne.n	8019824 <UART_EndRxTransfer+0x8>
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	3308      	adds	r3, #8
 801985c:	623b      	str	r3, [r7, #32]
 801985e:	6a3b      	ldr	r3, [r7, #32]
 8019860:	e853 3f00 	ldrex	r3, [r3]
 8019864:	61fb      	str	r3, [r7, #28]
 8019866:	69fa      	ldr	r2, [r7, #28]
 8019868:	4b1e      	ldr	r3, [pc, #120]	@ (80198e4 <UART_EndRxTransfer+0xc8>)
 801986a:	4013      	ands	r3, r2
 801986c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	3308      	adds	r3, #8
 8019874:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019876:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019878:	62bb      	str	r3, [r7, #40]	@ 0x28
 801987a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801987c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801987e:	e841 2300 	strex	r3, r2, [r1]
 8019882:	627b      	str	r3, [r7, #36]	@ 0x24
 8019884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019886:	2b00      	cmp	r3, #0
 8019888:	d1e5      	bne.n	8019856 <UART_EndRxTransfer+0x3a>
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801988e:	2b01      	cmp	r3, #1
 8019890:	d118      	bne.n	80198c4 <UART_EndRxTransfer+0xa8>
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	60fb      	str	r3, [r7, #12]
 8019898:	68fb      	ldr	r3, [r7, #12]
 801989a:	e853 3f00 	ldrex	r3, [r3]
 801989e:	60bb      	str	r3, [r7, #8]
 80198a0:	68bb      	ldr	r3, [r7, #8]
 80198a2:	f023 0310 	bic.w	r3, r3, #16
 80198a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	461a      	mov	r2, r3
 80198ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80198b0:	61bb      	str	r3, [r7, #24]
 80198b2:	617a      	str	r2, [r7, #20]
 80198b4:	6979      	ldr	r1, [r7, #20]
 80198b6:	69ba      	ldr	r2, [r7, #24]
 80198b8:	e841 2300 	strex	r3, r2, [r1]
 80198bc:	613b      	str	r3, [r7, #16]
 80198be:	693b      	ldr	r3, [r7, #16]
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	d1e6      	bne.n	8019892 <UART_EndRxTransfer+0x76>
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	2220      	movs	r2, #32
 80198c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	2200      	movs	r2, #0
 80198d0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	2200      	movs	r2, #0
 80198d6:	675a      	str	r2, [r3, #116]	@ 0x74
 80198d8:	bf00      	nop
 80198da:	3754      	adds	r7, #84	@ 0x54
 80198dc:	46bd      	mov	sp, r7
 80198de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198e2:	4770      	bx	lr
 80198e4:	effffffe 	.word	0xeffffffe

080198e8 <UART_DMAAbortOnError>:
 80198e8:	b580      	push	{r7, lr}
 80198ea:	b084      	sub	sp, #16
 80198ec:	af00      	add	r7, sp, #0
 80198ee:	6078      	str	r0, [r7, #4]
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80198f4:	60fb      	str	r3, [r7, #12]
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	2200      	movs	r2, #0
 80198fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	2200      	movs	r2, #0
 8019902:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8019906:	68f8      	ldr	r0, [r7, #12]
 8019908:	f7fe fe2a 	bl	8018560 <HAL_UART_ErrorCallback>
 801990c:	bf00      	nop
 801990e:	3710      	adds	r7, #16
 8019910:	46bd      	mov	sp, r7
 8019912:	bd80      	pop	{r7, pc}

08019914 <UART_TxISR_8BIT>:
 8019914:	b480      	push	{r7}
 8019916:	b08f      	sub	sp, #60	@ 0x3c
 8019918:	af00      	add	r7, sp, #0
 801991a:	6078      	str	r0, [r7, #4]
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019922:	2b21      	cmp	r3, #33	@ 0x21
 8019924:	d14c      	bne.n	80199c0 <UART_TxISR_8BIT+0xac>
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801992c:	b29b      	uxth	r3, r3
 801992e:	2b00      	cmp	r3, #0
 8019930:	d132      	bne.n	8019998 <UART_TxISR_8BIT+0x84>
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	623b      	str	r3, [r7, #32]
 8019938:	6a3b      	ldr	r3, [r7, #32]
 801993a:	e853 3f00 	ldrex	r3, [r3]
 801993e:	61fb      	str	r3, [r7, #28]
 8019940:	69fb      	ldr	r3, [r7, #28]
 8019942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019946:	637b      	str	r3, [r7, #52]	@ 0x34
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	461a      	mov	r2, r3
 801994e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019950:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019952:	62ba      	str	r2, [r7, #40]	@ 0x28
 8019954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019958:	e841 2300 	strex	r3, r2, [r1]
 801995c:	627b      	str	r3, [r7, #36]	@ 0x24
 801995e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019960:	2b00      	cmp	r3, #0
 8019962:	d1e6      	bne.n	8019932 <UART_TxISR_8BIT+0x1e>
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	60fb      	str	r3, [r7, #12]
 801996a:	68fb      	ldr	r3, [r7, #12]
 801996c:	e853 3f00 	ldrex	r3, [r3]
 8019970:	60bb      	str	r3, [r7, #8]
 8019972:	68bb      	ldr	r3, [r7, #8]
 8019974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019978:	633b      	str	r3, [r7, #48]	@ 0x30
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	461a      	mov	r2, r3
 8019980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019982:	61bb      	str	r3, [r7, #24]
 8019984:	617a      	str	r2, [r7, #20]
 8019986:	6979      	ldr	r1, [r7, #20]
 8019988:	69ba      	ldr	r2, [r7, #24]
 801998a:	e841 2300 	strex	r3, r2, [r1]
 801998e:	613b      	str	r3, [r7, #16]
 8019990:	693b      	ldr	r3, [r7, #16]
 8019992:	2b00      	cmp	r3, #0
 8019994:	d1e6      	bne.n	8019964 <UART_TxISR_8BIT+0x50>
 8019996:	e013      	b.n	80199c0 <UART_TxISR_8BIT+0xac>
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801999c:	781a      	ldrb	r2, [r3, #0]
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80199a8:	1c5a      	adds	r2, r3, #1
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80199b4:	b29b      	uxth	r3, r3
 80199b6:	3b01      	subs	r3, #1
 80199b8:	b29a      	uxth	r2, r3
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80199c0:	bf00      	nop
 80199c2:	373c      	adds	r7, #60	@ 0x3c
 80199c4:	46bd      	mov	sp, r7
 80199c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ca:	4770      	bx	lr

080199cc <UART_TxISR_16BIT>:
 80199cc:	b480      	push	{r7}
 80199ce:	b091      	sub	sp, #68	@ 0x44
 80199d0:	af00      	add	r7, sp, #0
 80199d2:	6078      	str	r0, [r7, #4]
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80199da:	2b21      	cmp	r3, #33	@ 0x21
 80199dc:	d151      	bne.n	8019a82 <UART_TxISR_16BIT+0xb6>
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80199e4:	b29b      	uxth	r3, r3
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d132      	bne.n	8019a50 <UART_TxISR_16BIT+0x84>
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80199f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199f2:	e853 3f00 	ldrex	r3, [r3]
 80199f6:	623b      	str	r3, [r7, #32]
 80199f8:	6a3b      	ldr	r3, [r7, #32]
 80199fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80199fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	461a      	mov	r2, r3
 8019a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a08:	633b      	str	r3, [r7, #48]	@ 0x30
 8019a0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019a0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019a10:	e841 2300 	strex	r3, r2, [r1]
 8019a14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d1e6      	bne.n	80199ea <UART_TxISR_16BIT+0x1e>
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	613b      	str	r3, [r7, #16]
 8019a22:	693b      	ldr	r3, [r7, #16]
 8019a24:	e853 3f00 	ldrex	r3, [r3]
 8019a28:	60fb      	str	r3, [r7, #12]
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	461a      	mov	r2, r3
 8019a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a3a:	61fb      	str	r3, [r7, #28]
 8019a3c:	61ba      	str	r2, [r7, #24]
 8019a3e:	69b9      	ldr	r1, [r7, #24]
 8019a40:	69fa      	ldr	r2, [r7, #28]
 8019a42:	e841 2300 	strex	r3, r2, [r1]
 8019a46:	617b      	str	r3, [r7, #20]
 8019a48:	697b      	ldr	r3, [r7, #20]
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d1e6      	bne.n	8019a1c <UART_TxISR_16BIT+0x50>
 8019a4e:	e018      	b.n	8019a82 <UART_TxISR_16BIT+0xb6>
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019a58:	881b      	ldrh	r3, [r3, #0]
 8019a5a:	461a      	mov	r2, r3
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019a64:	629a      	str	r2, [r3, #40]	@ 0x28
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019a6a:	1c9a      	adds	r2, r3, #2
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019a76:	b29b      	uxth	r3, r3
 8019a78:	3b01      	subs	r3, #1
 8019a7a:	b29a      	uxth	r2, r3
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8019a82:	bf00      	nop
 8019a84:	3744      	adds	r7, #68	@ 0x44
 8019a86:	46bd      	mov	sp, r7
 8019a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a8c:	4770      	bx	lr

08019a8e <UART_TxISR_8BIT_FIFOEN>:
 8019a8e:	b480      	push	{r7}
 8019a90:	b091      	sub	sp, #68	@ 0x44
 8019a92:	af00      	add	r7, sp, #0
 8019a94:	6078      	str	r0, [r7, #4]
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019a9c:	2b21      	cmp	r3, #33	@ 0x21
 8019a9e:	d160      	bne.n	8019b62 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019aa6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019aa8:	e057      	b.n	8019b5a <UART_TxISR_8BIT_FIFOEN+0xcc>
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019ab0:	b29b      	uxth	r3, r3
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d133      	bne.n	8019b1e <UART_TxISR_8BIT_FIFOEN+0x90>
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	3308      	adds	r3, #8
 8019abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8019abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ac0:	e853 3f00 	ldrex	r3, [r3]
 8019ac4:	623b      	str	r3, [r7, #32]
 8019ac6:	6a3b      	ldr	r3, [r7, #32]
 8019ac8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019acc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	3308      	adds	r3, #8
 8019ad4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019ad6:	633a      	str	r2, [r7, #48]	@ 0x30
 8019ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019ada:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019adc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019ade:	e841 2300 	strex	r3, r2, [r1]
 8019ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d1e5      	bne.n	8019ab6 <UART_TxISR_8BIT_FIFOEN+0x28>
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	613b      	str	r3, [r7, #16]
 8019af0:	693b      	ldr	r3, [r7, #16]
 8019af2:	e853 3f00 	ldrex	r3, [r3]
 8019af6:	60fb      	str	r3, [r7, #12]
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019afe:	637b      	str	r3, [r7, #52]	@ 0x34
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	461a      	mov	r2, r3
 8019b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b08:	61fb      	str	r3, [r7, #28]
 8019b0a:	61ba      	str	r2, [r7, #24]
 8019b0c:	69b9      	ldr	r1, [r7, #24]
 8019b0e:	69fa      	ldr	r2, [r7, #28]
 8019b10:	e841 2300 	strex	r3, r2, [r1]
 8019b14:	617b      	str	r3, [r7, #20]
 8019b16:	697b      	ldr	r3, [r7, #20]
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d1e6      	bne.n	8019aea <UART_TxISR_8BIT_FIFOEN+0x5c>
 8019b1c:	e021      	b.n	8019b62 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	681b      	ldr	r3, [r3, #0]
 8019b22:	69db      	ldr	r3, [r3, #28]
 8019b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d013      	beq.n	8019b54 <UART_TxISR_8BIT_FIFOEN+0xc6>
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019b30:	781a      	ldrb	r2, [r3, #0]
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	629a      	str	r2, [r3, #40]	@ 0x28
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019b3c:	1c5a      	adds	r2, r3, #1
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	651a      	str	r2, [r3, #80]	@ 0x50
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019b48:	b29b      	uxth	r3, r3
 8019b4a:	3b01      	subs	r3, #1
 8019b4c:	b29a      	uxth	r2, r3
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8019b54:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019b56:	3b01      	subs	r3, #1
 8019b58:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019b5a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d1a4      	bne.n	8019aaa <UART_TxISR_8BIT_FIFOEN+0x1c>
 8019b60:	e7ff      	b.n	8019b62 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8019b62:	bf00      	nop
 8019b64:	3744      	adds	r7, #68	@ 0x44
 8019b66:	46bd      	mov	sp, r7
 8019b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b6c:	4770      	bx	lr

08019b6e <UART_TxISR_16BIT_FIFOEN>:
 8019b6e:	b480      	push	{r7}
 8019b70:	b091      	sub	sp, #68	@ 0x44
 8019b72:	af00      	add	r7, sp, #0
 8019b74:	6078      	str	r0, [r7, #4]
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019b7c:	2b21      	cmp	r3, #33	@ 0x21
 8019b7e:	d165      	bne.n	8019c4c <UART_TxISR_16BIT_FIFOEN+0xde>
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019b86:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019b88:	e05c      	b.n	8019c44 <UART_TxISR_16BIT_FIFOEN+0xd6>
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019b90:	b29b      	uxth	r3, r3
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d133      	bne.n	8019bfe <UART_TxISR_16BIT_FIFOEN+0x90>
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	3308      	adds	r3, #8
 8019b9c:	623b      	str	r3, [r7, #32]
 8019b9e:	6a3b      	ldr	r3, [r7, #32]
 8019ba0:	e853 3f00 	ldrex	r3, [r3]
 8019ba4:	61fb      	str	r3, [r7, #28]
 8019ba6:	69fb      	ldr	r3, [r7, #28]
 8019ba8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	3308      	adds	r3, #8
 8019bb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019bb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019bba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019bbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019bbe:	e841 2300 	strex	r3, r2, [r1]
 8019bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8019bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d1e5      	bne.n	8019b96 <UART_TxISR_16BIT_FIFOEN+0x28>
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	60fb      	str	r3, [r7, #12]
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	e853 3f00 	ldrex	r3, [r3]
 8019bd6:	60bb      	str	r3, [r7, #8]
 8019bd8:	68bb      	ldr	r3, [r7, #8]
 8019bda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019bde:	633b      	str	r3, [r7, #48]	@ 0x30
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	461a      	mov	r2, r3
 8019be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019be8:	61bb      	str	r3, [r7, #24]
 8019bea:	617a      	str	r2, [r7, #20]
 8019bec:	6979      	ldr	r1, [r7, #20]
 8019bee:	69ba      	ldr	r2, [r7, #24]
 8019bf0:	e841 2300 	strex	r3, r2, [r1]
 8019bf4:	613b      	str	r3, [r7, #16]
 8019bf6:	693b      	ldr	r3, [r7, #16]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d1e6      	bne.n	8019bca <UART_TxISR_16BIT_FIFOEN+0x5c>
 8019bfc:	e026      	b.n	8019c4c <UART_TxISR_16BIT_FIFOEN+0xde>
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	69db      	ldr	r3, [r3, #28]
 8019c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d018      	beq.n	8019c3e <UART_TxISR_16BIT_FIFOEN+0xd0>
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019c10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c14:	881b      	ldrh	r3, [r3, #0]
 8019c16:	461a      	mov	r2, r3
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019c20:	629a      	str	r2, [r3, #40]	@ 0x28
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019c26:	1c9a      	adds	r2, r3, #2
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019c32:	b29b      	uxth	r3, r3
 8019c34:	3b01      	subs	r3, #1
 8019c36:	b29a      	uxth	r2, r3
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8019c3e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019c40:	3b01      	subs	r3, #1
 8019c42:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019c44:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d19f      	bne.n	8019b8a <UART_TxISR_16BIT_FIFOEN+0x1c>
 8019c4a:	e7ff      	b.n	8019c4c <UART_TxISR_16BIT_FIFOEN+0xde>
 8019c4c:	bf00      	nop
 8019c4e:	3744      	adds	r7, #68	@ 0x44
 8019c50:	46bd      	mov	sp, r7
 8019c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c56:	4770      	bx	lr

08019c58 <UART_EndTransmit_IT>:
 8019c58:	b580      	push	{r7, lr}
 8019c5a:	b088      	sub	sp, #32
 8019c5c:	af00      	add	r7, sp, #0
 8019c5e:	6078      	str	r0, [r7, #4]
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	60fb      	str	r3, [r7, #12]
 8019c66:	68fb      	ldr	r3, [r7, #12]
 8019c68:	e853 3f00 	ldrex	r3, [r3]
 8019c6c:	60bb      	str	r3, [r7, #8]
 8019c6e:	68bb      	ldr	r3, [r7, #8]
 8019c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8019c74:	61fb      	str	r3, [r7, #28]
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	461a      	mov	r2, r3
 8019c7c:	69fb      	ldr	r3, [r7, #28]
 8019c7e:	61bb      	str	r3, [r7, #24]
 8019c80:	617a      	str	r2, [r7, #20]
 8019c82:	6979      	ldr	r1, [r7, #20]
 8019c84:	69ba      	ldr	r2, [r7, #24]
 8019c86:	e841 2300 	strex	r3, r2, [r1]
 8019c8a:	613b      	str	r3, [r7, #16]
 8019c8c:	693b      	ldr	r3, [r7, #16]
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d1e6      	bne.n	8019c60 <UART_EndTransmit_IT+0x8>
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	2220      	movs	r2, #32
 8019c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	2200      	movs	r2, #0
 8019c9e:	679a      	str	r2, [r3, #120]	@ 0x78
 8019ca0:	6878      	ldr	r0, [r7, #4]
 8019ca2:	f7fe fc53 	bl	801854c <HAL_UART_TxCpltCallback>
 8019ca6:	bf00      	nop
 8019ca8:	3720      	adds	r7, #32
 8019caa:	46bd      	mov	sp, r7
 8019cac:	bd80      	pop	{r7, pc}
	...

08019cb0 <UART_RxISR_8BIT>:
 8019cb0:	b580      	push	{r7, lr}
 8019cb2:	b09c      	sub	sp, #112	@ 0x70
 8019cb4:	af00      	add	r7, sp, #0
 8019cb6:	6078      	str	r0, [r7, #4]
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019cbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019cc8:	2b22      	cmp	r3, #34	@ 0x22
 8019cca:	f040 80be 	bne.w	8019e4a <UART_RxISR_8BIT+0x19a>
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019cd4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8019cd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8019cdc:	b2d9      	uxtb	r1, r3
 8019cde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8019ce2:	b2da      	uxtb	r2, r3
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019ce8:	400a      	ands	r2, r1
 8019cea:	b2d2      	uxtb	r2, r2
 8019cec:	701a      	strb	r2, [r3, #0]
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019cf2:	1c5a      	adds	r2, r3, #1
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	659a      	str	r2, [r3, #88]	@ 0x58
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019cfe:	b29b      	uxth	r3, r3
 8019d00:	3b01      	subs	r3, #1
 8019d02:	b29a      	uxth	r2, r3
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019d10:	b29b      	uxth	r3, r3
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	f040 80a1 	bne.w	8019e5a <UART_RxISR_8BIT+0x1aa>
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d20:	e853 3f00 	ldrex	r3, [r3]
 8019d24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019d28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	461a      	mov	r2, r3
 8019d34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019d36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019d38:	657a      	str	r2, [r7, #84]	@ 0x54
 8019d3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019d3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019d3e:	e841 2300 	strex	r3, r2, [r1]
 8019d42:	653b      	str	r3, [r7, #80]	@ 0x50
 8019d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d1e6      	bne.n	8019d18 <UART_RxISR_8BIT+0x68>
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	3308      	adds	r3, #8
 8019d50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d54:	e853 3f00 	ldrex	r3, [r3]
 8019d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8019d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d5c:	f023 0301 	bic.w	r3, r3, #1
 8019d60:	667b      	str	r3, [r7, #100]	@ 0x64
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	3308      	adds	r3, #8
 8019d68:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8019d6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8019d6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8019d6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019d70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019d72:	e841 2300 	strex	r3, r2, [r1]
 8019d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d1e5      	bne.n	8019d4a <UART_RxISR_8BIT+0x9a>
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	2220      	movs	r2, #32
 8019d82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	2200      	movs	r2, #0
 8019d8a:	675a      	str	r2, [r3, #116]	@ 0x74
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	2200      	movs	r2, #0
 8019d90:	671a      	str	r2, [r3, #112]	@ 0x70
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	4a33      	ldr	r2, [pc, #204]	@ (8019e64 <UART_RxISR_8BIT+0x1b4>)
 8019d98:	4293      	cmp	r3, r2
 8019d9a:	d01f      	beq.n	8019ddc <UART_RxISR_8BIT+0x12c>
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	685b      	ldr	r3, [r3, #4]
 8019da2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d018      	beq.n	8019ddc <UART_RxISR_8BIT+0x12c>
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8019db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019db2:	e853 3f00 	ldrex	r3, [r3]
 8019db6:	623b      	str	r3, [r7, #32]
 8019db8:	6a3b      	ldr	r3, [r7, #32]
 8019dba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019dbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	461a      	mov	r2, r3
 8019dc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8019dca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019dcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019dd0:	e841 2300 	strex	r3, r2, [r1]
 8019dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d1e6      	bne.n	8019daa <UART_RxISR_8BIT+0xfa>
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019de0:	2b01      	cmp	r3, #1
 8019de2:	d12e      	bne.n	8019e42 <UART_RxISR_8BIT+0x192>
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	2200      	movs	r2, #0
 8019de8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	613b      	str	r3, [r7, #16]
 8019df0:	693b      	ldr	r3, [r7, #16]
 8019df2:	e853 3f00 	ldrex	r3, [r3]
 8019df6:	60fb      	str	r3, [r7, #12]
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	f023 0310 	bic.w	r3, r3, #16
 8019dfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	461a      	mov	r2, r3
 8019e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019e08:	61fb      	str	r3, [r7, #28]
 8019e0a:	61ba      	str	r2, [r7, #24]
 8019e0c:	69b9      	ldr	r1, [r7, #24]
 8019e0e:	69fa      	ldr	r2, [r7, #28]
 8019e10:	e841 2300 	strex	r3, r2, [r1]
 8019e14:	617b      	str	r3, [r7, #20]
 8019e16:	697b      	ldr	r3, [r7, #20]
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d1e6      	bne.n	8019dea <UART_RxISR_8BIT+0x13a>
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	69db      	ldr	r3, [r3, #28]
 8019e22:	f003 0310 	and.w	r3, r3, #16
 8019e26:	2b10      	cmp	r3, #16
 8019e28:	d103      	bne.n	8019e32 <UART_RxISR_8BIT+0x182>
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	2210      	movs	r2, #16
 8019e30:	621a      	str	r2, [r3, #32]
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019e38:	4619      	mov	r1, r3
 8019e3a:	6878      	ldr	r0, [r7, #4]
 8019e3c:	f7fe fb9a 	bl	8018574 <HAL_UARTEx_RxEventCallback>
 8019e40:	e00b      	b.n	8019e5a <UART_RxISR_8BIT+0x1aa>
 8019e42:	6878      	ldr	r0, [r7, #4]
 8019e44:	f7ec f9e6 	bl	8006214 <HAL_UART_RxCpltCallback>
 8019e48:	e007      	b.n	8019e5a <UART_RxISR_8BIT+0x1aa>
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	699a      	ldr	r2, [r3, #24]
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	f042 0208 	orr.w	r2, r2, #8
 8019e58:	619a      	str	r2, [r3, #24]
 8019e5a:	bf00      	nop
 8019e5c:	3770      	adds	r7, #112	@ 0x70
 8019e5e:	46bd      	mov	sp, r7
 8019e60:	bd80      	pop	{r7, pc}
 8019e62:	bf00      	nop
 8019e64:	58000c00 	.word	0x58000c00

08019e68 <UART_RxISR_16BIT>:
 8019e68:	b580      	push	{r7, lr}
 8019e6a:	b09c      	sub	sp, #112	@ 0x70
 8019e6c:	af00      	add	r7, sp, #0
 8019e6e:	6078      	str	r0, [r7, #4]
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019e76:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019e80:	2b22      	cmp	r3, #34	@ 0x22
 8019e82:	f040 80be 	bne.w	801a002 <UART_RxISR_16BIT+0x19a>
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019e8c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019e94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019e96:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8019e9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8019e9e:	4013      	ands	r3, r2
 8019ea0:	b29a      	uxth	r2, r3
 8019ea2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019ea4:	801a      	strh	r2, [r3, #0]
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019eaa:	1c9a      	adds	r2, r3, #2
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	659a      	str	r2, [r3, #88]	@ 0x58
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019eb6:	b29b      	uxth	r3, r3
 8019eb8:	3b01      	subs	r3, #1
 8019eba:	b29a      	uxth	r2, r3
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019ec8:	b29b      	uxth	r3, r3
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	f040 80a1 	bne.w	801a012 <UART_RxISR_16BIT+0x1aa>
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019ed8:	e853 3f00 	ldrex	r3, [r3]
 8019edc:	647b      	str	r3, [r7, #68]	@ 0x44
 8019ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019ee0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019ee4:	667b      	str	r3, [r7, #100]	@ 0x64
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	461a      	mov	r2, r3
 8019eec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019eee:	657b      	str	r3, [r7, #84]	@ 0x54
 8019ef0:	653a      	str	r2, [r7, #80]	@ 0x50
 8019ef2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019ef4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019ef6:	e841 2300 	strex	r3, r2, [r1]
 8019efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019efc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	d1e6      	bne.n	8019ed0 <UART_RxISR_16BIT+0x68>
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	3308      	adds	r3, #8
 8019f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8019f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019f0c:	e853 3f00 	ldrex	r3, [r3]
 8019f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8019f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f14:	f023 0301 	bic.w	r3, r3, #1
 8019f18:	663b      	str	r3, [r7, #96]	@ 0x60
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	3308      	adds	r3, #8
 8019f20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8019f22:	643a      	str	r2, [r7, #64]	@ 0x40
 8019f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019f26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019f28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019f2a:	e841 2300 	strex	r3, r2, [r1]
 8019f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d1e5      	bne.n	8019f02 <UART_RxISR_16BIT+0x9a>
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	2220      	movs	r2, #32
 8019f3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	2200      	movs	r2, #0
 8019f42:	675a      	str	r2, [r3, #116]	@ 0x74
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	2200      	movs	r2, #0
 8019f48:	671a      	str	r2, [r3, #112]	@ 0x70
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	4a33      	ldr	r2, [pc, #204]	@ (801a01c <UART_RxISR_16BIT+0x1b4>)
 8019f50:	4293      	cmp	r3, r2
 8019f52:	d01f      	beq.n	8019f94 <UART_RxISR_16BIT+0x12c>
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	685b      	ldr	r3, [r3, #4]
 8019f5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d018      	beq.n	8019f94 <UART_RxISR_16BIT+0x12c>
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	623b      	str	r3, [r7, #32]
 8019f68:	6a3b      	ldr	r3, [r7, #32]
 8019f6a:	e853 3f00 	ldrex	r3, [r3]
 8019f6e:	61fb      	str	r3, [r7, #28]
 8019f70:	69fb      	ldr	r3, [r7, #28]
 8019f72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019f76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	461a      	mov	r2, r3
 8019f7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019f82:	62ba      	str	r2, [r7, #40]	@ 0x28
 8019f84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019f86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019f88:	e841 2300 	strex	r3, r2, [r1]
 8019f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8019f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d1e6      	bne.n	8019f62 <UART_RxISR_16BIT+0xfa>
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f98:	2b01      	cmp	r3, #1
 8019f9a:	d12e      	bne.n	8019ffa <UART_RxISR_16BIT+0x192>
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	2200      	movs	r2, #0
 8019fa0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	60fb      	str	r3, [r7, #12]
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	e853 3f00 	ldrex	r3, [r3]
 8019fae:	60bb      	str	r3, [r7, #8]
 8019fb0:	68bb      	ldr	r3, [r7, #8]
 8019fb2:	f023 0310 	bic.w	r3, r3, #16
 8019fb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	461a      	mov	r2, r3
 8019fbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019fc0:	61bb      	str	r3, [r7, #24]
 8019fc2:	617a      	str	r2, [r7, #20]
 8019fc4:	6979      	ldr	r1, [r7, #20]
 8019fc6:	69ba      	ldr	r2, [r7, #24]
 8019fc8:	e841 2300 	strex	r3, r2, [r1]
 8019fcc:	613b      	str	r3, [r7, #16]
 8019fce:	693b      	ldr	r3, [r7, #16]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d1e6      	bne.n	8019fa2 <UART_RxISR_16BIT+0x13a>
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	69db      	ldr	r3, [r3, #28]
 8019fda:	f003 0310 	and.w	r3, r3, #16
 8019fde:	2b10      	cmp	r3, #16
 8019fe0:	d103      	bne.n	8019fea <UART_RxISR_16BIT+0x182>
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	2210      	movs	r2, #16
 8019fe8:	621a      	str	r2, [r3, #32]
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019ff0:	4619      	mov	r1, r3
 8019ff2:	6878      	ldr	r0, [r7, #4]
 8019ff4:	f7fe fabe 	bl	8018574 <HAL_UARTEx_RxEventCallback>
 8019ff8:	e00b      	b.n	801a012 <UART_RxISR_16BIT+0x1aa>
 8019ffa:	6878      	ldr	r0, [r7, #4]
 8019ffc:	f7ec f90a 	bl	8006214 <HAL_UART_RxCpltCallback>
 801a000:	e007      	b.n	801a012 <UART_RxISR_16BIT+0x1aa>
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	699a      	ldr	r2, [r3, #24]
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	f042 0208 	orr.w	r2, r2, #8
 801a010:	619a      	str	r2, [r3, #24]
 801a012:	bf00      	nop
 801a014:	3770      	adds	r7, #112	@ 0x70
 801a016:	46bd      	mov	sp, r7
 801a018:	bd80      	pop	{r7, pc}
 801a01a:	bf00      	nop
 801a01c:	58000c00 	.word	0x58000c00

0801a020 <UART_RxISR_8BIT_FIFOEN>:
 801a020:	b580      	push	{r7, lr}
 801a022:	b0ac      	sub	sp, #176	@ 0xb0
 801a024:	af00      	add	r7, sp, #0
 801a026:	6078      	str	r0, [r7, #4]
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a02e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	69db      	ldr	r3, [r3, #28]
 801a038:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	689b      	ldr	r3, [r3, #8]
 801a04c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a056:	2b22      	cmp	r3, #34	@ 0x22
 801a058:	f040 8180 	bne.w	801a35c <UART_RxISR_8BIT_FIFOEN+0x33c>
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a062:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
 801a066:	e123      	b.n	801a2b0 <UART_RxISR_8BIT_FIFOEN+0x290>
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a06e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 801a072:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801a076:	b2d9      	uxtb	r1, r3
 801a078:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801a07c:	b2da      	uxtb	r2, r3
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a082:	400a      	ands	r2, r1
 801a084:	b2d2      	uxtb	r2, r2
 801a086:	701a      	strb	r2, [r3, #0]
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a08c:	1c5a      	adds	r2, r3, #1
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	659a      	str	r2, [r3, #88]	@ 0x58
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a098:	b29b      	uxth	r3, r3
 801a09a:	3b01      	subs	r3, #1
 801a09c:	b29a      	uxth	r2, r3
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	69db      	ldr	r3, [r3, #28]
 801a0aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801a0ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a0b2:	f003 0307 	and.w	r3, r3, #7
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d053      	beq.n	801a162 <UART_RxISR_8BIT_FIFOEN+0x142>
 801a0ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a0be:	f003 0301 	and.w	r3, r3, #1
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d011      	beq.n	801a0ea <UART_RxISR_8BIT_FIFOEN+0xca>
 801a0c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a0ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d00b      	beq.n	801a0ea <UART_RxISR_8BIT_FIFOEN+0xca>
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	2201      	movs	r2, #1
 801a0d8:	621a      	str	r2, [r3, #32]
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a0e0:	f043 0201 	orr.w	r2, r3, #1
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801a0ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a0ee:	f003 0302 	and.w	r3, r3, #2
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d011      	beq.n	801a11a <UART_RxISR_8BIT_FIFOEN+0xfa>
 801a0f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a0fa:	f003 0301 	and.w	r3, r3, #1
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d00b      	beq.n	801a11a <UART_RxISR_8BIT_FIFOEN+0xfa>
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	681b      	ldr	r3, [r3, #0]
 801a106:	2202      	movs	r2, #2
 801a108:	621a      	str	r2, [r3, #32]
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a110:	f043 0204 	orr.w	r2, r3, #4
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801a11a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a11e:	f003 0304 	and.w	r3, r3, #4
 801a122:	2b00      	cmp	r3, #0
 801a124:	d011      	beq.n	801a14a <UART_RxISR_8BIT_FIFOEN+0x12a>
 801a126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a12a:	f003 0301 	and.w	r3, r3, #1
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d00b      	beq.n	801a14a <UART_RxISR_8BIT_FIFOEN+0x12a>
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	2204      	movs	r2, #4
 801a138:	621a      	str	r2, [r3, #32]
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a140:	f043 0202 	orr.w	r2, r3, #2
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a150:	2b00      	cmp	r3, #0
 801a152:	d006      	beq.n	801a162 <UART_RxISR_8BIT_FIFOEN+0x142>
 801a154:	6878      	ldr	r0, [r7, #4]
 801a156:	f7fe fa03 	bl	8018560 <HAL_UART_ErrorCallback>
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	2200      	movs	r2, #0
 801a15e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a168:	b29b      	uxth	r3, r3
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	f040 80a0 	bne.w	801a2b0 <UART_RxISR_8BIT_FIFOEN+0x290>
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	673b      	str	r3, [r7, #112]	@ 0x70
 801a176:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a178:	e853 3f00 	ldrex	r3, [r3]
 801a17c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a17e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a184:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	461a      	mov	r2, r3
 801a18e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a192:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a194:	67ba      	str	r2, [r7, #120]	@ 0x78
 801a196:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801a198:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a19a:	e841 2300 	strex	r3, r2, [r1]
 801a19e:	677b      	str	r3, [r7, #116]	@ 0x74
 801a1a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d1e4      	bne.n	801a170 <UART_RxISR_8BIT_FIFOEN+0x150>
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	3308      	adds	r3, #8
 801a1ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a1ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a1b0:	e853 3f00 	ldrex	r3, [r3]
 801a1b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a1b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a1b8:	4b6e      	ldr	r3, [pc, #440]	@ (801a374 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801a1ba:	4013      	ands	r3, r2
 801a1bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	3308      	adds	r3, #8
 801a1c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a1ca:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a1cc:	667b      	str	r3, [r7, #100]	@ 0x64
 801a1ce:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801a1d0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a1d2:	e841 2300 	strex	r3, r2, [r1]
 801a1d6:	663b      	str	r3, [r7, #96]	@ 0x60
 801a1d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d1e3      	bne.n	801a1a6 <UART_RxISR_8BIT_FIFOEN+0x186>
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	2220      	movs	r2, #32
 801a1e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	2200      	movs	r2, #0
 801a1ea:	675a      	str	r2, [r3, #116]	@ 0x74
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	2200      	movs	r2, #0
 801a1f0:	671a      	str	r2, [r3, #112]	@ 0x70
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	4a60      	ldr	r2, [pc, #384]	@ (801a378 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801a1f8:	4293      	cmp	r3, r2
 801a1fa:	d021      	beq.n	801a240 <UART_RxISR_8BIT_FIFOEN+0x220>
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	685b      	ldr	r3, [r3, #4]
 801a202:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a206:	2b00      	cmp	r3, #0
 801a208:	d01a      	beq.n	801a240 <UART_RxISR_8BIT_FIFOEN+0x220>
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a212:	e853 3f00 	ldrex	r3, [r3]
 801a216:	647b      	str	r3, [r7, #68]	@ 0x44
 801a218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a21a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a21e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	461a      	mov	r2, r3
 801a228:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a22c:	657b      	str	r3, [r7, #84]	@ 0x54
 801a22e:	653a      	str	r2, [r7, #80]	@ 0x50
 801a230:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a232:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a234:	e841 2300 	strex	r3, r2, [r1]
 801a238:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a23a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d1e4      	bne.n	801a20a <UART_RxISR_8BIT_FIFOEN+0x1ea>
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a244:	2b01      	cmp	r3, #1
 801a246:	d130      	bne.n	801a2aa <UART_RxISR_8BIT_FIFOEN+0x28a>
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	2200      	movs	r2, #0
 801a24c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	637b      	str	r3, [r7, #52]	@ 0x34
 801a254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a256:	e853 3f00 	ldrex	r3, [r3]
 801a25a:	633b      	str	r3, [r7, #48]	@ 0x30
 801a25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a25e:	f023 0310 	bic.w	r3, r3, #16
 801a262:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	461a      	mov	r2, r3
 801a26c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a270:	643b      	str	r3, [r7, #64]	@ 0x40
 801a272:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801a274:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a276:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a278:	e841 2300 	strex	r3, r2, [r1]
 801a27c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a280:	2b00      	cmp	r3, #0
 801a282:	d1e4      	bne.n	801a24e <UART_RxISR_8BIT_FIFOEN+0x22e>
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	69db      	ldr	r3, [r3, #28]
 801a28a:	f003 0310 	and.w	r3, r3, #16
 801a28e:	2b10      	cmp	r3, #16
 801a290:	d103      	bne.n	801a29a <UART_RxISR_8BIT_FIFOEN+0x27a>
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	2210      	movs	r2, #16
 801a298:	621a      	str	r2, [r3, #32]
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a2a0:	4619      	mov	r1, r3
 801a2a2:	6878      	ldr	r0, [r7, #4]
 801a2a4:	f7fe f966 	bl	8018574 <HAL_UARTEx_RxEventCallback>
 801a2a8:	e002      	b.n	801a2b0 <UART_RxISR_8BIT_FIFOEN+0x290>
 801a2aa:	6878      	ldr	r0, [r7, #4]
 801a2ac:	f7eb ffb2 	bl	8006214 <HAL_UART_RxCpltCallback>
 801a2b0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d006      	beq.n	801a2c6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801a2b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a2bc:	f003 0320 	and.w	r3, r3, #32
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	f47f aed1 	bne.w	801a068 <UART_RxISR_8BIT_FIFOEN+0x48>
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a2cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 801a2d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d049      	beq.n	801a36c <UART_RxISR_8BIT_FIFOEN+0x34c>
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a2de:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801a2e2:	429a      	cmp	r2, r3
 801a2e4:	d242      	bcs.n	801a36c <UART_RxISR_8BIT_FIFOEN+0x34c>
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	3308      	adds	r3, #8
 801a2ec:	623b      	str	r3, [r7, #32]
 801a2ee:	6a3b      	ldr	r3, [r7, #32]
 801a2f0:	e853 3f00 	ldrex	r3, [r3]
 801a2f4:	61fb      	str	r3, [r7, #28]
 801a2f6:	69fb      	ldr	r3, [r7, #28]
 801a2f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a2fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	3308      	adds	r3, #8
 801a306:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a30a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a30c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a30e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a312:	e841 2300 	strex	r3, r2, [r1]
 801a316:	627b      	str	r3, [r7, #36]	@ 0x24
 801a318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d1e3      	bne.n	801a2e6 <UART_RxISR_8BIT_FIFOEN+0x2c6>
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	4a16      	ldr	r2, [pc, #88]	@ (801a37c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801a322:	675a      	str	r2, [r3, #116]	@ 0x74
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	60fb      	str	r3, [r7, #12]
 801a32a:	68fb      	ldr	r3, [r7, #12]
 801a32c:	e853 3f00 	ldrex	r3, [r3]
 801a330:	60bb      	str	r3, [r7, #8]
 801a332:	68bb      	ldr	r3, [r7, #8]
 801a334:	f043 0320 	orr.w	r3, r3, #32
 801a338:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	461a      	mov	r2, r3
 801a342:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a346:	61bb      	str	r3, [r7, #24]
 801a348:	617a      	str	r2, [r7, #20]
 801a34a:	6979      	ldr	r1, [r7, #20]
 801a34c:	69ba      	ldr	r2, [r7, #24]
 801a34e:	e841 2300 	strex	r3, r2, [r1]
 801a352:	613b      	str	r3, [r7, #16]
 801a354:	693b      	ldr	r3, [r7, #16]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d1e4      	bne.n	801a324 <UART_RxISR_8BIT_FIFOEN+0x304>
 801a35a:	e007      	b.n	801a36c <UART_RxISR_8BIT_FIFOEN+0x34c>
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	699a      	ldr	r2, [r3, #24]
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	f042 0208 	orr.w	r2, r2, #8
 801a36a:	619a      	str	r2, [r3, #24]
 801a36c:	bf00      	nop
 801a36e:	37b0      	adds	r7, #176	@ 0xb0
 801a370:	46bd      	mov	sp, r7
 801a372:	bd80      	pop	{r7, pc}
 801a374:	effffffe 	.word	0xeffffffe
 801a378:	58000c00 	.word	0x58000c00
 801a37c:	08019cb1 	.word	0x08019cb1

0801a380 <UART_RxISR_16BIT_FIFOEN>:
 801a380:	b580      	push	{r7, lr}
 801a382:	b0ae      	sub	sp, #184	@ 0xb8
 801a384:	af00      	add	r7, sp, #0
 801a386:	6078      	str	r0, [r7, #4]
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a38e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	69db      	ldr	r3, [r3, #28]
 801a398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	689b      	ldr	r3, [r3, #8]
 801a3ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a3b6:	2b22      	cmp	r3, #34	@ 0x22
 801a3b8:	f040 8184 	bne.w	801a6c4 <UART_RxISR_16BIT_FIFOEN+0x344>
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a3c2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 801a3c6:	e127      	b.n	801a618 <UART_RxISR_16BIT_FIFOEN+0x298>
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	681b      	ldr	r3, [r3, #0]
 801a3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a3ce:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a3d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801a3da:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801a3de:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a3e2:	4013      	ands	r3, r2
 801a3e4:	b29a      	uxth	r2, r3
 801a3e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a3ea:	801a      	strh	r2, [r3, #0]
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a3f0:	1c9a      	adds	r2, r3, #2
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	659a      	str	r2, [r3, #88]	@ 0x58
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a3fc:	b29b      	uxth	r3, r3
 801a3fe:	3b01      	subs	r3, #1
 801a400:	b29a      	uxth	r2, r3
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	69db      	ldr	r3, [r3, #28]
 801a40e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801a412:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a416:	f003 0307 	and.w	r3, r3, #7
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d053      	beq.n	801a4c6 <UART_RxISR_16BIT_FIFOEN+0x146>
 801a41e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a422:	f003 0301 	and.w	r3, r3, #1
 801a426:	2b00      	cmp	r3, #0
 801a428:	d011      	beq.n	801a44e <UART_RxISR_16BIT_FIFOEN+0xce>
 801a42a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a42e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a432:	2b00      	cmp	r3, #0
 801a434:	d00b      	beq.n	801a44e <UART_RxISR_16BIT_FIFOEN+0xce>
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	2201      	movs	r2, #1
 801a43c:	621a      	str	r2, [r3, #32]
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a444:	f043 0201 	orr.w	r2, r3, #1
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801a44e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a452:	f003 0302 	and.w	r3, r3, #2
 801a456:	2b00      	cmp	r3, #0
 801a458:	d011      	beq.n	801a47e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801a45a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a45e:	f003 0301 	and.w	r3, r3, #1
 801a462:	2b00      	cmp	r3, #0
 801a464:	d00b      	beq.n	801a47e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	2202      	movs	r2, #2
 801a46c:	621a      	str	r2, [r3, #32]
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a474:	f043 0204 	orr.w	r2, r3, #4
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801a47e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a482:	f003 0304 	and.w	r3, r3, #4
 801a486:	2b00      	cmp	r3, #0
 801a488:	d011      	beq.n	801a4ae <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a48a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a48e:	f003 0301 	and.w	r3, r3, #1
 801a492:	2b00      	cmp	r3, #0
 801a494:	d00b      	beq.n	801a4ae <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	2204      	movs	r2, #4
 801a49c:	621a      	str	r2, [r3, #32]
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a4a4:	f043 0202 	orr.w	r2, r3, #2
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d006      	beq.n	801a4c6 <UART_RxISR_16BIT_FIFOEN+0x146>
 801a4b8:	6878      	ldr	r0, [r7, #4]
 801a4ba:	f7fe f851 	bl	8018560 <HAL_UART_ErrorCallback>
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	2200      	movs	r2, #0
 801a4c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a4cc:	b29b      	uxth	r3, r3
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	f040 80a2 	bne.w	801a618 <UART_RxISR_16BIT_FIFOEN+0x298>
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	677b      	str	r3, [r7, #116]	@ 0x74
 801a4da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a4dc:	e853 3f00 	ldrex	r3, [r3]
 801a4e0:	673b      	str	r3, [r7, #112]	@ 0x70
 801a4e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a4e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a4e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	461a      	mov	r2, r3
 801a4f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a4f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a4fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801a4fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a4fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a502:	e841 2300 	strex	r3, r2, [r1]
 801a506:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a508:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	d1e2      	bne.n	801a4d4 <UART_RxISR_16BIT_FIFOEN+0x154>
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	3308      	adds	r3, #8
 801a514:	663b      	str	r3, [r7, #96]	@ 0x60
 801a516:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a518:	e853 3f00 	ldrex	r3, [r3]
 801a51c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a51e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a520:	4b6e      	ldr	r3, [pc, #440]	@ (801a6dc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801a522:	4013      	ands	r3, r2
 801a524:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	3308      	adds	r3, #8
 801a52e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a532:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a534:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a536:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a538:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a53a:	e841 2300 	strex	r3, r2, [r1]
 801a53e:	667b      	str	r3, [r7, #100]	@ 0x64
 801a540:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a542:	2b00      	cmp	r3, #0
 801a544:	d1e3      	bne.n	801a50e <UART_RxISR_16BIT_FIFOEN+0x18e>
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	2220      	movs	r2, #32
 801a54a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	2200      	movs	r2, #0
 801a552:	675a      	str	r2, [r3, #116]	@ 0x74
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	2200      	movs	r2, #0
 801a558:	671a      	str	r2, [r3, #112]	@ 0x70
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	681b      	ldr	r3, [r3, #0]
 801a55e:	4a60      	ldr	r2, [pc, #384]	@ (801a6e0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a560:	4293      	cmp	r3, r2
 801a562:	d021      	beq.n	801a5a8 <UART_RxISR_16BIT_FIFOEN+0x228>
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	685b      	ldr	r3, [r3, #4]
 801a56a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d01a      	beq.n	801a5a8 <UART_RxISR_16BIT_FIFOEN+0x228>
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a57a:	e853 3f00 	ldrex	r3, [r3]
 801a57e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a582:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a586:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	461a      	mov	r2, r3
 801a590:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a594:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a596:	657a      	str	r2, [r7, #84]	@ 0x54
 801a598:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a59a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a59c:	e841 2300 	strex	r3, r2, [r1]
 801a5a0:	653b      	str	r3, [r7, #80]	@ 0x50
 801a5a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d1e4      	bne.n	801a572 <UART_RxISR_16BIT_FIFOEN+0x1f2>
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a5ac:	2b01      	cmp	r3, #1
 801a5ae:	d130      	bne.n	801a612 <UART_RxISR_16BIT_FIFOEN+0x292>
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	2200      	movs	r2, #0
 801a5b4:	66da      	str	r2, [r3, #108]	@ 0x6c
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a5be:	e853 3f00 	ldrex	r3, [r3]
 801a5c2:	637b      	str	r3, [r7, #52]	@ 0x34
 801a5c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5c6:	f023 0310 	bic.w	r3, r3, #16
 801a5ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	461a      	mov	r2, r3
 801a5d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a5d8:	647b      	str	r3, [r7, #68]	@ 0x44
 801a5da:	643a      	str	r2, [r7, #64]	@ 0x40
 801a5dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a5de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a5e0:	e841 2300 	strex	r3, r2, [r1]
 801a5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a5e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d1e4      	bne.n	801a5b6 <UART_RxISR_16BIT_FIFOEN+0x236>
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	69db      	ldr	r3, [r3, #28]
 801a5f2:	f003 0310 	and.w	r3, r3, #16
 801a5f6:	2b10      	cmp	r3, #16
 801a5f8:	d103      	bne.n	801a602 <UART_RxISR_16BIT_FIFOEN+0x282>
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	2210      	movs	r2, #16
 801a600:	621a      	str	r2, [r3, #32]
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a608:	4619      	mov	r1, r3
 801a60a:	6878      	ldr	r0, [r7, #4]
 801a60c:	f7fd ffb2 	bl	8018574 <HAL_UARTEx_RxEventCallback>
 801a610:	e002      	b.n	801a618 <UART_RxISR_16BIT_FIFOEN+0x298>
 801a612:	6878      	ldr	r0, [r7, #4]
 801a614:	f7eb fdfe 	bl	8006214 <HAL_UART_RxCpltCallback>
 801a618:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d006      	beq.n	801a62e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 801a620:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a624:	f003 0320 	and.w	r3, r3, #32
 801a628:	2b00      	cmp	r3, #0
 801a62a:	f47f aecd 	bne.w	801a3c8 <UART_RxISR_16BIT_FIFOEN+0x48>
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a634:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 801a638:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	d049      	beq.n	801a6d4 <UART_RxISR_16BIT_FIFOEN+0x354>
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a646:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801a64a:	429a      	cmp	r2, r3
 801a64c:	d242      	bcs.n	801a6d4 <UART_RxISR_16BIT_FIFOEN+0x354>
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	3308      	adds	r3, #8
 801a654:	627b      	str	r3, [r7, #36]	@ 0x24
 801a656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a658:	e853 3f00 	ldrex	r3, [r3]
 801a65c:	623b      	str	r3, [r7, #32]
 801a65e:	6a3b      	ldr	r3, [r7, #32]
 801a660:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	3308      	adds	r3, #8
 801a66e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801a672:	633a      	str	r2, [r7, #48]	@ 0x30
 801a674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a676:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a67a:	e841 2300 	strex	r3, r2, [r1]
 801a67e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a682:	2b00      	cmp	r3, #0
 801a684:	d1e3      	bne.n	801a64e <UART_RxISR_16BIT_FIFOEN+0x2ce>
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	4a16      	ldr	r2, [pc, #88]	@ (801a6e4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801a68a:	675a      	str	r2, [r3, #116]	@ 0x74
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	613b      	str	r3, [r7, #16]
 801a692:	693b      	ldr	r3, [r7, #16]
 801a694:	e853 3f00 	ldrex	r3, [r3]
 801a698:	60fb      	str	r3, [r7, #12]
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	f043 0320 	orr.w	r3, r3, #32
 801a6a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	461a      	mov	r2, r3
 801a6aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a6ae:	61fb      	str	r3, [r7, #28]
 801a6b0:	61ba      	str	r2, [r7, #24]
 801a6b2:	69b9      	ldr	r1, [r7, #24]
 801a6b4:	69fa      	ldr	r2, [r7, #28]
 801a6b6:	e841 2300 	strex	r3, r2, [r1]
 801a6ba:	617b      	str	r3, [r7, #20]
 801a6bc:	697b      	ldr	r3, [r7, #20]
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d1e4      	bne.n	801a68c <UART_RxISR_16BIT_FIFOEN+0x30c>
 801a6c2:	e007      	b.n	801a6d4 <UART_RxISR_16BIT_FIFOEN+0x354>
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	681b      	ldr	r3, [r3, #0]
 801a6c8:	699a      	ldr	r2, [r3, #24]
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	f042 0208 	orr.w	r2, r2, #8
 801a6d2:	619a      	str	r2, [r3, #24]
 801a6d4:	bf00      	nop
 801a6d6:	37b8      	adds	r7, #184	@ 0xb8
 801a6d8:	46bd      	mov	sp, r7
 801a6da:	bd80      	pop	{r7, pc}
 801a6dc:	effffffe 	.word	0xeffffffe
 801a6e0:	58000c00 	.word	0x58000c00
 801a6e4:	08019e69 	.word	0x08019e69

0801a6e8 <HAL_UARTEx_WakeupCallback>:
 801a6e8:	b480      	push	{r7}
 801a6ea:	b083      	sub	sp, #12
 801a6ec:	af00      	add	r7, sp, #0
 801a6ee:	6078      	str	r0, [r7, #4]
 801a6f0:	bf00      	nop
 801a6f2:	370c      	adds	r7, #12
 801a6f4:	46bd      	mov	sp, r7
 801a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6fa:	4770      	bx	lr

0801a6fc <HAL_UARTEx_RxFifoFullCallback>:
 801a6fc:	b480      	push	{r7}
 801a6fe:	b083      	sub	sp, #12
 801a700:	af00      	add	r7, sp, #0
 801a702:	6078      	str	r0, [r7, #4]
 801a704:	bf00      	nop
 801a706:	370c      	adds	r7, #12
 801a708:	46bd      	mov	sp, r7
 801a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a70e:	4770      	bx	lr

0801a710 <HAL_UARTEx_TxFifoEmptyCallback>:
 801a710:	b480      	push	{r7}
 801a712:	b083      	sub	sp, #12
 801a714:	af00      	add	r7, sp, #0
 801a716:	6078      	str	r0, [r7, #4]
 801a718:	bf00      	nop
 801a71a:	370c      	adds	r7, #12
 801a71c:	46bd      	mov	sp, r7
 801a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a722:	4770      	bx	lr

0801a724 <HAL_UARTEx_DisableFifoMode>:
 801a724:	b480      	push	{r7}
 801a726:	b085      	sub	sp, #20
 801a728:	af00      	add	r7, sp, #0
 801a72a:	6078      	str	r0, [r7, #4]
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a732:	2b01      	cmp	r3, #1
 801a734:	d101      	bne.n	801a73a <HAL_UARTEx_DisableFifoMode+0x16>
 801a736:	2302      	movs	r3, #2
 801a738:	e027      	b.n	801a78a <HAL_UARTEx_DisableFifoMode+0x66>
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	2201      	movs	r2, #1
 801a73e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	2224      	movs	r2, #36	@ 0x24
 801a746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	60fb      	str	r3, [r7, #12]
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	681b      	ldr	r3, [r3, #0]
 801a756:	681a      	ldr	r2, [r3, #0]
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	f022 0201 	bic.w	r2, r2, #1
 801a760:	601a      	str	r2, [r3, #0]
 801a762:	68fb      	ldr	r3, [r7, #12]
 801a764:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801a768:	60fb      	str	r3, [r7, #12]
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	2200      	movs	r2, #0
 801a76e:	665a      	str	r2, [r3, #100]	@ 0x64
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	681b      	ldr	r3, [r3, #0]
 801a774:	68fa      	ldr	r2, [r7, #12]
 801a776:	601a      	str	r2, [r3, #0]
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	2220      	movs	r2, #32
 801a77c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	2200      	movs	r2, #0
 801a784:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801a788:	2300      	movs	r3, #0
 801a78a:	4618      	mov	r0, r3
 801a78c:	3714      	adds	r7, #20
 801a78e:	46bd      	mov	sp, r7
 801a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a794:	4770      	bx	lr

0801a796 <HAL_UARTEx_SetTxFifoThreshold>:
 801a796:	b580      	push	{r7, lr}
 801a798:	b084      	sub	sp, #16
 801a79a:	af00      	add	r7, sp, #0
 801a79c:	6078      	str	r0, [r7, #4]
 801a79e:	6039      	str	r1, [r7, #0]
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a7a6:	2b01      	cmp	r3, #1
 801a7a8:	d101      	bne.n	801a7ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a7aa:	2302      	movs	r3, #2
 801a7ac:	e02d      	b.n	801a80a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	2201      	movs	r2, #1
 801a7b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	2224      	movs	r2, #36	@ 0x24
 801a7ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	681b      	ldr	r3, [r3, #0]
 801a7c4:	60fb      	str	r3, [r7, #12]
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	681a      	ldr	r2, [r3, #0]
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	681b      	ldr	r3, [r3, #0]
 801a7d0:	f022 0201 	bic.w	r2, r2, #1
 801a7d4:	601a      	str	r2, [r3, #0]
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	689b      	ldr	r3, [r3, #8]
 801a7dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	681b      	ldr	r3, [r3, #0]
 801a7e4:	683a      	ldr	r2, [r7, #0]
 801a7e6:	430a      	orrs	r2, r1
 801a7e8:	609a      	str	r2, [r3, #8]
 801a7ea:	6878      	ldr	r0, [r7, #4]
 801a7ec:	f000 f850 	bl	801a890 <UARTEx_SetNbDataToProcess>
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	68fa      	ldr	r2, [r7, #12]
 801a7f6:	601a      	str	r2, [r3, #0]
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	2220      	movs	r2, #32
 801a7fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	2200      	movs	r2, #0
 801a804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801a808:	2300      	movs	r3, #0
 801a80a:	4618      	mov	r0, r3
 801a80c:	3710      	adds	r7, #16
 801a80e:	46bd      	mov	sp, r7
 801a810:	bd80      	pop	{r7, pc}

0801a812 <HAL_UARTEx_SetRxFifoThreshold>:
 801a812:	b580      	push	{r7, lr}
 801a814:	b084      	sub	sp, #16
 801a816:	af00      	add	r7, sp, #0
 801a818:	6078      	str	r0, [r7, #4]
 801a81a:	6039      	str	r1, [r7, #0]
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a822:	2b01      	cmp	r3, #1
 801a824:	d101      	bne.n	801a82a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a826:	2302      	movs	r3, #2
 801a828:	e02d      	b.n	801a886 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	2201      	movs	r2, #1
 801a82e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	2224      	movs	r2, #36	@ 0x24
 801a836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	60fb      	str	r3, [r7, #12]
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	681a      	ldr	r2, [r3, #0]
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	f022 0201 	bic.w	r2, r2, #1
 801a850:	601a      	str	r2, [r3, #0]
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	689b      	ldr	r3, [r3, #8]
 801a858:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	683a      	ldr	r2, [r7, #0]
 801a862:	430a      	orrs	r2, r1
 801a864:	609a      	str	r2, [r3, #8]
 801a866:	6878      	ldr	r0, [r7, #4]
 801a868:	f000 f812 	bl	801a890 <UARTEx_SetNbDataToProcess>
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	68fa      	ldr	r2, [r7, #12]
 801a872:	601a      	str	r2, [r3, #0]
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	2220      	movs	r2, #32
 801a878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	2200      	movs	r2, #0
 801a880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 801a884:	2300      	movs	r3, #0
 801a886:	4618      	mov	r0, r3
 801a888:	3710      	adds	r7, #16
 801a88a:	46bd      	mov	sp, r7
 801a88c:	bd80      	pop	{r7, pc}
	...

0801a890 <UARTEx_SetNbDataToProcess>:
 801a890:	b480      	push	{r7}
 801a892:	b085      	sub	sp, #20
 801a894:	af00      	add	r7, sp, #0
 801a896:	6078      	str	r0, [r7, #4]
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d108      	bne.n	801a8b2 <UARTEx_SetNbDataToProcess+0x22>
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	2201      	movs	r2, #1
 801a8a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	2201      	movs	r2, #1
 801a8ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801a8b0:	e031      	b.n	801a916 <UARTEx_SetNbDataToProcess+0x86>
 801a8b2:	2310      	movs	r3, #16
 801a8b4:	73fb      	strb	r3, [r7, #15]
 801a8b6:	2310      	movs	r3, #16
 801a8b8:	73bb      	strb	r3, [r7, #14]
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	689b      	ldr	r3, [r3, #8]
 801a8c0:	0e5b      	lsrs	r3, r3, #25
 801a8c2:	b2db      	uxtb	r3, r3
 801a8c4:	f003 0307 	and.w	r3, r3, #7
 801a8c8:	737b      	strb	r3, [r7, #13]
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	689b      	ldr	r3, [r3, #8]
 801a8d0:	0f5b      	lsrs	r3, r3, #29
 801a8d2:	b2db      	uxtb	r3, r3
 801a8d4:	f003 0307 	and.w	r3, r3, #7
 801a8d8:	733b      	strb	r3, [r7, #12]
 801a8da:	7bbb      	ldrb	r3, [r7, #14]
 801a8dc:	7b3a      	ldrb	r2, [r7, #12]
 801a8de:	4911      	ldr	r1, [pc, #68]	@ (801a924 <UARTEx_SetNbDataToProcess+0x94>)
 801a8e0:	5c8a      	ldrb	r2, [r1, r2]
 801a8e2:	fb02 f303 	mul.w	r3, r2, r3
 801a8e6:	7b3a      	ldrb	r2, [r7, #12]
 801a8e8:	490f      	ldr	r1, [pc, #60]	@ (801a928 <UARTEx_SetNbDataToProcess+0x98>)
 801a8ea:	5c8a      	ldrb	r2, [r1, r2]
 801a8ec:	fb93 f3f2 	sdiv	r3, r3, r2
 801a8f0:	b29a      	uxth	r2, r3
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801a8f8:	7bfb      	ldrb	r3, [r7, #15]
 801a8fa:	7b7a      	ldrb	r2, [r7, #13]
 801a8fc:	4909      	ldr	r1, [pc, #36]	@ (801a924 <UARTEx_SetNbDataToProcess+0x94>)
 801a8fe:	5c8a      	ldrb	r2, [r1, r2]
 801a900:	fb02 f303 	mul.w	r3, r2, r3
 801a904:	7b7a      	ldrb	r2, [r7, #13]
 801a906:	4908      	ldr	r1, [pc, #32]	@ (801a928 <UARTEx_SetNbDataToProcess+0x98>)
 801a908:	5c8a      	ldrb	r2, [r1, r2]
 801a90a:	fb93 f3f2 	sdiv	r3, r3, r2
 801a90e:	b29a      	uxth	r2, r3
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801a916:	bf00      	nop
 801a918:	3714      	adds	r7, #20
 801a91a:	46bd      	mov	sp, r7
 801a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a920:	4770      	bx	lr
 801a922:	bf00      	nop
 801a924:	0801e78c 	.word	0x0801e78c
 801a928:	0801e794 	.word	0x0801e794

0801a92c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801a92c:	b580      	push	{r7, lr}
 801a92e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801a930:	4904      	ldr	r1, [pc, #16]	@ (801a944 <MX_FATFS_Init+0x18>)
 801a932:	4805      	ldr	r0, [pc, #20]	@ (801a948 <MX_FATFS_Init+0x1c>)
 801a934:	f003 f8d8 	bl	801dae8 <FATFS_LinkDriver>
 801a938:	4603      	mov	r3, r0
 801a93a:	461a      	mov	r2, r3
 801a93c:	4b03      	ldr	r3, [pc, #12]	@ (801a94c <MX_FATFS_Init+0x20>)
 801a93e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801a940:	bf00      	nop
 801a942:	bd80      	pop	{r7, pc}
 801a944:	2400054c 	.word	0x2400054c
 801a948:	24000014 	.word	0x24000014
 801a94c:	24000548 	.word	0x24000548

0801a950 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801a950:	b480      	push	{r7}
 801a952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801a954:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801a956:	4618      	mov	r0, r3
 801a958:	46bd      	mov	sp, r7
 801a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a95e:	4770      	bx	lr

0801a960 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801a960:	b580      	push	{r7, lr}
 801a962:	b082      	sub	sp, #8
 801a964:	af00      	add	r7, sp, #0
 801a966:	4603      	mov	r3, r0
 801a968:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801a96a:	79fb      	ldrb	r3, [r7, #7]
 801a96c:	4618      	mov	r0, r3
 801a96e:	f7e9 fcfd 	bl	800436c <SD_disk_initialize>
 801a972:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801a974:	4618      	mov	r0, r3
 801a976:	3708      	adds	r7, #8
 801a978:	46bd      	mov	sp, r7
 801a97a:	bd80      	pop	{r7, pc}

0801a97c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801a97c:	b580      	push	{r7, lr}
 801a97e:	b082      	sub	sp, #8
 801a980:	af00      	add	r7, sp, #0
 801a982:	4603      	mov	r3, r0
 801a984:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801a986:	79fb      	ldrb	r3, [r7, #7]
 801a988:	4618      	mov	r0, r3
 801a98a:	f7e9 fddb 	bl	8004544 <SD_disk_status>
 801a98e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801a990:	4618      	mov	r0, r3
 801a992:	3708      	adds	r7, #8
 801a994:	46bd      	mov	sp, r7
 801a996:	bd80      	pop	{r7, pc}

0801a998 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801a998:	b580      	push	{r7, lr}
 801a99a:	b084      	sub	sp, #16
 801a99c:	af00      	add	r7, sp, #0
 801a99e:	60b9      	str	r1, [r7, #8]
 801a9a0:	607a      	str	r2, [r7, #4]
 801a9a2:	603b      	str	r3, [r7, #0]
 801a9a4:	4603      	mov	r3, r0
 801a9a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801a9a8:	7bf8      	ldrb	r0, [r7, #15]
 801a9aa:	683b      	ldr	r3, [r7, #0]
 801a9ac:	687a      	ldr	r2, [r7, #4]
 801a9ae:	68b9      	ldr	r1, [r7, #8]
 801a9b0:	f7e9 fdde 	bl	8004570 <SD_disk_read>
 801a9b4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	3710      	adds	r7, #16
 801a9ba:	46bd      	mov	sp, r7
 801a9bc:	bd80      	pop	{r7, pc}

0801a9be <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801a9be:	b580      	push	{r7, lr}
 801a9c0:	b084      	sub	sp, #16
 801a9c2:	af00      	add	r7, sp, #0
 801a9c4:	60b9      	str	r1, [r7, #8]
 801a9c6:	607a      	str	r2, [r7, #4]
 801a9c8:	603b      	str	r3, [r7, #0]
 801a9ca:	4603      	mov	r3, r0
 801a9cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801a9ce:	7bf8      	ldrb	r0, [r7, #15]
 801a9d0:	683b      	ldr	r3, [r7, #0]
 801a9d2:	687a      	ldr	r2, [r7, #4]
 801a9d4:	68b9      	ldr	r1, [r7, #8]
 801a9d6:	f7e9 fe35 	bl	8004644 <SD_disk_write>
 801a9da:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801a9dc:	4618      	mov	r0, r3
 801a9de:	3710      	adds	r7, #16
 801a9e0:	46bd      	mov	sp, r7
 801a9e2:	bd80      	pop	{r7, pc}

0801a9e4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801a9e4:	b580      	push	{r7, lr}
 801a9e6:	b082      	sub	sp, #8
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	4603      	mov	r3, r0
 801a9ec:	603a      	str	r2, [r7, #0]
 801a9ee:	71fb      	strb	r3, [r7, #7]
 801a9f0:	460b      	mov	r3, r1
 801a9f2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801a9f4:	79b9      	ldrb	r1, [r7, #6]
 801a9f6:	79fb      	ldrb	r3, [r7, #7]
 801a9f8:	683a      	ldr	r2, [r7, #0]
 801a9fa:	4618      	mov	r0, r3
 801a9fc:	f7e9 fea6 	bl	800474c <SD_disk_ioctl>
 801aa00:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801aa02:	4618      	mov	r0, r3
 801aa04:	3708      	adds	r7, #8
 801aa06:	46bd      	mov	sp, r7
 801aa08:	bd80      	pop	{r7, pc}
	...

0801aa0c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801aa0c:	b580      	push	{r7, lr}
 801aa0e:	b084      	sub	sp, #16
 801aa10:	af00      	add	r7, sp, #0
 801aa12:	4603      	mov	r3, r0
 801aa14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801aa16:	79fb      	ldrb	r3, [r7, #7]
 801aa18:	4a08      	ldr	r2, [pc, #32]	@ (801aa3c <disk_status+0x30>)
 801aa1a:	009b      	lsls	r3, r3, #2
 801aa1c:	4413      	add	r3, r2
 801aa1e:	685b      	ldr	r3, [r3, #4]
 801aa20:	685b      	ldr	r3, [r3, #4]
 801aa22:	79fa      	ldrb	r2, [r7, #7]
 801aa24:	4905      	ldr	r1, [pc, #20]	@ (801aa3c <disk_status+0x30>)
 801aa26:	440a      	add	r2, r1
 801aa28:	7a12      	ldrb	r2, [r2, #8]
 801aa2a:	4610      	mov	r0, r2
 801aa2c:	4798      	blx	r3
 801aa2e:	4603      	mov	r3, r0
 801aa30:	73fb      	strb	r3, [r7, #15]
  return stat;
 801aa32:	7bfb      	ldrb	r3, [r7, #15]
}
 801aa34:	4618      	mov	r0, r3
 801aa36:	3710      	adds	r7, #16
 801aa38:	46bd      	mov	sp, r7
 801aa3a:	bd80      	pop	{r7, pc}
 801aa3c:	24000768 	.word	0x24000768

0801aa40 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801aa40:	b580      	push	{r7, lr}
 801aa42:	b084      	sub	sp, #16
 801aa44:	af00      	add	r7, sp, #0
 801aa46:	4603      	mov	r3, r0
 801aa48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801aa4a:	2300      	movs	r3, #0
 801aa4c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801aa4e:	79fb      	ldrb	r3, [r7, #7]
 801aa50:	4a0e      	ldr	r2, [pc, #56]	@ (801aa8c <disk_initialize+0x4c>)
 801aa52:	5cd3      	ldrb	r3, [r2, r3]
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d114      	bne.n	801aa82 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801aa58:	79fb      	ldrb	r3, [r7, #7]
 801aa5a:	4a0c      	ldr	r2, [pc, #48]	@ (801aa8c <disk_initialize+0x4c>)
 801aa5c:	009b      	lsls	r3, r3, #2
 801aa5e:	4413      	add	r3, r2
 801aa60:	685b      	ldr	r3, [r3, #4]
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	79fa      	ldrb	r2, [r7, #7]
 801aa66:	4909      	ldr	r1, [pc, #36]	@ (801aa8c <disk_initialize+0x4c>)
 801aa68:	440a      	add	r2, r1
 801aa6a:	7a12      	ldrb	r2, [r2, #8]
 801aa6c:	4610      	mov	r0, r2
 801aa6e:	4798      	blx	r3
 801aa70:	4603      	mov	r3, r0
 801aa72:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801aa74:	7bfb      	ldrb	r3, [r7, #15]
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d103      	bne.n	801aa82 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801aa7a:	79fb      	ldrb	r3, [r7, #7]
 801aa7c:	4a03      	ldr	r2, [pc, #12]	@ (801aa8c <disk_initialize+0x4c>)
 801aa7e:	2101      	movs	r1, #1
 801aa80:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801aa82:	7bfb      	ldrb	r3, [r7, #15]
}
 801aa84:	4618      	mov	r0, r3
 801aa86:	3710      	adds	r7, #16
 801aa88:	46bd      	mov	sp, r7
 801aa8a:	bd80      	pop	{r7, pc}
 801aa8c:	24000768 	.word	0x24000768

0801aa90 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801aa90:	b590      	push	{r4, r7, lr}
 801aa92:	b087      	sub	sp, #28
 801aa94:	af00      	add	r7, sp, #0
 801aa96:	60b9      	str	r1, [r7, #8]
 801aa98:	607a      	str	r2, [r7, #4]
 801aa9a:	603b      	str	r3, [r7, #0]
 801aa9c:	4603      	mov	r3, r0
 801aa9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801aaa0:	7bfb      	ldrb	r3, [r7, #15]
 801aaa2:	4a0a      	ldr	r2, [pc, #40]	@ (801aacc <disk_read+0x3c>)
 801aaa4:	009b      	lsls	r3, r3, #2
 801aaa6:	4413      	add	r3, r2
 801aaa8:	685b      	ldr	r3, [r3, #4]
 801aaaa:	689c      	ldr	r4, [r3, #8]
 801aaac:	7bfb      	ldrb	r3, [r7, #15]
 801aaae:	4a07      	ldr	r2, [pc, #28]	@ (801aacc <disk_read+0x3c>)
 801aab0:	4413      	add	r3, r2
 801aab2:	7a18      	ldrb	r0, [r3, #8]
 801aab4:	683b      	ldr	r3, [r7, #0]
 801aab6:	687a      	ldr	r2, [r7, #4]
 801aab8:	68b9      	ldr	r1, [r7, #8]
 801aaba:	47a0      	blx	r4
 801aabc:	4603      	mov	r3, r0
 801aabe:	75fb      	strb	r3, [r7, #23]
  return res;
 801aac0:	7dfb      	ldrb	r3, [r7, #23]
}
 801aac2:	4618      	mov	r0, r3
 801aac4:	371c      	adds	r7, #28
 801aac6:	46bd      	mov	sp, r7
 801aac8:	bd90      	pop	{r4, r7, pc}
 801aaca:	bf00      	nop
 801aacc:	24000768 	.word	0x24000768

0801aad0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801aad0:	b590      	push	{r4, r7, lr}
 801aad2:	b087      	sub	sp, #28
 801aad4:	af00      	add	r7, sp, #0
 801aad6:	60b9      	str	r1, [r7, #8]
 801aad8:	607a      	str	r2, [r7, #4]
 801aada:	603b      	str	r3, [r7, #0]
 801aadc:	4603      	mov	r3, r0
 801aade:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801aae0:	7bfb      	ldrb	r3, [r7, #15]
 801aae2:	4a0a      	ldr	r2, [pc, #40]	@ (801ab0c <disk_write+0x3c>)
 801aae4:	009b      	lsls	r3, r3, #2
 801aae6:	4413      	add	r3, r2
 801aae8:	685b      	ldr	r3, [r3, #4]
 801aaea:	68dc      	ldr	r4, [r3, #12]
 801aaec:	7bfb      	ldrb	r3, [r7, #15]
 801aaee:	4a07      	ldr	r2, [pc, #28]	@ (801ab0c <disk_write+0x3c>)
 801aaf0:	4413      	add	r3, r2
 801aaf2:	7a18      	ldrb	r0, [r3, #8]
 801aaf4:	683b      	ldr	r3, [r7, #0]
 801aaf6:	687a      	ldr	r2, [r7, #4]
 801aaf8:	68b9      	ldr	r1, [r7, #8]
 801aafa:	47a0      	blx	r4
 801aafc:	4603      	mov	r3, r0
 801aafe:	75fb      	strb	r3, [r7, #23]
  return res;
 801ab00:	7dfb      	ldrb	r3, [r7, #23]
}
 801ab02:	4618      	mov	r0, r3
 801ab04:	371c      	adds	r7, #28
 801ab06:	46bd      	mov	sp, r7
 801ab08:	bd90      	pop	{r4, r7, pc}
 801ab0a:	bf00      	nop
 801ab0c:	24000768 	.word	0x24000768

0801ab10 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801ab10:	b580      	push	{r7, lr}
 801ab12:	b084      	sub	sp, #16
 801ab14:	af00      	add	r7, sp, #0
 801ab16:	4603      	mov	r3, r0
 801ab18:	603a      	str	r2, [r7, #0]
 801ab1a:	71fb      	strb	r3, [r7, #7]
 801ab1c:	460b      	mov	r3, r1
 801ab1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801ab20:	79fb      	ldrb	r3, [r7, #7]
 801ab22:	4a09      	ldr	r2, [pc, #36]	@ (801ab48 <disk_ioctl+0x38>)
 801ab24:	009b      	lsls	r3, r3, #2
 801ab26:	4413      	add	r3, r2
 801ab28:	685b      	ldr	r3, [r3, #4]
 801ab2a:	691b      	ldr	r3, [r3, #16]
 801ab2c:	79fa      	ldrb	r2, [r7, #7]
 801ab2e:	4906      	ldr	r1, [pc, #24]	@ (801ab48 <disk_ioctl+0x38>)
 801ab30:	440a      	add	r2, r1
 801ab32:	7a10      	ldrb	r0, [r2, #8]
 801ab34:	79b9      	ldrb	r1, [r7, #6]
 801ab36:	683a      	ldr	r2, [r7, #0]
 801ab38:	4798      	blx	r3
 801ab3a:	4603      	mov	r3, r0
 801ab3c:	73fb      	strb	r3, [r7, #15]
  return res;
 801ab3e:	7bfb      	ldrb	r3, [r7, #15]
}
 801ab40:	4618      	mov	r0, r3
 801ab42:	3710      	adds	r7, #16
 801ab44:	46bd      	mov	sp, r7
 801ab46:	bd80      	pop	{r7, pc}
 801ab48:	24000768 	.word	0x24000768

0801ab4c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801ab4c:	b480      	push	{r7}
 801ab4e:	b085      	sub	sp, #20
 801ab50:	af00      	add	r7, sp, #0
 801ab52:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	3301      	adds	r3, #1
 801ab58:	781b      	ldrb	r3, [r3, #0]
 801ab5a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801ab5c:	89fb      	ldrh	r3, [r7, #14]
 801ab5e:	021b      	lsls	r3, r3, #8
 801ab60:	b21a      	sxth	r2, r3
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	781b      	ldrb	r3, [r3, #0]
 801ab66:	b21b      	sxth	r3, r3
 801ab68:	4313      	orrs	r3, r2
 801ab6a:	b21b      	sxth	r3, r3
 801ab6c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801ab6e:	89fb      	ldrh	r3, [r7, #14]
}
 801ab70:	4618      	mov	r0, r3
 801ab72:	3714      	adds	r7, #20
 801ab74:	46bd      	mov	sp, r7
 801ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab7a:	4770      	bx	lr

0801ab7c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801ab7c:	b480      	push	{r7}
 801ab7e:	b085      	sub	sp, #20
 801ab80:	af00      	add	r7, sp, #0
 801ab82:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	3303      	adds	r3, #3
 801ab88:	781b      	ldrb	r3, [r3, #0]
 801ab8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	021b      	lsls	r3, r3, #8
 801ab90:	687a      	ldr	r2, [r7, #4]
 801ab92:	3202      	adds	r2, #2
 801ab94:	7812      	ldrb	r2, [r2, #0]
 801ab96:	4313      	orrs	r3, r2
 801ab98:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	021b      	lsls	r3, r3, #8
 801ab9e:	687a      	ldr	r2, [r7, #4]
 801aba0:	3201      	adds	r2, #1
 801aba2:	7812      	ldrb	r2, [r2, #0]
 801aba4:	4313      	orrs	r3, r2
 801aba6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801aba8:	68fb      	ldr	r3, [r7, #12]
 801abaa:	021b      	lsls	r3, r3, #8
 801abac:	687a      	ldr	r2, [r7, #4]
 801abae:	7812      	ldrb	r2, [r2, #0]
 801abb0:	4313      	orrs	r3, r2
 801abb2:	60fb      	str	r3, [r7, #12]
	return rv;
 801abb4:	68fb      	ldr	r3, [r7, #12]
}
 801abb6:	4618      	mov	r0, r3
 801abb8:	3714      	adds	r7, #20
 801abba:	46bd      	mov	sp, r7
 801abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abc0:	4770      	bx	lr

0801abc2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801abc2:	b480      	push	{r7}
 801abc4:	b083      	sub	sp, #12
 801abc6:	af00      	add	r7, sp, #0
 801abc8:	6078      	str	r0, [r7, #4]
 801abca:	460b      	mov	r3, r1
 801abcc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	1c5a      	adds	r2, r3, #1
 801abd2:	607a      	str	r2, [r7, #4]
 801abd4:	887a      	ldrh	r2, [r7, #2]
 801abd6:	b2d2      	uxtb	r2, r2
 801abd8:	701a      	strb	r2, [r3, #0]
 801abda:	887b      	ldrh	r3, [r7, #2]
 801abdc:	0a1b      	lsrs	r3, r3, #8
 801abde:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	1c5a      	adds	r2, r3, #1
 801abe4:	607a      	str	r2, [r7, #4]
 801abe6:	887a      	ldrh	r2, [r7, #2]
 801abe8:	b2d2      	uxtb	r2, r2
 801abea:	701a      	strb	r2, [r3, #0]
}
 801abec:	bf00      	nop
 801abee:	370c      	adds	r7, #12
 801abf0:	46bd      	mov	sp, r7
 801abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abf6:	4770      	bx	lr

0801abf8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801abf8:	b480      	push	{r7}
 801abfa:	b083      	sub	sp, #12
 801abfc:	af00      	add	r7, sp, #0
 801abfe:	6078      	str	r0, [r7, #4]
 801ac00:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	1c5a      	adds	r2, r3, #1
 801ac06:	607a      	str	r2, [r7, #4]
 801ac08:	683a      	ldr	r2, [r7, #0]
 801ac0a:	b2d2      	uxtb	r2, r2
 801ac0c:	701a      	strb	r2, [r3, #0]
 801ac0e:	683b      	ldr	r3, [r7, #0]
 801ac10:	0a1b      	lsrs	r3, r3, #8
 801ac12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	1c5a      	adds	r2, r3, #1
 801ac18:	607a      	str	r2, [r7, #4]
 801ac1a:	683a      	ldr	r2, [r7, #0]
 801ac1c:	b2d2      	uxtb	r2, r2
 801ac1e:	701a      	strb	r2, [r3, #0]
 801ac20:	683b      	ldr	r3, [r7, #0]
 801ac22:	0a1b      	lsrs	r3, r3, #8
 801ac24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	1c5a      	adds	r2, r3, #1
 801ac2a:	607a      	str	r2, [r7, #4]
 801ac2c:	683a      	ldr	r2, [r7, #0]
 801ac2e:	b2d2      	uxtb	r2, r2
 801ac30:	701a      	strb	r2, [r3, #0]
 801ac32:	683b      	ldr	r3, [r7, #0]
 801ac34:	0a1b      	lsrs	r3, r3, #8
 801ac36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	1c5a      	adds	r2, r3, #1
 801ac3c:	607a      	str	r2, [r7, #4]
 801ac3e:	683a      	ldr	r2, [r7, #0]
 801ac40:	b2d2      	uxtb	r2, r2
 801ac42:	701a      	strb	r2, [r3, #0]
}
 801ac44:	bf00      	nop
 801ac46:	370c      	adds	r7, #12
 801ac48:	46bd      	mov	sp, r7
 801ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac4e:	4770      	bx	lr

0801ac50 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801ac50:	b480      	push	{r7}
 801ac52:	b087      	sub	sp, #28
 801ac54:	af00      	add	r7, sp, #0
 801ac56:	60f8      	str	r0, [r7, #12]
 801ac58:	60b9      	str	r1, [r7, #8]
 801ac5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801ac5c:	68fb      	ldr	r3, [r7, #12]
 801ac5e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801ac60:	68bb      	ldr	r3, [r7, #8]
 801ac62:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	d00d      	beq.n	801ac86 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801ac6a:	693a      	ldr	r2, [r7, #16]
 801ac6c:	1c53      	adds	r3, r2, #1
 801ac6e:	613b      	str	r3, [r7, #16]
 801ac70:	697b      	ldr	r3, [r7, #20]
 801ac72:	1c59      	adds	r1, r3, #1
 801ac74:	6179      	str	r1, [r7, #20]
 801ac76:	7812      	ldrb	r2, [r2, #0]
 801ac78:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	3b01      	subs	r3, #1
 801ac7e:	607b      	str	r3, [r7, #4]
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d1f1      	bne.n	801ac6a <mem_cpy+0x1a>
	}
}
 801ac86:	bf00      	nop
 801ac88:	371c      	adds	r7, #28
 801ac8a:	46bd      	mov	sp, r7
 801ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac90:	4770      	bx	lr

0801ac92 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801ac92:	b480      	push	{r7}
 801ac94:	b087      	sub	sp, #28
 801ac96:	af00      	add	r7, sp, #0
 801ac98:	60f8      	str	r0, [r7, #12]
 801ac9a:	60b9      	str	r1, [r7, #8]
 801ac9c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801ac9e:	68fb      	ldr	r3, [r7, #12]
 801aca0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801aca2:	697b      	ldr	r3, [r7, #20]
 801aca4:	1c5a      	adds	r2, r3, #1
 801aca6:	617a      	str	r2, [r7, #20]
 801aca8:	68ba      	ldr	r2, [r7, #8]
 801acaa:	b2d2      	uxtb	r2, r2
 801acac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	3b01      	subs	r3, #1
 801acb2:	607b      	str	r3, [r7, #4]
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d1f3      	bne.n	801aca2 <mem_set+0x10>
}
 801acba:	bf00      	nop
 801acbc:	bf00      	nop
 801acbe:	371c      	adds	r7, #28
 801acc0:	46bd      	mov	sp, r7
 801acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acc6:	4770      	bx	lr

0801acc8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801acc8:	b480      	push	{r7}
 801acca:	b089      	sub	sp, #36	@ 0x24
 801accc:	af00      	add	r7, sp, #0
 801acce:	60f8      	str	r0, [r7, #12]
 801acd0:	60b9      	str	r1, [r7, #8]
 801acd2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801acd4:	68fb      	ldr	r3, [r7, #12]
 801acd6:	61fb      	str	r3, [r7, #28]
 801acd8:	68bb      	ldr	r3, [r7, #8]
 801acda:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801acdc:	2300      	movs	r3, #0
 801acde:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801ace0:	69fb      	ldr	r3, [r7, #28]
 801ace2:	1c5a      	adds	r2, r3, #1
 801ace4:	61fa      	str	r2, [r7, #28]
 801ace6:	781b      	ldrb	r3, [r3, #0]
 801ace8:	4619      	mov	r1, r3
 801acea:	69bb      	ldr	r3, [r7, #24]
 801acec:	1c5a      	adds	r2, r3, #1
 801acee:	61ba      	str	r2, [r7, #24]
 801acf0:	781b      	ldrb	r3, [r3, #0]
 801acf2:	1acb      	subs	r3, r1, r3
 801acf4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	3b01      	subs	r3, #1
 801acfa:	607b      	str	r3, [r7, #4]
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d002      	beq.n	801ad08 <mem_cmp+0x40>
 801ad02:	697b      	ldr	r3, [r7, #20]
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d0eb      	beq.n	801ace0 <mem_cmp+0x18>

	return r;
 801ad08:	697b      	ldr	r3, [r7, #20]
}
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	3724      	adds	r7, #36	@ 0x24
 801ad0e:	46bd      	mov	sp, r7
 801ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad14:	4770      	bx	lr

0801ad16 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801ad16:	b480      	push	{r7}
 801ad18:	b083      	sub	sp, #12
 801ad1a:	af00      	add	r7, sp, #0
 801ad1c:	6078      	str	r0, [r7, #4]
 801ad1e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801ad20:	e002      	b.n	801ad28 <chk_chr+0x12>
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	3301      	adds	r3, #1
 801ad26:	607b      	str	r3, [r7, #4]
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	781b      	ldrb	r3, [r3, #0]
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d005      	beq.n	801ad3c <chk_chr+0x26>
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	781b      	ldrb	r3, [r3, #0]
 801ad34:	461a      	mov	r2, r3
 801ad36:	683b      	ldr	r3, [r7, #0]
 801ad38:	4293      	cmp	r3, r2
 801ad3a:	d1f2      	bne.n	801ad22 <chk_chr+0xc>
	return *str;
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	781b      	ldrb	r3, [r3, #0]
}
 801ad40:	4618      	mov	r0, r3
 801ad42:	370c      	adds	r7, #12
 801ad44:	46bd      	mov	sp, r7
 801ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad4a:	4770      	bx	lr

0801ad4c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801ad4c:	b480      	push	{r7}
 801ad4e:	b085      	sub	sp, #20
 801ad50:	af00      	add	r7, sp, #0
 801ad52:	6078      	str	r0, [r7, #4]
 801ad54:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801ad56:	2300      	movs	r3, #0
 801ad58:	60bb      	str	r3, [r7, #8]
 801ad5a:	68bb      	ldr	r3, [r7, #8]
 801ad5c:	60fb      	str	r3, [r7, #12]
 801ad5e:	e029      	b.n	801adb4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801ad60:	4a27      	ldr	r2, [pc, #156]	@ (801ae00 <chk_lock+0xb4>)
 801ad62:	68fb      	ldr	r3, [r7, #12]
 801ad64:	011b      	lsls	r3, r3, #4
 801ad66:	4413      	add	r3, r2
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	d01d      	beq.n	801adaa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801ad6e:	4a24      	ldr	r2, [pc, #144]	@ (801ae00 <chk_lock+0xb4>)
 801ad70:	68fb      	ldr	r3, [r7, #12]
 801ad72:	011b      	lsls	r3, r3, #4
 801ad74:	4413      	add	r3, r2
 801ad76:	681a      	ldr	r2, [r3, #0]
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	681b      	ldr	r3, [r3, #0]
 801ad7c:	429a      	cmp	r2, r3
 801ad7e:	d116      	bne.n	801adae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801ad80:	4a1f      	ldr	r2, [pc, #124]	@ (801ae00 <chk_lock+0xb4>)
 801ad82:	68fb      	ldr	r3, [r7, #12]
 801ad84:	011b      	lsls	r3, r3, #4
 801ad86:	4413      	add	r3, r2
 801ad88:	3304      	adds	r3, #4
 801ad8a:	681a      	ldr	r2, [r3, #0]
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801ad90:	429a      	cmp	r2, r3
 801ad92:	d10c      	bne.n	801adae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801ad94:	4a1a      	ldr	r2, [pc, #104]	@ (801ae00 <chk_lock+0xb4>)
 801ad96:	68fb      	ldr	r3, [r7, #12]
 801ad98:	011b      	lsls	r3, r3, #4
 801ad9a:	4413      	add	r3, r2
 801ad9c:	3308      	adds	r3, #8
 801ad9e:	681a      	ldr	r2, [r3, #0]
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801ada4:	429a      	cmp	r2, r3
 801ada6:	d102      	bne.n	801adae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801ada8:	e007      	b.n	801adba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801adaa:	2301      	movs	r3, #1
 801adac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	3301      	adds	r3, #1
 801adb2:	60fb      	str	r3, [r7, #12]
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d0d2      	beq.n	801ad60 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801adba:	68fb      	ldr	r3, [r7, #12]
 801adbc:	2b01      	cmp	r3, #1
 801adbe:	d109      	bne.n	801add4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801adc0:	68bb      	ldr	r3, [r7, #8]
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d102      	bne.n	801adcc <chk_lock+0x80>
 801adc6:	683b      	ldr	r3, [r7, #0]
 801adc8:	2b02      	cmp	r3, #2
 801adca:	d101      	bne.n	801add0 <chk_lock+0x84>
 801adcc:	2300      	movs	r3, #0
 801adce:	e010      	b.n	801adf2 <chk_lock+0xa6>
 801add0:	2312      	movs	r3, #18
 801add2:	e00e      	b.n	801adf2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801add4:	683b      	ldr	r3, [r7, #0]
 801add6:	2b00      	cmp	r3, #0
 801add8:	d108      	bne.n	801adec <chk_lock+0xa0>
 801adda:	4a09      	ldr	r2, [pc, #36]	@ (801ae00 <chk_lock+0xb4>)
 801addc:	68fb      	ldr	r3, [r7, #12]
 801adde:	011b      	lsls	r3, r3, #4
 801ade0:	4413      	add	r3, r2
 801ade2:	330c      	adds	r3, #12
 801ade4:	881b      	ldrh	r3, [r3, #0]
 801ade6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801adea:	d101      	bne.n	801adf0 <chk_lock+0xa4>
 801adec:	2310      	movs	r3, #16
 801adee:	e000      	b.n	801adf2 <chk_lock+0xa6>
 801adf0:	2300      	movs	r3, #0
}
 801adf2:	4618      	mov	r0, r3
 801adf4:	3714      	adds	r7, #20
 801adf6:	46bd      	mov	sp, r7
 801adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adfc:	4770      	bx	lr
 801adfe:	bf00      	nop
 801ae00:	24000558 	.word	0x24000558

0801ae04 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801ae04:	b480      	push	{r7}
 801ae06:	b083      	sub	sp, #12
 801ae08:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801ae0a:	2300      	movs	r3, #0
 801ae0c:	607b      	str	r3, [r7, #4]
 801ae0e:	e002      	b.n	801ae16 <enq_lock+0x12>
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	3301      	adds	r3, #1
 801ae14:	607b      	str	r3, [r7, #4]
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d106      	bne.n	801ae2a <enq_lock+0x26>
 801ae1c:	4a09      	ldr	r2, [pc, #36]	@ (801ae44 <enq_lock+0x40>)
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	011b      	lsls	r3, r3, #4
 801ae22:	4413      	add	r3, r2
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d1f2      	bne.n	801ae10 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	2b01      	cmp	r3, #1
 801ae2e:	bf14      	ite	ne
 801ae30:	2301      	movne	r3, #1
 801ae32:	2300      	moveq	r3, #0
 801ae34:	b2db      	uxtb	r3, r3
}
 801ae36:	4618      	mov	r0, r3
 801ae38:	370c      	adds	r7, #12
 801ae3a:	46bd      	mov	sp, r7
 801ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae40:	4770      	bx	lr
 801ae42:	bf00      	nop
 801ae44:	24000558 	.word	0x24000558

0801ae48 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801ae48:	b480      	push	{r7}
 801ae4a:	b085      	sub	sp, #20
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	6078      	str	r0, [r7, #4]
 801ae50:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801ae52:	2300      	movs	r3, #0
 801ae54:	60fb      	str	r3, [r7, #12]
 801ae56:	e01f      	b.n	801ae98 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801ae58:	4a41      	ldr	r2, [pc, #260]	@ (801af60 <inc_lock+0x118>)
 801ae5a:	68fb      	ldr	r3, [r7, #12]
 801ae5c:	011b      	lsls	r3, r3, #4
 801ae5e:	4413      	add	r3, r2
 801ae60:	681a      	ldr	r2, [r3, #0]
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	429a      	cmp	r2, r3
 801ae68:	d113      	bne.n	801ae92 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801ae6a:	4a3d      	ldr	r2, [pc, #244]	@ (801af60 <inc_lock+0x118>)
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	011b      	lsls	r3, r3, #4
 801ae70:	4413      	add	r3, r2
 801ae72:	3304      	adds	r3, #4
 801ae74:	681a      	ldr	r2, [r3, #0]
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801ae7a:	429a      	cmp	r2, r3
 801ae7c:	d109      	bne.n	801ae92 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801ae7e:	4a38      	ldr	r2, [pc, #224]	@ (801af60 <inc_lock+0x118>)
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	011b      	lsls	r3, r3, #4
 801ae84:	4413      	add	r3, r2
 801ae86:	3308      	adds	r3, #8
 801ae88:	681a      	ldr	r2, [r3, #0]
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801ae8e:	429a      	cmp	r2, r3
 801ae90:	d006      	beq.n	801aea0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	3301      	adds	r3, #1
 801ae96:	60fb      	str	r3, [r7, #12]
 801ae98:	68fb      	ldr	r3, [r7, #12]
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d0dc      	beq.n	801ae58 <inc_lock+0x10>
 801ae9e:	e000      	b.n	801aea2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801aea0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801aea2:	68fb      	ldr	r3, [r7, #12]
 801aea4:	2b01      	cmp	r3, #1
 801aea6:	d132      	bne.n	801af0e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801aea8:	2300      	movs	r3, #0
 801aeaa:	60fb      	str	r3, [r7, #12]
 801aeac:	e002      	b.n	801aeb4 <inc_lock+0x6c>
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	3301      	adds	r3, #1
 801aeb2:	60fb      	str	r3, [r7, #12]
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d106      	bne.n	801aec8 <inc_lock+0x80>
 801aeba:	4a29      	ldr	r2, [pc, #164]	@ (801af60 <inc_lock+0x118>)
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	011b      	lsls	r3, r3, #4
 801aec0:	4413      	add	r3, r2
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d1f2      	bne.n	801aeae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801aec8:	68fb      	ldr	r3, [r7, #12]
 801aeca:	2b01      	cmp	r3, #1
 801aecc:	d101      	bne.n	801aed2 <inc_lock+0x8a>
 801aece:	2300      	movs	r3, #0
 801aed0:	e040      	b.n	801af54 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	681a      	ldr	r2, [r3, #0]
 801aed6:	4922      	ldr	r1, [pc, #136]	@ (801af60 <inc_lock+0x118>)
 801aed8:	68fb      	ldr	r3, [r7, #12]
 801aeda:	011b      	lsls	r3, r3, #4
 801aedc:	440b      	add	r3, r1
 801aede:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	689a      	ldr	r2, [r3, #8]
 801aee4:	491e      	ldr	r1, [pc, #120]	@ (801af60 <inc_lock+0x118>)
 801aee6:	68fb      	ldr	r3, [r7, #12]
 801aee8:	011b      	lsls	r3, r3, #4
 801aeea:	440b      	add	r3, r1
 801aeec:	3304      	adds	r3, #4
 801aeee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	695a      	ldr	r2, [r3, #20]
 801aef4:	491a      	ldr	r1, [pc, #104]	@ (801af60 <inc_lock+0x118>)
 801aef6:	68fb      	ldr	r3, [r7, #12]
 801aef8:	011b      	lsls	r3, r3, #4
 801aefa:	440b      	add	r3, r1
 801aefc:	3308      	adds	r3, #8
 801aefe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801af00:	4a17      	ldr	r2, [pc, #92]	@ (801af60 <inc_lock+0x118>)
 801af02:	68fb      	ldr	r3, [r7, #12]
 801af04:	011b      	lsls	r3, r3, #4
 801af06:	4413      	add	r3, r2
 801af08:	330c      	adds	r3, #12
 801af0a:	2200      	movs	r2, #0
 801af0c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801af0e:	683b      	ldr	r3, [r7, #0]
 801af10:	2b00      	cmp	r3, #0
 801af12:	d009      	beq.n	801af28 <inc_lock+0xe0>
 801af14:	4a12      	ldr	r2, [pc, #72]	@ (801af60 <inc_lock+0x118>)
 801af16:	68fb      	ldr	r3, [r7, #12]
 801af18:	011b      	lsls	r3, r3, #4
 801af1a:	4413      	add	r3, r2
 801af1c:	330c      	adds	r3, #12
 801af1e:	881b      	ldrh	r3, [r3, #0]
 801af20:	2b00      	cmp	r3, #0
 801af22:	d001      	beq.n	801af28 <inc_lock+0xe0>
 801af24:	2300      	movs	r3, #0
 801af26:	e015      	b.n	801af54 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801af28:	683b      	ldr	r3, [r7, #0]
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d108      	bne.n	801af40 <inc_lock+0xf8>
 801af2e:	4a0c      	ldr	r2, [pc, #48]	@ (801af60 <inc_lock+0x118>)
 801af30:	68fb      	ldr	r3, [r7, #12]
 801af32:	011b      	lsls	r3, r3, #4
 801af34:	4413      	add	r3, r2
 801af36:	330c      	adds	r3, #12
 801af38:	881b      	ldrh	r3, [r3, #0]
 801af3a:	3301      	adds	r3, #1
 801af3c:	b29a      	uxth	r2, r3
 801af3e:	e001      	b.n	801af44 <inc_lock+0xfc>
 801af40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801af44:	4906      	ldr	r1, [pc, #24]	@ (801af60 <inc_lock+0x118>)
 801af46:	68fb      	ldr	r3, [r7, #12]
 801af48:	011b      	lsls	r3, r3, #4
 801af4a:	440b      	add	r3, r1
 801af4c:	330c      	adds	r3, #12
 801af4e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	3301      	adds	r3, #1
}
 801af54:	4618      	mov	r0, r3
 801af56:	3714      	adds	r7, #20
 801af58:	46bd      	mov	sp, r7
 801af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af5e:	4770      	bx	lr
 801af60:	24000558 	.word	0x24000558

0801af64 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801af64:	b480      	push	{r7}
 801af66:	b085      	sub	sp, #20
 801af68:	af00      	add	r7, sp, #0
 801af6a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	3b01      	subs	r3, #1
 801af70:	607b      	str	r3, [r7, #4]
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d125      	bne.n	801afc4 <dec_lock+0x60>
		n = Files[i].ctr;
 801af78:	4a17      	ldr	r2, [pc, #92]	@ (801afd8 <dec_lock+0x74>)
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	011b      	lsls	r3, r3, #4
 801af7e:	4413      	add	r3, r2
 801af80:	330c      	adds	r3, #12
 801af82:	881b      	ldrh	r3, [r3, #0]
 801af84:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801af86:	89fb      	ldrh	r3, [r7, #14]
 801af88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801af8c:	d101      	bne.n	801af92 <dec_lock+0x2e>
 801af8e:	2300      	movs	r3, #0
 801af90:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801af92:	89fb      	ldrh	r3, [r7, #14]
 801af94:	2b00      	cmp	r3, #0
 801af96:	d002      	beq.n	801af9e <dec_lock+0x3a>
 801af98:	89fb      	ldrh	r3, [r7, #14]
 801af9a:	3b01      	subs	r3, #1
 801af9c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801af9e:	4a0e      	ldr	r2, [pc, #56]	@ (801afd8 <dec_lock+0x74>)
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	011b      	lsls	r3, r3, #4
 801afa4:	4413      	add	r3, r2
 801afa6:	330c      	adds	r3, #12
 801afa8:	89fa      	ldrh	r2, [r7, #14]
 801afaa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801afac:	89fb      	ldrh	r3, [r7, #14]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d105      	bne.n	801afbe <dec_lock+0x5a>
 801afb2:	4a09      	ldr	r2, [pc, #36]	@ (801afd8 <dec_lock+0x74>)
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	011b      	lsls	r3, r3, #4
 801afb8:	4413      	add	r3, r2
 801afba:	2200      	movs	r2, #0
 801afbc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801afbe:	2300      	movs	r3, #0
 801afc0:	737b      	strb	r3, [r7, #13]
 801afc2:	e001      	b.n	801afc8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801afc4:	2302      	movs	r3, #2
 801afc6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801afc8:	7b7b      	ldrb	r3, [r7, #13]
}
 801afca:	4618      	mov	r0, r3
 801afcc:	3714      	adds	r7, #20
 801afce:	46bd      	mov	sp, r7
 801afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afd4:	4770      	bx	lr
 801afd6:	bf00      	nop
 801afd8:	24000558 	.word	0x24000558

0801afdc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801afdc:	b480      	push	{r7}
 801afde:	b085      	sub	sp, #20
 801afe0:	af00      	add	r7, sp, #0
 801afe2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801afe4:	2300      	movs	r3, #0
 801afe6:	60fb      	str	r3, [r7, #12]
 801afe8:	e010      	b.n	801b00c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801afea:	4a0d      	ldr	r2, [pc, #52]	@ (801b020 <clear_lock+0x44>)
 801afec:	68fb      	ldr	r3, [r7, #12]
 801afee:	011b      	lsls	r3, r3, #4
 801aff0:	4413      	add	r3, r2
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	687a      	ldr	r2, [r7, #4]
 801aff6:	429a      	cmp	r2, r3
 801aff8:	d105      	bne.n	801b006 <clear_lock+0x2a>
 801affa:	4a09      	ldr	r2, [pc, #36]	@ (801b020 <clear_lock+0x44>)
 801affc:	68fb      	ldr	r3, [r7, #12]
 801affe:	011b      	lsls	r3, r3, #4
 801b000:	4413      	add	r3, r2
 801b002:	2200      	movs	r2, #0
 801b004:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801b006:	68fb      	ldr	r3, [r7, #12]
 801b008:	3301      	adds	r3, #1
 801b00a:	60fb      	str	r3, [r7, #12]
 801b00c:	68fb      	ldr	r3, [r7, #12]
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d0eb      	beq.n	801afea <clear_lock+0xe>
	}
}
 801b012:	bf00      	nop
 801b014:	bf00      	nop
 801b016:	3714      	adds	r7, #20
 801b018:	46bd      	mov	sp, r7
 801b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b01e:	4770      	bx	lr
 801b020:	24000558 	.word	0x24000558

0801b024 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801b024:	b580      	push	{r7, lr}
 801b026:	b086      	sub	sp, #24
 801b028:	af00      	add	r7, sp, #0
 801b02a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801b02c:	2300      	movs	r3, #0
 801b02e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	78db      	ldrb	r3, [r3, #3]
 801b034:	2b00      	cmp	r3, #0
 801b036:	d034      	beq.n	801b0a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b03c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	7858      	ldrb	r0, [r3, #1]
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b048:	2301      	movs	r3, #1
 801b04a:	697a      	ldr	r2, [r7, #20]
 801b04c:	f7ff fd40 	bl	801aad0 <disk_write>
 801b050:	4603      	mov	r3, r0
 801b052:	2b00      	cmp	r3, #0
 801b054:	d002      	beq.n	801b05c <sync_window+0x38>
			res = FR_DISK_ERR;
 801b056:	2301      	movs	r3, #1
 801b058:	73fb      	strb	r3, [r7, #15]
 801b05a:	e022      	b.n	801b0a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	2200      	movs	r2, #0
 801b060:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b066:	697a      	ldr	r2, [r7, #20]
 801b068:	1ad2      	subs	r2, r2, r3
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	6a1b      	ldr	r3, [r3, #32]
 801b06e:	429a      	cmp	r2, r3
 801b070:	d217      	bcs.n	801b0a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	789b      	ldrb	r3, [r3, #2]
 801b076:	613b      	str	r3, [r7, #16]
 801b078:	e010      	b.n	801b09c <sync_window+0x78>
					wsect += fs->fsize;
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	6a1b      	ldr	r3, [r3, #32]
 801b07e:	697a      	ldr	r2, [r7, #20]
 801b080:	4413      	add	r3, r2
 801b082:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	7858      	ldrb	r0, [r3, #1]
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b08e:	2301      	movs	r3, #1
 801b090:	697a      	ldr	r2, [r7, #20]
 801b092:	f7ff fd1d 	bl	801aad0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b096:	693b      	ldr	r3, [r7, #16]
 801b098:	3b01      	subs	r3, #1
 801b09a:	613b      	str	r3, [r7, #16]
 801b09c:	693b      	ldr	r3, [r7, #16]
 801b09e:	2b01      	cmp	r3, #1
 801b0a0:	d8eb      	bhi.n	801b07a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801b0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 801b0a4:	4618      	mov	r0, r3
 801b0a6:	3718      	adds	r7, #24
 801b0a8:	46bd      	mov	sp, r7
 801b0aa:	bd80      	pop	{r7, pc}

0801b0ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	b084      	sub	sp, #16
 801b0b0:	af00      	add	r7, sp, #0
 801b0b2:	6078      	str	r0, [r7, #4]
 801b0b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801b0b6:	2300      	movs	r3, #0
 801b0b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b0be:	683a      	ldr	r2, [r7, #0]
 801b0c0:	429a      	cmp	r2, r3
 801b0c2:	d01b      	beq.n	801b0fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801b0c4:	6878      	ldr	r0, [r7, #4]
 801b0c6:	f7ff ffad 	bl	801b024 <sync_window>
 801b0ca:	4603      	mov	r3, r0
 801b0cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801b0ce:	7bfb      	ldrb	r3, [r7, #15]
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d113      	bne.n	801b0fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	7858      	ldrb	r0, [r3, #1]
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b0de:	2301      	movs	r3, #1
 801b0e0:	683a      	ldr	r2, [r7, #0]
 801b0e2:	f7ff fcd5 	bl	801aa90 <disk_read>
 801b0e6:	4603      	mov	r3, r0
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d004      	beq.n	801b0f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801b0ec:	f04f 33ff 	mov.w	r3, #4294967295
 801b0f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801b0f2:	2301      	movs	r3, #1
 801b0f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	683a      	ldr	r2, [r7, #0]
 801b0fa:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801b0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 801b0fe:	4618      	mov	r0, r3
 801b100:	3710      	adds	r7, #16
 801b102:	46bd      	mov	sp, r7
 801b104:	bd80      	pop	{r7, pc}
	...

0801b108 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801b108:	b580      	push	{r7, lr}
 801b10a:	b084      	sub	sp, #16
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801b110:	6878      	ldr	r0, [r7, #4]
 801b112:	f7ff ff87 	bl	801b024 <sync_window>
 801b116:	4603      	mov	r3, r0
 801b118:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b11a:	7bfb      	ldrb	r3, [r7, #15]
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d159      	bne.n	801b1d4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	781b      	ldrb	r3, [r3, #0]
 801b124:	2b03      	cmp	r3, #3
 801b126:	d149      	bne.n	801b1bc <sync_fs+0xb4>
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	791b      	ldrb	r3, [r3, #4]
 801b12c:	2b01      	cmp	r3, #1
 801b12e:	d145      	bne.n	801b1bc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	899b      	ldrh	r3, [r3, #12]
 801b13a:	461a      	mov	r2, r3
 801b13c:	2100      	movs	r1, #0
 801b13e:	f7ff fda8 	bl	801ac92 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	3338      	adds	r3, #56	@ 0x38
 801b146:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b14a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801b14e:	4618      	mov	r0, r3
 801b150:	f7ff fd37 	bl	801abc2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	3338      	adds	r3, #56	@ 0x38
 801b158:	4921      	ldr	r1, [pc, #132]	@ (801b1e0 <sync_fs+0xd8>)
 801b15a:	4618      	mov	r0, r3
 801b15c:	f7ff fd4c 	bl	801abf8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	3338      	adds	r3, #56	@ 0x38
 801b164:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b168:	491e      	ldr	r1, [pc, #120]	@ (801b1e4 <sync_fs+0xdc>)
 801b16a:	4618      	mov	r0, r3
 801b16c:	f7ff fd44 	bl	801abf8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	3338      	adds	r3, #56	@ 0x38
 801b174:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	699b      	ldr	r3, [r3, #24]
 801b17c:	4619      	mov	r1, r3
 801b17e:	4610      	mov	r0, r2
 801b180:	f7ff fd3a 	bl	801abf8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	3338      	adds	r3, #56	@ 0x38
 801b188:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	695b      	ldr	r3, [r3, #20]
 801b190:	4619      	mov	r1, r3
 801b192:	4610      	mov	r0, r2
 801b194:	f7ff fd30 	bl	801abf8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b19c:	1c5a      	adds	r2, r3, #1
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	7858      	ldrb	r0, [r3, #1]
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b1b0:	2301      	movs	r3, #1
 801b1b2:	f7ff fc8d 	bl	801aad0 <disk_write>
			fs->fsi_flag = 0;
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	2200      	movs	r2, #0
 801b1ba:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	785b      	ldrb	r3, [r3, #1]
 801b1c0:	2200      	movs	r2, #0
 801b1c2:	2100      	movs	r1, #0
 801b1c4:	4618      	mov	r0, r3
 801b1c6:	f7ff fca3 	bl	801ab10 <disk_ioctl>
 801b1ca:	4603      	mov	r3, r0
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	d001      	beq.n	801b1d4 <sync_fs+0xcc>
 801b1d0:	2301      	movs	r3, #1
 801b1d2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	3710      	adds	r7, #16
 801b1da:	46bd      	mov	sp, r7
 801b1dc:	bd80      	pop	{r7, pc}
 801b1de:	bf00      	nop
 801b1e0:	41615252 	.word	0x41615252
 801b1e4:	61417272 	.word	0x61417272

0801b1e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b1e8:	b480      	push	{r7}
 801b1ea:	b083      	sub	sp, #12
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	6078      	str	r0, [r7, #4]
 801b1f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b1f2:	683b      	ldr	r3, [r7, #0]
 801b1f4:	3b02      	subs	r3, #2
 801b1f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	69db      	ldr	r3, [r3, #28]
 801b1fc:	3b02      	subs	r3, #2
 801b1fe:	683a      	ldr	r2, [r7, #0]
 801b200:	429a      	cmp	r2, r3
 801b202:	d301      	bcc.n	801b208 <clust2sect+0x20>
 801b204:	2300      	movs	r3, #0
 801b206:	e008      	b.n	801b21a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	895b      	ldrh	r3, [r3, #10]
 801b20c:	461a      	mov	r2, r3
 801b20e:	683b      	ldr	r3, [r7, #0]
 801b210:	fb03 f202 	mul.w	r2, r3, r2
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b218:	4413      	add	r3, r2
}
 801b21a:	4618      	mov	r0, r3
 801b21c:	370c      	adds	r7, #12
 801b21e:	46bd      	mov	sp, r7
 801b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b224:	4770      	bx	lr

0801b226 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b226:	b580      	push	{r7, lr}
 801b228:	b086      	sub	sp, #24
 801b22a:	af00      	add	r7, sp, #0
 801b22c:	6078      	str	r0, [r7, #4]
 801b22e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b236:	683b      	ldr	r3, [r7, #0]
 801b238:	2b01      	cmp	r3, #1
 801b23a:	d904      	bls.n	801b246 <get_fat+0x20>
 801b23c:	693b      	ldr	r3, [r7, #16]
 801b23e:	69db      	ldr	r3, [r3, #28]
 801b240:	683a      	ldr	r2, [r7, #0]
 801b242:	429a      	cmp	r2, r3
 801b244:	d302      	bcc.n	801b24c <get_fat+0x26>
		val = 1;	/* Internal error */
 801b246:	2301      	movs	r3, #1
 801b248:	617b      	str	r3, [r7, #20]
 801b24a:	e0ba      	b.n	801b3c2 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b24c:	f04f 33ff 	mov.w	r3, #4294967295
 801b250:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b252:	693b      	ldr	r3, [r7, #16]
 801b254:	781b      	ldrb	r3, [r3, #0]
 801b256:	2b03      	cmp	r3, #3
 801b258:	f000 8082 	beq.w	801b360 <get_fat+0x13a>
 801b25c:	2b03      	cmp	r3, #3
 801b25e:	f300 80a6 	bgt.w	801b3ae <get_fat+0x188>
 801b262:	2b01      	cmp	r3, #1
 801b264:	d002      	beq.n	801b26c <get_fat+0x46>
 801b266:	2b02      	cmp	r3, #2
 801b268:	d055      	beq.n	801b316 <get_fat+0xf0>
 801b26a:	e0a0      	b.n	801b3ae <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b26c:	683b      	ldr	r3, [r7, #0]
 801b26e:	60fb      	str	r3, [r7, #12]
 801b270:	68fb      	ldr	r3, [r7, #12]
 801b272:	085b      	lsrs	r3, r3, #1
 801b274:	68fa      	ldr	r2, [r7, #12]
 801b276:	4413      	add	r3, r2
 801b278:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b27a:	693b      	ldr	r3, [r7, #16]
 801b27c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b27e:	693b      	ldr	r3, [r7, #16]
 801b280:	899b      	ldrh	r3, [r3, #12]
 801b282:	4619      	mov	r1, r3
 801b284:	68fb      	ldr	r3, [r7, #12]
 801b286:	fbb3 f3f1 	udiv	r3, r3, r1
 801b28a:	4413      	add	r3, r2
 801b28c:	4619      	mov	r1, r3
 801b28e:	6938      	ldr	r0, [r7, #16]
 801b290:	f7ff ff0c 	bl	801b0ac <move_window>
 801b294:	4603      	mov	r3, r0
 801b296:	2b00      	cmp	r3, #0
 801b298:	f040 808c 	bne.w	801b3b4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801b29c:	68fb      	ldr	r3, [r7, #12]
 801b29e:	1c5a      	adds	r2, r3, #1
 801b2a0:	60fa      	str	r2, [r7, #12]
 801b2a2:	693a      	ldr	r2, [r7, #16]
 801b2a4:	8992      	ldrh	r2, [r2, #12]
 801b2a6:	fbb3 f1f2 	udiv	r1, r3, r2
 801b2aa:	fb01 f202 	mul.w	r2, r1, r2
 801b2ae:	1a9b      	subs	r3, r3, r2
 801b2b0:	693a      	ldr	r2, [r7, #16]
 801b2b2:	4413      	add	r3, r2
 801b2b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b2b8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b2ba:	693b      	ldr	r3, [r7, #16]
 801b2bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b2be:	693b      	ldr	r3, [r7, #16]
 801b2c0:	899b      	ldrh	r3, [r3, #12]
 801b2c2:	4619      	mov	r1, r3
 801b2c4:	68fb      	ldr	r3, [r7, #12]
 801b2c6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b2ca:	4413      	add	r3, r2
 801b2cc:	4619      	mov	r1, r3
 801b2ce:	6938      	ldr	r0, [r7, #16]
 801b2d0:	f7ff feec 	bl	801b0ac <move_window>
 801b2d4:	4603      	mov	r3, r0
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d16e      	bne.n	801b3b8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b2da:	693b      	ldr	r3, [r7, #16]
 801b2dc:	899b      	ldrh	r3, [r3, #12]
 801b2de:	461a      	mov	r2, r3
 801b2e0:	68fb      	ldr	r3, [r7, #12]
 801b2e2:	fbb3 f1f2 	udiv	r1, r3, r2
 801b2e6:	fb01 f202 	mul.w	r2, r1, r2
 801b2ea:	1a9b      	subs	r3, r3, r2
 801b2ec:	693a      	ldr	r2, [r7, #16]
 801b2ee:	4413      	add	r3, r2
 801b2f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b2f4:	021b      	lsls	r3, r3, #8
 801b2f6:	68ba      	ldr	r2, [r7, #8]
 801b2f8:	4313      	orrs	r3, r2
 801b2fa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b2fc:	683b      	ldr	r3, [r7, #0]
 801b2fe:	f003 0301 	and.w	r3, r3, #1
 801b302:	2b00      	cmp	r3, #0
 801b304:	d002      	beq.n	801b30c <get_fat+0xe6>
 801b306:	68bb      	ldr	r3, [r7, #8]
 801b308:	091b      	lsrs	r3, r3, #4
 801b30a:	e002      	b.n	801b312 <get_fat+0xec>
 801b30c:	68bb      	ldr	r3, [r7, #8]
 801b30e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b312:	617b      	str	r3, [r7, #20]
			break;
 801b314:	e055      	b.n	801b3c2 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b316:	693b      	ldr	r3, [r7, #16]
 801b318:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b31a:	693b      	ldr	r3, [r7, #16]
 801b31c:	899b      	ldrh	r3, [r3, #12]
 801b31e:	085b      	lsrs	r3, r3, #1
 801b320:	b29b      	uxth	r3, r3
 801b322:	4619      	mov	r1, r3
 801b324:	683b      	ldr	r3, [r7, #0]
 801b326:	fbb3 f3f1 	udiv	r3, r3, r1
 801b32a:	4413      	add	r3, r2
 801b32c:	4619      	mov	r1, r3
 801b32e:	6938      	ldr	r0, [r7, #16]
 801b330:	f7ff febc 	bl	801b0ac <move_window>
 801b334:	4603      	mov	r3, r0
 801b336:	2b00      	cmp	r3, #0
 801b338:	d140      	bne.n	801b3bc <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b33a:	693b      	ldr	r3, [r7, #16]
 801b33c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b340:	683b      	ldr	r3, [r7, #0]
 801b342:	005b      	lsls	r3, r3, #1
 801b344:	693a      	ldr	r2, [r7, #16]
 801b346:	8992      	ldrh	r2, [r2, #12]
 801b348:	fbb3 f0f2 	udiv	r0, r3, r2
 801b34c:	fb00 f202 	mul.w	r2, r0, r2
 801b350:	1a9b      	subs	r3, r3, r2
 801b352:	440b      	add	r3, r1
 801b354:	4618      	mov	r0, r3
 801b356:	f7ff fbf9 	bl	801ab4c <ld_word>
 801b35a:	4603      	mov	r3, r0
 801b35c:	617b      	str	r3, [r7, #20]
			break;
 801b35e:	e030      	b.n	801b3c2 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b360:	693b      	ldr	r3, [r7, #16]
 801b362:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b364:	693b      	ldr	r3, [r7, #16]
 801b366:	899b      	ldrh	r3, [r3, #12]
 801b368:	089b      	lsrs	r3, r3, #2
 801b36a:	b29b      	uxth	r3, r3
 801b36c:	4619      	mov	r1, r3
 801b36e:	683b      	ldr	r3, [r7, #0]
 801b370:	fbb3 f3f1 	udiv	r3, r3, r1
 801b374:	4413      	add	r3, r2
 801b376:	4619      	mov	r1, r3
 801b378:	6938      	ldr	r0, [r7, #16]
 801b37a:	f7ff fe97 	bl	801b0ac <move_window>
 801b37e:	4603      	mov	r3, r0
 801b380:	2b00      	cmp	r3, #0
 801b382:	d11d      	bne.n	801b3c0 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b384:	693b      	ldr	r3, [r7, #16]
 801b386:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b38a:	683b      	ldr	r3, [r7, #0]
 801b38c:	009b      	lsls	r3, r3, #2
 801b38e:	693a      	ldr	r2, [r7, #16]
 801b390:	8992      	ldrh	r2, [r2, #12]
 801b392:	fbb3 f0f2 	udiv	r0, r3, r2
 801b396:	fb00 f202 	mul.w	r2, r0, r2
 801b39a:	1a9b      	subs	r3, r3, r2
 801b39c:	440b      	add	r3, r1
 801b39e:	4618      	mov	r0, r3
 801b3a0:	f7ff fbec 	bl	801ab7c <ld_dword>
 801b3a4:	4603      	mov	r3, r0
 801b3a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801b3aa:	617b      	str	r3, [r7, #20]
			break;
 801b3ac:	e009      	b.n	801b3c2 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b3ae:	2301      	movs	r3, #1
 801b3b0:	617b      	str	r3, [r7, #20]
 801b3b2:	e006      	b.n	801b3c2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b3b4:	bf00      	nop
 801b3b6:	e004      	b.n	801b3c2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b3b8:	bf00      	nop
 801b3ba:	e002      	b.n	801b3c2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b3bc:	bf00      	nop
 801b3be:	e000      	b.n	801b3c2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b3c0:	bf00      	nop
		}
	}

	return val;
 801b3c2:	697b      	ldr	r3, [r7, #20]
}
 801b3c4:	4618      	mov	r0, r3
 801b3c6:	3718      	adds	r7, #24
 801b3c8:	46bd      	mov	sp, r7
 801b3ca:	bd80      	pop	{r7, pc}

0801b3cc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b3cc:	b590      	push	{r4, r7, lr}
 801b3ce:	b089      	sub	sp, #36	@ 0x24
 801b3d0:	af00      	add	r7, sp, #0
 801b3d2:	60f8      	str	r0, [r7, #12]
 801b3d4:	60b9      	str	r1, [r7, #8]
 801b3d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801b3d8:	2302      	movs	r3, #2
 801b3da:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801b3dc:	68bb      	ldr	r3, [r7, #8]
 801b3de:	2b01      	cmp	r3, #1
 801b3e0:	f240 8109 	bls.w	801b5f6 <put_fat+0x22a>
 801b3e4:	68fb      	ldr	r3, [r7, #12]
 801b3e6:	69db      	ldr	r3, [r3, #28]
 801b3e8:	68ba      	ldr	r2, [r7, #8]
 801b3ea:	429a      	cmp	r2, r3
 801b3ec:	f080 8103 	bcs.w	801b5f6 <put_fat+0x22a>
		switch (fs->fs_type) {
 801b3f0:	68fb      	ldr	r3, [r7, #12]
 801b3f2:	781b      	ldrb	r3, [r3, #0]
 801b3f4:	2b03      	cmp	r3, #3
 801b3f6:	f000 80b6 	beq.w	801b566 <put_fat+0x19a>
 801b3fa:	2b03      	cmp	r3, #3
 801b3fc:	f300 80fb 	bgt.w	801b5f6 <put_fat+0x22a>
 801b400:	2b01      	cmp	r3, #1
 801b402:	d003      	beq.n	801b40c <put_fat+0x40>
 801b404:	2b02      	cmp	r3, #2
 801b406:	f000 8083 	beq.w	801b510 <put_fat+0x144>
 801b40a:	e0f4      	b.n	801b5f6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b40c:	68bb      	ldr	r3, [r7, #8]
 801b40e:	61bb      	str	r3, [r7, #24]
 801b410:	69bb      	ldr	r3, [r7, #24]
 801b412:	085b      	lsrs	r3, r3, #1
 801b414:	69ba      	ldr	r2, [r7, #24]
 801b416:	4413      	add	r3, r2
 801b418:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b41a:	68fb      	ldr	r3, [r7, #12]
 801b41c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b41e:	68fb      	ldr	r3, [r7, #12]
 801b420:	899b      	ldrh	r3, [r3, #12]
 801b422:	4619      	mov	r1, r3
 801b424:	69bb      	ldr	r3, [r7, #24]
 801b426:	fbb3 f3f1 	udiv	r3, r3, r1
 801b42a:	4413      	add	r3, r2
 801b42c:	4619      	mov	r1, r3
 801b42e:	68f8      	ldr	r0, [r7, #12]
 801b430:	f7ff fe3c 	bl	801b0ac <move_window>
 801b434:	4603      	mov	r3, r0
 801b436:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b438:	7ffb      	ldrb	r3, [r7, #31]
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	f040 80d4 	bne.w	801b5e8 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801b440:	68fb      	ldr	r3, [r7, #12]
 801b442:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b446:	69bb      	ldr	r3, [r7, #24]
 801b448:	1c5a      	adds	r2, r3, #1
 801b44a:	61ba      	str	r2, [r7, #24]
 801b44c:	68fa      	ldr	r2, [r7, #12]
 801b44e:	8992      	ldrh	r2, [r2, #12]
 801b450:	fbb3 f0f2 	udiv	r0, r3, r2
 801b454:	fb00 f202 	mul.w	r2, r0, r2
 801b458:	1a9b      	subs	r3, r3, r2
 801b45a:	440b      	add	r3, r1
 801b45c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b45e:	68bb      	ldr	r3, [r7, #8]
 801b460:	f003 0301 	and.w	r3, r3, #1
 801b464:	2b00      	cmp	r3, #0
 801b466:	d00d      	beq.n	801b484 <put_fat+0xb8>
 801b468:	697b      	ldr	r3, [r7, #20]
 801b46a:	781b      	ldrb	r3, [r3, #0]
 801b46c:	b25b      	sxtb	r3, r3
 801b46e:	f003 030f 	and.w	r3, r3, #15
 801b472:	b25a      	sxtb	r2, r3
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	b2db      	uxtb	r3, r3
 801b478:	011b      	lsls	r3, r3, #4
 801b47a:	b25b      	sxtb	r3, r3
 801b47c:	4313      	orrs	r3, r2
 801b47e:	b25b      	sxtb	r3, r3
 801b480:	b2db      	uxtb	r3, r3
 801b482:	e001      	b.n	801b488 <put_fat+0xbc>
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	b2db      	uxtb	r3, r3
 801b488:	697a      	ldr	r2, [r7, #20]
 801b48a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b48c:	68fb      	ldr	r3, [r7, #12]
 801b48e:	2201      	movs	r2, #1
 801b490:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b492:	68fb      	ldr	r3, [r7, #12]
 801b494:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b496:	68fb      	ldr	r3, [r7, #12]
 801b498:	899b      	ldrh	r3, [r3, #12]
 801b49a:	4619      	mov	r1, r3
 801b49c:	69bb      	ldr	r3, [r7, #24]
 801b49e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b4a2:	4413      	add	r3, r2
 801b4a4:	4619      	mov	r1, r3
 801b4a6:	68f8      	ldr	r0, [r7, #12]
 801b4a8:	f7ff fe00 	bl	801b0ac <move_window>
 801b4ac:	4603      	mov	r3, r0
 801b4ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b4b0:	7ffb      	ldrb	r3, [r7, #31]
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	f040 809a 	bne.w	801b5ec <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801b4b8:	68fb      	ldr	r3, [r7, #12]
 801b4ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b4be:	68fb      	ldr	r3, [r7, #12]
 801b4c0:	899b      	ldrh	r3, [r3, #12]
 801b4c2:	461a      	mov	r2, r3
 801b4c4:	69bb      	ldr	r3, [r7, #24]
 801b4c6:	fbb3 f0f2 	udiv	r0, r3, r2
 801b4ca:	fb00 f202 	mul.w	r2, r0, r2
 801b4ce:	1a9b      	subs	r3, r3, r2
 801b4d0:	440b      	add	r3, r1
 801b4d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b4d4:	68bb      	ldr	r3, [r7, #8]
 801b4d6:	f003 0301 	and.w	r3, r3, #1
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	d003      	beq.n	801b4e6 <put_fat+0x11a>
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	091b      	lsrs	r3, r3, #4
 801b4e2:	b2db      	uxtb	r3, r3
 801b4e4:	e00e      	b.n	801b504 <put_fat+0x138>
 801b4e6:	697b      	ldr	r3, [r7, #20]
 801b4e8:	781b      	ldrb	r3, [r3, #0]
 801b4ea:	b25b      	sxtb	r3, r3
 801b4ec:	f023 030f 	bic.w	r3, r3, #15
 801b4f0:	b25a      	sxtb	r2, r3
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	0a1b      	lsrs	r3, r3, #8
 801b4f6:	b25b      	sxtb	r3, r3
 801b4f8:	f003 030f 	and.w	r3, r3, #15
 801b4fc:	b25b      	sxtb	r3, r3
 801b4fe:	4313      	orrs	r3, r2
 801b500:	b25b      	sxtb	r3, r3
 801b502:	b2db      	uxtb	r3, r3
 801b504:	697a      	ldr	r2, [r7, #20]
 801b506:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b508:	68fb      	ldr	r3, [r7, #12]
 801b50a:	2201      	movs	r2, #1
 801b50c:	70da      	strb	r2, [r3, #3]
			break;
 801b50e:	e072      	b.n	801b5f6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b514:	68fb      	ldr	r3, [r7, #12]
 801b516:	899b      	ldrh	r3, [r3, #12]
 801b518:	085b      	lsrs	r3, r3, #1
 801b51a:	b29b      	uxth	r3, r3
 801b51c:	4619      	mov	r1, r3
 801b51e:	68bb      	ldr	r3, [r7, #8]
 801b520:	fbb3 f3f1 	udiv	r3, r3, r1
 801b524:	4413      	add	r3, r2
 801b526:	4619      	mov	r1, r3
 801b528:	68f8      	ldr	r0, [r7, #12]
 801b52a:	f7ff fdbf 	bl	801b0ac <move_window>
 801b52e:	4603      	mov	r3, r0
 801b530:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b532:	7ffb      	ldrb	r3, [r7, #31]
 801b534:	2b00      	cmp	r3, #0
 801b536:	d15b      	bne.n	801b5f0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b538:	68fb      	ldr	r3, [r7, #12]
 801b53a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b53e:	68bb      	ldr	r3, [r7, #8]
 801b540:	005b      	lsls	r3, r3, #1
 801b542:	68fa      	ldr	r2, [r7, #12]
 801b544:	8992      	ldrh	r2, [r2, #12]
 801b546:	fbb3 f0f2 	udiv	r0, r3, r2
 801b54a:	fb00 f202 	mul.w	r2, r0, r2
 801b54e:	1a9b      	subs	r3, r3, r2
 801b550:	440b      	add	r3, r1
 801b552:	687a      	ldr	r2, [r7, #4]
 801b554:	b292      	uxth	r2, r2
 801b556:	4611      	mov	r1, r2
 801b558:	4618      	mov	r0, r3
 801b55a:	f7ff fb32 	bl	801abc2 <st_word>
			fs->wflag = 1;
 801b55e:	68fb      	ldr	r3, [r7, #12]
 801b560:	2201      	movs	r2, #1
 801b562:	70da      	strb	r2, [r3, #3]
			break;
 801b564:	e047      	b.n	801b5f6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b566:	68fb      	ldr	r3, [r7, #12]
 801b568:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	899b      	ldrh	r3, [r3, #12]
 801b56e:	089b      	lsrs	r3, r3, #2
 801b570:	b29b      	uxth	r3, r3
 801b572:	4619      	mov	r1, r3
 801b574:	68bb      	ldr	r3, [r7, #8]
 801b576:	fbb3 f3f1 	udiv	r3, r3, r1
 801b57a:	4413      	add	r3, r2
 801b57c:	4619      	mov	r1, r3
 801b57e:	68f8      	ldr	r0, [r7, #12]
 801b580:	f7ff fd94 	bl	801b0ac <move_window>
 801b584:	4603      	mov	r3, r0
 801b586:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b588:	7ffb      	ldrb	r3, [r7, #31]
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	d132      	bne.n	801b5f4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801b58e:	687b      	ldr	r3, [r7, #4]
 801b590:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801b594:	68fb      	ldr	r3, [r7, #12]
 801b596:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b59a:	68bb      	ldr	r3, [r7, #8]
 801b59c:	009b      	lsls	r3, r3, #2
 801b59e:	68fa      	ldr	r2, [r7, #12]
 801b5a0:	8992      	ldrh	r2, [r2, #12]
 801b5a2:	fbb3 f0f2 	udiv	r0, r3, r2
 801b5a6:	fb00 f202 	mul.w	r2, r0, r2
 801b5aa:	1a9b      	subs	r3, r3, r2
 801b5ac:	440b      	add	r3, r1
 801b5ae:	4618      	mov	r0, r3
 801b5b0:	f7ff fae4 	bl	801ab7c <ld_dword>
 801b5b4:	4603      	mov	r3, r0
 801b5b6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801b5ba:	4323      	orrs	r3, r4
 801b5bc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801b5be:	68fb      	ldr	r3, [r7, #12]
 801b5c0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b5c4:	68bb      	ldr	r3, [r7, #8]
 801b5c6:	009b      	lsls	r3, r3, #2
 801b5c8:	68fa      	ldr	r2, [r7, #12]
 801b5ca:	8992      	ldrh	r2, [r2, #12]
 801b5cc:	fbb3 f0f2 	udiv	r0, r3, r2
 801b5d0:	fb00 f202 	mul.w	r2, r0, r2
 801b5d4:	1a9b      	subs	r3, r3, r2
 801b5d6:	440b      	add	r3, r1
 801b5d8:	6879      	ldr	r1, [r7, #4]
 801b5da:	4618      	mov	r0, r3
 801b5dc:	f7ff fb0c 	bl	801abf8 <st_dword>
			fs->wflag = 1;
 801b5e0:	68fb      	ldr	r3, [r7, #12]
 801b5e2:	2201      	movs	r2, #1
 801b5e4:	70da      	strb	r2, [r3, #3]
			break;
 801b5e6:	e006      	b.n	801b5f6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b5e8:	bf00      	nop
 801b5ea:	e004      	b.n	801b5f6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b5ec:	bf00      	nop
 801b5ee:	e002      	b.n	801b5f6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b5f0:	bf00      	nop
 801b5f2:	e000      	b.n	801b5f6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b5f4:	bf00      	nop
		}
	}
	return res;
 801b5f6:	7ffb      	ldrb	r3, [r7, #31]
}
 801b5f8:	4618      	mov	r0, r3
 801b5fa:	3724      	adds	r7, #36	@ 0x24
 801b5fc:	46bd      	mov	sp, r7
 801b5fe:	bd90      	pop	{r4, r7, pc}

0801b600 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801b600:	b580      	push	{r7, lr}
 801b602:	b088      	sub	sp, #32
 801b604:	af00      	add	r7, sp, #0
 801b606:	60f8      	str	r0, [r7, #12]
 801b608:	60b9      	str	r1, [r7, #8]
 801b60a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801b60c:	2300      	movs	r3, #0
 801b60e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801b610:	68fb      	ldr	r3, [r7, #12]
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801b616:	68bb      	ldr	r3, [r7, #8]
 801b618:	2b01      	cmp	r3, #1
 801b61a:	d904      	bls.n	801b626 <remove_chain+0x26>
 801b61c:	69bb      	ldr	r3, [r7, #24]
 801b61e:	69db      	ldr	r3, [r3, #28]
 801b620:	68ba      	ldr	r2, [r7, #8]
 801b622:	429a      	cmp	r2, r3
 801b624:	d301      	bcc.n	801b62a <remove_chain+0x2a>
 801b626:	2302      	movs	r3, #2
 801b628:	e04b      	b.n	801b6c2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	d00c      	beq.n	801b64a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801b630:	f04f 32ff 	mov.w	r2, #4294967295
 801b634:	6879      	ldr	r1, [r7, #4]
 801b636:	69b8      	ldr	r0, [r7, #24]
 801b638:	f7ff fec8 	bl	801b3cc <put_fat>
 801b63c:	4603      	mov	r3, r0
 801b63e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801b640:	7ffb      	ldrb	r3, [r7, #31]
 801b642:	2b00      	cmp	r3, #0
 801b644:	d001      	beq.n	801b64a <remove_chain+0x4a>
 801b646:	7ffb      	ldrb	r3, [r7, #31]
 801b648:	e03b      	b.n	801b6c2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801b64a:	68b9      	ldr	r1, [r7, #8]
 801b64c:	68f8      	ldr	r0, [r7, #12]
 801b64e:	f7ff fdea 	bl	801b226 <get_fat>
 801b652:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801b654:	697b      	ldr	r3, [r7, #20]
 801b656:	2b00      	cmp	r3, #0
 801b658:	d031      	beq.n	801b6be <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801b65a:	697b      	ldr	r3, [r7, #20]
 801b65c:	2b01      	cmp	r3, #1
 801b65e:	d101      	bne.n	801b664 <remove_chain+0x64>
 801b660:	2302      	movs	r3, #2
 801b662:	e02e      	b.n	801b6c2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801b664:	697b      	ldr	r3, [r7, #20]
 801b666:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b66a:	d101      	bne.n	801b670 <remove_chain+0x70>
 801b66c:	2301      	movs	r3, #1
 801b66e:	e028      	b.n	801b6c2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801b670:	2200      	movs	r2, #0
 801b672:	68b9      	ldr	r1, [r7, #8]
 801b674:	69b8      	ldr	r0, [r7, #24]
 801b676:	f7ff fea9 	bl	801b3cc <put_fat>
 801b67a:	4603      	mov	r3, r0
 801b67c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801b67e:	7ffb      	ldrb	r3, [r7, #31]
 801b680:	2b00      	cmp	r3, #0
 801b682:	d001      	beq.n	801b688 <remove_chain+0x88>
 801b684:	7ffb      	ldrb	r3, [r7, #31]
 801b686:	e01c      	b.n	801b6c2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801b688:	69bb      	ldr	r3, [r7, #24]
 801b68a:	699a      	ldr	r2, [r3, #24]
 801b68c:	69bb      	ldr	r3, [r7, #24]
 801b68e:	69db      	ldr	r3, [r3, #28]
 801b690:	3b02      	subs	r3, #2
 801b692:	429a      	cmp	r2, r3
 801b694:	d20b      	bcs.n	801b6ae <remove_chain+0xae>
			fs->free_clst++;
 801b696:	69bb      	ldr	r3, [r7, #24]
 801b698:	699b      	ldr	r3, [r3, #24]
 801b69a:	1c5a      	adds	r2, r3, #1
 801b69c:	69bb      	ldr	r3, [r7, #24]
 801b69e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801b6a0:	69bb      	ldr	r3, [r7, #24]
 801b6a2:	791b      	ldrb	r3, [r3, #4]
 801b6a4:	f043 0301 	orr.w	r3, r3, #1
 801b6a8:	b2da      	uxtb	r2, r3
 801b6aa:	69bb      	ldr	r3, [r7, #24]
 801b6ac:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801b6ae:	697b      	ldr	r3, [r7, #20]
 801b6b0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801b6b2:	69bb      	ldr	r3, [r7, #24]
 801b6b4:	69db      	ldr	r3, [r3, #28]
 801b6b6:	68ba      	ldr	r2, [r7, #8]
 801b6b8:	429a      	cmp	r2, r3
 801b6ba:	d3c6      	bcc.n	801b64a <remove_chain+0x4a>
 801b6bc:	e000      	b.n	801b6c0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801b6be:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801b6c0:	2300      	movs	r3, #0
}
 801b6c2:	4618      	mov	r0, r3
 801b6c4:	3720      	adds	r7, #32
 801b6c6:	46bd      	mov	sp, r7
 801b6c8:	bd80      	pop	{r7, pc}

0801b6ca <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801b6ca:	b580      	push	{r7, lr}
 801b6cc:	b088      	sub	sp, #32
 801b6ce:	af00      	add	r7, sp, #0
 801b6d0:	6078      	str	r0, [r7, #4]
 801b6d2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801b6da:	683b      	ldr	r3, [r7, #0]
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d10d      	bne.n	801b6fc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801b6e0:	693b      	ldr	r3, [r7, #16]
 801b6e2:	695b      	ldr	r3, [r3, #20]
 801b6e4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801b6e6:	69bb      	ldr	r3, [r7, #24]
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d004      	beq.n	801b6f6 <create_chain+0x2c>
 801b6ec:	693b      	ldr	r3, [r7, #16]
 801b6ee:	69db      	ldr	r3, [r3, #28]
 801b6f0:	69ba      	ldr	r2, [r7, #24]
 801b6f2:	429a      	cmp	r2, r3
 801b6f4:	d31b      	bcc.n	801b72e <create_chain+0x64>
 801b6f6:	2301      	movs	r3, #1
 801b6f8:	61bb      	str	r3, [r7, #24]
 801b6fa:	e018      	b.n	801b72e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801b6fc:	6839      	ldr	r1, [r7, #0]
 801b6fe:	6878      	ldr	r0, [r7, #4]
 801b700:	f7ff fd91 	bl	801b226 <get_fat>
 801b704:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801b706:	68fb      	ldr	r3, [r7, #12]
 801b708:	2b01      	cmp	r3, #1
 801b70a:	d801      	bhi.n	801b710 <create_chain+0x46>
 801b70c:	2301      	movs	r3, #1
 801b70e:	e070      	b.n	801b7f2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801b710:	68fb      	ldr	r3, [r7, #12]
 801b712:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b716:	d101      	bne.n	801b71c <create_chain+0x52>
 801b718:	68fb      	ldr	r3, [r7, #12]
 801b71a:	e06a      	b.n	801b7f2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801b71c:	693b      	ldr	r3, [r7, #16]
 801b71e:	69db      	ldr	r3, [r3, #28]
 801b720:	68fa      	ldr	r2, [r7, #12]
 801b722:	429a      	cmp	r2, r3
 801b724:	d201      	bcs.n	801b72a <create_chain+0x60>
 801b726:	68fb      	ldr	r3, [r7, #12]
 801b728:	e063      	b.n	801b7f2 <create_chain+0x128>
		scl = clst;
 801b72a:	683b      	ldr	r3, [r7, #0]
 801b72c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801b72e:	69bb      	ldr	r3, [r7, #24]
 801b730:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801b732:	69fb      	ldr	r3, [r7, #28]
 801b734:	3301      	adds	r3, #1
 801b736:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801b738:	693b      	ldr	r3, [r7, #16]
 801b73a:	69db      	ldr	r3, [r3, #28]
 801b73c:	69fa      	ldr	r2, [r7, #28]
 801b73e:	429a      	cmp	r2, r3
 801b740:	d307      	bcc.n	801b752 <create_chain+0x88>
				ncl = 2;
 801b742:	2302      	movs	r3, #2
 801b744:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801b746:	69fa      	ldr	r2, [r7, #28]
 801b748:	69bb      	ldr	r3, [r7, #24]
 801b74a:	429a      	cmp	r2, r3
 801b74c:	d901      	bls.n	801b752 <create_chain+0x88>
 801b74e:	2300      	movs	r3, #0
 801b750:	e04f      	b.n	801b7f2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801b752:	69f9      	ldr	r1, [r7, #28]
 801b754:	6878      	ldr	r0, [r7, #4]
 801b756:	f7ff fd66 	bl	801b226 <get_fat>
 801b75a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801b75c:	68fb      	ldr	r3, [r7, #12]
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d00e      	beq.n	801b780 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801b762:	68fb      	ldr	r3, [r7, #12]
 801b764:	2b01      	cmp	r3, #1
 801b766:	d003      	beq.n	801b770 <create_chain+0xa6>
 801b768:	68fb      	ldr	r3, [r7, #12]
 801b76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b76e:	d101      	bne.n	801b774 <create_chain+0xaa>
 801b770:	68fb      	ldr	r3, [r7, #12]
 801b772:	e03e      	b.n	801b7f2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801b774:	69fa      	ldr	r2, [r7, #28]
 801b776:	69bb      	ldr	r3, [r7, #24]
 801b778:	429a      	cmp	r2, r3
 801b77a:	d1da      	bne.n	801b732 <create_chain+0x68>
 801b77c:	2300      	movs	r3, #0
 801b77e:	e038      	b.n	801b7f2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801b780:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801b782:	f04f 32ff 	mov.w	r2, #4294967295
 801b786:	69f9      	ldr	r1, [r7, #28]
 801b788:	6938      	ldr	r0, [r7, #16]
 801b78a:	f7ff fe1f 	bl	801b3cc <put_fat>
 801b78e:	4603      	mov	r3, r0
 801b790:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801b792:	7dfb      	ldrb	r3, [r7, #23]
 801b794:	2b00      	cmp	r3, #0
 801b796:	d109      	bne.n	801b7ac <create_chain+0xe2>
 801b798:	683b      	ldr	r3, [r7, #0]
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d006      	beq.n	801b7ac <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801b79e:	69fa      	ldr	r2, [r7, #28]
 801b7a0:	6839      	ldr	r1, [r7, #0]
 801b7a2:	6938      	ldr	r0, [r7, #16]
 801b7a4:	f7ff fe12 	bl	801b3cc <put_fat>
 801b7a8:	4603      	mov	r3, r0
 801b7aa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801b7ac:	7dfb      	ldrb	r3, [r7, #23]
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	d116      	bne.n	801b7e0 <create_chain+0x116>
		fs->last_clst = ncl;
 801b7b2:	693b      	ldr	r3, [r7, #16]
 801b7b4:	69fa      	ldr	r2, [r7, #28]
 801b7b6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801b7b8:	693b      	ldr	r3, [r7, #16]
 801b7ba:	699a      	ldr	r2, [r3, #24]
 801b7bc:	693b      	ldr	r3, [r7, #16]
 801b7be:	69db      	ldr	r3, [r3, #28]
 801b7c0:	3b02      	subs	r3, #2
 801b7c2:	429a      	cmp	r2, r3
 801b7c4:	d804      	bhi.n	801b7d0 <create_chain+0x106>
 801b7c6:	693b      	ldr	r3, [r7, #16]
 801b7c8:	699b      	ldr	r3, [r3, #24]
 801b7ca:	1e5a      	subs	r2, r3, #1
 801b7cc:	693b      	ldr	r3, [r7, #16]
 801b7ce:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801b7d0:	693b      	ldr	r3, [r7, #16]
 801b7d2:	791b      	ldrb	r3, [r3, #4]
 801b7d4:	f043 0301 	orr.w	r3, r3, #1
 801b7d8:	b2da      	uxtb	r2, r3
 801b7da:	693b      	ldr	r3, [r7, #16]
 801b7dc:	711a      	strb	r2, [r3, #4]
 801b7de:	e007      	b.n	801b7f0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801b7e0:	7dfb      	ldrb	r3, [r7, #23]
 801b7e2:	2b01      	cmp	r3, #1
 801b7e4:	d102      	bne.n	801b7ec <create_chain+0x122>
 801b7e6:	f04f 33ff 	mov.w	r3, #4294967295
 801b7ea:	e000      	b.n	801b7ee <create_chain+0x124>
 801b7ec:	2301      	movs	r3, #1
 801b7ee:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801b7f0:	69fb      	ldr	r3, [r7, #28]
}
 801b7f2:	4618      	mov	r0, r3
 801b7f4:	3720      	adds	r7, #32
 801b7f6:	46bd      	mov	sp, r7
 801b7f8:	bd80      	pop	{r7, pc}

0801b7fa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801b7fa:	b480      	push	{r7}
 801b7fc:	b087      	sub	sp, #28
 801b7fe:	af00      	add	r7, sp, #0
 801b800:	6078      	str	r0, [r7, #4]
 801b802:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	681b      	ldr	r3, [r3, #0]
 801b808:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b80e:	3304      	adds	r3, #4
 801b810:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801b812:	68fb      	ldr	r3, [r7, #12]
 801b814:	899b      	ldrh	r3, [r3, #12]
 801b816:	461a      	mov	r2, r3
 801b818:	683b      	ldr	r3, [r7, #0]
 801b81a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b81e:	68fa      	ldr	r2, [r7, #12]
 801b820:	8952      	ldrh	r2, [r2, #10]
 801b822:	fbb3 f3f2 	udiv	r3, r3, r2
 801b826:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b828:	693b      	ldr	r3, [r7, #16]
 801b82a:	1d1a      	adds	r2, r3, #4
 801b82c:	613a      	str	r2, [r7, #16]
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801b832:	68bb      	ldr	r3, [r7, #8]
 801b834:	2b00      	cmp	r3, #0
 801b836:	d101      	bne.n	801b83c <clmt_clust+0x42>
 801b838:	2300      	movs	r3, #0
 801b83a:	e010      	b.n	801b85e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801b83c:	697a      	ldr	r2, [r7, #20]
 801b83e:	68bb      	ldr	r3, [r7, #8]
 801b840:	429a      	cmp	r2, r3
 801b842:	d307      	bcc.n	801b854 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801b844:	697a      	ldr	r2, [r7, #20]
 801b846:	68bb      	ldr	r3, [r7, #8]
 801b848:	1ad3      	subs	r3, r2, r3
 801b84a:	617b      	str	r3, [r7, #20]
 801b84c:	693b      	ldr	r3, [r7, #16]
 801b84e:	3304      	adds	r3, #4
 801b850:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b852:	e7e9      	b.n	801b828 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801b854:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801b856:	693b      	ldr	r3, [r7, #16]
 801b858:	681a      	ldr	r2, [r3, #0]
 801b85a:	697b      	ldr	r3, [r7, #20]
 801b85c:	4413      	add	r3, r2
}
 801b85e:	4618      	mov	r0, r3
 801b860:	371c      	adds	r7, #28
 801b862:	46bd      	mov	sp, r7
 801b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b868:	4770      	bx	lr

0801b86a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801b86a:	b580      	push	{r7, lr}
 801b86c:	b086      	sub	sp, #24
 801b86e:	af00      	add	r7, sp, #0
 801b870:	6078      	str	r0, [r7, #4]
 801b872:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	681b      	ldr	r3, [r3, #0]
 801b878:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801b87a:	683b      	ldr	r3, [r7, #0]
 801b87c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b880:	d204      	bcs.n	801b88c <dir_sdi+0x22>
 801b882:	683b      	ldr	r3, [r7, #0]
 801b884:	f003 031f 	and.w	r3, r3, #31
 801b888:	2b00      	cmp	r3, #0
 801b88a:	d001      	beq.n	801b890 <dir_sdi+0x26>
		return FR_INT_ERR;
 801b88c:	2302      	movs	r3, #2
 801b88e:	e071      	b.n	801b974 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	683a      	ldr	r2, [r7, #0]
 801b894:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	689b      	ldr	r3, [r3, #8]
 801b89a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801b89c:	697b      	ldr	r3, [r7, #20]
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	d106      	bne.n	801b8b0 <dir_sdi+0x46>
 801b8a2:	693b      	ldr	r3, [r7, #16]
 801b8a4:	781b      	ldrb	r3, [r3, #0]
 801b8a6:	2b02      	cmp	r3, #2
 801b8a8:	d902      	bls.n	801b8b0 <dir_sdi+0x46>
		clst = fs->dirbase;
 801b8aa:	693b      	ldr	r3, [r7, #16]
 801b8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b8ae:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801b8b0:	697b      	ldr	r3, [r7, #20]
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d10c      	bne.n	801b8d0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801b8b6:	683b      	ldr	r3, [r7, #0]
 801b8b8:	095b      	lsrs	r3, r3, #5
 801b8ba:	693a      	ldr	r2, [r7, #16]
 801b8bc:	8912      	ldrh	r2, [r2, #8]
 801b8be:	4293      	cmp	r3, r2
 801b8c0:	d301      	bcc.n	801b8c6 <dir_sdi+0x5c>
 801b8c2:	2302      	movs	r3, #2
 801b8c4:	e056      	b.n	801b974 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801b8c6:	693b      	ldr	r3, [r7, #16]
 801b8c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	61da      	str	r2, [r3, #28]
 801b8ce:	e02d      	b.n	801b92c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801b8d0:	693b      	ldr	r3, [r7, #16]
 801b8d2:	895b      	ldrh	r3, [r3, #10]
 801b8d4:	461a      	mov	r2, r3
 801b8d6:	693b      	ldr	r3, [r7, #16]
 801b8d8:	899b      	ldrh	r3, [r3, #12]
 801b8da:	fb02 f303 	mul.w	r3, r2, r3
 801b8de:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b8e0:	e019      	b.n	801b916 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	6979      	ldr	r1, [r7, #20]
 801b8e6:	4618      	mov	r0, r3
 801b8e8:	f7ff fc9d 	bl	801b226 <get_fat>
 801b8ec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b8ee:	697b      	ldr	r3, [r7, #20]
 801b8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b8f4:	d101      	bne.n	801b8fa <dir_sdi+0x90>
 801b8f6:	2301      	movs	r3, #1
 801b8f8:	e03c      	b.n	801b974 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801b8fa:	697b      	ldr	r3, [r7, #20]
 801b8fc:	2b01      	cmp	r3, #1
 801b8fe:	d904      	bls.n	801b90a <dir_sdi+0xa0>
 801b900:	693b      	ldr	r3, [r7, #16]
 801b902:	69db      	ldr	r3, [r3, #28]
 801b904:	697a      	ldr	r2, [r7, #20]
 801b906:	429a      	cmp	r2, r3
 801b908:	d301      	bcc.n	801b90e <dir_sdi+0xa4>
 801b90a:	2302      	movs	r3, #2
 801b90c:	e032      	b.n	801b974 <dir_sdi+0x10a>
			ofs -= csz;
 801b90e:	683a      	ldr	r2, [r7, #0]
 801b910:	68fb      	ldr	r3, [r7, #12]
 801b912:	1ad3      	subs	r3, r2, r3
 801b914:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b916:	683a      	ldr	r2, [r7, #0]
 801b918:	68fb      	ldr	r3, [r7, #12]
 801b91a:	429a      	cmp	r2, r3
 801b91c:	d2e1      	bcs.n	801b8e2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801b91e:	6979      	ldr	r1, [r7, #20]
 801b920:	6938      	ldr	r0, [r7, #16]
 801b922:	f7ff fc61 	bl	801b1e8 <clust2sect>
 801b926:	4602      	mov	r2, r0
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	697a      	ldr	r2, [r7, #20]
 801b930:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	69db      	ldr	r3, [r3, #28]
 801b936:	2b00      	cmp	r3, #0
 801b938:	d101      	bne.n	801b93e <dir_sdi+0xd4>
 801b93a:	2302      	movs	r3, #2
 801b93c:	e01a      	b.n	801b974 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	69da      	ldr	r2, [r3, #28]
 801b942:	693b      	ldr	r3, [r7, #16]
 801b944:	899b      	ldrh	r3, [r3, #12]
 801b946:	4619      	mov	r1, r3
 801b948:	683b      	ldr	r3, [r7, #0]
 801b94a:	fbb3 f3f1 	udiv	r3, r3, r1
 801b94e:	441a      	add	r2, r3
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801b954:	693b      	ldr	r3, [r7, #16]
 801b956:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b95a:	693b      	ldr	r3, [r7, #16]
 801b95c:	899b      	ldrh	r3, [r3, #12]
 801b95e:	461a      	mov	r2, r3
 801b960:	683b      	ldr	r3, [r7, #0]
 801b962:	fbb3 f0f2 	udiv	r0, r3, r2
 801b966:	fb00 f202 	mul.w	r2, r0, r2
 801b96a:	1a9b      	subs	r3, r3, r2
 801b96c:	18ca      	adds	r2, r1, r3
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b972:	2300      	movs	r3, #0
}
 801b974:	4618      	mov	r0, r3
 801b976:	3718      	adds	r7, #24
 801b978:	46bd      	mov	sp, r7
 801b97a:	bd80      	pop	{r7, pc}

0801b97c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801b97c:	b580      	push	{r7, lr}
 801b97e:	b086      	sub	sp, #24
 801b980:	af00      	add	r7, sp, #0
 801b982:	6078      	str	r0, [r7, #4]
 801b984:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	681b      	ldr	r3, [r3, #0]
 801b98a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	695b      	ldr	r3, [r3, #20]
 801b990:	3320      	adds	r3, #32
 801b992:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	69db      	ldr	r3, [r3, #28]
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d003      	beq.n	801b9a4 <dir_next+0x28>
 801b99c:	68bb      	ldr	r3, [r7, #8]
 801b99e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b9a2:	d301      	bcc.n	801b9a8 <dir_next+0x2c>
 801b9a4:	2304      	movs	r3, #4
 801b9a6:	e0bb      	b.n	801bb20 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	899b      	ldrh	r3, [r3, #12]
 801b9ac:	461a      	mov	r2, r3
 801b9ae:	68bb      	ldr	r3, [r7, #8]
 801b9b0:	fbb3 f1f2 	udiv	r1, r3, r2
 801b9b4:	fb01 f202 	mul.w	r2, r1, r2
 801b9b8:	1a9b      	subs	r3, r3, r2
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	f040 809d 	bne.w	801bafa <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	69db      	ldr	r3, [r3, #28]
 801b9c4:	1c5a      	adds	r2, r3, #1
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	699b      	ldr	r3, [r3, #24]
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d10b      	bne.n	801b9ea <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801b9d2:	68bb      	ldr	r3, [r7, #8]
 801b9d4:	095b      	lsrs	r3, r3, #5
 801b9d6:	68fa      	ldr	r2, [r7, #12]
 801b9d8:	8912      	ldrh	r2, [r2, #8]
 801b9da:	4293      	cmp	r3, r2
 801b9dc:	f0c0 808d 	bcc.w	801bafa <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	2200      	movs	r2, #0
 801b9e4:	61da      	str	r2, [r3, #28]
 801b9e6:	2304      	movs	r3, #4
 801b9e8:	e09a      	b.n	801bb20 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801b9ea:	68fb      	ldr	r3, [r7, #12]
 801b9ec:	899b      	ldrh	r3, [r3, #12]
 801b9ee:	461a      	mov	r2, r3
 801b9f0:	68bb      	ldr	r3, [r7, #8]
 801b9f2:	fbb3 f3f2 	udiv	r3, r3, r2
 801b9f6:	68fa      	ldr	r2, [r7, #12]
 801b9f8:	8952      	ldrh	r2, [r2, #10]
 801b9fa:	3a01      	subs	r2, #1
 801b9fc:	4013      	ands	r3, r2
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d17b      	bne.n	801bafa <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801ba02:	687a      	ldr	r2, [r7, #4]
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	699b      	ldr	r3, [r3, #24]
 801ba08:	4619      	mov	r1, r3
 801ba0a:	4610      	mov	r0, r2
 801ba0c:	f7ff fc0b 	bl	801b226 <get_fat>
 801ba10:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801ba12:	697b      	ldr	r3, [r7, #20]
 801ba14:	2b01      	cmp	r3, #1
 801ba16:	d801      	bhi.n	801ba1c <dir_next+0xa0>
 801ba18:	2302      	movs	r3, #2
 801ba1a:	e081      	b.n	801bb20 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801ba1c:	697b      	ldr	r3, [r7, #20]
 801ba1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba22:	d101      	bne.n	801ba28 <dir_next+0xac>
 801ba24:	2301      	movs	r3, #1
 801ba26:	e07b      	b.n	801bb20 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801ba28:	68fb      	ldr	r3, [r7, #12]
 801ba2a:	69db      	ldr	r3, [r3, #28]
 801ba2c:	697a      	ldr	r2, [r7, #20]
 801ba2e:	429a      	cmp	r2, r3
 801ba30:	d359      	bcc.n	801bae6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801ba32:	683b      	ldr	r3, [r7, #0]
 801ba34:	2b00      	cmp	r3, #0
 801ba36:	d104      	bne.n	801ba42 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	2200      	movs	r2, #0
 801ba3c:	61da      	str	r2, [r3, #28]
 801ba3e:	2304      	movs	r3, #4
 801ba40:	e06e      	b.n	801bb20 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801ba42:	687a      	ldr	r2, [r7, #4]
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	699b      	ldr	r3, [r3, #24]
 801ba48:	4619      	mov	r1, r3
 801ba4a:	4610      	mov	r0, r2
 801ba4c:	f7ff fe3d 	bl	801b6ca <create_chain>
 801ba50:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801ba52:	697b      	ldr	r3, [r7, #20]
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d101      	bne.n	801ba5c <dir_next+0xe0>
 801ba58:	2307      	movs	r3, #7
 801ba5a:	e061      	b.n	801bb20 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801ba5c:	697b      	ldr	r3, [r7, #20]
 801ba5e:	2b01      	cmp	r3, #1
 801ba60:	d101      	bne.n	801ba66 <dir_next+0xea>
 801ba62:	2302      	movs	r3, #2
 801ba64:	e05c      	b.n	801bb20 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801ba66:	697b      	ldr	r3, [r7, #20]
 801ba68:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba6c:	d101      	bne.n	801ba72 <dir_next+0xf6>
 801ba6e:	2301      	movs	r3, #1
 801ba70:	e056      	b.n	801bb20 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801ba72:	68f8      	ldr	r0, [r7, #12]
 801ba74:	f7ff fad6 	bl	801b024 <sync_window>
 801ba78:	4603      	mov	r3, r0
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	d001      	beq.n	801ba82 <dir_next+0x106>
 801ba7e:	2301      	movs	r3, #1
 801ba80:	e04e      	b.n	801bb20 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801ba82:	68fb      	ldr	r3, [r7, #12]
 801ba84:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801ba88:	68fb      	ldr	r3, [r7, #12]
 801ba8a:	899b      	ldrh	r3, [r3, #12]
 801ba8c:	461a      	mov	r2, r3
 801ba8e:	2100      	movs	r1, #0
 801ba90:	f7ff f8ff 	bl	801ac92 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801ba94:	2300      	movs	r3, #0
 801ba96:	613b      	str	r3, [r7, #16]
 801ba98:	6979      	ldr	r1, [r7, #20]
 801ba9a:	68f8      	ldr	r0, [r7, #12]
 801ba9c:	f7ff fba4 	bl	801b1e8 <clust2sect>
 801baa0:	4602      	mov	r2, r0
 801baa2:	68fb      	ldr	r3, [r7, #12]
 801baa4:	635a      	str	r2, [r3, #52]	@ 0x34
 801baa6:	e012      	b.n	801bace <dir_next+0x152>
						fs->wflag = 1;
 801baa8:	68fb      	ldr	r3, [r7, #12]
 801baaa:	2201      	movs	r2, #1
 801baac:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801baae:	68f8      	ldr	r0, [r7, #12]
 801bab0:	f7ff fab8 	bl	801b024 <sync_window>
 801bab4:	4603      	mov	r3, r0
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d001      	beq.n	801babe <dir_next+0x142>
 801baba:	2301      	movs	r3, #1
 801babc:	e030      	b.n	801bb20 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801babe:	693b      	ldr	r3, [r7, #16]
 801bac0:	3301      	adds	r3, #1
 801bac2:	613b      	str	r3, [r7, #16]
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bac8:	1c5a      	adds	r2, r3, #1
 801baca:	68fb      	ldr	r3, [r7, #12]
 801bacc:	635a      	str	r2, [r3, #52]	@ 0x34
 801bace:	68fb      	ldr	r3, [r7, #12]
 801bad0:	895b      	ldrh	r3, [r3, #10]
 801bad2:	461a      	mov	r2, r3
 801bad4:	693b      	ldr	r3, [r7, #16]
 801bad6:	4293      	cmp	r3, r2
 801bad8:	d3e6      	bcc.n	801baa8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801bada:	68fb      	ldr	r3, [r7, #12]
 801badc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bade:	693b      	ldr	r3, [r7, #16]
 801bae0:	1ad2      	subs	r2, r2, r3
 801bae2:	68fb      	ldr	r3, [r7, #12]
 801bae4:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	697a      	ldr	r2, [r7, #20]
 801baea:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801baec:	6979      	ldr	r1, [r7, #20]
 801baee:	68f8      	ldr	r0, [r7, #12]
 801baf0:	f7ff fb7a 	bl	801b1e8 <clust2sect>
 801baf4:	4602      	mov	r2, r0
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	68ba      	ldr	r2, [r7, #8]
 801bafe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801bb00:	68fb      	ldr	r3, [r7, #12]
 801bb02:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	899b      	ldrh	r3, [r3, #12]
 801bb0a:	461a      	mov	r2, r3
 801bb0c:	68bb      	ldr	r3, [r7, #8]
 801bb0e:	fbb3 f0f2 	udiv	r0, r3, r2
 801bb12:	fb00 f202 	mul.w	r2, r0, r2
 801bb16:	1a9b      	subs	r3, r3, r2
 801bb18:	18ca      	adds	r2, r1, r3
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bb1e:	2300      	movs	r3, #0
}
 801bb20:	4618      	mov	r0, r3
 801bb22:	3718      	adds	r7, #24
 801bb24:	46bd      	mov	sp, r7
 801bb26:	bd80      	pop	{r7, pc}

0801bb28 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801bb28:	b580      	push	{r7, lr}
 801bb2a:	b086      	sub	sp, #24
 801bb2c:	af00      	add	r7, sp, #0
 801bb2e:	6078      	str	r0, [r7, #4]
 801bb30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801bb38:	2100      	movs	r1, #0
 801bb3a:	6878      	ldr	r0, [r7, #4]
 801bb3c:	f7ff fe95 	bl	801b86a <dir_sdi>
 801bb40:	4603      	mov	r3, r0
 801bb42:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bb44:	7dfb      	ldrb	r3, [r7, #23]
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d12b      	bne.n	801bba2 <dir_alloc+0x7a>
		n = 0;
 801bb4a:	2300      	movs	r3, #0
 801bb4c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	69db      	ldr	r3, [r3, #28]
 801bb52:	4619      	mov	r1, r3
 801bb54:	68f8      	ldr	r0, [r7, #12]
 801bb56:	f7ff faa9 	bl	801b0ac <move_window>
 801bb5a:	4603      	mov	r3, r0
 801bb5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801bb5e:	7dfb      	ldrb	r3, [r7, #23]
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	d11d      	bne.n	801bba0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	6a1b      	ldr	r3, [r3, #32]
 801bb68:	781b      	ldrb	r3, [r3, #0]
 801bb6a:	2be5      	cmp	r3, #229	@ 0xe5
 801bb6c:	d004      	beq.n	801bb78 <dir_alloc+0x50>
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	6a1b      	ldr	r3, [r3, #32]
 801bb72:	781b      	ldrb	r3, [r3, #0]
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d107      	bne.n	801bb88 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801bb78:	693b      	ldr	r3, [r7, #16]
 801bb7a:	3301      	adds	r3, #1
 801bb7c:	613b      	str	r3, [r7, #16]
 801bb7e:	693a      	ldr	r2, [r7, #16]
 801bb80:	683b      	ldr	r3, [r7, #0]
 801bb82:	429a      	cmp	r2, r3
 801bb84:	d102      	bne.n	801bb8c <dir_alloc+0x64>
 801bb86:	e00c      	b.n	801bba2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801bb88:	2300      	movs	r3, #0
 801bb8a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801bb8c:	2101      	movs	r1, #1
 801bb8e:	6878      	ldr	r0, [r7, #4]
 801bb90:	f7ff fef4 	bl	801b97c <dir_next>
 801bb94:	4603      	mov	r3, r0
 801bb96:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801bb98:	7dfb      	ldrb	r3, [r7, #23]
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d0d7      	beq.n	801bb4e <dir_alloc+0x26>
 801bb9e:	e000      	b.n	801bba2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801bba0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801bba2:	7dfb      	ldrb	r3, [r7, #23]
 801bba4:	2b04      	cmp	r3, #4
 801bba6:	d101      	bne.n	801bbac <dir_alloc+0x84>
 801bba8:	2307      	movs	r3, #7
 801bbaa:	75fb      	strb	r3, [r7, #23]
	return res;
 801bbac:	7dfb      	ldrb	r3, [r7, #23]
}
 801bbae:	4618      	mov	r0, r3
 801bbb0:	3718      	adds	r7, #24
 801bbb2:	46bd      	mov	sp, r7
 801bbb4:	bd80      	pop	{r7, pc}

0801bbb6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801bbb6:	b580      	push	{r7, lr}
 801bbb8:	b084      	sub	sp, #16
 801bbba:	af00      	add	r7, sp, #0
 801bbbc:	6078      	str	r0, [r7, #4]
 801bbbe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801bbc0:	683b      	ldr	r3, [r7, #0]
 801bbc2:	331a      	adds	r3, #26
 801bbc4:	4618      	mov	r0, r3
 801bbc6:	f7fe ffc1 	bl	801ab4c <ld_word>
 801bbca:	4603      	mov	r3, r0
 801bbcc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	781b      	ldrb	r3, [r3, #0]
 801bbd2:	2b03      	cmp	r3, #3
 801bbd4:	d109      	bne.n	801bbea <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801bbd6:	683b      	ldr	r3, [r7, #0]
 801bbd8:	3314      	adds	r3, #20
 801bbda:	4618      	mov	r0, r3
 801bbdc:	f7fe ffb6 	bl	801ab4c <ld_word>
 801bbe0:	4603      	mov	r3, r0
 801bbe2:	041b      	lsls	r3, r3, #16
 801bbe4:	68fa      	ldr	r2, [r7, #12]
 801bbe6:	4313      	orrs	r3, r2
 801bbe8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801bbea:	68fb      	ldr	r3, [r7, #12]
}
 801bbec:	4618      	mov	r0, r3
 801bbee:	3710      	adds	r7, #16
 801bbf0:	46bd      	mov	sp, r7
 801bbf2:	bd80      	pop	{r7, pc}

0801bbf4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801bbf4:	b580      	push	{r7, lr}
 801bbf6:	b084      	sub	sp, #16
 801bbf8:	af00      	add	r7, sp, #0
 801bbfa:	60f8      	str	r0, [r7, #12]
 801bbfc:	60b9      	str	r1, [r7, #8]
 801bbfe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801bc00:	68bb      	ldr	r3, [r7, #8]
 801bc02:	331a      	adds	r3, #26
 801bc04:	687a      	ldr	r2, [r7, #4]
 801bc06:	b292      	uxth	r2, r2
 801bc08:	4611      	mov	r1, r2
 801bc0a:	4618      	mov	r0, r3
 801bc0c:	f7fe ffd9 	bl	801abc2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801bc10:	68fb      	ldr	r3, [r7, #12]
 801bc12:	781b      	ldrb	r3, [r3, #0]
 801bc14:	2b03      	cmp	r3, #3
 801bc16:	d109      	bne.n	801bc2c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801bc18:	68bb      	ldr	r3, [r7, #8]
 801bc1a:	f103 0214 	add.w	r2, r3, #20
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	0c1b      	lsrs	r3, r3, #16
 801bc22:	b29b      	uxth	r3, r3
 801bc24:	4619      	mov	r1, r3
 801bc26:	4610      	mov	r0, r2
 801bc28:	f7fe ffcb 	bl	801abc2 <st_word>
	}
}
 801bc2c:	bf00      	nop
 801bc2e:	3710      	adds	r7, #16
 801bc30:	46bd      	mov	sp, r7
 801bc32:	bd80      	pop	{r7, pc}

0801bc34 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801bc34:	b590      	push	{r4, r7, lr}
 801bc36:	b087      	sub	sp, #28
 801bc38:	af00      	add	r7, sp, #0
 801bc3a:	6078      	str	r0, [r7, #4]
 801bc3c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801bc3e:	683b      	ldr	r3, [r7, #0]
 801bc40:	331a      	adds	r3, #26
 801bc42:	4618      	mov	r0, r3
 801bc44:	f7fe ff82 	bl	801ab4c <ld_word>
 801bc48:	4603      	mov	r3, r0
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	d001      	beq.n	801bc52 <cmp_lfn+0x1e>
 801bc4e:	2300      	movs	r3, #0
 801bc50:	e059      	b.n	801bd06 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801bc52:	683b      	ldr	r3, [r7, #0]
 801bc54:	781b      	ldrb	r3, [r3, #0]
 801bc56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bc5a:	1e5a      	subs	r2, r3, #1
 801bc5c:	4613      	mov	r3, r2
 801bc5e:	005b      	lsls	r3, r3, #1
 801bc60:	4413      	add	r3, r2
 801bc62:	009b      	lsls	r3, r3, #2
 801bc64:	4413      	add	r3, r2
 801bc66:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801bc68:	2301      	movs	r3, #1
 801bc6a:	81fb      	strh	r3, [r7, #14]
 801bc6c:	2300      	movs	r3, #0
 801bc6e:	613b      	str	r3, [r7, #16]
 801bc70:	e033      	b.n	801bcda <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801bc72:	4a27      	ldr	r2, [pc, #156]	@ (801bd10 <cmp_lfn+0xdc>)
 801bc74:	693b      	ldr	r3, [r7, #16]
 801bc76:	4413      	add	r3, r2
 801bc78:	781b      	ldrb	r3, [r3, #0]
 801bc7a:	461a      	mov	r2, r3
 801bc7c:	683b      	ldr	r3, [r7, #0]
 801bc7e:	4413      	add	r3, r2
 801bc80:	4618      	mov	r0, r3
 801bc82:	f7fe ff63 	bl	801ab4c <ld_word>
 801bc86:	4603      	mov	r3, r0
 801bc88:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801bc8a:	89fb      	ldrh	r3, [r7, #14]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d01a      	beq.n	801bcc6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801bc90:	697b      	ldr	r3, [r7, #20]
 801bc92:	2bfe      	cmp	r3, #254	@ 0xfe
 801bc94:	d812      	bhi.n	801bcbc <cmp_lfn+0x88>
 801bc96:	89bb      	ldrh	r3, [r7, #12]
 801bc98:	4618      	mov	r0, r3
 801bc9a:	f001 ff71 	bl	801db80 <ff_wtoupper>
 801bc9e:	4603      	mov	r3, r0
 801bca0:	461c      	mov	r4, r3
 801bca2:	697b      	ldr	r3, [r7, #20]
 801bca4:	1c5a      	adds	r2, r3, #1
 801bca6:	617a      	str	r2, [r7, #20]
 801bca8:	005b      	lsls	r3, r3, #1
 801bcaa:	687a      	ldr	r2, [r7, #4]
 801bcac:	4413      	add	r3, r2
 801bcae:	881b      	ldrh	r3, [r3, #0]
 801bcb0:	4618      	mov	r0, r3
 801bcb2:	f001 ff65 	bl	801db80 <ff_wtoupper>
 801bcb6:	4603      	mov	r3, r0
 801bcb8:	429c      	cmp	r4, r3
 801bcba:	d001      	beq.n	801bcc0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801bcbc:	2300      	movs	r3, #0
 801bcbe:	e022      	b.n	801bd06 <cmp_lfn+0xd2>
			}
			wc = uc;
 801bcc0:	89bb      	ldrh	r3, [r7, #12]
 801bcc2:	81fb      	strh	r3, [r7, #14]
 801bcc4:	e006      	b.n	801bcd4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801bcc6:	89bb      	ldrh	r3, [r7, #12]
 801bcc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bccc:	4293      	cmp	r3, r2
 801bcce:	d001      	beq.n	801bcd4 <cmp_lfn+0xa0>
 801bcd0:	2300      	movs	r3, #0
 801bcd2:	e018      	b.n	801bd06 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801bcd4:	693b      	ldr	r3, [r7, #16]
 801bcd6:	3301      	adds	r3, #1
 801bcd8:	613b      	str	r3, [r7, #16]
 801bcda:	693b      	ldr	r3, [r7, #16]
 801bcdc:	2b0c      	cmp	r3, #12
 801bcde:	d9c8      	bls.n	801bc72 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801bce0:	683b      	ldr	r3, [r7, #0]
 801bce2:	781b      	ldrb	r3, [r3, #0]
 801bce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	d00b      	beq.n	801bd04 <cmp_lfn+0xd0>
 801bcec:	89fb      	ldrh	r3, [r7, #14]
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d008      	beq.n	801bd04 <cmp_lfn+0xd0>
 801bcf2:	697b      	ldr	r3, [r7, #20]
 801bcf4:	005b      	lsls	r3, r3, #1
 801bcf6:	687a      	ldr	r2, [r7, #4]
 801bcf8:	4413      	add	r3, r2
 801bcfa:	881b      	ldrh	r3, [r3, #0]
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	d001      	beq.n	801bd04 <cmp_lfn+0xd0>
 801bd00:	2300      	movs	r3, #0
 801bd02:	e000      	b.n	801bd06 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801bd04:	2301      	movs	r3, #1
}
 801bd06:	4618      	mov	r0, r3
 801bd08:	371c      	adds	r7, #28
 801bd0a:	46bd      	mov	sp, r7
 801bd0c:	bd90      	pop	{r4, r7, pc}
 801bd0e:	bf00      	nop
 801bd10:	0801e81c 	.word	0x0801e81c

0801bd14 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801bd14:	b580      	push	{r7, lr}
 801bd16:	b086      	sub	sp, #24
 801bd18:	af00      	add	r7, sp, #0
 801bd1a:	6078      	str	r0, [r7, #4]
 801bd1c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801bd1e:	683b      	ldr	r3, [r7, #0]
 801bd20:	331a      	adds	r3, #26
 801bd22:	4618      	mov	r0, r3
 801bd24:	f7fe ff12 	bl	801ab4c <ld_word>
 801bd28:	4603      	mov	r3, r0
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d001      	beq.n	801bd32 <pick_lfn+0x1e>
 801bd2e:	2300      	movs	r3, #0
 801bd30:	e04d      	b.n	801bdce <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801bd32:	683b      	ldr	r3, [r7, #0]
 801bd34:	781b      	ldrb	r3, [r3, #0]
 801bd36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801bd3a:	1e5a      	subs	r2, r3, #1
 801bd3c:	4613      	mov	r3, r2
 801bd3e:	005b      	lsls	r3, r3, #1
 801bd40:	4413      	add	r3, r2
 801bd42:	009b      	lsls	r3, r3, #2
 801bd44:	4413      	add	r3, r2
 801bd46:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801bd48:	2301      	movs	r3, #1
 801bd4a:	81fb      	strh	r3, [r7, #14]
 801bd4c:	2300      	movs	r3, #0
 801bd4e:	613b      	str	r3, [r7, #16]
 801bd50:	e028      	b.n	801bda4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801bd52:	4a21      	ldr	r2, [pc, #132]	@ (801bdd8 <pick_lfn+0xc4>)
 801bd54:	693b      	ldr	r3, [r7, #16]
 801bd56:	4413      	add	r3, r2
 801bd58:	781b      	ldrb	r3, [r3, #0]
 801bd5a:	461a      	mov	r2, r3
 801bd5c:	683b      	ldr	r3, [r7, #0]
 801bd5e:	4413      	add	r3, r2
 801bd60:	4618      	mov	r0, r3
 801bd62:	f7fe fef3 	bl	801ab4c <ld_word>
 801bd66:	4603      	mov	r3, r0
 801bd68:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801bd6a:	89fb      	ldrh	r3, [r7, #14]
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d00f      	beq.n	801bd90 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801bd70:	697b      	ldr	r3, [r7, #20]
 801bd72:	2bfe      	cmp	r3, #254	@ 0xfe
 801bd74:	d901      	bls.n	801bd7a <pick_lfn+0x66>
 801bd76:	2300      	movs	r3, #0
 801bd78:	e029      	b.n	801bdce <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801bd7a:	89bb      	ldrh	r3, [r7, #12]
 801bd7c:	81fb      	strh	r3, [r7, #14]
 801bd7e:	697b      	ldr	r3, [r7, #20]
 801bd80:	1c5a      	adds	r2, r3, #1
 801bd82:	617a      	str	r2, [r7, #20]
 801bd84:	005b      	lsls	r3, r3, #1
 801bd86:	687a      	ldr	r2, [r7, #4]
 801bd88:	4413      	add	r3, r2
 801bd8a:	89fa      	ldrh	r2, [r7, #14]
 801bd8c:	801a      	strh	r2, [r3, #0]
 801bd8e:	e006      	b.n	801bd9e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801bd90:	89bb      	ldrh	r3, [r7, #12]
 801bd92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bd96:	4293      	cmp	r3, r2
 801bd98:	d001      	beq.n	801bd9e <pick_lfn+0x8a>
 801bd9a:	2300      	movs	r3, #0
 801bd9c:	e017      	b.n	801bdce <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801bd9e:	693b      	ldr	r3, [r7, #16]
 801bda0:	3301      	adds	r3, #1
 801bda2:	613b      	str	r3, [r7, #16]
 801bda4:	693b      	ldr	r3, [r7, #16]
 801bda6:	2b0c      	cmp	r3, #12
 801bda8:	d9d3      	bls.n	801bd52 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801bdaa:	683b      	ldr	r3, [r7, #0]
 801bdac:	781b      	ldrb	r3, [r3, #0]
 801bdae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d00a      	beq.n	801bdcc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801bdb6:	697b      	ldr	r3, [r7, #20]
 801bdb8:	2bfe      	cmp	r3, #254	@ 0xfe
 801bdba:	d901      	bls.n	801bdc0 <pick_lfn+0xac>
 801bdbc:	2300      	movs	r3, #0
 801bdbe:	e006      	b.n	801bdce <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801bdc0:	697b      	ldr	r3, [r7, #20]
 801bdc2:	005b      	lsls	r3, r3, #1
 801bdc4:	687a      	ldr	r2, [r7, #4]
 801bdc6:	4413      	add	r3, r2
 801bdc8:	2200      	movs	r2, #0
 801bdca:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801bdcc:	2301      	movs	r3, #1
}
 801bdce:	4618      	mov	r0, r3
 801bdd0:	3718      	adds	r7, #24
 801bdd2:	46bd      	mov	sp, r7
 801bdd4:	bd80      	pop	{r7, pc}
 801bdd6:	bf00      	nop
 801bdd8:	0801e81c 	.word	0x0801e81c

0801bddc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801bddc:	b580      	push	{r7, lr}
 801bdde:	b088      	sub	sp, #32
 801bde0:	af00      	add	r7, sp, #0
 801bde2:	60f8      	str	r0, [r7, #12]
 801bde4:	60b9      	str	r1, [r7, #8]
 801bde6:	4611      	mov	r1, r2
 801bde8:	461a      	mov	r2, r3
 801bdea:	460b      	mov	r3, r1
 801bdec:	71fb      	strb	r3, [r7, #7]
 801bdee:	4613      	mov	r3, r2
 801bdf0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801bdf2:	68bb      	ldr	r3, [r7, #8]
 801bdf4:	330d      	adds	r3, #13
 801bdf6:	79ba      	ldrb	r2, [r7, #6]
 801bdf8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801bdfa:	68bb      	ldr	r3, [r7, #8]
 801bdfc:	330b      	adds	r3, #11
 801bdfe:	220f      	movs	r2, #15
 801be00:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801be02:	68bb      	ldr	r3, [r7, #8]
 801be04:	330c      	adds	r3, #12
 801be06:	2200      	movs	r2, #0
 801be08:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801be0a:	68bb      	ldr	r3, [r7, #8]
 801be0c:	331a      	adds	r3, #26
 801be0e:	2100      	movs	r1, #0
 801be10:	4618      	mov	r0, r3
 801be12:	f7fe fed6 	bl	801abc2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801be16:	79fb      	ldrb	r3, [r7, #7]
 801be18:	1e5a      	subs	r2, r3, #1
 801be1a:	4613      	mov	r3, r2
 801be1c:	005b      	lsls	r3, r3, #1
 801be1e:	4413      	add	r3, r2
 801be20:	009b      	lsls	r3, r3, #2
 801be22:	4413      	add	r3, r2
 801be24:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801be26:	2300      	movs	r3, #0
 801be28:	82fb      	strh	r3, [r7, #22]
 801be2a:	2300      	movs	r3, #0
 801be2c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801be2e:	8afb      	ldrh	r3, [r7, #22]
 801be30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801be34:	4293      	cmp	r3, r2
 801be36:	d007      	beq.n	801be48 <put_lfn+0x6c>
 801be38:	69fb      	ldr	r3, [r7, #28]
 801be3a:	1c5a      	adds	r2, r3, #1
 801be3c:	61fa      	str	r2, [r7, #28]
 801be3e:	005b      	lsls	r3, r3, #1
 801be40:	68fa      	ldr	r2, [r7, #12]
 801be42:	4413      	add	r3, r2
 801be44:	881b      	ldrh	r3, [r3, #0]
 801be46:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801be48:	4a17      	ldr	r2, [pc, #92]	@ (801bea8 <put_lfn+0xcc>)
 801be4a:	69bb      	ldr	r3, [r7, #24]
 801be4c:	4413      	add	r3, r2
 801be4e:	781b      	ldrb	r3, [r3, #0]
 801be50:	461a      	mov	r2, r3
 801be52:	68bb      	ldr	r3, [r7, #8]
 801be54:	4413      	add	r3, r2
 801be56:	8afa      	ldrh	r2, [r7, #22]
 801be58:	4611      	mov	r1, r2
 801be5a:	4618      	mov	r0, r3
 801be5c:	f7fe feb1 	bl	801abc2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801be60:	8afb      	ldrh	r3, [r7, #22]
 801be62:	2b00      	cmp	r3, #0
 801be64:	d102      	bne.n	801be6c <put_lfn+0x90>
 801be66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801be6a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801be6c:	69bb      	ldr	r3, [r7, #24]
 801be6e:	3301      	adds	r3, #1
 801be70:	61bb      	str	r3, [r7, #24]
 801be72:	69bb      	ldr	r3, [r7, #24]
 801be74:	2b0c      	cmp	r3, #12
 801be76:	d9da      	bls.n	801be2e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801be78:	8afb      	ldrh	r3, [r7, #22]
 801be7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801be7e:	4293      	cmp	r3, r2
 801be80:	d006      	beq.n	801be90 <put_lfn+0xb4>
 801be82:	69fb      	ldr	r3, [r7, #28]
 801be84:	005b      	lsls	r3, r3, #1
 801be86:	68fa      	ldr	r2, [r7, #12]
 801be88:	4413      	add	r3, r2
 801be8a:	881b      	ldrh	r3, [r3, #0]
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	d103      	bne.n	801be98 <put_lfn+0xbc>
 801be90:	79fb      	ldrb	r3, [r7, #7]
 801be92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801be96:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801be98:	68bb      	ldr	r3, [r7, #8]
 801be9a:	79fa      	ldrb	r2, [r7, #7]
 801be9c:	701a      	strb	r2, [r3, #0]
}
 801be9e:	bf00      	nop
 801bea0:	3720      	adds	r7, #32
 801bea2:	46bd      	mov	sp, r7
 801bea4:	bd80      	pop	{r7, pc}
 801bea6:	bf00      	nop
 801bea8:	0801e81c 	.word	0x0801e81c

0801beac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801beac:	b580      	push	{r7, lr}
 801beae:	b08c      	sub	sp, #48	@ 0x30
 801beb0:	af00      	add	r7, sp, #0
 801beb2:	60f8      	str	r0, [r7, #12]
 801beb4:	60b9      	str	r1, [r7, #8]
 801beb6:	607a      	str	r2, [r7, #4]
 801beb8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801beba:	220b      	movs	r2, #11
 801bebc:	68b9      	ldr	r1, [r7, #8]
 801bebe:	68f8      	ldr	r0, [r7, #12]
 801bec0:	f7fe fec6 	bl	801ac50 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801bec4:	683b      	ldr	r3, [r7, #0]
 801bec6:	2b05      	cmp	r3, #5
 801bec8:	d929      	bls.n	801bf1e <gen_numname+0x72>
		sr = seq;
 801beca:	683b      	ldr	r3, [r7, #0]
 801becc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801bece:	e020      	b.n	801bf12 <gen_numname+0x66>
			wc = *lfn++;
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	1c9a      	adds	r2, r3, #2
 801bed4:	607a      	str	r2, [r7, #4]
 801bed6:	881b      	ldrh	r3, [r3, #0]
 801bed8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801beda:	2300      	movs	r3, #0
 801bedc:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bede:	e015      	b.n	801bf0c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801bee0:	69fb      	ldr	r3, [r7, #28]
 801bee2:	005a      	lsls	r2, r3, #1
 801bee4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bee6:	f003 0301 	and.w	r3, r3, #1
 801beea:	4413      	add	r3, r2
 801beec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801beee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bef0:	085b      	lsrs	r3, r3, #1
 801bef2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801bef4:	69fb      	ldr	r3, [r7, #28]
 801bef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801befa:	2b00      	cmp	r3, #0
 801befc:	d003      	beq.n	801bf06 <gen_numname+0x5a>
 801befe:	69fa      	ldr	r2, [r7, #28]
 801bf00:	4b30      	ldr	r3, [pc, #192]	@ (801bfc4 <gen_numname+0x118>)
 801bf02:	4053      	eors	r3, r2
 801bf04:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801bf06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf08:	3301      	adds	r3, #1
 801bf0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bf0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf0e:	2b0f      	cmp	r3, #15
 801bf10:	d9e6      	bls.n	801bee0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	881b      	ldrh	r3, [r3, #0]
 801bf16:	2b00      	cmp	r3, #0
 801bf18:	d1da      	bne.n	801bed0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801bf1a:	69fb      	ldr	r3, [r7, #28]
 801bf1c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801bf1e:	2307      	movs	r3, #7
 801bf20:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801bf22:	683b      	ldr	r3, [r7, #0]
 801bf24:	b2db      	uxtb	r3, r3
 801bf26:	f003 030f 	and.w	r3, r3, #15
 801bf2a:	b2db      	uxtb	r3, r3
 801bf2c:	3330      	adds	r3, #48	@ 0x30
 801bf2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801bf32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bf36:	2b39      	cmp	r3, #57	@ 0x39
 801bf38:	d904      	bls.n	801bf44 <gen_numname+0x98>
 801bf3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bf3e:	3307      	adds	r3, #7
 801bf40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801bf44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf46:	1e5a      	subs	r2, r3, #1
 801bf48:	62ba      	str	r2, [r7, #40]	@ 0x28
 801bf4a:	3330      	adds	r3, #48	@ 0x30
 801bf4c:	443b      	add	r3, r7
 801bf4e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801bf52:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801bf56:	683b      	ldr	r3, [r7, #0]
 801bf58:	091b      	lsrs	r3, r3, #4
 801bf5a:	603b      	str	r3, [r7, #0]
	} while (seq);
 801bf5c:	683b      	ldr	r3, [r7, #0]
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	d1df      	bne.n	801bf22 <gen_numname+0x76>
	ns[i] = '~';
 801bf62:	f107 0214 	add.w	r2, r7, #20
 801bf66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf68:	4413      	add	r3, r2
 801bf6a:	227e      	movs	r2, #126	@ 0x7e
 801bf6c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801bf6e:	2300      	movs	r3, #0
 801bf70:	627b      	str	r3, [r7, #36]	@ 0x24
 801bf72:	e002      	b.n	801bf7a <gen_numname+0xce>
 801bf74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf76:	3301      	adds	r3, #1
 801bf78:	627b      	str	r3, [r7, #36]	@ 0x24
 801bf7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf7e:	429a      	cmp	r2, r3
 801bf80:	d205      	bcs.n	801bf8e <gen_numname+0xe2>
 801bf82:	68fa      	ldr	r2, [r7, #12]
 801bf84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf86:	4413      	add	r3, r2
 801bf88:	781b      	ldrb	r3, [r3, #0]
 801bf8a:	2b20      	cmp	r3, #32
 801bf8c:	d1f2      	bne.n	801bf74 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801bf8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf90:	2b07      	cmp	r3, #7
 801bf92:	d807      	bhi.n	801bfa4 <gen_numname+0xf8>
 801bf94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf96:	1c5a      	adds	r2, r3, #1
 801bf98:	62ba      	str	r2, [r7, #40]	@ 0x28
 801bf9a:	3330      	adds	r3, #48	@ 0x30
 801bf9c:	443b      	add	r3, r7
 801bf9e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801bfa2:	e000      	b.n	801bfa6 <gen_numname+0xfa>
 801bfa4:	2120      	movs	r1, #32
 801bfa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfa8:	1c5a      	adds	r2, r3, #1
 801bfaa:	627a      	str	r2, [r7, #36]	@ 0x24
 801bfac:	68fa      	ldr	r2, [r7, #12]
 801bfae:	4413      	add	r3, r2
 801bfb0:	460a      	mov	r2, r1
 801bfb2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801bfb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfb6:	2b07      	cmp	r3, #7
 801bfb8:	d9e9      	bls.n	801bf8e <gen_numname+0xe2>
}
 801bfba:	bf00      	nop
 801bfbc:	bf00      	nop
 801bfbe:	3730      	adds	r7, #48	@ 0x30
 801bfc0:	46bd      	mov	sp, r7
 801bfc2:	bd80      	pop	{r7, pc}
 801bfc4:	00011021 	.word	0x00011021

0801bfc8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801bfc8:	b480      	push	{r7}
 801bfca:	b085      	sub	sp, #20
 801bfcc:	af00      	add	r7, sp, #0
 801bfce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801bfd0:	2300      	movs	r3, #0
 801bfd2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801bfd4:	230b      	movs	r3, #11
 801bfd6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801bfd8:	7bfb      	ldrb	r3, [r7, #15]
 801bfda:	b2da      	uxtb	r2, r3
 801bfdc:	0852      	lsrs	r2, r2, #1
 801bfde:	01db      	lsls	r3, r3, #7
 801bfe0:	4313      	orrs	r3, r2
 801bfe2:	b2da      	uxtb	r2, r3
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	1c59      	adds	r1, r3, #1
 801bfe8:	6079      	str	r1, [r7, #4]
 801bfea:	781b      	ldrb	r3, [r3, #0]
 801bfec:	4413      	add	r3, r2
 801bfee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801bff0:	68bb      	ldr	r3, [r7, #8]
 801bff2:	3b01      	subs	r3, #1
 801bff4:	60bb      	str	r3, [r7, #8]
 801bff6:	68bb      	ldr	r3, [r7, #8]
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d1ed      	bne.n	801bfd8 <sum_sfn+0x10>
	return sum;
 801bffc:	7bfb      	ldrb	r3, [r7, #15]
}
 801bffe:	4618      	mov	r0, r3
 801c000:	3714      	adds	r7, #20
 801c002:	46bd      	mov	sp, r7
 801c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c008:	4770      	bx	lr

0801c00a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801c00a:	b580      	push	{r7, lr}
 801c00c:	b086      	sub	sp, #24
 801c00e:	af00      	add	r7, sp, #0
 801c010:	6078      	str	r0, [r7, #4]
 801c012:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801c014:	2304      	movs	r3, #4
 801c016:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	681b      	ldr	r3, [r3, #0]
 801c01c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801c01e:	23ff      	movs	r3, #255	@ 0xff
 801c020:	757b      	strb	r3, [r7, #21]
 801c022:	23ff      	movs	r3, #255	@ 0xff
 801c024:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801c026:	e081      	b.n	801c12c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	69db      	ldr	r3, [r3, #28]
 801c02c:	4619      	mov	r1, r3
 801c02e:	6938      	ldr	r0, [r7, #16]
 801c030:	f7ff f83c 	bl	801b0ac <move_window>
 801c034:	4603      	mov	r3, r0
 801c036:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c038:	7dfb      	ldrb	r3, [r7, #23]
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d17c      	bne.n	801c138 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	6a1b      	ldr	r3, [r3, #32]
 801c042:	781b      	ldrb	r3, [r3, #0]
 801c044:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801c046:	7dbb      	ldrb	r3, [r7, #22]
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d102      	bne.n	801c052 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801c04c:	2304      	movs	r3, #4
 801c04e:	75fb      	strb	r3, [r7, #23]
 801c050:	e077      	b.n	801c142 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	6a1b      	ldr	r3, [r3, #32]
 801c056:	330b      	adds	r3, #11
 801c058:	781b      	ldrb	r3, [r3, #0]
 801c05a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c05e:	73fb      	strb	r3, [r7, #15]
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	7bfa      	ldrb	r2, [r7, #15]
 801c064:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801c066:	7dbb      	ldrb	r3, [r7, #22]
 801c068:	2be5      	cmp	r3, #229	@ 0xe5
 801c06a:	d00e      	beq.n	801c08a <dir_read+0x80>
 801c06c:	7dbb      	ldrb	r3, [r7, #22]
 801c06e:	2b2e      	cmp	r3, #46	@ 0x2e
 801c070:	d00b      	beq.n	801c08a <dir_read+0x80>
 801c072:	7bfb      	ldrb	r3, [r7, #15]
 801c074:	f023 0320 	bic.w	r3, r3, #32
 801c078:	2b08      	cmp	r3, #8
 801c07a:	bf0c      	ite	eq
 801c07c:	2301      	moveq	r3, #1
 801c07e:	2300      	movne	r3, #0
 801c080:	b2db      	uxtb	r3, r3
 801c082:	461a      	mov	r2, r3
 801c084:	683b      	ldr	r3, [r7, #0]
 801c086:	4293      	cmp	r3, r2
 801c088:	d002      	beq.n	801c090 <dir_read+0x86>
				ord = 0xFF;
 801c08a:	23ff      	movs	r3, #255	@ 0xff
 801c08c:	757b      	strb	r3, [r7, #21]
 801c08e:	e044      	b.n	801c11a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801c090:	7bfb      	ldrb	r3, [r7, #15]
 801c092:	2b0f      	cmp	r3, #15
 801c094:	d12f      	bne.n	801c0f6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801c096:	7dbb      	ldrb	r3, [r7, #22]
 801c098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	d00d      	beq.n	801c0bc <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	6a1b      	ldr	r3, [r3, #32]
 801c0a4:	7b5b      	ldrb	r3, [r3, #13]
 801c0a6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801c0a8:	7dbb      	ldrb	r3, [r7, #22]
 801c0aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c0ae:	75bb      	strb	r3, [r7, #22]
 801c0b0:	7dbb      	ldrb	r3, [r7, #22]
 801c0b2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	695a      	ldr	r2, [r3, #20]
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c0bc:	7dba      	ldrb	r2, [r7, #22]
 801c0be:	7d7b      	ldrb	r3, [r7, #21]
 801c0c0:	429a      	cmp	r2, r3
 801c0c2:	d115      	bne.n	801c0f0 <dir_read+0xe6>
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	6a1b      	ldr	r3, [r3, #32]
 801c0c8:	330d      	adds	r3, #13
 801c0ca:	781b      	ldrb	r3, [r3, #0]
 801c0cc:	7d3a      	ldrb	r2, [r7, #20]
 801c0ce:	429a      	cmp	r2, r3
 801c0d0:	d10e      	bne.n	801c0f0 <dir_read+0xe6>
 801c0d2:	693b      	ldr	r3, [r7, #16]
 801c0d4:	691a      	ldr	r2, [r3, #16]
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	6a1b      	ldr	r3, [r3, #32]
 801c0da:	4619      	mov	r1, r3
 801c0dc:	4610      	mov	r0, r2
 801c0de:	f7ff fe19 	bl	801bd14 <pick_lfn>
 801c0e2:	4603      	mov	r3, r0
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	d003      	beq.n	801c0f0 <dir_read+0xe6>
 801c0e8:	7d7b      	ldrb	r3, [r7, #21]
 801c0ea:	3b01      	subs	r3, #1
 801c0ec:	b2db      	uxtb	r3, r3
 801c0ee:	e000      	b.n	801c0f2 <dir_read+0xe8>
 801c0f0:	23ff      	movs	r3, #255	@ 0xff
 801c0f2:	757b      	strb	r3, [r7, #21]
 801c0f4:	e011      	b.n	801c11a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801c0f6:	7d7b      	ldrb	r3, [r7, #21]
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	d109      	bne.n	801c110 <dir_read+0x106>
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	6a1b      	ldr	r3, [r3, #32]
 801c100:	4618      	mov	r0, r3
 801c102:	f7ff ff61 	bl	801bfc8 <sum_sfn>
 801c106:	4603      	mov	r3, r0
 801c108:	461a      	mov	r2, r3
 801c10a:	7d3b      	ldrb	r3, [r7, #20]
 801c10c:	4293      	cmp	r3, r2
 801c10e:	d015      	beq.n	801c13c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801c110:	687b      	ldr	r3, [r7, #4]
 801c112:	f04f 32ff 	mov.w	r2, #4294967295
 801c116:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801c118:	e010      	b.n	801c13c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801c11a:	2100      	movs	r1, #0
 801c11c:	6878      	ldr	r0, [r7, #4]
 801c11e:	f7ff fc2d 	bl	801b97c <dir_next>
 801c122:	4603      	mov	r3, r0
 801c124:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c126:	7dfb      	ldrb	r3, [r7, #23]
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d109      	bne.n	801c140 <dir_read+0x136>
	while (dp->sect) {
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	69db      	ldr	r3, [r3, #28]
 801c130:	2b00      	cmp	r3, #0
 801c132:	f47f af79 	bne.w	801c028 <dir_read+0x1e>
 801c136:	e004      	b.n	801c142 <dir_read+0x138>
		if (res != FR_OK) break;
 801c138:	bf00      	nop
 801c13a:	e002      	b.n	801c142 <dir_read+0x138>
					break;
 801c13c:	bf00      	nop
 801c13e:	e000      	b.n	801c142 <dir_read+0x138>
		if (res != FR_OK) break;
 801c140:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801c142:	7dfb      	ldrb	r3, [r7, #23]
 801c144:	2b00      	cmp	r3, #0
 801c146:	d002      	beq.n	801c14e <dir_read+0x144>
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	2200      	movs	r2, #0
 801c14c:	61da      	str	r2, [r3, #28]
	return res;
 801c14e:	7dfb      	ldrb	r3, [r7, #23]
}
 801c150:	4618      	mov	r0, r3
 801c152:	3718      	adds	r7, #24
 801c154:	46bd      	mov	sp, r7
 801c156:	bd80      	pop	{r7, pc}

0801c158 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801c158:	b580      	push	{r7, lr}
 801c15a:	b086      	sub	sp, #24
 801c15c:	af00      	add	r7, sp, #0
 801c15e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801c166:	2100      	movs	r1, #0
 801c168:	6878      	ldr	r0, [r7, #4]
 801c16a:	f7ff fb7e 	bl	801b86a <dir_sdi>
 801c16e:	4603      	mov	r3, r0
 801c170:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801c172:	7dfb      	ldrb	r3, [r7, #23]
 801c174:	2b00      	cmp	r3, #0
 801c176:	d001      	beq.n	801c17c <dir_find+0x24>
 801c178:	7dfb      	ldrb	r3, [r7, #23]
 801c17a:	e0a9      	b.n	801c2d0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c17c:	23ff      	movs	r3, #255	@ 0xff
 801c17e:	753b      	strb	r3, [r7, #20]
 801c180:	7d3b      	ldrb	r3, [r7, #20]
 801c182:	757b      	strb	r3, [r7, #21]
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	f04f 32ff 	mov.w	r2, #4294967295
 801c18a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	69db      	ldr	r3, [r3, #28]
 801c190:	4619      	mov	r1, r3
 801c192:	6938      	ldr	r0, [r7, #16]
 801c194:	f7fe ff8a 	bl	801b0ac <move_window>
 801c198:	4603      	mov	r3, r0
 801c19a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c19c:	7dfb      	ldrb	r3, [r7, #23]
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	f040 8090 	bne.w	801c2c4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	6a1b      	ldr	r3, [r3, #32]
 801c1a8:	781b      	ldrb	r3, [r3, #0]
 801c1aa:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c1ac:	7dbb      	ldrb	r3, [r7, #22]
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d102      	bne.n	801c1b8 <dir_find+0x60>
 801c1b2:	2304      	movs	r3, #4
 801c1b4:	75fb      	strb	r3, [r7, #23]
 801c1b6:	e08a      	b.n	801c2ce <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	6a1b      	ldr	r3, [r3, #32]
 801c1bc:	330b      	adds	r3, #11
 801c1be:	781b      	ldrb	r3, [r3, #0]
 801c1c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c1c4:	73fb      	strb	r3, [r7, #15]
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	7bfa      	ldrb	r2, [r7, #15]
 801c1ca:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c1cc:	7dbb      	ldrb	r3, [r7, #22]
 801c1ce:	2be5      	cmp	r3, #229	@ 0xe5
 801c1d0:	d007      	beq.n	801c1e2 <dir_find+0x8a>
 801c1d2:	7bfb      	ldrb	r3, [r7, #15]
 801c1d4:	f003 0308 	and.w	r3, r3, #8
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d009      	beq.n	801c1f0 <dir_find+0x98>
 801c1dc:	7bfb      	ldrb	r3, [r7, #15]
 801c1de:	2b0f      	cmp	r3, #15
 801c1e0:	d006      	beq.n	801c1f0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c1e2:	23ff      	movs	r3, #255	@ 0xff
 801c1e4:	757b      	strb	r3, [r7, #21]
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	f04f 32ff 	mov.w	r2, #4294967295
 801c1ec:	631a      	str	r2, [r3, #48]	@ 0x30
 801c1ee:	e05e      	b.n	801c2ae <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801c1f0:	7bfb      	ldrb	r3, [r7, #15]
 801c1f2:	2b0f      	cmp	r3, #15
 801c1f4:	d136      	bne.n	801c264 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c1fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c200:	2b00      	cmp	r3, #0
 801c202:	d154      	bne.n	801c2ae <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801c204:	7dbb      	ldrb	r3, [r7, #22]
 801c206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d00d      	beq.n	801c22a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	6a1b      	ldr	r3, [r3, #32]
 801c212:	7b5b      	ldrb	r3, [r3, #13]
 801c214:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801c216:	7dbb      	ldrb	r3, [r7, #22]
 801c218:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c21c:	75bb      	strb	r3, [r7, #22]
 801c21e:	7dbb      	ldrb	r3, [r7, #22]
 801c220:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	695a      	ldr	r2, [r3, #20]
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c22a:	7dba      	ldrb	r2, [r7, #22]
 801c22c:	7d7b      	ldrb	r3, [r7, #21]
 801c22e:	429a      	cmp	r2, r3
 801c230:	d115      	bne.n	801c25e <dir_find+0x106>
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	6a1b      	ldr	r3, [r3, #32]
 801c236:	330d      	adds	r3, #13
 801c238:	781b      	ldrb	r3, [r3, #0]
 801c23a:	7d3a      	ldrb	r2, [r7, #20]
 801c23c:	429a      	cmp	r2, r3
 801c23e:	d10e      	bne.n	801c25e <dir_find+0x106>
 801c240:	693b      	ldr	r3, [r7, #16]
 801c242:	691a      	ldr	r2, [r3, #16]
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	6a1b      	ldr	r3, [r3, #32]
 801c248:	4619      	mov	r1, r3
 801c24a:	4610      	mov	r0, r2
 801c24c:	f7ff fcf2 	bl	801bc34 <cmp_lfn>
 801c250:	4603      	mov	r3, r0
 801c252:	2b00      	cmp	r3, #0
 801c254:	d003      	beq.n	801c25e <dir_find+0x106>
 801c256:	7d7b      	ldrb	r3, [r7, #21]
 801c258:	3b01      	subs	r3, #1
 801c25a:	b2db      	uxtb	r3, r3
 801c25c:	e000      	b.n	801c260 <dir_find+0x108>
 801c25e:	23ff      	movs	r3, #255	@ 0xff
 801c260:	757b      	strb	r3, [r7, #21]
 801c262:	e024      	b.n	801c2ae <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c264:	7d7b      	ldrb	r3, [r7, #21]
 801c266:	2b00      	cmp	r3, #0
 801c268:	d109      	bne.n	801c27e <dir_find+0x126>
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	6a1b      	ldr	r3, [r3, #32]
 801c26e:	4618      	mov	r0, r3
 801c270:	f7ff feaa 	bl	801bfc8 <sum_sfn>
 801c274:	4603      	mov	r3, r0
 801c276:	461a      	mov	r2, r3
 801c278:	7d3b      	ldrb	r3, [r7, #20]
 801c27a:	4293      	cmp	r3, r2
 801c27c:	d024      	beq.n	801c2c8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c284:	f003 0301 	and.w	r3, r3, #1
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d10a      	bne.n	801c2a2 <dir_find+0x14a>
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	6a18      	ldr	r0, [r3, #32]
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	3324      	adds	r3, #36	@ 0x24
 801c294:	220b      	movs	r2, #11
 801c296:	4619      	mov	r1, r3
 801c298:	f7fe fd16 	bl	801acc8 <mem_cmp>
 801c29c:	4603      	mov	r3, r0
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	d014      	beq.n	801c2cc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c2a2:	23ff      	movs	r3, #255	@ 0xff
 801c2a4:	757b      	strb	r3, [r7, #21]
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	f04f 32ff 	mov.w	r2, #4294967295
 801c2ac:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801c2ae:	2100      	movs	r1, #0
 801c2b0:	6878      	ldr	r0, [r7, #4]
 801c2b2:	f7ff fb63 	bl	801b97c <dir_next>
 801c2b6:	4603      	mov	r3, r0
 801c2b8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801c2ba:	7dfb      	ldrb	r3, [r7, #23]
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	f43f af65 	beq.w	801c18c <dir_find+0x34>
 801c2c2:	e004      	b.n	801c2ce <dir_find+0x176>
		if (res != FR_OK) break;
 801c2c4:	bf00      	nop
 801c2c6:	e002      	b.n	801c2ce <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c2c8:	bf00      	nop
 801c2ca:	e000      	b.n	801c2ce <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c2cc:	bf00      	nop

	return res;
 801c2ce:	7dfb      	ldrb	r3, [r7, #23]
}
 801c2d0:	4618      	mov	r0, r3
 801c2d2:	3718      	adds	r7, #24
 801c2d4:	46bd      	mov	sp, r7
 801c2d6:	bd80      	pop	{r7, pc}

0801c2d8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801c2d8:	b580      	push	{r7, lr}
 801c2da:	b08c      	sub	sp, #48	@ 0x30
 801c2dc:	af00      	add	r7, sp, #0
 801c2de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c2e0:	687b      	ldr	r3, [r7, #4]
 801c2e2:	681b      	ldr	r3, [r3, #0]
 801c2e4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c2ec:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	d001      	beq.n	801c2f8 <dir_register+0x20>
 801c2f4:	2306      	movs	r3, #6
 801c2f6:	e0e0      	b.n	801c4ba <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801c2f8:	2300      	movs	r3, #0
 801c2fa:	627b      	str	r3, [r7, #36]	@ 0x24
 801c2fc:	e002      	b.n	801c304 <dir_register+0x2c>
 801c2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c300:	3301      	adds	r3, #1
 801c302:	627b      	str	r3, [r7, #36]	@ 0x24
 801c304:	69fb      	ldr	r3, [r7, #28]
 801c306:	691a      	ldr	r2, [r3, #16]
 801c308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c30a:	005b      	lsls	r3, r3, #1
 801c30c:	4413      	add	r3, r2
 801c30e:	881b      	ldrh	r3, [r3, #0]
 801c310:	2b00      	cmp	r3, #0
 801c312:	d1f4      	bne.n	801c2fe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801c31a:	f107 030c 	add.w	r3, r7, #12
 801c31e:	220c      	movs	r2, #12
 801c320:	4618      	mov	r0, r3
 801c322:	f7fe fc95 	bl	801ac50 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801c326:	7dfb      	ldrb	r3, [r7, #23]
 801c328:	f003 0301 	and.w	r3, r3, #1
 801c32c:	2b00      	cmp	r3, #0
 801c32e:	d032      	beq.n	801c396 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	2240      	movs	r2, #64	@ 0x40
 801c334:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801c338:	2301      	movs	r3, #1
 801c33a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c33c:	e016      	b.n	801c36c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801c344:	69fb      	ldr	r3, [r7, #28]
 801c346:	691a      	ldr	r2, [r3, #16]
 801c348:	f107 010c 	add.w	r1, r7, #12
 801c34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c34e:	f7ff fdad 	bl	801beac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801c352:	6878      	ldr	r0, [r7, #4]
 801c354:	f7ff ff00 	bl	801c158 <dir_find>
 801c358:	4603      	mov	r3, r0
 801c35a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801c35e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c362:	2b00      	cmp	r3, #0
 801c364:	d106      	bne.n	801c374 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801c366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c368:	3301      	adds	r3, #1
 801c36a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c36e:	2b63      	cmp	r3, #99	@ 0x63
 801c370:	d9e5      	bls.n	801c33e <dir_register+0x66>
 801c372:	e000      	b.n	801c376 <dir_register+0x9e>
			if (res != FR_OK) break;
 801c374:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801c376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c378:	2b64      	cmp	r3, #100	@ 0x64
 801c37a:	d101      	bne.n	801c380 <dir_register+0xa8>
 801c37c:	2307      	movs	r3, #7
 801c37e:	e09c      	b.n	801c4ba <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801c380:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c384:	2b04      	cmp	r3, #4
 801c386:	d002      	beq.n	801c38e <dir_register+0xb6>
 801c388:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c38c:	e095      	b.n	801c4ba <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801c38e:	7dfa      	ldrb	r2, [r7, #23]
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801c396:	7dfb      	ldrb	r3, [r7, #23]
 801c398:	f003 0302 	and.w	r3, r3, #2
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	d007      	beq.n	801c3b0 <dir_register+0xd8>
 801c3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3a2:	330c      	adds	r3, #12
 801c3a4:	4a47      	ldr	r2, [pc, #284]	@ (801c4c4 <dir_register+0x1ec>)
 801c3a6:	fba2 2303 	umull	r2, r3, r2, r3
 801c3aa:	089b      	lsrs	r3, r3, #2
 801c3ac:	3301      	adds	r3, #1
 801c3ae:	e000      	b.n	801c3b2 <dir_register+0xda>
 801c3b0:	2301      	movs	r3, #1
 801c3b2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801c3b4:	6a39      	ldr	r1, [r7, #32]
 801c3b6:	6878      	ldr	r0, [r7, #4]
 801c3b8:	f7ff fbb6 	bl	801bb28 <dir_alloc>
 801c3bc:	4603      	mov	r3, r0
 801c3be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801c3c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d148      	bne.n	801c45c <dir_register+0x184>
 801c3ca:	6a3b      	ldr	r3, [r7, #32]
 801c3cc:	3b01      	subs	r3, #1
 801c3ce:	623b      	str	r3, [r7, #32]
 801c3d0:	6a3b      	ldr	r3, [r7, #32]
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d042      	beq.n	801c45c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	695a      	ldr	r2, [r3, #20]
 801c3da:	6a3b      	ldr	r3, [r7, #32]
 801c3dc:	015b      	lsls	r3, r3, #5
 801c3de:	1ad3      	subs	r3, r2, r3
 801c3e0:	4619      	mov	r1, r3
 801c3e2:	6878      	ldr	r0, [r7, #4]
 801c3e4:	f7ff fa41 	bl	801b86a <dir_sdi>
 801c3e8:	4603      	mov	r3, r0
 801c3ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c3ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	d132      	bne.n	801c45c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	3324      	adds	r3, #36	@ 0x24
 801c3fa:	4618      	mov	r0, r3
 801c3fc:	f7ff fde4 	bl	801bfc8 <sum_sfn>
 801c400:	4603      	mov	r3, r0
 801c402:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	69db      	ldr	r3, [r3, #28]
 801c408:	4619      	mov	r1, r3
 801c40a:	69f8      	ldr	r0, [r7, #28]
 801c40c:	f7fe fe4e 	bl	801b0ac <move_window>
 801c410:	4603      	mov	r3, r0
 801c412:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801c416:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d11d      	bne.n	801c45a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801c41e:	69fb      	ldr	r3, [r7, #28]
 801c420:	6918      	ldr	r0, [r3, #16]
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	6a19      	ldr	r1, [r3, #32]
 801c426:	6a3b      	ldr	r3, [r7, #32]
 801c428:	b2da      	uxtb	r2, r3
 801c42a:	7efb      	ldrb	r3, [r7, #27]
 801c42c:	f7ff fcd6 	bl	801bddc <put_lfn>
				fs->wflag = 1;
 801c430:	69fb      	ldr	r3, [r7, #28]
 801c432:	2201      	movs	r2, #1
 801c434:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801c436:	2100      	movs	r1, #0
 801c438:	6878      	ldr	r0, [r7, #4]
 801c43a:	f7ff fa9f 	bl	801b97c <dir_next>
 801c43e:	4603      	mov	r3, r0
 801c440:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801c444:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d107      	bne.n	801c45c <dir_register+0x184>
 801c44c:	6a3b      	ldr	r3, [r7, #32]
 801c44e:	3b01      	subs	r3, #1
 801c450:	623b      	str	r3, [r7, #32]
 801c452:	6a3b      	ldr	r3, [r7, #32]
 801c454:	2b00      	cmp	r3, #0
 801c456:	d1d5      	bne.n	801c404 <dir_register+0x12c>
 801c458:	e000      	b.n	801c45c <dir_register+0x184>
				if (res != FR_OK) break;
 801c45a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c45c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c460:	2b00      	cmp	r3, #0
 801c462:	d128      	bne.n	801c4b6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	69db      	ldr	r3, [r3, #28]
 801c468:	4619      	mov	r1, r3
 801c46a:	69f8      	ldr	r0, [r7, #28]
 801c46c:	f7fe fe1e 	bl	801b0ac <move_window>
 801c470:	4603      	mov	r3, r0
 801c472:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c476:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c47a:	2b00      	cmp	r3, #0
 801c47c:	d11b      	bne.n	801c4b6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	6a1b      	ldr	r3, [r3, #32]
 801c482:	2220      	movs	r2, #32
 801c484:	2100      	movs	r1, #0
 801c486:	4618      	mov	r0, r3
 801c488:	f7fe fc03 	bl	801ac92 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	6a18      	ldr	r0, [r3, #32]
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	3324      	adds	r3, #36	@ 0x24
 801c494:	220b      	movs	r2, #11
 801c496:	4619      	mov	r1, r3
 801c498:	f7fe fbda 	bl	801ac50 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	6a1b      	ldr	r3, [r3, #32]
 801c4a6:	330c      	adds	r3, #12
 801c4a8:	f002 0218 	and.w	r2, r2, #24
 801c4ac:	b2d2      	uxtb	r2, r2
 801c4ae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801c4b0:	69fb      	ldr	r3, [r7, #28]
 801c4b2:	2201      	movs	r2, #1
 801c4b4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c4b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801c4ba:	4618      	mov	r0, r3
 801c4bc:	3730      	adds	r7, #48	@ 0x30
 801c4be:	46bd      	mov	sp, r7
 801c4c0:	bd80      	pop	{r7, pc}
 801c4c2:	bf00      	nop
 801c4c4:	4ec4ec4f 	.word	0x4ec4ec4f

0801c4c8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c4c8:	b580      	push	{r7, lr}
 801c4ca:	b086      	sub	sp, #24
 801c4cc:	af00      	add	r7, sp, #0
 801c4ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c4d0:	687b      	ldr	r3, [r7, #4]
 801c4d2:	681b      	ldr	r3, [r3, #0]
 801c4d4:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	695b      	ldr	r3, [r3, #20]
 801c4da:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c4e4:	d007      	beq.n	801c4f6 <dir_remove+0x2e>
 801c4e6:	687b      	ldr	r3, [r7, #4]
 801c4e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c4ea:	4619      	mov	r1, r3
 801c4ec:	6878      	ldr	r0, [r7, #4]
 801c4ee:	f7ff f9bc 	bl	801b86a <dir_sdi>
 801c4f2:	4603      	mov	r3, r0
 801c4f4:	e000      	b.n	801c4f8 <dir_remove+0x30>
 801c4f6:	2300      	movs	r3, #0
 801c4f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c4fa:	7dfb      	ldrb	r3, [r7, #23]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d128      	bne.n	801c552 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	69db      	ldr	r3, [r3, #28]
 801c504:	4619      	mov	r1, r3
 801c506:	6938      	ldr	r0, [r7, #16]
 801c508:	f7fe fdd0 	bl	801b0ac <move_window>
 801c50c:	4603      	mov	r3, r0
 801c50e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c510:	7dfb      	ldrb	r3, [r7, #23]
 801c512:	2b00      	cmp	r3, #0
 801c514:	d115      	bne.n	801c542 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	6a1b      	ldr	r3, [r3, #32]
 801c51a:	22e5      	movs	r2, #229	@ 0xe5
 801c51c:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801c51e:	693b      	ldr	r3, [r7, #16]
 801c520:	2201      	movs	r2, #1
 801c522:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	695b      	ldr	r3, [r3, #20]
 801c528:	68fa      	ldr	r2, [r7, #12]
 801c52a:	429a      	cmp	r2, r3
 801c52c:	d90b      	bls.n	801c546 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801c52e:	2100      	movs	r1, #0
 801c530:	6878      	ldr	r0, [r7, #4]
 801c532:	f7ff fa23 	bl	801b97c <dir_next>
 801c536:	4603      	mov	r3, r0
 801c538:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801c53a:	7dfb      	ldrb	r3, [r7, #23]
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d0df      	beq.n	801c500 <dir_remove+0x38>
 801c540:	e002      	b.n	801c548 <dir_remove+0x80>
			if (res != FR_OK) break;
 801c542:	bf00      	nop
 801c544:	e000      	b.n	801c548 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c546:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c548:	7dfb      	ldrb	r3, [r7, #23]
 801c54a:	2b04      	cmp	r3, #4
 801c54c:	d101      	bne.n	801c552 <dir_remove+0x8a>
 801c54e:	2302      	movs	r3, #2
 801c550:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801c552:	7dfb      	ldrb	r3, [r7, #23]
}
 801c554:	4618      	mov	r0, r3
 801c556:	3718      	adds	r7, #24
 801c558:	46bd      	mov	sp, r7
 801c55a:	bd80      	pop	{r7, pc}

0801c55c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c55c:	b580      	push	{r7, lr}
 801c55e:	b08a      	sub	sp, #40	@ 0x28
 801c560:	af00      	add	r7, sp, #0
 801c562:	6078      	str	r0, [r7, #4]
 801c564:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801c566:	683b      	ldr	r3, [r7, #0]
 801c568:	681b      	ldr	r3, [r3, #0]
 801c56a:	613b      	str	r3, [r7, #16]
 801c56c:	687b      	ldr	r3, [r7, #4]
 801c56e:	681b      	ldr	r3, [r3, #0]
 801c570:	691b      	ldr	r3, [r3, #16]
 801c572:	60fb      	str	r3, [r7, #12]
 801c574:	2300      	movs	r3, #0
 801c576:	617b      	str	r3, [r7, #20]
 801c578:	697b      	ldr	r3, [r7, #20]
 801c57a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801c57c:	69bb      	ldr	r3, [r7, #24]
 801c57e:	1c5a      	adds	r2, r3, #1
 801c580:	61ba      	str	r2, [r7, #24]
 801c582:	693a      	ldr	r2, [r7, #16]
 801c584:	4413      	add	r3, r2
 801c586:	781b      	ldrb	r3, [r3, #0]
 801c588:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801c58a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c58c:	2b1f      	cmp	r3, #31
 801c58e:	d940      	bls.n	801c612 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801c590:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c592:	2b2f      	cmp	r3, #47	@ 0x2f
 801c594:	d006      	beq.n	801c5a4 <create_name+0x48>
 801c596:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c598:	2b5c      	cmp	r3, #92	@ 0x5c
 801c59a:	d110      	bne.n	801c5be <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801c59c:	e002      	b.n	801c5a4 <create_name+0x48>
 801c59e:	69bb      	ldr	r3, [r7, #24]
 801c5a0:	3301      	adds	r3, #1
 801c5a2:	61bb      	str	r3, [r7, #24]
 801c5a4:	693a      	ldr	r2, [r7, #16]
 801c5a6:	69bb      	ldr	r3, [r7, #24]
 801c5a8:	4413      	add	r3, r2
 801c5aa:	781b      	ldrb	r3, [r3, #0]
 801c5ac:	2b2f      	cmp	r3, #47	@ 0x2f
 801c5ae:	d0f6      	beq.n	801c59e <create_name+0x42>
 801c5b0:	693a      	ldr	r2, [r7, #16]
 801c5b2:	69bb      	ldr	r3, [r7, #24]
 801c5b4:	4413      	add	r3, r2
 801c5b6:	781b      	ldrb	r3, [r3, #0]
 801c5b8:	2b5c      	cmp	r3, #92	@ 0x5c
 801c5ba:	d0f0      	beq.n	801c59e <create_name+0x42>
			break;
 801c5bc:	e02a      	b.n	801c614 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801c5be:	697b      	ldr	r3, [r7, #20]
 801c5c0:	2bfe      	cmp	r3, #254	@ 0xfe
 801c5c2:	d901      	bls.n	801c5c8 <create_name+0x6c>
 801c5c4:	2306      	movs	r3, #6
 801c5c6:	e17d      	b.n	801c8c4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801c5c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c5ca:	b2db      	uxtb	r3, r3
 801c5cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801c5ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c5d0:	2101      	movs	r1, #1
 801c5d2:	4618      	mov	r0, r3
 801c5d4:	f001 fa98 	bl	801db08 <ff_convert>
 801c5d8:	4603      	mov	r3, r0
 801c5da:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801c5dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d101      	bne.n	801c5e6 <create_name+0x8a>
 801c5e2:	2306      	movs	r3, #6
 801c5e4:	e16e      	b.n	801c8c4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801c5e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c5e8:	2b7f      	cmp	r3, #127	@ 0x7f
 801c5ea:	d809      	bhi.n	801c600 <create_name+0xa4>
 801c5ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c5ee:	4619      	mov	r1, r3
 801c5f0:	488d      	ldr	r0, [pc, #564]	@ (801c828 <create_name+0x2cc>)
 801c5f2:	f7fe fb90 	bl	801ad16 <chk_chr>
 801c5f6:	4603      	mov	r3, r0
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	d001      	beq.n	801c600 <create_name+0xa4>
 801c5fc:	2306      	movs	r3, #6
 801c5fe:	e161      	b.n	801c8c4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801c600:	697b      	ldr	r3, [r7, #20]
 801c602:	1c5a      	adds	r2, r3, #1
 801c604:	617a      	str	r2, [r7, #20]
 801c606:	005b      	lsls	r3, r3, #1
 801c608:	68fa      	ldr	r2, [r7, #12]
 801c60a:	4413      	add	r3, r2
 801c60c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c60e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801c610:	e7b4      	b.n	801c57c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801c612:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801c614:	693a      	ldr	r2, [r7, #16]
 801c616:	69bb      	ldr	r3, [r7, #24]
 801c618:	441a      	add	r2, r3
 801c61a:	683b      	ldr	r3, [r7, #0]
 801c61c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801c61e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c620:	2b1f      	cmp	r3, #31
 801c622:	d801      	bhi.n	801c628 <create_name+0xcc>
 801c624:	2304      	movs	r3, #4
 801c626:	e000      	b.n	801c62a <create_name+0xce>
 801c628:	2300      	movs	r3, #0
 801c62a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c62e:	e011      	b.n	801c654 <create_name+0xf8>
		w = lfn[di - 1];
 801c630:	697a      	ldr	r2, [r7, #20]
 801c632:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c636:	4413      	add	r3, r2
 801c638:	005b      	lsls	r3, r3, #1
 801c63a:	68fa      	ldr	r2, [r7, #12]
 801c63c:	4413      	add	r3, r2
 801c63e:	881b      	ldrh	r3, [r3, #0]
 801c640:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801c642:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c644:	2b20      	cmp	r3, #32
 801c646:	d002      	beq.n	801c64e <create_name+0xf2>
 801c648:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c64a:	2b2e      	cmp	r3, #46	@ 0x2e
 801c64c:	d106      	bne.n	801c65c <create_name+0x100>
		di--;
 801c64e:	697b      	ldr	r3, [r7, #20]
 801c650:	3b01      	subs	r3, #1
 801c652:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c654:	697b      	ldr	r3, [r7, #20]
 801c656:	2b00      	cmp	r3, #0
 801c658:	d1ea      	bne.n	801c630 <create_name+0xd4>
 801c65a:	e000      	b.n	801c65e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801c65c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801c65e:	697b      	ldr	r3, [r7, #20]
 801c660:	005b      	lsls	r3, r3, #1
 801c662:	68fa      	ldr	r2, [r7, #12]
 801c664:	4413      	add	r3, r2
 801c666:	2200      	movs	r2, #0
 801c668:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801c66a:	697b      	ldr	r3, [r7, #20]
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	d101      	bne.n	801c674 <create_name+0x118>
 801c670:	2306      	movs	r3, #6
 801c672:	e127      	b.n	801c8c4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	3324      	adds	r3, #36	@ 0x24
 801c678:	220b      	movs	r2, #11
 801c67a:	2120      	movs	r1, #32
 801c67c:	4618      	mov	r0, r3
 801c67e:	f7fe fb08 	bl	801ac92 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801c682:	2300      	movs	r3, #0
 801c684:	61bb      	str	r3, [r7, #24]
 801c686:	e002      	b.n	801c68e <create_name+0x132>
 801c688:	69bb      	ldr	r3, [r7, #24]
 801c68a:	3301      	adds	r3, #1
 801c68c:	61bb      	str	r3, [r7, #24]
 801c68e:	69bb      	ldr	r3, [r7, #24]
 801c690:	005b      	lsls	r3, r3, #1
 801c692:	68fa      	ldr	r2, [r7, #12]
 801c694:	4413      	add	r3, r2
 801c696:	881b      	ldrh	r3, [r3, #0]
 801c698:	2b20      	cmp	r3, #32
 801c69a:	d0f5      	beq.n	801c688 <create_name+0x12c>
 801c69c:	69bb      	ldr	r3, [r7, #24]
 801c69e:	005b      	lsls	r3, r3, #1
 801c6a0:	68fa      	ldr	r2, [r7, #12]
 801c6a2:	4413      	add	r3, r2
 801c6a4:	881b      	ldrh	r3, [r3, #0]
 801c6a6:	2b2e      	cmp	r3, #46	@ 0x2e
 801c6a8:	d0ee      	beq.n	801c688 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801c6aa:	69bb      	ldr	r3, [r7, #24]
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	d009      	beq.n	801c6c4 <create_name+0x168>
 801c6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c6b4:	f043 0303 	orr.w	r3, r3, #3
 801c6b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801c6bc:	e002      	b.n	801c6c4 <create_name+0x168>
 801c6be:	697b      	ldr	r3, [r7, #20]
 801c6c0:	3b01      	subs	r3, #1
 801c6c2:	617b      	str	r3, [r7, #20]
 801c6c4:	697b      	ldr	r3, [r7, #20]
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	d009      	beq.n	801c6de <create_name+0x182>
 801c6ca:	697a      	ldr	r2, [r7, #20]
 801c6cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c6d0:	4413      	add	r3, r2
 801c6d2:	005b      	lsls	r3, r3, #1
 801c6d4:	68fa      	ldr	r2, [r7, #12]
 801c6d6:	4413      	add	r3, r2
 801c6d8:	881b      	ldrh	r3, [r3, #0]
 801c6da:	2b2e      	cmp	r3, #46	@ 0x2e
 801c6dc:	d1ef      	bne.n	801c6be <create_name+0x162>

	i = b = 0; ni = 8;
 801c6de:	2300      	movs	r3, #0
 801c6e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	623b      	str	r3, [r7, #32]
 801c6e8:	2308      	movs	r3, #8
 801c6ea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801c6ec:	69bb      	ldr	r3, [r7, #24]
 801c6ee:	1c5a      	adds	r2, r3, #1
 801c6f0:	61ba      	str	r2, [r7, #24]
 801c6f2:	005b      	lsls	r3, r3, #1
 801c6f4:	68fa      	ldr	r2, [r7, #12]
 801c6f6:	4413      	add	r3, r2
 801c6f8:	881b      	ldrh	r3, [r3, #0]
 801c6fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801c6fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c6fe:	2b00      	cmp	r3, #0
 801c700:	f000 8090 	beq.w	801c824 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801c704:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c706:	2b20      	cmp	r3, #32
 801c708:	d006      	beq.n	801c718 <create_name+0x1bc>
 801c70a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c70c:	2b2e      	cmp	r3, #46	@ 0x2e
 801c70e:	d10a      	bne.n	801c726 <create_name+0x1ca>
 801c710:	69ba      	ldr	r2, [r7, #24]
 801c712:	697b      	ldr	r3, [r7, #20]
 801c714:	429a      	cmp	r2, r3
 801c716:	d006      	beq.n	801c726 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801c718:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c71c:	f043 0303 	orr.w	r3, r3, #3
 801c720:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c724:	e07d      	b.n	801c822 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801c726:	6a3a      	ldr	r2, [r7, #32]
 801c728:	69fb      	ldr	r3, [r7, #28]
 801c72a:	429a      	cmp	r2, r3
 801c72c:	d203      	bcs.n	801c736 <create_name+0x1da>
 801c72e:	69ba      	ldr	r2, [r7, #24]
 801c730:	697b      	ldr	r3, [r7, #20]
 801c732:	429a      	cmp	r2, r3
 801c734:	d123      	bne.n	801c77e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801c736:	69fb      	ldr	r3, [r7, #28]
 801c738:	2b0b      	cmp	r3, #11
 801c73a:	d106      	bne.n	801c74a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801c73c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c740:	f043 0303 	orr.w	r3, r3, #3
 801c744:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c748:	e075      	b.n	801c836 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801c74a:	69ba      	ldr	r2, [r7, #24]
 801c74c:	697b      	ldr	r3, [r7, #20]
 801c74e:	429a      	cmp	r2, r3
 801c750:	d005      	beq.n	801c75e <create_name+0x202>
 801c752:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c756:	f043 0303 	orr.w	r3, r3, #3
 801c75a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801c75e:	69ba      	ldr	r2, [r7, #24]
 801c760:	697b      	ldr	r3, [r7, #20]
 801c762:	429a      	cmp	r2, r3
 801c764:	d866      	bhi.n	801c834 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801c766:	697b      	ldr	r3, [r7, #20]
 801c768:	61bb      	str	r3, [r7, #24]
 801c76a:	2308      	movs	r3, #8
 801c76c:	623b      	str	r3, [r7, #32]
 801c76e:	230b      	movs	r3, #11
 801c770:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801c772:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c776:	009b      	lsls	r3, r3, #2
 801c778:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c77c:	e051      	b.n	801c822 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801c77e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c780:	2b7f      	cmp	r3, #127	@ 0x7f
 801c782:	d914      	bls.n	801c7ae <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801c784:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c786:	2100      	movs	r1, #0
 801c788:	4618      	mov	r0, r3
 801c78a:	f001 f9bd 	bl	801db08 <ff_convert>
 801c78e:	4603      	mov	r3, r0
 801c790:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801c792:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c794:	2b00      	cmp	r3, #0
 801c796:	d004      	beq.n	801c7a2 <create_name+0x246>
 801c798:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c79a:	3b80      	subs	r3, #128	@ 0x80
 801c79c:	4a23      	ldr	r2, [pc, #140]	@ (801c82c <create_name+0x2d0>)
 801c79e:	5cd3      	ldrb	r3, [r2, r3]
 801c7a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801c7a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c7a6:	f043 0302 	orr.w	r3, r3, #2
 801c7aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801c7ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7b0:	2b00      	cmp	r3, #0
 801c7b2:	d007      	beq.n	801c7c4 <create_name+0x268>
 801c7b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7b6:	4619      	mov	r1, r3
 801c7b8:	481d      	ldr	r0, [pc, #116]	@ (801c830 <create_name+0x2d4>)
 801c7ba:	f7fe faac 	bl	801ad16 <chk_chr>
 801c7be:	4603      	mov	r3, r0
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	d008      	beq.n	801c7d6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801c7c4:	235f      	movs	r3, #95	@ 0x5f
 801c7c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801c7c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c7cc:	f043 0303 	orr.w	r3, r3, #3
 801c7d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c7d4:	e01b      	b.n	801c80e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801c7d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7d8:	2b40      	cmp	r3, #64	@ 0x40
 801c7da:	d909      	bls.n	801c7f0 <create_name+0x294>
 801c7dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7de:	2b5a      	cmp	r3, #90	@ 0x5a
 801c7e0:	d806      	bhi.n	801c7f0 <create_name+0x294>
					b |= 2;
 801c7e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c7e6:	f043 0302 	orr.w	r3, r3, #2
 801c7ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c7ee:	e00e      	b.n	801c80e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801c7f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7f2:	2b60      	cmp	r3, #96	@ 0x60
 801c7f4:	d90b      	bls.n	801c80e <create_name+0x2b2>
 801c7f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7f8:	2b7a      	cmp	r3, #122	@ 0x7a
 801c7fa:	d808      	bhi.n	801c80e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801c7fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c800:	f043 0301 	orr.w	r3, r3, #1
 801c804:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c808:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c80a:	3b20      	subs	r3, #32
 801c80c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801c80e:	6a3b      	ldr	r3, [r7, #32]
 801c810:	1c5a      	adds	r2, r3, #1
 801c812:	623a      	str	r2, [r7, #32]
 801c814:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c816:	b2d1      	uxtb	r1, r2
 801c818:	687a      	ldr	r2, [r7, #4]
 801c81a:	4413      	add	r3, r2
 801c81c:	460a      	mov	r2, r1
 801c81e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801c822:	e763      	b.n	801c6ec <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801c824:	bf00      	nop
 801c826:	e006      	b.n	801c836 <create_name+0x2da>
 801c828:	0801e704 	.word	0x0801e704
 801c82c:	0801e79c 	.word	0x0801e79c
 801c830:	0801e710 	.word	0x0801e710
			if (si > di) break;			/* No extension */
 801c834:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801c836:	687b      	ldr	r3, [r7, #4]
 801c838:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801c83c:	2be5      	cmp	r3, #229	@ 0xe5
 801c83e:	d103      	bne.n	801c848 <create_name+0x2ec>
 801c840:	687b      	ldr	r3, [r7, #4]
 801c842:	2205      	movs	r2, #5
 801c844:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801c848:	69fb      	ldr	r3, [r7, #28]
 801c84a:	2b08      	cmp	r3, #8
 801c84c:	d104      	bne.n	801c858 <create_name+0x2fc>
 801c84e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c852:	009b      	lsls	r3, r3, #2
 801c854:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801c858:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c85c:	f003 030c 	and.w	r3, r3, #12
 801c860:	2b0c      	cmp	r3, #12
 801c862:	d005      	beq.n	801c870 <create_name+0x314>
 801c864:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c868:	f003 0303 	and.w	r3, r3, #3
 801c86c:	2b03      	cmp	r3, #3
 801c86e:	d105      	bne.n	801c87c <create_name+0x320>
 801c870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c874:	f043 0302 	orr.w	r3, r3, #2
 801c878:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801c87c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c880:	f003 0302 	and.w	r3, r3, #2
 801c884:	2b00      	cmp	r3, #0
 801c886:	d117      	bne.n	801c8b8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801c888:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c88c:	f003 0303 	and.w	r3, r3, #3
 801c890:	2b01      	cmp	r3, #1
 801c892:	d105      	bne.n	801c8a0 <create_name+0x344>
 801c894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c898:	f043 0310 	orr.w	r3, r3, #16
 801c89c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801c8a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c8a4:	f003 030c 	and.w	r3, r3, #12
 801c8a8:	2b04      	cmp	r3, #4
 801c8aa:	d105      	bne.n	801c8b8 <create_name+0x35c>
 801c8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c8b0:	f043 0308 	orr.w	r3, r3, #8
 801c8b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801c8be:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801c8c2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801c8c4:	4618      	mov	r0, r3
 801c8c6:	3728      	adds	r7, #40	@ 0x28
 801c8c8:	46bd      	mov	sp, r7
 801c8ca:	bd80      	pop	{r7, pc}

0801c8cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801c8cc:	b580      	push	{r7, lr}
 801c8ce:	b086      	sub	sp, #24
 801c8d0:	af00      	add	r7, sp, #0
 801c8d2:	6078      	str	r0, [r7, #4]
 801c8d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801c8da:	693b      	ldr	r3, [r7, #16]
 801c8dc:	681b      	ldr	r3, [r3, #0]
 801c8de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801c8e0:	e002      	b.n	801c8e8 <follow_path+0x1c>
 801c8e2:	683b      	ldr	r3, [r7, #0]
 801c8e4:	3301      	adds	r3, #1
 801c8e6:	603b      	str	r3, [r7, #0]
 801c8e8:	683b      	ldr	r3, [r7, #0]
 801c8ea:	781b      	ldrb	r3, [r3, #0]
 801c8ec:	2b2f      	cmp	r3, #47	@ 0x2f
 801c8ee:	d0f8      	beq.n	801c8e2 <follow_path+0x16>
 801c8f0:	683b      	ldr	r3, [r7, #0]
 801c8f2:	781b      	ldrb	r3, [r3, #0]
 801c8f4:	2b5c      	cmp	r3, #92	@ 0x5c
 801c8f6:	d0f4      	beq.n	801c8e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801c8f8:	693b      	ldr	r3, [r7, #16]
 801c8fa:	2200      	movs	r2, #0
 801c8fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801c8fe:	683b      	ldr	r3, [r7, #0]
 801c900:	781b      	ldrb	r3, [r3, #0]
 801c902:	2b1f      	cmp	r3, #31
 801c904:	d80a      	bhi.n	801c91c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	2280      	movs	r2, #128	@ 0x80
 801c90a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801c90e:	2100      	movs	r1, #0
 801c910:	6878      	ldr	r0, [r7, #4]
 801c912:	f7fe ffaa 	bl	801b86a <dir_sdi>
 801c916:	4603      	mov	r3, r0
 801c918:	75fb      	strb	r3, [r7, #23]
 801c91a:	e048      	b.n	801c9ae <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c91c:	463b      	mov	r3, r7
 801c91e:	4619      	mov	r1, r3
 801c920:	6878      	ldr	r0, [r7, #4]
 801c922:	f7ff fe1b 	bl	801c55c <create_name>
 801c926:	4603      	mov	r3, r0
 801c928:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c92a:	7dfb      	ldrb	r3, [r7, #23]
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d139      	bne.n	801c9a4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801c930:	6878      	ldr	r0, [r7, #4]
 801c932:	f7ff fc11 	bl	801c158 <dir_find>
 801c936:	4603      	mov	r3, r0
 801c938:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c940:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801c942:	7dfb      	ldrb	r3, [r7, #23]
 801c944:	2b00      	cmp	r3, #0
 801c946:	d00a      	beq.n	801c95e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801c948:	7dfb      	ldrb	r3, [r7, #23]
 801c94a:	2b04      	cmp	r3, #4
 801c94c:	d12c      	bne.n	801c9a8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801c94e:	7afb      	ldrb	r3, [r7, #11]
 801c950:	f003 0304 	and.w	r3, r3, #4
 801c954:	2b00      	cmp	r3, #0
 801c956:	d127      	bne.n	801c9a8 <follow_path+0xdc>
 801c958:	2305      	movs	r3, #5
 801c95a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801c95c:	e024      	b.n	801c9a8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c95e:	7afb      	ldrb	r3, [r7, #11]
 801c960:	f003 0304 	and.w	r3, r3, #4
 801c964:	2b00      	cmp	r3, #0
 801c966:	d121      	bne.n	801c9ac <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801c968:	693b      	ldr	r3, [r7, #16]
 801c96a:	799b      	ldrb	r3, [r3, #6]
 801c96c:	f003 0310 	and.w	r3, r3, #16
 801c970:	2b00      	cmp	r3, #0
 801c972:	d102      	bne.n	801c97a <follow_path+0xae>
				res = FR_NO_PATH; break;
 801c974:	2305      	movs	r3, #5
 801c976:	75fb      	strb	r3, [r7, #23]
 801c978:	e019      	b.n	801c9ae <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801c97a:	68fb      	ldr	r3, [r7, #12]
 801c97c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	695b      	ldr	r3, [r3, #20]
 801c984:	68fa      	ldr	r2, [r7, #12]
 801c986:	8992      	ldrh	r2, [r2, #12]
 801c988:	fbb3 f0f2 	udiv	r0, r3, r2
 801c98c:	fb00 f202 	mul.w	r2, r0, r2
 801c990:	1a9b      	subs	r3, r3, r2
 801c992:	440b      	add	r3, r1
 801c994:	4619      	mov	r1, r3
 801c996:	68f8      	ldr	r0, [r7, #12]
 801c998:	f7ff f90d 	bl	801bbb6 <ld_clust>
 801c99c:	4602      	mov	r2, r0
 801c99e:	693b      	ldr	r3, [r7, #16]
 801c9a0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c9a2:	e7bb      	b.n	801c91c <follow_path+0x50>
			if (res != FR_OK) break;
 801c9a4:	bf00      	nop
 801c9a6:	e002      	b.n	801c9ae <follow_path+0xe2>
				break;
 801c9a8:	bf00      	nop
 801c9aa:	e000      	b.n	801c9ae <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c9ac:	bf00      	nop
			}
		}
	}

	return res;
 801c9ae:	7dfb      	ldrb	r3, [r7, #23]
}
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	3718      	adds	r7, #24
 801c9b4:	46bd      	mov	sp, r7
 801c9b6:	bd80      	pop	{r7, pc}

0801c9b8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801c9b8:	b480      	push	{r7}
 801c9ba:	b087      	sub	sp, #28
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801c9c0:	f04f 33ff 	mov.w	r3, #4294967295
 801c9c4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	681b      	ldr	r3, [r3, #0]
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	d031      	beq.n	801ca32 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	681b      	ldr	r3, [r3, #0]
 801c9d2:	617b      	str	r3, [r7, #20]
 801c9d4:	e002      	b.n	801c9dc <get_ldnumber+0x24>
 801c9d6:	697b      	ldr	r3, [r7, #20]
 801c9d8:	3301      	adds	r3, #1
 801c9da:	617b      	str	r3, [r7, #20]
 801c9dc:	697b      	ldr	r3, [r7, #20]
 801c9de:	781b      	ldrb	r3, [r3, #0]
 801c9e0:	2b1f      	cmp	r3, #31
 801c9e2:	d903      	bls.n	801c9ec <get_ldnumber+0x34>
 801c9e4:	697b      	ldr	r3, [r7, #20]
 801c9e6:	781b      	ldrb	r3, [r3, #0]
 801c9e8:	2b3a      	cmp	r3, #58	@ 0x3a
 801c9ea:	d1f4      	bne.n	801c9d6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801c9ec:	697b      	ldr	r3, [r7, #20]
 801c9ee:	781b      	ldrb	r3, [r3, #0]
 801c9f0:	2b3a      	cmp	r3, #58	@ 0x3a
 801c9f2:	d11c      	bne.n	801ca2e <get_ldnumber+0x76>
			tp = *path;
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	681b      	ldr	r3, [r3, #0]
 801c9f8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801c9fa:	68fb      	ldr	r3, [r7, #12]
 801c9fc:	1c5a      	adds	r2, r3, #1
 801c9fe:	60fa      	str	r2, [r7, #12]
 801ca00:	781b      	ldrb	r3, [r3, #0]
 801ca02:	3b30      	subs	r3, #48	@ 0x30
 801ca04:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801ca06:	68bb      	ldr	r3, [r7, #8]
 801ca08:	2b09      	cmp	r3, #9
 801ca0a:	d80e      	bhi.n	801ca2a <get_ldnumber+0x72>
 801ca0c:	68fa      	ldr	r2, [r7, #12]
 801ca0e:	697b      	ldr	r3, [r7, #20]
 801ca10:	429a      	cmp	r2, r3
 801ca12:	d10a      	bne.n	801ca2a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801ca14:	68bb      	ldr	r3, [r7, #8]
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d107      	bne.n	801ca2a <get_ldnumber+0x72>
					vol = (int)i;
 801ca1a:	68bb      	ldr	r3, [r7, #8]
 801ca1c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801ca1e:	697b      	ldr	r3, [r7, #20]
 801ca20:	3301      	adds	r3, #1
 801ca22:	617b      	str	r3, [r7, #20]
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	697a      	ldr	r2, [r7, #20]
 801ca28:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801ca2a:	693b      	ldr	r3, [r7, #16]
 801ca2c:	e002      	b.n	801ca34 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801ca2e:	2300      	movs	r3, #0
 801ca30:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801ca32:	693b      	ldr	r3, [r7, #16]
}
 801ca34:	4618      	mov	r0, r3
 801ca36:	371c      	adds	r7, #28
 801ca38:	46bd      	mov	sp, r7
 801ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca3e:	4770      	bx	lr

0801ca40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801ca40:	b580      	push	{r7, lr}
 801ca42:	b082      	sub	sp, #8
 801ca44:	af00      	add	r7, sp, #0
 801ca46:	6078      	str	r0, [r7, #4]
 801ca48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	2200      	movs	r2, #0
 801ca4e:	70da      	strb	r2, [r3, #3]
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	f04f 32ff 	mov.w	r2, #4294967295
 801ca56:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801ca58:	6839      	ldr	r1, [r7, #0]
 801ca5a:	6878      	ldr	r0, [r7, #4]
 801ca5c:	f7fe fb26 	bl	801b0ac <move_window>
 801ca60:	4603      	mov	r3, r0
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	d001      	beq.n	801ca6a <check_fs+0x2a>
 801ca66:	2304      	movs	r3, #4
 801ca68:	e038      	b.n	801cadc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	3338      	adds	r3, #56	@ 0x38
 801ca6e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801ca72:	4618      	mov	r0, r3
 801ca74:	f7fe f86a 	bl	801ab4c <ld_word>
 801ca78:	4603      	mov	r3, r0
 801ca7a:	461a      	mov	r2, r3
 801ca7c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801ca80:	429a      	cmp	r2, r3
 801ca82:	d001      	beq.n	801ca88 <check_fs+0x48>
 801ca84:	2303      	movs	r3, #3
 801ca86:	e029      	b.n	801cadc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801ca8e:	2be9      	cmp	r3, #233	@ 0xe9
 801ca90:	d009      	beq.n	801caa6 <check_fs+0x66>
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801ca98:	2beb      	cmp	r3, #235	@ 0xeb
 801ca9a:	d11e      	bne.n	801cada <check_fs+0x9a>
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801caa2:	2b90      	cmp	r3, #144	@ 0x90
 801caa4:	d119      	bne.n	801cada <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801caa6:	687b      	ldr	r3, [r7, #4]
 801caa8:	3338      	adds	r3, #56	@ 0x38
 801caaa:	3336      	adds	r3, #54	@ 0x36
 801caac:	4618      	mov	r0, r3
 801caae:	f7fe f865 	bl	801ab7c <ld_dword>
 801cab2:	4603      	mov	r3, r0
 801cab4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801cab8:	4a0a      	ldr	r2, [pc, #40]	@ (801cae4 <check_fs+0xa4>)
 801caba:	4293      	cmp	r3, r2
 801cabc:	d101      	bne.n	801cac2 <check_fs+0x82>
 801cabe:	2300      	movs	r3, #0
 801cac0:	e00c      	b.n	801cadc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	3338      	adds	r3, #56	@ 0x38
 801cac6:	3352      	adds	r3, #82	@ 0x52
 801cac8:	4618      	mov	r0, r3
 801caca:	f7fe f857 	bl	801ab7c <ld_dword>
 801cace:	4603      	mov	r3, r0
 801cad0:	4a05      	ldr	r2, [pc, #20]	@ (801cae8 <check_fs+0xa8>)
 801cad2:	4293      	cmp	r3, r2
 801cad4:	d101      	bne.n	801cada <check_fs+0x9a>
 801cad6:	2300      	movs	r3, #0
 801cad8:	e000      	b.n	801cadc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801cada:	2302      	movs	r3, #2
}
 801cadc:	4618      	mov	r0, r3
 801cade:	3708      	adds	r7, #8
 801cae0:	46bd      	mov	sp, r7
 801cae2:	bd80      	pop	{r7, pc}
 801cae4:	00544146 	.word	0x00544146
 801cae8:	33544146 	.word	0x33544146

0801caec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801caec:	b580      	push	{r7, lr}
 801caee:	b096      	sub	sp, #88	@ 0x58
 801caf0:	af00      	add	r7, sp, #0
 801caf2:	60f8      	str	r0, [r7, #12]
 801caf4:	60b9      	str	r1, [r7, #8]
 801caf6:	4613      	mov	r3, r2
 801caf8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801cafa:	68bb      	ldr	r3, [r7, #8]
 801cafc:	2200      	movs	r2, #0
 801cafe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801cb00:	68f8      	ldr	r0, [r7, #12]
 801cb02:	f7ff ff59 	bl	801c9b8 <get_ldnumber>
 801cb06:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801cb08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	da01      	bge.n	801cb12 <find_volume+0x26>
 801cb0e:	230b      	movs	r3, #11
 801cb10:	e265      	b.n	801cfde <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801cb12:	4a9f      	ldr	r2, [pc, #636]	@ (801cd90 <find_volume+0x2a4>)
 801cb14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cb16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cb1a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801cb1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	d101      	bne.n	801cb26 <find_volume+0x3a>
 801cb22:	230c      	movs	r3, #12
 801cb24:	e25b      	b.n	801cfde <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801cb26:	68bb      	ldr	r3, [r7, #8]
 801cb28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cb2a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801cb2c:	79fb      	ldrb	r3, [r7, #7]
 801cb2e:	f023 0301 	bic.w	r3, r3, #1
 801cb32:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801cb34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb36:	781b      	ldrb	r3, [r3, #0]
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	d01a      	beq.n	801cb72 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801cb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb3e:	785b      	ldrb	r3, [r3, #1]
 801cb40:	4618      	mov	r0, r3
 801cb42:	f7fd ff63 	bl	801aa0c <disk_status>
 801cb46:	4603      	mov	r3, r0
 801cb48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801cb4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cb50:	f003 0301 	and.w	r3, r3, #1
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d10c      	bne.n	801cb72 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801cb58:	79fb      	ldrb	r3, [r7, #7]
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	d007      	beq.n	801cb6e <find_volume+0x82>
 801cb5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cb62:	f003 0304 	and.w	r3, r3, #4
 801cb66:	2b00      	cmp	r3, #0
 801cb68:	d001      	beq.n	801cb6e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801cb6a:	230a      	movs	r3, #10
 801cb6c:	e237      	b.n	801cfde <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801cb6e:	2300      	movs	r3, #0
 801cb70:	e235      	b.n	801cfde <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801cb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb74:	2200      	movs	r2, #0
 801cb76:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801cb78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cb7a:	b2da      	uxtb	r2, r3
 801cb7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb7e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801cb80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb82:	785b      	ldrb	r3, [r3, #1]
 801cb84:	4618      	mov	r0, r3
 801cb86:	f7fd ff5b 	bl	801aa40 <disk_initialize>
 801cb8a:	4603      	mov	r3, r0
 801cb8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801cb90:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cb94:	f003 0301 	and.w	r3, r3, #1
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	d001      	beq.n	801cba0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801cb9c:	2303      	movs	r3, #3
 801cb9e:	e21e      	b.n	801cfde <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801cba0:	79fb      	ldrb	r3, [r7, #7]
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d007      	beq.n	801cbb6 <find_volume+0xca>
 801cba6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cbaa:	f003 0304 	and.w	r3, r3, #4
 801cbae:	2b00      	cmp	r3, #0
 801cbb0:	d001      	beq.n	801cbb6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801cbb2:	230a      	movs	r3, #10
 801cbb4:	e213      	b.n	801cfde <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801cbb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbb8:	7858      	ldrb	r0, [r3, #1]
 801cbba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbbc:	330c      	adds	r3, #12
 801cbbe:	461a      	mov	r2, r3
 801cbc0:	2102      	movs	r1, #2
 801cbc2:	f7fd ffa5 	bl	801ab10 <disk_ioctl>
 801cbc6:	4603      	mov	r3, r0
 801cbc8:	2b00      	cmp	r3, #0
 801cbca:	d001      	beq.n	801cbd0 <find_volume+0xe4>
 801cbcc:	2301      	movs	r3, #1
 801cbce:	e206      	b.n	801cfde <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801cbd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbd2:	899b      	ldrh	r3, [r3, #12]
 801cbd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801cbd8:	d80d      	bhi.n	801cbf6 <find_volume+0x10a>
 801cbda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbdc:	899b      	ldrh	r3, [r3, #12]
 801cbde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cbe2:	d308      	bcc.n	801cbf6 <find_volume+0x10a>
 801cbe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbe6:	899b      	ldrh	r3, [r3, #12]
 801cbe8:	461a      	mov	r2, r3
 801cbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbec:	899b      	ldrh	r3, [r3, #12]
 801cbee:	3b01      	subs	r3, #1
 801cbf0:	4013      	ands	r3, r2
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	d001      	beq.n	801cbfa <find_volume+0x10e>
 801cbf6:	2301      	movs	r3, #1
 801cbf8:	e1f1      	b.n	801cfde <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801cbfa:	2300      	movs	r3, #0
 801cbfc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801cbfe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801cc00:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cc02:	f7ff ff1d 	bl	801ca40 <check_fs>
 801cc06:	4603      	mov	r3, r0
 801cc08:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801cc0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cc10:	2b02      	cmp	r3, #2
 801cc12:	d149      	bne.n	801cca8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801cc14:	2300      	movs	r3, #0
 801cc16:	643b      	str	r3, [r7, #64]	@ 0x40
 801cc18:	e01e      	b.n	801cc58 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801cc1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc1c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801cc20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cc22:	011b      	lsls	r3, r3, #4
 801cc24:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801cc28:	4413      	add	r3, r2
 801cc2a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801cc2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc2e:	3304      	adds	r3, #4
 801cc30:	781b      	ldrb	r3, [r3, #0]
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	d006      	beq.n	801cc44 <find_volume+0x158>
 801cc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc38:	3308      	adds	r3, #8
 801cc3a:	4618      	mov	r0, r3
 801cc3c:	f7fd ff9e 	bl	801ab7c <ld_dword>
 801cc40:	4602      	mov	r2, r0
 801cc42:	e000      	b.n	801cc46 <find_volume+0x15a>
 801cc44:	2200      	movs	r2, #0
 801cc46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cc48:	009b      	lsls	r3, r3, #2
 801cc4a:	3358      	adds	r3, #88	@ 0x58
 801cc4c:	443b      	add	r3, r7
 801cc4e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801cc52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cc54:	3301      	adds	r3, #1
 801cc56:	643b      	str	r3, [r7, #64]	@ 0x40
 801cc58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cc5a:	2b03      	cmp	r3, #3
 801cc5c:	d9dd      	bls.n	801cc1a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801cc5e:	2300      	movs	r3, #0
 801cc60:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801cc62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cc64:	2b00      	cmp	r3, #0
 801cc66:	d002      	beq.n	801cc6e <find_volume+0x182>
 801cc68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cc6a:	3b01      	subs	r3, #1
 801cc6c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801cc6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cc70:	009b      	lsls	r3, r3, #2
 801cc72:	3358      	adds	r3, #88	@ 0x58
 801cc74:	443b      	add	r3, r7
 801cc76:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801cc7a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801cc7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cc7e:	2b00      	cmp	r3, #0
 801cc80:	d005      	beq.n	801cc8e <find_volume+0x1a2>
 801cc82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801cc84:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cc86:	f7ff fedb 	bl	801ca40 <check_fs>
 801cc8a:	4603      	mov	r3, r0
 801cc8c:	e000      	b.n	801cc90 <find_volume+0x1a4>
 801cc8e:	2303      	movs	r3, #3
 801cc90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801cc94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cc98:	2b01      	cmp	r3, #1
 801cc9a:	d905      	bls.n	801cca8 <find_volume+0x1bc>
 801cc9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cc9e:	3301      	adds	r3, #1
 801cca0:	643b      	str	r3, [r7, #64]	@ 0x40
 801cca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cca4:	2b03      	cmp	r3, #3
 801cca6:	d9e2      	bls.n	801cc6e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801cca8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ccac:	2b04      	cmp	r3, #4
 801ccae:	d101      	bne.n	801ccb4 <find_volume+0x1c8>
 801ccb0:	2301      	movs	r3, #1
 801ccb2:	e194      	b.n	801cfde <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801ccb4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ccb8:	2b01      	cmp	r3, #1
 801ccba:	d901      	bls.n	801ccc0 <find_volume+0x1d4>
 801ccbc:	230d      	movs	r3, #13
 801ccbe:	e18e      	b.n	801cfde <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801ccc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccc2:	3338      	adds	r3, #56	@ 0x38
 801ccc4:	330b      	adds	r3, #11
 801ccc6:	4618      	mov	r0, r3
 801ccc8:	f7fd ff40 	bl	801ab4c <ld_word>
 801cccc:	4603      	mov	r3, r0
 801ccce:	461a      	mov	r2, r3
 801ccd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccd2:	899b      	ldrh	r3, [r3, #12]
 801ccd4:	429a      	cmp	r2, r3
 801ccd6:	d001      	beq.n	801ccdc <find_volume+0x1f0>
 801ccd8:	230d      	movs	r3, #13
 801ccda:	e180      	b.n	801cfde <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801ccdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccde:	3338      	adds	r3, #56	@ 0x38
 801cce0:	3316      	adds	r3, #22
 801cce2:	4618      	mov	r0, r3
 801cce4:	f7fd ff32 	bl	801ab4c <ld_word>
 801cce8:	4603      	mov	r3, r0
 801ccea:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801ccec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d106      	bne.n	801cd00 <find_volume+0x214>
 801ccf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccf4:	3338      	adds	r3, #56	@ 0x38
 801ccf6:	3324      	adds	r3, #36	@ 0x24
 801ccf8:	4618      	mov	r0, r3
 801ccfa:	f7fd ff3f 	bl	801ab7c <ld_dword>
 801ccfe:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801cd00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801cd04:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801cd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd08:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801cd0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd0e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801cd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd12:	789b      	ldrb	r3, [r3, #2]
 801cd14:	2b01      	cmp	r3, #1
 801cd16:	d005      	beq.n	801cd24 <find_volume+0x238>
 801cd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd1a:	789b      	ldrb	r3, [r3, #2]
 801cd1c:	2b02      	cmp	r3, #2
 801cd1e:	d001      	beq.n	801cd24 <find_volume+0x238>
 801cd20:	230d      	movs	r3, #13
 801cd22:	e15c      	b.n	801cfde <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801cd24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd26:	789b      	ldrb	r3, [r3, #2]
 801cd28:	461a      	mov	r2, r3
 801cd2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cd2c:	fb02 f303 	mul.w	r3, r2, r3
 801cd30:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801cd32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801cd38:	461a      	mov	r2, r3
 801cd3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd3c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801cd3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd40:	895b      	ldrh	r3, [r3, #10]
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d008      	beq.n	801cd58 <find_volume+0x26c>
 801cd46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd48:	895b      	ldrh	r3, [r3, #10]
 801cd4a:	461a      	mov	r2, r3
 801cd4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd4e:	895b      	ldrh	r3, [r3, #10]
 801cd50:	3b01      	subs	r3, #1
 801cd52:	4013      	ands	r3, r2
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	d001      	beq.n	801cd5c <find_volume+0x270>
 801cd58:	230d      	movs	r3, #13
 801cd5a:	e140      	b.n	801cfde <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801cd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd5e:	3338      	adds	r3, #56	@ 0x38
 801cd60:	3311      	adds	r3, #17
 801cd62:	4618      	mov	r0, r3
 801cd64:	f7fd fef2 	bl	801ab4c <ld_word>
 801cd68:	4603      	mov	r3, r0
 801cd6a:	461a      	mov	r2, r3
 801cd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd6e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801cd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd72:	891b      	ldrh	r3, [r3, #8]
 801cd74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cd76:	8992      	ldrh	r2, [r2, #12]
 801cd78:	0952      	lsrs	r2, r2, #5
 801cd7a:	b292      	uxth	r2, r2
 801cd7c:	fbb3 f1f2 	udiv	r1, r3, r2
 801cd80:	fb01 f202 	mul.w	r2, r1, r2
 801cd84:	1a9b      	subs	r3, r3, r2
 801cd86:	b29b      	uxth	r3, r3
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d003      	beq.n	801cd94 <find_volume+0x2a8>
 801cd8c:	230d      	movs	r3, #13
 801cd8e:	e126      	b.n	801cfde <find_volume+0x4f2>
 801cd90:	24000550 	.word	0x24000550

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801cd94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd96:	3338      	adds	r3, #56	@ 0x38
 801cd98:	3313      	adds	r3, #19
 801cd9a:	4618      	mov	r0, r3
 801cd9c:	f7fd fed6 	bl	801ab4c <ld_word>
 801cda0:	4603      	mov	r3, r0
 801cda2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801cda4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cda6:	2b00      	cmp	r3, #0
 801cda8:	d106      	bne.n	801cdb8 <find_volume+0x2cc>
 801cdaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdac:	3338      	adds	r3, #56	@ 0x38
 801cdae:	3320      	adds	r3, #32
 801cdb0:	4618      	mov	r0, r3
 801cdb2:	f7fd fee3 	bl	801ab7c <ld_dword>
 801cdb6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801cdb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cdba:	3338      	adds	r3, #56	@ 0x38
 801cdbc:	330e      	adds	r3, #14
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	f7fd fec4 	bl	801ab4c <ld_word>
 801cdc4:	4603      	mov	r3, r0
 801cdc6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801cdc8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d101      	bne.n	801cdd2 <find_volume+0x2e6>
 801cdce:	230d      	movs	r3, #13
 801cdd0:	e105      	b.n	801cfde <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801cdd2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801cdd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cdd6:	4413      	add	r3, r2
 801cdd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cdda:	8911      	ldrh	r1, [r2, #8]
 801cddc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cdde:	8992      	ldrh	r2, [r2, #12]
 801cde0:	0952      	lsrs	r2, r2, #5
 801cde2:	b292      	uxth	r2, r2
 801cde4:	fbb1 f2f2 	udiv	r2, r1, r2
 801cde8:	b292      	uxth	r2, r2
 801cdea:	4413      	add	r3, r2
 801cdec:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801cdee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801cdf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cdf2:	429a      	cmp	r2, r3
 801cdf4:	d201      	bcs.n	801cdfa <find_volume+0x30e>
 801cdf6:	230d      	movs	r3, #13
 801cdf8:	e0f1      	b.n	801cfde <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801cdfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801cdfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cdfe:	1ad3      	subs	r3, r2, r3
 801ce00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ce02:	8952      	ldrh	r2, [r2, #10]
 801ce04:	fbb3 f3f2 	udiv	r3, r3, r2
 801ce08:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801ce0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	d101      	bne.n	801ce14 <find_volume+0x328>
 801ce10:	230d      	movs	r3, #13
 801ce12:	e0e4      	b.n	801cfde <find_volume+0x4f2>
		fmt = FS_FAT32;
 801ce14:	2303      	movs	r3, #3
 801ce16:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801ce1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce1c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801ce20:	4293      	cmp	r3, r2
 801ce22:	d802      	bhi.n	801ce2a <find_volume+0x33e>
 801ce24:	2302      	movs	r3, #2
 801ce26:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801ce2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce2c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801ce30:	4293      	cmp	r3, r2
 801ce32:	d802      	bhi.n	801ce3a <find_volume+0x34e>
 801ce34:	2301      	movs	r3, #1
 801ce36:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801ce3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce3c:	1c9a      	adds	r2, r3, #2
 801ce3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce40:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801ce42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce44:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801ce46:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801ce48:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801ce4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ce4c:	441a      	add	r2, r3
 801ce4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce50:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801ce52:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801ce54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce56:	441a      	add	r2, r3
 801ce58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce5a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801ce5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ce60:	2b03      	cmp	r3, #3
 801ce62:	d11e      	bne.n	801cea2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801ce64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce66:	3338      	adds	r3, #56	@ 0x38
 801ce68:	332a      	adds	r3, #42	@ 0x2a
 801ce6a:	4618      	mov	r0, r3
 801ce6c:	f7fd fe6e 	bl	801ab4c <ld_word>
 801ce70:	4603      	mov	r3, r0
 801ce72:	2b00      	cmp	r3, #0
 801ce74:	d001      	beq.n	801ce7a <find_volume+0x38e>
 801ce76:	230d      	movs	r3, #13
 801ce78:	e0b1      	b.n	801cfde <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801ce7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce7c:	891b      	ldrh	r3, [r3, #8]
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	d001      	beq.n	801ce86 <find_volume+0x39a>
 801ce82:	230d      	movs	r3, #13
 801ce84:	e0ab      	b.n	801cfde <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801ce86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce88:	3338      	adds	r3, #56	@ 0x38
 801ce8a:	332c      	adds	r3, #44	@ 0x2c
 801ce8c:	4618      	mov	r0, r3
 801ce8e:	f7fd fe75 	bl	801ab7c <ld_dword>
 801ce92:	4602      	mov	r2, r0
 801ce94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce96:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801ce98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce9a:	69db      	ldr	r3, [r3, #28]
 801ce9c:	009b      	lsls	r3, r3, #2
 801ce9e:	647b      	str	r3, [r7, #68]	@ 0x44
 801cea0:	e01f      	b.n	801cee2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801cea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cea4:	891b      	ldrh	r3, [r3, #8]
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	d101      	bne.n	801ceae <find_volume+0x3c2>
 801ceaa:	230d      	movs	r3, #13
 801ceac:	e097      	b.n	801cfde <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801ceae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ceb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ceb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ceb4:	441a      	add	r2, r3
 801ceb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ceb8:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801ceba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cebe:	2b02      	cmp	r3, #2
 801cec0:	d103      	bne.n	801ceca <find_volume+0x3de>
 801cec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cec4:	69db      	ldr	r3, [r3, #28]
 801cec6:	005b      	lsls	r3, r3, #1
 801cec8:	e00a      	b.n	801cee0 <find_volume+0x3f4>
 801ceca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cecc:	69da      	ldr	r2, [r3, #28]
 801cece:	4613      	mov	r3, r2
 801ced0:	005b      	lsls	r3, r3, #1
 801ced2:	4413      	add	r3, r2
 801ced4:	085a      	lsrs	r2, r3, #1
 801ced6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ced8:	69db      	ldr	r3, [r3, #28]
 801ceda:	f003 0301 	and.w	r3, r3, #1
 801cede:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801cee0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801cee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cee4:	6a1a      	ldr	r2, [r3, #32]
 801cee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cee8:	899b      	ldrh	r3, [r3, #12]
 801ceea:	4619      	mov	r1, r3
 801ceec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ceee:	440b      	add	r3, r1
 801cef0:	3b01      	subs	r3, #1
 801cef2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801cef4:	8989      	ldrh	r1, [r1, #12]
 801cef6:	fbb3 f3f1 	udiv	r3, r3, r1
 801cefa:	429a      	cmp	r2, r3
 801cefc:	d201      	bcs.n	801cf02 <find_volume+0x416>
 801cefe:	230d      	movs	r3, #13
 801cf00:	e06d      	b.n	801cfde <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801cf02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf04:	f04f 32ff 	mov.w	r2, #4294967295
 801cf08:	619a      	str	r2, [r3, #24]
 801cf0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf0c:	699a      	ldr	r2, [r3, #24]
 801cf0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf10:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801cf12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf14:	2280      	movs	r2, #128	@ 0x80
 801cf16:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801cf18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cf1c:	2b03      	cmp	r3, #3
 801cf1e:	d149      	bne.n	801cfb4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801cf20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf22:	3338      	adds	r3, #56	@ 0x38
 801cf24:	3330      	adds	r3, #48	@ 0x30
 801cf26:	4618      	mov	r0, r3
 801cf28:	f7fd fe10 	bl	801ab4c <ld_word>
 801cf2c:	4603      	mov	r3, r0
 801cf2e:	2b01      	cmp	r3, #1
 801cf30:	d140      	bne.n	801cfb4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801cf32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cf34:	3301      	adds	r3, #1
 801cf36:	4619      	mov	r1, r3
 801cf38:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cf3a:	f7fe f8b7 	bl	801b0ac <move_window>
 801cf3e:	4603      	mov	r3, r0
 801cf40:	2b00      	cmp	r3, #0
 801cf42:	d137      	bne.n	801cfb4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801cf44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf46:	2200      	movs	r2, #0
 801cf48:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801cf4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf4c:	3338      	adds	r3, #56	@ 0x38
 801cf4e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801cf52:	4618      	mov	r0, r3
 801cf54:	f7fd fdfa 	bl	801ab4c <ld_word>
 801cf58:	4603      	mov	r3, r0
 801cf5a:	461a      	mov	r2, r3
 801cf5c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801cf60:	429a      	cmp	r2, r3
 801cf62:	d127      	bne.n	801cfb4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801cf64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf66:	3338      	adds	r3, #56	@ 0x38
 801cf68:	4618      	mov	r0, r3
 801cf6a:	f7fd fe07 	bl	801ab7c <ld_dword>
 801cf6e:	4603      	mov	r3, r0
 801cf70:	4a1d      	ldr	r2, [pc, #116]	@ (801cfe8 <find_volume+0x4fc>)
 801cf72:	4293      	cmp	r3, r2
 801cf74:	d11e      	bne.n	801cfb4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801cf76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf78:	3338      	adds	r3, #56	@ 0x38
 801cf7a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801cf7e:	4618      	mov	r0, r3
 801cf80:	f7fd fdfc 	bl	801ab7c <ld_dword>
 801cf84:	4603      	mov	r3, r0
 801cf86:	4a19      	ldr	r2, [pc, #100]	@ (801cfec <find_volume+0x500>)
 801cf88:	4293      	cmp	r3, r2
 801cf8a:	d113      	bne.n	801cfb4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801cf8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf8e:	3338      	adds	r3, #56	@ 0x38
 801cf90:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801cf94:	4618      	mov	r0, r3
 801cf96:	f7fd fdf1 	bl	801ab7c <ld_dword>
 801cf9a:	4602      	mov	r2, r0
 801cf9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf9e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801cfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfa2:	3338      	adds	r3, #56	@ 0x38
 801cfa4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801cfa8:	4618      	mov	r0, r3
 801cfaa:	f7fd fde7 	bl	801ab7c <ld_dword>
 801cfae:	4602      	mov	r2, r0
 801cfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfb2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801cfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfb6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801cfba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801cfbc:	4b0c      	ldr	r3, [pc, #48]	@ (801cff0 <find_volume+0x504>)
 801cfbe:	881b      	ldrh	r3, [r3, #0]
 801cfc0:	3301      	adds	r3, #1
 801cfc2:	b29a      	uxth	r2, r3
 801cfc4:	4b0a      	ldr	r3, [pc, #40]	@ (801cff0 <find_volume+0x504>)
 801cfc6:	801a      	strh	r2, [r3, #0]
 801cfc8:	4b09      	ldr	r3, [pc, #36]	@ (801cff0 <find_volume+0x504>)
 801cfca:	881a      	ldrh	r2, [r3, #0]
 801cfcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfce:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801cfd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfd2:	4a08      	ldr	r2, [pc, #32]	@ (801cff4 <find_volume+0x508>)
 801cfd4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801cfd6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cfd8:	f7fe f800 	bl	801afdc <clear_lock>
#endif
	return FR_OK;
 801cfdc:	2300      	movs	r3, #0
}
 801cfde:	4618      	mov	r0, r3
 801cfe0:	3758      	adds	r7, #88	@ 0x58
 801cfe2:	46bd      	mov	sp, r7
 801cfe4:	bd80      	pop	{r7, pc}
 801cfe6:	bf00      	nop
 801cfe8:	41615252 	.word	0x41615252
 801cfec:	61417272 	.word	0x61417272
 801cff0:	24000554 	.word	0x24000554
 801cff4:	24000568 	.word	0x24000568

0801cff8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801cff8:	b580      	push	{r7, lr}
 801cffa:	b084      	sub	sp, #16
 801cffc:	af00      	add	r7, sp, #0
 801cffe:	6078      	str	r0, [r7, #4]
 801d000:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801d002:	2309      	movs	r3, #9
 801d004:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	2b00      	cmp	r3, #0
 801d00a:	d01c      	beq.n	801d046 <validate+0x4e>
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	681b      	ldr	r3, [r3, #0]
 801d010:	2b00      	cmp	r3, #0
 801d012:	d018      	beq.n	801d046 <validate+0x4e>
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	781b      	ldrb	r3, [r3, #0]
 801d01a:	2b00      	cmp	r3, #0
 801d01c:	d013      	beq.n	801d046 <validate+0x4e>
 801d01e:	687b      	ldr	r3, [r7, #4]
 801d020:	889a      	ldrh	r2, [r3, #4]
 801d022:	687b      	ldr	r3, [r7, #4]
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	88db      	ldrh	r3, [r3, #6]
 801d028:	429a      	cmp	r2, r3
 801d02a:	d10c      	bne.n	801d046 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801d02c:	687b      	ldr	r3, [r7, #4]
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	785b      	ldrb	r3, [r3, #1]
 801d032:	4618      	mov	r0, r3
 801d034:	f7fd fcea 	bl	801aa0c <disk_status>
 801d038:	4603      	mov	r3, r0
 801d03a:	f003 0301 	and.w	r3, r3, #1
 801d03e:	2b00      	cmp	r3, #0
 801d040:	d101      	bne.n	801d046 <validate+0x4e>
			res = FR_OK;
 801d042:	2300      	movs	r3, #0
 801d044:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801d046:	7bfb      	ldrb	r3, [r7, #15]
 801d048:	2b00      	cmp	r3, #0
 801d04a:	d102      	bne.n	801d052 <validate+0x5a>
 801d04c:	687b      	ldr	r3, [r7, #4]
 801d04e:	681b      	ldr	r3, [r3, #0]
 801d050:	e000      	b.n	801d054 <validate+0x5c>
 801d052:	2300      	movs	r3, #0
 801d054:	683a      	ldr	r2, [r7, #0]
 801d056:	6013      	str	r3, [r2, #0]
	return res;
 801d058:	7bfb      	ldrb	r3, [r7, #15]
}
 801d05a:	4618      	mov	r0, r3
 801d05c:	3710      	adds	r7, #16
 801d05e:	46bd      	mov	sp, r7
 801d060:	bd80      	pop	{r7, pc}
	...

0801d064 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801d064:	b580      	push	{r7, lr}
 801d066:	b088      	sub	sp, #32
 801d068:	af00      	add	r7, sp, #0
 801d06a:	60f8      	str	r0, [r7, #12]
 801d06c:	60b9      	str	r1, [r7, #8]
 801d06e:	4613      	mov	r3, r2
 801d070:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801d072:	68bb      	ldr	r3, [r7, #8]
 801d074:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801d076:	f107 0310 	add.w	r3, r7, #16
 801d07a:	4618      	mov	r0, r3
 801d07c:	f7ff fc9c 	bl	801c9b8 <get_ldnumber>
 801d080:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801d082:	69fb      	ldr	r3, [r7, #28]
 801d084:	2b00      	cmp	r3, #0
 801d086:	da01      	bge.n	801d08c <f_mount+0x28>
 801d088:	230b      	movs	r3, #11
 801d08a:	e02b      	b.n	801d0e4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801d08c:	4a17      	ldr	r2, [pc, #92]	@ (801d0ec <f_mount+0x88>)
 801d08e:	69fb      	ldr	r3, [r7, #28]
 801d090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d094:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801d096:	69bb      	ldr	r3, [r7, #24]
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d005      	beq.n	801d0a8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801d09c:	69b8      	ldr	r0, [r7, #24]
 801d09e:	f7fd ff9d 	bl	801afdc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801d0a2:	69bb      	ldr	r3, [r7, #24]
 801d0a4:	2200      	movs	r2, #0
 801d0a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801d0a8:	68fb      	ldr	r3, [r7, #12]
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	d002      	beq.n	801d0b4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801d0ae:	68fb      	ldr	r3, [r7, #12]
 801d0b0:	2200      	movs	r2, #0
 801d0b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801d0b4:	68fa      	ldr	r2, [r7, #12]
 801d0b6:	490d      	ldr	r1, [pc, #52]	@ (801d0ec <f_mount+0x88>)
 801d0b8:	69fb      	ldr	r3, [r7, #28]
 801d0ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801d0be:	68fb      	ldr	r3, [r7, #12]
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	d002      	beq.n	801d0ca <f_mount+0x66>
 801d0c4:	79fb      	ldrb	r3, [r7, #7]
 801d0c6:	2b01      	cmp	r3, #1
 801d0c8:	d001      	beq.n	801d0ce <f_mount+0x6a>
 801d0ca:	2300      	movs	r3, #0
 801d0cc:	e00a      	b.n	801d0e4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801d0ce:	f107 010c 	add.w	r1, r7, #12
 801d0d2:	f107 0308 	add.w	r3, r7, #8
 801d0d6:	2200      	movs	r2, #0
 801d0d8:	4618      	mov	r0, r3
 801d0da:	f7ff fd07 	bl	801caec <find_volume>
 801d0de:	4603      	mov	r3, r0
 801d0e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801d0e2:	7dfb      	ldrb	r3, [r7, #23]
}
 801d0e4:	4618      	mov	r0, r3
 801d0e6:	3720      	adds	r7, #32
 801d0e8:	46bd      	mov	sp, r7
 801d0ea:	bd80      	pop	{r7, pc}
 801d0ec:	24000550 	.word	0x24000550

0801d0f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801d0f0:	b580      	push	{r7, lr}
 801d0f2:	b09a      	sub	sp, #104	@ 0x68
 801d0f4:	af00      	add	r7, sp, #0
 801d0f6:	60f8      	str	r0, [r7, #12]
 801d0f8:	60b9      	str	r1, [r7, #8]
 801d0fa:	4613      	mov	r3, r2
 801d0fc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801d0fe:	68fb      	ldr	r3, [r7, #12]
 801d100:	2b00      	cmp	r3, #0
 801d102:	d101      	bne.n	801d108 <f_open+0x18>
 801d104:	2309      	movs	r3, #9
 801d106:	e1b7      	b.n	801d478 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801d108:	79fb      	ldrb	r3, [r7, #7]
 801d10a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d10e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801d110:	79fa      	ldrb	r2, [r7, #7]
 801d112:	f107 0114 	add.w	r1, r7, #20
 801d116:	f107 0308 	add.w	r3, r7, #8
 801d11a:	4618      	mov	r0, r3
 801d11c:	f7ff fce6 	bl	801caec <find_volume>
 801d120:	4603      	mov	r3, r0
 801d122:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801d126:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d12a:	2b00      	cmp	r3, #0
 801d12c:	f040 819b 	bne.w	801d466 <f_open+0x376>
		dj.obj.fs = fs;
 801d130:	697b      	ldr	r3, [r7, #20]
 801d132:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d134:	68ba      	ldr	r2, [r7, #8]
 801d136:	f107 0318 	add.w	r3, r7, #24
 801d13a:	4611      	mov	r1, r2
 801d13c:	4618      	mov	r0, r3
 801d13e:	f7ff fbc5 	bl	801c8cc <follow_path>
 801d142:	4603      	mov	r3, r0
 801d144:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801d148:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	d118      	bne.n	801d182 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801d150:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801d154:	b25b      	sxtb	r3, r3
 801d156:	2b00      	cmp	r3, #0
 801d158:	da03      	bge.n	801d162 <f_open+0x72>
				res = FR_INVALID_NAME;
 801d15a:	2306      	movs	r3, #6
 801d15c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d160:	e00f      	b.n	801d182 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d162:	79fb      	ldrb	r3, [r7, #7]
 801d164:	2b01      	cmp	r3, #1
 801d166:	bf8c      	ite	hi
 801d168:	2301      	movhi	r3, #1
 801d16a:	2300      	movls	r3, #0
 801d16c:	b2db      	uxtb	r3, r3
 801d16e:	461a      	mov	r2, r3
 801d170:	f107 0318 	add.w	r3, r7, #24
 801d174:	4611      	mov	r1, r2
 801d176:	4618      	mov	r0, r3
 801d178:	f7fd fde8 	bl	801ad4c <chk_lock>
 801d17c:	4603      	mov	r3, r0
 801d17e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801d182:	79fb      	ldrb	r3, [r7, #7]
 801d184:	f003 031c 	and.w	r3, r3, #28
 801d188:	2b00      	cmp	r3, #0
 801d18a:	d07f      	beq.n	801d28c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801d18c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d190:	2b00      	cmp	r3, #0
 801d192:	d017      	beq.n	801d1c4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801d194:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d198:	2b04      	cmp	r3, #4
 801d19a:	d10e      	bne.n	801d1ba <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801d19c:	f7fd fe32 	bl	801ae04 <enq_lock>
 801d1a0:	4603      	mov	r3, r0
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	d006      	beq.n	801d1b4 <f_open+0xc4>
 801d1a6:	f107 0318 	add.w	r3, r7, #24
 801d1aa:	4618      	mov	r0, r3
 801d1ac:	f7ff f894 	bl	801c2d8 <dir_register>
 801d1b0:	4603      	mov	r3, r0
 801d1b2:	e000      	b.n	801d1b6 <f_open+0xc6>
 801d1b4:	2312      	movs	r3, #18
 801d1b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801d1ba:	79fb      	ldrb	r3, [r7, #7]
 801d1bc:	f043 0308 	orr.w	r3, r3, #8
 801d1c0:	71fb      	strb	r3, [r7, #7]
 801d1c2:	e010      	b.n	801d1e6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801d1c4:	7fbb      	ldrb	r3, [r7, #30]
 801d1c6:	f003 0311 	and.w	r3, r3, #17
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d003      	beq.n	801d1d6 <f_open+0xe6>
					res = FR_DENIED;
 801d1ce:	2307      	movs	r3, #7
 801d1d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d1d4:	e007      	b.n	801d1e6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801d1d6:	79fb      	ldrb	r3, [r7, #7]
 801d1d8:	f003 0304 	and.w	r3, r3, #4
 801d1dc:	2b00      	cmp	r3, #0
 801d1de:	d002      	beq.n	801d1e6 <f_open+0xf6>
 801d1e0:	2308      	movs	r3, #8
 801d1e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801d1e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d1ea:	2b00      	cmp	r3, #0
 801d1ec:	d168      	bne.n	801d2c0 <f_open+0x1d0>
 801d1ee:	79fb      	ldrb	r3, [r7, #7]
 801d1f0:	f003 0308 	and.w	r3, r3, #8
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d063      	beq.n	801d2c0 <f_open+0x1d0>
				dw = GET_FATTIME();
 801d1f8:	f7fd fbaa 	bl	801a950 <get_fattime>
 801d1fc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801d1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d200:	330e      	adds	r3, #14
 801d202:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d204:	4618      	mov	r0, r3
 801d206:	f7fd fcf7 	bl	801abf8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801d20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d20c:	3316      	adds	r3, #22
 801d20e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d210:	4618      	mov	r0, r3
 801d212:	f7fd fcf1 	bl	801abf8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801d216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d218:	330b      	adds	r3, #11
 801d21a:	2220      	movs	r2, #32
 801d21c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801d21e:	697b      	ldr	r3, [r7, #20]
 801d220:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d222:	4611      	mov	r1, r2
 801d224:	4618      	mov	r0, r3
 801d226:	f7fe fcc6 	bl	801bbb6 <ld_clust>
 801d22a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801d22c:	697b      	ldr	r3, [r7, #20]
 801d22e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d230:	2200      	movs	r2, #0
 801d232:	4618      	mov	r0, r3
 801d234:	f7fe fcde 	bl	801bbf4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801d238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d23a:	331c      	adds	r3, #28
 801d23c:	2100      	movs	r1, #0
 801d23e:	4618      	mov	r0, r3
 801d240:	f7fd fcda 	bl	801abf8 <st_dword>
					fs->wflag = 1;
 801d244:	697b      	ldr	r3, [r7, #20]
 801d246:	2201      	movs	r2, #1
 801d248:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801d24a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	d037      	beq.n	801d2c0 <f_open+0x1d0>
						dw = fs->winsect;
 801d250:	697b      	ldr	r3, [r7, #20]
 801d252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d254:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801d256:	f107 0318 	add.w	r3, r7, #24
 801d25a:	2200      	movs	r2, #0
 801d25c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d25e:	4618      	mov	r0, r3
 801d260:	f7fe f9ce 	bl	801b600 <remove_chain>
 801d264:	4603      	mov	r3, r0
 801d266:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801d26a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d26e:	2b00      	cmp	r3, #0
 801d270:	d126      	bne.n	801d2c0 <f_open+0x1d0>
							res = move_window(fs, dw);
 801d272:	697b      	ldr	r3, [r7, #20]
 801d274:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d276:	4618      	mov	r0, r3
 801d278:	f7fd ff18 	bl	801b0ac <move_window>
 801d27c:	4603      	mov	r3, r0
 801d27e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801d282:	697b      	ldr	r3, [r7, #20]
 801d284:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d286:	3a01      	subs	r2, #1
 801d288:	615a      	str	r2, [r3, #20]
 801d28a:	e019      	b.n	801d2c0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801d28c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d290:	2b00      	cmp	r3, #0
 801d292:	d115      	bne.n	801d2c0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801d294:	7fbb      	ldrb	r3, [r7, #30]
 801d296:	f003 0310 	and.w	r3, r3, #16
 801d29a:	2b00      	cmp	r3, #0
 801d29c:	d003      	beq.n	801d2a6 <f_open+0x1b6>
					res = FR_NO_FILE;
 801d29e:	2304      	movs	r3, #4
 801d2a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d2a4:	e00c      	b.n	801d2c0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801d2a6:	79fb      	ldrb	r3, [r7, #7]
 801d2a8:	f003 0302 	and.w	r3, r3, #2
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	d007      	beq.n	801d2c0 <f_open+0x1d0>
 801d2b0:	7fbb      	ldrb	r3, [r7, #30]
 801d2b2:	f003 0301 	and.w	r3, r3, #1
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	d002      	beq.n	801d2c0 <f_open+0x1d0>
						res = FR_DENIED;
 801d2ba:	2307      	movs	r3, #7
 801d2bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801d2c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d126      	bne.n	801d316 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801d2c8:	79fb      	ldrb	r3, [r7, #7]
 801d2ca:	f003 0308 	and.w	r3, r3, #8
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	d003      	beq.n	801d2da <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801d2d2:	79fb      	ldrb	r3, [r7, #7]
 801d2d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d2d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801d2da:	697b      	ldr	r3, [r7, #20]
 801d2dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d2de:	68fb      	ldr	r3, [r7, #12]
 801d2e0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801d2e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d2e8:	79fb      	ldrb	r3, [r7, #7]
 801d2ea:	2b01      	cmp	r3, #1
 801d2ec:	bf8c      	ite	hi
 801d2ee:	2301      	movhi	r3, #1
 801d2f0:	2300      	movls	r3, #0
 801d2f2:	b2db      	uxtb	r3, r3
 801d2f4:	461a      	mov	r2, r3
 801d2f6:	f107 0318 	add.w	r3, r7, #24
 801d2fa:	4611      	mov	r1, r2
 801d2fc:	4618      	mov	r0, r3
 801d2fe:	f7fd fda3 	bl	801ae48 <inc_lock>
 801d302:	4602      	mov	r2, r0
 801d304:	68fb      	ldr	r3, [r7, #12]
 801d306:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801d308:	68fb      	ldr	r3, [r7, #12]
 801d30a:	691b      	ldr	r3, [r3, #16]
 801d30c:	2b00      	cmp	r3, #0
 801d30e:	d102      	bne.n	801d316 <f_open+0x226>
 801d310:	2302      	movs	r3, #2
 801d312:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801d316:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d31a:	2b00      	cmp	r3, #0
 801d31c:	f040 80a3 	bne.w	801d466 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801d320:	697b      	ldr	r3, [r7, #20]
 801d322:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d324:	4611      	mov	r1, r2
 801d326:	4618      	mov	r0, r3
 801d328:	f7fe fc45 	bl	801bbb6 <ld_clust>
 801d32c:	4602      	mov	r2, r0
 801d32e:	68fb      	ldr	r3, [r7, #12]
 801d330:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801d332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d334:	331c      	adds	r3, #28
 801d336:	4618      	mov	r0, r3
 801d338:	f7fd fc20 	bl	801ab7c <ld_dword>
 801d33c:	4602      	mov	r2, r0
 801d33e:	68fb      	ldr	r3, [r7, #12]
 801d340:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801d342:	68fb      	ldr	r3, [r7, #12]
 801d344:	2200      	movs	r2, #0
 801d346:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801d348:	697a      	ldr	r2, [r7, #20]
 801d34a:	68fb      	ldr	r3, [r7, #12]
 801d34c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801d34e:	697b      	ldr	r3, [r7, #20]
 801d350:	88da      	ldrh	r2, [r3, #6]
 801d352:	68fb      	ldr	r3, [r7, #12]
 801d354:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801d356:	68fb      	ldr	r3, [r7, #12]
 801d358:	79fa      	ldrb	r2, [r7, #7]
 801d35a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801d35c:	68fb      	ldr	r3, [r7, #12]
 801d35e:	2200      	movs	r2, #0
 801d360:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801d362:	68fb      	ldr	r3, [r7, #12]
 801d364:	2200      	movs	r2, #0
 801d366:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801d368:	68fb      	ldr	r3, [r7, #12]
 801d36a:	2200      	movs	r2, #0
 801d36c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801d36e:	68fb      	ldr	r3, [r7, #12]
 801d370:	3330      	adds	r3, #48	@ 0x30
 801d372:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801d376:	2100      	movs	r1, #0
 801d378:	4618      	mov	r0, r3
 801d37a:	f7fd fc8a 	bl	801ac92 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801d37e:	79fb      	ldrb	r3, [r7, #7]
 801d380:	f003 0320 	and.w	r3, r3, #32
 801d384:	2b00      	cmp	r3, #0
 801d386:	d06e      	beq.n	801d466 <f_open+0x376>
 801d388:	68fb      	ldr	r3, [r7, #12]
 801d38a:	68db      	ldr	r3, [r3, #12]
 801d38c:	2b00      	cmp	r3, #0
 801d38e:	d06a      	beq.n	801d466 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	68da      	ldr	r2, [r3, #12]
 801d394:	68fb      	ldr	r3, [r7, #12]
 801d396:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801d398:	697b      	ldr	r3, [r7, #20]
 801d39a:	895b      	ldrh	r3, [r3, #10]
 801d39c:	461a      	mov	r2, r3
 801d39e:	697b      	ldr	r3, [r7, #20]
 801d3a0:	899b      	ldrh	r3, [r3, #12]
 801d3a2:	fb02 f303 	mul.w	r3, r2, r3
 801d3a6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801d3a8:	68fb      	ldr	r3, [r7, #12]
 801d3aa:	689b      	ldr	r3, [r3, #8]
 801d3ac:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d3ae:	68fb      	ldr	r3, [r7, #12]
 801d3b0:	68db      	ldr	r3, [r3, #12]
 801d3b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d3b4:	e016      	b.n	801d3e4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801d3b6:	68fb      	ldr	r3, [r7, #12]
 801d3b8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d3ba:	4618      	mov	r0, r3
 801d3bc:	f7fd ff33 	bl	801b226 <get_fat>
 801d3c0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801d3c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d3c4:	2b01      	cmp	r3, #1
 801d3c6:	d802      	bhi.n	801d3ce <f_open+0x2de>
 801d3c8:	2302      	movs	r3, #2
 801d3ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801d3ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d3d4:	d102      	bne.n	801d3dc <f_open+0x2ec>
 801d3d6:	2301      	movs	r3, #1
 801d3d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d3dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d3de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d3e0:	1ad3      	subs	r3, r2, r3
 801d3e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d3e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	d103      	bne.n	801d3f4 <f_open+0x304>
 801d3ec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d3ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d3f0:	429a      	cmp	r2, r3
 801d3f2:	d8e0      	bhi.n	801d3b6 <f_open+0x2c6>
				}
				fp->clust = clst;
 801d3f4:	68fb      	ldr	r3, [r7, #12]
 801d3f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d3f8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801d3fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d3fe:	2b00      	cmp	r3, #0
 801d400:	d131      	bne.n	801d466 <f_open+0x376>
 801d402:	697b      	ldr	r3, [r7, #20]
 801d404:	899b      	ldrh	r3, [r3, #12]
 801d406:	461a      	mov	r2, r3
 801d408:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d40a:	fbb3 f1f2 	udiv	r1, r3, r2
 801d40e:	fb01 f202 	mul.w	r2, r1, r2
 801d412:	1a9b      	subs	r3, r3, r2
 801d414:	2b00      	cmp	r3, #0
 801d416:	d026      	beq.n	801d466 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801d418:	697b      	ldr	r3, [r7, #20]
 801d41a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d41c:	4618      	mov	r0, r3
 801d41e:	f7fd fee3 	bl	801b1e8 <clust2sect>
 801d422:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801d424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d426:	2b00      	cmp	r3, #0
 801d428:	d103      	bne.n	801d432 <f_open+0x342>
						res = FR_INT_ERR;
 801d42a:	2302      	movs	r3, #2
 801d42c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d430:	e019      	b.n	801d466 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801d432:	697b      	ldr	r3, [r7, #20]
 801d434:	899b      	ldrh	r3, [r3, #12]
 801d436:	461a      	mov	r2, r3
 801d438:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d43a:	fbb3 f2f2 	udiv	r2, r3, r2
 801d43e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d440:	441a      	add	r2, r3
 801d442:	68fb      	ldr	r3, [r7, #12]
 801d444:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801d446:	697b      	ldr	r3, [r7, #20]
 801d448:	7858      	ldrb	r0, [r3, #1]
 801d44a:	68fb      	ldr	r3, [r7, #12]
 801d44c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d450:	68fb      	ldr	r3, [r7, #12]
 801d452:	6a1a      	ldr	r2, [r3, #32]
 801d454:	2301      	movs	r3, #1
 801d456:	f7fd fb1b 	bl	801aa90 <disk_read>
 801d45a:	4603      	mov	r3, r0
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d002      	beq.n	801d466 <f_open+0x376>
 801d460:	2301      	movs	r3, #1
 801d462:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801d466:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d002      	beq.n	801d474 <f_open+0x384>
 801d46e:	68fb      	ldr	r3, [r7, #12]
 801d470:	2200      	movs	r2, #0
 801d472:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d474:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801d478:	4618      	mov	r0, r3
 801d47a:	3768      	adds	r7, #104	@ 0x68
 801d47c:	46bd      	mov	sp, r7
 801d47e:	bd80      	pop	{r7, pc}

0801d480 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d480:	b580      	push	{r7, lr}
 801d482:	b08c      	sub	sp, #48	@ 0x30
 801d484:	af00      	add	r7, sp, #0
 801d486:	60f8      	str	r0, [r7, #12]
 801d488:	60b9      	str	r1, [r7, #8]
 801d48a:	607a      	str	r2, [r7, #4]
 801d48c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d48e:	68bb      	ldr	r3, [r7, #8]
 801d490:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d492:	683b      	ldr	r3, [r7, #0]
 801d494:	2200      	movs	r2, #0
 801d496:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	f107 0210 	add.w	r2, r7, #16
 801d49e:	4611      	mov	r1, r2
 801d4a0:	4618      	mov	r0, r3
 801d4a2:	f7ff fda9 	bl	801cff8 <validate>
 801d4a6:	4603      	mov	r3, r0
 801d4a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d4ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	d107      	bne.n	801d4c4 <f_write+0x44>
 801d4b4:	68fb      	ldr	r3, [r7, #12]
 801d4b6:	7d5b      	ldrb	r3, [r3, #21]
 801d4b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801d4bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d4c0:	2b00      	cmp	r3, #0
 801d4c2:	d002      	beq.n	801d4ca <f_write+0x4a>
 801d4c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d4c8:	e16a      	b.n	801d7a0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d4ca:	68fb      	ldr	r3, [r7, #12]
 801d4cc:	7d1b      	ldrb	r3, [r3, #20]
 801d4ce:	f003 0302 	and.w	r3, r3, #2
 801d4d2:	2b00      	cmp	r3, #0
 801d4d4:	d101      	bne.n	801d4da <f_write+0x5a>
 801d4d6:	2307      	movs	r3, #7
 801d4d8:	e162      	b.n	801d7a0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d4da:	68fb      	ldr	r3, [r7, #12]
 801d4dc:	699a      	ldr	r2, [r3, #24]
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	441a      	add	r2, r3
 801d4e2:	68fb      	ldr	r3, [r7, #12]
 801d4e4:	699b      	ldr	r3, [r3, #24]
 801d4e6:	429a      	cmp	r2, r3
 801d4e8:	f080 814c 	bcs.w	801d784 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d4ec:	68fb      	ldr	r3, [r7, #12]
 801d4ee:	699b      	ldr	r3, [r3, #24]
 801d4f0:	43db      	mvns	r3, r3
 801d4f2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d4f4:	e146      	b.n	801d784 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d4f6:	68fb      	ldr	r3, [r7, #12]
 801d4f8:	699b      	ldr	r3, [r3, #24]
 801d4fa:	693a      	ldr	r2, [r7, #16]
 801d4fc:	8992      	ldrh	r2, [r2, #12]
 801d4fe:	fbb3 f1f2 	udiv	r1, r3, r2
 801d502:	fb01 f202 	mul.w	r2, r1, r2
 801d506:	1a9b      	subs	r3, r3, r2
 801d508:	2b00      	cmp	r3, #0
 801d50a:	f040 80f1 	bne.w	801d6f0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d50e:	68fb      	ldr	r3, [r7, #12]
 801d510:	699b      	ldr	r3, [r3, #24]
 801d512:	693a      	ldr	r2, [r7, #16]
 801d514:	8992      	ldrh	r2, [r2, #12]
 801d516:	fbb3 f3f2 	udiv	r3, r3, r2
 801d51a:	693a      	ldr	r2, [r7, #16]
 801d51c:	8952      	ldrh	r2, [r2, #10]
 801d51e:	3a01      	subs	r2, #1
 801d520:	4013      	ands	r3, r2
 801d522:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d524:	69bb      	ldr	r3, [r7, #24]
 801d526:	2b00      	cmp	r3, #0
 801d528:	d143      	bne.n	801d5b2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d52a:	68fb      	ldr	r3, [r7, #12]
 801d52c:	699b      	ldr	r3, [r3, #24]
 801d52e:	2b00      	cmp	r3, #0
 801d530:	d10c      	bne.n	801d54c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d532:	68fb      	ldr	r3, [r7, #12]
 801d534:	689b      	ldr	r3, [r3, #8]
 801d536:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d53a:	2b00      	cmp	r3, #0
 801d53c:	d11a      	bne.n	801d574 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	2100      	movs	r1, #0
 801d542:	4618      	mov	r0, r3
 801d544:	f7fe f8c1 	bl	801b6ca <create_chain>
 801d548:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d54a:	e013      	b.n	801d574 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d54c:	68fb      	ldr	r3, [r7, #12]
 801d54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d550:	2b00      	cmp	r3, #0
 801d552:	d007      	beq.n	801d564 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d554:	68fb      	ldr	r3, [r7, #12]
 801d556:	699b      	ldr	r3, [r3, #24]
 801d558:	4619      	mov	r1, r3
 801d55a:	68f8      	ldr	r0, [r7, #12]
 801d55c:	f7fe f94d 	bl	801b7fa <clmt_clust>
 801d560:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d562:	e007      	b.n	801d574 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d564:	68fa      	ldr	r2, [r7, #12]
 801d566:	68fb      	ldr	r3, [r7, #12]
 801d568:	69db      	ldr	r3, [r3, #28]
 801d56a:	4619      	mov	r1, r3
 801d56c:	4610      	mov	r0, r2
 801d56e:	f7fe f8ac 	bl	801b6ca <create_chain>
 801d572:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d576:	2b00      	cmp	r3, #0
 801d578:	f000 8109 	beq.w	801d78e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801d57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d57e:	2b01      	cmp	r3, #1
 801d580:	d104      	bne.n	801d58c <f_write+0x10c>
 801d582:	68fb      	ldr	r3, [r7, #12]
 801d584:	2202      	movs	r2, #2
 801d586:	755a      	strb	r2, [r3, #21]
 801d588:	2302      	movs	r3, #2
 801d58a:	e109      	b.n	801d7a0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d592:	d104      	bne.n	801d59e <f_write+0x11e>
 801d594:	68fb      	ldr	r3, [r7, #12]
 801d596:	2201      	movs	r2, #1
 801d598:	755a      	strb	r2, [r3, #21]
 801d59a:	2301      	movs	r3, #1
 801d59c:	e100      	b.n	801d7a0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801d59e:	68fb      	ldr	r3, [r7, #12]
 801d5a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d5a2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801d5a4:	68fb      	ldr	r3, [r7, #12]
 801d5a6:	689b      	ldr	r3, [r3, #8]
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	d102      	bne.n	801d5b2 <f_write+0x132>
 801d5ac:	68fb      	ldr	r3, [r7, #12]
 801d5ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d5b0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801d5b2:	68fb      	ldr	r3, [r7, #12]
 801d5b4:	7d1b      	ldrb	r3, [r3, #20]
 801d5b6:	b25b      	sxtb	r3, r3
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	da18      	bge.n	801d5ee <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d5bc:	693b      	ldr	r3, [r7, #16]
 801d5be:	7858      	ldrb	r0, [r3, #1]
 801d5c0:	68fb      	ldr	r3, [r7, #12]
 801d5c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	6a1a      	ldr	r2, [r3, #32]
 801d5ca:	2301      	movs	r3, #1
 801d5cc:	f7fd fa80 	bl	801aad0 <disk_write>
 801d5d0:	4603      	mov	r3, r0
 801d5d2:	2b00      	cmp	r3, #0
 801d5d4:	d004      	beq.n	801d5e0 <f_write+0x160>
 801d5d6:	68fb      	ldr	r3, [r7, #12]
 801d5d8:	2201      	movs	r2, #1
 801d5da:	755a      	strb	r2, [r3, #21]
 801d5dc:	2301      	movs	r3, #1
 801d5de:	e0df      	b.n	801d7a0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d5e0:	68fb      	ldr	r3, [r7, #12]
 801d5e2:	7d1b      	ldrb	r3, [r3, #20]
 801d5e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d5e8:	b2da      	uxtb	r2, r3
 801d5ea:	68fb      	ldr	r3, [r7, #12]
 801d5ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801d5ee:	693a      	ldr	r2, [r7, #16]
 801d5f0:	68fb      	ldr	r3, [r7, #12]
 801d5f2:	69db      	ldr	r3, [r3, #28]
 801d5f4:	4619      	mov	r1, r3
 801d5f6:	4610      	mov	r0, r2
 801d5f8:	f7fd fdf6 	bl	801b1e8 <clust2sect>
 801d5fc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801d5fe:	697b      	ldr	r3, [r7, #20]
 801d600:	2b00      	cmp	r3, #0
 801d602:	d104      	bne.n	801d60e <f_write+0x18e>
 801d604:	68fb      	ldr	r3, [r7, #12]
 801d606:	2202      	movs	r2, #2
 801d608:	755a      	strb	r2, [r3, #21]
 801d60a:	2302      	movs	r3, #2
 801d60c:	e0c8      	b.n	801d7a0 <f_write+0x320>
			sect += csect;
 801d60e:	697a      	ldr	r2, [r7, #20]
 801d610:	69bb      	ldr	r3, [r7, #24]
 801d612:	4413      	add	r3, r2
 801d614:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801d616:	693b      	ldr	r3, [r7, #16]
 801d618:	899b      	ldrh	r3, [r3, #12]
 801d61a:	461a      	mov	r2, r3
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	fbb3 f3f2 	udiv	r3, r3, r2
 801d622:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801d624:	6a3b      	ldr	r3, [r7, #32]
 801d626:	2b00      	cmp	r3, #0
 801d628:	d043      	beq.n	801d6b2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801d62a:	69ba      	ldr	r2, [r7, #24]
 801d62c:	6a3b      	ldr	r3, [r7, #32]
 801d62e:	4413      	add	r3, r2
 801d630:	693a      	ldr	r2, [r7, #16]
 801d632:	8952      	ldrh	r2, [r2, #10]
 801d634:	4293      	cmp	r3, r2
 801d636:	d905      	bls.n	801d644 <f_write+0x1c4>
					cc = fs->csize - csect;
 801d638:	693b      	ldr	r3, [r7, #16]
 801d63a:	895b      	ldrh	r3, [r3, #10]
 801d63c:	461a      	mov	r2, r3
 801d63e:	69bb      	ldr	r3, [r7, #24]
 801d640:	1ad3      	subs	r3, r2, r3
 801d642:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d644:	693b      	ldr	r3, [r7, #16]
 801d646:	7858      	ldrb	r0, [r3, #1]
 801d648:	6a3b      	ldr	r3, [r7, #32]
 801d64a:	697a      	ldr	r2, [r7, #20]
 801d64c:	69f9      	ldr	r1, [r7, #28]
 801d64e:	f7fd fa3f 	bl	801aad0 <disk_write>
 801d652:	4603      	mov	r3, r0
 801d654:	2b00      	cmp	r3, #0
 801d656:	d004      	beq.n	801d662 <f_write+0x1e2>
 801d658:	68fb      	ldr	r3, [r7, #12]
 801d65a:	2201      	movs	r2, #1
 801d65c:	755a      	strb	r2, [r3, #21]
 801d65e:	2301      	movs	r3, #1
 801d660:	e09e      	b.n	801d7a0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801d662:	68fb      	ldr	r3, [r7, #12]
 801d664:	6a1a      	ldr	r2, [r3, #32]
 801d666:	697b      	ldr	r3, [r7, #20]
 801d668:	1ad3      	subs	r3, r2, r3
 801d66a:	6a3a      	ldr	r2, [r7, #32]
 801d66c:	429a      	cmp	r2, r3
 801d66e:	d918      	bls.n	801d6a2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801d670:	68fb      	ldr	r3, [r7, #12]
 801d672:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801d676:	68fb      	ldr	r3, [r7, #12]
 801d678:	6a1a      	ldr	r2, [r3, #32]
 801d67a:	697b      	ldr	r3, [r7, #20]
 801d67c:	1ad3      	subs	r3, r2, r3
 801d67e:	693a      	ldr	r2, [r7, #16]
 801d680:	8992      	ldrh	r2, [r2, #12]
 801d682:	fb02 f303 	mul.w	r3, r2, r3
 801d686:	69fa      	ldr	r2, [r7, #28]
 801d688:	18d1      	adds	r1, r2, r3
 801d68a:	693b      	ldr	r3, [r7, #16]
 801d68c:	899b      	ldrh	r3, [r3, #12]
 801d68e:	461a      	mov	r2, r3
 801d690:	f7fd fade 	bl	801ac50 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801d694:	68fb      	ldr	r3, [r7, #12]
 801d696:	7d1b      	ldrb	r3, [r3, #20]
 801d698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d69c:	b2da      	uxtb	r2, r3
 801d69e:	68fb      	ldr	r3, [r7, #12]
 801d6a0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801d6a2:	693b      	ldr	r3, [r7, #16]
 801d6a4:	899b      	ldrh	r3, [r3, #12]
 801d6a6:	461a      	mov	r2, r3
 801d6a8:	6a3b      	ldr	r3, [r7, #32]
 801d6aa:	fb02 f303 	mul.w	r3, r2, r3
 801d6ae:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801d6b0:	e04b      	b.n	801d74a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d6b2:	68fb      	ldr	r3, [r7, #12]
 801d6b4:	6a1b      	ldr	r3, [r3, #32]
 801d6b6:	697a      	ldr	r2, [r7, #20]
 801d6b8:	429a      	cmp	r2, r3
 801d6ba:	d016      	beq.n	801d6ea <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801d6bc:	68fb      	ldr	r3, [r7, #12]
 801d6be:	699a      	ldr	r2, [r3, #24]
 801d6c0:	68fb      	ldr	r3, [r7, #12]
 801d6c2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d6c4:	429a      	cmp	r2, r3
 801d6c6:	d210      	bcs.n	801d6ea <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801d6c8:	693b      	ldr	r3, [r7, #16]
 801d6ca:	7858      	ldrb	r0, [r3, #1]
 801d6cc:	68fb      	ldr	r3, [r7, #12]
 801d6ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d6d2:	2301      	movs	r3, #1
 801d6d4:	697a      	ldr	r2, [r7, #20]
 801d6d6:	f7fd f9db 	bl	801aa90 <disk_read>
 801d6da:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801d6dc:	2b00      	cmp	r3, #0
 801d6de:	d004      	beq.n	801d6ea <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801d6e0:	68fb      	ldr	r3, [r7, #12]
 801d6e2:	2201      	movs	r2, #1
 801d6e4:	755a      	strb	r2, [r3, #21]
 801d6e6:	2301      	movs	r3, #1
 801d6e8:	e05a      	b.n	801d7a0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801d6ea:	68fb      	ldr	r3, [r7, #12]
 801d6ec:	697a      	ldr	r2, [r7, #20]
 801d6ee:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801d6f0:	693b      	ldr	r3, [r7, #16]
 801d6f2:	899b      	ldrh	r3, [r3, #12]
 801d6f4:	4618      	mov	r0, r3
 801d6f6:	68fb      	ldr	r3, [r7, #12]
 801d6f8:	699b      	ldr	r3, [r3, #24]
 801d6fa:	693a      	ldr	r2, [r7, #16]
 801d6fc:	8992      	ldrh	r2, [r2, #12]
 801d6fe:	fbb3 f1f2 	udiv	r1, r3, r2
 801d702:	fb01 f202 	mul.w	r2, r1, r2
 801d706:	1a9b      	subs	r3, r3, r2
 801d708:	1ac3      	subs	r3, r0, r3
 801d70a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801d70c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	429a      	cmp	r2, r3
 801d712:	d901      	bls.n	801d718 <f_write+0x298>
 801d714:	687b      	ldr	r3, [r7, #4]
 801d716:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801d718:	68fb      	ldr	r3, [r7, #12]
 801d71a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d71e:	68fb      	ldr	r3, [r7, #12]
 801d720:	699b      	ldr	r3, [r3, #24]
 801d722:	693a      	ldr	r2, [r7, #16]
 801d724:	8992      	ldrh	r2, [r2, #12]
 801d726:	fbb3 f0f2 	udiv	r0, r3, r2
 801d72a:	fb00 f202 	mul.w	r2, r0, r2
 801d72e:	1a9b      	subs	r3, r3, r2
 801d730:	440b      	add	r3, r1
 801d732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d734:	69f9      	ldr	r1, [r7, #28]
 801d736:	4618      	mov	r0, r3
 801d738:	f7fd fa8a 	bl	801ac50 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801d73c:	68fb      	ldr	r3, [r7, #12]
 801d73e:	7d1b      	ldrb	r3, [r3, #20]
 801d740:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801d744:	b2da      	uxtb	r2, r3
 801d746:	68fb      	ldr	r3, [r7, #12]
 801d748:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801d74a:	69fa      	ldr	r2, [r7, #28]
 801d74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d74e:	4413      	add	r3, r2
 801d750:	61fb      	str	r3, [r7, #28]
 801d752:	68fb      	ldr	r3, [r7, #12]
 801d754:	699a      	ldr	r2, [r3, #24]
 801d756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d758:	441a      	add	r2, r3
 801d75a:	68fb      	ldr	r3, [r7, #12]
 801d75c:	619a      	str	r2, [r3, #24]
 801d75e:	68fb      	ldr	r3, [r7, #12]
 801d760:	68da      	ldr	r2, [r3, #12]
 801d762:	68fb      	ldr	r3, [r7, #12]
 801d764:	699b      	ldr	r3, [r3, #24]
 801d766:	429a      	cmp	r2, r3
 801d768:	bf38      	it	cc
 801d76a:	461a      	movcc	r2, r3
 801d76c:	68fb      	ldr	r3, [r7, #12]
 801d76e:	60da      	str	r2, [r3, #12]
 801d770:	683b      	ldr	r3, [r7, #0]
 801d772:	681a      	ldr	r2, [r3, #0]
 801d774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d776:	441a      	add	r2, r3
 801d778:	683b      	ldr	r3, [r7, #0]
 801d77a:	601a      	str	r2, [r3, #0]
 801d77c:	687a      	ldr	r2, [r7, #4]
 801d77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d780:	1ad3      	subs	r3, r2, r3
 801d782:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801d784:	687b      	ldr	r3, [r7, #4]
 801d786:	2b00      	cmp	r3, #0
 801d788:	f47f aeb5 	bne.w	801d4f6 <f_write+0x76>
 801d78c:	e000      	b.n	801d790 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d78e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801d790:	68fb      	ldr	r3, [r7, #12]
 801d792:	7d1b      	ldrb	r3, [r3, #20]
 801d794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d798:	b2da      	uxtb	r2, r3
 801d79a:	68fb      	ldr	r3, [r7, #12]
 801d79c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801d79e:	2300      	movs	r3, #0
}
 801d7a0:	4618      	mov	r0, r3
 801d7a2:	3730      	adds	r7, #48	@ 0x30
 801d7a4:	46bd      	mov	sp, r7
 801d7a6:	bd80      	pop	{r7, pc}

0801d7a8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801d7a8:	b580      	push	{r7, lr}
 801d7aa:	b086      	sub	sp, #24
 801d7ac:	af00      	add	r7, sp, #0
 801d7ae:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	f107 0208 	add.w	r2, r7, #8
 801d7b6:	4611      	mov	r1, r2
 801d7b8:	4618      	mov	r0, r3
 801d7ba:	f7ff fc1d 	bl	801cff8 <validate>
 801d7be:	4603      	mov	r3, r0
 801d7c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d7c2:	7dfb      	ldrb	r3, [r7, #23]
 801d7c4:	2b00      	cmp	r3, #0
 801d7c6:	d168      	bne.n	801d89a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	7d1b      	ldrb	r3, [r3, #20]
 801d7cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d7d0:	2b00      	cmp	r3, #0
 801d7d2:	d062      	beq.n	801d89a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801d7d4:	687b      	ldr	r3, [r7, #4]
 801d7d6:	7d1b      	ldrb	r3, [r3, #20]
 801d7d8:	b25b      	sxtb	r3, r3
 801d7da:	2b00      	cmp	r3, #0
 801d7dc:	da15      	bge.n	801d80a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801d7de:	68bb      	ldr	r3, [r7, #8]
 801d7e0:	7858      	ldrb	r0, [r3, #1]
 801d7e2:	687b      	ldr	r3, [r7, #4]
 801d7e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d7e8:	687b      	ldr	r3, [r7, #4]
 801d7ea:	6a1a      	ldr	r2, [r3, #32]
 801d7ec:	2301      	movs	r3, #1
 801d7ee:	f7fd f96f 	bl	801aad0 <disk_write>
 801d7f2:	4603      	mov	r3, r0
 801d7f4:	2b00      	cmp	r3, #0
 801d7f6:	d001      	beq.n	801d7fc <f_sync+0x54>
 801d7f8:	2301      	movs	r3, #1
 801d7fa:	e04f      	b.n	801d89c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d7fc:	687b      	ldr	r3, [r7, #4]
 801d7fe:	7d1b      	ldrb	r3, [r3, #20]
 801d800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d804:	b2da      	uxtb	r2, r3
 801d806:	687b      	ldr	r3, [r7, #4]
 801d808:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801d80a:	f7fd f8a1 	bl	801a950 <get_fattime>
 801d80e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801d810:	68ba      	ldr	r2, [r7, #8]
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d816:	4619      	mov	r1, r3
 801d818:	4610      	mov	r0, r2
 801d81a:	f7fd fc47 	bl	801b0ac <move_window>
 801d81e:	4603      	mov	r3, r0
 801d820:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801d822:	7dfb      	ldrb	r3, [r7, #23]
 801d824:	2b00      	cmp	r3, #0
 801d826:	d138      	bne.n	801d89a <f_sync+0xf2>
					dir = fp->dir_ptr;
 801d828:	687b      	ldr	r3, [r7, #4]
 801d82a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d82c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801d82e:	68fb      	ldr	r3, [r7, #12]
 801d830:	330b      	adds	r3, #11
 801d832:	781a      	ldrb	r2, [r3, #0]
 801d834:	68fb      	ldr	r3, [r7, #12]
 801d836:	330b      	adds	r3, #11
 801d838:	f042 0220 	orr.w	r2, r2, #32
 801d83c:	b2d2      	uxtb	r2, r2
 801d83e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	6818      	ldr	r0, [r3, #0]
 801d844:	687b      	ldr	r3, [r7, #4]
 801d846:	689b      	ldr	r3, [r3, #8]
 801d848:	461a      	mov	r2, r3
 801d84a:	68f9      	ldr	r1, [r7, #12]
 801d84c:	f7fe f9d2 	bl	801bbf4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801d850:	68fb      	ldr	r3, [r7, #12]
 801d852:	f103 021c 	add.w	r2, r3, #28
 801d856:	687b      	ldr	r3, [r7, #4]
 801d858:	68db      	ldr	r3, [r3, #12]
 801d85a:	4619      	mov	r1, r3
 801d85c:	4610      	mov	r0, r2
 801d85e:	f7fd f9cb 	bl	801abf8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801d862:	68fb      	ldr	r3, [r7, #12]
 801d864:	3316      	adds	r3, #22
 801d866:	6939      	ldr	r1, [r7, #16]
 801d868:	4618      	mov	r0, r3
 801d86a:	f7fd f9c5 	bl	801abf8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801d86e:	68fb      	ldr	r3, [r7, #12]
 801d870:	3312      	adds	r3, #18
 801d872:	2100      	movs	r1, #0
 801d874:	4618      	mov	r0, r3
 801d876:	f7fd f9a4 	bl	801abc2 <st_word>
					fs->wflag = 1;
 801d87a:	68bb      	ldr	r3, [r7, #8]
 801d87c:	2201      	movs	r2, #1
 801d87e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801d880:	68bb      	ldr	r3, [r7, #8]
 801d882:	4618      	mov	r0, r3
 801d884:	f7fd fc40 	bl	801b108 <sync_fs>
 801d888:	4603      	mov	r3, r0
 801d88a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801d88c:	687b      	ldr	r3, [r7, #4]
 801d88e:	7d1b      	ldrb	r3, [r3, #20]
 801d890:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801d894:	b2da      	uxtb	r2, r3
 801d896:	687b      	ldr	r3, [r7, #4]
 801d898:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801d89a:	7dfb      	ldrb	r3, [r7, #23]
}
 801d89c:	4618      	mov	r0, r3
 801d89e:	3718      	adds	r7, #24
 801d8a0:	46bd      	mov	sp, r7
 801d8a2:	bd80      	pop	{r7, pc}

0801d8a4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801d8a4:	b580      	push	{r7, lr}
 801d8a6:	b084      	sub	sp, #16
 801d8a8:	af00      	add	r7, sp, #0
 801d8aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801d8ac:	6878      	ldr	r0, [r7, #4]
 801d8ae:	f7ff ff7b 	bl	801d7a8 <f_sync>
 801d8b2:	4603      	mov	r3, r0
 801d8b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801d8b6:	7bfb      	ldrb	r3, [r7, #15]
 801d8b8:	2b00      	cmp	r3, #0
 801d8ba:	d118      	bne.n	801d8ee <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801d8bc:	687b      	ldr	r3, [r7, #4]
 801d8be:	f107 0208 	add.w	r2, r7, #8
 801d8c2:	4611      	mov	r1, r2
 801d8c4:	4618      	mov	r0, r3
 801d8c6:	f7ff fb97 	bl	801cff8 <validate>
 801d8ca:	4603      	mov	r3, r0
 801d8cc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801d8ce:	7bfb      	ldrb	r3, [r7, #15]
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	d10c      	bne.n	801d8ee <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	691b      	ldr	r3, [r3, #16]
 801d8d8:	4618      	mov	r0, r3
 801d8da:	f7fd fb43 	bl	801af64 <dec_lock>
 801d8de:	4603      	mov	r3, r0
 801d8e0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801d8e2:	7bfb      	ldrb	r3, [r7, #15]
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d102      	bne.n	801d8ee <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801d8e8:	687b      	ldr	r3, [r7, #4]
 801d8ea:	2200      	movs	r2, #0
 801d8ec:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801d8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 801d8f0:	4618      	mov	r0, r3
 801d8f2:	3710      	adds	r7, #16
 801d8f4:	46bd      	mov	sp, r7
 801d8f6:	bd80      	pop	{r7, pc}

0801d8f8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801d8f8:	b580      	push	{r7, lr}
 801d8fa:	b0a0      	sub	sp, #128	@ 0x80
 801d8fc:	af00      	add	r7, sp, #0
 801d8fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801d900:	2300      	movs	r3, #0
 801d902:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801d904:	f107 010c 	add.w	r1, r7, #12
 801d908:	1d3b      	adds	r3, r7, #4
 801d90a:	2202      	movs	r2, #2
 801d90c:	4618      	mov	r0, r3
 801d90e:	f7ff f8ed 	bl	801caec <find_volume>
 801d912:	4603      	mov	r3, r0
 801d914:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801d918:	68fb      	ldr	r3, [r7, #12]
 801d91a:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801d91c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d920:	2b00      	cmp	r3, #0
 801d922:	f040 808e 	bne.w	801da42 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801d926:	687a      	ldr	r2, [r7, #4]
 801d928:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d92c:	4611      	mov	r1, r2
 801d92e:	4618      	mov	r0, r3
 801d930:	f7fe ffcc 	bl	801c8cc <follow_path>
 801d934:	4603      	mov	r3, r0
 801d936:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801d93a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d93e:	2b00      	cmp	r3, #0
 801d940:	d108      	bne.n	801d954 <f_unlink+0x5c>
 801d942:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d946:	2102      	movs	r1, #2
 801d948:	4618      	mov	r0, r3
 801d94a:	f7fd f9ff 	bl	801ad4c <chk_lock>
 801d94e:	4603      	mov	r3, r0
 801d950:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801d954:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d958:	2b00      	cmp	r3, #0
 801d95a:	d172      	bne.n	801da42 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801d95c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801d960:	b25b      	sxtb	r3, r3
 801d962:	2b00      	cmp	r3, #0
 801d964:	da03      	bge.n	801d96e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801d966:	2306      	movs	r3, #6
 801d968:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801d96c:	e008      	b.n	801d980 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801d96e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801d972:	f003 0301 	and.w	r3, r3, #1
 801d976:	2b00      	cmp	r3, #0
 801d978:	d002      	beq.n	801d980 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801d97a:	2307      	movs	r3, #7
 801d97c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801d980:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d984:	2b00      	cmp	r3, #0
 801d986:	d134      	bne.n	801d9f2 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801d988:	68fb      	ldr	r3, [r7, #12]
 801d98a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801d98c:	4611      	mov	r1, r2
 801d98e:	4618      	mov	r0, r3
 801d990:	f7fe f911 	bl	801bbb6 <ld_clust>
 801d994:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801d996:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801d99a:	f003 0310 	and.w	r3, r3, #16
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	d027      	beq.n	801d9f2 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801d9a2:	68fb      	ldr	r3, [r7, #12]
 801d9a4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801d9a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d9a8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801d9aa:	f107 0310 	add.w	r3, r7, #16
 801d9ae:	2100      	movs	r1, #0
 801d9b0:	4618      	mov	r0, r3
 801d9b2:	f7fd ff5a 	bl	801b86a <dir_sdi>
 801d9b6:	4603      	mov	r3, r0
 801d9b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801d9bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	d116      	bne.n	801d9f2 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801d9c4:	f107 0310 	add.w	r3, r7, #16
 801d9c8:	2100      	movs	r1, #0
 801d9ca:	4618      	mov	r0, r3
 801d9cc:	f7fe fb1d 	bl	801c00a <dir_read>
 801d9d0:	4603      	mov	r3, r0
 801d9d2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801d9d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d9da:	2b00      	cmp	r3, #0
 801d9dc:	d102      	bne.n	801d9e4 <f_unlink+0xec>
 801d9de:	2307      	movs	r3, #7
 801d9e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801d9e4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d9e8:	2b04      	cmp	r3, #4
 801d9ea:	d102      	bne.n	801d9f2 <f_unlink+0xfa>
 801d9ec:	2300      	movs	r3, #0
 801d9ee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801d9f2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	d123      	bne.n	801da42 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801d9fa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d9fe:	4618      	mov	r0, r3
 801da00:	f7fe fd62 	bl	801c4c8 <dir_remove>
 801da04:	4603      	mov	r3, r0
 801da06:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801da0a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801da0e:	2b00      	cmp	r3, #0
 801da10:	d10c      	bne.n	801da2c <f_unlink+0x134>
 801da12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801da14:	2b00      	cmp	r3, #0
 801da16:	d009      	beq.n	801da2c <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801da18:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801da1c:	2200      	movs	r2, #0
 801da1e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801da20:	4618      	mov	r0, r3
 801da22:	f7fd fded 	bl	801b600 <remove_chain>
 801da26:	4603      	mov	r3, r0
 801da28:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801da2c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801da30:	2b00      	cmp	r3, #0
 801da32:	d106      	bne.n	801da42 <f_unlink+0x14a>
 801da34:	68fb      	ldr	r3, [r7, #12]
 801da36:	4618      	mov	r0, r3
 801da38:	f7fd fb66 	bl	801b108 <sync_fs>
 801da3c:	4603      	mov	r3, r0
 801da3e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801da42:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801da46:	4618      	mov	r0, r3
 801da48:	3780      	adds	r7, #128	@ 0x80
 801da4a:	46bd      	mov	sp, r7
 801da4c:	bd80      	pop	{r7, pc}
	...

0801da50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801da50:	b480      	push	{r7}
 801da52:	b087      	sub	sp, #28
 801da54:	af00      	add	r7, sp, #0
 801da56:	60f8      	str	r0, [r7, #12]
 801da58:	60b9      	str	r1, [r7, #8]
 801da5a:	4613      	mov	r3, r2
 801da5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801da5e:	2301      	movs	r3, #1
 801da60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801da62:	2300      	movs	r3, #0
 801da64:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801da66:	4b1f      	ldr	r3, [pc, #124]	@ (801dae4 <FATFS_LinkDriverEx+0x94>)
 801da68:	7a5b      	ldrb	r3, [r3, #9]
 801da6a:	b2db      	uxtb	r3, r3
 801da6c:	2b00      	cmp	r3, #0
 801da6e:	d131      	bne.n	801dad4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801da70:	4b1c      	ldr	r3, [pc, #112]	@ (801dae4 <FATFS_LinkDriverEx+0x94>)
 801da72:	7a5b      	ldrb	r3, [r3, #9]
 801da74:	b2db      	uxtb	r3, r3
 801da76:	461a      	mov	r2, r3
 801da78:	4b1a      	ldr	r3, [pc, #104]	@ (801dae4 <FATFS_LinkDriverEx+0x94>)
 801da7a:	2100      	movs	r1, #0
 801da7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801da7e:	4b19      	ldr	r3, [pc, #100]	@ (801dae4 <FATFS_LinkDriverEx+0x94>)
 801da80:	7a5b      	ldrb	r3, [r3, #9]
 801da82:	b2db      	uxtb	r3, r3
 801da84:	4a17      	ldr	r2, [pc, #92]	@ (801dae4 <FATFS_LinkDriverEx+0x94>)
 801da86:	009b      	lsls	r3, r3, #2
 801da88:	4413      	add	r3, r2
 801da8a:	68fa      	ldr	r2, [r7, #12]
 801da8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801da8e:	4b15      	ldr	r3, [pc, #84]	@ (801dae4 <FATFS_LinkDriverEx+0x94>)
 801da90:	7a5b      	ldrb	r3, [r3, #9]
 801da92:	b2db      	uxtb	r3, r3
 801da94:	461a      	mov	r2, r3
 801da96:	4b13      	ldr	r3, [pc, #76]	@ (801dae4 <FATFS_LinkDriverEx+0x94>)
 801da98:	4413      	add	r3, r2
 801da9a:	79fa      	ldrb	r2, [r7, #7]
 801da9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801da9e:	4b11      	ldr	r3, [pc, #68]	@ (801dae4 <FATFS_LinkDriverEx+0x94>)
 801daa0:	7a5b      	ldrb	r3, [r3, #9]
 801daa2:	b2db      	uxtb	r3, r3
 801daa4:	1c5a      	adds	r2, r3, #1
 801daa6:	b2d1      	uxtb	r1, r2
 801daa8:	4a0e      	ldr	r2, [pc, #56]	@ (801dae4 <FATFS_LinkDriverEx+0x94>)
 801daaa:	7251      	strb	r1, [r2, #9]
 801daac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801daae:	7dbb      	ldrb	r3, [r7, #22]
 801dab0:	3330      	adds	r3, #48	@ 0x30
 801dab2:	b2da      	uxtb	r2, r3
 801dab4:	68bb      	ldr	r3, [r7, #8]
 801dab6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801dab8:	68bb      	ldr	r3, [r7, #8]
 801daba:	3301      	adds	r3, #1
 801dabc:	223a      	movs	r2, #58	@ 0x3a
 801dabe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801dac0:	68bb      	ldr	r3, [r7, #8]
 801dac2:	3302      	adds	r3, #2
 801dac4:	222f      	movs	r2, #47	@ 0x2f
 801dac6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801dac8:	68bb      	ldr	r3, [r7, #8]
 801daca:	3303      	adds	r3, #3
 801dacc:	2200      	movs	r2, #0
 801dace:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801dad0:	2300      	movs	r3, #0
 801dad2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801dad4:	7dfb      	ldrb	r3, [r7, #23]
}
 801dad6:	4618      	mov	r0, r3
 801dad8:	371c      	adds	r7, #28
 801dada:	46bd      	mov	sp, r7
 801dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dae0:	4770      	bx	lr
 801dae2:	bf00      	nop
 801dae4:	24000768 	.word	0x24000768

0801dae8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801dae8:	b580      	push	{r7, lr}
 801daea:	b082      	sub	sp, #8
 801daec:	af00      	add	r7, sp, #0
 801daee:	6078      	str	r0, [r7, #4]
 801daf0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801daf2:	2200      	movs	r2, #0
 801daf4:	6839      	ldr	r1, [r7, #0]
 801daf6:	6878      	ldr	r0, [r7, #4]
 801daf8:	f7ff ffaa 	bl	801da50 <FATFS_LinkDriverEx>
 801dafc:	4603      	mov	r3, r0
}
 801dafe:	4618      	mov	r0, r3
 801db00:	3708      	adds	r7, #8
 801db02:	46bd      	mov	sp, r7
 801db04:	bd80      	pop	{r7, pc}
	...

0801db08 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801db08:	b480      	push	{r7}
 801db0a:	b085      	sub	sp, #20
 801db0c:	af00      	add	r7, sp, #0
 801db0e:	4603      	mov	r3, r0
 801db10:	6039      	str	r1, [r7, #0]
 801db12:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801db14:	88fb      	ldrh	r3, [r7, #6]
 801db16:	2b7f      	cmp	r3, #127	@ 0x7f
 801db18:	d802      	bhi.n	801db20 <ff_convert+0x18>
		c = chr;
 801db1a:	88fb      	ldrh	r3, [r7, #6]
 801db1c:	81fb      	strh	r3, [r7, #14]
 801db1e:	e025      	b.n	801db6c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801db20:	683b      	ldr	r3, [r7, #0]
 801db22:	2b00      	cmp	r3, #0
 801db24:	d00b      	beq.n	801db3e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801db26:	88fb      	ldrh	r3, [r7, #6]
 801db28:	2bff      	cmp	r3, #255	@ 0xff
 801db2a:	d805      	bhi.n	801db38 <ff_convert+0x30>
 801db2c:	88fb      	ldrh	r3, [r7, #6]
 801db2e:	3b80      	subs	r3, #128	@ 0x80
 801db30:	4a12      	ldr	r2, [pc, #72]	@ (801db7c <ff_convert+0x74>)
 801db32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801db36:	e000      	b.n	801db3a <ff_convert+0x32>
 801db38:	2300      	movs	r3, #0
 801db3a:	81fb      	strh	r3, [r7, #14]
 801db3c:	e016      	b.n	801db6c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801db3e:	2300      	movs	r3, #0
 801db40:	81fb      	strh	r3, [r7, #14]
 801db42:	e009      	b.n	801db58 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801db44:	89fb      	ldrh	r3, [r7, #14]
 801db46:	4a0d      	ldr	r2, [pc, #52]	@ (801db7c <ff_convert+0x74>)
 801db48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801db4c:	88fa      	ldrh	r2, [r7, #6]
 801db4e:	429a      	cmp	r2, r3
 801db50:	d006      	beq.n	801db60 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801db52:	89fb      	ldrh	r3, [r7, #14]
 801db54:	3301      	adds	r3, #1
 801db56:	81fb      	strh	r3, [r7, #14]
 801db58:	89fb      	ldrh	r3, [r7, #14]
 801db5a:	2b7f      	cmp	r3, #127	@ 0x7f
 801db5c:	d9f2      	bls.n	801db44 <ff_convert+0x3c>
 801db5e:	e000      	b.n	801db62 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801db60:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801db62:	89fb      	ldrh	r3, [r7, #14]
 801db64:	3380      	adds	r3, #128	@ 0x80
 801db66:	b29b      	uxth	r3, r3
 801db68:	b2db      	uxtb	r3, r3
 801db6a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801db6c:	89fb      	ldrh	r3, [r7, #14]
}
 801db6e:	4618      	mov	r0, r3
 801db70:	3714      	adds	r7, #20
 801db72:	46bd      	mov	sp, r7
 801db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db78:	4770      	bx	lr
 801db7a:	bf00      	nop
 801db7c:	0801e82c 	.word	0x0801e82c

0801db80 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801db80:	b480      	push	{r7}
 801db82:	b087      	sub	sp, #28
 801db84:	af00      	add	r7, sp, #0
 801db86:	4603      	mov	r3, r0
 801db88:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801db8a:	88fb      	ldrh	r3, [r7, #6]
 801db8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801db90:	d201      	bcs.n	801db96 <ff_wtoupper+0x16>
 801db92:	4b3e      	ldr	r3, [pc, #248]	@ (801dc8c <ff_wtoupper+0x10c>)
 801db94:	e000      	b.n	801db98 <ff_wtoupper+0x18>
 801db96:	4b3e      	ldr	r3, [pc, #248]	@ (801dc90 <ff_wtoupper+0x110>)
 801db98:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801db9a:	697b      	ldr	r3, [r7, #20]
 801db9c:	1c9a      	adds	r2, r3, #2
 801db9e:	617a      	str	r2, [r7, #20]
 801dba0:	881b      	ldrh	r3, [r3, #0]
 801dba2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801dba4:	8a7b      	ldrh	r3, [r7, #18]
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	d068      	beq.n	801dc7c <ff_wtoupper+0xfc>
 801dbaa:	88fa      	ldrh	r2, [r7, #6]
 801dbac:	8a7b      	ldrh	r3, [r7, #18]
 801dbae:	429a      	cmp	r2, r3
 801dbb0:	d364      	bcc.n	801dc7c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801dbb2:	697b      	ldr	r3, [r7, #20]
 801dbb4:	1c9a      	adds	r2, r3, #2
 801dbb6:	617a      	str	r2, [r7, #20]
 801dbb8:	881b      	ldrh	r3, [r3, #0]
 801dbba:	823b      	strh	r3, [r7, #16]
 801dbbc:	8a3b      	ldrh	r3, [r7, #16]
 801dbbe:	0a1b      	lsrs	r3, r3, #8
 801dbc0:	81fb      	strh	r3, [r7, #14]
 801dbc2:	8a3b      	ldrh	r3, [r7, #16]
 801dbc4:	b2db      	uxtb	r3, r3
 801dbc6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801dbc8:	88fa      	ldrh	r2, [r7, #6]
 801dbca:	8a79      	ldrh	r1, [r7, #18]
 801dbcc:	8a3b      	ldrh	r3, [r7, #16]
 801dbce:	440b      	add	r3, r1
 801dbd0:	429a      	cmp	r2, r3
 801dbd2:	da49      	bge.n	801dc68 <ff_wtoupper+0xe8>
			switch (cmd) {
 801dbd4:	89fb      	ldrh	r3, [r7, #14]
 801dbd6:	2b08      	cmp	r3, #8
 801dbd8:	d84f      	bhi.n	801dc7a <ff_wtoupper+0xfa>
 801dbda:	a201      	add	r2, pc, #4	@ (adr r2, 801dbe0 <ff_wtoupper+0x60>)
 801dbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dbe0:	0801dc05 	.word	0x0801dc05
 801dbe4:	0801dc17 	.word	0x0801dc17
 801dbe8:	0801dc2d 	.word	0x0801dc2d
 801dbec:	0801dc35 	.word	0x0801dc35
 801dbf0:	0801dc3d 	.word	0x0801dc3d
 801dbf4:	0801dc45 	.word	0x0801dc45
 801dbf8:	0801dc4d 	.word	0x0801dc4d
 801dbfc:	0801dc55 	.word	0x0801dc55
 801dc00:	0801dc5d 	.word	0x0801dc5d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801dc04:	88fa      	ldrh	r2, [r7, #6]
 801dc06:	8a7b      	ldrh	r3, [r7, #18]
 801dc08:	1ad3      	subs	r3, r2, r3
 801dc0a:	005b      	lsls	r3, r3, #1
 801dc0c:	697a      	ldr	r2, [r7, #20]
 801dc0e:	4413      	add	r3, r2
 801dc10:	881b      	ldrh	r3, [r3, #0]
 801dc12:	80fb      	strh	r3, [r7, #6]
 801dc14:	e027      	b.n	801dc66 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801dc16:	88fa      	ldrh	r2, [r7, #6]
 801dc18:	8a7b      	ldrh	r3, [r7, #18]
 801dc1a:	1ad3      	subs	r3, r2, r3
 801dc1c:	b29b      	uxth	r3, r3
 801dc1e:	f003 0301 	and.w	r3, r3, #1
 801dc22:	b29b      	uxth	r3, r3
 801dc24:	88fa      	ldrh	r2, [r7, #6]
 801dc26:	1ad3      	subs	r3, r2, r3
 801dc28:	80fb      	strh	r3, [r7, #6]
 801dc2a:	e01c      	b.n	801dc66 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801dc2c:	88fb      	ldrh	r3, [r7, #6]
 801dc2e:	3b10      	subs	r3, #16
 801dc30:	80fb      	strh	r3, [r7, #6]
 801dc32:	e018      	b.n	801dc66 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801dc34:	88fb      	ldrh	r3, [r7, #6]
 801dc36:	3b20      	subs	r3, #32
 801dc38:	80fb      	strh	r3, [r7, #6]
 801dc3a:	e014      	b.n	801dc66 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801dc3c:	88fb      	ldrh	r3, [r7, #6]
 801dc3e:	3b30      	subs	r3, #48	@ 0x30
 801dc40:	80fb      	strh	r3, [r7, #6]
 801dc42:	e010      	b.n	801dc66 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801dc44:	88fb      	ldrh	r3, [r7, #6]
 801dc46:	3b1a      	subs	r3, #26
 801dc48:	80fb      	strh	r3, [r7, #6]
 801dc4a:	e00c      	b.n	801dc66 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801dc4c:	88fb      	ldrh	r3, [r7, #6]
 801dc4e:	3308      	adds	r3, #8
 801dc50:	80fb      	strh	r3, [r7, #6]
 801dc52:	e008      	b.n	801dc66 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801dc54:	88fb      	ldrh	r3, [r7, #6]
 801dc56:	3b50      	subs	r3, #80	@ 0x50
 801dc58:	80fb      	strh	r3, [r7, #6]
 801dc5a:	e004      	b.n	801dc66 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801dc5c:	88fb      	ldrh	r3, [r7, #6]
 801dc5e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801dc62:	80fb      	strh	r3, [r7, #6]
 801dc64:	bf00      	nop
			}
			break;
 801dc66:	e008      	b.n	801dc7a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801dc68:	89fb      	ldrh	r3, [r7, #14]
 801dc6a:	2b00      	cmp	r3, #0
 801dc6c:	d195      	bne.n	801db9a <ff_wtoupper+0x1a>
 801dc6e:	8a3b      	ldrh	r3, [r7, #16]
 801dc70:	005b      	lsls	r3, r3, #1
 801dc72:	697a      	ldr	r2, [r7, #20]
 801dc74:	4413      	add	r3, r2
 801dc76:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801dc78:	e78f      	b.n	801db9a <ff_wtoupper+0x1a>
			break;
 801dc7a:	bf00      	nop
	}

	return chr;
 801dc7c:	88fb      	ldrh	r3, [r7, #6]
}
 801dc7e:	4618      	mov	r0, r3
 801dc80:	371c      	adds	r7, #28
 801dc82:	46bd      	mov	sp, r7
 801dc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc88:	4770      	bx	lr
 801dc8a:	bf00      	nop
 801dc8c:	0801e92c 	.word	0x0801e92c
 801dc90:	0801eb20 	.word	0x0801eb20

0801dc94 <memset>:
 801dc94:	4402      	add	r2, r0
 801dc96:	4603      	mov	r3, r0
 801dc98:	4293      	cmp	r3, r2
 801dc9a:	d100      	bne.n	801dc9e <memset+0xa>
 801dc9c:	4770      	bx	lr
 801dc9e:	f803 1b01 	strb.w	r1, [r3], #1
 801dca2:	e7f9      	b.n	801dc98 <memset+0x4>

0801dca4 <__errno>:
 801dca4:	4b01      	ldr	r3, [pc, #4]	@ (801dcac <__errno+0x8>)
 801dca6:	6818      	ldr	r0, [r3, #0]
 801dca8:	4770      	bx	lr
 801dcaa:	bf00      	nop
 801dcac:	24000028 	.word	0x24000028

0801dcb0 <__libc_init_array>:
 801dcb0:	b570      	push	{r4, r5, r6, lr}
 801dcb2:	4d0d      	ldr	r5, [pc, #52]	@ (801dce8 <__libc_init_array+0x38>)
 801dcb4:	4c0d      	ldr	r4, [pc, #52]	@ (801dcec <__libc_init_array+0x3c>)
 801dcb6:	1b64      	subs	r4, r4, r5
 801dcb8:	10a4      	asrs	r4, r4, #2
 801dcba:	2600      	movs	r6, #0
 801dcbc:	42a6      	cmp	r6, r4
 801dcbe:	d109      	bne.n	801dcd4 <__libc_init_array+0x24>
 801dcc0:	4d0b      	ldr	r5, [pc, #44]	@ (801dcf0 <__libc_init_array+0x40>)
 801dcc2:	4c0c      	ldr	r4, [pc, #48]	@ (801dcf4 <__libc_init_array+0x44>)
 801dcc4:	f000 fd00 	bl	801e6c8 <_init>
 801dcc8:	1b64      	subs	r4, r4, r5
 801dcca:	10a4      	asrs	r4, r4, #2
 801dccc:	2600      	movs	r6, #0
 801dcce:	42a6      	cmp	r6, r4
 801dcd0:	d105      	bne.n	801dcde <__libc_init_array+0x2e>
 801dcd2:	bd70      	pop	{r4, r5, r6, pc}
 801dcd4:	f855 3b04 	ldr.w	r3, [r5], #4
 801dcd8:	4798      	blx	r3
 801dcda:	3601      	adds	r6, #1
 801dcdc:	e7ee      	b.n	801dcbc <__libc_init_array+0xc>
 801dcde:	f855 3b04 	ldr.w	r3, [r5], #4
 801dce2:	4798      	blx	r3
 801dce4:	3601      	adds	r6, #1
 801dce6:	e7f2      	b.n	801dcce <__libc_init_array+0x1e>
 801dce8:	08020510 	.word	0x08020510
 801dcec:	08020510 	.word	0x08020510
 801dcf0:	08020510 	.word	0x08020510
 801dcf4:	08020514 	.word	0x08020514

0801dcf8 <atan2>:
 801dcf8:	f000 baaa 	b.w	801e250 <__ieee754_atan2>
 801dcfc:	0000      	movs	r0, r0
	...

0801dd00 <sqrt>:
 801dd00:	b508      	push	{r3, lr}
 801dd02:	ed2d 8b04 	vpush	{d8-d9}
 801dd06:	eeb0 8b40 	vmov.f64	d8, d0
 801dd0a:	f000 fa9d 	bl	801e248 <__ieee754_sqrt>
 801dd0e:	eeb4 8b48 	vcmp.f64	d8, d8
 801dd12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd16:	d60c      	bvs.n	801dd32 <sqrt+0x32>
 801dd18:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801dd38 <sqrt+0x38>
 801dd1c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801dd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd24:	d505      	bpl.n	801dd32 <sqrt+0x32>
 801dd26:	f7ff ffbd 	bl	801dca4 <__errno>
 801dd2a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801dd2e:	2321      	movs	r3, #33	@ 0x21
 801dd30:	6003      	str	r3, [r0, #0]
 801dd32:	ecbd 8b04 	vpop	{d8-d9}
 801dd36:	bd08      	pop	{r3, pc}
	...

0801dd40 <checkint>:
 801dd40:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801dd44:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801dd48:	429a      	cmp	r2, r3
 801dd4a:	b570      	push	{r4, r5, r6, lr}
 801dd4c:	dd2a      	ble.n	801dda4 <checkint+0x64>
 801dd4e:	f240 4333 	movw	r3, #1075	@ 0x433
 801dd52:	429a      	cmp	r2, r3
 801dd54:	dc24      	bgt.n	801dda0 <checkint+0x60>
 801dd56:	1a9b      	subs	r3, r3, r2
 801dd58:	f1a3 0620 	sub.w	r6, r3, #32
 801dd5c:	f04f 32ff 	mov.w	r2, #4294967295
 801dd60:	fa02 f403 	lsl.w	r4, r2, r3
 801dd64:	fa02 f606 	lsl.w	r6, r2, r6
 801dd68:	f1c3 0520 	rsb	r5, r3, #32
 801dd6c:	fa22 f505 	lsr.w	r5, r2, r5
 801dd70:	4334      	orrs	r4, r6
 801dd72:	432c      	orrs	r4, r5
 801dd74:	409a      	lsls	r2, r3
 801dd76:	ea20 0202 	bic.w	r2, r0, r2
 801dd7a:	ea21 0404 	bic.w	r4, r1, r4
 801dd7e:	4322      	orrs	r2, r4
 801dd80:	f1a3 0420 	sub.w	r4, r3, #32
 801dd84:	f1c3 0220 	rsb	r2, r3, #32
 801dd88:	d10c      	bne.n	801dda4 <checkint+0x64>
 801dd8a:	40d8      	lsrs	r0, r3
 801dd8c:	fa01 f302 	lsl.w	r3, r1, r2
 801dd90:	4318      	orrs	r0, r3
 801dd92:	40e1      	lsrs	r1, r4
 801dd94:	4308      	orrs	r0, r1
 801dd96:	f000 0001 	and.w	r0, r0, #1
 801dd9a:	f1d0 0002 	rsbs	r0, r0, #2
 801dd9e:	bd70      	pop	{r4, r5, r6, pc}
 801dda0:	2002      	movs	r0, #2
 801dda2:	e7fc      	b.n	801dd9e <checkint+0x5e>
 801dda4:	2000      	movs	r0, #0
 801dda6:	e7fa      	b.n	801dd9e <checkint+0x5e>

0801dda8 <pow>:
 801dda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddac:	ee10 4a90 	vmov	r4, s1
 801ddb0:	ed2d 8b0a 	vpush	{d8-d12}
 801ddb4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801ddb8:	ee11 aa90 	vmov	sl, s3
 801ddbc:	f108 32ff 	add.w	r2, r8, #4294967295
 801ddc0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801ddc4:	429a      	cmp	r2, r3
 801ddc6:	ee10 5a10 	vmov	r5, s0
 801ddca:	ee11 0a10 	vmov	r0, s2
 801ddce:	b087      	sub	sp, #28
 801ddd0:	46c4      	mov	ip, r8
 801ddd2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801ddd6:	d806      	bhi.n	801dde6 <pow+0x3e>
 801ddd8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801dddc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801dde0:	2b7f      	cmp	r3, #127	@ 0x7f
 801dde2:	f240 8157 	bls.w	801e094 <pow+0x2ec>
 801dde6:	1802      	adds	r2, r0, r0
 801dde8:	eb4a 010a 	adc.w	r1, sl, sl
 801ddec:	f06f 0b01 	mvn.w	fp, #1
 801ddf0:	1e57      	subs	r7, r2, #1
 801ddf2:	f141 33ff 	adc.w	r3, r1, #4294967295
 801ddf6:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801ddfa:	45bb      	cmp	fp, r7
 801ddfc:	eb7e 0303 	sbcs.w	r3, lr, r3
 801de00:	d242      	bcs.n	801de88 <pow+0xe0>
 801de02:	ea52 0301 	orrs.w	r3, r2, r1
 801de06:	f04f 0300 	mov.w	r3, #0
 801de0a:	d10c      	bne.n	801de26 <pow+0x7e>
 801de0c:	196d      	adds	r5, r5, r5
 801de0e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801de12:	4164      	adcs	r4, r4
 801de14:	42ab      	cmp	r3, r5
 801de16:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801de1a:	41a3      	sbcs	r3, r4
 801de1c:	f0c0 808f 	bcc.w	801df3e <pow+0x196>
 801de20:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801de24:	e02b      	b.n	801de7e <pow+0xd6>
 801de26:	4ed4      	ldr	r6, [pc, #848]	@ (801e178 <pow+0x3d0>)
 801de28:	42b4      	cmp	r4, r6
 801de2a:	bf08      	it	eq
 801de2c:	429d      	cmpeq	r5, r3
 801de2e:	d109      	bne.n	801de44 <pow+0x9c>
 801de30:	1800      	adds	r0, r0, r0
 801de32:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801de36:	eb4a 0a0a 	adc.w	sl, sl, sl
 801de3a:	4283      	cmp	r3, r0
 801de3c:	4bcf      	ldr	r3, [pc, #828]	@ (801e17c <pow+0x3d4>)
 801de3e:	eb73 030a 	sbcs.w	r3, r3, sl
 801de42:	e7eb      	b.n	801de1c <pow+0x74>
 801de44:	196d      	adds	r5, r5, r5
 801de46:	48ce      	ldr	r0, [pc, #824]	@ (801e180 <pow+0x3d8>)
 801de48:	4164      	adcs	r4, r4
 801de4a:	42ab      	cmp	r3, r5
 801de4c:	eb70 0604 	sbcs.w	r6, r0, r4
 801de50:	d375      	bcc.n	801df3e <pow+0x196>
 801de52:	4281      	cmp	r1, r0
 801de54:	bf08      	it	eq
 801de56:	429a      	cmpeq	r2, r3
 801de58:	d171      	bne.n	801df3e <pow+0x196>
 801de5a:	4aca      	ldr	r2, [pc, #808]	@ (801e184 <pow+0x3dc>)
 801de5c:	4294      	cmp	r4, r2
 801de5e:	bf08      	it	eq
 801de60:	429d      	cmpeq	r5, r3
 801de62:	d0dd      	beq.n	801de20 <pow+0x78>
 801de64:	4294      	cmp	r4, r2
 801de66:	ea6f 0a0a 	mvn.w	sl, sl
 801de6a:	bf34      	ite	cc
 801de6c:	2400      	movcc	r4, #0
 801de6e:	2401      	movcs	r4, #1
 801de70:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801de74:	4554      	cmp	r4, sl
 801de76:	f040 81dc 	bne.w	801e232 <pow+0x48a>
 801de7a:	ee21 0b01 	vmul.f64	d0, d1, d1
 801de7e:	b007      	add	sp, #28
 801de80:	ecbd 8b0a 	vpop	{d8-d12}
 801de84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de88:	196f      	adds	r7, r5, r5
 801de8a:	eb44 0904 	adc.w	r9, r4, r4
 801de8e:	1e7a      	subs	r2, r7, #1
 801de90:	f169 0300 	sbc.w	r3, r9, #0
 801de94:	4593      	cmp	fp, r2
 801de96:	eb7e 0303 	sbcs.w	r3, lr, r3
 801de9a:	d225      	bcs.n	801dee8 <pow+0x140>
 801de9c:	ee20 0b00 	vmul.f64	d0, d0, d0
 801dea0:	2c00      	cmp	r4, #0
 801dea2:	da13      	bge.n	801decc <pow+0x124>
 801dea4:	4651      	mov	r1, sl
 801dea6:	f7ff ff4b 	bl	801dd40 <checkint>
 801deaa:	2801      	cmp	r0, #1
 801deac:	d10e      	bne.n	801decc <pow+0x124>
 801deae:	eeb1 0b40 	vneg.f64	d0, d0
 801deb2:	ea57 0909 	orrs.w	r9, r7, r9
 801deb6:	d10b      	bne.n	801ded0 <pow+0x128>
 801deb8:	f1ba 0f00 	cmp.w	sl, #0
 801debc:	dadf      	bge.n	801de7e <pow+0xd6>
 801debe:	b007      	add	sp, #28
 801dec0:	ecbd 8b0a 	vpop	{d8-d12}
 801dec4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dec8:	f000 bbba 	b.w	801e640 <__math_divzero>
 801decc:	2000      	movs	r0, #0
 801dece:	e7f0      	b.n	801deb2 <pow+0x10a>
 801ded0:	f1ba 0f00 	cmp.w	sl, #0
 801ded4:	dad3      	bge.n	801de7e <pow+0xd6>
 801ded6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801deda:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801dede:	ed8d 7b00 	vstr	d7, [sp]
 801dee2:	ed9d 0b00 	vldr	d0, [sp]
 801dee6:	e7ca      	b.n	801de7e <pow+0xd6>
 801dee8:	2c00      	cmp	r4, #0
 801deea:	da2b      	bge.n	801df44 <pow+0x19c>
 801deec:	4651      	mov	r1, sl
 801deee:	f7ff ff27 	bl	801dd40 <checkint>
 801def2:	b930      	cbnz	r0, 801df02 <pow+0x15a>
 801def4:	b007      	add	sp, #28
 801def6:	ecbd 8b0a 	vpop	{d8-d12}
 801defa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801defe:	f000 bbb7 	b.w	801e670 <__math_invalid>
 801df02:	1e41      	subs	r1, r0, #1
 801df04:	4248      	negs	r0, r1
 801df06:	4148      	adcs	r0, r1
 801df08:	0480      	lsls	r0, r0, #18
 801df0a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801df0e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801df12:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801df16:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801df1a:	2b7f      	cmp	r3, #127	@ 0x7f
 801df1c:	d92d      	bls.n	801df7a <pow+0x1d2>
 801df1e:	4b96      	ldr	r3, [pc, #600]	@ (801e178 <pow+0x3d0>)
 801df20:	2000      	movs	r0, #0
 801df22:	429c      	cmp	r4, r3
 801df24:	bf08      	it	eq
 801df26:	4285      	cmpeq	r5, r0
 801df28:	f43f af7a 	beq.w	801de20 <pow+0x78>
 801df2c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801df30:	428a      	cmp	r2, r1
 801df32:	d80c      	bhi.n	801df4e <pow+0x1a6>
 801df34:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801df38:	42a8      	cmp	r0, r5
 801df3a:	41a3      	sbcs	r3, r4
 801df3c:	d204      	bcs.n	801df48 <pow+0x1a0>
 801df3e:	ee31 0b00 	vadd.f64	d0, d1, d0
 801df42:	e79c      	b.n	801de7e <pow+0xd6>
 801df44:	2000      	movs	r0, #0
 801df46:	e7e4      	b.n	801df12 <pow+0x16a>
 801df48:	ee30 0b41 	vsub.f64	d0, d0, d1
 801df4c:	e797      	b.n	801de7e <pow+0xd6>
 801df4e:	2d01      	cmp	r5, #1
 801df50:	eb74 0303 	sbcs.w	r3, r4, r3
 801df54:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801df58:	bf34      	ite	cc
 801df5a:	2301      	movcc	r3, #1
 801df5c:	2300      	movcs	r3, #0
 801df5e:	4296      	cmp	r6, r2
 801df60:	bf8c      	ite	hi
 801df62:	2600      	movhi	r6, #0
 801df64:	2601      	movls	r6, #1
 801df66:	42b3      	cmp	r3, r6
 801df68:	f000 809c 	beq.w	801e0a4 <pow+0x2fc>
 801df6c:	b007      	add	sp, #28
 801df6e:	ecbd 8b0a 	vpop	{d8-d12}
 801df72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df76:	f000 bb5b 	b.w	801e630 <__math_oflow>
 801df7a:	f1bc 0f00 	cmp.w	ip, #0
 801df7e:	d10a      	bne.n	801df96 <pow+0x1ee>
 801df80:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801e168 <pow+0x3c0>
 801df84:	ee20 7b07 	vmul.f64	d7, d0, d7
 801df88:	ec53 2b17 	vmov	r2, r3, d7
 801df8c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801df90:	4615      	mov	r5, r2
 801df92:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801df96:	4a7c      	ldr	r2, [pc, #496]	@ (801e188 <pow+0x3e0>)
 801df98:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801df9c:	4422      	add	r2, r4
 801df9e:	1513      	asrs	r3, r2, #20
 801dfa0:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801dfa4:	ee03 3a10 	vmov	s6, r3
 801dfa8:	0d12      	lsrs	r2, r2, #20
 801dfaa:	4b78      	ldr	r3, [pc, #480]	@ (801e18c <pow+0x3e4>)
 801dfac:	0512      	lsls	r2, r2, #20
 801dfae:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801dfb2:	1aa7      	subs	r7, r4, r2
 801dfb4:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801dfb8:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801dfbc:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801dfc0:	1e2e      	subs	r6, r5, #0
 801dfc2:	ec47 6b14 	vmov	d4, r6, r7
 801dfc6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801dfca:	eea4 6b05 	vfma.f64	d6, d4, d5
 801dfce:	ed93 5b00 	vldr	d5, [r3]
 801dfd2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801dfd6:	eea3 2b05 	vfma.f64	d2, d3, d5
 801dfda:	ed93 5b02 	vldr	d5, [r3, #8]
 801dfde:	ee36 4b02 	vadd.f64	d4, d6, d2
 801dfe2:	ee32 2b44 	vsub.f64	d2, d2, d4
 801dfe6:	eea3 7b05 	vfma.f64	d7, d3, d5
 801dfea:	ed93 5b04 	vldr	d5, [r3, #16]
 801dfee:	ee32 2b06 	vadd.f64	d2, d2, d6
 801dff2:	ee37 7b02 	vadd.f64	d7, d7, d2
 801dff6:	ee26 5b05 	vmul.f64	d5, d6, d5
 801dffa:	ee26 0b05 	vmul.f64	d0, d6, d5
 801dffe:	ee34 8b00 	vadd.f64	d8, d4, d0
 801e002:	eeb0 9b40 	vmov.f64	d9, d0
 801e006:	ee34 4b48 	vsub.f64	d4, d4, d8
 801e00a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801e00e:	ee34 ab00 	vadd.f64	d10, d4, d0
 801e012:	ed93 5b06 	vldr	d5, [r3, #24]
 801e016:	ee26 bb00 	vmul.f64	d11, d6, d0
 801e01a:	ee37 7b09 	vadd.f64	d7, d7, d9
 801e01e:	ed93 4b08 	vldr	d4, [r3, #32]
 801e022:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801e026:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801e02a:	eea6 5b04 	vfma.f64	d5, d6, d4
 801e02e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801e032:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801e036:	eea6 4b03 	vfma.f64	d4, d6, d3
 801e03a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801e03e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801e042:	eea0 4b03 	vfma.f64	d4, d0, d3
 801e046:	eea0 5b04 	vfma.f64	d5, d0, d4
 801e04a:	eeab 7b05 	vfma.f64	d7, d11, d5
 801e04e:	ee38 4b07 	vadd.f64	d4, d8, d7
 801e052:	ee21 6b04 	vmul.f64	d6, d1, d4
 801e056:	ee16 3a90 	vmov	r3, s13
 801e05a:	eeb0 5b46 	vmov.f64	d5, d6
 801e05e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801e062:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801e066:	18b2      	adds	r2, r6, r2
 801e068:	2a3e      	cmp	r2, #62	@ 0x3e
 801e06a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801e06e:	ee38 8b44 	vsub.f64	d8, d8, d4
 801e072:	ee38 8b07 	vadd.f64	d8, d8, d7
 801e076:	eea1 5b08 	vfma.f64	d5, d1, d8
 801e07a:	d91b      	bls.n	801e0b4 <pow+0x30c>
 801e07c:	2a00      	cmp	r2, #0
 801e07e:	da0b      	bge.n	801e098 <pow+0x2f0>
 801e080:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e084:	ee36 0b00 	vadd.f64	d0, d6, d0
 801e088:	2800      	cmp	r0, #0
 801e08a:	f43f aef8 	beq.w	801de7e <pow+0xd6>
 801e08e:	eeb1 0b40 	vneg.f64	d0, d0
 801e092:	e6f4      	b.n	801de7e <pow+0xd6>
 801e094:	2000      	movs	r0, #0
 801e096:	e77e      	b.n	801df96 <pow+0x1ee>
 801e098:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801e09c:	d909      	bls.n	801e0b2 <pow+0x30a>
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	f6bf af64 	bge.w	801df6c <pow+0x1c4>
 801e0a4:	b007      	add	sp, #28
 801e0a6:	ecbd 8b0a 	vpop	{d8-d12}
 801e0aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0ae:	f000 bab7 	b.w	801e620 <__math_uflow>
 801e0b2:	2600      	movs	r6, #0
 801e0b4:	4936      	ldr	r1, [pc, #216]	@ (801e190 <pow+0x3e8>)
 801e0b6:	ed91 4b02 	vldr	d4, [r1, #8]
 801e0ba:	ed91 3b00 	vldr	d3, [r1]
 801e0be:	eeb0 7b44 	vmov.f64	d7, d4
 801e0c2:	eea6 7b03 	vfma.f64	d7, d6, d3
 801e0c6:	ee17 5a10 	vmov	r5, s14
 801e0ca:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e0ce:	ed91 4b04 	vldr	d4, [r1, #16]
 801e0d2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801e0d6:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e0da:	ed91 4b06 	vldr	d4, [r1, #24]
 801e0de:	18dc      	adds	r4, r3, r3
 801e0e0:	f104 030f 	add.w	r3, r4, #15
 801e0e4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801e0e8:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e0ec:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801e0f0:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e0f4:	ee25 6b05 	vmul.f64	d6, d5, d5
 801e0f8:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801e0fc:	ed91 4b08 	vldr	d4, [r1, #32]
 801e100:	ee35 7b07 	vadd.f64	d7, d5, d7
 801e104:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801e108:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e10c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801e110:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e114:	ee26 6b06 	vmul.f64	d6, d6, d6
 801e118:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801e11c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801e120:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801e124:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e128:	1940      	adds	r0, r0, r5
 801e12a:	2700      	movs	r7, #0
 801e12c:	eb17 020c 	adds.w	r2, r7, ip
 801e130:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801e134:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e138:	2e00      	cmp	r6, #0
 801e13a:	d175      	bne.n	801e228 <pow+0x480>
 801e13c:	42bd      	cmp	r5, r7
 801e13e:	db29      	blt.n	801e194 <pow+0x3ec>
 801e140:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801e144:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801e148:	4610      	mov	r0, r2
 801e14a:	ec41 0b10 	vmov	d0, r0, r1
 801e14e:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e152:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801e170 <pow+0x3c8>
 801e156:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e15a:	b007      	add	sp, #28
 801e15c:	ecbd 8b0a 	vpop	{d8-d12}
 801e160:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e164:	f000 ba9c 	b.w	801e6a0 <__math_check_oflow>
 801e168:	00000000 	.word	0x00000000
 801e16c:	43300000 	.word	0x43300000
 801e170:	00000000 	.word	0x00000000
 801e174:	7f000000 	.word	0x7f000000
 801e178:	3ff00000 	.word	0x3ff00000
 801e17c:	fff00000 	.word	0xfff00000
 801e180:	ffe00000 	.word	0xffe00000
 801e184:	7fe00000 	.word	0x7fe00000
 801e188:	c0196aab 	.word	0xc0196aab
 801e18c:	0801ebe0 	.word	0x0801ebe0
 801e190:	0801fc98 	.word	0x0801fc98
 801e194:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801e198:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801e19c:	4610      	mov	r0, r2
 801e19e:	ec41 0b15 	vmov	d5, r0, r1
 801e1a2:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801e1a6:	ee27 6b05 	vmul.f64	d6, d7, d5
 801e1aa:	ee35 7b06 	vadd.f64	d7, d5, d6
 801e1ae:	eeb0 4bc7 	vabs.f64	d4, d7
 801e1b2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801e1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1ba:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801e238 <pow+0x490>
 801e1be:	d52a      	bpl.n	801e216 <pow+0x46e>
 801e1c0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e1c4:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1cc:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e1d0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801e1d4:	bf58      	it	pl
 801e1d6:	eeb0 4b43 	vmovpl.f64	d4, d3
 801e1da:	ee37 3b04 	vadd.f64	d3, d7, d4
 801e1de:	ee34 6b43 	vsub.f64	d6, d4, d3
 801e1e2:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e1e6:	ee36 6b05 	vadd.f64	d6, d6, d5
 801e1ea:	ee36 6b03 	vadd.f64	d6, d6, d3
 801e1ee:	ee36 7b44 	vsub.f64	d7, d6, d4
 801e1f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1fa:	d104      	bne.n	801e206 <pow+0x45e>
 801e1fc:	4632      	mov	r2, r6
 801e1fe:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801e202:	ec43 2b17 	vmov	d7, r2, r3
 801e206:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e20a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e20e:	ee26 6b00 	vmul.f64	d6, d6, d0
 801e212:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e216:	ee27 0b00 	vmul.f64	d0, d7, d0
 801e21a:	b007      	add	sp, #28
 801e21c:	ecbd 8b0a 	vpop	{d8-d12}
 801e220:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e224:	f000 ba33 	b.w	801e68e <__math_check_uflow>
 801e228:	ec43 2b10 	vmov	d0, r2, r3
 801e22c:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e230:	e625      	b.n	801de7e <pow+0xd6>
 801e232:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801e240 <pow+0x498>
 801e236:	e622      	b.n	801de7e <pow+0xd6>
 801e238:	00000000 	.word	0x00000000
 801e23c:	00100000 	.word	0x00100000
	...

0801e248 <__ieee754_sqrt>:
 801e248:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801e24c:	4770      	bx	lr
	...

0801e250 <__ieee754_atan2>:
 801e250:	ee11 1a10 	vmov	r1, s2
 801e254:	eeb0 7b40 	vmov.f64	d7, d0
 801e258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e25a:	ee11 5a90 	vmov	r5, s3
 801e25e:	424b      	negs	r3, r1
 801e260:	4f59      	ldr	r7, [pc, #356]	@ (801e3c8 <__ieee754_atan2+0x178>)
 801e262:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801e266:	430b      	orrs	r3, r1
 801e268:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801e26c:	42bb      	cmp	r3, r7
 801e26e:	d80d      	bhi.n	801e28c <__ieee754_atan2+0x3c>
 801e270:	ee10 ca10 	vmov	ip, s0
 801e274:	ee17 6a90 	vmov	r6, s15
 801e278:	f1cc 0000 	rsb	r0, ip, #0
 801e27c:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801e280:	ea40 000c 	orr.w	r0, r0, ip
 801e284:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801e288:	42b8      	cmp	r0, r7
 801e28a:	d904      	bls.n	801e296 <__ieee754_atan2+0x46>
 801e28c:	ee37 7b01 	vadd.f64	d7, d7, d1
 801e290:	eeb0 0b47 	vmov.f64	d0, d7
 801e294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e296:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801e29a:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801e29e:	4308      	orrs	r0, r1
 801e2a0:	d103      	bne.n	801e2aa <__ieee754_atan2+0x5a>
 801e2a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e2a6:	f000 b897 	b.w	801e3d8 <atan>
 801e2aa:	17ac      	asrs	r4, r5, #30
 801e2ac:	f004 0402 	and.w	r4, r4, #2
 801e2b0:	ea53 0c0c 	orrs.w	ip, r3, ip
 801e2b4:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801e2b8:	d107      	bne.n	801e2ca <__ieee754_atan2+0x7a>
 801e2ba:	2c02      	cmp	r4, #2
 801e2bc:	d05c      	beq.n	801e378 <__ieee754_atan2+0x128>
 801e2be:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801e390 <__ieee754_atan2+0x140>
 801e2c2:	2c03      	cmp	r4, #3
 801e2c4:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801e2c8:	e7e2      	b.n	801e290 <__ieee754_atan2+0x40>
 801e2ca:	4311      	orrs	r1, r2
 801e2cc:	d107      	bne.n	801e2de <__ieee754_atan2+0x8e>
 801e2ce:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801e398 <__ieee754_atan2+0x148>
 801e2d2:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801e3a0 <__ieee754_atan2+0x150>
 801e2d6:	2e00      	cmp	r6, #0
 801e2d8:	fe27 7b06 	vselge.f64	d7, d7, d6
 801e2dc:	e7d8      	b.n	801e290 <__ieee754_atan2+0x40>
 801e2de:	42ba      	cmp	r2, r7
 801e2e0:	d10f      	bne.n	801e302 <__ieee754_atan2+0xb2>
 801e2e2:	4293      	cmp	r3, r2
 801e2e4:	f104 34ff 	add.w	r4, r4, #4294967295
 801e2e8:	d107      	bne.n	801e2fa <__ieee754_atan2+0xaa>
 801e2ea:	2c02      	cmp	r4, #2
 801e2ec:	d847      	bhi.n	801e37e <__ieee754_atan2+0x12e>
 801e2ee:	4b37      	ldr	r3, [pc, #220]	@ (801e3cc <__ieee754_atan2+0x17c>)
 801e2f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e2f4:	ed93 7b00 	vldr	d7, [r3]
 801e2f8:	e7ca      	b.n	801e290 <__ieee754_atan2+0x40>
 801e2fa:	2c02      	cmp	r4, #2
 801e2fc:	d842      	bhi.n	801e384 <__ieee754_atan2+0x134>
 801e2fe:	4b34      	ldr	r3, [pc, #208]	@ (801e3d0 <__ieee754_atan2+0x180>)
 801e300:	e7f6      	b.n	801e2f0 <__ieee754_atan2+0xa0>
 801e302:	42bb      	cmp	r3, r7
 801e304:	d0e3      	beq.n	801e2ce <__ieee754_atan2+0x7e>
 801e306:	1a9b      	subs	r3, r3, r2
 801e308:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801e30c:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e310:	da1a      	bge.n	801e348 <__ieee754_atan2+0xf8>
 801e312:	2d00      	cmp	r5, #0
 801e314:	da01      	bge.n	801e31a <__ieee754_atan2+0xca>
 801e316:	323c      	adds	r2, #60	@ 0x3c
 801e318:	db19      	blt.n	801e34e <__ieee754_atan2+0xfe>
 801e31a:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801e31e:	f000 f955 	bl	801e5cc <fabs>
 801e322:	f000 f859 	bl	801e3d8 <atan>
 801e326:	eeb0 7b40 	vmov.f64	d7, d0
 801e32a:	2c01      	cmp	r4, #1
 801e32c:	d012      	beq.n	801e354 <__ieee754_atan2+0x104>
 801e32e:	2c02      	cmp	r4, #2
 801e330:	d019      	beq.n	801e366 <__ieee754_atan2+0x116>
 801e332:	2c00      	cmp	r4, #0
 801e334:	d0ac      	beq.n	801e290 <__ieee754_atan2+0x40>
 801e336:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e3a8 <__ieee754_atan2+0x158>
 801e33a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e33e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e3b0 <__ieee754_atan2+0x160>
 801e342:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e346:	e7a3      	b.n	801e290 <__ieee754_atan2+0x40>
 801e348:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801e398 <__ieee754_atan2+0x148>
 801e34c:	e7ed      	b.n	801e32a <__ieee754_atan2+0xda>
 801e34e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801e3b8 <__ieee754_atan2+0x168>
 801e352:	e7ea      	b.n	801e32a <__ieee754_atan2+0xda>
 801e354:	ee17 1a90 	vmov	r1, s15
 801e358:	ec53 2b17 	vmov	r2, r3, d7
 801e35c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e360:	ec43 2b17 	vmov	d7, r2, r3
 801e364:	e794      	b.n	801e290 <__ieee754_atan2+0x40>
 801e366:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e3a8 <__ieee754_atan2+0x158>
 801e36a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e36e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e3b0 <__ieee754_atan2+0x160>
 801e372:	ee36 7b47 	vsub.f64	d7, d6, d7
 801e376:	e78b      	b.n	801e290 <__ieee754_atan2+0x40>
 801e378:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801e3b0 <__ieee754_atan2+0x160>
 801e37c:	e788      	b.n	801e290 <__ieee754_atan2+0x40>
 801e37e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801e3c0 <__ieee754_atan2+0x170>
 801e382:	e785      	b.n	801e290 <__ieee754_atan2+0x40>
 801e384:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801e3b8 <__ieee754_atan2+0x168>
 801e388:	e782      	b.n	801e290 <__ieee754_atan2+0x40>
 801e38a:	bf00      	nop
 801e38c:	f3af 8000 	nop.w
 801e390:	54442d18 	.word	0x54442d18
 801e394:	c00921fb 	.word	0xc00921fb
 801e398:	54442d18 	.word	0x54442d18
 801e39c:	3ff921fb 	.word	0x3ff921fb
 801e3a0:	54442d18 	.word	0x54442d18
 801e3a4:	bff921fb 	.word	0xbff921fb
 801e3a8:	33145c07 	.word	0x33145c07
 801e3ac:	3ca1a626 	.word	0x3ca1a626
 801e3b0:	54442d18 	.word	0x54442d18
 801e3b4:	400921fb 	.word	0x400921fb
	...
 801e3c0:	54442d18 	.word	0x54442d18
 801e3c4:	3fe921fb 	.word	0x3fe921fb
 801e3c8:	7ff00000 	.word	0x7ff00000
 801e3cc:	0801fc40 	.word	0x0801fc40
 801e3d0:	0801fc28 	.word	0x0801fc28
 801e3d4:	00000000 	.word	0x00000000

0801e3d8 <atan>:
 801e3d8:	b538      	push	{r3, r4, r5, lr}
 801e3da:	eeb0 7b40 	vmov.f64	d7, d0
 801e3de:	ee17 5a90 	vmov	r5, s15
 801e3e2:	4b73      	ldr	r3, [pc, #460]	@ (801e5b0 <atan+0x1d8>)
 801e3e4:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801e3e8:	429c      	cmp	r4, r3
 801e3ea:	d913      	bls.n	801e414 <atan+0x3c>
 801e3ec:	4b71      	ldr	r3, [pc, #452]	@ (801e5b4 <atan+0x1dc>)
 801e3ee:	429c      	cmp	r4, r3
 801e3f0:	d803      	bhi.n	801e3fa <atan+0x22>
 801e3f2:	d107      	bne.n	801e404 <atan+0x2c>
 801e3f4:	ee10 3a10 	vmov	r3, s0
 801e3f8:	b123      	cbz	r3, 801e404 <atan+0x2c>
 801e3fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e3fe:	eeb0 0b47 	vmov.f64	d0, d7
 801e402:	bd38      	pop	{r3, r4, r5, pc}
 801e404:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801e540 <atan+0x168>
 801e408:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801e548 <atan+0x170>
 801e40c:	2d00      	cmp	r5, #0
 801e40e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801e412:	e7f4      	b.n	801e3fe <atan+0x26>
 801e414:	4b68      	ldr	r3, [pc, #416]	@ (801e5b8 <atan+0x1e0>)
 801e416:	429c      	cmp	r4, r3
 801e418:	d811      	bhi.n	801e43e <atan+0x66>
 801e41a:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e41e:	429c      	cmp	r4, r3
 801e420:	d80a      	bhi.n	801e438 <atan+0x60>
 801e422:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801e426:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801e550 <atan+0x178>
 801e42a:	ee30 6b06 	vadd.f64	d6, d0, d6
 801e42e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801e432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e436:	dce2      	bgt.n	801e3fe <atan+0x26>
 801e438:	f04f 33ff 	mov.w	r3, #4294967295
 801e43c:	e013      	b.n	801e466 <atan+0x8e>
 801e43e:	f000 f8c5 	bl	801e5cc <fabs>
 801e442:	4b5e      	ldr	r3, [pc, #376]	@ (801e5bc <atan+0x1e4>)
 801e444:	429c      	cmp	r4, r3
 801e446:	d84f      	bhi.n	801e4e8 <atan+0x110>
 801e448:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e44c:	429c      	cmp	r4, r3
 801e44e:	d841      	bhi.n	801e4d4 <atan+0xfc>
 801e450:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801e454:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801e458:	2300      	movs	r3, #0
 801e45a:	eea0 5b07 	vfma.f64	d5, d0, d7
 801e45e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e462:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e466:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e558 <atan+0x180>
 801e46a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801e46e:	ee24 5b04 	vmul.f64	d5, d4, d4
 801e472:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e560 <atan+0x188>
 801e476:	eea5 3b06 	vfma.f64	d3, d5, d6
 801e47a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e568 <atan+0x190>
 801e47e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e482:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e570 <atan+0x198>
 801e486:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e48a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e578 <atan+0x1a0>
 801e48e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e492:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e580 <atan+0x1a8>
 801e496:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e588 <atan+0x1b0>
 801e49a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e49e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e590 <atan+0x1b8>
 801e4a2:	eea5 2b06 	vfma.f64	d2, d5, d6
 801e4a6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e598 <atan+0x1c0>
 801e4aa:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e4ae:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e5a0 <atan+0x1c8>
 801e4b2:	eea6 2b05 	vfma.f64	d2, d6, d5
 801e4b6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e5a8 <atan+0x1d0>
 801e4ba:	1c5a      	adds	r2, r3, #1
 801e4bc:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e4c0:	ee26 6b05 	vmul.f64	d6, d6, d5
 801e4c4:	eea3 6b04 	vfma.f64	d6, d3, d4
 801e4c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e4cc:	d121      	bne.n	801e512 <atan+0x13a>
 801e4ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e4d2:	e794      	b.n	801e3fe <atan+0x26>
 801e4d4:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e4d8:	2301      	movs	r3, #1
 801e4da:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e4de:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e4e2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e4e6:	e7be      	b.n	801e466 <atan+0x8e>
 801e4e8:	4b35      	ldr	r3, [pc, #212]	@ (801e5c0 <atan+0x1e8>)
 801e4ea:	429c      	cmp	r4, r3
 801e4ec:	d20b      	bcs.n	801e506 <atan+0x12e>
 801e4ee:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801e4f2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e4f6:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e4fa:	eea0 6b07 	vfma.f64	d6, d0, d7
 801e4fe:	2302      	movs	r3, #2
 801e500:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e504:	e7af      	b.n	801e466 <atan+0x8e>
 801e506:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e50a:	2303      	movs	r3, #3
 801e50c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e510:	e7a9      	b.n	801e466 <atan+0x8e>
 801e512:	4a2c      	ldr	r2, [pc, #176]	@ (801e5c4 <atan+0x1ec>)
 801e514:	492c      	ldr	r1, [pc, #176]	@ (801e5c8 <atan+0x1f0>)
 801e516:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801e51a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e51e:	ed93 5b00 	vldr	d5, [r3]
 801e522:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e526:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e52a:	ed92 7b00 	vldr	d7, [r2]
 801e52e:	2d00      	cmp	r5, #0
 801e530:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e534:	bfb8      	it	lt
 801e536:	eeb1 7b47 	vneglt.f64	d7, d7
 801e53a:	e760      	b.n	801e3fe <atan+0x26>
 801e53c:	f3af 8000 	nop.w
 801e540:	54442d18 	.word	0x54442d18
 801e544:	bff921fb 	.word	0xbff921fb
 801e548:	54442d18 	.word	0x54442d18
 801e54c:	3ff921fb 	.word	0x3ff921fb
 801e550:	8800759c 	.word	0x8800759c
 801e554:	7e37e43c 	.word	0x7e37e43c
 801e558:	e322da11 	.word	0xe322da11
 801e55c:	3f90ad3a 	.word	0x3f90ad3a
 801e560:	24760deb 	.word	0x24760deb
 801e564:	3fa97b4b 	.word	0x3fa97b4b
 801e568:	a0d03d51 	.word	0xa0d03d51
 801e56c:	3fb10d66 	.word	0x3fb10d66
 801e570:	c54c206e 	.word	0xc54c206e
 801e574:	3fb745cd 	.word	0x3fb745cd
 801e578:	920083ff 	.word	0x920083ff
 801e57c:	3fc24924 	.word	0x3fc24924
 801e580:	5555550d 	.word	0x5555550d
 801e584:	3fd55555 	.word	0x3fd55555
 801e588:	52defd9a 	.word	0x52defd9a
 801e58c:	bfadde2d 	.word	0xbfadde2d
 801e590:	2c6a6c2f 	.word	0x2c6a6c2f
 801e594:	bfa2b444 	.word	0xbfa2b444
 801e598:	af749a6d 	.word	0xaf749a6d
 801e59c:	bfb3b0f2 	.word	0xbfb3b0f2
 801e5a0:	fe231671 	.word	0xfe231671
 801e5a4:	bfbc71c6 	.word	0xbfbc71c6
 801e5a8:	9998ebc4 	.word	0x9998ebc4
 801e5ac:	bfc99999 	.word	0xbfc99999
 801e5b0:	440fffff 	.word	0x440fffff
 801e5b4:	7ff00000 	.word	0x7ff00000
 801e5b8:	3fdbffff 	.word	0x3fdbffff
 801e5bc:	3ff2ffff 	.word	0x3ff2ffff
 801e5c0:	40038000 	.word	0x40038000
 801e5c4:	0801fc78 	.word	0x0801fc78
 801e5c8:	0801fc58 	.word	0x0801fc58

0801e5cc <fabs>:
 801e5cc:	ec51 0b10 	vmov	r0, r1, d0
 801e5d0:	4602      	mov	r2, r0
 801e5d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e5d6:	ec43 2b10 	vmov	d0, r2, r3
 801e5da:	4770      	bx	lr

0801e5dc <with_errno>:
 801e5dc:	b510      	push	{r4, lr}
 801e5de:	ed2d 8b02 	vpush	{d8}
 801e5e2:	eeb0 8b40 	vmov.f64	d8, d0
 801e5e6:	4604      	mov	r4, r0
 801e5e8:	f7ff fb5c 	bl	801dca4 <__errno>
 801e5ec:	eeb0 0b48 	vmov.f64	d0, d8
 801e5f0:	ecbd 8b02 	vpop	{d8}
 801e5f4:	6004      	str	r4, [r0, #0]
 801e5f6:	bd10      	pop	{r4, pc}

0801e5f8 <xflow>:
 801e5f8:	b082      	sub	sp, #8
 801e5fa:	b158      	cbz	r0, 801e614 <xflow+0x1c>
 801e5fc:	eeb1 7b40 	vneg.f64	d7, d0
 801e600:	ed8d 7b00 	vstr	d7, [sp]
 801e604:	ed9d 7b00 	vldr	d7, [sp]
 801e608:	2022      	movs	r0, #34	@ 0x22
 801e60a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e60e:	b002      	add	sp, #8
 801e610:	f7ff bfe4 	b.w	801e5dc <with_errno>
 801e614:	eeb0 7b40 	vmov.f64	d7, d0
 801e618:	e7f2      	b.n	801e600 <xflow+0x8>
 801e61a:	0000      	movs	r0, r0
 801e61c:	0000      	movs	r0, r0
	...

0801e620 <__math_uflow>:
 801e620:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e628 <__math_uflow+0x8>
 801e624:	f7ff bfe8 	b.w	801e5f8 <xflow>
 801e628:	00000000 	.word	0x00000000
 801e62c:	10000000 	.word	0x10000000

0801e630 <__math_oflow>:
 801e630:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e638 <__math_oflow+0x8>
 801e634:	f7ff bfe0 	b.w	801e5f8 <xflow>
 801e638:	00000000 	.word	0x00000000
 801e63c:	70000000 	.word	0x70000000

0801e640 <__math_divzero>:
 801e640:	b082      	sub	sp, #8
 801e642:	2800      	cmp	r0, #0
 801e644:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e648:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e64c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801e650:	ed8d 7b00 	vstr	d7, [sp]
 801e654:	ed9d 0b00 	vldr	d0, [sp]
 801e658:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801e668 <__math_divzero+0x28>
 801e65c:	2022      	movs	r0, #34	@ 0x22
 801e65e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801e662:	b002      	add	sp, #8
 801e664:	f7ff bfba 	b.w	801e5dc <with_errno>
	...

0801e670 <__math_invalid>:
 801e670:	eeb0 7b40 	vmov.f64	d7, d0
 801e674:	eeb4 7b47 	vcmp.f64	d7, d7
 801e678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e67c:	ee30 6b40 	vsub.f64	d6, d0, d0
 801e680:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801e684:	d602      	bvs.n	801e68c <__math_invalid+0x1c>
 801e686:	2021      	movs	r0, #33	@ 0x21
 801e688:	f7ff bfa8 	b.w	801e5dc <with_errno>
 801e68c:	4770      	bx	lr

0801e68e <__math_check_uflow>:
 801e68e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e696:	d102      	bne.n	801e69e <__math_check_uflow+0x10>
 801e698:	2022      	movs	r0, #34	@ 0x22
 801e69a:	f7ff bf9f 	b.w	801e5dc <with_errno>
 801e69e:	4770      	bx	lr

0801e6a0 <__math_check_oflow>:
 801e6a0:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801e6c0 <__math_check_oflow+0x20>
 801e6a4:	eeb0 7bc0 	vabs.f64	d7, d0
 801e6a8:	eeb4 7b46 	vcmp.f64	d7, d6
 801e6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6b0:	dd02      	ble.n	801e6b8 <__math_check_oflow+0x18>
 801e6b2:	2022      	movs	r0, #34	@ 0x22
 801e6b4:	f7ff bf92 	b.w	801e5dc <with_errno>
 801e6b8:	4770      	bx	lr
 801e6ba:	bf00      	nop
 801e6bc:	f3af 8000 	nop.w
 801e6c0:	ffffffff 	.word	0xffffffff
 801e6c4:	7fefffff 	.word	0x7fefffff

0801e6c8 <_init>:
 801e6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6ca:	bf00      	nop
 801e6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e6ce:	bc08      	pop	{r3}
 801e6d0:	469e      	mov	lr, r3
 801e6d2:	4770      	bx	lr

0801e6d4 <_fini>:
 801e6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6d6:	bf00      	nop
 801e6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e6da:	bc08      	pop	{r3}
 801e6dc:	469e      	mov	lr, r3
 801e6de:	4770      	bx	lr
