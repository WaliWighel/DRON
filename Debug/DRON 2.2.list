
DRON 2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e718  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001df8  0801e9e8  0801e9e8  000249e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080207e0  080207e0  000267e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080207e8  080207e8  000267e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080207ec  080207ec  000267ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  080207f0  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000078  08020868  00027078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  08020868  000278ac  2**0
                  ALLOC
  9 .IRAM         000041fe  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  00049710  2**0
                  CONTENTS
 11 .RAM1         00021860  24000eb0  24000eb0  00027eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00049710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031ed1  00000000  00000000  0004973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ee5  00000000  00000000  0007b60f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002460  00000000  00000000  000814f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c2d  00000000  00000000  00083958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c9b4  00000000  00000000  00085585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038819  00000000  00000000  000c1f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e1b5  00000000  00000000  000fa752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00268907  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f44  00000000  00000000  0026894c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00272890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e9d0 	.word	0x0801e9d0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801e9d0 	.word	0x0801e9d0

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:

static I2C_HandleTypeDef *hi2c_BMP180;
extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00e fa8a 	bl	800ebd4 <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <BMP180_init+0x38>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	BMP180_read_calliberation_data();
 80006de:	f000 f8dd 	bl	800089c <BMP180_read_calliberation_data>

	uint8_t status = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 80006e6:	f7ff ffdb 	bl	80006a0 <BMP180_read_ID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b55      	cmp	r3, #85	@ 0x55
 80006f2:	d002      	beq.n	80006fa <BMP180_init+0x2a>
		status = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <BMP180_init+0x2e>
	}
	else{
		status = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000094 	.word	0x24000094

0800070c <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <BMP180_READ_temp+0x3c>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	22f6      	movs	r2, #246	@ 0xf6
 8000726:	21ee      	movs	r1, #238	@ 0xee
 8000728:	f00e fa54 	bl	800ebd4 <HAL_I2C_Mem_Read>
	UT = ((data[0]<<8) | data[1]);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	797a      	ldrb	r2, [r7, #5]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <BMP180_READ_temp+0x40>)
 8000736:	6013      	str	r3, [r2, #0]
	return UT;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <BMP180_READ_temp+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000094 	.word	0x24000094
 800074c:	000000c0 	.word	0x000000c0

08000750 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_pres+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2303      	movs	r3, #3
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	22f6      	movs	r2, #246	@ 0xf6
 800076c:	21ee      	movs	r1, #238	@ 0xee
 800076e:	f00e fa31 	bl	800ebd4 <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4313      	orrs	r3, r2
 8000780:	115b      	asrs	r3, r3, #5
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000094 	.word	0x24000094

08000790 <BMP180_GET_temp_IT>:
void BMP180_READ_pres_IT(void){
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180_Press_IT, 3);
	BMP180_IRQ = 2;
}

uint16_t BMP180_GET_temp_IT(void){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	UT = ((BMP180_Temp_IT[0]<<8) | BMP180_Temp_IT[1]);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 800079c:	7852      	ldrb	r2, [r2, #1]
 800079e:	4313      	orrs	r3, r2
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a2:	6013      	str	r3, [r2, #0]
	return UT;
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	000000f0 	.word	0x000000f0
 80007b8:	000000c0 	.word	0x000000c0

080007bc <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return (((BMP180_Press_IT[0]<<16)|(BMP180_Press_IT[1]<<8)|BMP180_Press_IT[2]) >> 5);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	041a      	lsls	r2, r3, #16
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007d0:	7892      	ldrb	r2, [r2, #2]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	115b      	asrs	r3, r3, #5
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	000000ec 	.word	0x000000ec

080007e4 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80007ea:	232e      	movs	r3, #46	@ 0x2e
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <BMP180_start_measurment_temp+0x2c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2364      	movs	r3, #100	@ 0x64
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2301      	movs	r3, #1
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	22f4      	movs	r2, #244	@ 0xf4
 8000802:	21ee      	movs	r1, #238	@ 0xee
 8000804:	f00e f8d2 	bl	800e9ac <HAL_I2C_Mem_Write>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000094 	.word	0x24000094

08000814 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 800081a:	23f4      	movs	r3, #244	@ 0xf4
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <BMP180_start_measurment_pres+0x2c>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	22f4      	movs	r2, #244	@ 0xf4
 8000832:	21ee      	movs	r1, #238	@ 0xee
 8000834:	f00e f8ba 	bl	800e9ac <HAL_I2C_Mem_Write>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000094 	.word	0x24000094

08000844 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 800084a:	23f4      	movs	r3, #244	@ 0xf4
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <BMP180_start_measurment_pres_IT+0x28>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	22f4      	movs	r2, #244	@ 0xf4
 800085e:	21ee      	movs	r1, #238	@ 0xee
 8000860:	f00e fad2 	bl	800ee08 <HAL_I2C_Mem_Write_IT>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000094 	.word	0x24000094

08000870 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 8000876:	232e      	movs	r3, #46	@ 0x2e
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <BMP180_start_measurment_temp_IT+0x28>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	22f4      	movs	r2, #244	@ 0xf4
 800088a:	21ee      	movs	r1, #238	@ 0xee
 800088c:	f00e fabc 	bl	800ee08 <HAL_I2C_Mem_Write_IT>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000094 	.word	0x24000094

0800089c <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 80008b4:	23aa      	movs	r3, #170	@ 0xaa
 80008b6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 80008b8:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <BMP180_read_calliberation_data+0x10c>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	8afa      	ldrh	r2, [r7, #22]
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	2316      	movs	r3, #22
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	463b      	mov	r3, r7
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	21ee      	movs	r1, #238	@ 0xee
 80008ce:	f00e f981 	bl	800ebd4 <HAL_I2C_Mem_Read>

	AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80008d2:	783b      	ldrb	r3, [r7, #0]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <BMP180_read_calliberation_data+0x110>)
 80008e2:	801a      	strh	r2, [r3, #0]
	AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <BMP180_read_calliberation_data+0x114>)
 80008f4:	801a      	strh	r2, [r3, #0]
	AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 80008f6:	793b      	ldrb	r3, [r7, #4]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <BMP180_read_calliberation_data+0x118>)
 8000906:	801a      	strh	r2, [r3, #0]
	AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <BMP180_read_calliberation_data+0x11c>)
 800091a:	801a      	strh	r2, [r3, #0]
	AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	7a7b      	ldrb	r3, [r7, #9]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <BMP180_read_calliberation_data+0x120>)
 800092e:	801a      	strh	r2, [r3, #0]
	AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <BMP180_read_calliberation_data+0x124>)
 8000942:	801a      	strh	r2, [r3, #0]
	B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000944:	7b3b      	ldrb	r3, [r7, #12]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <BMP180_read_calliberation_data+0x128>)
 8000954:	801a      	strh	r2, [r3, #0]
	B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <BMP180_read_calliberation_data+0x12c>)
 8000966:	801a      	strh	r2, [r3, #0]
	MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000968:	7c3b      	ldrb	r3, [r7, #16]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7c7b      	ldrb	r3, [r7, #17]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21a      	sxth	r2, r3
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <BMP180_read_calliberation_data+0x130>)
 8000978:	801a      	strh	r2, [r3, #0]
	MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 800097a:	7cbb      	ldrb	r3, [r7, #18]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <BMP180_read_calliberation_data+0x134>)
 800098a:	801a      	strh	r2, [r3, #0]
	MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 800098c:	7d3b      	ldrb	r3, [r7, #20]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	7d7b      	ldrb	r3, [r7, #21]
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <BMP180_read_calliberation_data+0x138>)
 800099c:	801a      	strh	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000094 	.word	0x24000094
 80009ac:	0000009a 	.word	0x0000009a
 80009b0:	0000009c 	.word	0x0000009c
 80009b4:	0000009e 	.word	0x0000009e
 80009b8:	00000094 	.word	0x00000094
 80009bc:	00000096 	.word	0x00000096
 80009c0:	00000098 	.word	0x00000098
 80009c4:	000000a0 	.word	0x000000a0
 80009c8:	000000a2 	.word	0x000000a2
 80009cc:	000000a4 	.word	0x000000a4
 80009d0:	000000a6 	.word	0x000000a6
 80009d4:	000000a8 	.word	0x000000a8

080009d8 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]

	X1 = ((temperature - AC6) * AC5)/32768;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <BMP180_GET_temp+0x98>)
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <BMP180_GET_temp+0x9c>)
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da03      	bge.n	80009fe <BMP180_GET_temp+0x26>
 80009f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80009fa:	441a      	add	r2, r3
 80009fc:	4613      	mov	r3, r2
 80009fe:	13db      	asrs	r3, r3, #15
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a04:	601a      	str	r2, [r3, #0]
	X2 = (MC * 2048)/(X1 + MD);
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <BMP180_GET_temp+0xa4>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	02da      	lsls	r2, r3, #11
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <BMP180_GET_temp+0xa8>)
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a20:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a22:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a16      	ldr	r2, [pc, #88]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a30:	6013      	str	r3, [r2, #0]
	temp = (B5 + 8)/16;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3308      	adds	r3, #8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da00      	bge.n	8000a3e <BMP180_GET_temp+0x66>
 8000a3c:	330f      	adds	r3, #15
 8000a3e:	111b      	asrs	r3, r3, #4
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
	return temp/10.0;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	00000098 	.word	0x00000098
 8000a74:	00000096 	.word	0x00000096
 8000a78:	000000c4 	.word	0x000000c4
 8000a7c:	000000a6 	.word	0x000000a6
 8000a80:	000000a8 	.word	0x000000a8
 8000a84:	000000c8 	.word	0x000000c8
 8000a88:	000000cc 	.word	0x000000cc
 8000a8c:	000000dc 	.word	0x000000dc

08000a90 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]

	UP = BMP180_READ_pres();
 8000a9a:	f7ff fe59 	bl	8000750 <BMP180_READ_pres>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a9c      	ldr	r2, [pc, #624]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000aa2:	6013      	str	r3, [r2, #0]
	X1 = (((UT-AC6) * AC5)/32768);//
 8000aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8000d18 <BMP180_GET_pres+0x288>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8000d1c <BMP180_GET_pres+0x28c>)
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	4a9c      	ldr	r2, [pc, #624]	@ (8000d20 <BMP180_GET_pres+0x290>)
 8000ab0:	8812      	ldrh	r2, [r2, #0]
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da03      	bge.n	8000ac2 <BMP180_GET_pres+0x32>
 8000aba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000abe:	441a      	add	r2, r3
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	13db      	asrs	r3, r3, #15
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b97      	ldr	r3, [pc, #604]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ac8:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(2048)) / (X1+MD));
 8000aca:	4b97      	ldr	r3, [pc, #604]	@ (8000d28 <BMP180_GET_pres+0x298>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	02da      	lsls	r2, r3, #11
 8000ad2:	4b96      	ldr	r3, [pc, #600]	@ (8000d2c <BMP180_GET_pres+0x29c>)
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b92      	ldr	r3, [pc, #584]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	440b      	add	r3, r1
 8000ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ae4:	4a92      	ldr	r2, [pc, #584]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000ae6:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b90      	ldr	r3, [pc, #576]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a90      	ldr	r2, [pc, #576]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8000af6:	4b8f      	ldr	r3, [pc, #572]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000afe:	4a8e      	ldr	r2, [pc, #568]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b00:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(4096)))/(2048);
 8000b02:	4b8e      	ldr	r3, [pc, #568]	@ (8000d3c <BMP180_GET_pres+0x2ac>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da01      	bge.n	8000b1e <BMP180_GET_pres+0x8e>
 8000b1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	da01      	bge.n	8000b2c <BMP180_GET_pres+0x9c>
 8000b28:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b2c:	12db      	asrs	r3, r3, #11
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b7c      	ldr	r3, [pc, #496]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b32:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(2048);
 8000b34:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <BMP180_GET_pres+0x2b0>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da01      	bge.n	8000b4c <BMP180_GET_pres+0xbc>
 8000b48:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b4c:	12db      	asrs	r3, r3, #11
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b77      	ldr	r3, [pc, #476]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b52:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8000b54:	4b73      	ldr	r3, [pc, #460]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b75      	ldr	r3, [pc, #468]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a79      	ldr	r2, [pc, #484]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b60:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<3)+2)/4;
 8000b62:	4b79      	ldr	r3, [pc, #484]	@ (8000d48 <BMP180_GET_pres+0x2b8>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	4b76      	ldr	r3, [pc, #472]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	3302      	adds	r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da00      	bge.n	8000b7a <BMP180_GET_pres+0xea>
 8000b78:	3303      	adds	r3, #3
 8000b7a:	109b      	asrs	r3, r3, #2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b73      	ldr	r3, [pc, #460]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000b80:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/8192;
 8000b82:	4b73      	ldr	r3, [pc, #460]	@ (8000d50 <BMP180_GET_pres+0x2c0>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da03      	bge.n	8000b9e <BMP180_GET_pres+0x10e>
 8000b96:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	135b      	asrs	r3, r3, #13
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b60      	ldr	r3, [pc, #384]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ba4:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(4096)))/(65536);
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <BMP180_GET_pres+0x2c4>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4b62      	ldr	r3, [pc, #392]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a61      	ldr	r2, [pc, #388]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <BMP180_GET_pres+0x132>
 8000bbe:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000bc2:	131b      	asrs	r3, r3, #12
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <BMP180_GET_pres+0x144>
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	141b      	asrs	r3, r3, #16
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b55      	ldr	r3, [pc, #340]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000bda:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/4;
 8000bdc:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b53      	ldr	r3, [pc, #332]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da00      	bge.n	8000bee <BMP180_GET_pres+0x15e>
 8000bec:	3303      	adds	r3, #3
 8000bee:	109b      	asrs	r3, r3, #2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bf4:	601a      	str	r2, [r3, #0]
	B4 = AC4* (uint32_t)(X3+32768)/(32768);
 8000bf6:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <BMP180_GET_pres+0x2c8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	0bdb      	lsrs	r3, r3, #15
 8000c0a:	4a54      	ldr	r2, [pc, #336]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c0c:	6013      	str	r3, [r2, #0]
	B7 = ((uint32_t)UP-B3)*(50000>>3);
 8000c0e:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a4e      	ldr	r2, [pc, #312]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a4f      	ldr	r2, [pc, #316]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c22:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000){
 8000c24:	4b4e      	ldr	r3, [pc, #312]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0e      	blt.n	8000c4a <BMP180_GET_pres+0x1ba>
		pres = (B7*2)/B4;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	005a      	lsls	r2, r3, #1
 8000c32:	4b4a      	ldr	r3, [pc, #296]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c42:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c44:	edc3 7a00 	vstr	s15, [r3]
 8000c48:	e00d      	b.n	8000c66 <BMP180_GET_pres+0x1d6>
	}
	else{
		pres = (B7/B4)*2;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c60:	4b40      	ldr	r3, [pc, #256]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c62:	edc3 7a00 	vstr	s15, [r3]
	}
	X1 = (pres/(256))*(pres/(256));
 8000c66:	4b3f      	ldr	r3, [pc, #252]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c74:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c76:	edd3 6a00 	vldr	s13, [r3]
 8000c7a:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c90:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(65536);
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da03      	bge.n	8000caa <BMP180_GET_pres+0x21a>
 8000ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca6:	441a      	add	r2, r3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	141b      	asrs	r3, r3, #16
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cb0:	601a      	str	r2, [r3, #0]
	X2 = (-7357*pres)/(65536);
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000d6c <BMP180_GET_pres+0x2dc>
 8000cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000d70 <BMP180_GET_pres+0x2e0>
 8000cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 2a90 	vmov	r2, s15
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cd2:	601a      	str	r2, [r3, #0]
	pres = pres + (X1+X2+3791)/(16);
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da00      	bge.n	8000ce8 <BMP180_GET_pres+0x258>
 8000ce6:	330f      	adds	r3, #15
 8000ce8:	111b      	asrs	r3, r3, #4
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cfe:	edc3 7a00 	vstr	s15, [r3]
	return pres;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	ee07 3a90 	vmov	s15, r3
}
 8000d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	000000b4 	.word	0x000000b4
 8000d18:	000000c0 	.word	0x000000c0
 8000d1c:	00000098 	.word	0x00000098
 8000d20:	00000096 	.word	0x00000096
 8000d24:	000000c4 	.word	0x000000c4
 8000d28:	000000a6 	.word	0x000000a6
 8000d2c:	000000a8 	.word	0x000000a8
 8000d30:	000000c8 	.word	0x000000c8
 8000d34:	000000cc 	.word	0x000000cc
 8000d38:	000000d0 	.word	0x000000d0
 8000d3c:	000000a2 	.word	0x000000a2
 8000d40:	0000009c 	.word	0x0000009c
 8000d44:	000000d8 	.word	0x000000d8
 8000d48:	0000009a 	.word	0x0000009a
 8000d4c:	000000d4 	.word	0x000000d4
 8000d50:	0000009e 	.word	0x0000009e
 8000d54:	000000a0 	.word	0x000000a0
 8000d58:	00000094 	.word	0x00000094
 8000d5c:	000000ac 	.word	0x000000ac
 8000d60:	000000b0 	.word	0x000000b0
 8000d64:	000000e0 	.word	0x000000e0
 8000d68:	43800000 	.word	0x43800000
 8000d6c:	c5e5e800 	.word	0xc5e5e800
 8000d70:	47800000 	.word	0x47800000

08000d74 <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000d7c:	f7ff fd32 	bl	80007e4 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000d80:	200a      	movs	r0, #10
 8000d82:	f008 fc07 	bl	8009594 <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000d86:	f7ff fcc1 	bl	800070c <BMP180_READ_temp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d90:	601a      	str	r2, [r3, #0]
	temp = BMP180_GET_temp(temperature);
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe1d 	bl	80009d8 <BMP180_GET_temp>
 8000d9e:	eef0 7a40 	vmov.f32	s15, s0
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <BMP180_CALIBRATION+0x74>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]
	BMP180_start_measurment_pres();
 8000da8:	f7ff fd34 	bl	8000814 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000dac:	201e      	movs	r0, #30
 8000dae:	f008 fbf1 	bl	8009594 <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000db2:	f7ff fccd 	bl	8000750 <BMP180_READ_pres>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
	pres = BMP180_GET_pres(pressure);
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe63 	bl	8000a90 <BMP180_GET_pres>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd0:	edc3 7a00 	vstr	s15, [r3]
	//}
	*firstpres = pres;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	000000b8 	.word	0x000000b8
 8000de8:	000000dc 	.word	0x000000dc
 8000dec:	000000bc 	.word	0x000000bc
 8000df0:	000000e0 	.word	0x000000e0

08000df4 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <BMP180_GET_height+0x38>)
 8000e02:	603b      	str	r3, [r7, #0]
	height = (ampritude/factor);
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <BMP180_GET_height+0x3c>)
 8000e06:	edd3 6a00 	vldr	s13, [r3]
 8000e0a:	ed97 7a00 	vldr	s14, [r7]
 8000e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e12:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ee07 3a90 	vmov	s15, r3
}
 8000e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	4134cccd 	.word	0x4134cccd
 8000e30:	000000e8 	.word	0x000000e8

08000e34 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
//	  if(a >  max_speed)
//	  {
//		  a =  max_speed;
//	  }

	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d907      	bls.n	8000e58 <ESC_1_SPEED+0x24>
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	bf28      	it	cs
 8000e52:	4613      	movcs	r3, r2
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	e001      	b.n	8000e5c <ESC_1_SPEED+0x28>
 8000e58:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e5c:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <ESC_1_SPEED+0x40>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	24000098 	.word	0x24000098

08000e78 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d907      	bls.n	8000e9c <ESC_2_SPEED+0x24>
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e92:	4293      	cmp	r3, r2
 8000e94:	bf28      	it	cs
 8000e96:	4613      	movcs	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	e001      	b.n	8000ea0 <ESC_2_SPEED+0x28>
 8000e9c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ea0:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <ESC_2_SPEED+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	24000098 	.word	0x24000098

08000ebc <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d907      	bls.n	8000ee0 <ESC_3_SPEED+0x24>
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	bf28      	it	cs
 8000eda:	4613      	movcs	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	e001      	b.n	8000ee4 <ESC_3_SPEED+0x28>
 8000ee0:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ee4:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <ESC_3_SPEED+0x40>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	24000098 	.word	0x24000098

08000f00 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d907      	bls.n	8000f24 <ESC_4_SPEED+0x24>
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	bf28      	it	cs
 8000f1e:	4613      	movcs	r3, r2
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	e001      	b.n	8000f28 <ESC_4_SPEED+0x28>
 8000f24:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f28:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a);
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <ESC_4_SPEED+0x40>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	24000098 	.word	0x24000098

08000f44 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);//450Hz
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f015 fba3 	bl	80166a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2104      	movs	r1, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f015 fb9d 	bl	80166a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f015 fb97 	bl	80166a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f015 fb91 	bl	80166a4 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f98:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fa4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <ESC_INT+0x8c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <ESC_INT+0x90>)
 8000fba:	f00d fc27 	bl	800e80c <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000fbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc2:	f008 fae7 	bl	8009594 <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000098 	.word	0x24000098
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <HMC5883L_Init>:
static I2C_HandleTypeDef *hi2c_HMC5883L;

extern uint8_t HMC5883L_Data_IT[6];
extern uint8_t HMC583L_IRQ;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8000fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <HMC5883L_Init+0xb4>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			30 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xF0;
 8000fea:	23f0      	movs	r3, #240	@ 0xf0
 8000fec:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 8000fee:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HMC5883L_Init+0xb4>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	213c      	movs	r1, #60	@ 0x3c
 8001006:	f00d fcd1 	bl	800e9ac <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x32;
 800100a:	2332      	movs	r3, #50	@ 0x32
 800100c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <HMC5883L_Init+0xb4>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 030f 	add.w	r3, r7, #15
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2201      	movs	r2, #1
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	f00d fcc1 	bl	800e9ac <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x80;
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <HMC5883L_Init+0xb4>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2202      	movs	r2, #2
 8001044:	213c      	movs	r1, #60	@ 0x3c
 8001046:	f00d fcb1 	bl	800e9ac <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HMC5883L_Init+0xb4>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	f107 030e 	add.w	r3, r7, #14
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	220a      	movs	r2, #10
 8001064:	213c      	movs	r1, #60	@ 0x3c
 8001066:	f00d fdb5 	bl	800ebd4 <HAL_I2C_Mem_Read>

	if(status != 0x48){
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	2b48      	cmp	r3, #72	@ 0x48
 800106e:	d002      	beq.n	8001076 <HMC5883L_Init+0x9e>
		status = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	73bb      	strb	r3, [r7, #14]
 8001074:	e001      	b.n	800107a <HMC5883L_Init+0xa2>
	}
	else{
		status = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f008 fa8a 	bl	8009594 <HAL_Delay>

	return status;
 8001080:	7bbb      	ldrb	r3, [r7, #14]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2400009c 	.word	0x2400009c

08001090 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 8001096:	23b6      	movs	r3, #182	@ 0xb6
 8001098:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, data, 6, 1);
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HMC5883L_Get_Z_Start+0x40>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2306      	movs	r3, #6
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	463b      	mov	r3, r7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2205      	movs	r2, #5
 80010ae:	213c      	movs	r1, #60	@ 0x3c
 80010b0:	f00d fd90 	bl	800ebd4 <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[4]<<8) | data[5];
 80010b4:	793b      	ldrb	r3, [r7, #4]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	797b      	ldrb	r3, [r7, #5]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2400009c 	.word	0x2400009c

080010d4 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, (uint8_t *)HMC5883L_Data_IT, 6);
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HMC5883L_Get_Z_Start_IT+0x28>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	2306      	movs	r3, #6
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <HMC5883L_Get_Z_Start_IT+0x2c>)
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2205      	movs	r2, #5
 80010ea:	213c      	movs	r1, #60	@ 0x3c
 80010ec:	f00d ff16 	bl	800ef1c <HAL_I2C_Mem_Read_IT>
	HMC583L_IRQ = 1;
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <HMC5883L_Get_Z_Start_IT+0x30>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2400009c 	.word	0x2400009c
 8001100:	00000064 	.word	0x00000064
 8001104:	000041ed 	.word	0x000041ed

08001108 <HMC5883L_Get_Z_End_IT>:

int16_t HMC5883L_Get_Z_End_IT(void){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
	int16_t fulldata = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	80fb      	strh	r3, [r7, #6]

	fulldata = ((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5];
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 800111c:	795b      	ldrb	r3, [r3, #5]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 8001124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	00000064 	.word	0x00000064

08001138 <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 8001138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	e014      	b.n	800117c <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 8001152:	f7ff ff9d 	bl	8001090 <HMC5883L_Get_Z_Start>
 8001156:	4603      	mov	r3, r0
 8001158:	b21b      	sxth	r3, r3
 800115a:	17da      	asrs	r2, r3, #31
 800115c:	461c      	mov	r4, r3
 800115e:	4615      	mov	r5, r2
 8001160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001164:	eb12 0804 	adds.w	r8, r2, r4
 8001168:	eb43 0905 	adc.w	r9, r3, r5
 800116c:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 8001170:	2064      	movs	r0, #100	@ 0x64
 8001172:	f008 fa0f 	bl	8009594 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b09      	cmp	r3, #9
 8001180:	dde7      	ble.n	8001152 <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 8001182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001186:	f04f 020a 	mov.w	r2, #10
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	f7ff f8bf 	bl	8000310 <__aeabi_ldivmod>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	b213      	sxth	r3, r2
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080011a4 <MPU6050_INIT>:
//extern float xval;
//extern float yval;
//extern float zval;


uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 80011ac:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <MPU6050_INIT+0x58>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 80011b2:	f000 f825 	bl	8001200 <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 80011b6:	f000 f88f 	bl	80012d8 <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 80011ba:	2005      	movs	r0, #5
 80011bc:	f000 f838 	bl	8001230 <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 80011c0:	2008      	movs	r0, #8
 80011c2:	f000 f851 	bl	8001268 <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 80011c6:	2008      	movs	r0, #8
 80011c8:	f000 f86a 	bl	80012a0 <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 80011cc:	f000 fd40 	bl	8001c50 <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 80011d0:	f000 f89a 	bl	8001308 <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 80011d4:	200a      	movs	r0, #10
 80011d6:	f008 f9dd 	bl	8009594 <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 80011da:	f000 fd21 	bl	8001c20 <MPU6050_READ_ID>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b68      	cmp	r3, #104	@ 0x68
 80011e6:	d002      	beq.n	80011ee <MPU6050_INIT+0x4a>
		status = 0;//error
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e001      	b.n	80011f2 <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	240000a0 	.word	0x240000a0

08001200 <MPU6050_RESET>:


void MPU6050_RESET(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <MPU6050_RESET+0x2c>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2301      	movs	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	226b      	movs	r2, #107	@ 0x6b
 800121e:	21d0      	movs	r1, #208	@ 0xd0
 8001220:	f00d fbc4 	bl	800e9ac <HAL_I2C_Mem_Write>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	240000a0 	.word	0x240000a0

08001230 <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af04      	add	r7, sp, #16
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MPU6050_CONFIG_DLPF+0x34>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2301      	movs	r3, #1
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	f107 030f 	add.w	r3, r7, #15
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	221a      	movs	r2, #26
 8001254:	21d0      	movs	r1, #208	@ 0xd0
 8001256:	f00d fba9 	bl	800e9ac <HAL_I2C_Mem_Write>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	240000a0 	.word	0x240000a0

08001268 <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af04      	add	r7, sp, #16
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MPU6050_CONFIG_GYRO+0x34>)
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	2301      	movs	r3, #1
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	f107 030f 	add.w	r3, r7, #15
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	221b      	movs	r2, #27
 800128c:	21d0      	movs	r1, #208	@ 0xd0
 800128e:	f00d fb8d 	bl	800e9ac <HAL_I2C_Mem_Write>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	240000a0 	.word	0x240000a0

080012a0 <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MPU6050_CONFIG_ACCEL+0x34>)
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	f107 030f 	add.w	r3, r7, #15
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	221c      	movs	r2, #28
 80012c4:	21d0      	movs	r1, #208	@ 0xd0
 80012c6:	f00d fb71 	bl	800e9ac <HAL_I2C_Mem_Write>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	240000a0 	.word	0x240000a0

080012d8 <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	2219      	movs	r2, #25
 80012f6:	21d0      	movs	r1, #208	@ 0xd0
 80012f8:	f00d fb58 	bl	800e9ac <HAL_I2C_Mem_Write>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	240000a0 	.word	0x240000a0

08001308 <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	2301      	movs	r3, #1
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	226a      	movs	r2, #106	@ 0x6a
 8001326:	21d0      	movs	r1, #208	@ 0xd0
 8001328:	f00d fb40 	bl	800e9ac <HAL_I2C_Mem_Write>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	240000a0 	.word	0x240000a0

08001338 <MPU6050_CALIBRATION>:


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(float *accelx_cal,float *accely_cal,float*accelz_cal,float *gyrox_cal,float *gyroy_cal,
		float *gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	@ 0x38
 800133c:	af00      	add	r7, sp, #0
 800133e:	6178      	str	r0, [r7, #20]
 8001340:	6139      	str	r1, [r7, #16]
 8001342:	60fa      	str	r2, [r7, #12]
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	ed87 0a01 	vstr	s0, [r7, #4]
 800134a:	edc7 0a00 	vstr	s1, [r7]

	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	637b      	str	r3, [r7, #52]	@ 0x34
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	@ 0x30
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 1000; i++){ //5 sec
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e06b      	b.n	8001450 <MPU6050_CALIBRATION+0x118>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/Acc_Scale;
 8001378:	f000 fbce 	bl	8001b18 <MPU6050_GET_ACCEL_FULLVALUE_X>
 800137c:	4603      	mov	r3, r0
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001386:	ed97 7a00 	vldr	s14, [r7]
 800138a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/Acc_Scale;
 800139a:	f000 fbdd 	bl	8001b58 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 800139e:	4603      	mov	r3, r0
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013a8:	ed97 7a00 	vldr	s14, [r7]
 80013ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale;
 80013bc:	f000 fbe0 	bl	8001b80 <MPU6050_GET_ACCEL_FULLVALUE_Z>
 80013c0:	4603      	mov	r3, r0
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ca:	ed97 7a00 	vldr	s14, [r7]
 80013ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80013d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013da:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale;
 80013de:	f000 fbe3 	bl	8001ba8 <MPU6050_GET_GYRO_FULLVALUE_X>
 80013e2:	4603      	mov	r3, r0
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80013f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80013f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale;
 8001400:	f000 fbe6 	bl	8001bd0 <MPU6050_GET_GYRO_FULLVALUE_Y>
 8001404:	4603      	mov	r3, r0
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800140e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001416:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale;
 8001422:	f000 fbe9 	bl	8001bf8 <MPU6050_GET_GYRO_FULLVALUE_Z>
 8001426:	4603      	mov	r3, r0
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001430:	ed97 7a01 	vldr	s14, [r7, #4]
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	ed97 7a08 	vldr	s14, [r7, #32]
 800143c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001440:	edc7 7a08 	vstr	s15, [r7, #32]
		  HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f008 f8a5 	bl	8009594 <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001456:	db8f      	blt.n	8001378 <MPU6050_CALIBRATION+0x40>
	}
	*accelx_cal = accelx/1000;
 8001458:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800145c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	edc3 7a00 	vstr	s15, [r3]
	*accely_cal = accely/1000;
 800146a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800146e:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	edc3 7a00 	vstr	s15, [r3]
	*accelz_cal = accelz/1000;
 800147c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001480:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	edc3 7a00 	vstr	s15, [r3]

	*accelz_cal = 1 - *accelz_cal;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a00 	vstr	s15, [r3]

	*gyrox_cal = gyrox/1000;
 80014a2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014a6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	edc3 7a00 	vstr	s15, [r3]
	*gyroy_cal = gyroy/1000;
 80014b4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014b8:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014c2:	edc3 7a00 	vstr	s15, [r3]
	*gyroz_cal = gyroz/1000;
 80014c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ca:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d4:	edc3 7a00 	vstr	s15, [r3]
}
 80014d8:	bf00      	nop
 80014da:	3738      	adds	r7, #56	@ 0x38
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	447a0000 	.word	0x447a0000
 80014e4:	00000000 	.word	0x00000000

080014e8 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(float ax, float ay, float az, float *ax_ang, float *ay_ang/*, float *az_ang*/){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80014f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80014f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80014fa:	60b8      	str	r0, [r7, #8]
 80014fc:	6079      	str	r1, [r7, #4]
	float axan,ayan;
	float ang1 = sqrt((ax*ax)+(az*az));
 80014fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001502:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001506:	edd7 7a03 	vldr	s15, [r7, #12]
 800150a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800150e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001512:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001516:	eeb0 0b47 	vmov.f64	d0, d7
 800151a:	f01c fe39 	bl	801e190 <sqrt>
 800151e:	eeb0 7b40 	vmov.f64	d7, d0
 8001522:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001526:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float ang2 = sqrt((ay*ay)+(az*az));
 800152a:	edd7 7a04 	vldr	s15, [r7, #16]
 800152e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001532:	edd7 7a03 	vldr	s15, [r7, #12]
 8001536:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800153a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001542:	eeb0 0b47 	vmov.f64	d0, d7
 8001546:	f01c fe23 	bl	801e190 <sqrt>
 800154a:	eeb0 7b40 	vmov.f64	d7, d0
 800154e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001552:	edc7 7a08 	vstr	s15, [r7, #32]
	axan = -1*(atan(ax/ang2));
 8001556:	edd7 6a05 	vldr	s13, [r7, #20]
 800155a:	ed97 7a08 	vldr	s14, [r7, #32]
 800155e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001562:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001566:	eeb0 0b47 	vmov.f64	d0, d7
 800156a:	f01c fe31 	bl	801e1d0 <atan>
 800156e:	eeb0 7b40 	vmov.f64	d7, d0
 8001572:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001576:	eef1 7a67 	vneg.f32	s15, s15
 800157a:	edc7 7a07 	vstr	s15, [r7, #28]
	ayan= atan(ay/ang1);
 800157e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001582:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800158a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800158e:	eeb0 0b47 	vmov.f64	d0, d7
 8001592:	f01c fe1d 	bl	801e1d0 <atan>
 8001596:	eeb0 7b40 	vmov.f64	d7, d0
 800159a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800159e:	edc7 7a06 	vstr	s15, [r7, #24]

//	*ax_ang = (axan*180)/M_PI;
//	*ay_ang = (ayan*180)/M_PI;

	*ay_ang = (axan*180)/M_PI;//x = y poniewaz x gyro to y acc
 80015a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80015a6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80015f8 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>
 80015aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80015b2:	ed9f 5b0f 	vldr	d5, [pc, #60]	@ 80015f0 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 80015b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a00 	vstr	s15, [r3]
	*ax_ang = (ayan*180)/M_PI;
 80015c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015c8:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80015f8 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>
 80015cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80015d4:	ed9f 5b06 	vldr	d5, [pc, #24]	@ 80015f0 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 80015d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	edc3 7a00 	vstr	s15, [r3]
}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	@ 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	54442d18 	.word	0x54442d18
 80015f4:	400921fb 	.word	0x400921fb
 80015f8:	43340000 	.word	0x43340000

080015fc <MPU6050_GET_ACCANDGYR_CALANDSCL>:
	*gy_ang = (gy/1000) + *gy_ang;
	*gz_ang = (gz/1000) + *gz_ang;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,
		float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b094      	sub	sp, #80	@ 0x50
 8001600:	af04      	add	r7, sp, #16
 8001602:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001604:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001606:	627a      	str	r2, [r7, #36]	@ 0x24
 8001608:	623b      	str	r3, [r7, #32]
 800160a:	ed87 0a07 	vstr	s0, [r7, #28]
 800160e:	edc7 0a06 	vstr	s1, [r7, #24]
 8001612:	ed87 1a05 	vstr	s2, [r7, #20]
 8001616:	edc7 1a04 	vstr	s3, [r7, #16]
 800161a:	ed87 2a03 	vstr	s4, [r7, #12]
 800161e:	edc7 2a02 	vstr	s5, [r7, #8]
 8001622:	ed87 3a01 	vstr	s6, [r7, #4]
 8001626:	edc7 3a00 	vstr	s7, [r7]

	uint8_t pdata[14];
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14, 1); // szybesz o ~1ms
 800162a:	4b4e      	ldr	r3, [pc, #312]	@ (8001764 <MPU6050_GET_ACCANDGYR_CALANDSCL+0x168>)
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	2301      	movs	r3, #1
 8001630:	9302      	str	r3, [sp, #8]
 8001632:	230e      	movs	r3, #14
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	223b      	movs	r2, #59	@ 0x3b
 8001640:	21d0      	movs	r1, #208	@ 0xd0
 8001642:	f00d fac7 	bl	800ebd4 <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14);

	*ax = (((int16_t)(pdata[0]<<8) | pdata[1])/Acc_Scale) - accelx_cal;
 8001646:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	b21b      	sxth	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001654:	4313      	orrs	r3, r2
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800165e:	edd7 7a00 	vldr	s15, [r7]
 8001662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001666:	edd7 7a07 	vldr	s15, [r7, #28]
 800166a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800166e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001670:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(pdata[2]<<8) | pdata[3])/Acc_Scale) - accely_cal;
 8001674:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	b21b      	sxth	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001682:	4313      	orrs	r3, r2
 8001684:	ee07 3a90 	vmov	s15, r3
 8001688:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800168c:	edd7 7a00 	vldr	s15, [r7]
 8001690:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001694:	edd7 7a06 	vldr	s15, [r7, #24]
 8001698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800169e:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(pdata[4]<<8) | pdata[5])/Acc_Scale) + accelz_cal;
 80016a2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	461a      	mov	r2, r3
 80016ac:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80016b0:	4313      	orrs	r3, r2
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016ba:	edd7 7a00 	vldr	s15, [r7]
 80016be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80016c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(pdata[8]<<8) | pdata[9])/Gyr_Scale) - gyrox_cal;
 80016d0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80016de:	4313      	orrs	r3, r2
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(pdata[10]<<8) | pdata[11])/Gyr_Scale) - gyroy_cal;
 80016fe:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	b21b      	sxth	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800170c:	4313      	orrs	r3, r2
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001716:	edd7 7a01 	vldr	s15, [r7, #4]
 800171a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800171e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001728:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(pdata[12]<<8) | pdata[13])/Gyr_Scale) - gyroz_cal;
 800172c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b21b      	sxth	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800173a:	4313      	orrs	r3, r2
 800173c:	ee07 3a90 	vmov	s15, r3
 8001740:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001744:	edd7 7a01 	vldr	s15, [r7, #4]
 8001748:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800174c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001756:	edc3 7a00 	vstr	s15, [r3]
//	  *az = (MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale) + accelz_cal;
//
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}
 800175a:	bf00      	nop
 800175c:	3740      	adds	r7, #64	@ 0x40
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	240000a0 	.word	0x240000a0

08001768 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af02      	add	r7, sp, #8


	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, (uint8_t *)MPU6050_IT_DATA, 14);
 800176e:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x28>)
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	230e      	movs	r3, #14
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2301      	movs	r3, #1
 800177c:	223b      	movs	r2, #59	@ 0x3b
 800177e:	21d0      	movs	r1, #208	@ 0xd0
 8001780:	f00d fbcc 	bl	800ef1c <HAL_I2C_Mem_Read_IT>
	MPU6050_IRQ = 1;
 8001784:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]


}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	240000a0 	.word	0x240000a0
 8001794:	00000048 	.word	0x00000048
 8001798:	000041ec 	.word	0x000041ec

0800179c <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 800179c:	b480      	push	{r7}
 800179e:	b08d      	sub	sp, #52	@ 0x34
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80017a4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80017a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80017a8:	623b      	str	r3, [r7, #32]
 80017aa:	ed87 0a07 	vstr	s0, [r7, #28]
 80017ae:	edc7 0a06 	vstr	s1, [r7, #24]
 80017b2:	ed87 1a05 	vstr	s2, [r7, #20]
 80017b6:	edc7 1a04 	vstr	s3, [r7, #16]
 80017ba:	ed87 2a03 	vstr	s4, [r7, #12]
 80017be:	edc7 2a02 	vstr	s5, [r7, #8]
 80017c2:	ed87 3a01 	vstr	s6, [r7, #4]
 80017c6:	edc7 3a00 	vstr	s7, [r7]
	*ax = (((int16_t)(MPU6050_IT_DATA[0]<<8) | MPU6050_IT_DATA[1])/Acc_Scale) - accelx_cal;
 80017ca:	4b48      	ldr	r3, [pc, #288]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b45      	ldr	r3, [pc, #276]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017d6:	785b      	ldrb	r3, [r3, #1]
 80017d8:	4313      	orrs	r3, r2
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017e2:	edd7 7a00 	vldr	s15, [r7]
 80017e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80017ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f4:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(MPU6050_IT_DATA[2]<<8) | MPU6050_IT_DATA[3])/Acc_Scale) - accely_cal;
 80017f8:	4b3c      	ldr	r3, [pc, #240]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017fa:	789b      	ldrb	r3, [r3, #2]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	b21b      	sxth	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	4b3a      	ldr	r3, [pc, #232]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001804:	78db      	ldrb	r3, [r3, #3]
 8001806:	4313      	orrs	r3, r2
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001810:	edd7 7a00 	vldr	s15, [r7]
 8001814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001818:	edd7 7a06 	vldr	s15, [r7, #24]
 800181c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001822:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(MPU6050_IT_DATA[4]<<8) | MPU6050_IT_DATA[5])/Acc_Scale) + accelz_cal;
 8001826:	4b31      	ldr	r3, [pc, #196]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001828:	791b      	ldrb	r3, [r3, #4]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	b21b      	sxth	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	4b2e      	ldr	r3, [pc, #184]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001832:	795b      	ldrb	r3, [r3, #5]
 8001834:	4313      	orrs	r3, r2
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800183e:	edd7 7a00 	vldr	s15, [r7]
 8001842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001846:	edd7 7a05 	vldr	s15, [r7, #20]
 800184a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001850:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(MPU6050_IT_DATA[8]<<8) | MPU6050_IT_DATA[9])/Gyr_Scale) - gyrox_cal;
 8001854:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001856:	7a1b      	ldrb	r3, [r3, #8]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	b21b      	sxth	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001860:	7a5b      	ldrb	r3, [r3, #9]
 8001862:	4313      	orrs	r3, r2
 8001864:	ee07 3a90 	vmov	s15, r3
 8001868:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800186c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001874:	edd7 7a04 	vldr	s15, [r7, #16]
 8001878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(MPU6050_IT_DATA[10]<<8) | MPU6050_IT_DATA[11])/Gyr_Scale) - gyroy_cal;
 8001882:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001884:	7a9b      	ldrb	r3, [r3, #10]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	b21b      	sxth	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	4b17      	ldr	r3, [pc, #92]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 800188e:	7adb      	ldrb	r3, [r3, #11]
 8001890:	4313      	orrs	r3, r2
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800189a:	edd7 7a01 	vldr	s15, [r7, #4]
 800189e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018ac:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(MPU6050_IT_DATA[12]<<8) | MPU6050_IT_DATA[13])/Gyr_Scale) - gyroz_cal;
 80018b0:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018b2:	7b1b      	ldrb	r3, [r3, #12]
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018bc:	7b5b      	ldrb	r3, [r3, #13]
 80018be:	4313      	orrs	r3, r2
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018da:	edc3 7a00 	vstr	s15, [r3]
}
 80018de:	bf00      	nop
 80018e0:	3734      	adds	r7, #52	@ 0x34
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	00000048 	.word	0x00000048

080018f0 <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float ax_ang, float ay_ang, float megz_ang, float gx_ang,
		float gy_ang, float gz_ang){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	61f8      	str	r0, [r7, #28]
 80018f8:	ed87 0a06 	vstr	s0, [r7, #24]
 80018fc:	edc7 0a05 	vstr	s1, [r7, #20]
 8001900:	ed87 1a04 	vstr	s2, [r7, #16]
 8001904:	edc7 1a03 	vstr	s3, [r7, #12]
 8001908:	ed87 2a02 	vstr	s4, [r7, #8]
 800190c:	edc7 2a01 	vstr	s5, [r7, #4]
	Complementary_getFilter(Complementary_Filter_st, ax_ang, ay_ang, megz_ang, gx_ang, gy_ang, gz_ang);
 8001910:	edd7 2a01 	vldr	s5, [r7, #4]
 8001914:	ed97 2a02 	vldr	s4, [r7, #8]
 8001918:	edd7 1a03 	vldr	s3, [r7, #12]
 800191c:	ed97 1a04 	vldr	s2, [r7, #16]
 8001920:	edd7 0a05 	vldr	s1, [r7, #20]
 8001924:	ed97 0a06 	vldr	s0, [r7, #24]
 8001928:	69f8      	ldr	r0, [r7, #28]
 800192a:	f000 f9a9 	bl	8001c80 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 800192e:	bf00      	nop
 8001930:	3720      	adds	r7, #32
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <MPU6050_GET_ACCEL_YH+0x2c>)
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	2301      	movs	r3, #1
 8001944:	9302      	str	r3, [sp, #8]
 8001946:	2301      	movs	r3, #1
 8001948:	9301      	str	r3, [sp, #4]
 800194a:	1dfb      	adds	r3, r7, #7
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2301      	movs	r3, #1
 8001950:	223d      	movs	r2, #61	@ 0x3d
 8001952:	21d0      	movs	r1, #208	@ 0xd0
 8001954:	f00d f93e 	bl	800ebd4 <HAL_I2C_Mem_Read>
	return data;
 8001958:	79fb      	ldrb	r3, [r7, #7]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	240000a0 	.word	0x240000a0

08001968 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <MPU6050_GET_ACCEL_YL+0x2c>)
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	2301      	movs	r3, #1
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2301      	movs	r3, #1
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2301      	movs	r3, #1
 8001980:	223e      	movs	r2, #62	@ 0x3e
 8001982:	21d0      	movs	r1, #208	@ 0xd0
 8001984:	f00d f926 	bl	800ebd4 <HAL_I2C_Mem_Read>
	return data;
 8001988:	79fb      	ldrb	r3, [r7, #7]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	240000a0 	.word	0x240000a0

08001998 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <MPU6050_GET_ACCEL_ZH+0x2c>)
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	2301      	movs	r3, #1
 80019a4:	9302      	str	r3, [sp, #8]
 80019a6:	2301      	movs	r3, #1
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2301      	movs	r3, #1
 80019b0:	223f      	movs	r2, #63	@ 0x3f
 80019b2:	21d0      	movs	r1, #208	@ 0xd0
 80019b4:	f00d f90e 	bl	800ebd4 <HAL_I2C_Mem_Read>
	return data;
 80019b8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	240000a0 	.word	0x240000a0

080019c8 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <MPU6050_GET_ACCEL_ZL+0x2c>)
 80019d0:	6818      	ldr	r0, [r3, #0]
 80019d2:	2301      	movs	r3, #1
 80019d4:	9302      	str	r3, [sp, #8]
 80019d6:	2301      	movs	r3, #1
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	1dfb      	adds	r3, r7, #7
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2301      	movs	r3, #1
 80019e0:	2240      	movs	r2, #64	@ 0x40
 80019e2:	21d0      	movs	r1, #208	@ 0xd0
 80019e4:	f00d f8f6 	bl	800ebd4 <HAL_I2C_Mem_Read>
	return data;
 80019e8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	240000a0 	.word	0x240000a0

080019f8 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 80019fe:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <MPU6050_GET_GYRO_XH+0x2c>)
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	2301      	movs	r3, #1
 8001a04:	9302      	str	r3, [sp, #8]
 8001a06:	2301      	movs	r3, #1
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	1dfb      	adds	r3, r7, #7
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	2243      	movs	r2, #67	@ 0x43
 8001a12:	21d0      	movs	r1, #208	@ 0xd0
 8001a14:	f00d f8de 	bl	800ebd4 <HAL_I2C_Mem_Read>
	return data;
 8001a18:	79fb      	ldrb	r3, [r7, #7]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	240000a0 	.word	0x240000a0

08001a28 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 8001a2e:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <MPU6050_GET_GYRO_XL+0x2c>)
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	2301      	movs	r3, #1
 8001a34:	9302      	str	r3, [sp, #8]
 8001a36:	2301      	movs	r3, #1
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2301      	movs	r3, #1
 8001a40:	2244      	movs	r2, #68	@ 0x44
 8001a42:	21d0      	movs	r1, #208	@ 0xd0
 8001a44:	f00d f8c6 	bl	800ebd4 <HAL_I2C_Mem_Read>
	return data;
 8001a48:	79fb      	ldrb	r3, [r7, #7]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	240000a0 	.word	0x240000a0

08001a58 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <MPU6050_GET_GYRO_YH+0x2c>)
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	2301      	movs	r3, #1
 8001a64:	9302      	str	r3, [sp, #8]
 8001a66:	2301      	movs	r3, #1
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	1dfb      	adds	r3, r7, #7
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2301      	movs	r3, #1
 8001a70:	2245      	movs	r2, #69	@ 0x45
 8001a72:	21d0      	movs	r1, #208	@ 0xd0
 8001a74:	f00d f8ae 	bl	800ebd4 <HAL_I2C_Mem_Read>
	return data;
 8001a78:	79fb      	ldrb	r3, [r7, #7]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	240000a0 	.word	0x240000a0

08001a88 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 8001a8e:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <MPU6050_GET_GYRO_YL+0x2c>)
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	2301      	movs	r3, #1
 8001a94:	9302      	str	r3, [sp, #8]
 8001a96:	2301      	movs	r3, #1
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	1dfb      	adds	r3, r7, #7
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	2246      	movs	r2, #70	@ 0x46
 8001aa2:	21d0      	movs	r1, #208	@ 0xd0
 8001aa4:	f00d f896 	bl	800ebd4 <HAL_I2C_Mem_Read>
	return data;
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	240000a0 	.word	0x240000a0

08001ab8 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <MPU6050_GET_GYRO_ZH+0x2c>)
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	9302      	str	r3, [sp, #8]
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	1dfb      	adds	r3, r7, #7
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	2247      	movs	r2, #71	@ 0x47
 8001ad2:	21d0      	movs	r1, #208	@ 0xd0
 8001ad4:	f00d f87e 	bl	800ebd4 <HAL_I2C_Mem_Read>
	return data;
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	240000a0 	.word	0x240000a0

08001ae8 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <MPU6050_GET_GYRO_ZL+0x2c>)
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	2301      	movs	r3, #1
 8001af4:	9302      	str	r3, [sp, #8]
 8001af6:	2301      	movs	r3, #1
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	1dfb      	adds	r3, r7, #7
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2301      	movs	r3, #1
 8001b00:	2248      	movs	r2, #72	@ 0x48
 8001b02:	21d0      	movs	r1, #208	@ 0xd0
 8001b04:	f00d f866 	bl	800ebd4 <HAL_I2C_Mem_Read>
	return data;
 8001b08:	79fb      	ldrb	r3, [r7, #7]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	240000a0 	.word	0x240000a0

08001b18 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	2301      	movs	r3, #1
 8001b24:	9302      	str	r3, [sp, #8]
 8001b26:	2302      	movs	r3, #2
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2301      	movs	r3, #1
 8001b30:	223b      	movs	r2, #59	@ 0x3b
 8001b32:	21d0      	movs	r1, #208	@ 0xd0
 8001b34:	f00d f84e 	bl	800ebd4 <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001b38:	793b      	ldrb	r3, [r7, #4]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	b21a      	sxth	r2, r3
 8001b3e:	797b      	ldrb	r3, [r7, #5]
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	240000a0 	.word	0x240000a0

08001b58 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001b5e:	f7ff feeb 	bl	8001938 <MPU6050_GET_ACCEL_YH>
 8001b62:	4603      	mov	r3, r0
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	b21c      	sxth	r4, r3
 8001b68:	f7ff fefe 	bl	8001968 <MPU6050_GET_ACCEL_YL>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	4323      	orrs	r3, r4
 8001b72:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd90      	pop	{r4, r7, pc}

08001b80 <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001b86:	f7ff ff07 	bl	8001998 <MPU6050_GET_ACCEL_ZH>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	b21c      	sxth	r4, r3
 8001b90:	f7ff ff1a 	bl	80019c8 <MPU6050_GET_ACCEL_ZL>
 8001b94:	4603      	mov	r3, r0
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	4323      	orrs	r3, r4
 8001b9a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd90      	pop	{r4, r7, pc}

08001ba8 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001bae:	f7ff ff23 	bl	80019f8 <MPU6050_GET_GYRO_XH>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	b21c      	sxth	r4, r3
 8001bb8:	f7ff ff36 	bl	8001a28 <MPU6050_GET_GYRO_XL>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	b21b      	sxth	r3, r3
 8001bc0:	4323      	orrs	r3, r4
 8001bc2:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd90      	pop	{r4, r7, pc}

08001bd0 <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001bd6:	f7ff ff3f 	bl	8001a58 <MPU6050_GET_GYRO_YH>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	b21c      	sxth	r4, r3
 8001be0:	f7ff ff52 	bl	8001a88 <MPU6050_GET_GYRO_YL>
 8001be4:	4603      	mov	r3, r0
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	4323      	orrs	r3, r4
 8001bea:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd90      	pop	{r4, r7, pc}

08001bf8 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001bfe:	f7ff ff5b 	bl	8001ab8 <MPU6050_GET_GYRO_ZH>
 8001c02:	4603      	mov	r3, r0
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	b21c      	sxth	r4, r3
 8001c08:	f7ff ff6e 	bl	8001ae8 <MPU6050_GET_GYRO_ZL>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	4323      	orrs	r3, r4
 8001c12:	80fb      	strh	r3, [r7, #6]
	return data;
 8001c14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd90      	pop	{r4, r7, pc}

08001c20 <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001c26:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <MPU6050_READ_ID+0x2c>)
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	9302      	str	r3, [sp, #8]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	1dfb      	adds	r3, r7, #7
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2301      	movs	r3, #1
 8001c38:	2275      	movs	r2, #117	@ 0x75
 8001c3a:	21d0      	movs	r1, #208	@ 0xd0
 8001c3c:	f00c ffca 	bl	800ebd4 <HAL_I2C_Mem_Read>
	return data;
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	b25b      	sxtb	r3, r3
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	240000a0 	.word	0x240000a0

08001c50 <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001c56:	2302      	movs	r3, #2
 8001c58:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001c5a:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	2301      	movs	r3, #1
 8001c60:	9302      	str	r3, [sp, #8]
 8001c62:	2301      	movs	r3, #1
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	1dfb      	adds	r3, r7, #7
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	2237      	movs	r2, #55	@ 0x37
 8001c6e:	21d0      	movs	r1, #208	@ 0xd0
 8001c70:	f00c fe9c 	bl	800e9ac <HAL_I2C_Mem_Write>
}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	240000a0 	.word	0x240000a0

08001c80 <Complementary_getFilter>:

    return Kalman->angle;
};


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	@ 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	61f8      	str	r0, [r7, #28]
 8001c88:	ed87 0a06 	vstr	s0, [r7, #24]
 8001c8c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001c90:	ed87 1a04 	vstr	s2, [r7, #16]
 8001c94:	edc7 1a03 	vstr	s3, [r7, #12]
 8001c98:	ed87 2a02 	vstr	s4, [r7, #8]
 8001c9c:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang)+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));//
 8001ca0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ca4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ca8:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8001d68 <Complementary_getFilter+0xe8>
 8001cac:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cb0:	4b31      	ldr	r3, [pc, #196]	@ (8001d78 <Complementary_getFilter+0xf8>)
 8001cb2:	ed93 7a00 	vldr	s14, [r3]
 8001cb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ccc:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001d70 <Complementary_getFilter+0xf0>
 8001cd0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cd4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001cd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang)+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001ce2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ce6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cea:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8001d68 <Complementary_getFilter+0xe8>
 8001cee:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cf2:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <Complementary_getFilter+0xf8>)
 8001cf4:	ed93 7a00 	vldr	s14, [r3]
 8001cf8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d0e:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001d70 <Complementary_getFilter+0xf0>
 8001d12:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001d16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (1*((gz_ang*looptime)+Complementary_Filter_st->oz));
 8001d24:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <Complementary_getFilter+0xf8>)
 8001d26:	ed93 7a00 	vldr	s14, [r3]
 8001d2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001d5a:	bf00      	nop
 8001d5c:	3724      	adds	r7, #36	@ 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	47ae147b 	.word	0x47ae147b
 8001d6c:	3f947ae1 	.word	0x3f947ae1
 8001d70:	f5c28f5c 	.word	0xf5c28f5c
 8001d74:	3fef5c28 	.word	0x3fef5c28
 8001d78:	0801ea5c 	.word	0x0801ea5c

08001d7c <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001d86:	2001      	movs	r0, #1
 8001d88:	f007 fc04 	bl	8009594 <HAL_Delay>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001da0:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <nRF24_SendSpi+0x28>)
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	f012 fe89 	bl	8014ac4 <HAL_SPI_Transmit>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	240000a4 	.word	0x240000a4

08001dc0 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <nRF24_ReadSpi+0x28>)
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	f013 f861 	bl	8014ea0 <HAL_SPI_Receive>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	240000a4 	.word	0x240000a4

08001dec <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2180      	movs	r1, #128	@ 0x80
 8001dfe:	480c      	ldr	r0, [pc, #48]	@ (8001e30 <nRF24_ReadRegister+0x44>)
 8001e00:	f00c fd04 	bl	800e80c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001e04:	1dfb      	adds	r3, r7, #7
 8001e06:	2101      	movs	r1, #1
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ffc3 	bl	8001d94 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001e0e:	f107 030f 	add.w	r3, r7, #15
 8001e12:	2101      	movs	r1, #1
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ffd3 	bl	8001dc0 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	2180      	movs	r1, #128	@ 0x80
 8001e1e:	4804      	ldr	r0, [pc, #16]	@ (8001e30 <nRF24_ReadRegister+0x44>)
 8001e20:	f00c fcf4 	bl	800e80c <HAL_GPIO_WritePin>

	return result;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	58020400 	.word	0x58020400

08001e34 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	71fb      	strb	r3, [r7, #7]
 8001e40:	4613      	mov	r3, r2
 8001e42:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2180      	movs	r1, #128	@ 0x80
 8001e4c:	480a      	ldr	r0, [pc, #40]	@ (8001e78 <nRF24_ReadRegisters+0x44>)
 8001e4e:	f00c fcdd 	bl	800e80c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e52:	1dfb      	adds	r3, r7, #7
 8001e54:	2101      	movs	r1, #1
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff9c 	bl	8001d94 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001e5c:	79bb      	ldrb	r3, [r7, #6]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	6838      	ldr	r0, [r7, #0]
 8001e62:	f7ff ffad 	bl	8001dc0 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001e66:	2201      	movs	r2, #1
 8001e68:	2180      	movs	r1, #128	@ 0x80
 8001e6a:	4803      	ldr	r0, [pc, #12]	@ (8001e78 <nRF24_ReadRegisters+0x44>)
 8001e6c:	f00c fcce 	bl	800e80c <HAL_GPIO_WritePin>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	58020400 	.word	0x58020400

08001e7c <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	460a      	mov	r2, r1
 8001e86:	71fb      	strb	r3, [r7, #7]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f043 0320 	orr.w	r3, r3, #32
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001e96:	79bb      	ldrb	r3, [r7, #6]
 8001e98:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2180      	movs	r1, #128	@ 0x80
 8001e9e:	4809      	ldr	r0, [pc, #36]	@ (8001ec4 <nRF24_WriteRegister+0x48>)
 8001ea0:	f00c fcb4 	bl	800e80c <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001ea4:	f107 030c 	add.w	r3, r7, #12
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ff72 	bl	8001d94 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	2180      	movs	r1, #128	@ 0x80
 8001eb4:	4803      	ldr	r0, [pc, #12]	@ (8001ec4 <nRF24_WriteRegister+0x48>)
 8001eb6:	f00c fca9 	bl	800e80c <HAL_GPIO_WritePin>
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	58020400 	.word	0x58020400

08001ec8 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	f043 0320 	orr.w	r3, r3, #32
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2180      	movs	r1, #128	@ 0x80
 8001ee6:	480b      	ldr	r0, [pc, #44]	@ (8001f14 <nRF24_WriteRegisters+0x4c>)
 8001ee8:	f00c fc90 	bl	800e80c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001eec:	1dfb      	adds	r3, r7, #7
 8001eee:	2101      	movs	r1, #1
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff4f 	bl	8001d94 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001ef6:	79bb      	ldrb	r3, [r7, #6]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	6838      	ldr	r0, [r7, #0]
 8001efc:	f7ff ff4a 	bl	8001d94 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001f00:	2201      	movs	r2, #1
 8001f02:	2180      	movs	r1, #128	@ 0x80
 8001f04:	4803      	ldr	r0, [pc, #12]	@ (8001f14 <nRF24_WriteRegisters+0x4c>)
 8001f06:	f00c fc81 	bl	800e80c <HAL_GPIO_WritePin>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	58020400 	.word	0x58020400

08001f18 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8001f1e:	f000 f84d 	bl	8001fbc <nRF24_ReadConfig>
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001f26:	4910      	ldr	r1, [pc, #64]	@ (8001f68 <nRF24_RX_Mode+0x50>)
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f000 f9f6 	bl	800231a <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 f843 	bl	8001fcc <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f46:	2070      	movs	r0, #112	@ 0x70
 8001f48:	f000 f89b 	bl	8002082 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f4c:	f000 f8a8 	bl	80020a0 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f50:	f000 f8c0 	bl	80020d4 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001f54:	2201      	movs	r2, #1
 8001f56:	2140      	movs	r1, #64	@ 0x40
 8001f58:	4804      	ldr	r0, [pc, #16]	@ (8001f6c <nRF24_RX_Mode+0x54>)
 8001f5a:	f00c fc57 	bl	800e80c <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	240000a8 	.word	0x240000a8
 8001f6c:	58020400 	.word	0x58020400

08001f70 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8001f76:	2200      	movs	r2, #0
 8001f78:	2140      	movs	r1, #64	@ 0x40
 8001f7a:	480f      	ldr	r0, [pc, #60]	@ (8001fb8 <nRF24_TX_Mode+0x48>)
 8001f7c:	f00c fc46 	bl	800e80c <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001f80:	f000 f81c 	bl	8001fbc <nRF24_ReadConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f043 0302 	orr.w	r3, r3, #2
 8001f8e:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f023 0301 	bic.w	r3, r3, #1
 8001f96:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f816 	bl	8001fcc <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001fa0:	2070      	movs	r0, #112	@ 0x70
 8001fa2:	f000 f86e 	bl	8002082 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001fa6:	f000 f87b 	bl	80020a0 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001faa:	f000 f893 	bl	80020d4 <nRF24_FlushTX>

	//nRF24_Delay(1);
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	58020400 	.word	0x58020400

08001fbc <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f7ff ff13 	bl	8001dec <nRF24_ReadRegister>
 8001fc6:	4603      	mov	r3, r0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f7ff ff4e 	bl	8001e7c <nRF24_WriteRegister>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001ff2:	2006      	movs	r0, #6
 8001ff4:	f7ff fefa 	bl	8001dec <nRF24_ReadRegister>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	f023 0307 	bic.w	r3, r3, #7
 8002002:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	b25a      	sxtb	r2, r3
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	4313      	orrs	r3, r2
 8002010:	b25b      	sxtb	r3, r3
 8002012:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	4619      	mov	r1, r3
 8002018:	2006      	movs	r0, #6
 800201a:	f7ff ff2f 	bl	8001e7c <nRF24_WriteRegister>
}
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002030:	2006      	movs	r0, #6
 8002032:	f7ff fedb 	bl	8001dec <nRF24_ReadRegister>
 8002036:	4603      	mov	r3, r0
 8002038:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002040:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d104      	bne.n	8002052 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	f043 0320 	orr.w	r3, r3, #32
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	e006      	b.n	8002060 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d103      	bne.n	8002060 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	f043 0308 	orr.w	r3, r3, #8
 800205e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	4619      	mov	r1, r3
 8002064:	2006      	movs	r0, #6
 8002066:	f7ff ff09 	bl	8001e7c <nRF24_WriteRegister>
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8002076:	2007      	movs	r0, #7
 8002078:	f7ff feb8 	bl	8001dec <nRF24_ReadRegister>
 800207c:	4603      	mov	r3, r0
}
 800207e:	4618      	mov	r0, r3
 8002080:	bd80      	pop	{r7, pc}

08002082 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	4619      	mov	r1, r3
 8002090:	2007      	movs	r0, #7
 8002092:	f7ff fef3 	bl	8001e7c <nRF24_WriteRegister>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 80020a6:	23e2      	movs	r3, #226	@ 0xe2
 80020a8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020aa:	2200      	movs	r2, #0
 80020ac:	2180      	movs	r1, #128	@ 0x80
 80020ae:	4808      	ldr	r0, [pc, #32]	@ (80020d0 <nRF24_FlushRX+0x30>)
 80020b0:	f00c fbac 	bl	800e80c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	2101      	movs	r1, #1
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fe6b 	bl	8001d94 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020be:	2201      	movs	r2, #1
 80020c0:	2180      	movs	r1, #128	@ 0x80
 80020c2:	4803      	ldr	r0, [pc, #12]	@ (80020d0 <nRF24_FlushRX+0x30>)
 80020c4:	f00c fba2 	bl	800e80c <HAL_GPIO_WritePin>
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	58020400 	.word	0x58020400

080020d4 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80020da:	23e1      	movs	r3, #225	@ 0xe1
 80020dc:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020de:	2200      	movs	r2, #0
 80020e0:	2180      	movs	r1, #128	@ 0x80
 80020e2:	4808      	ldr	r0, [pc, #32]	@ (8002104 <nRF24_FlushTX+0x30>)
 80020e4:	f00c fb92 	bl	800e80c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80020e8:	1dfb      	adds	r3, r7, #7
 80020ea:	2101      	movs	r1, #1
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fe51 	bl	8001d94 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020f2:	2201      	movs	r2, #1
 80020f4:	2180      	movs	r1, #128	@ 0x80
 80020f6:	4803      	ldr	r0, [pc, #12]	@ (8002104 <nRF24_FlushTX+0x30>)
 80020f8:	f00c fb88 	bl	800e80c <HAL_GPIO_WritePin>
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	58020400 	.word	0x58020400

08002108 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002112:	f7ff ff53 	bl	8001fbc <nRF24_ReadConfig>
 8002116:	4603      	mov	r3, r0
 8002118:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	f043 0308 	orr.w	r3, r3, #8
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e003      	b.n	8002132 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	f023 0308 	bic.w	r3, r3, #8
 8002130:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff49 	bl	8001fcc <nRF24_WriteConfig>
}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800214c:	f7ff ff36 	bl	8001fbc <nRF24_ReadConfig>
 8002150:	4603      	mov	r3, r0
 8002152:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d104      	bne.n	8002164 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	73fb      	strb	r3, [r7, #15]
 8002162:	e003      	b.n	800216c <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	f023 0304 	bic.w	r3, r3, #4
 800216a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff2c 	bl	8001fcc <nRF24_WriteConfig>
}
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	460a      	mov	r2, r1
 8002186:	71fb      	strb	r3, [r7, #7]
 8002188:	4613      	mov	r3, r2
 800218a:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	b25a      	sxtb	r2, r3
 8002192:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	b25b      	sxtb	r3, r3
 800219c:	4313      	orrs	r3, r2
 800219e:	b25b      	sxtb	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4619      	mov	r1, r3
 80021a4:	2004      	movs	r0, #4
 80021a6:	f7ff fe69 	bl	8001e7c <nRF24_WriteRegister>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	4619      	mov	r1, r3
 80021c6:	2005      	movs	r0, #5
 80021c8:	f7ff fe58 	bl	8001e7c <nRF24_WriteRegister>
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	460a      	mov	r2, r1
 80021de:	71fb      	strb	r3, [r7, #7]
 80021e0:	4613      	mov	r3, r2
 80021e2:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	2b05      	cmp	r3, #5
 80021e8:	d901      	bls.n	80021ee <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 80021ea:	2305      	movs	r3, #5
 80021ec:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	3311      	adds	r3, #17
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	79bb      	ldrb	r3, [r7, #6]
 80021f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	4619      	mov	r1, r3
 80021fe:	4610      	mov	r0, r2
 8002200:	f7ff fe3c 	bl	8001e7c <nRF24_WriteRegister>
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	460a      	mov	r2, r1
 8002216:	71fb      	strb	r3, [r7, #7]
 8002218:	4613      	mov	r3, r2
 800221a:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	2b05      	cmp	r3, #5
 8002220:	d901      	bls.n	8002226 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8002222:	2305      	movs	r3, #5
 8002224:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8002226:	2002      	movs	r0, #2
 8002228:	f7ff fde0 	bl	8001dec <nRF24_ReadRegister>
 800222c:	4603      	mov	r3, r0
 800222e:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002230:	79bb      	ldrb	r3, [r7, #6]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d10a      	bne.n	800224c <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2201      	movs	r2, #1
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	b25a      	sxtb	r2, r3
 8002240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002244:	4313      	orrs	r3, r2
 8002246:	b25b      	sxtb	r3, r3
 8002248:	73fb      	strb	r3, [r7, #15]
 800224a:	e00b      	b.n	8002264 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	2201      	movs	r2, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	b25b      	sxtb	r3, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	b25a      	sxtb	r2, r3
 800225a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225e:	4013      	ands	r3, r2
 8002260:	b25b      	sxtb	r3, r3
 8002262:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	4619      	mov	r1, r3
 8002268:	2002      	movs	r0, #2
 800226a:	f7ff fe07 	bl	8001e7c <nRF24_WriteRegister>
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	460a      	mov	r2, r1
 8002280:	71fb      	strb	r3, [r7, #7]
 8002282:	4613      	mov	r3, r2
 8002284:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d901      	bls.n	8002290 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 800228c:	2305      	movs	r3, #5
 800228e:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002290:	2001      	movs	r0, #1
 8002292:	f7ff fdab 	bl	8001dec <nRF24_ReadRegister>
 8002296:	4603      	mov	r3, r0
 8002298:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 800229a:	79bb      	ldrb	r3, [r7, #6]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d10a      	bne.n	80022b6 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	2201      	movs	r2, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	b25a      	sxtb	r2, r3
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	b25b      	sxtb	r3, r3
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	e00b      	b.n	80022ce <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	2201      	movs	r2, #1
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	b25b      	sxtb	r3, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	b25a      	sxtb	r2, r3
 80022c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c8:	4013      	ands	r3, r2
 80022ca:	b25b      	sxtb	r3, r3
 80022cc:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	4619      	mov	r1, r3
 80022d2:	2001      	movs	r0, #1
 80022d4:	f7ff fdd2 	bl	8001e7c <nRF24_WriteRegister>
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d901      	bls.n	80022f4 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80022f0:	2305      	movs	r3, #5
 80022f2:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d801      	bhi.n	80022fe <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80022fa:	2303      	movs	r3, #3
 80022fc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	3b02      	subs	r3, #2
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	4619      	mov	r1, r3
 800230c:	2003      	movs	r0, #3
 800230e:	f7ff fdb5 	bl	8001e7c <nRF24_WriteRegister>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	6039      	str	r1, [r7, #0]
 8002324:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <nRF24_SetRXAddress+0x18>
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d11d      	bne.n	800236e <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002332:	2300      	movs	r3, #0
 8002334:	73fb      	strb	r3, [r7, #15]
 8002336:	e00d      	b.n	8002354 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	441a      	add	r2, r3
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	f1c3 0302 	rsb	r3, r3, #2
 8002344:	7812      	ldrb	r2, [r2, #0]
 8002346:	3310      	adds	r3, #16
 8002348:	443b      	add	r3, r7
 800234a:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	3301      	adds	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d9ee      	bls.n	8002338 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	330a      	adds	r3, #10
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f107 010c 	add.w	r1, r7, #12
 8002364:	2203      	movs	r2, #3
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fdae 	bl	8001ec8 <nRF24_WriteRegisters>
	{
 800236c:	e00a      	b.n	8002384 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	330a      	adds	r3, #10
 8002372:	b2da      	uxtb	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	3302      	adds	r3, #2
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4619      	mov	r1, r3
 800237c:	4610      	mov	r0, r2
 800237e:	f7ff fd7d 	bl	8001e7c <nRF24_WriteRegister>
}
 8002382:	bf00      	nop
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8002394:	f107 030c 	add.w	r3, r7, #12
 8002398:	2203      	movs	r2, #3
 800239a:	4619      	mov	r1, r3
 800239c:	200a      	movs	r0, #10
 800239e:	f7ff fd49 	bl	8001e34 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	e00c      	b.n	80023c2 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	f1c3 0302 	rsb	r3, r3, #2
 80023b0:	3210      	adds	r2, #16
 80023b2:	443a      	add	r2, r7
 80023b4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80023b8:	4a16      	ldr	r2, [pc, #88]	@ (8002414 <nRF24_SetTXAddress+0x88>)
 80023ba:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	3301      	adds	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d9ef      	bls.n	80023a8 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e00d      	b.n	80023ea <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	441a      	add	r2, r3
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	f1c3 0302 	rsb	r3, r3, #2
 80023da:	7812      	ldrb	r2, [r2, #0]
 80023dc:	3310      	adds	r3, #16
 80023de:	443b      	add	r3, r7
 80023e0:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	3301      	adds	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d9ee      	bls.n	80023ce <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	2203      	movs	r2, #3
 80023f6:	4619      	mov	r1, r3
 80023f8:	200a      	movs	r0, #10
 80023fa:	f7ff fd65 	bl	8001ec8 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80023fe:	f107 030c 	add.w	r3, r7, #12
 8002402:	2203      	movs	r2, #3
 8002404:	4619      	mov	r1, r3
 8002406:	2010      	movs	r0, #16
 8002408:	f7ff fd5e 	bl	8001ec8 <nRF24_WriteRegisters>

}
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	240000a8 	.word	0x240000a8

08002418 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 800241e:	f7ff fe28 	bl	8002072 <nRF24_ReadStatus>
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800242c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fe26 	bl	8002082 <nRF24_WriteStatus>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002448:	f7ff fdb8 	bl	8001fbc <nRF24_ReadConfig>
 800244c:	4603      	mov	r3, r0
 800244e:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d104      	bne.n	8002460 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	e003      	b.n	8002468 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002466:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fdae 	bl	8001fcc <nRF24_WriteConfig>
}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002482:	f7ff fd9b 	bl	8001fbc <nRF24_ReadConfig>
 8002486:	4603      	mov	r3, r0
 8002488:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d104      	bne.n	800249a <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	f043 0320 	orr.w	r3, r3, #32
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	e003      	b.n	80024a2 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	f023 0320 	bic.w	r3, r3, #32
 80024a0:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fd91 	bl	8001fcc <nRF24_WriteConfig>
}
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024bc:	f7ff fd7e 	bl	8001fbc <nRF24_ReadConfig>
 80024c0:	4603      	mov	r3, r0
 80024c2:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d104      	bne.n	80024d4 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	f043 0310 	orr.w	r3, r3, #16
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	e003      	b.n	80024dc <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	f023 0310 	bic.w	r3, r3, #16
 80024da:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fd74 	bl	8001fcc <nRF24_WriteConfig>
}
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80024f4:	2220      	movs	r2, #32
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	20a0      	movs	r0, #160	@ 0xa0
 80024fa:	f7ff fce5 	bl	8001ec8 <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 800250e:	2201      	movs	r2, #1
 8002510:	2140      	movs	r1, #64	@ 0x40
 8002512:	4810      	ldr	r0, [pc, #64]	@ (8002554 <nRF24_WaitTX+0x4c>)
 8002514:	f00c f97a 	bl	800e80c <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8002518:	2001      	movs	r0, #1
 800251a:	f7ff fc2f 	bl	8001d7c <nRF24_Delay>
	NRF24_CE_LOW;
 800251e:	2200      	movs	r2, #0
 8002520:	2140      	movs	r1, #64	@ 0x40
 8002522:	480c      	ldr	r0, [pc, #48]	@ (8002554 <nRF24_WaitTX+0x4c>)
 8002524:	f00c f972 	bl	800e80c <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8002528:	2001      	movs	r0, #1
 800252a:	f7ff fc27 	bl	8001d7c <nRF24_Delay>
		status = nRF24_ReadStatus();
 800252e:	f7ff fda0 	bl	8002072 <nRF24_ReadStatus>
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b00      	cmp	r3, #0
 800253e:	d104      	bne.n	800254a <nRF24_WaitTX+0x42>
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0ee      	beq.n	8002528 <nRF24_WaitTX+0x20>

}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	58020400 	.word	0x58020400

08002558 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002560:	2220      	movs	r2, #32
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	2061      	movs	r0, #97	@ 0x61
 8002566:	f7ff fc65 	bl	8001e34 <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 800256a:	2140      	movs	r1, #64	@ 0x40
 800256c:	2007      	movs	r0, #7
 800256e:	f7ff fc85 	bl	8001e7c <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 8002572:	f7ff fd7e 	bl	8002072 <nRF24_ReadStatus>
 8002576:	4603      	mov	r3, r0
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002580:	2120      	movs	r1, #32
 8002582:	2007      	movs	r0, #7
 8002584:	f7ff fc7a 	bl	8001e7c <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 800259a:	f000 f811 	bl	80025c0 <nRF24_ReadFifoStatus>
 800259e:	4603      	mov	r3, r0
 80025a0:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	fa42 f303 	asr.w	r3, r2, r3
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 80025c4:	2017      	movs	r0, #23
 80025c6:	f7ff fc11 	bl	8001dec <nRF24_ReadRegister>
 80025ca:	4603      	mov	r3, r0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80025d8:	4a25      	ldr	r2, [pc, #148]	@ (8002670 <nRF24_Init+0xa0>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80025de:	2200      	movs	r2, #0
 80025e0:	2140      	movs	r1, #64	@ 0x40
 80025e2:	4824      	ldr	r0, [pc, #144]	@ (8002674 <nRF24_Init+0xa4>)
 80025e4:	f00c f912 	bl	800e80c <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80025e8:	2201      	movs	r2, #1
 80025ea:	2180      	movs	r1, #128	@ 0x80
 80025ec:	4821      	ldr	r0, [pc, #132]	@ (8002674 <nRF24_Init+0xa4>)
 80025ee:	f00c f90d 	bl	800e80c <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 80025f2:	200a      	movs	r0, #10
 80025f4:	f006 ffce 	bl	8009594 <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80025f8:	2003      	movs	r0, #3
 80025fa:	f7ff fcf5 	bl	8001fe8 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 80025fe:	2001      	movs	r0, #1
 8002600:	f7ff fd11 	bl	8002026 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8002604:	2001      	movs	r0, #1
 8002606:	f7ff fd7f 	bl	8002108 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 800260a:	2000      	movs	r0, #0
 800260c:	f7ff fd99 	bl	8002142 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 8002610:	2100      	movs	r1, #0
 8002612:	2000      	movs	r0, #0
 8002614:	f7ff fdb2 	bl	800217c <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8002618:	2100      	movs	r1, #0
 800261a:	201c      	movs	r0, #28
 800261c:	f7ff fc2e 	bl	8001e7c <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8002620:	2120      	movs	r1, #32
 8002622:	2000      	movs	r0, #0
 8002624:	f7ff fdd6 	bl	80021d4 <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 8002628:	200f      	movs	r0, #15
 800262a:	f7ff fdc2 	bl	80021b2 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 800262e:	2101      	movs	r1, #1
 8002630:	2000      	movs	r0, #0
 8002632:	f7ff fdeb 	bl	800220c <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8002636:	2101      	movs	r1, #1
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff fe1c 	bl	8002276 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 800263e:	2003      	movs	r0, #3
 8002640:	f7ff fe4e 	bl	80022e0 <nRF24_SetAddressWidth>

	HAL_Delay(1);
 8002644:	2001      	movs	r0, #1
 8002646:	f006 ffa5 	bl	8009594 <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 800264a:	2001      	movs	r0, #1
 800264c:	f7ff fef7 	bl	800243e <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8002650:	2000      	movs	r0, #0
 8002652:	f7ff ff11 	bl	8002478 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 8002656:	2000      	movs	r0, #0
 8002658:	f7ff ff2b 	bl	80024b2 <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 800265c:	2001      	movs	r0, #1
 800265e:	f006 ff99 	bl	8009594 <HAL_Delay>

	nRF24_ClearInterrupts();
 8002662:	f7ff fed9 	bl	8002418 <nRF24_ClearInterrupts>


}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	240000a4 	.word	0x240000a4
 8002674:	58020400 	.word	0x58020400

08002678 <nRF24_Inittest>:
void nRF24_Inittest(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
//	xz[5] = nRF24_ReadRegister(NRF24_EN_RXADDR);
//	xz[6] = nRF24_ReadRegister(NRF24_EN_AA);
//	xz[7] = nRF24_ReadRegister(NRF24_SETUP_AW);
//	xz[8] = nRF24_ReadConfig();

}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800268c:	f3bf 8f4f 	dsb	sy
}
 8002690:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002692:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <__NVIC_SystemReset+0x24>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800269a:	4904      	ldr	r1, [pc, #16]	@ (80026ac <__NVIC_SystemReset+0x24>)
 800269c:	4b04      	ldr	r3, [pc, #16]	@ (80026b0 <__NVIC_SystemReset+0x28>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80026a2:	f3bf 8f4f 	dsb	sy
}
 80026a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <__NVIC_SystemReset+0x20>
 80026ac:	e000ed00 	.word	0xe000ed00
 80026b0:	05fa0004 	.word	0x05fa0004

080026b4 <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	75fb      	strb	r3, [r7, #23]
 80026be:	2300      	movs	r3, #0
 80026c0:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 80026c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002740 <interpretcommand+0x8c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	e02e      	b.n	800272c <interpretcommand+0x78>

		if(words[j] == ' '){
 80026ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002744 <interpretcommand+0x90>)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	d102      	bne.n	80026e0 <interpretcommand+0x2c>
			vcount++;
 80026da:	7dfb      	ldrb	r3, [r7, #23]
 80026dc:	3301      	adds	r3, #1
 80026de:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d108      	bne.n	80026f8 <interpretcommand+0x44>
			command[j] = words[j];
 80026e6:	4a17      	ldr	r2, [pc, #92]	@ (8002744 <interpretcommand+0x90>)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	7819      	ldrb	r1, [r3, #0]
 80026ee:	4a16      	ldr	r2, [pc, #88]	@ (8002748 <interpretcommand+0x94>)
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	460a      	mov	r2, r1
 80026f6:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d113      	bne.n	8002726 <interpretcommand+0x72>
			value1[J1] = words[j];
 80026fe:	7dbb      	ldrb	r3, [r7, #22]
 8002700:	4910      	ldr	r1, [pc, #64]	@ (8002744 <interpretcommand+0x90>)
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	440a      	add	r2, r1
 8002706:	7812      	ldrb	r2, [r2, #0]
 8002708:	3318      	adds	r3, #24
 800270a:	443b      	add	r3, r7
 800270c:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 8002710:	7dba      	ldrb	r2, [r7, #22]
 8002712:	7dbb      	ldrb	r3, [r7, #22]
 8002714:	3218      	adds	r2, #24
 8002716:	443a      	add	r2, r7
 8002718:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 800271c:	4a0b      	ldr	r2, [pc, #44]	@ (800274c <interpretcommand+0x98>)
 800271e:	54d1      	strb	r1, [r2, r3]
			J1++;
 8002720:	7dbb      	ldrb	r3, [r7, #22]
 8002722:	3301      	adds	r3, #1
 8002724:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	3301      	adds	r3, #1
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002730:	ddcd      	ble.n	80026ce <interpretcommand+0x1a>
		}
	}
}
 8002732:	bf00      	nop
 8002734:	bf00      	nop
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	000041d6 	.word	0x000041d6
 8002744:	000041cc 	.word	0x000041cc
 8002748:	000041c8 	.word	0x000041c8
 800274c:	000041b8 	.word	0x000041b8

08002750 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b50      	cmp	r3, #80	@ 0x50
 8002760:	d14c      	bne.n	80027fc <executecommand+0xac>
	{
		p_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002762:	4bd5      	ldr	r3, [pc, #852]	@ (8002ab8 <executecommand+0x368>)
 8002764:	785b      	ldrb	r3, [r3, #1]
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276e:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002abc <executecommand+0x36c>
 8002772:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002776:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002ac0 <executecommand+0x370>
 800277a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800277e:	4bce      	ldr	r3, [pc, #824]	@ (8002ab8 <executecommand+0x368>)
 8002780:	789b      	ldrb	r3, [r3, #2]
 8002782:	ee07 3a90 	vmov	s15, r3
 8002786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800278a:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002abc <executecommand+0x36c>
 800278e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002792:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002796:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800279a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800279e:	4bc6      	ldr	r3, [pc, #792]	@ (8002ab8 <executecommand+0x368>)
 80027a0:	78db      	ldrb	r3, [r3, #3]
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027aa:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002abc <executecommand+0x36c>
 80027ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80027b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027b6:	4bc0      	ldr	r3, [pc, #768]	@ (8002ab8 <executecommand+0x368>)
 80027b8:	791b      	ldrb	r3, [r3, #4]
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c2:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002abc <executecommand+0x36c>
 80027c6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80027ca:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80027ce:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027d6:	4bb8      	ldr	r3, [pc, #736]	@ (8002ab8 <executecommand+0x368>)
 80027d8:	795b      	ldrb	r3, [r3, #5]
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e2:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002abc <executecommand+0x36c>
 80027e6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80027ea:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002ac0 <executecommand+0x370>
 80027ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f6:	4bb3      	ldr	r3, [pc, #716]	@ (8002ac4 <executecommand+0x374>)
 80027f8:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'I')
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b49      	cmp	r3, #73	@ 0x49
 8002802:	d14f      	bne.n	80028a4 <executecommand+0x154>
	{
		i_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002804:	4bac      	ldr	r3, [pc, #688]	@ (8002ab8 <executecommand+0x368>)
 8002806:	785b      	ldrb	r3, [r3, #1]
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002810:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002abc <executecommand+0x36c>
 8002814:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002818:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002ac0 <executecommand+0x370>
 800281c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002820:	4ba5      	ldr	r3, [pc, #660]	@ (8002ab8 <executecommand+0x368>)
 8002822:	789b      	ldrb	r3, [r3, #2]
 8002824:	ee07 3a90 	vmov	s15, r3
 8002828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282c:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002abc <executecommand+0x36c>
 8002830:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002834:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002838:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800283c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002840:	4b9d      	ldr	r3, [pc, #628]	@ (8002ab8 <executecommand+0x368>)
 8002842:	78db      	ldrb	r3, [r3, #3]
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284c:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002abc <executecommand+0x36c>
 8002850:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002854:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002858:	4b97      	ldr	r3, [pc, #604]	@ (8002ab8 <executecommand+0x368>)
 800285a:	791b      	ldrb	r3, [r3, #4]
 800285c:	ee07 3a90 	vmov	s15, r3
 8002860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002864:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002abc <executecommand+0x36c>
 8002868:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800286c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002870:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002874:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002878:	4b8f      	ldr	r3, [pc, #572]	@ (8002ab8 <executecommand+0x368>)
 800287a:	795b      	ldrb	r3, [r3, #5]
 800287c:	ee07 3a90 	vmov	s15, r3
 8002880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002884:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002abc <executecommand+0x36c>
 8002888:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800288c:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002ac0 <executecommand+0x370>
 8002890:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002898:	4b8b      	ldr	r3, [pc, #556]	@ (8002ac8 <executecommand+0x378>)
 800289a:	edc3 7a00 	vstr	s15, [r3]
		error_sum_pitch = 0;
 800289e:	4b8b      	ldr	r3, [pc, #556]	@ (8002acc <executecommand+0x37c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'D')
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b44      	cmp	r3, #68	@ 0x44
 80028aa:	d14c      	bne.n	8002946 <executecommand+0x1f6>
	{
		d_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 80028ac:	4b82      	ldr	r3, [pc, #520]	@ (8002ab8 <executecommand+0x368>)
 80028ae:	785b      	ldrb	r3, [r3, #1]
 80028b0:	ee07 3a90 	vmov	s15, r3
 80028b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002abc <executecommand+0x36c>
 80028bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028c0:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002ad0 <executecommand+0x380>
 80028c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028c8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab8 <executecommand+0x368>)
 80028ca:	789b      	ldrb	r3, [r3, #2]
 80028cc:	ee07 3a90 	vmov	s15, r3
 80028d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028d4:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002abc <executecommand+0x36c>
 80028d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028dc:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002ac0 <executecommand+0x370>
 80028e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e8:	4b73      	ldr	r3, [pc, #460]	@ (8002ab8 <executecommand+0x368>)
 80028ea:	78db      	ldrb	r3, [r3, #3]
 80028ec:	ee07 3a90 	vmov	s15, r3
 80028f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f4:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002abc <executecommand+0x36c>
 80028f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028fc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002900:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002908:	4b6b      	ldr	r3, [pc, #428]	@ (8002ab8 <executecommand+0x368>)
 800290a:	791b      	ldrb	r3, [r3, #4]
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002914:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002abc <executecommand+0x36c>
 8002918:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800291c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002920:	4b65      	ldr	r3, [pc, #404]	@ (8002ab8 <executecommand+0x368>)
 8002922:	795b      	ldrb	r3, [r3, #5]
 8002924:	ee07 3a90 	vmov	s15, r3
 8002928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800292c:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002abc <executecommand+0x36c>
 8002930:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002934:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002938:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800293c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002940:	4b64      	ldr	r3, [pc, #400]	@ (8002ad4 <executecommand+0x384>)
 8002942:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'p')
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b70      	cmp	r3, #112	@ 0x70
 800294c:	d14c      	bne.n	80029e8 <executecommand+0x298>
	{
		p_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800294e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ab8 <executecommand+0x368>)
 8002950:	785b      	ldrb	r3, [r3, #1]
 8002952:	ee07 3a90 	vmov	s15, r3
 8002956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295a:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002abc <executecommand+0x36c>
 800295e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002962:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002ac0 <executecommand+0x370>
 8002966:	ee27 7a87 	vmul.f32	s14, s15, s14
 800296a:	4b53      	ldr	r3, [pc, #332]	@ (8002ab8 <executecommand+0x368>)
 800296c:	789b      	ldrb	r3, [r3, #2]
 800296e:	ee07 3a90 	vmov	s15, r3
 8002972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002976:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002abc <executecommand+0x36c>
 800297a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800297e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002982:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298a:	4b4b      	ldr	r3, [pc, #300]	@ (8002ab8 <executecommand+0x368>)
 800298c:	78db      	ldrb	r3, [r3, #3]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002996:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002abc <executecommand+0x36c>
 800299a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800299e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029a2:	4b45      	ldr	r3, [pc, #276]	@ (8002ab8 <executecommand+0x368>)
 80029a4:	791b      	ldrb	r3, [r3, #4]
 80029a6:	ee07 3a90 	vmov	s15, r3
 80029aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ae:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002abc <executecommand+0x36c>
 80029b2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80029b6:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80029ba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029c2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab8 <executecommand+0x368>)
 80029c4:	795b      	ldrb	r3, [r3, #5]
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ce:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002abc <executecommand+0x36c>
 80029d2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80029d6:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002ac0 <executecommand+0x370>
 80029da:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ad8 <executecommand+0x388>)
 80029e4:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'i')
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b69      	cmp	r3, #105	@ 0x69
 80029ee:	d14f      	bne.n	8002a90 <executecommand+0x340>
	{
		i_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80029f0:	4b31      	ldr	r3, [pc, #196]	@ (8002ab8 <executecommand+0x368>)
 80029f2:	785b      	ldrb	r3, [r3, #1]
 80029f4:	ee07 3a90 	vmov	s15, r3
 80029f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002abc <executecommand+0x36c>
 8002a00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a04:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002ac0 <executecommand+0x370>
 8002a08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab8 <executecommand+0x368>)
 8002a0e:	789b      	ldrb	r3, [r3, #2]
 8002a10:	ee07 3a90 	vmov	s15, r3
 8002a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a18:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002abc <executecommand+0x36c>
 8002a1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a20:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a2c:	4b22      	ldr	r3, [pc, #136]	@ (8002ab8 <executecommand+0x368>)
 8002a2e:	78db      	ldrb	r3, [r3, #3]
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a38:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002abc <executecommand+0x36c>
 8002a3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a44:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab8 <executecommand+0x368>)
 8002a46:	791b      	ldrb	r3, [r3, #4]
 8002a48:	ee07 3a90 	vmov	s15, r3
 8002a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a50:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002abc <executecommand+0x36c>
 8002a54:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a58:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a5c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a64:	4b14      	ldr	r3, [pc, #80]	@ (8002ab8 <executecommand+0x368>)
 8002a66:	795b      	ldrb	r3, [r3, #5]
 8002a68:	ee07 3a90 	vmov	s15, r3
 8002a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a70:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002abc <executecommand+0x36c>
 8002a74:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a78:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002ac0 <executecommand+0x370>
 8002a7c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a84:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <executecommand+0x38c>)
 8002a86:	edc3 7a00 	vstr	s15, [r3]
		error_sum_angular_rate_pitch = 0;
 8002a8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ae0 <executecommand+0x390>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'd')
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b64      	cmp	r3, #100	@ 0x64
 8002a96:	d164      	bne.n	8002b62 <executecommand+0x412>
	{
		d_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002a98:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <executecommand+0x368>)
 8002a9a:	785b      	ldrb	r3, [r3, #1]
 8002a9c:	ee07 3a90 	vmov	s15, r3
 8002aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa4:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002abc <executecommand+0x36c>
 8002aa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002aac:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002ad0 <executecommand+0x380>
 8002ab0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ab4:	e016      	b.n	8002ae4 <executecommand+0x394>
 8002ab6:	bf00      	nop
 8002ab8:	000041b8 	.word	0x000041b8
 8002abc:	42400000 	.word	0x42400000
 8002ac0:	42c80000 	.word	0x42c80000
 8002ac4:	000040e4 	.word	0x000040e4
 8002ac8:	000040f0 	.word	0x000040f0
 8002acc:	000040b4 	.word	0x000040b4
 8002ad0:	447a0000 	.word	0x447a0000
 8002ad4:	000040fc 	.word	0x000040fc
 8002ad8:	00004144 	.word	0x00004144
 8002adc:	00004150 	.word	0x00004150
 8002ae0:	000040c0 	.word	0x000040c0
 8002ae4:	4bd3      	ldr	r3, [pc, #844]	@ (8002e34 <executecommand+0x6e4>)
 8002ae6:	789b      	ldrb	r3, [r3, #2]
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af0:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002e38 <executecommand+0x6e8>
 8002af4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002af8:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002e3c <executecommand+0x6ec>
 8002afc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b04:	4bcb      	ldr	r3, [pc, #812]	@ (8002e34 <executecommand+0x6e4>)
 8002b06:	78db      	ldrb	r3, [r3, #3]
 8002b08:	ee07 3a90 	vmov	s15, r3
 8002b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b10:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002e38 <executecommand+0x6e8>
 8002b14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b18:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002b1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b24:	4bc3      	ldr	r3, [pc, #780]	@ (8002e34 <executecommand+0x6e4>)
 8002b26:	791b      	ldrb	r3, [r3, #4]
 8002b28:	ee07 3a90 	vmov	s15, r3
 8002b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b30:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002e38 <executecommand+0x6e8>
 8002b34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b3c:	4bbd      	ldr	r3, [pc, #756]	@ (8002e34 <executecommand+0x6e4>)
 8002b3e:	795b      	ldrb	r3, [r3, #5]
 8002b40:	ee07 3a90 	vmov	s15, r3
 8002b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b48:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002e38 <executecommand+0x6e8>
 8002b4c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b50:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002b54:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b5c:	4bb8      	ldr	r3, [pc, #736]	@ (8002e40 <executecommand+0x6f0>)
 8002b5e:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'F')
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b46      	cmp	r3, #70	@ 0x46
 8002b68:	d150      	bne.n	8002c0c <executecommand+0x4bc>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002b6a:	4bb2      	ldr	r3, [pc, #712]	@ (8002e34 <executecommand+0x6e4>)
 8002b6c:	785b      	ldrb	r3, [r3, #1]
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b76:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002e38 <executecommand+0x6e8>
 8002b7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b7e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002e44 <executecommand+0x6f4>
 8002b82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b86:	4bab      	ldr	r3, [pc, #684]	@ (8002e34 <executecommand+0x6e4>)
 8002b88:	789b      	ldrb	r3, [r3, #2]
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b92:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002e38 <executecommand+0x6e8>
 8002b96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b9a:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002e3c <executecommand+0x6ec>
 8002b9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ba2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ba6:	4ba3      	ldr	r3, [pc, #652]	@ (8002e34 <executecommand+0x6e4>)
 8002ba8:	78db      	ldrb	r3, [r3, #3]
 8002baa:	ee07 3a90 	vmov	s15, r3
 8002bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb2:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002e38 <executecommand+0x6e8>
 8002bb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bba:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002bbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc6:	4b9b      	ldr	r3, [pc, #620]	@ (8002e34 <executecommand+0x6e4>)
 8002bc8:	791b      	ldrb	r3, [r3, #4]
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd2:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002e38 <executecommand+0x6e8>
 8002bd6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bde:	4b95      	ldr	r3, [pc, #596]	@ (8002e34 <executecommand+0x6e4>)
 8002be0:	795b      	ldrb	r3, [r3, #5]
 8002be2:	ee07 3a90 	vmov	s15, r3
 8002be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bea:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002e38 <executecommand+0x6e8>
 8002bee:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002bf2:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002bf6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c02:	ee17 3a90 	vmov	r3, s15
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	4b8f      	ldr	r3, [pc, #572]	@ (8002e48 <executecommand+0x6f8>)
 8002c0a:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b66      	cmp	r3, #102	@ 0x66
 8002c12:	d150      	bne.n	8002cb6 <executecommand+0x566>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002c14:	4b87      	ldr	r3, [pc, #540]	@ (8002e34 <executecommand+0x6e4>)
 8002c16:	785b      	ldrb	r3, [r3, #1]
 8002c18:	ee07 3a90 	vmov	s15, r3
 8002c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c20:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002e38 <executecommand+0x6e8>
 8002c24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c28:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002e44 <executecommand+0x6f4>
 8002c2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c30:	4b80      	ldr	r3, [pc, #512]	@ (8002e34 <executecommand+0x6e4>)
 8002c32:	789b      	ldrb	r3, [r3, #2]
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c3c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002e38 <executecommand+0x6e8>
 8002c40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c44:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002e3c <executecommand+0x6ec>
 8002c48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c50:	4b78      	ldr	r3, [pc, #480]	@ (8002e34 <executecommand+0x6e4>)
 8002c52:	78db      	ldrb	r3, [r3, #3]
 8002c54:	ee07 3a90 	vmov	s15, r3
 8002c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c5c:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002e38 <executecommand+0x6e8>
 8002c60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c64:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c70:	4b70      	ldr	r3, [pc, #448]	@ (8002e34 <executecommand+0x6e4>)
 8002c72:	791b      	ldrb	r3, [r3, #4]
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002e38 <executecommand+0x6e8>
 8002c80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c88:	4b6a      	ldr	r3, [pc, #424]	@ (8002e34 <executecommand+0x6e4>)
 8002c8a:	795b      	ldrb	r3, [r3, #5]
 8002c8c:	ee07 3a90 	vmov	s15, r3
 8002c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c94:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002e38 <executecommand+0x6e8>
 8002c98:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c9c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002ca0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cac:	ee17 3a90 	vmov	r3, s15
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	4b66      	ldr	r3, [pc, #408]	@ (8002e4c <executecommand+0x6fc>)
 8002cb4:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b61      	cmp	r3, #97	@ 0x61
 8002cbc:	d14c      	bne.n	8002d58 <executecommand+0x608>
		{
			p_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002cbe:	4b5d      	ldr	r3, [pc, #372]	@ (8002e34 <executecommand+0x6e4>)
 8002cc0:	785b      	ldrb	r3, [r3, #1]
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cca:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002e38 <executecommand+0x6e8>
 8002cce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cd2:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002e3c <executecommand+0x6ec>
 8002cd6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cda:	4b56      	ldr	r3, [pc, #344]	@ (8002e34 <executecommand+0x6e4>)
 8002cdc:	789b      	ldrb	r3, [r3, #2]
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce6:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002e38 <executecommand+0x6e8>
 8002cea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cee:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002cf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cfa:	4b4e      	ldr	r3, [pc, #312]	@ (8002e34 <executecommand+0x6e4>)
 8002cfc:	78db      	ldrb	r3, [r3, #3]
 8002cfe:	ee07 3a90 	vmov	s15, r3
 8002d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d06:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002e38 <executecommand+0x6e8>
 8002d0a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d12:	4b48      	ldr	r3, [pc, #288]	@ (8002e34 <executecommand+0x6e4>)
 8002d14:	791b      	ldrb	r3, [r3, #4]
 8002d16:	ee07 3a90 	vmov	s15, r3
 8002d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d1e:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002e38 <executecommand+0x6e8>
 8002d22:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d26:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d2a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d32:	4b40      	ldr	r3, [pc, #256]	@ (8002e34 <executecommand+0x6e4>)
 8002d34:	795b      	ldrb	r3, [r3, #5]
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d3e:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002e38 <executecommand+0x6e8>
 8002d42:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d46:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002e3c <executecommand+0x6ec>
 8002d4a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d52:	4b3f      	ldr	r3, [pc, #252]	@ (8002e50 <executecommand+0x700>)
 8002d54:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'b')
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b62      	cmp	r3, #98	@ 0x62
 8002d5e:	d14f      	bne.n	8002e00 <executecommand+0x6b0>
		{
			i_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002d60:	4b34      	ldr	r3, [pc, #208]	@ (8002e34 <executecommand+0x6e4>)
 8002d62:	785b      	ldrb	r3, [r3, #1]
 8002d64:	ee07 3a90 	vmov	s15, r3
 8002d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002e38 <executecommand+0x6e8>
 8002d70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d74:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002e3c <executecommand+0x6ec>
 8002d78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e34 <executecommand+0x6e4>)
 8002d7e:	789b      	ldrb	r3, [r3, #2]
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d88:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002e38 <executecommand+0x6e8>
 8002d8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d90:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d9c:	4b25      	ldr	r3, [pc, #148]	@ (8002e34 <executecommand+0x6e4>)
 8002d9e:	78db      	ldrb	r3, [r3, #3]
 8002da0:	ee07 3a90 	vmov	s15, r3
 8002da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da8:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002e38 <executecommand+0x6e8>
 8002dac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002db0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e34 <executecommand+0x6e4>)
 8002db6:	791b      	ldrb	r3, [r3, #4]
 8002db8:	ee07 3a90 	vmov	s15, r3
 8002dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc0:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002e38 <executecommand+0x6e8>
 8002dc4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002dc8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002dcc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002dd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dd4:	4b17      	ldr	r3, [pc, #92]	@ (8002e34 <executecommand+0x6e4>)
 8002dd6:	795b      	ldrb	r3, [r3, #5]
 8002dd8:	ee07 3a90 	vmov	s15, r3
 8002ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de0:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002e38 <executecommand+0x6e8>
 8002de4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002de8:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002e3c <executecommand+0x6ec>
 8002dec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df4:	4b17      	ldr	r3, [pc, #92]	@ (8002e54 <executecommand+0x704>)
 8002df6:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = 0;
 8002dfa:	4b17      	ldr	r3, [pc, #92]	@ (8002e58 <executecommand+0x708>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'c')
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b63      	cmp	r3, #99	@ 0x63
 8002e06:	d166      	bne.n	8002ed6 <executecommand+0x786>
		{
			d_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002e08:	4b0a      	ldr	r3, [pc, #40]	@ (8002e34 <executecommand+0x6e4>)
 8002e0a:	785b      	ldrb	r3, [r3, #1]
 8002e0c:	ee07 3a90 	vmov	s15, r3
 8002e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e14:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002e38 <executecommand+0x6e8>
 8002e18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e1c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002e44 <executecommand+0x6f4>
 8002e20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e24:	4b03      	ldr	r3, [pc, #12]	@ (8002e34 <executecommand+0x6e4>)
 8002e26:	789b      	ldrb	r3, [r3, #2]
 8002e28:	ee07 3a90 	vmov	s15, r3
 8002e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e30:	e018      	b.n	8002e64 <executecommand+0x714>
 8002e32:	bf00      	nop
 8002e34:	000041b8 	.word	0x000041b8
 8002e38:	42400000 	.word	0x42400000
 8002e3c:	42c80000 	.word	0x42c80000
 8002e40:	0000415c 	.word	0x0000415c
 8002e44:	447a0000 	.word	0x447a0000
 8002e48:	00004074 	.word	0x00004074
 8002e4c:	00004076 	.word	0x00004076
 8002e50:	000040e8 	.word	0x000040e8
 8002e54:	000040f4 	.word	0x000040f4
 8002e58:	000040b8 	.word	0x000040b8
 8002e5c:	42400000 	.word	0x42400000
 8002e60:	42c80000 	.word	0x42c80000
 8002e64:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 8002e5c <executecommand+0x70c>
 8002e68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e6c:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002e60 <executecommand+0x710>
 8002e70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e78:	4bd5      	ldr	r3, [pc, #852]	@ (80031d0 <executecommand+0xa80>)
 8002e7a:	78db      	ldrb	r3, [r3, #3]
 8002e7c:	ee07 3a90 	vmov	s15, r3
 8002e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e84:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 80031d4 <executecommand+0xa84>
 8002e88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e8c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002e90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e98:	4bcd      	ldr	r3, [pc, #820]	@ (80031d0 <executecommand+0xa80>)
 8002e9a:	791b      	ldrb	r3, [r3, #4]
 8002e9c:	ee07 3a90 	vmov	s15, r3
 8002ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea4:	eddf 6acb 	vldr	s13, [pc, #812]	@ 80031d4 <executecommand+0xa84>
 8002ea8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002eac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eb0:	4bc7      	ldr	r3, [pc, #796]	@ (80031d0 <executecommand+0xa80>)
 8002eb2:	795b      	ldrb	r3, [r3, #5]
 8002eb4:	ee07 3a90 	vmov	s15, r3
 8002eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ebc:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 80031d4 <executecommand+0xa84>
 8002ec0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ec4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002ec8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed0:	4bc1      	ldr	r3, [pc, #772]	@ (80031d8 <executecommand+0xa88>)
 8002ed2:	edc3 7a00 	vstr	s15, [r3]
		}
		if(command[0] == 'e')
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b65      	cmp	r3, #101	@ 0x65
 8002edc:	d14c      	bne.n	8002f78 <executecommand+0x828>
		{
			p_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002ede:	4bbc      	ldr	r3, [pc, #752]	@ (80031d0 <executecommand+0xa80>)
 8002ee0:	785b      	ldrb	r3, [r3, #1]
 8002ee2:	ee07 3a90 	vmov	s15, r3
 8002ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eea:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80031d4 <executecommand+0xa84>
 8002eee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ef2:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80031dc <executecommand+0xa8c>
 8002ef6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002efa:	4bb5      	ldr	r3, [pc, #724]	@ (80031d0 <executecommand+0xa80>)
 8002efc:	789b      	ldrb	r3, [r3, #2]
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f06:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 80031d4 <executecommand+0xa84>
 8002f0a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f0e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f1a:	4bad      	ldr	r3, [pc, #692]	@ (80031d0 <executecommand+0xa80>)
 8002f1c:	78db      	ldrb	r3, [r3, #3]
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f26:	eddf 6aab 	vldr	s13, [pc, #684]	@ 80031d4 <executecommand+0xa84>
 8002f2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f32:	4ba7      	ldr	r3, [pc, #668]	@ (80031d0 <executecommand+0xa80>)
 8002f34:	791b      	ldrb	r3, [r3, #4]
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3e:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 80031d4 <executecommand+0xa84>
 8002f42:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f46:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002f4a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f52:	4b9f      	ldr	r3, [pc, #636]	@ (80031d0 <executecommand+0xa80>)
 8002f54:	795b      	ldrb	r3, [r3, #5]
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5e:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 80031d4 <executecommand+0xa84>
 8002f62:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f66:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 80031dc <executecommand+0xa8c>
 8002f6a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f72:	4b9b      	ldr	r3, [pc, #620]	@ (80031e0 <executecommand+0xa90>)
 8002f74:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'g')
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b67      	cmp	r3, #103	@ 0x67
 8002f7e:	d14f      	bne.n	8003020 <executecommand+0x8d0>
		{
			i_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002f80:	4b93      	ldr	r3, [pc, #588]	@ (80031d0 <executecommand+0xa80>)
 8002f82:	785b      	ldrb	r3, [r3, #1]
 8002f84:	ee07 3a90 	vmov	s15, r3
 8002f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80031d4 <executecommand+0xa84>
 8002f90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f94:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80031dc <executecommand+0xa8c>
 8002f98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f9c:	4b8c      	ldr	r3, [pc, #560]	@ (80031d0 <executecommand+0xa80>)
 8002f9e:	789b      	ldrb	r3, [r3, #2]
 8002fa0:	ee07 3a90 	vmov	s15, r3
 8002fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa8:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 80031d4 <executecommand+0xa84>
 8002fac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fb0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002fb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fbc:	4b84      	ldr	r3, [pc, #528]	@ (80031d0 <executecommand+0xa80>)
 8002fbe:	78db      	ldrb	r3, [r3, #3]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc8:	eddf 6a82 	vldr	s13, [pc, #520]	@ 80031d4 <executecommand+0xa84>
 8002fcc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fd4:	4b7e      	ldr	r3, [pc, #504]	@ (80031d0 <executecommand+0xa80>)
 8002fd6:	791b      	ldrb	r3, [r3, #4]
 8002fd8:	ee07 3a90 	vmov	s15, r3
 8002fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe0:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80031d4 <executecommand+0xa84>
 8002fe4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fe8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002fec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ff0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ff4:	4b76      	ldr	r3, [pc, #472]	@ (80031d0 <executecommand+0xa80>)
 8002ff6:	795b      	ldrb	r3, [r3, #5]
 8002ff8:	ee07 3a90 	vmov	s15, r3
 8002ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003000:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80031d4 <executecommand+0xa84>
 8003004:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003008:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 80031dc <executecommand+0xa8c>
 800300c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003014:	4b73      	ldr	r3, [pc, #460]	@ (80031e4 <executecommand+0xa94>)
 8003016:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = 0;
 800301a:	4b73      	ldr	r3, [pc, #460]	@ (80031e8 <executecommand+0xa98>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'h')
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b68      	cmp	r3, #104	@ 0x68
 8003026:	d14c      	bne.n	80030c2 <executecommand+0x972>
		{
			d_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003028:	4b69      	ldr	r3, [pc, #420]	@ (80031d0 <executecommand+0xa80>)
 800302a:	785b      	ldrb	r3, [r3, #1]
 800302c:	ee07 3a90 	vmov	s15, r3
 8003030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003034:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80031d4 <executecommand+0xa84>
 8003038:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800303c:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80031ec <executecommand+0xa9c>
 8003040:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003044:	4b62      	ldr	r3, [pc, #392]	@ (80031d0 <executecommand+0xa80>)
 8003046:	789b      	ldrb	r3, [r3, #2]
 8003048:	ee07 3a90 	vmov	s15, r3
 800304c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003050:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80031d4 <executecommand+0xa84>
 8003054:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003058:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80031dc <executecommand+0xa8c>
 800305c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003060:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003064:	4b5a      	ldr	r3, [pc, #360]	@ (80031d0 <executecommand+0xa80>)
 8003066:	78db      	ldrb	r3, [r3, #3]
 8003068:	ee07 3a90 	vmov	s15, r3
 800306c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003070:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80031d4 <executecommand+0xa84>
 8003074:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003078:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800307c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003080:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003084:	4b52      	ldr	r3, [pc, #328]	@ (80031d0 <executecommand+0xa80>)
 8003086:	791b      	ldrb	r3, [r3, #4]
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003090:	eddf 6a50 	vldr	s13, [pc, #320]	@ 80031d4 <executecommand+0xa84>
 8003094:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003098:	ee37 7a27 	vadd.f32	s14, s14, s15
 800309c:	4b4c      	ldr	r3, [pc, #304]	@ (80031d0 <executecommand+0xa80>)
 800309e:	795b      	ldrb	r3, [r3, #5]
 80030a0:	ee07 3a90 	vmov	s15, r3
 80030a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a8:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80031d4 <executecommand+0xa84>
 80030ac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80030b0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80030b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80030b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030bc:	4b4c      	ldr	r3, [pc, #304]	@ (80031f0 <executecommand+0xaa0>)
 80030be:	edc3 7a00 	vstr	s15, [r3]





		if(command[0] == 'j')
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b6a      	cmp	r3, #106	@ 0x6a
 80030c8:	d14c      	bne.n	8003164 <executecommand+0xa14>
			{
				p_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80030ca:	4b41      	ldr	r3, [pc, #260]	@ (80031d0 <executecommand+0xa80>)
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	ee07 3a90 	vmov	s15, r3
 80030d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d6:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80031d4 <executecommand+0xa84>
 80030da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030de:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80031dc <executecommand+0xa8c>
 80030e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030e6:	4b3a      	ldr	r3, [pc, #232]	@ (80031d0 <executecommand+0xa80>)
 80030e8:	789b      	ldrb	r3, [r3, #2]
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80031d4 <executecommand+0xa84>
 80030f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030fa:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003102:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003106:	4b32      	ldr	r3, [pc, #200]	@ (80031d0 <executecommand+0xa80>)
 8003108:	78db      	ldrb	r3, [r3, #3]
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003112:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80031d4 <executecommand+0xa84>
 8003116:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800311a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800311e:	4b2c      	ldr	r3, [pc, #176]	@ (80031d0 <executecommand+0xa80>)
 8003120:	791b      	ldrb	r3, [r3, #4]
 8003122:	ee07 3a90 	vmov	s15, r3
 8003126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80031d4 <executecommand+0xa84>
 800312e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003132:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003136:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800313a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800313e:	4b24      	ldr	r3, [pc, #144]	@ (80031d0 <executecommand+0xa80>)
 8003140:	795b      	ldrb	r3, [r3, #5]
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80031d4 <executecommand+0xa84>
 800314e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003152:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80031dc <executecommand+0xa8c>
 8003156:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800315a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315e:	4b25      	ldr	r3, [pc, #148]	@ (80031f4 <executecommand+0xaa4>)
 8003160:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'k')
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b6b      	cmp	r3, #107	@ 0x6b
 800316a:	d167      	bne.n	800323c <executecommand+0xaec>
			{
				i_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800316c:	4b18      	ldr	r3, [pc, #96]	@ (80031d0 <executecommand+0xa80>)
 800316e:	785b      	ldrb	r3, [r3, #1]
 8003170:	ee07 3a90 	vmov	s15, r3
 8003174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003178:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80031d4 <executecommand+0xa84>
 800317c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003180:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80031dc <executecommand+0xa8c>
 8003184:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003188:	4b11      	ldr	r3, [pc, #68]	@ (80031d0 <executecommand+0xa80>)
 800318a:	789b      	ldrb	r3, [r3, #2]
 800318c:	ee07 3a90 	vmov	s15, r3
 8003190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003194:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80031d4 <executecommand+0xa84>
 8003198:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800319c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80031a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031a8:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <executecommand+0xa80>)
 80031aa:	78db      	ldrb	r3, [r3, #3]
 80031ac:	ee07 3a90 	vmov	s15, r3
 80031b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b4:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80031d4 <executecommand+0xa84>
 80031b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031c0:	4b03      	ldr	r3, [pc, #12]	@ (80031d0 <executecommand+0xa80>)
 80031c2:	791b      	ldrb	r3, [r3, #4]
 80031c4:	ee07 3a90 	vmov	s15, r3
 80031c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031cc:	e016      	b.n	80031fc <executecommand+0xaac>
 80031ce:	bf00      	nop
 80031d0:	000041b8 	.word	0x000041b8
 80031d4:	42400000 	.word	0x42400000
 80031d8:	00004100 	.word	0x00004100
 80031dc:	42c80000 	.word	0x42c80000
 80031e0:	00004148 	.word	0x00004148
 80031e4:	00004154 	.word	0x00004154
 80031e8:	000040c4 	.word	0x000040c4
 80031ec:	447a0000 	.word	0x447a0000
 80031f0:	00004160 	.word	0x00004160
 80031f4:	000040ec 	.word	0x000040ec
 80031f8:	42400000 	.word	0x42400000
 80031fc:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 80031f8 <executecommand+0xaa8>
 8003200:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003204:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003208:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800320c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003210:	4bba      	ldr	r3, [pc, #744]	@ (80034fc <executecommand+0xdac>)
 8003212:	795b      	ldrb	r3, [r3, #5]
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321c:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 8003500 <executecommand+0xdb0>
 8003220:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003224:	ed9f 6ab7 	vldr	s12, [pc, #732]	@ 8003504 <executecommand+0xdb4>
 8003228:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800322c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003230:	4bb5      	ldr	r3, [pc, #724]	@ (8003508 <executecommand+0xdb8>)
 8003232:	edc3 7a00 	vstr	s15, [r3]
				error_sum_yaw = 0;
 8003236:	4bb5      	ldr	r3, [pc, #724]	@ (800350c <executecommand+0xdbc>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'l')
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b6c      	cmp	r3, #108	@ 0x6c
 8003242:	d14c      	bne.n	80032de <executecommand+0xb8e>
			{
				d_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003244:	4bad      	ldr	r3, [pc, #692]	@ (80034fc <executecommand+0xdac>)
 8003246:	785b      	ldrb	r3, [r3, #1]
 8003248:	ee07 3a90 	vmov	s15, r3
 800324c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003250:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 8003500 <executecommand+0xdb0>
 8003254:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003258:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8003510 <executecommand+0xdc0>
 800325c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003260:	4ba6      	ldr	r3, [pc, #664]	@ (80034fc <executecommand+0xdac>)
 8003262:	789b      	ldrb	r3, [r3, #2]
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326c:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 8003500 <executecommand+0xdb0>
 8003270:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003274:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8003504 <executecommand+0xdb4>
 8003278:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800327c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003280:	4b9e      	ldr	r3, [pc, #632]	@ (80034fc <executecommand+0xdac>)
 8003282:	78db      	ldrb	r3, [r3, #3]
 8003284:	ee07 3a90 	vmov	s15, r3
 8003288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328c:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8003500 <executecommand+0xdb0>
 8003290:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003294:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003298:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800329c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a0:	4b96      	ldr	r3, [pc, #600]	@ (80034fc <executecommand+0xdac>)
 80032a2:	791b      	ldrb	r3, [r3, #4]
 80032a4:	ee07 3a90 	vmov	s15, r3
 80032a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ac:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8003500 <executecommand+0xdb0>
 80032b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032b8:	4b90      	ldr	r3, [pc, #576]	@ (80034fc <executecommand+0xdac>)
 80032ba:	795b      	ldrb	r3, [r3, #5]
 80032bc:	ee07 3a90 	vmov	s15, r3
 80032c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c4:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 8003500 <executecommand+0xdb0>
 80032c8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80032cc:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80032d0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003514 <executecommand+0xdc4>)
 80032da:	edc3 7a00 	vstr	s15, [r3]
			}
			if(command[0] == 'm')
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b6d      	cmp	r3, #109	@ 0x6d
 80032e4:	d14c      	bne.n	8003380 <executecommand+0xc30>
			{
				p_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80032e6:	4b85      	ldr	r3, [pc, #532]	@ (80034fc <executecommand+0xdac>)
 80032e8:	785b      	ldrb	r3, [r3, #1]
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f2:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8003500 <executecommand+0xdb0>
 80032f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032fa:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8003504 <executecommand+0xdb4>
 80032fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003302:	4b7e      	ldr	r3, [pc, #504]	@ (80034fc <executecommand+0xdac>)
 8003304:	789b      	ldrb	r3, [r3, #2]
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330e:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8003500 <executecommand+0xdb0>
 8003312:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003316:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800331a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800331e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003322:	4b76      	ldr	r3, [pc, #472]	@ (80034fc <executecommand+0xdac>)
 8003324:	78db      	ldrb	r3, [r3, #3]
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332e:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003500 <executecommand+0xdb0>
 8003332:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003336:	ee37 7a27 	vadd.f32	s14, s14, s15
 800333a:	4b70      	ldr	r3, [pc, #448]	@ (80034fc <executecommand+0xdac>)
 800333c:	791b      	ldrb	r3, [r3, #4]
 800333e:	ee07 3a90 	vmov	s15, r3
 8003342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003346:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8003500 <executecommand+0xdb0>
 800334a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800334e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003352:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800335a:	4b68      	ldr	r3, [pc, #416]	@ (80034fc <executecommand+0xdac>)
 800335c:	795b      	ldrb	r3, [r3, #5]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003366:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8003500 <executecommand+0xdb0>
 800336a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800336e:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 8003504 <executecommand+0xdb4>
 8003372:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337a:	4b67      	ldr	r3, [pc, #412]	@ (8003518 <executecommand+0xdc8>)
 800337c:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'n')
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b6e      	cmp	r3, #110	@ 0x6e
 8003386:	d14f      	bne.n	8003428 <executecommand+0xcd8>
			{
				i_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003388:	4b5c      	ldr	r3, [pc, #368]	@ (80034fc <executecommand+0xdac>)
 800338a:	785b      	ldrb	r3, [r3, #1]
 800338c:	ee07 3a90 	vmov	s15, r3
 8003390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003394:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8003500 <executecommand+0xdb0>
 8003398:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800339c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003504 <executecommand+0xdb4>
 80033a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033a4:	4b55      	ldr	r3, [pc, #340]	@ (80034fc <executecommand+0xdac>)
 80033a6:	789b      	ldrb	r3, [r3, #2]
 80033a8:	ee07 3a90 	vmov	s15, r3
 80033ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b0:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8003500 <executecommand+0xdb0>
 80033b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033b8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80033bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033c4:	4b4d      	ldr	r3, [pc, #308]	@ (80034fc <executecommand+0xdac>)
 80033c6:	78db      	ldrb	r3, [r3, #3]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d0:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8003500 <executecommand+0xdb0>
 80033d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033dc:	4b47      	ldr	r3, [pc, #284]	@ (80034fc <executecommand+0xdac>)
 80033de:	791b      	ldrb	r3, [r3, #4]
 80033e0:	ee07 3a90 	vmov	s15, r3
 80033e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e8:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8003500 <executecommand+0xdb0>
 80033ec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033f0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80033f4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033fc:	4b3f      	ldr	r3, [pc, #252]	@ (80034fc <executecommand+0xdac>)
 80033fe:	795b      	ldrb	r3, [r3, #5]
 8003400:	ee07 3a90 	vmov	s15, r3
 8003404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003408:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003500 <executecommand+0xdb0>
 800340c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003410:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 8003504 <executecommand+0xdb4>
 8003414:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341c:	4b3f      	ldr	r3, [pc, #252]	@ (800351c <executecommand+0xdcc>)
 800341e:	edc3 7a00 	vstr	s15, [r3]
				error_sum_angular_rate_yaw = 0;
 8003422:	4b3f      	ldr	r3, [pc, #252]	@ (8003520 <executecommand+0xdd0>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'o')
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b6f      	cmp	r3, #111	@ 0x6f
 800342e:	d14c      	bne.n	80034ca <executecommand+0xd7a>
			{
				d_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003430:	4b32      	ldr	r3, [pc, #200]	@ (80034fc <executecommand+0xdac>)
 8003432:	785b      	ldrb	r3, [r3, #1]
 8003434:	ee07 3a90 	vmov	s15, r3
 8003438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8003500 <executecommand+0xdb0>
 8003440:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003444:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003510 <executecommand+0xdc0>
 8003448:	ee27 7a87 	vmul.f32	s14, s15, s14
 800344c:	4b2b      	ldr	r3, [pc, #172]	@ (80034fc <executecommand+0xdac>)
 800344e:	789b      	ldrb	r3, [r3, #2]
 8003450:	ee07 3a90 	vmov	s15, r3
 8003454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003458:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8003500 <executecommand+0xdb0>
 800345c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003460:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8003504 <executecommand+0xdb4>
 8003464:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003468:	ee37 7a27 	vadd.f32	s14, s14, s15
 800346c:	4b23      	ldr	r3, [pc, #140]	@ (80034fc <executecommand+0xdac>)
 800346e:	78db      	ldrb	r3, [r3, #3]
 8003470:	ee07 3a90 	vmov	s15, r3
 8003474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003478:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8003500 <executecommand+0xdb0>
 800347c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003480:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003484:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800348c:	4b1b      	ldr	r3, [pc, #108]	@ (80034fc <executecommand+0xdac>)
 800348e:	791b      	ldrb	r3, [r3, #4]
 8003490:	ee07 3a90 	vmov	s15, r3
 8003494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003498:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8003500 <executecommand+0xdb0>
 800349c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034a4:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <executecommand+0xdac>)
 80034a6:	795b      	ldrb	r3, [r3, #5]
 80034a8:	ee07 3a90 	vmov	s15, r3
 80034ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b0:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003500 <executecommand+0xdb0>
 80034b4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80034b8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80034bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c4:	4b17      	ldr	r3, [pc, #92]	@ (8003524 <executecommand+0xdd4>)
 80034c6:	edc3 7a00 	vstr	s15, [r3]
			}

	if(command[0] == 'r'){
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b72      	cmp	r3, #114	@ 0x72
 80034d0:	d101      	bne.n	80034d6 <executecommand+0xd86>
		NVIC_SystemReset();
 80034d2:	f7ff f8d9 	bl	8002688 <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	e007      	b.n	80034ec <executecommand+0xd9c>
		UASRT_PID_VAL[i] = 0;
 80034dc:	4a07      	ldr	r2, [pc, #28]	@ (80034fc <executecommand+0xdac>)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4413      	add	r3, r2
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3301      	adds	r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b0e      	cmp	r3, #14
 80034f0:	ddf4      	ble.n	80034dc <executecommand+0xd8c>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 80034f2:	bf00      	nop
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	000041b8 	.word	0x000041b8
 8003500:	42400000 	.word	0x42400000
 8003504:	42c80000 	.word	0x42c80000
 8003508:	000040f8 	.word	0x000040f8
 800350c:	000040bc 	.word	0x000040bc
 8003510:	447a0000 	.word	0x447a0000
 8003514:	00004104 	.word	0x00004104
 8003518:	0000414c 	.word	0x0000414c
 800351c:	00004158 	.word	0x00004158
 8003520:	000040c8 	.word	0x000040c8
 8003524:	00004164 	.word	0x00004164

08003528 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	@ 0x28
 800352c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800352e:	1d3b      	adds	r3, r7, #4
 8003530:	2224      	movs	r2, #36	@ 0x24
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f01a fdf9 	bl	801e12c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800353a:	4b2e      	ldr	r3, [pc, #184]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 800353c:	4a2e      	ldr	r2, [pc, #184]	@ (80035f8 <MX_ADC2_Init+0xd0>)
 800353e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8003540:	4b2c      	ldr	r3, [pc, #176]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 8003542:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003546:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003548:	4b2a      	ldr	r3, [pc, #168]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 800354a:	2208      	movs	r2, #8
 800354c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800354e:	4b29      	ldr	r3, [pc, #164]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 8003550:	2200      	movs	r2, #0
 8003552:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003554:	4b27      	ldr	r3, [pc, #156]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 8003556:	2204      	movs	r2, #4
 8003558:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800355a:	4b26      	ldr	r3, [pc, #152]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 800355c:	2200      	movs	r2, #0
 800355e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003560:	4b24      	ldr	r3, [pc, #144]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 8003562:	2200      	movs	r2, #0
 8003564:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8003566:	4b23      	ldr	r3, [pc, #140]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 8003568:	2201      	movs	r2, #1
 800356a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800356c:	4b21      	ldr	r3, [pc, #132]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 8003574:	4b1f      	ldr	r3, [pc, #124]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 8003576:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 800357a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800357c:	4b1d      	ldr	r3, [pc, #116]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 800357e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003582:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8003584:	4b1b      	ldr	r3, [pc, #108]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 8003586:	2203      	movs	r2, #3
 8003588:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800358a:	4b1a      	ldr	r3, [pc, #104]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 800358c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003590:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003592:	4b18      	ldr	r3, [pc, #96]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 8003594:	2200      	movs	r2, #0
 8003596:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8003598:	4b16      	ldr	r3, [pc, #88]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 80035a0:	4b14      	ldr	r3, [pc, #80]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80035a6:	4813      	ldr	r0, [pc, #76]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 80035a8:	f006 fb3e 	bl	8009c28 <HAL_ADC_Init>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80035b2:	f004 fc85 	bl	8007ec0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80035b6:	4b11      	ldr	r3, [pc, #68]	@ (80035fc <MX_ADC2_Init+0xd4>)
 80035b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80035ba:	2306      	movs	r3, #6
 80035bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80035be:	2307      	movs	r3, #7
 80035c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80035c2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80035c6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80035c8:	2304      	movs	r3, #4
 80035ca:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	4619      	mov	r1, r3
 80035da:	4806      	ldr	r0, [pc, #24]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 80035dc:	f007 f86a 	bl	800a6b4 <HAL_ADC_ConfigChannel>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 80035e6:	f004 fc6b 	bl	8007ec0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80035ea:	bf00      	nop
 80035ec:	3728      	adds	r7, #40	@ 0x28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	240000ac 	.word	0x240000ac
 80035f8:	40022100 	.word	0x40022100
 80035fc:	19200040 	.word	0x19200040

08003600 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	@ 0x28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a34      	ldr	r2, [pc, #208]	@ (80036f0 <HAL_ADC_MspInit+0xf0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d162      	bne.n	80036e8 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003622:	4b34      	ldr	r3, [pc, #208]	@ (80036f4 <HAL_ADC_MspInit+0xf4>)
 8003624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003628:	4a32      	ldr	r2, [pc, #200]	@ (80036f4 <HAL_ADC_MspInit+0xf4>)
 800362a:	f043 0320 	orr.w	r3, r3, #32
 800362e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003632:	4b30      	ldr	r3, [pc, #192]	@ (80036f4 <HAL_ADC_MspInit+0xf4>)
 8003634:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003640:	4b2c      	ldr	r3, [pc, #176]	@ (80036f4 <HAL_ADC_MspInit+0xf4>)
 8003642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003646:	4a2b      	ldr	r2, [pc, #172]	@ (80036f4 <HAL_ADC_MspInit+0xf4>)
 8003648:	f043 0320 	orr.w	r3, r3, #32
 800364c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003650:	4b28      	ldr	r3, [pc, #160]	@ (80036f4 <HAL_ADC_MspInit+0xf4>)
 8003652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800365e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003664:	2303      	movs	r3, #3
 8003666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800366c:	f107 0314 	add.w	r3, r7, #20
 8003670:	4619      	mov	r1, r3
 8003672:	4821      	ldr	r0, [pc, #132]	@ (80036f8 <HAL_ADC_MspInit+0xf8>)
 8003674:	f00a ff0a 	bl	800e48c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 8003678:	4b20      	ldr	r3, [pc, #128]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 800367a:	4a21      	ldr	r2, [pc, #132]	@ (8003700 <HAL_ADC_MspInit+0x100>)
 800367c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800367e:	4b1f      	ldr	r3, [pc, #124]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 8003680:	220a      	movs	r2, #10
 8003682:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003684:	4b1d      	ldr	r3, [pc, #116]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 8003686:	2200      	movs	r2, #0
 8003688:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800368a:	4b1c      	ldr	r3, [pc, #112]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 800368c:	2200      	movs	r2, #0
 800368e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003690:	4b1a      	ldr	r3, [pc, #104]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 8003692:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003696:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003698:	4b18      	ldr	r3, [pc, #96]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 800369a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800369e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036a0:	4b16      	ldr	r3, [pc, #88]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 80036a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036a6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80036a8:	4b14      	ldr	r3, [pc, #80]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 80036aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036ae:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80036b0:	4b12      	ldr	r3, [pc, #72]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036b6:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80036bc:	480f      	ldr	r0, [pc, #60]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 80036be:	f008 f893 	bl	800b7e8 <HAL_DMA_Init>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 80036c8:	f004 fbfa 	bl	8007ec0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a0b      	ldr	r2, [pc, #44]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 80036d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80036d2:	4a0a      	ldr	r2, [pc, #40]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80036d8:	2200      	movs	r2, #0
 80036da:	2100      	movs	r1, #0
 80036dc:	2012      	movs	r0, #18
 80036de:	f007 ffd6 	bl	800b68e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80036e2:	2012      	movs	r0, #18
 80036e4:	f007 ffed 	bl	800b6c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80036e8:	bf00      	nop
 80036ea:	3728      	adds	r7, #40	@ 0x28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40022100 	.word	0x40022100
 80036f4:	58024400 	.word	0x58024400
 80036f8:	58021400 	.word	0x58021400
 80036fc:	2400011c 	.word	0x2400011c
 8003700:	40020410 	.word	0x40020410

08003704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800370a:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <MX_DMA_Init+0x6c>)
 800370c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003710:	4a17      	ldr	r2, [pc, #92]	@ (8003770 <MX_DMA_Init+0x6c>)
 8003712:	f043 0302 	orr.w	r3, r3, #2
 8003716:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800371a:	4b15      	ldr	r3, [pc, #84]	@ (8003770 <MX_DMA_Init+0x6c>)
 800371c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003728:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <MX_DMA_Init+0x6c>)
 800372a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800372e:	4a10      	ldr	r2, [pc, #64]	@ (8003770 <MX_DMA_Init+0x6c>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003738:	4b0d      	ldr	r3, [pc, #52]	@ (8003770 <MX_DMA_Init+0x6c>)
 800373a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003746:	2200      	movs	r2, #0
 8003748:	2100      	movs	r1, #0
 800374a:	200b      	movs	r0, #11
 800374c:	f007 ff9f 	bl	800b68e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003750:	200b      	movs	r0, #11
 8003752:	f007 ffb6 	bl	800b6c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003756:	2200      	movs	r2, #0
 8003758:	2100      	movs	r1, #0
 800375a:	2038      	movs	r0, #56	@ 0x38
 800375c:	f007 ff97 	bl	800b68e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003760:	2038      	movs	r0, #56	@ 0x38
 8003762:	f007 ffae 	bl	800b6c2 <HAL_NVIC_EnableIRQ>

}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	58024400 	.word	0x58024400
 8003774:	00000000 	.word	0x00000000

08003778 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 8003778:	b580      	push	{r7, lr}
 800377a:	b08e      	sub	sp, #56	@ 0x38
 800377c:	af00      	add	r7, sp, #0
 800377e:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(pitch_error);
 8003794:	4b88      	ldr	r3, [pc, #544]	@ (80039b8 <Thrust_filter+0x240>)
 8003796:	edd3 7a00 	vldr	s15, [r3]
 800379a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800379e:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(rool_error);
 80037a2:	4b86      	ldr	r3, [pc, #536]	@ (80039bc <Thrust_filter+0x244>)
 80037a4:	edd3 7a00 	vldr	s15, [r3]
 80037a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037ac:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 80037b0:	ed97 7b08 	vldr	d7, [r7, #32]
 80037b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037b8:	eeb0 0a67 	vmov.f32	s0, s15
 80037bc:	f003 feb6 	bl	800752c <WartoscBezwgledna>
 80037c0:	eef0 7a40 	vmov.f32	s15, s0
 80037c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037c8:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 80037cc:	ed97 7b06 	vldr	d7, [r7, #24]
 80037d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037d4:	eeb0 0a67 	vmov.f32	s0, s15
 80037d8:	f003 fea8 	bl	800752c <WartoscBezwgledna>
 80037dc:	eef0 7a40 	vmov.f32	s15, s0
 80037e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037e4:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 80037e8:	ed97 6b08 	vldr	d6, [r7, #32]
 80037ec:	ed97 7b06 	vldr	d7, [r7, #24]
 80037f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037f4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80037f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80037fc:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 8003800:	eeb0 0b47 	vmov.f64	d0, d7
 8003804:	f01a fe1c 	bl	801e440 <pow>
 8003808:	ed87 0b04 	vstr	d0, [r7, #16]
	if(wanted_thrust > 10500){
 800380c:	4b6c      	ldr	r3, [pc, #432]	@ (80039c0 <Thrust_filter+0x248>)
 800380e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003812:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003816:	4293      	cmp	r3, r2
 8003818:	dd03      	ble.n	8003822 <Thrust_filter+0xaa>
		wanted_thrust = 10500;
 800381a:	4b69      	ldr	r3, [pc, #420]	@ (80039c0 <Thrust_filter+0x248>)
 800381c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003820:	801a      	strh	r2, [r3, #0]
	}

	thrust_error = wanted_thrust - MYDRON.THRUST;
 8003822:	4b67      	ldr	r3, [pc, #412]	@ (80039c0 <Thrust_filter+0x248>)
 8003824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003828:	b29a      	uxth	r2, r3
 800382a:	4b66      	ldr	r3, [pc, #408]	@ (80039c4 <Thrust_filter+0x24c>)
 800382c:	885b      	ldrh	r3, [r3, #2]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	b29b      	uxth	r3, r3
 8003832:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 8003834:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003838:	2b00      	cmp	r3, #0
 800383a:	da13      	bge.n	8003864 <Thrust_filter+0xec>
		thrust_error = WartoscBezwgledna(thrust_error);
 800383c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003840:	ee07 3a90 	vmov	s15, r3
 8003844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003848:	eeb0 0a67 	vmov.f32	s0, s15
 800384c:	f003 fe6e 	bl	800752c <WartoscBezwgledna>
 8003850:	eef0 7a40 	vmov.f32	s15, s0
 8003854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003858:	ee17 3a90 	vmov	r3, s15
 800385c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 8003864:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8097 	beq.w	800399c <Thrust_filter+0x224>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 800386e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800387a:	eeb0 0b47 	vmov.f64	d0, d7
 800387e:	f01a fc87 	bl	801e190 <sqrt>
 8003882:	eeb0 7b40 	vmov.f64	d7, d0
 8003886:	eeb0 0b47 	vmov.f64	d0, d7
 800388a:	f01a fc81 	bl	801e190 <sqrt>
 800388e:	eeb0 7b40 	vmov.f64	d7, d0
 8003892:	ed9f 6b45 	vldr	d6, [pc, #276]	@ 80039a8 <Thrust_filter+0x230>
 8003896:	ee27 7b06 	vmul.f64	d7, d7, d6
 800389a:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 800389e:	ed97 7b00 	vldr	d7, [r7]
 80038a2:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 80039b0 <Thrust_filter+0x238>
 80038a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80038aa:	ed97 7b02 	vldr	d7, [r7, #8]
 80038ae:	ee26 5b07 	vmul.f64	d5, d6, d7
 80038b2:	ed97 6b04 	vldr	d6, [r7, #16]
 80038b6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80038ba:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 80038be:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d105      	bne.n	80038d2 <Thrust_filter+0x15a>
			thrust_add = thrust_add*(-1);
 80038c6:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038ca:	eeb1 7b47 	vneg.f64	d7, d7
 80038ce:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 80038d2:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038d6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80038da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e2:	d513      	bpl.n	800390c <Thrust_filter+0x194>
 80038e4:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038e8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80038ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f4:	dd0a      	ble.n	800390c <Thrust_filter+0x194>
			thrust_values = thrust_values + thrust_add;
 80038f6:	4b34      	ldr	r3, [pc, #208]	@ (80039c8 <Thrust_filter+0x250>)
 80038f8:	ed93 6b00 	vldr	d6, [r3]
 80038fc:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003900:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003904:	4b30      	ldr	r3, [pc, #192]	@ (80039c8 <Thrust_filter+0x250>)
 8003906:	ed83 7b00 	vstr	d7, [r3]
 800390a:	e010      	b.n	800392e <Thrust_filter+0x1b6>
		}
		else{
			MYDRON.THRUST = MYDRON.THRUST + thrust_add;
 800390c:	4b2d      	ldr	r3, [pc, #180]	@ (80039c4 <Thrust_filter+0x24c>)
 800390e:	885b      	ldrh	r3, [r3, #2]
 8003910:	ee07 3a90 	vmov	s15, r3
 8003914:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003918:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800391c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003920:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003924:	ee17 3a90 	vmov	r3, s15
 8003928:	b29a      	uxth	r2, r3
 800392a:	4b26      	ldr	r3, [pc, #152]	@ (80039c4 <Thrust_filter+0x24c>)
 800392c:	805a      	strh	r2, [r3, #2]
		}

		if(thrust_values >= 1 || thrust_values <= -1){
 800392e:	4b26      	ldr	r3, [pc, #152]	@ (80039c8 <Thrust_filter+0x250>)
 8003930:	ed93 7b00 	vldr	d7, [r3]
 8003934:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003938:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800393c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003940:	da09      	bge.n	8003956 <Thrust_filter+0x1de>
 8003942:	4b21      	ldr	r3, [pc, #132]	@ (80039c8 <Thrust_filter+0x250>)
 8003944:	ed93 7b00 	vldr	d7, [r3]
 8003948:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800394c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003954:	d818      	bhi.n	8003988 <Thrust_filter+0x210>
			MYDRON.THRUST = MYDRON.THRUST + thrust_values;
 8003956:	4b1b      	ldr	r3, [pc, #108]	@ (80039c4 <Thrust_filter+0x24c>)
 8003958:	885b      	ldrh	r3, [r3, #2]
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003962:	4b19      	ldr	r3, [pc, #100]	@ (80039c8 <Thrust_filter+0x250>)
 8003964:	ed93 7b00 	vldr	d7, [r3]
 8003968:	ee36 7b07 	vadd.f64	d7, d6, d7
 800396c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003970:	ee17 3a90 	vmov	r3, s15
 8003974:	b29a      	uxth	r2, r3
 8003976:	4b13      	ldr	r3, [pc, #76]	@ (80039c4 <Thrust_filter+0x24c>)
 8003978:	805a      	strh	r2, [r3, #2]
			thrust_values = 0;
 800397a:	4913      	ldr	r1, [pc, #76]	@ (80039c8 <Thrust_filter+0x250>)
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(MYDRON.THRUST > 10000){//ograniczenie THRUST
 8003988:	4b0e      	ldr	r3, [pc, #56]	@ (80039c4 <Thrust_filter+0x24c>)
 800398a:	885b      	ldrh	r3, [r3, #2]
 800398c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003990:	4293      	cmp	r3, r2
 8003992:	d903      	bls.n	800399c <Thrust_filter+0x224>
			MYDRON.THRUST = 10000;
 8003994:	4b0b      	ldr	r3, [pc, #44]	@ (80039c4 <Thrust_filter+0x24c>)
 8003996:	f242 7210 	movw	r2, #10000	@ 0x2710
 800399a:	805a      	strh	r2, [r3, #2]
		}
	}
}
 800399c:	bf00      	nop
 800399e:	3738      	adds	r7, #56	@ 0x38
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	f3af 8000 	nop.w
 80039a8:	00000000 	.word	0x00000000
 80039ac:	409f4000 	.word	0x409f4000
 80039b0:	30553261 	.word	0x30553261
 80039b4:	3f33a92a 	.word	0x3f33a92a
 80039b8:	00004084 	.word	0x00004084
 80039bc:	00004088 	.word	0x00004088
 80039c0:	0000405c 	.word	0x0000405c
 80039c4:	00000178 	.word	0x00000178
 80039c8:	00004060 	.word	0x00004060

080039cc <PID_cal>:

	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_cal(float *PID_var, float *PID_FAC, uint8_t pry){//pitch = 1, rool = 2, yaw = 3
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	71fb      	strb	r3, [r7, #7]
	switch(pry){
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	3b01      	subs	r3, #1
 80039de:	2b05      	cmp	r3, #5
 80039e0:	f200 8380 	bhi.w	80040e4 <PID_cal+0x718>
 80039e4:	a201      	add	r2, pc, #4	@ (adr r2, 80039ec <PID_cal+0x20>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	08003a05 	.word	0x08003a05
 80039f0:	08003b1f 	.word	0x08003b1f
 80039f4:	08003c59 	.word	0x08003c59
 80039f8:	08003d73 	.word	0x08003d73
 80039fc:	08003eb1 	.word	0x08003eb1
 8003a00:	08003fcb 	.word	0x08003fcb
		case 1://pitch

			*PID_var = PID_FAC[0]*(pitch_error);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	ed93 7a00 	vldr	s14, [r3]
 8003a0a:	4b8b      	ldr	r3, [pc, #556]	@ (8003c38 <PID_cal+0x26c>)
 8003a0c:	edd3 7a00 	vldr	s15, [r3]
 8003a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_pitch*looptime;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	ed93 7a00 	vldr	s14, [r3]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	3304      	adds	r3, #4
 8003a24:	edd3 6a00 	vldr	s13, [r3]
 8003a28:	4b84      	ldr	r3, [pc, #528]	@ (8003c3c <PID_cal+0x270>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	ee07 3a90 	vmov	s15, r3
 8003a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a38:	4b81      	ldr	r3, [pc, #516]	@ (8003c40 <PID_cal+0x274>)
 8003a3a:	edd3 7a00 	vldr	s15, [r3]
 8003a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((pitch_error) - old_error_pitch);//policzenie częsci D
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	3308      	adds	r3, #8
 8003a50:	ed93 7a00 	vldr	s14, [r3]
 8003a54:	4b78      	ldr	r3, [pc, #480]	@ (8003c38 <PID_cal+0x26c>)
 8003a56:	edd3 6a00 	vldr	s13, [r3]
 8003a5a:	4b7a      	ldr	r3, [pc, #488]	@ (8003c44 <PID_cal+0x278>)
 8003a5c:	edd3 7a00 	vldr	s15, [r3]
 8003a60:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	330c      	adds	r3, #12
 8003a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6c:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003a70:	4b75      	ldr	r3, [pc, #468]	@ (8003c48 <PID_cal+0x27c>)
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d045      	beq.n	8003b04 <PID_cal+0x138>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	ed93 7a00 	vldr	s14, [r3]
 8003a80:	4b71      	ldr	r3, [pc, #452]	@ (8003c48 <PID_cal+0x27c>)
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	ee07 3a90 	vmov	s15, r3
 8003a88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8003c40 <PID_cal+0x274>)
 8003a8e:	edd3 7a00 	vldr	s15, [r3]
 8003a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a96:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003a9a:	4b6b      	ldr	r3, [pc, #428]	@ (8003c48 <PID_cal+0x27c>)
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aa6:	4b66      	ldr	r3, [pc, #408]	@ (8003c40 <PID_cal+0x274>)
 8003aa8:	edd3 7a00 	vldr	s15, [r3]
 8003aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ab4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	3310      	adds	r3, #16
 8003ac0:	edd3 6a00 	vldr	s13, [r3]
 8003ac4:	4b60      	ldr	r3, [pc, #384]	@ (8003c48 <PID_cal+0x27c>)
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	ee07 3a90 	vmov	s15, r3
 8003acc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003ad0:	4b5b      	ldr	r3, [pc, #364]	@ (8003c40 <PID_cal+0x274>)
 8003ad2:	edd3 7a00 	vldr	s15, [r3]
 8003ad6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003ada:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003ade:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003ae2:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003ae6:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	330c      	adds	r3, #12
 8003af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af6:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	3310      	adds	r3, #16
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	68d2      	ldr	r2, [r2, #12]
 8003b02:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	ed93 7a00 	vldr	s14, [r3]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	330c      	adds	r3, #12
 8003b0e:	edd3 7a00 	vldr	s15, [r3]
 8003b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	edc3 7a00 	vstr	s15, [r3]
//					*PID_var = 400;
//				}
//				if(*PID_var < -400){
//					*PID_var = -400;
//				}
			break;
 8003b1c:	e2e3      	b.n	80040e6 <PID_cal+0x71a>

		case 2://rool

			*PID_var = PID_FAC[0]*(rool_error);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	ed93 7a00 	vldr	s14, [r3]
 8003b24:	4b49      	ldr	r3, [pc, #292]	@ (8003c4c <PID_cal+0x280>)
 8003b26:	edd3 7a00 	vldr	s15, [r3]
 8003b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_rool*looptime;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	ed93 7a00 	vldr	s14, [r3]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	edd3 6a00 	vldr	s13, [r3]
 8003b42:	4b43      	ldr	r3, [pc, #268]	@ (8003c50 <PID_cal+0x284>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b52:	4b3b      	ldr	r3, [pc, #236]	@ (8003c40 <PID_cal+0x274>)
 8003b54:	edd3 7a00 	vldr	s15, [r3]
 8003b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((rool_error) - old_error_rool);
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	ed93 7a00 	vldr	s14, [r3]
 8003b6e:	4b37      	ldr	r3, [pc, #220]	@ (8003c4c <PID_cal+0x280>)
 8003b70:	edd3 6a00 	vldr	s13, [r3]
 8003b74:	4b37      	ldr	r3, [pc, #220]	@ (8003c54 <PID_cal+0x288>)
 8003b76:	edd3 7a00 	vldr	s15, [r3]
 8003b7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	330c      	adds	r3, #12
 8003b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b86:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c48 <PID_cal+0x27c>)
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d045      	beq.n	8003c1e <PID_cal+0x252>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	330c      	adds	r3, #12
 8003b96:	ed93 7a00 	vldr	s14, [r3]
 8003b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8003c48 <PID_cal+0x27c>)
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ba6:	4b26      	ldr	r3, [pc, #152]	@ (8003c40 <PID_cal+0x274>)
 8003ba8:	edd3 7a00 	vldr	s15, [r3]
 8003bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bb0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003bb4:	4b24      	ldr	r3, [pc, #144]	@ (8003c48 <PID_cal+0x27c>)
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	ee07 3a90 	vmov	s15, r3
 8003bbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c40 <PID_cal+0x274>)
 8003bc2:	edd3 7a00 	vldr	s15, [r3]
 8003bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	3310      	adds	r3, #16
 8003bda:	edd3 6a00 	vldr	s13, [r3]
 8003bde:	4b1a      	ldr	r3, [pc, #104]	@ (8003c48 <PID_cal+0x27c>)
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003bea:	4b15      	ldr	r3, [pc, #84]	@ (8003c40 <PID_cal+0x274>)
 8003bec:	edd3 7a00 	vldr	s15, [r3]
 8003bf0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003bf4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003bf8:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003bfc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003c00:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	330c      	adds	r3, #12
 8003c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c10:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	3310      	adds	r3, #16
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	68d2      	ldr	r2, [r2, #12]
 8003c1c:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	ed93 7a00 	vldr	s14, [r3]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	330c      	adds	r3, #12
 8003c28:	edd3 7a00 	vldr	s15, [r3]
 8003c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003c36:	e256      	b.n	80040e6 <PID_cal+0x71a>
 8003c38:	00004084 	.word	0x00004084
 8003c3c:	000040b4 	.word	0x000040b4
 8003c40:	0801ea5c 	.word	0x0801ea5c
 8003c44:	0000409c 	.word	0x0000409c
 8003c48:	00004076 	.word	0x00004076
 8003c4c:	00004088 	.word	0x00004088
 8003c50:	000040b8 	.word	0x000040b8
 8003c54:	000040a0 	.word	0x000040a0

		case 3:

			*PID_var = PID_FAC[0]*(yaw_error);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	ed93 7a00 	vldr	s14, [r3]
 8003c5e:	4b8b      	ldr	r3, [pc, #556]	@ (8003e8c <PID_cal+0x4c0>)
 8003c60:	edd3 7a00 	vldr	s15, [r3]
 8003c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_yaw*looptime;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	ed93 7a00 	vldr	s14, [r3]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	3304      	adds	r3, #4
 8003c78:	edd3 6a00 	vldr	s13, [r3]
 8003c7c:	4b84      	ldr	r3, [pc, #528]	@ (8003e90 <PID_cal+0x4c4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	ee07 3a90 	vmov	s15, r3
 8003c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c8c:	4b81      	ldr	r3, [pc, #516]	@ (8003e94 <PID_cal+0x4c8>)
 8003c8e:	edd3 7a00 	vldr	s15, [r3]
 8003c92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((yaw_error) - old_error_yaw);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	ed93 7a00 	vldr	s14, [r3]
 8003ca8:	4b78      	ldr	r3, [pc, #480]	@ (8003e8c <PID_cal+0x4c0>)
 8003caa:	edd3 6a00 	vldr	s13, [r3]
 8003cae:	4b7a      	ldr	r3, [pc, #488]	@ (8003e98 <PID_cal+0x4cc>)
 8003cb0:	edd3 7a00 	vldr	s15, [r3]
 8003cb4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc0:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003cc4:	4b75      	ldr	r3, [pc, #468]	@ (8003e9c <PID_cal+0x4d0>)
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d045      	beq.n	8003d58 <PID_cal+0x38c>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	330c      	adds	r3, #12
 8003cd0:	ed93 7a00 	vldr	s14, [r3]
 8003cd4:	4b71      	ldr	r3, [pc, #452]	@ (8003e9c <PID_cal+0x4d0>)
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	ee07 3a90 	vmov	s15, r3
 8003cdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ce0:	4b6c      	ldr	r3, [pc, #432]	@ (8003e94 <PID_cal+0x4c8>)
 8003ce2:	edd3 7a00 	vldr	s15, [r3]
 8003ce6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cea:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003cee:	4b6b      	ldr	r3, [pc, #428]	@ (8003e9c <PID_cal+0x4d0>)
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cfa:	4b66      	ldr	r3, [pc, #408]	@ (8003e94 <PID_cal+0x4c8>)
 8003cfc:	edd3 7a00 	vldr	s15, [r3]
 8003d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	3310      	adds	r3, #16
 8003d14:	edd3 6a00 	vldr	s13, [r3]
 8003d18:	4b60      	ldr	r3, [pc, #384]	@ (8003e9c <PID_cal+0x4d0>)
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	ee07 3a90 	vmov	s15, r3
 8003d20:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003d24:	4b5b      	ldr	r3, [pc, #364]	@ (8003e94 <PID_cal+0x4c8>)
 8003d26:	edd3 7a00 	vldr	s15, [r3]
 8003d2a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003d2e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003d32:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003d36:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003d3a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003d3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	330c      	adds	r3, #12
 8003d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d4a:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	3310      	adds	r3, #16
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	68d2      	ldr	r2, [r2, #12]
 8003d56:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	ed93 7a00 	vldr	s14, [r3]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	330c      	adds	r3, #12
 8003d62:	edd3 7a00 	vldr	s15, [r3]
 8003d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003d70:	e1b9      	b.n	80040e6 <PID_cal+0x71a>

		case 4:// angular rates pitch

			*PID_var = PID_FAC[0]*(pitch_ar_error);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	ed93 7a00 	vldr	s14, [r3]
 8003d78:	4b49      	ldr	r3, [pc, #292]	@ (8003ea0 <PID_cal+0x4d4>)
 8003d7a:	edd3 7a00 	vldr	s15, [r3]
 8003d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_pitch*looptime;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	ed93 7a00 	vldr	s14, [r3]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	3304      	adds	r3, #4
 8003d92:	edd3 6a00 	vldr	s13, [r3]
 8003d96:	4b43      	ldr	r3, [pc, #268]	@ (8003ea4 <PID_cal+0x4d8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003da2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003da6:	4b3b      	ldr	r3, [pc, #236]	@ (8003e94 <PID_cal+0x4c8>)
 8003da8:	edd3 7a00 	vldr	s15, [r3]
 8003dac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	edc3 7a00 	vstr	s15, [r3]


			PID_FAC[3] = PID_FAC[2]*((pitch_ar_error) - old_error_angular_rate_pitch);//policzenie częsci D
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	ed93 7a00 	vldr	s14, [r3]
 8003dc2:	4b37      	ldr	r3, [pc, #220]	@ (8003ea0 <PID_cal+0x4d4>)
 8003dc4:	edd3 6a00 	vldr	s13, [r3]
 8003dc8:	4b37      	ldr	r3, [pc, #220]	@ (8003ea8 <PID_cal+0x4dc>)
 8003dca:	edd3 7a00 	vldr	s15, [r3]
 8003dce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dda:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 8003dde:	4b33      	ldr	r3, [pc, #204]	@ (8003eac <PID_cal+0x4e0>)
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d045      	beq.n	8003e72 <PID_cal+0x4a6>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	330c      	adds	r3, #12
 8003dea:	ed93 7a00 	vldr	s14, [r3]
 8003dee:	4b2f      	ldr	r3, [pc, #188]	@ (8003eac <PID_cal+0x4e0>)
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003dfa:	4b26      	ldr	r3, [pc, #152]	@ (8003e94 <PID_cal+0x4c8>)
 8003dfc:	edd3 7a00 	vldr	s15, [r3]
 8003e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e04:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e08:	4b28      	ldr	r3, [pc, #160]	@ (8003eac <PID_cal+0x4e0>)
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e14:	4b1f      	ldr	r3, [pc, #124]	@ (8003e94 <PID_cal+0x4c8>)
 8003e16:	edd3 7a00 	vldr	s15, [r3]
 8003e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	3310      	adds	r3, #16
 8003e2e:	edd3 6a00 	vldr	s13, [r3]
 8003e32:	4b1e      	ldr	r3, [pc, #120]	@ (8003eac <PID_cal+0x4e0>)
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	ee07 3a90 	vmov	s15, r3
 8003e3a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003e3e:	4b15      	ldr	r3, [pc, #84]	@ (8003e94 <PID_cal+0x4c8>)
 8003e40:	edd3 7a00 	vldr	s15, [r3]
 8003e44:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003e48:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003e4c:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003e50:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003e54:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003e58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	330c      	adds	r3, #12
 8003e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e64:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	3310      	adds	r3, #16
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	68d2      	ldr	r2, [r2, #12]
 8003e70:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	ed93 7a00 	vldr	s14, [r3]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	edd3 7a00 	vldr	s15, [r3]
 8003e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	edc3 7a00 	vstr	s15, [r3]

			break;
 8003e8a:	e12c      	b.n	80040e6 <PID_cal+0x71a>
 8003e8c:	0000408c 	.word	0x0000408c
 8003e90:	000040bc 	.word	0x000040bc
 8003e94:	0801ea5c 	.word	0x0801ea5c
 8003e98:	000040a4 	.word	0x000040a4
 8003e9c:	00004076 	.word	0x00004076
 8003ea0:	00004090 	.word	0x00004090
 8003ea4:	000040c0 	.word	0x000040c0
 8003ea8:	000040a8 	.word	0x000040a8
 8003eac:	00004074 	.word	0x00004074

		case 5:// angular rates rool

			*PID_var = PID_FAC[0]*(rool_ar_error);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	ed93 7a00 	vldr	s14, [r3]
 8003eb6:	4b8f      	ldr	r3, [pc, #572]	@ (80040f4 <PID_cal+0x728>)
 8003eb8:	edd3 7a00 	vldr	s15, [r3]
 8003ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_rool*looptime;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	ed93 7a00 	vldr	s14, [r3]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	edd3 6a00 	vldr	s13, [r3]
 8003ed4:	4b88      	ldr	r3, [pc, #544]	@ (80040f8 <PID_cal+0x72c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	ee07 3a90 	vmov	s15, r3
 8003edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ee0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ee4:	4b85      	ldr	r3, [pc, #532]	@ (80040fc <PID_cal+0x730>)
 8003ee6:	edd3 7a00 	vldr	s15, [r3]
 8003eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((rool_ar_error) - old_error_angular_rate_rool);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	3308      	adds	r3, #8
 8003efc:	ed93 7a00 	vldr	s14, [r3]
 8003f00:	4b7c      	ldr	r3, [pc, #496]	@ (80040f4 <PID_cal+0x728>)
 8003f02:	edd3 6a00 	vldr	s13, [r3]
 8003f06:	4b7e      	ldr	r3, [pc, #504]	@ (8004100 <PID_cal+0x734>)
 8003f08:	edd3 7a00 	vldr	s15, [r3]
 8003f0c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	330c      	adds	r3, #12
 8003f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f18:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 8003f1c:	4b79      	ldr	r3, [pc, #484]	@ (8004104 <PID_cal+0x738>)
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d045      	beq.n	8003fb0 <PID_cal+0x5e4>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	330c      	adds	r3, #12
 8003f28:	ed93 7a00 	vldr	s14, [r3]
 8003f2c:	4b75      	ldr	r3, [pc, #468]	@ (8004104 <PID_cal+0x738>)
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	ee07 3a90 	vmov	s15, r3
 8003f34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f38:	4b70      	ldr	r3, [pc, #448]	@ (80040fc <PID_cal+0x730>)
 8003f3a:	edd3 7a00 	vldr	s15, [r3]
 8003f3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f42:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003f46:	4b6f      	ldr	r3, [pc, #444]	@ (8004104 <PID_cal+0x738>)
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f52:	4b6a      	ldr	r3, [pc, #424]	@ (80040fc <PID_cal+0x730>)
 8003f54:	edd3 7a00 	vldr	s15, [r3]
 8003f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	3310      	adds	r3, #16
 8003f6c:	edd3 6a00 	vldr	s13, [r3]
 8003f70:	4b64      	ldr	r3, [pc, #400]	@ (8004104 <PID_cal+0x738>)
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	ee07 3a90 	vmov	s15, r3
 8003f78:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003f7c:	4b5f      	ldr	r3, [pc, #380]	@ (80040fc <PID_cal+0x730>)
 8003f7e:	edd3 7a00 	vldr	s15, [r3]
 8003f82:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003f86:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003f8a:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003f8e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003f92:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fa2:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	3310      	adds	r3, #16
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	68d2      	ldr	r2, [r2, #12]
 8003fae:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	ed93 7a00 	vldr	s14, [r3]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	edd3 7a00 	vldr	s15, [r3]
 8003fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003fc8:	e08d      	b.n	80040e6 <PID_cal+0x71a>

		case 6:// angular rates yaw

			*PID_var = PID_FAC[0]*(yaw_ar_error);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	ed93 7a00 	vldr	s14, [r3]
 8003fd0:	4b4d      	ldr	r3, [pc, #308]	@ (8004108 <PID_cal+0x73c>)
 8003fd2:	edd3 7a00 	vldr	s15, [r3]
 8003fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_yaw*looptime;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	ed93 7a00 	vldr	s14, [r3]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	edd3 6a00 	vldr	s13, [r3]
 8003fee:	4b47      	ldr	r3, [pc, #284]	@ (800410c <PID_cal+0x740>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ffa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80040fc <PID_cal+0x730>)
 8004000:	edd3 7a00 	vldr	s15, [r3]
 8004004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((yaw_ar_error) - old_error_angular_rate_yaw);
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3308      	adds	r3, #8
 8004016:	ed93 7a00 	vldr	s14, [r3]
 800401a:	4b3b      	ldr	r3, [pc, #236]	@ (8004108 <PID_cal+0x73c>)
 800401c:	edd3 6a00 	vldr	s13, [r3]
 8004020:	4b3b      	ldr	r3, [pc, #236]	@ (8004110 <PID_cal+0x744>)
 8004022:	edd3 7a00 	vldr	s15, [r3]
 8004026:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	330c      	adds	r3, #12
 800402e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004032:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 8004036:	4b33      	ldr	r3, [pc, #204]	@ (8004104 <PID_cal+0x738>)
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d045      	beq.n	80040ca <PID_cal+0x6fe>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));//todo
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	330c      	adds	r3, #12
 8004042:	ed93 7a00 	vldr	s14, [r3]
 8004046:	4b2f      	ldr	r3, [pc, #188]	@ (8004104 <PID_cal+0x738>)
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004052:	4b2a      	ldr	r3, [pc, #168]	@ (80040fc <PID_cal+0x730>)
 8004054:	edd3 7a00 	vldr	s15, [r3]
 8004058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800405c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004060:	4b28      	ldr	r3, [pc, #160]	@ (8004104 <PID_cal+0x738>)
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	ee07 3a90 	vmov	s15, r3
 8004068:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800406c:	4b23      	ldr	r3, [pc, #140]	@ (80040fc <PID_cal+0x730>)
 800406e:	edd3 7a00 	vldr	s15, [r3]
 8004072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004076:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800407a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800407e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	3310      	adds	r3, #16
 8004086:	edd3 6a00 	vldr	s13, [r3]
 800408a:	4b1e      	ldr	r3, [pc, #120]	@ (8004104 <PID_cal+0x738>)
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004096:	4b19      	ldr	r3, [pc, #100]	@ (80040fc <PID_cal+0x730>)
 8004098:	edd3 7a00 	vldr	s15, [r3]
 800409c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80040a0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80040a4:	ee37 6a86 	vadd.f32	s12, s15, s12
 80040a8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80040ac:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80040b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	330c      	adds	r3, #12
 80040b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040bc:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	3310      	adds	r3, #16
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	68d2      	ldr	r2, [r2, #12]
 80040c8:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	ed93 7a00 	vldr	s14, [r3]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	330c      	adds	r3, #12
 80040d4:	edd3 7a00 	vldr	s15, [r3]
 80040d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	edc3 7a00 	vstr	s15, [r3]
			break;
 80040e2:	e000      	b.n	80040e6 <PID_cal+0x71a>
		default:
			break;
 80040e4:	bf00      	nop
	}
}
 80040e6:	bf00      	nop
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	00004094 	.word	0x00004094
 80040f8:	000040c4 	.word	0x000040c4
 80040fc:	0801ea5c 	.word	0x0801ea5c
 8004100:	000040ac 	.word	0x000040ac
 8004104:	00004074 	.word	0x00004074
 8004108:	00004098 	.word	0x00004098
 800410c:	000040c8 	.word	0x000040c8
 8004110:	000040b0 	.word	0x000040b0
 8004114:	00000000 	.word	0x00000000

08004118 <Get_batteryvalue>:

void Get_batteryvalue(void){
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 800411c:	4b1c      	ldr	r3, [pc, #112]	@ (8004190 <Get_batteryvalue+0x78>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 8004124:	ee07 3a90 	vmov	s15, r3
 8004128:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800412c:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8004188 <Get_batteryvalue+0x70>
 8004130:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004134:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004138:	ee17 3a90 	vmov	r3, s15
 800413c:	b29a      	uxth	r2, r3
 800413e:	4b15      	ldr	r3, [pc, #84]	@ (8004194 <Get_batteryvalue+0x7c>)
 8004140:	801a      	strh	r2, [r3, #0]
	if(MYDRON.batterysize >= 100){
 8004142:	4b14      	ldr	r3, [pc, #80]	@ (8004194 <Get_batteryvalue+0x7c>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	2b63      	cmp	r3, #99	@ 0x63
 8004148:	d902      	bls.n	8004150 <Get_batteryvalue+0x38>
		MYDRON.batterysize = 100;
 800414a:	4b12      	ldr	r3, [pc, #72]	@ (8004194 <Get_batteryvalue+0x7c>)
 800414c:	2264      	movs	r2, #100	@ 0x64
 800414e:	801a      	strh	r2, [r3, #0]
	}

	if(MYDRON.batterysize < 25){
 8004150:	4b10      	ldr	r3, [pc, #64]	@ (8004194 <Get_batteryvalue+0x7c>)
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	2b18      	cmp	r3, #24
 8004156:	d802      	bhi.n	800415e <Get_batteryvalue+0x46>
		MYDRON.dron_status.Battery = DRON_BATTERY_RUN_OUT;
 8004158:	4b0e      	ldr	r3, [pc, #56]	@ (8004194 <Get_batteryvalue+0x7c>)
 800415a:	2207      	movs	r2, #7
 800415c:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize <= 10){
 800415e:	4b0d      	ldr	r3, [pc, #52]	@ (8004194 <Get_batteryvalue+0x7c>)
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	2b0a      	cmp	r3, #10
 8004164:	d802      	bhi.n	800416c <Get_batteryvalue+0x54>
		MYDRON.dron_status.Battery = DRON_BATTERY_CRIT_VAL;
 8004166:	4b0b      	ldr	r3, [pc, #44]	@ (8004194 <Get_batteryvalue+0x7c>)
 8004168:	2209      	movs	r2, #9
 800416a:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize >= 25){
 800416c:	4b09      	ldr	r3, [pc, #36]	@ (8004194 <Get_batteryvalue+0x7c>)
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	2b18      	cmp	r3, #24
 8004172:	d902      	bls.n	800417a <Get_batteryvalue+0x62>
		MYDRON.dron_status.Battery = DRON_BATTERY_OK;
 8004174:	4b07      	ldr	r3, [pc, #28]	@ (8004194 <Get_batteryvalue+0x7c>)
 8004176:	2208      	movs	r2, #8
 8004178:	829a      	strh	r2, [r3, #20]
	}
}
 800417a:	bf00      	nop
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	f3af 8000 	nop.w
 8004188:	7ae147ae 	.word	0x7ae147ae
 800418c:	401dae14 	.word	0x401dae14
 8004190:	24000eb0 	.word	0x24000eb0
 8004194:	00000178 	.word	0x00000178

08004198 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800419c:	2200      	movs	r2, #0
 800419e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041a2:	4802      	ldr	r0, [pc, #8]	@ (80041ac <SELECT+0x14>)
 80041a4:	f00a fb32 	bl	800e80c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 80041a8:	bf00      	nop
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	58020c00 	.word	0x58020c00

080041b0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80041b4:	2201      	movs	r2, #1
 80041b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041ba:	4802      	ldr	r0, [pc, #8]	@ (80041c4 <DESELECT+0x14>)
 80041bc:	f00a fb26 	bl	800e80c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 80041c0:	bf00      	nop
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	58020c00 	.word	0x58020c00

080041c8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 80041d2:	bf00      	nop
 80041d4:	4b07      	ldr	r3, [pc, #28]	@ (80041f4 <SPI_TxByte+0x2c>)
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d1f9      	bne.n	80041d4 <SPI_TxByte+0xc>


	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80041e0:	1df9      	adds	r1, r7, #7
 80041e2:	2364      	movs	r3, #100	@ 0x64
 80041e4:	2201      	movs	r2, #1
 80041e6:	4804      	ldr	r0, [pc, #16]	@ (80041f8 <SPI_TxByte+0x30>)
 80041e8:	f010 fc6c 	bl	8014ac4 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(HSPI_SDCARD, &data, 1);
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40020010 	.word	0x40020010
 80041f8:	240001ec 	.word	0x240001ec

080041fc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	807b      	strh	r3, [r7, #2]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));//czekanie na zakonczenie tramnsmisji DMA?
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8004208:	bf00      	nop
 800420a:	4b08      	ldr	r3, [pc, #32]	@ (800422c <SPI_TxBuffer+0x30>)
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004212:	2b20      	cmp	r3, #32
 8004214:	d1f9      	bne.n	800420a <SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
	HAL_SPI_Transmit_DMA(HSPI_SDCARD, buffer, len);
 8004216:	887b      	ldrh	r3, [r7, #2]
 8004218:	461a      	mov	r2, r3
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4804      	ldr	r0, [pc, #16]	@ (8004230 <SPI_TxBuffer+0x34>)
 800421e:	f011 fbeb 	bl	80159f8 <HAL_SPI_Transmit_DMA>
}
 8004222:	bf00      	nop
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40020010 	.word	0x40020010
 8004230:	240001ec 	.word	0x240001ec

08004234 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800423a:	23ff      	movs	r3, #255	@ 0xff
 800423c:	71fb      	strb	r3, [r7, #7]

	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 800423e:	bf00      	nop
 8004240:	4b09      	ldr	r3, [pc, #36]	@ (8004268 <SPI_RxByte+0x34>)
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004248:	2b20      	cmp	r3, #32
 800424a:	d1f9      	bne.n	8004240 <SPI_RxByte+0xc>

	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800424c:	1dba      	adds	r2, r7, #6
 800424e:	1df9      	adds	r1, r7, #7
 8004250:	2364      	movs	r3, #100	@ 0x64
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	2301      	movs	r3, #1
 8004256:	4805      	ldr	r0, [pc, #20]	@ (800426c <SPI_RxByte+0x38>)
 8004258:	f011 f894 	bl	8015384 <HAL_SPI_TransmitReceive>

	return data;
 800425c:	79bb      	ldrb	r3, [r7, #6]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40020010 	.word	0x40020010
 800426c:	240001ec 	.word	0x240001ec

08004270 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8004278:	f7ff ffdc 	bl	8004234 <SPI_RxByte>
 800427c:	4603      	mov	r3, r0
 800427e:	461a      	mov	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	701a      	strb	r2, [r3, #0]
}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8004292:	4b0a      	ldr	r3, [pc, #40]	@ (80042bc <SD_ReadyWait+0x30>)
 8004294:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004298:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800429a:	f7ff ffcb 	bl	8004234 <SPI_RxByte>
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	2bff      	cmp	r3, #255	@ 0xff
 80042a6:	d004      	beq.n	80042b2 <SD_ReadyWait+0x26>
 80042a8:	4b04      	ldr	r3, [pc, #16]	@ (80042bc <SD_ReadyWait+0x30>)
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f3      	bne.n	800429a <SD_ReadyWait+0xe>

	return res;
 80042b2:	79fb      	ldrb	r3, [r7, #7]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	2400037c 	.word	0x2400037c

080042c0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80042c6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80042ca:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80042cc:	f7ff ff70 	bl	80041b0 <DESELECT>
	for(int i = 0; i < 10; i++)
 80042d0:	2300      	movs	r3, #0
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	e005      	b.n	80042e2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80042d6:	20ff      	movs	r0, #255	@ 0xff
 80042d8:	f7ff ff76 	bl	80041c8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	3301      	adds	r3, #1
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b09      	cmp	r3, #9
 80042e6:	ddf6      	ble.n	80042d6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80042e8:	f7ff ff56 	bl	8004198 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80042ec:	2340      	movs	r3, #64	@ 0x40
 80042ee:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8004300:	2395      	movs	r3, #149	@ 0x95
 8004302:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8004304:	463b      	mov	r3, r7
 8004306:	2106      	movs	r1, #6
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff ff77 	bl	80041fc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800430e:	e002      	b.n	8004316 <SD_PowerOn+0x56>
	{
		cnt--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3b01      	subs	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8004316:	f7ff ff8d 	bl	8004234 <SPI_RxByte>
 800431a:	4603      	mov	r3, r0
 800431c:	2b01      	cmp	r3, #1
 800431e:	d002      	beq.n	8004326 <SD_PowerOn+0x66>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f4      	bne.n	8004310 <SD_PowerOn+0x50>
	}

	DESELECT();
 8004326:	f7ff ff43 	bl	80041b0 <DESELECT>
	SPI_TxByte(0XFF);
 800432a:	20ff      	movs	r0, #255	@ 0xff
 800432c:	f7ff ff4c 	bl	80041c8 <SPI_TxByte>

	PowerFlag = 1;
 8004330:	4b03      	ldr	r3, [pc, #12]	@ (8004340 <SD_PowerOn+0x80>)
 8004332:	2201      	movs	r2, #1
 8004334:	701a      	strb	r2, [r3, #0]
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	24000195 	.word	0x24000195

08004344 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8004348:	4b03      	ldr	r3, [pc, #12]	@ (8004358 <SD_PowerOff+0x14>)
 800434a:	2200      	movs	r2, #0
 800434c:	701a      	strb	r2, [r3, #0]
}
 800434e:	bf00      	nop
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	24000195 	.word	0x24000195

0800435c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8004360:	4b03      	ldr	r3, [pc, #12]	@ (8004370 <SD_CheckPower+0x14>)
 8004362:	781b      	ldrb	r3, [r3, #0]
}
 8004364:	4618      	mov	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	24000195 	.word	0x24000195

08004374 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 10;
 800437e:	4b14      	ldr	r3, [pc, #80]	@ (80043d0 <SD_RxDataBlock+0x5c>)
 8004380:	220a      	movs	r2, #10
 8004382:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8004384:	f7ff ff56 	bl	8004234 <SPI_RxByte>
 8004388:	4603      	mov	r3, r0
 800438a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2bff      	cmp	r3, #255	@ 0xff
 8004390:	d104      	bne.n	800439c <SD_RxDataBlock+0x28>
 8004392:	4b0f      	ldr	r3, [pc, #60]	@ (80043d0 <SD_RxDataBlock+0x5c>)
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f3      	bne.n	8004384 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2bfe      	cmp	r3, #254	@ 0xfe
 80043a0:	d001      	beq.n	80043a6 <SD_RxDataBlock+0x32>
 80043a2:	2300      	movs	r3, #0
 80043a4:	e00f      	b.n	80043c6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff ff5f 	bl	8004270 <SPI_RxBytePtr>
	} while(len--);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	1e5a      	subs	r2, r3, #1
 80043b6:	603a      	str	r2, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f4      	bne.n	80043a6 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80043bc:	f7ff ff3a 	bl	8004234 <SPI_RxByte>
	SPI_RxByte();
 80043c0:	f7ff ff38 	bl	8004234 <SPI_RxByte>

	return TRUE;
 80043c4:	2301      	movs	r3, #1
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	24000378 	.word	0x24000378

080043d4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80043e4:	f7ff ff52 	bl	800428c <SD_ReadyWait>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2bff      	cmp	r3, #255	@ 0xff
 80043ec:	d001      	beq.n	80043f2 <SD_TxDataBlock+0x1e>
 80043ee:	2300      	movs	r3, #0
 80043f0:	e02f      	b.n	8004452 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fee7 	bl	80041c8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	2bfd      	cmp	r3, #253	@ 0xfd
 80043fe:	d020      	beq.n	8004442 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8004400:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff fef9 	bl	80041fc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800440a:	f7ff ff13 	bl	8004234 <SPI_RxByte>
		SPI_RxByte();
 800440e:	f7ff ff11 	bl	8004234 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8004412:	e00b      	b.n	800442c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8004414:	f7ff ff0e 	bl	8004234 <SPI_RxByte>
 8004418:	4603      	mov	r3, r0
 800441a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	2b05      	cmp	r3, #5
 8004424:	d006      	beq.n	8004434 <SD_TxDataBlock+0x60>
			i++;
 8004426:	7bbb      	ldrb	r3, [r7, #14]
 8004428:	3301      	adds	r3, #1
 800442a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800442c:	7bbb      	ldrb	r3, [r7, #14]
 800442e:	2b40      	cmp	r3, #64	@ 0x40
 8004430:	d9f0      	bls.n	8004414 <SD_TxDataBlock+0x40>
 8004432:	e000      	b.n	8004436 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8004434:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8004436:	bf00      	nop
 8004438:	f7ff fefc 	bl	8004234 <SPI_RxByte>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0fa      	beq.n	8004438 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	2b05      	cmp	r3, #5
 800444a:	d101      	bne.n	8004450 <SD_TxDataBlock+0x7c>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <SD_TxDataBlock+0x7e>

	return FALSE;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	4603      	mov	r3, r0
 8004462:	6039      	str	r1, [r7, #0]
 8004464:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8004466:	f7ff ff11 	bl	800428c <SD_ReadyWait>
 800446a:	4603      	mov	r3, r0
 800446c:	2bff      	cmp	r3, #255	@ 0xff
 800446e:	d001      	beq.n	8004474 <SD_SendCmd+0x1a>
 8004470:	23ff      	movs	r3, #255	@ 0xff
 8004472:	e042      	b.n	80044fa <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fea6 	bl	80041c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	0e1b      	lsrs	r3, r3, #24
 8004480:	b2db      	uxtb	r3, r3
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fea0 	bl	80041c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	0c1b      	lsrs	r3, r3, #16
 800448c:	b2db      	uxtb	r3, r3
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff fe9a 	bl	80041c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	b2db      	uxtb	r3, r3
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fe94 	bl	80041c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff fe8f 	bl	80041c8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	2b40      	cmp	r3, #64	@ 0x40
 80044ae:	d102      	bne.n	80044b6 <SD_SendCmd+0x5c>
 80044b0:	2395      	movs	r3, #149	@ 0x95
 80044b2:	73fb      	strb	r3, [r7, #15]
 80044b4:	e007      	b.n	80044c6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	2b48      	cmp	r3, #72	@ 0x48
 80044ba:	d102      	bne.n	80044c2 <SD_SendCmd+0x68>
 80044bc:	2387      	movs	r3, #135	@ 0x87
 80044be:	73fb      	strb	r3, [r7, #15]
 80044c0:	e001      	b.n	80044c6 <SD_SendCmd+0x6c>
	else crc = 1;
 80044c2:	2301      	movs	r3, #1
 80044c4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fe7d 	bl	80041c8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	2b4c      	cmp	r3, #76	@ 0x4c
 80044d2:	d101      	bne.n	80044d8 <SD_SendCmd+0x7e>
 80044d4:	f7ff feae 	bl	8004234 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80044d8:	230a      	movs	r3, #10
 80044da:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80044dc:	f7ff feaa 	bl	8004234 <SPI_RxByte>
 80044e0:	4603      	mov	r3, r0
 80044e2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80044e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	da05      	bge.n	80044f8 <SD_SendCmd+0x9e>
 80044ec:	7bbb      	ldrb	r3, [r7, #14]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	73bb      	strb	r3, [r7, #14]
 80044f2:	7bbb      	ldrb	r3, [r7, #14]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f1      	bne.n	80044dc <SD_SendCmd+0x82>

	return res;
 80044f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <SD_disk_initialize+0x14>
 8004514:	2301      	movs	r3, #1
 8004516:	e0d6      	b.n	80046c6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004518:	4b6d      	ldr	r3, [pc, #436]	@ (80046d0 <SD_disk_initialize+0x1cc>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <SD_disk_initialize+0x2a>
 8004526:	4b6a      	ldr	r3, [pc, #424]	@ (80046d0 <SD_disk_initialize+0x1cc>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	e0cb      	b.n	80046c6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800452e:	f7ff fec7 	bl	80042c0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8004532:	f7ff fe31 	bl	8004198 <SELECT>

	/* check disk type */
	type = 0;
 8004536:	2300      	movs	r3, #0
 8004538:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800453a:	2100      	movs	r1, #0
 800453c:	2040      	movs	r0, #64	@ 0x40
 800453e:	f7ff ff8c 	bl	800445a <SD_SendCmd>
 8004542:	4603      	mov	r3, r0
 8004544:	2b01      	cmp	r3, #1
 8004546:	f040 80a6 	bne.w	8004696 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800454a:	4b62      	ldr	r3, [pc, #392]	@ (80046d4 <SD_disk_initialize+0x1d0>)
 800454c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004550:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8004552:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8004556:	2048      	movs	r0, #72	@ 0x48
 8004558:	f7ff ff7f 	bl	800445a <SD_SendCmd>
 800455c:	4603      	mov	r3, r0
 800455e:	2b01      	cmp	r3, #1
 8004560:	d158      	bne.n	8004614 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8004562:	2300      	movs	r3, #0
 8004564:	73fb      	strb	r3, [r7, #15]
 8004566:	e00c      	b.n	8004582 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8004568:	7bfc      	ldrb	r4, [r7, #15]
 800456a:	f7ff fe63 	bl	8004234 <SPI_RxByte>
 800456e:	4603      	mov	r3, r0
 8004570:	461a      	mov	r2, r3
 8004572:	f104 0310 	add.w	r3, r4, #16
 8004576:	443b      	add	r3, r7
 8004578:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	3301      	adds	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	2b03      	cmp	r3, #3
 8004586:	d9ef      	bls.n	8004568 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004588:	7abb      	ldrb	r3, [r7, #10]
 800458a:	2b01      	cmp	r3, #1
 800458c:	f040 8083 	bne.w	8004696 <SD_disk_initialize+0x192>
 8004590:	7afb      	ldrb	r3, [r7, #11]
 8004592:	2baa      	cmp	r3, #170	@ 0xaa
 8004594:	d17f      	bne.n	8004696 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004596:	2100      	movs	r1, #0
 8004598:	2077      	movs	r0, #119	@ 0x77
 800459a:	f7ff ff5e 	bl	800445a <SD_SendCmd>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d807      	bhi.n	80045b4 <SD_disk_initialize+0xb0>
 80045a4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80045a8:	2069      	movs	r0, #105	@ 0x69
 80045aa:	f7ff ff56 	bl	800445a <SD_SendCmd>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80045b4:	4b47      	ldr	r3, [pc, #284]	@ (80046d4 <SD_disk_initialize+0x1d0>)
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1eb      	bne.n	8004596 <SD_disk_initialize+0x92>
 80045be:	e000      	b.n	80045c2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80045c0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80045c2:	4b44      	ldr	r3, [pc, #272]	@ (80046d4 <SD_disk_initialize+0x1d0>)
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d064      	beq.n	8004696 <SD_disk_initialize+0x192>
 80045cc:	2100      	movs	r1, #0
 80045ce:	207a      	movs	r0, #122	@ 0x7a
 80045d0:	f7ff ff43 	bl	800445a <SD_SendCmd>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d15d      	bne.n	8004696 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80045da:	2300      	movs	r3, #0
 80045dc:	73fb      	strb	r3, [r7, #15]
 80045de:	e00c      	b.n	80045fa <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80045e0:	7bfc      	ldrb	r4, [r7, #15]
 80045e2:	f7ff fe27 	bl	8004234 <SPI_RxByte>
 80045e6:	4603      	mov	r3, r0
 80045e8:	461a      	mov	r2, r3
 80045ea:	f104 0310 	add.w	r3, r4, #16
 80045ee:	443b      	add	r3, r7
 80045f0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	3301      	adds	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d9ef      	bls.n	80045e0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004600:	7a3b      	ldrb	r3, [r7, #8]
 8004602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <SD_disk_initialize+0x10a>
 800460a:	230c      	movs	r3, #12
 800460c:	e000      	b.n	8004610 <SD_disk_initialize+0x10c>
 800460e:	2304      	movs	r3, #4
 8004610:	73bb      	strb	r3, [r7, #14]
 8004612:	e040      	b.n	8004696 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8004614:	2100      	movs	r1, #0
 8004616:	2077      	movs	r0, #119	@ 0x77
 8004618:	f7ff ff1f 	bl	800445a <SD_SendCmd>
 800461c:	4603      	mov	r3, r0
 800461e:	2b01      	cmp	r3, #1
 8004620:	d808      	bhi.n	8004634 <SD_disk_initialize+0x130>
 8004622:	2100      	movs	r1, #0
 8004624:	2069      	movs	r0, #105	@ 0x69
 8004626:	f7ff ff18 	bl	800445a <SD_SendCmd>
 800462a:	4603      	mov	r3, r0
 800462c:	2b01      	cmp	r3, #1
 800462e:	d801      	bhi.n	8004634 <SD_disk_initialize+0x130>
 8004630:	2302      	movs	r3, #2
 8004632:	e000      	b.n	8004636 <SD_disk_initialize+0x132>
 8004634:	2301      	movs	r3, #1
 8004636:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8004638:	7bbb      	ldrb	r3, [r7, #14]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d10e      	bne.n	800465c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800463e:	2100      	movs	r1, #0
 8004640:	2077      	movs	r0, #119	@ 0x77
 8004642:	f7ff ff0a 	bl	800445a <SD_SendCmd>
 8004646:	4603      	mov	r3, r0
 8004648:	2b01      	cmp	r3, #1
 800464a:	d80e      	bhi.n	800466a <SD_disk_initialize+0x166>
 800464c:	2100      	movs	r1, #0
 800464e:	2069      	movs	r0, #105	@ 0x69
 8004650:	f7ff ff03 	bl	800445a <SD_SendCmd>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d107      	bne.n	800466a <SD_disk_initialize+0x166>
 800465a:	e00d      	b.n	8004678 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800465c:	2100      	movs	r1, #0
 800465e:	2041      	movs	r0, #65	@ 0x41
 8004660:	f7ff fefb 	bl	800445a <SD_SendCmd>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800466a:	4b1a      	ldr	r3, [pc, #104]	@ (80046d4 <SD_disk_initialize+0x1d0>)
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e1      	bne.n	8004638 <SD_disk_initialize+0x134>
 8004674:	e000      	b.n	8004678 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004676:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8004678:	4b16      	ldr	r3, [pc, #88]	@ (80046d4 <SD_disk_initialize+0x1d0>)
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <SD_disk_initialize+0x18e>
 8004682:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004686:	2050      	movs	r0, #80	@ 0x50
 8004688:	f7ff fee7 	bl	800445a <SD_SendCmd>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <SD_disk_initialize+0x192>
 8004692:	2300      	movs	r3, #0
 8004694:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8004696:	4a10      	ldr	r2, [pc, #64]	@ (80046d8 <SD_disk_initialize+0x1d4>)
 8004698:	7bbb      	ldrb	r3, [r7, #14]
 800469a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800469c:	f7ff fd88 	bl	80041b0 <DESELECT>
	SPI_RxByte();
 80046a0:	f7ff fdc8 	bl	8004234 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80046a4:	7bbb      	ldrb	r3, [r7, #14]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d008      	beq.n	80046bc <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80046aa:	4b09      	ldr	r3, [pc, #36]	@ (80046d0 <SD_disk_initialize+0x1cc>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <SD_disk_initialize+0x1cc>)
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	e001      	b.n	80046c0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80046bc:	f7ff fe42 	bl	8004344 <SD_PowerOff>
	}

	return Stat;
 80046c0:	4b03      	ldr	r3, [pc, #12]	@ (80046d0 <SD_disk_initialize+0x1cc>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	b2db      	uxtb	r3, r3
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd90      	pop	{r4, r7, pc}
 80046ce:	bf00      	nop
 80046d0:	24000000 	.word	0x24000000
 80046d4:	24000378 	.word	0x24000378
 80046d8:	24000194 	.word	0x24000194

080046dc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <SD_disk_status+0x14>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e002      	b.n	80046f6 <SD_disk_status+0x1a>
	return Stat;
 80046f0:	4b04      	ldr	r3, [pc, #16]	@ (8004704 <SD_disk_status+0x28>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	b2db      	uxtb	r3, r3
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	24000000 	.word	0x24000000

08004708 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	607a      	str	r2, [r7, #4]
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	4603      	mov	r3, r0
 8004716:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d102      	bne.n	8004724 <SD_disk_read+0x1c>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <SD_disk_read+0x20>
 8004724:	2304      	movs	r3, #4
 8004726:	e051      	b.n	80047cc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004728:	4b2a      	ldr	r3, [pc, #168]	@ (80047d4 <SD_disk_read+0xcc>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <SD_disk_read+0x32>
 8004736:	2303      	movs	r3, #3
 8004738:	e048      	b.n	80047cc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800473a:	4b27      	ldr	r3, [pc, #156]	@ (80047d8 <SD_disk_read+0xd0>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d102      	bne.n	800474c <SD_disk_read+0x44>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	025b      	lsls	r3, r3, #9
 800474a:	607b      	str	r3, [r7, #4]

	SELECT();
 800474c:	f7ff fd24 	bl	8004198 <SELECT>

	if (count == 1)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d111      	bne.n	800477a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	2051      	movs	r0, #81	@ 0x51
 800475a:	f7ff fe7e 	bl	800445a <SD_SendCmd>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d129      	bne.n	80047b8 <SD_disk_read+0xb0>
 8004764:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004768:	68b8      	ldr	r0, [r7, #8]
 800476a:	f7ff fe03 	bl	8004374 <SD_RxDataBlock>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d021      	beq.n	80047b8 <SD_disk_read+0xb0>
 8004774:	2300      	movs	r3, #0
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	e01e      	b.n	80047b8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	2052      	movs	r0, #82	@ 0x52
 800477e:	f7ff fe6c 	bl	800445a <SD_SendCmd>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d117      	bne.n	80047b8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8004788:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800478c:	68b8      	ldr	r0, [r7, #8]
 800478e:	f7ff fdf1 	bl	8004374 <SD_RxDataBlock>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <SD_disk_read+0xa6>
				buff += 512;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800479e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1ed      	bne.n	8004788 <SD_disk_read+0x80>
 80047ac:	e000      	b.n	80047b0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80047ae:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80047b0:	2100      	movs	r1, #0
 80047b2:	204c      	movs	r0, #76	@ 0x4c
 80047b4:	f7ff fe51 	bl	800445a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80047b8:	f7ff fcfa 	bl	80041b0 <DESELECT>
	SPI_RxByte();
 80047bc:	f7ff fd3a 	bl	8004234 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	24000000 	.word	0x24000000
 80047d8:	24000194 	.word	0x24000194

080047dc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4603      	mov	r3, r0
 80047ea:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d102      	bne.n	80047f8 <SD_disk_write+0x1c>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <SD_disk_write+0x20>
 80047f8:	2304      	movs	r3, #4
 80047fa:	e06b      	b.n	80048d4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80047fc:	4b37      	ldr	r3, [pc, #220]	@ (80048dc <SD_disk_write+0x100>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <SD_disk_write+0x32>
 800480a:	2303      	movs	r3, #3
 800480c:	e062      	b.n	80048d4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800480e:	4b33      	ldr	r3, [pc, #204]	@ (80048dc <SD_disk_write+0x100>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <SD_disk_write+0x44>
 800481c:	2302      	movs	r3, #2
 800481e:	e059      	b.n	80048d4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004820:	4b2f      	ldr	r3, [pc, #188]	@ (80048e0 <SD_disk_write+0x104>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d102      	bne.n	8004832 <SD_disk_write+0x56>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	025b      	lsls	r3, r3, #9
 8004830:	607b      	str	r3, [r7, #4]

	SELECT();
 8004832:	f7ff fcb1 	bl	8004198 <SELECT>

	if (count == 1)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d110      	bne.n	800485e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	2058      	movs	r0, #88	@ 0x58
 8004840:	f7ff fe0b 	bl	800445a <SD_SendCmd>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d13a      	bne.n	80048c0 <SD_disk_write+0xe4>
 800484a:	21fe      	movs	r1, #254	@ 0xfe
 800484c:	68b8      	ldr	r0, [r7, #8]
 800484e:	f7ff fdc1 	bl	80043d4 <SD_TxDataBlock>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d033      	beq.n	80048c0 <SD_disk_write+0xe4>
			count = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	e030      	b.n	80048c0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800485e:	4b20      	ldr	r3, [pc, #128]	@ (80048e0 <SD_disk_write+0x104>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800486a:	2100      	movs	r1, #0
 800486c:	2077      	movs	r0, #119	@ 0x77
 800486e:	f7ff fdf4 	bl	800445a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8004872:	6839      	ldr	r1, [r7, #0]
 8004874:	2057      	movs	r0, #87	@ 0x57
 8004876:	f7ff fdf0 	bl	800445a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	2059      	movs	r0, #89	@ 0x59
 800487e:	f7ff fdec 	bl	800445a <SD_SendCmd>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d11b      	bne.n	80048c0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004888:	21fc      	movs	r1, #252	@ 0xfc
 800488a:	68b8      	ldr	r0, [r7, #8]
 800488c:	f7ff fda2 	bl	80043d4 <SD_TxDataBlock>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <SD_disk_write+0xd0>
				buff += 512;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800489c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1ee      	bne.n	8004888 <SD_disk_write+0xac>
 80048aa:	e000      	b.n	80048ae <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80048ac:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80048ae:	21fd      	movs	r1, #253	@ 0xfd
 80048b0:	2000      	movs	r0, #0
 80048b2:	f7ff fd8f 	bl	80043d4 <SD_TxDataBlock>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <SD_disk_write+0xe4>
			{
				count = 1;
 80048bc:	2301      	movs	r3, #1
 80048be:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80048c0:	f7ff fc76 	bl	80041b0 <DESELECT>
	SPI_RxByte();
 80048c4:	f7ff fcb6 	bl	8004234 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bf14      	ite	ne
 80048ce:	2301      	movne	r3, #1
 80048d0:	2300      	moveq	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	24000000 	.word	0x24000000
 80048e0:	24000194 	.word	0x24000194

080048e4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b08b      	sub	sp, #44	@ 0x2c
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	603a      	str	r2, [r7, #0]
 80048ee:	71fb      	strb	r3, [r7, #7]
 80048f0:	460b      	mov	r3, r1
 80048f2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <SD_disk_ioctl+0x1e>
 80048fe:	2304      	movs	r3, #4
 8004900:	e113      	b.n	8004b2a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8004908:	79bb      	ldrb	r3, [r7, #6]
 800490a:	2b05      	cmp	r3, #5
 800490c:	d124      	bne.n	8004958 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d012      	beq.n	800493c <SD_disk_ioctl+0x58>
 8004916:	2b02      	cmp	r3, #2
 8004918:	dc1a      	bgt.n	8004950 <SD_disk_ioctl+0x6c>
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <SD_disk_ioctl+0x40>
 800491e:	2b01      	cmp	r3, #1
 8004920:	d006      	beq.n	8004930 <SD_disk_ioctl+0x4c>
 8004922:	e015      	b.n	8004950 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004924:	f7ff fd0e 	bl	8004344 <SD_PowerOff>
			res = RES_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800492e:	e0fa      	b.n	8004b26 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8004930:	f7ff fcc6 	bl	80042c0 <SD_PowerOn>
			res = RES_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800493a:	e0f4      	b.n	8004b26 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	1c5c      	adds	r4, r3, #1
 8004940:	f7ff fd0c 	bl	800435c <SD_CheckPower>
 8004944:	4603      	mov	r3, r0
 8004946:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8004948:	2300      	movs	r3, #0
 800494a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800494e:	e0ea      	b.n	8004b26 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8004950:	2304      	movs	r3, #4
 8004952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004956:	e0e6      	b.n	8004b26 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004958:	4b76      	ldr	r3, [pc, #472]	@ (8004b34 <SD_disk_ioctl+0x250>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <SD_disk_ioctl+0x86>
 8004966:	2303      	movs	r3, #3
 8004968:	e0df      	b.n	8004b2a <SD_disk_ioctl+0x246>

		SELECT();
 800496a:	f7ff fc15 	bl	8004198 <SELECT>

		switch (ctrl)
 800496e:	79bb      	ldrb	r3, [r7, #6]
 8004970:	2b0d      	cmp	r3, #13
 8004972:	f200 80c9 	bhi.w	8004b08 <SD_disk_ioctl+0x224>
 8004976:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <SD_disk_ioctl+0x98>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	08004a73 	.word	0x08004a73
 8004980:	080049b5 	.word	0x080049b5
 8004984:	08004a63 	.word	0x08004a63
 8004988:	08004b09 	.word	0x08004b09
 800498c:	08004b09 	.word	0x08004b09
 8004990:	08004b09 	.word	0x08004b09
 8004994:	08004b09 	.word	0x08004b09
 8004998:	08004b09 	.word	0x08004b09
 800499c:	08004b09 	.word	0x08004b09
 80049a0:	08004b09 	.word	0x08004b09
 80049a4:	08004b09 	.word	0x08004b09
 80049a8:	08004a85 	.word	0x08004a85
 80049ac:	08004aa9 	.word	0x08004aa9
 80049b0:	08004acd 	.word	0x08004acd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80049b4:	2100      	movs	r1, #0
 80049b6:	2049      	movs	r0, #73	@ 0x49
 80049b8:	f7ff fd4f 	bl	800445a <SD_SendCmd>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f040 80a6 	bne.w	8004b10 <SD_disk_ioctl+0x22c>
 80049c4:	f107 030c 	add.w	r3, r7, #12
 80049c8:	2110      	movs	r1, #16
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff fcd2 	bl	8004374 <SD_RxDataBlock>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 809c 	beq.w	8004b10 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80049d8:	7b3b      	ldrb	r3, [r7, #12]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d10d      	bne.n	80049fe <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80049e2:	7d7b      	ldrb	r3, [r7, #21]
 80049e4:	461a      	mov	r2, r3
 80049e6:	7d3b      	ldrb	r3, [r7, #20]
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	4413      	add	r3, r2
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3301      	adds	r3, #1
 80049f2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80049f4:	8bfb      	ldrh	r3, [r7, #30]
 80049f6:	029a      	lsls	r2, r3, #10
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e02d      	b.n	8004a5a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80049fe:	7c7b      	ldrb	r3, [r7, #17]
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	7dbb      	ldrb	r3, [r7, #22]
 8004a08:	09db      	lsrs	r3, r3, #7
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	7d7b      	ldrb	r3, [r7, #21]
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	f003 0306 	and.w	r3, r3, #6
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	3302      	adds	r3, #2
 8004a22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004a26:	7d3b      	ldrb	r3, [r7, #20]
 8004a28:	099b      	lsrs	r3, r3, #6
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	7cfb      	ldrb	r3, [r7, #19]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	4413      	add	r3, r2
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	7cbb      	ldrb	r3, [r7, #18]
 8004a3a:	029b      	lsls	r3, r3, #10
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3301      	adds	r3, #1
 8004a4a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004a4c:	8bfa      	ldrh	r2, [r7, #30]
 8004a4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004a52:	3b09      	subs	r3, #9
 8004a54:	409a      	lsls	r2, r3
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8004a60:	e056      	b.n	8004b10 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a68:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004a70:	e055      	b.n	8004b1e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004a72:	f7ff fc0b 	bl	800428c <SD_ReadyWait>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2bff      	cmp	r3, #255	@ 0xff
 8004a7a:	d14b      	bne.n	8004b14 <SD_disk_ioctl+0x230>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004a82:	e047      	b.n	8004b14 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004a84:	2100      	movs	r1, #0
 8004a86:	2049      	movs	r0, #73	@ 0x49
 8004a88:	f7ff fce7 	bl	800445a <SD_SendCmd>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d142      	bne.n	8004b18 <SD_disk_ioctl+0x234>
 8004a92:	2110      	movs	r1, #16
 8004a94:	6a38      	ldr	r0, [r7, #32]
 8004a96:	f7ff fc6d 	bl	8004374 <SD_RxDataBlock>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d03b      	beq.n	8004b18 <SD_disk_ioctl+0x234>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004aa6:	e037      	b.n	8004b18 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	204a      	movs	r0, #74	@ 0x4a
 8004aac:	f7ff fcd5 	bl	800445a <SD_SendCmd>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d132      	bne.n	8004b1c <SD_disk_ioctl+0x238>
 8004ab6:	2110      	movs	r1, #16
 8004ab8:	6a38      	ldr	r0, [r7, #32]
 8004aba:	f7ff fc5b 	bl	8004374 <SD_RxDataBlock>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d02b      	beq.n	8004b1c <SD_disk_ioctl+0x238>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004aca:	e027      	b.n	8004b1c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004acc:	2100      	movs	r1, #0
 8004ace:	207a      	movs	r0, #122	@ 0x7a
 8004ad0:	f7ff fcc3 	bl	800445a <SD_SendCmd>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d116      	bne.n	8004b08 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8004ada:	2300      	movs	r3, #0
 8004adc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004ae0:	e00b      	b.n	8004afa <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8004ae2:	6a3c      	ldr	r4, [r7, #32]
 8004ae4:	1c63      	adds	r3, r4, #1
 8004ae6:	623b      	str	r3, [r7, #32]
 8004ae8:	f7ff fba4 	bl	8004234 <SPI_RxByte>
 8004aec:	4603      	mov	r3, r0
 8004aee:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004af0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004af4:	3301      	adds	r3, #1
 8004af6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004afa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d9ef      	bls.n	8004ae2 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8004b08:	2304      	movs	r3, #4
 8004b0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004b0e:	e006      	b.n	8004b1e <SD_disk_ioctl+0x23a>
			break;
 8004b10:	bf00      	nop
 8004b12:	e004      	b.n	8004b1e <SD_disk_ioctl+0x23a>
			break;
 8004b14:	bf00      	nop
 8004b16:	e002      	b.n	8004b1e <SD_disk_ioctl+0x23a>
			break;
 8004b18:	bf00      	nop
 8004b1a:	e000      	b.n	8004b1e <SD_disk_ioctl+0x23a>
			break;
 8004b1c:	bf00      	nop
		}

		DESELECT();
 8004b1e:	f7ff fb47 	bl	80041b0 <DESELECT>
		SPI_RxByte();
 8004b22:	f7ff fb87 	bl	8004234 <SPI_RxByte>
	}

	return res;
 8004b26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	372c      	adds	r7, #44	@ 0x2c
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd90      	pop	{r4, r7, pc}
 8004b32:	bf00      	nop
 8004b34:	24000000 	.word	0x24000000

08004b38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08e      	sub	sp, #56	@ 0x38
 8004b3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	605a      	str	r2, [r3, #4]
 8004b48:	609a      	str	r2, [r3, #8]
 8004b4a:	60da      	str	r2, [r3, #12]
 8004b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b4e:	4b8b      	ldr	r3, [pc, #556]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b54:	4a89      	ldr	r2, [pc, #548]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b56:	f043 0310 	orr.w	r3, r3, #16
 8004b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b5e:	4b87      	ldr	r3, [pc, #540]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	623b      	str	r3, [r7, #32]
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b6c:	4b83      	ldr	r3, [pc, #524]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b72:	4a82      	ldr	r2, [pc, #520]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b7c:	4b7f      	ldr	r3, [pc, #508]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b8a:	4b7c      	ldr	r3, [pc, #496]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b90:	4a7a      	ldr	r2, [pc, #488]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b9a:	4b78      	ldr	r3, [pc, #480]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ba8:	4b74      	ldr	r3, [pc, #464]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bae:	4a73      	ldr	r2, [pc, #460]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004bb0:	f043 0320 	orr.w	r3, r3, #32
 8004bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bb8:	4b70      	ldr	r3, [pc, #448]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bc6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bcc:	4a6b      	ldr	r2, [pc, #428]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004bce:	f043 0302 	orr.w	r3, r3, #2
 8004bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bd6:	4b69      	ldr	r3, [pc, #420]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	613b      	str	r3, [r7, #16]
 8004be2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004be4:	4b65      	ldr	r3, [pc, #404]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bea:	4a64      	ldr	r2, [pc, #400]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004bec:	f043 0308 	orr.w	r3, r3, #8
 8004bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bf4:	4b61      	ldr	r3, [pc, #388]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c02:	4b5e      	ldr	r3, [pc, #376]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c08:	4a5c      	ldr	r2, [pc, #368]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c12:	4b5a      	ldr	r3, [pc, #360]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c20:	4b56      	ldr	r3, [pc, #344]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c26:	4a55      	ldr	r2, [pc, #340]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004c28:	f043 0304 	orr.w	r3, r3, #4
 8004c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c30:	4b52      	ldr	r3, [pc, #328]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	607b      	str	r3, [r7, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f248 0108 	movw	r1, #32776	@ 0x8008
 8004c44:	484e      	ldr	r0, [pc, #312]	@ (8004d80 <MX_GPIO_Init+0x248>)
 8004c46:	f009 fde1 	bl	800e80c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8004c50:	484c      	ldr	r0, [pc, #304]	@ (8004d84 <MX_GPIO_Init+0x24c>)
 8004c52:	f009 fddb 	bl	800e80c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 8004c56:	2200      	movs	r2, #0
 8004c58:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8004c5c:	484a      	ldr	r0, [pc, #296]	@ (8004d88 <MX_GPIO_Init+0x250>)
 8004c5e:	f009 fdd5 	bl	800e80c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 8004c62:	2200      	movs	r2, #0
 8004c64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c68:	4848      	ldr	r0, [pc, #288]	@ (8004d8c <MX_GPIO_Init+0x254>)
 8004c6a:	f009 fdcf 	bl	800e80c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8004c74:	4846      	ldr	r0, [pc, #280]	@ (8004d90 <MX_GPIO_Init+0x258>)
 8004c76:	f009 fdc9 	bl	800e80c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_6_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 8004c7a:	f248 0308 	movw	r3, #32776	@ 0x8008
 8004c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c80:	2301      	movs	r3, #1
 8004c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c90:	4619      	mov	r1, r3
 8004c92:	483b      	ldr	r0, [pc, #236]	@ (8004d80 <MX_GPIO_Init+0x248>)
 8004c94:	f009 fbfa 	bl	800e48c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_R_Pin NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004c98:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 8004c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004caa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4834      	ldr	r0, [pc, #208]	@ (8004d84 <MX_GPIO_Init+0x24c>)
 8004cb2:	f009 fbeb 	bl	800e48c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detection_Pin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 8004cb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cc8:	4619      	mov	r1, r3
 8004cca:	482e      	ldr	r0, [pc, #184]	@ (8004d84 <MX_GPIO_Init+0x24c>)
 8004ccc:	f009 fbde 	bl	800e48c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_LED_Pin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004cd0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4827      	ldr	r0, [pc, #156]	@ (8004d88 <MX_GPIO_Init+0x250>)
 8004cea:	f009 fbcf 	bl	800e48c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_SC_Pin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 8004cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004d00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d04:	4619      	mov	r1, r3
 8004d06:	4820      	ldr	r0, [pc, #128]	@ (8004d88 <MX_GPIO_Init+0x250>)
 8004d08:	f009 fbc0 	bl	800e48c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_Power_Pin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 8004d0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d12:	2301      	movs	r3, #1
 8004d14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 8004d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d22:	4619      	mov	r1, r3
 8004d24:	4819      	ldr	r0, [pc, #100]	@ (8004d8c <MX_GPIO_Init+0x254>)
 8004d26:	f009 fbb1 	bl	800e48c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_7_Pin LED_5_Pin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 8004d2a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d30:	2301      	movs	r3, #1
 8004d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d34:	2300      	movs	r3, #0
 8004d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d40:	4619      	mov	r1, r3
 8004d42:	4813      	ldr	r0, [pc, #76]	@ (8004d90 <MX_GPIO_Init+0x258>)
 8004d44:	f009 fba2 	bl	800e48c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8004d48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004d4e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d54:	2300      	movs	r3, #0
 8004d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004d58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	480b      	ldr	r0, [pc, #44]	@ (8004d8c <MX_GPIO_Init+0x254>)
 8004d60:	f009 fb94 	bl	800e48c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004d64:	2200      	movs	r2, #0
 8004d66:	2100      	movs	r1, #0
 8004d68:	2028      	movs	r0, #40	@ 0x28
 8004d6a:	f006 fc90 	bl	800b68e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d6e:	2028      	movs	r0, #40	@ 0x28
 8004d70:	f006 fca7 	bl	800b6c2 <HAL_NVIC_EnableIRQ>

}
 8004d74:	bf00      	nop
 8004d76:	3738      	adds	r7, #56	@ 0x38
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	58024400 	.word	0x58024400
 8004d80:	58021000 	.word	0x58021000
 8004d84:	58020400 	.word	0x58020400
 8004d88:	58020c00 	.word	0x58020c00
 8004d8c:	58021800 	.word	0x58021800
 8004d90:	58020000 	.word	0x58020000

08004d94 <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004d98:	4b1d      	ldr	r3, [pc, #116]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004d9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e14 <MX_I2C5_Init+0x80>)
 8004d9c:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 8004d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004da4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004daa:	4b19      	ldr	r3, [pc, #100]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004db0:	4b17      	ldr	r3, [pc, #92]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004db6:	4b16      	ldr	r3, [pc, #88]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004dbc:	4b14      	ldr	r3, [pc, #80]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004dc2:	4b13      	ldr	r3, [pc, #76]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004dc8:	4b11      	ldr	r3, [pc, #68]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8004dce:	4810      	ldr	r0, [pc, #64]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004dd0:	f009 fd50 	bl	800e874 <HAL_I2C_Init>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8004dda:	f003 f871 	bl	8007ec0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004dde:	2100      	movs	r1, #0
 8004de0:	480b      	ldr	r0, [pc, #44]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004de2:	f00c f909 	bl	8010ff8 <HAL_I2CEx_ConfigAnalogFilter>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8004dec:	f003 f868 	bl	8007ec0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004df0:	2100      	movs	r1, #0
 8004df2:	4807      	ldr	r0, [pc, #28]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004df4:	f00c f94b 	bl	801108e <HAL_I2CEx_ConfigDigitalFilter>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8004dfe:	f003 f85f 	bl	8007ec0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004e02:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004e06:	f00c f98f 	bl	8011128 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	24000198 	.word	0x24000198
 8004e14:	40006400 	.word	0x40006400

08004e18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b0b8      	sub	sp, #224	@ 0xe0
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e20:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	605a      	str	r2, [r3, #4]
 8004e2a:	609a      	str	r2, [r3, #8]
 8004e2c:	60da      	str	r2, [r3, #12]
 8004e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e30:	f107 0310 	add.w	r3, r7, #16
 8004e34:	22b8      	movs	r2, #184	@ 0xb8
 8004e36:	2100      	movs	r1, #0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f019 f977 	bl	801e12c <memset>
  if(i2cHandle->Instance==I2C5)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a2b      	ldr	r2, [pc, #172]	@ (8004ef0 <HAL_I2C_MspInit+0xd8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d14f      	bne.n	8004ee8 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8004e48:	f04f 0208 	mov.w	r2, #8
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 8004e54:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004e58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e5c:	f107 0310 	add.w	r3, r7, #16
 8004e60:	4618      	mov	r0, r3
 8004e62:	f00d f925 	bl	80120b0 <HAL_RCCEx_PeriphCLKConfig>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8004e6c:	f003 f828 	bl	8007ec0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e70:	4b20      	ldr	r3, [pc, #128]	@ (8004ef4 <HAL_I2C_MspInit+0xdc>)
 8004e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e76:	4a1f      	ldr	r2, [pc, #124]	@ (8004ef4 <HAL_I2C_MspInit+0xdc>)
 8004e78:	f043 0304 	orr.w	r3, r3, #4
 8004e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e80:	4b1c      	ldr	r3, [pc, #112]	@ (8004ef4 <HAL_I2C_MspInit+0xdc>)
 8004e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004e8e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004e92:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e96:	2312      	movs	r3, #18
 8004e98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004eae:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4810      	ldr	r0, [pc, #64]	@ (8004ef8 <HAL_I2C_MspInit+0xe0>)
 8004eb6:	f009 fae9 	bl	800e48c <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004eba:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef4 <HAL_I2C_MspInit+0xdc>)
 8004ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ef4 <HAL_I2C_MspInit+0xdc>)
 8004ec2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ec6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004eca:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef4 <HAL_I2C_MspInit+0xdc>)
 8004ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2101      	movs	r1, #1
 8004edc:	209d      	movs	r0, #157	@ 0x9d
 8004ede:	f006 fbd6 	bl	800b68e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8004ee2:	209d      	movs	r0, #157	@ 0x9d
 8004ee4:	f006 fbed 	bl	800b6c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 8004ee8:	bf00      	nop
 8004eea:	37e0      	adds	r7, #224	@ 0xe0
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40006400 	.word	0x40006400
 8004ef4:	58024400 	.word	0x58024400
 8004ef8:	58020800 	.word	0x58020800

08004efc <__NVIC_SystemReset>:
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004f00:	f3bf 8f4f 	dsb	sy
}
 8004f04:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004f06:	4b06      	ldr	r3, [pc, #24]	@ (8004f20 <__NVIC_SystemReset+0x24>)
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004f0e:	4904      	ldr	r1, [pc, #16]	@ (8004f20 <__NVIC_SystemReset+0x24>)
 8004f10:	4b04      	ldr	r3, [pc, #16]	@ (8004f24 <__NVIC_SystemReset+0x28>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f16:	f3bf 8f4f 	dsb	sy
}
 8004f1a:	bf00      	nop
    __NOP();
 8004f1c:	bf00      	nop
 8004f1e:	e7fd      	b.n	8004f1c <__NVIC_SystemReset+0x20>
 8004f20:	e000ed00 	.word	0xe000ed00
 8004f24:	05fa0004 	.word	0x05fa0004

08004f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08a      	sub	sp, #40	@ 0x28
 8004f2c:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/

	MPU_Config();
 8004f2e:	f002 ff9b 	bl	8007e68 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f32:	f004 fa9d 	bl	8009470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f36:	f001 f807 	bl	8005f48 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004f3a:	f001 f877 	bl	800602c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f3e:	f7ff fdfb 	bl	8004b38 <MX_GPIO_Init>
  MX_DMA_Init();
 8004f42:	f7fe fbdf 	bl	8003704 <MX_DMA_Init>
  MX_I2C5_Init();
 8004f46:	f7ff ff25 	bl	8004d94 <MX_I2C5_Init>
  MX_SPI6_Init();
 8004f4a:	f003 f815 	bl	8007f78 <MX_SPI6_Init>
  MX_ADC2_Init();
 8004f4e:	f7fe faeb 	bl	8003528 <MX_ADC2_Init>
  MX_SPI2_Init();
 8004f52:	f002 ffbb 	bl	8007ecc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004f56:	f004 f9a3 	bl	80092a0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004f5a:	f003 fec1 	bl	8008ce0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004f5e:	f004 f837 	bl	8008fd0 <MX_TIM8_Init>
  MX_TIM3_Init();
 8004f62:	f003 ffb9 	bl	8008ed8 <MX_TIM3_Init>
  MX_FATFS_Init();
 8004f66:	f015 ff2d 	bl	801adc4 <MX_FATFS_Init>
  MX_TIM2_Init();
 8004f6a:	f003 ff61 	bl	8008e30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	  ESC_POWER_1;
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f74:	489a      	ldr	r0, [pc, #616]	@ (80051e0 <main+0x2b8>)
 8004f76:	f009 fc49 	bl	800e80c <HAL_GPIO_WritePin>

  	  STARTUP = 1;
 8004f7a:	4b9a      	ldr	r3, [pc, #616]	@ (80051e4 <main+0x2bc>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]

  	DRON_ON_GRUND = 1;
 8004f80:	4b99      	ldr	r3, [pc, #612]	@ (80051e8 <main+0x2c0>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]

  	PID_FAC_Pitch[0] = p_pitchfactor;
 8004f86:	4b99      	ldr	r3, [pc, #612]	@ (80051ec <main+0x2c4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a99      	ldr	r2, [pc, #612]	@ (80051f0 <main+0x2c8>)
 8004f8c:	6013      	str	r3, [r2, #0]
  	PID_FAC_Pitch[1] = i_pitchfactor;
 8004f8e:	4b99      	ldr	r3, [pc, #612]	@ (80051f4 <main+0x2cc>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a97      	ldr	r2, [pc, #604]	@ (80051f0 <main+0x2c8>)
 8004f94:	6053      	str	r3, [r2, #4]
  	PID_FAC_Pitch[2] = d_pitchfactor;
 8004f96:	4b98      	ldr	r3, [pc, #608]	@ (80051f8 <main+0x2d0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a95      	ldr	r2, [pc, #596]	@ (80051f0 <main+0x2c8>)
 8004f9c:	6093      	str	r3, [r2, #8]
  	PID_FAC_Pitch[4] = 0;
 8004f9e:	4b94      	ldr	r3, [pc, #592]	@ (80051f0 <main+0x2c8>)
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	611a      	str	r2, [r3, #16]

  	PID_FAC_Rool[0] = p_roolfactor;
 8004fa6:	4b95      	ldr	r3, [pc, #596]	@ (80051fc <main+0x2d4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a95      	ldr	r2, [pc, #596]	@ (8005200 <main+0x2d8>)
 8004fac:	6013      	str	r3, [r2, #0]
  	PID_FAC_Rool[1] = i_roolfactor;
 8004fae:	4b95      	ldr	r3, [pc, #596]	@ (8005204 <main+0x2dc>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a93      	ldr	r2, [pc, #588]	@ (8005200 <main+0x2d8>)
 8004fb4:	6053      	str	r3, [r2, #4]
  	PID_FAC_Rool[2] = d_roolfactor;
 8004fb6:	4b94      	ldr	r3, [pc, #592]	@ (8005208 <main+0x2e0>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a91      	ldr	r2, [pc, #580]	@ (8005200 <main+0x2d8>)
 8004fbc:	6093      	str	r3, [r2, #8]
  	PID_FAC_Rool[4] = 0;
 8004fbe:	4b90      	ldr	r3, [pc, #576]	@ (8005200 <main+0x2d8>)
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	611a      	str	r2, [r3, #16]

  	PID_FAC_Yaw[0] = p_yawfactor;
 8004fc6:	4b91      	ldr	r3, [pc, #580]	@ (800520c <main+0x2e4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a91      	ldr	r2, [pc, #580]	@ (8005210 <main+0x2e8>)
 8004fcc:	6013      	str	r3, [r2, #0]
  	PID_FAC_Yaw[1] = i_yawfactor;
 8004fce:	4b91      	ldr	r3, [pc, #580]	@ (8005214 <main+0x2ec>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a8f      	ldr	r2, [pc, #572]	@ (8005210 <main+0x2e8>)
 8004fd4:	6053      	str	r3, [r2, #4]
  	PID_FAC_Yaw[2] = d_yawfactor;
 8004fd6:	4b90      	ldr	r3, [pc, #576]	@ (8005218 <main+0x2f0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a8d      	ldr	r2, [pc, #564]	@ (8005210 <main+0x2e8>)
 8004fdc:	6093      	str	r3, [r2, #8]
  	PID_FAC_Yaw[4] = 0;
 8004fde:	4b8c      	ldr	r3, [pc, #560]	@ (8005210 <main+0x2e8>)
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	611a      	str	r2, [r3, #16]


  	ax_ang =0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 8004fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800521c <main+0x2f4>)
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	4b8c      	ldr	r3, [pc, #560]	@ (8005220 <main+0x2f8>)
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	4b8b      	ldr	r3, [pc, #556]	@ (8005224 <main+0x2fc>)
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	4b8a      	ldr	r3, [pc, #552]	@ (8005228 <main+0x300>)
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	4b89      	ldr	r3, [pc, #548]	@ (800522c <main+0x304>)
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	4b88      	ldr	r3, [pc, #544]	@ (8005230 <main+0x308>)
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
  	Mag_Z = 0;
 8005016:	4b87      	ldr	r3, [pc, #540]	@ (8005234 <main+0x30c>)
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
  	TIM_inte_SD = 0, TIM_inte = 0;
 800501e:	4b86      	ldr	r3, [pc, #536]	@ (8005238 <main+0x310>)
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	4b85      	ldr	r3, [pc, #532]	@ (800523c <main+0x314>)
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 800502a:	4b85      	ldr	r3, [pc, #532]	@ (8005240 <main+0x318>)
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
  	temp = 0, pres = 0, startpres = 0, ampritude = 0;
 8005030:	4b84      	ldr	r3, [pc, #528]	@ (8005244 <main+0x31c>)
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	4b83      	ldr	r3, [pc, #524]	@ (8005248 <main+0x320>)
 800503a:	f04f 0200 	mov.w	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	4b82      	ldr	r3, [pc, #520]	@ (800524c <main+0x324>)
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	4b81      	ldr	r3, [pc, #516]	@ (8005250 <main+0x328>)
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
  	last_wanted_pitch_rx = 0;
 8005050:	4b80      	ldr	r3, [pc, #512]	@ (8005254 <main+0x32c>)
 8005052:	f04f 0200 	mov.w	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
  	last_wanted_rool_rx = 0;
 8005058:	4b7f      	ldr	r3, [pc, #508]	@ (8005258 <main+0x330>)
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
  	last_wanted_yaw_rx = 0;
 8005060:	4b7e      	ldr	r3, [pc, #504]	@ (800525c <main+0x334>)
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
  	wanted_thrust = 0;
 8005068:	4b7d      	ldr	r3, [pc, #500]	@ (8005260 <main+0x338>)
 800506a:	2200      	movs	r2, #0
 800506c:	801a      	strh	r2, [r3, #0]
  	thrust_limit = 10000;
 800506e:	4b7d      	ldr	r3, [pc, #500]	@ (8005264 <main+0x33c>)
 8005070:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005074:	801a      	strh	r2, [r3, #0]


  	FDP_D_Gain_AR = 0;
 8005076:	4b7c      	ldr	r3, [pc, #496]	@ (8005268 <main+0x340>)
 8005078:	2200      	movs	r2, #0
 800507a:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 0;
 800507c:	4b7b      	ldr	r3, [pc, #492]	@ (800526c <main+0x344>)
 800507e:	2200      	movs	r2, #0
 8005080:	801a      	strh	r2, [r3, #0]


  	old_error_pitch = 0;// ruznica
 8005082:	4b7b      	ldr	r3, [pc, #492]	@ (8005270 <main+0x348>)
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	601a      	str	r2, [r3, #0]
  	old_error_rool = 0;
 800508a:	4b7a      	ldr	r3, [pc, #488]	@ (8005274 <main+0x34c>)
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
  	old_error_yaw = 0;
 8005092:	4b79      	ldr	r3, [pc, #484]	@ (8005278 <main+0x350>)
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_pitch = 0;// ruznica
 800509a:	4b78      	ldr	r3, [pc, #480]	@ (800527c <main+0x354>)
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_rool = 0;
 80050a2:	4b77      	ldr	r3, [pc, #476]	@ (8005280 <main+0x358>)
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_yaw = 0;
 80050aa:	4b76      	ldr	r3, [pc, #472]	@ (8005284 <main+0x35c>)
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
  	error_sum_pitch = 0;
 80050b2:	4b75      	ldr	r3, [pc, #468]	@ (8005288 <main+0x360>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
  	error_sum_rool = 0;
 80050b8:	4b74      	ldr	r3, [pc, #464]	@ (800528c <main+0x364>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
  	error_sum_yaw = 0;
 80050be:	4b74      	ldr	r3, [pc, #464]	@ (8005290 <main+0x368>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_pitch = 0;
 80050c4:	4b73      	ldr	r3, [pc, #460]	@ (8005294 <main+0x36c>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_rool = 0;
 80050ca:	4b73      	ldr	r3, [pc, #460]	@ (8005298 <main+0x370>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_yaw = 0;
 80050d0:	4b72      	ldr	r3, [pc, #456]	@ (800529c <main+0x374>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
  	SPEED1 = min_speed;
 80050d6:	4b72      	ldr	r3, [pc, #456]	@ (80052a0 <main+0x378>)
 80050d8:	f642 1204 	movw	r2, #10500	@ 0x2904
 80050dc:	801a      	strh	r2, [r3, #0]
  	SPEED2 = min_speed;
 80050de:	4b71      	ldr	r3, [pc, #452]	@ (80052a4 <main+0x37c>)
 80050e0:	f642 1204 	movw	r2, #10500	@ 0x2904
 80050e4:	801a      	strh	r2, [r3, #0]
  	SPEED3 = min_speed;
 80050e6:	4b70      	ldr	r3, [pc, #448]	@ (80052a8 <main+0x380>)
 80050e8:	f642 1204 	movw	r2, #10500	@ 0x2904
 80050ec:	801a      	strh	r2, [r3, #0]
  	SPEED4 = min_speed;
 80050ee:	4b6f      	ldr	r3, [pc, #444]	@ (80052ac <main+0x384>)
 80050f0:	f642 1204 	movw	r2, #10500	@ 0x2904
 80050f4:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED1 = min_speed;
 80050f6:	4b6e      	ldr	r3, [pc, #440]	@ (80052b0 <main+0x388>)
 80050f8:	f642 1204 	movw	r2, #10500	@ 0x2904
 80050fc:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED2 = min_speed;
 80050fe:	4b6d      	ldr	r3, [pc, #436]	@ (80052b4 <main+0x38c>)
 8005100:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005104:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED3 = min_speed;
 8005106:	4b6c      	ldr	r3, [pc, #432]	@ (80052b8 <main+0x390>)
 8005108:	f642 1204 	movw	r2, #10500	@ 0x2904
 800510c:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED4 = min_speed;
 800510e:	4b6b      	ldr	r3, [pc, #428]	@ (80052bc <main+0x394>)
 8005110:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005114:	801a      	strh	r2, [r3, #0]
  	commandready = 0;
 8005116:	4b6a      	ldr	r3, [pc, #424]	@ (80052c0 <main+0x398>)
 8005118:	2200      	movs	r2, #0
 800511a:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 800511c:	4b69      	ldr	r3, [pc, #420]	@ (80052c4 <main+0x39c>)
 800511e:	2200      	movs	r2, #0
 8005120:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 8005122:	4b69      	ldr	r3, [pc, #420]	@ (80052c8 <main+0x3a0>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 8005128:	4b68      	ldr	r3, [pc, #416]	@ (80052cc <main+0x3a4>)
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 800512e:	4b68      	ldr	r3, [pc, #416]	@ (80052d0 <main+0x3a8>)
 8005130:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005134:	601a      	str	r2, [r3, #0]
  	MPU6050_IRQ = 0, HMC583L_IRQ = 0, BMP180_IRQ = 0;
 8005136:	4b67      	ldr	r3, [pc, #412]	@ (80052d4 <main+0x3ac>)
 8005138:	2200      	movs	r2, #0
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	4b66      	ldr	r3, [pc, #408]	@ (80052d8 <main+0x3b0>)
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	4b66      	ldr	r3, [pc, #408]	@ (80052dc <main+0x3b4>)
 8005144:	2200      	movs	r2, #0
 8005146:	701a      	strb	r2, [r3, #0]
  	i = 0, loopnum = 0;
 8005148:	4b65      	ldr	r3, [pc, #404]	@ (80052e0 <main+0x3b8>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	4b65      	ldr	r3, [pc, #404]	@ (80052e4 <main+0x3bc>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]

  	thrust_values = 0;
 8005154:	4964      	ldr	r1, [pc, #400]	@ (80052e8 <main+0x3c0>)
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	e9c1 2300 	strd	r2, r3, [r1]

	  	p_angular_rate_pitchfactor = 14;
 8005162:	4b62      	ldr	r3, [pc, #392]	@ (80052ec <main+0x3c4>)
 8005164:	4a62      	ldr	r2, [pc, #392]	@ (80052f0 <main+0x3c8>)
 8005166:	601a      	str	r2, [r3, #0]
		p_angular_rate_roolfactor = 12;
 8005168:	4b62      	ldr	r3, [pc, #392]	@ (80052f4 <main+0x3cc>)
 800516a:	4a63      	ldr	r2, [pc, #396]	@ (80052f8 <main+0x3d0>)
 800516c:	601a      	str	r2, [r3, #0]
		p_angular_rate_yawfactor = 10;// -> 10
 800516e:	4b63      	ldr	r3, [pc, #396]	@ (80052fc <main+0x3d4>)
 8005170:	4a63      	ldr	r2, [pc, #396]	@ (8005300 <main+0x3d8>)
 8005172:	601a      	str	r2, [r3, #0]
		///////////////////////////////////////////////////////////////////////////
		i_angular_rate_pitchfactor = 10;
 8005174:	4b63      	ldr	r3, [pc, #396]	@ (8005304 <main+0x3dc>)
 8005176:	4a62      	ldr	r2, [pc, #392]	@ (8005300 <main+0x3d8>)
 8005178:	601a      	str	r2, [r3, #0]
		i_angular_rate_roolfactor = 10;
 800517a:	4b63      	ldr	r3, [pc, #396]	@ (8005308 <main+0x3e0>)
 800517c:	4a60      	ldr	r2, [pc, #384]	@ (8005300 <main+0x3d8>)
 800517e:	601a      	str	r2, [r3, #0]
		i_angular_rate_yawfactor = 0;
 8005180:	4b62      	ldr	r3, [pc, #392]	@ (800530c <main+0x3e4>)
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
		///////////////////////////////////////////////////////////////////////////
		d_angular_rate_pitchfactor = 30;
 8005188:	4b61      	ldr	r3, [pc, #388]	@ (8005310 <main+0x3e8>)
 800518a:	4a62      	ldr	r2, [pc, #392]	@ (8005314 <main+0x3ec>)
 800518c:	601a      	str	r2, [r3, #0]
		d_angular_rate_roolfactor = 20;
 800518e:	4b62      	ldr	r3, [pc, #392]	@ (8005318 <main+0x3f0>)
 8005190:	4a62      	ldr	r2, [pc, #392]	@ (800531c <main+0x3f4>)
 8005192:	601a      	str	r2, [r3, #0]
		d_angular_rate_yawfactor = 5;
 8005194:	4b62      	ldr	r3, [pc, #392]	@ (8005320 <main+0x3f8>)
 8005196:	4a63      	ldr	r2, [pc, #396]	@ (8005324 <main+0x3fc>)
 8005198:	601a      	str	r2, [r3, #0]

		p_pitchfactor = 5.5;
 800519a:	4b14      	ldr	r3, [pc, #80]	@ (80051ec <main+0x2c4>)
 800519c:	4a62      	ldr	r2, [pc, #392]	@ (8005328 <main+0x400>)
 800519e:	601a      	str	r2, [r3, #0]
		p_roolfactor = 6;//5
 80051a0:	4b16      	ldr	r3, [pc, #88]	@ (80051fc <main+0x2d4>)
 80051a2:	4a62      	ldr	r2, [pc, #392]	@ (800532c <main+0x404>)
 80051a4:	601a      	str	r2, [r3, #0]
		p_yawfactor = 5;
 80051a6:	4b19      	ldr	r3, [pc, #100]	@ (800520c <main+0x2e4>)
 80051a8:	4a5e      	ldr	r2, [pc, #376]	@ (8005324 <main+0x3fc>)
 80051aa:	601a      	str	r2, [r3, #0]
		///////////////////////////////////////////////////////////////////////////
		i_pitchfactor = 9;//8
 80051ac:	4b11      	ldr	r3, [pc, #68]	@ (80051f4 <main+0x2cc>)
 80051ae:	4a60      	ldr	r2, [pc, #384]	@ (8005330 <main+0x408>)
 80051b0:	601a      	str	r2, [r3, #0]
		i_roolfactor = 8;//10
 80051b2:	4b14      	ldr	r3, [pc, #80]	@ (8005204 <main+0x2dc>)
 80051b4:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80051b8:	601a      	str	r2, [r3, #0]
		i_yawfactor = 0;
 80051ba:	4b16      	ldr	r3, [pc, #88]	@ (8005214 <main+0x2ec>)
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
		///////////////////////////////////////////////////////////////////////////
		d_pitchfactor = 30;//25
 80051c2:	4b0d      	ldr	r3, [pc, #52]	@ (80051f8 <main+0x2d0>)
 80051c4:	4a53      	ldr	r2, [pc, #332]	@ (8005314 <main+0x3ec>)
 80051c6:	601a      	str	r2, [r3, #0]
		d_roolfactor = 20;
 80051c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005208 <main+0x2e0>)
 80051ca:	4a54      	ldr	r2, [pc, #336]	@ (800531c <main+0x3f4>)
 80051cc:	601a      	str	r2, [r3, #0]
		d_yawfactor = 0;
 80051ce:	4b12      	ldr	r3, [pc, #72]	@ (8005218 <main+0x2f0>)
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]



		p_angular_rate_pitchfactor = 14;
 80051d6:	4b45      	ldr	r3, [pc, #276]	@ (80052ec <main+0x3c4>)
 80051d8:	4a45      	ldr	r2, [pc, #276]	@ (80052f0 <main+0x3c8>)
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	e0aa      	b.n	8005334 <main+0x40c>
 80051de:	bf00      	nop
 80051e0:	58021800 	.word	0x58021800
 80051e4:	00000074 	.word	0x00000074
 80051e8:	000041b4 	.word	0x000041b4
 80051ec:	000040e4 	.word	0x000040e4
 80051f0:	00004108 	.word	0x00004108
 80051f4:	000040f0 	.word	0x000040f0
 80051f8:	000040fc 	.word	0x000040fc
 80051fc:	000040e8 	.word	0x000040e8
 8005200:	0000411c 	.word	0x0000411c
 8005204:	000040f4 	.word	0x000040f4
 8005208:	00004100 	.word	0x00004100
 800520c:	000040ec 	.word	0x000040ec
 8005210:	00004130 	.word	0x00004130
 8005214:	000040f8 	.word	0x000040f8
 8005218:	00004104 	.word	0x00004104
 800521c:	00000018 	.word	0x00000018
 8005220:	0000001c 	.word	0x0000001c
 8005224:	00000020 	.word	0x00000020
 8005228:	00000024 	.word	0x00000024
 800522c:	00000028 	.word	0x00000028
 8005230:	0000002c 	.word	0x0000002c
 8005234:	00000058 	.word	0x00000058
 8005238:	0000006c 	.word	0x0000006c
 800523c:	00000070 	.word	0x00000070
 8005240:	00000078 	.word	0x00000078
 8005244:	000000dc 	.word	0x000000dc
 8005248:	000000e0 	.word	0x000000e0
 800524c:	000000e4 	.word	0x000000e4
 8005250:	000000e8 	.word	0x000000e8
 8005254:	00004050 	.word	0x00004050
 8005258:	00004054 	.word	0x00004054
 800525c:	00004058 	.word	0x00004058
 8005260:	0000405c 	.word	0x0000405c
 8005264:	0000405e 	.word	0x0000405e
 8005268:	00004074 	.word	0x00004074
 800526c:	00004076 	.word	0x00004076
 8005270:	0000409c 	.word	0x0000409c
 8005274:	000040a0 	.word	0x000040a0
 8005278:	000040a4 	.word	0x000040a4
 800527c:	000040a8 	.word	0x000040a8
 8005280:	000040ac 	.word	0x000040ac
 8005284:	000040b0 	.word	0x000040b0
 8005288:	000040b4 	.word	0x000040b4
 800528c:	000040b8 	.word	0x000040b8
 8005290:	000040bc 	.word	0x000040bc
 8005294:	000040c0 	.word	0x000040c0
 8005298:	000040c4 	.word	0x000040c4
 800529c:	000040c8 	.word	0x000040c8
 80052a0:	000041a4 	.word	0x000041a4
 80052a4:	000041a6 	.word	0x000041a6
 80052a8:	000041a8 	.word	0x000041a8
 80052ac:	000041aa 	.word	0x000041aa
 80052b0:	000041ac 	.word	0x000041ac
 80052b4:	000041ae 	.word	0x000041ae
 80052b8:	000041b0 	.word	0x000041b0
 80052bc:	000041b2 	.word	0x000041b2
 80052c0:	000041d6 	.word	0x000041d6
 80052c4:	000041d7 	.word	0x000041d7
 80052c8:	000041dc 	.word	0x000041dc
 80052cc:	000041e0 	.word	0x000041e0
 80052d0:	000041e8 	.word	0x000041e8
 80052d4:	000041ec 	.word	0x000041ec
 80052d8:	000041ed 	.word	0x000041ed
 80052dc:	000041ee 	.word	0x000041ee
 80052e0:	000041f0 	.word	0x000041f0
 80052e4:	000041f4 	.word	0x000041f4
 80052e8:	00004060 	.word	0x00004060
 80052ec:	00004144 	.word	0x00004144
 80052f0:	41600000 	.word	0x41600000
 80052f4:	00004148 	.word	0x00004148
 80052f8:	41400000 	.word	0x41400000
 80052fc:	0000414c 	.word	0x0000414c
 8005300:	41200000 	.word	0x41200000
 8005304:	00004150 	.word	0x00004150
 8005308:	00004154 	.word	0x00004154
 800530c:	00004158 	.word	0x00004158
 8005310:	0000415c 	.word	0x0000415c
 8005314:	41f00000 	.word	0x41f00000
 8005318:	00004160 	.word	0x00004160
 800531c:	41a00000 	.word	0x41a00000
 8005320:	00004164 	.word	0x00004164
 8005324:	40a00000 	.word	0x40a00000
 8005328:	40b00000 	.word	0x40b00000
 800532c:	40c00000 	.word	0x40c00000
 8005330:	41100000 	.word	0x41100000
		p_angular_rate_roolfactor = 12;
 8005334:	4b97      	ldr	r3, [pc, #604]	@ (8005594 <main+0x66c>)
 8005336:	4a98      	ldr	r2, [pc, #608]	@ (8005598 <main+0x670>)
 8005338:	601a      	str	r2, [r3, #0]
		p_angular_rate_yawfactor = 5;
 800533a:	4b98      	ldr	r3, [pc, #608]	@ (800559c <main+0x674>)
 800533c:	4a98      	ldr	r2, [pc, #608]	@ (80055a0 <main+0x678>)
 800533e:	601a      	str	r2, [r3, #0]
		i_angular_rate_pitchfactor = 5;
 8005340:	4b98      	ldr	r3, [pc, #608]	@ (80055a4 <main+0x67c>)
 8005342:	4a97      	ldr	r2, [pc, #604]	@ (80055a0 <main+0x678>)
 8005344:	601a      	str	r2, [r3, #0]
		i_angular_rate_roolfactor = 5;
 8005346:	4b98      	ldr	r3, [pc, #608]	@ (80055a8 <main+0x680>)
 8005348:	4a95      	ldr	r2, [pc, #596]	@ (80055a0 <main+0x678>)
 800534a:	601a      	str	r2, [r3, #0]
		i_angular_rate_yawfactor = 0;
 800534c:	4b97      	ldr	r3, [pc, #604]	@ (80055ac <main+0x684>)
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
		d_angular_rate_pitchfactor = 25;
 8005354:	4b96      	ldr	r3, [pc, #600]	@ (80055b0 <main+0x688>)
 8005356:	4a97      	ldr	r2, [pc, #604]	@ (80055b4 <main+0x68c>)
 8005358:	601a      	str	r2, [r3, #0]
		d_angular_rate_roolfactor = 15;
 800535a:	4b97      	ldr	r3, [pc, #604]	@ (80055b8 <main+0x690>)
 800535c:	4a97      	ldr	r2, [pc, #604]	@ (80055bc <main+0x694>)
 800535e:	601a      	str	r2, [r3, #0]
		d_angular_rate_yawfactor = 5;
 8005360:	4b97      	ldr	r3, [pc, #604]	@ (80055c0 <main+0x698>)
 8005362:	4a8f      	ldr	r2, [pc, #572]	@ (80055a0 <main+0x678>)
 8005364:	601a      	str	r2, [r3, #0]

		p_pitchfactor = 4.5;
 8005366:	4b97      	ldr	r3, [pc, #604]	@ (80055c4 <main+0x69c>)
 8005368:	4a97      	ldr	r2, [pc, #604]	@ (80055c8 <main+0x6a0>)
 800536a:	601a      	str	r2, [r3, #0]
		p_roolfactor = 5;
 800536c:	4b97      	ldr	r3, [pc, #604]	@ (80055cc <main+0x6a4>)
 800536e:	4a8c      	ldr	r2, [pc, #560]	@ (80055a0 <main+0x678>)
 8005370:	601a      	str	r2, [r3, #0]
		p_yawfactor = 5;
 8005372:	4b97      	ldr	r3, [pc, #604]	@ (80055d0 <main+0x6a8>)
 8005374:	4a8a      	ldr	r2, [pc, #552]	@ (80055a0 <main+0x678>)
 8005376:	601a      	str	r2, [r3, #0]
		i_pitchfactor = 4;
 8005378:	4b96      	ldr	r3, [pc, #600]	@ (80055d4 <main+0x6ac>)
 800537a:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800537e:	601a      	str	r2, [r3, #0]
		i_roolfactor = 4;
 8005380:	4b95      	ldr	r3, [pc, #596]	@ (80055d8 <main+0x6b0>)
 8005382:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8005386:	601a      	str	r2, [r3, #0]
		i_yawfactor = 0;
 8005388:	4b94      	ldr	r3, [pc, #592]	@ (80055dc <main+0x6b4>)
 800538a:	f04f 0200 	mov.w	r2, #0
 800538e:	601a      	str	r2, [r3, #0]
		d_pitchfactor = 15;
 8005390:	4b93      	ldr	r3, [pc, #588]	@ (80055e0 <main+0x6b8>)
 8005392:	4a8a      	ldr	r2, [pc, #552]	@ (80055bc <main+0x694>)
 8005394:	601a      	str	r2, [r3, #0]
		d_roolfactor = 10;
 8005396:	4b93      	ldr	r3, [pc, #588]	@ (80055e4 <main+0x6bc>)
 8005398:	4a93      	ldr	r2, [pc, #588]	@ (80055e8 <main+0x6c0>)
 800539a:	601a      	str	r2, [r3, #0]
		d_yawfactor = 0;
 800539c:	4b93      	ldr	r3, [pc, #588]	@ (80055ec <main+0x6c4>)
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]




  	  PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 80053a4:	4b92      	ldr	r3, [pc, #584]	@ (80055f0 <main+0x6c8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a92      	ldr	r2, [pc, #584]	@ (80055f4 <main+0x6cc>)
 80053aa:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 80053ac:	4b7d      	ldr	r3, [pc, #500]	@ (80055a4 <main+0x67c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a90      	ldr	r2, [pc, #576]	@ (80055f4 <main+0x6cc>)
 80053b2:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 80053b4:	4b7e      	ldr	r3, [pc, #504]	@ (80055b0 <main+0x688>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a8e      	ldr	r2, [pc, #568]	@ (80055f4 <main+0x6cc>)
 80053ba:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;//
 80053bc:	4b75      	ldr	r3, [pc, #468]	@ (8005594 <main+0x66c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a8d      	ldr	r2, [pc, #564]	@ (80055f8 <main+0x6d0>)
 80053c2:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 80053c4:	4b78      	ldr	r3, [pc, #480]	@ (80055a8 <main+0x680>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a8b      	ldr	r2, [pc, #556]	@ (80055f8 <main+0x6d0>)
 80053ca:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 80053cc:	4b7a      	ldr	r3, [pc, #488]	@ (80055b8 <main+0x690>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a89      	ldr	r2, [pc, #548]	@ (80055f8 <main+0x6d0>)
 80053d2:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;//
 80053d4:	4b71      	ldr	r3, [pc, #452]	@ (800559c <main+0x674>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a88      	ldr	r2, [pc, #544]	@ (80055fc <main+0x6d4>)
 80053da:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 80053dc:	4b73      	ldr	r3, [pc, #460]	@ (80055ac <main+0x684>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a86      	ldr	r2, [pc, #536]	@ (80055fc <main+0x6d4>)
 80053e2:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 80053e4:	4b76      	ldr	r3, [pc, #472]	@ (80055c0 <main+0x698>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a84      	ldr	r2, [pc, #528]	@ (80055fc <main+0x6d4>)
 80053ea:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Pitch[0] = p_pitchfactor;
 80053ec:	4b75      	ldr	r3, [pc, #468]	@ (80055c4 <main+0x69c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a83      	ldr	r2, [pc, #524]	@ (8005600 <main+0x6d8>)
 80053f2:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Pitch[1] = i_pitchfactor;
 80053f4:	4b77      	ldr	r3, [pc, #476]	@ (80055d4 <main+0x6ac>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a81      	ldr	r2, [pc, #516]	@ (8005600 <main+0x6d8>)
 80053fa:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Pitch[2] = d_pitchfactor;
 80053fc:	4b78      	ldr	r3, [pc, #480]	@ (80055e0 <main+0x6b8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a7f      	ldr	r2, [pc, #508]	@ (8005600 <main+0x6d8>)
 8005402:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Rool[0] = p_roolfactor;//
 8005404:	4b71      	ldr	r3, [pc, #452]	@ (80055cc <main+0x6a4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a7e      	ldr	r2, [pc, #504]	@ (8005604 <main+0x6dc>)
 800540a:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Rool[1] = i_roolfactor;
 800540c:	4b72      	ldr	r3, [pc, #456]	@ (80055d8 <main+0x6b0>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a7c      	ldr	r2, [pc, #496]	@ (8005604 <main+0x6dc>)
 8005412:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Rool[2] = d_roolfactor;
 8005414:	4b73      	ldr	r3, [pc, #460]	@ (80055e4 <main+0x6bc>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a7a      	ldr	r2, [pc, #488]	@ (8005604 <main+0x6dc>)
 800541a:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Yaw[0] = p_yawfactor;//
 800541c:	4b6c      	ldr	r3, [pc, #432]	@ (80055d0 <main+0x6a8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a79      	ldr	r2, [pc, #484]	@ (8005608 <main+0x6e0>)
 8005422:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Yaw[1] = i_yawfactor;
 8005424:	4b6d      	ldr	r3, [pc, #436]	@ (80055dc <main+0x6b4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a77      	ldr	r2, [pc, #476]	@ (8005608 <main+0x6e0>)
 800542a:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Yaw[2] = d_yawfactor;
 800542c:	4b6f      	ldr	r3, [pc, #444]	@ (80055ec <main+0x6c4>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a75      	ldr	r2, [pc, #468]	@ (8005608 <main+0x6e0>)
 8005432:	6093      	str	r3, [r2, #8]

  	wanted_pitch_rx = 0;// chcainy stan
 8005434:	4b75      	ldr	r3, [pc, #468]	@ (800560c <main+0x6e4>)
 8005436:	2200      	movs	r2, #0
 8005438:	801a      	strh	r2, [r3, #0]
  	wanted_rool_rx = 0;
 800543a:	4b75      	ldr	r3, [pc, #468]	@ (8005610 <main+0x6e8>)
 800543c:	2200      	movs	r2, #0
 800543e:	801a      	strh	r2, [r3, #0]
  	wanted_yaw_rx = 0;
 8005440:	4b74      	ldr	r3, [pc, #464]	@ (8005614 <main+0x6ec>)
 8005442:	2200      	movs	r2, #0
 8005444:	801a      	strh	r2, [r3, #0]
  	wanted_gz = 0 ;
 8005446:	4b74      	ldr	r3, [pc, #464]	@ (8005618 <main+0x6f0>)
 8005448:	2200      	movs	r2, #0
 800544a:	801a      	strh	r2, [r3, #0]


  	data.ox = 0;
 800544c:	4b73      	ldr	r3, [pc, #460]	@ (800561c <main+0x6f4>)
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 8005454:	4b71      	ldr	r3, [pc, #452]	@ (800561c <main+0x6f4>)
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 800545c:	4b6f      	ldr	r3, [pc, #444]	@ (800561c <main+0x6f4>)
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 8005464:	4b6d      	ldr	r3, [pc, #436]	@ (800561c <main+0x6f4>)
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 800546c:	4b6b      	ldr	r3, [pc, #428]	@ (800561c <main+0x6f4>)
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 8005474:	4b69      	ldr	r3, [pc, #420]	@ (800561c <main+0x6f4>)
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	609a      	str	r2, [r3, #8]


  	pid_pitch = 0;
 800547c:	4b68      	ldr	r3, [pc, #416]	@ (8005620 <main+0x6f8>)
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
  	pid_yaw = 0;
 8005484:	4b67      	ldr	r3, [pc, #412]	@ (8005624 <main+0x6fc>)
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	601a      	str	r2, [r3, #0]
  	pid_rool = 0;
 800548c:	4b66      	ldr	r3, [pc, #408]	@ (8005628 <main+0x700>)
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	601a      	str	r2, [r3, #0]

  	pid_angular_rate_pitch = 0;
 8005494:	4b65      	ldr	r3, [pc, #404]	@ (800562c <main+0x704>)
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_yaw = 0;
 800549c:	4b64      	ldr	r3, [pc, #400]	@ (8005630 <main+0x708>)
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_rool = 0;
 80054a4:	4b63      	ldr	r3, [pc, #396]	@ (8005634 <main+0x70c>)
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]

  	MYDRON.PITCH_STA = 0;
 80054ac:	4b62      	ldr	r3, [pc, #392]	@ (8005638 <main+0x710>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	MYDRON.ROOL_STA = 0;
 80054b4:	4b60      	ldr	r3, [pc, #384]	@ (8005638 <main+0x710>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  	MYDRON.YAW_STA = 0;
 80054bc:	4b5e      	ldr	r3, [pc, #376]	@ (8005638 <main+0x710>)
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  	ax = 0,ay = 0,az = 0, gx = 0, gy = 0, gz = 0;
 80054c4:	4b5d      	ldr	r3, [pc, #372]	@ (800563c <main+0x714>)
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	4b5c      	ldr	r3, [pc, #368]	@ (8005640 <main+0x718>)
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	4b5b      	ldr	r3, [pc, #364]	@ (8005644 <main+0x71c>)
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	4b5a      	ldr	r3, [pc, #360]	@ (8005648 <main+0x720>)
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	4b59      	ldr	r3, [pc, #356]	@ (800564c <main+0x724>)
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	4b58      	ldr	r3, [pc, #352]	@ (8005650 <main+0x728>)
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
  	ax_ang = 0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 80054f4:	4b57      	ldr	r3, [pc, #348]	@ (8005654 <main+0x72c>)
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	4b56      	ldr	r3, [pc, #344]	@ (8005658 <main+0x730>)
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	4b55      	ldr	r3, [pc, #340]	@ (800565c <main+0x734>)
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	4b54      	ldr	r3, [pc, #336]	@ (8005660 <main+0x738>)
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	4b53      	ldr	r3, [pc, #332]	@ (8005664 <main+0x73c>)
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	4b52      	ldr	r3, [pc, #328]	@ (8005668 <main+0x740>)
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
  	accelx_cal = 0, accely_cal = 0, accelz_cal = 0, gyrox_cal = 0, gyroy_cal = 0, gyroz_cal = 0;
 8005524:	4b51      	ldr	r3, [pc, #324]	@ (800566c <main+0x744>)
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	4b50      	ldr	r3, [pc, #320]	@ (8005670 <main+0x748>)
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	4b4f      	ldr	r3, [pc, #316]	@ (8005674 <main+0x74c>)
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	4b4e      	ldr	r3, [pc, #312]	@ (8005678 <main+0x750>)
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	4b4d      	ldr	r3, [pc, #308]	@ (800567c <main+0x754>)
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	4b4c      	ldr	r3, [pc, #304]	@ (8005680 <main+0x758>)
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	601a      	str	r2, [r3, #0]

  	nRF24_Rx_Mode = 0;
 8005554:	4b4b      	ldr	r3, [pc, #300]	@ (8005684 <main+0x75c>)
 8005556:	2200      	movs	r2, #0
 8005558:	701a      	strb	r2, [r3, #0]

  	now_pitch = 0;
 800555a:	4b4b      	ldr	r3, [pc, #300]	@ (8005688 <main+0x760>)
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
  	now_rool = 0;
 8005562:	4b4a      	ldr	r3, [pc, #296]	@ (800568c <main+0x764>)
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	601a      	str	r2, [r3, #0]
  	now_yaw = 0;
 800556a:	4b49      	ldr	r3, [pc, #292]	@ (8005690 <main+0x768>)
 800556c:	f04f 0200 	mov.w	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
  	wanted_pitch = 0;
 8005572:	4b48      	ldr	r3, [pc, #288]	@ (8005694 <main+0x76c>)
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	601a      	str	r2, [r3, #0]

  	pitch_error = 0;
 800557a:	4b47      	ldr	r3, [pc, #284]	@ (8005698 <main+0x770>)
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	601a      	str	r2, [r3, #0]
  	rool_error = 0;
 8005582:	4b46      	ldr	r3, [pc, #280]	@ (800569c <main+0x774>)
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
  	yaw_error = 0;
 800558a:	4b45      	ldr	r3, [pc, #276]	@ (80056a0 <main+0x778>)
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	e087      	b.n	80056a4 <main+0x77c>
 8005594:	00004148 	.word	0x00004148
 8005598:	41400000 	.word	0x41400000
 800559c:	0000414c 	.word	0x0000414c
 80055a0:	40a00000 	.word	0x40a00000
 80055a4:	00004150 	.word	0x00004150
 80055a8:	00004154 	.word	0x00004154
 80055ac:	00004158 	.word	0x00004158
 80055b0:	0000415c 	.word	0x0000415c
 80055b4:	41c80000 	.word	0x41c80000
 80055b8:	00004160 	.word	0x00004160
 80055bc:	41700000 	.word	0x41700000
 80055c0:	00004164 	.word	0x00004164
 80055c4:	000040e4 	.word	0x000040e4
 80055c8:	40900000 	.word	0x40900000
 80055cc:	000040e8 	.word	0x000040e8
 80055d0:	000040ec 	.word	0x000040ec
 80055d4:	000040f0 	.word	0x000040f0
 80055d8:	000040f4 	.word	0x000040f4
 80055dc:	000040f8 	.word	0x000040f8
 80055e0:	000040fc 	.word	0x000040fc
 80055e4:	00004100 	.word	0x00004100
 80055e8:	41200000 	.word	0x41200000
 80055ec:	00004104 	.word	0x00004104
 80055f0:	00004144 	.word	0x00004144
 80055f4:	00004168 	.word	0x00004168
 80055f8:	0000417c 	.word	0x0000417c
 80055fc:	00004190 	.word	0x00004190
 8005600:	00004108 	.word	0x00004108
 8005604:	0000411c 	.word	0x0000411c
 8005608:	00004130 	.word	0x00004130
 800560c:	00004048 	.word	0x00004048
 8005610:	0000404a 	.word	0x0000404a
 8005614:	0000404c 	.word	0x0000404c
 8005618:	0000404e 	.word	0x0000404e
 800561c:	0000007c 	.word	0x0000007c
 8005620:	000040cc 	.word	0x000040cc
 8005624:	000040d0 	.word	0x000040d0
 8005628:	000040d4 	.word	0x000040d4
 800562c:	000040d8 	.word	0x000040d8
 8005630:	000040dc 	.word	0x000040dc
 8005634:	000040e0 	.word	0x000040e0
 8005638:	00000178 	.word	0x00000178
 800563c:	00000000 	.word	0x00000000
 8005640:	00000004 	.word	0x00000004
 8005644:	00000008 	.word	0x00000008
 8005648:	0000000c 	.word	0x0000000c
 800564c:	00000010 	.word	0x00000010
 8005650:	00000014 	.word	0x00000014
 8005654:	00000018 	.word	0x00000018
 8005658:	0000001c 	.word	0x0000001c
 800565c:	00000020 	.word	0x00000020
 8005660:	00000024 	.word	0x00000024
 8005664:	00000028 	.word	0x00000028
 8005668:	0000002c 	.word	0x0000002c
 800566c:	00000030 	.word	0x00000030
 8005670:	00000034 	.word	0x00000034
 8005674:	00000038 	.word	0x00000038
 8005678:	0000003c 	.word	0x0000003c
 800567c:	00000040 	.word	0x00000040
 8005680:	00000044 	.word	0x00000044
 8005684:	00000174 	.word	0x00000174
 8005688:	00004078 	.word	0x00004078
 800568c:	0000407c 	.word	0x0000407c
 8005690:	00004080 	.word	0x00004080
 8005694:	00004068 	.word	0x00004068
 8005698:	00004084 	.word	0x00004084
 800569c:	00004088 	.word	0x00004088
 80056a0:	0000408c 	.word	0x0000408c
  	pitch_ar_error = 0;
 80056a4:	4bb2      	ldr	r3, [pc, #712]	@ (8005970 <main+0xa48>)
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]
  	rool_ar_error = 0;
 80056ac:	4bb1      	ldr	r3, [pc, #708]	@ (8005974 <main+0xa4c>)
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
  	yaw_ar_error = 0;
 80056b4:	4bb0      	ldr	r3, [pc, #704]	@ (8005978 <main+0xa50>)
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]


  	uint8_t o[3] = "Odb";
 80056bc:	4aaf      	ldr	r2, [pc, #700]	@ (800597c <main+0xa54>)
 80056be:	f107 0308 	add.w	r3, r7, #8
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	4611      	mov	r1, r2
 80056c6:	8019      	strh	r1, [r3, #0]
 80056c8:	3302      	adds	r3, #2
 80056ca:	0c12      	lsrs	r2, r2, #16
 80056cc:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 80056ce:	4aac      	ldr	r2, [pc, #688]	@ (8005980 <main+0xa58>)
 80056d0:	1d3b      	adds	r3, r7, #4
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	4611      	mov	r1, r2
 80056d6:	8019      	strh	r1, [r3, #0]
 80056d8:	3302      	adds	r3, #2
 80056da:	0c12      	lsrs	r2, r2, #16
 80056dc:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 80056de:	2201      	movs	r2, #1
 80056e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056e4:	48a7      	ldr	r0, [pc, #668]	@ (8005984 <main+0xa5c>)
 80056e6:	f009 f891 	bl	800e80c <HAL_GPIO_WritePin>
  	LED_6_1;
 80056ea:	2201      	movs	r2, #1
 80056ec:	2108      	movs	r1, #8
 80056ee:	48a6      	ldr	r0, [pc, #664]	@ (8005988 <main+0xa60>)
 80056f0:	f009 f88c 	bl	800e80c <HAL_GPIO_WritePin>
  	LED_7_1;
 80056f4:	2201      	movs	r2, #1
 80056f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80056fa:	48a2      	ldr	r0, [pc, #648]	@ (8005984 <main+0xa5c>)
 80056fc:	f009 f886 	bl	800e80c <HAL_GPIO_WritePin>
  	LED_uSD_1;
 8005700:	2201      	movs	r2, #1
 8005702:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005706:	48a1      	ldr	r0, [pc, #644]	@ (800598c <main+0xa64>)
 8005708:	f009 f880 	bl	800e80c <HAL_GPIO_WritePin>
  	LED_G_1;
 800570c:	2201      	movs	r2, #1
 800570e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005712:	489d      	ldr	r0, [pc, #628]	@ (8005988 <main+0xa60>)
 8005714:	f009 f87a 	bl	800e80c <HAL_GPIO_WritePin>
  	LED_Y_1;
 8005718:	2201      	movs	r2, #1
 800571a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800571e:	489c      	ldr	r0, [pc, #624]	@ (8005990 <main+0xa68>)
 8005720:	f009 f874 	bl	800e80c <HAL_GPIO_WritePin>
  	LED_R_1;
 8005724:	2201      	movs	r2, #1
 8005726:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800572a:	4899      	ldr	r0, [pc, #612]	@ (8005990 <main+0xa68>)
 800572c:	f009 f86e 	bl	800e80c <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 8005730:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005734:	f003 ff2e 	bl	8009594 <HAL_Delay>
  	LED_G_0;
 8005738:	2200      	movs	r2, #0
 800573a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800573e:	4892      	ldr	r0, [pc, #584]	@ (8005988 <main+0xa60>)
 8005740:	f009 f864 	bl	800e80c <HAL_GPIO_WritePin>
  	LED_Y_0;
 8005744:	2200      	movs	r2, #0
 8005746:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800574a:	4891      	ldr	r0, [pc, #580]	@ (8005990 <main+0xa68>)
 800574c:	f009 f85e 	bl	800e80c <HAL_GPIO_WritePin>
  	LED_R_0;
 8005750:	2200      	movs	r2, #0
 8005752:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005756:	488e      	ldr	r0, [pc, #568]	@ (8005990 <main+0xa68>)
 8005758:	f009 f858 	bl	800e80c <HAL_GPIO_WritePin>
  	LED_5_0;
 800575c:	2200      	movs	r2, #0
 800575e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005762:	4888      	ldr	r0, [pc, #544]	@ (8005984 <main+0xa5c>)
 8005764:	f009 f852 	bl	800e80c <HAL_GPIO_WritePin>
  	LED_6_0;
 8005768:	2200      	movs	r2, #0
 800576a:	2108      	movs	r1, #8
 800576c:	4886      	ldr	r0, [pc, #536]	@ (8005988 <main+0xa60>)
 800576e:	f009 f84d 	bl	800e80c <HAL_GPIO_WritePin>
  	LED_7_0;
 8005772:	2200      	movs	r2, #0
 8005774:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005778:	4882      	ldr	r0, [pc, #520]	@ (8005984 <main+0xa5c>)
 800577a:	f009 f847 	bl	800e80c <HAL_GPIO_WritePin>
  	LED_uSD_0;
 800577e:	2200      	movs	r2, #0
 8005780:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005784:	4881      	ldr	r0, [pc, #516]	@ (800598c <main+0xa64>)
 8005786:	f009 f841 	bl	800e80c <HAL_GPIO_WritePin>


  	for(int i = 0; i < 4000; i++){
 800578a:	2300      	movs	r3, #0
 800578c:	61fb      	str	r3, [r7, #28]
 800578e:	e009      	b.n	80057a4 <main+0x87c>
  		Old_Data_stack.olddata[i] = 0;
 8005790:	4a80      	ldr	r2, [pc, #512]	@ (8005994 <main+0xa6c>)
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	3301      	adds	r3, #1
 80057a2:	61fb      	str	r3, [r7, #28]
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80057aa:	dbf1      	blt.n	8005790 <main+0x868>
  	}
  	Old_Data_stack.start_pointer = 0;
 80057ac:	4b79      	ldr	r3, [pc, #484]	@ (8005994 <main+0xa6c>)
 80057ae:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 80057b8:	4b76      	ldr	r3, [pc, #472]	@ (8005994 <main+0xa6c>)
 80057ba:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80057be:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80057c2:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 80057c6:	4b74      	ldr	r3, [pc, #464]	@ (8005998 <main+0xa70>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 80057cc:	4873      	ldr	r0, [pc, #460]	@ (800599c <main+0xa74>)
 80057ce:	f010 fe0d 	bl	80163ec <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);
 80057d2:	2201      	movs	r2, #1
 80057d4:	4970      	ldr	r1, [pc, #448]	@ (8005998 <main+0xa70>)
 80057d6:	4872      	ldr	r0, [pc, #456]	@ (80059a0 <main+0xa78>)
 80057d8:	f004 fc2e 	bl	800a038 <HAL_ADC_Start_DMA>
  	LED_R_1;
 80057dc:	2201      	movs	r2, #1
 80057de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057e2:	486b      	ldr	r0, [pc, #428]	@ (8005990 <main+0xa68>)
 80057e4:	f009 f812 	bl	800e80c <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 80057e8:	bf00      	nop
 80057ea:	4b6b      	ldr	r3, [pc, #428]	@ (8005998 <main+0xa70>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0fb      	beq.n	80057ea <main+0x8c2>

  	}
  	LED_R_0;
 80057f2:	2200      	movs	r2, #0
 80057f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057f8:	4865      	ldr	r0, [pc, #404]	@ (8005990 <main+0xa68>)
 80057fa:	f009 f807 	bl	800e80c <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 80057fe:	f7fe fc8b 	bl	8004118 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 8005802:	2104      	movs	r1, #4
 8005804:	4867      	ldr	r0, [pc, #412]	@ (80059a4 <main+0xa7c>)
 8005806:	f010 ff4d 	bl	80166a4 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800580a:	2108      	movs	r1, #8
 800580c:	4865      	ldr	r0, [pc, #404]	@ (80059a4 <main+0xa7c>)
 800580e:	f010 ff49 	bl	80166a4 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005812:	210c      	movs	r1, #12
 8005814:	4863      	ldr	r0, [pc, #396]	@ (80059a4 <main+0xa7c>)
 8005816:	f010 ff45 	bl	80166a4 <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 800581a:	4b63      	ldr	r3, [pc, #396]	@ (80059a8 <main+0xa80>)
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	4618      	mov	r0, r3
 8005822:	f001 fec1 	bl	80075a8 <RGB_LED_For_BAT>
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005826:	4b60      	ldr	r3, [pc, #384]	@ (80059a8 <main+0xa80>)
 8005828:	8a9b      	ldrh	r3, [r3, #20]
 800582a:	2b07      	cmp	r3, #7
 800582c:	d107      	bne.n	800583e <main+0x916>
  	{
  		LED_R_1;
 800582e:	2201      	movs	r2, #1
 8005830:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005834:	4856      	ldr	r0, [pc, #344]	@ (8005990 <main+0xa68>)
 8005836:	f008 ffe9 	bl	800e80c <HAL_GPIO_WritePin>
  		while(1){
 800583a:	bf00      	nop
 800583c:	e7fd      	b.n	800583a <main+0x912>

  		}
  	}
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 800583e:	4b5a      	ldr	r3, [pc, #360]	@ (80059a8 <main+0xa80>)
 8005840:	8a9b      	ldrh	r3, [r3, #20]
 8005842:	2b09      	cmp	r3, #9
 8005844:	d107      	bne.n	8005856 <main+0x92e>
  		LED_R_1;
 8005846:	2201      	movs	r2, #1
 8005848:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800584c:	4850      	ldr	r0, [pc, #320]	@ (8005990 <main+0xa68>)
 800584e:	f008 ffdd 	bl	800e80c <HAL_GPIO_WritePin>
  		while(1){
 8005852:	bf00      	nop
 8005854:	e7fd      	b.n	8005852 <main+0x92a>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 8005856:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800585a:	484d      	ldr	r0, [pc, #308]	@ (8005990 <main+0xa68>)
 800585c:	f008 ffbe 	bl	800e7dc <HAL_GPIO_ReadPin>
 8005860:	4603      	mov	r3, r0
 8005862:	461a      	mov	r2, r3
 8005864:	4b51      	ldr	r3, [pc, #324]	@ (80059ac <main+0xa84>)
 8005866:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 8005868:	4b50      	ldr	r3, [pc, #320]	@ (80059ac <main+0xa84>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d103      	bne.n	8005878 <main+0x950>
		SD_enable_Flag = 0;
 8005870:	4b4e      	ldr	r3, [pc, #312]	@ (80059ac <main+0xa84>)
 8005872:	2200      	movs	r2, #0
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	e002      	b.n	800587e <main+0x956>
	}
	else{
		SD_enable_Flag = 1;
 8005878:	4b4c      	ldr	r3, [pc, #304]	@ (80059ac <main+0xa84>)
 800587a:	2201      	movs	r2, #1
 800587c:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 800587e:	4b4b      	ldr	r3, [pc, #300]	@ (80059ac <main+0xa84>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d15f      	bne.n	8005946 <main+0xa1e>
		LED_uSD_1;
 8005886:	2201      	movs	r2, #1
 8005888:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800588c:	483f      	ldr	r0, [pc, #252]	@ (800598c <main+0xa64>)
 800588e:	f008 ffbd 	bl	800e80c <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 8005892:	2201      	movs	r2, #1
 8005894:	4946      	ldr	r1, [pc, #280]	@ (80059b0 <main+0xa88>)
 8005896:	4847      	ldr	r0, [pc, #284]	@ (80059b4 <main+0xa8c>)
 8005898:	f017 fe30 	bl	801d4fc <f_mount>
 800589c:	4603      	mov	r3, r0
 800589e:	461a      	mov	r2, r3
 80058a0:	4b45      	ldr	r3, [pc, #276]	@ (80059b8 <main+0xa90>)
 80058a2:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 80058a4:	4845      	ldr	r0, [pc, #276]	@ (80059bc <main+0xa94>)
 80058a6:	f018 fa73 	bl	801dd90 <f_unlink>
 80058aa:	4603      	mov	r3, r0
 80058ac:	461a      	mov	r2, r3
 80058ae:	4b42      	ldr	r3, [pc, #264]	@ (80059b8 <main+0xa90>)
 80058b0:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 80058b2:	2201      	movs	r2, #1
 80058b4:	493e      	ldr	r1, [pc, #248]	@ (80059b0 <main+0xa88>)
 80058b6:	483f      	ldr	r0, [pc, #252]	@ (80059b4 <main+0xa8c>)
 80058b8:	f017 fe20 	bl	801d4fc <f_mount>
 80058bc:	4603      	mov	r3, r0
 80058be:	461a      	mov	r2, r3
 80058c0:	4b3d      	ldr	r3, [pc, #244]	@ (80059b8 <main+0xa90>)
 80058c2:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 80058c4:	220a      	movs	r2, #10
 80058c6:	493e      	ldr	r1, [pc, #248]	@ (80059c0 <main+0xa98>)
 80058c8:	483e      	ldr	r0, [pc, #248]	@ (80059c4 <main+0xa9c>)
 80058ca:	f017 fe5d 	bl	801d588 <f_open>
 80058ce:	4603      	mov	r3, r0
 80058d0:	461a      	mov	r2, r3
 80058d2:	4b39      	ldr	r3, [pc, #228]	@ (80059b8 <main+0xa90>)
 80058d4:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 80058d6:	2200      	movs	r2, #0
 80058d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058dc:	482b      	ldr	r0, [pc, #172]	@ (800598c <main+0xa64>)
 80058de:	f008 ff95 	bl	800e80c <HAL_GPIO_WritePin>

		LED_uSD_1;
 80058e2:	2201      	movs	r2, #1
 80058e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058e8:	4828      	ldr	r0, [pc, #160]	@ (800598c <main+0xa64>)
 80058ea:	f008 ff8f 	bl	800e80c <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 80058ee:	2300      	movs	r3, #0
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	e007      	b.n	8005904 <main+0x9dc>
			DataToSendBuffer[i] = 49;
 80058f4:	4a34      	ldr	r2, [pc, #208]	@ (80059c8 <main+0xaa0>)
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	4413      	add	r3, r2
 80058fa:	2231      	movs	r2, #49	@ 0x31
 80058fc:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	3301      	adds	r3, #1
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	4a31      	ldr	r2, [pc, #196]	@ (80059cc <main+0xaa4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	ddf3      	ble.n	80058f4 <main+0x9cc>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 800590c:	4b30      	ldr	r3, [pc, #192]	@ (80059d0 <main+0xaa8>)
 800590e:	2281      	movs	r2, #129	@ 0x81
 8005910:	492d      	ldr	r1, [pc, #180]	@ (80059c8 <main+0xaa0>)
 8005912:	482c      	ldr	r0, [pc, #176]	@ (80059c4 <main+0xa9c>)
 8005914:	f018 f800 	bl	801d918 <f_write>
 8005918:	4603      	mov	r3, r0
 800591a:	461a      	mov	r2, r3
 800591c:	4b26      	ldr	r3, [pc, #152]	@ (80059b8 <main+0xa90>)
 800591e:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 8005920:	4828      	ldr	r0, [pc, #160]	@ (80059c4 <main+0xa9c>)
 8005922:	f018 fa0b 	bl	801dd3c <f_close>
 8005926:	4603      	mov	r3, r0
 8005928:	461a      	mov	r2, r3
 800592a:	4b23      	ldr	r3, [pc, #140]	@ (80059b8 <main+0xa90>)
 800592c:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 800592e:	4b22      	ldr	r3, [pc, #136]	@ (80059b8 <main+0xa90>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <main+0xa12>
			while(1){
 8005936:	bf00      	nop
 8005938:	e7fd      	b.n	8005936 <main+0xa0e>

			}
		}
		LED_uSD_0;
 800593a:	2200      	movs	r2, #0
 800593c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005940:	4812      	ldr	r0, [pc, #72]	@ (800598c <main+0xa64>)
 8005942:	f008 ff63 	bl	800e80c <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 8005946:	2201      	movs	r2, #1
 8005948:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800594c:	480d      	ldr	r0, [pc, #52]	@ (8005984 <main+0xa5c>)
 800594e:	f008 ff5d 	bl	800e80c <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 8005952:	4820      	ldr	r0, [pc, #128]	@ (80059d4 <main+0xaac>)
 8005954:	f7fb fc26 	bl	80011a4 <MPU6050_INIT>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d13c      	bne.n	80059d8 <main+0xab0>
			LED_R_1;
 800595e:	2201      	movs	r2, #1
 8005960:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005964:	480a      	ldr	r0, [pc, #40]	@ (8005990 <main+0xa68>)
 8005966:	f008 ff51 	bl	800e80c <HAL_GPIO_WritePin>
			while(1){
 800596a:	bf00      	nop
 800596c:	e7fd      	b.n	800596a <main+0xa42>
 800596e:	bf00      	nop
 8005970:	00004090 	.word	0x00004090
 8005974:	00004094 	.word	0x00004094
 8005978:	00004098 	.word	0x00004098
 800597c:	0801ea04 	.word	0x0801ea04
 8005980:	0801ea08 	.word	0x0801ea08
 8005984:	58020000 	.word	0x58020000
 8005988:	58021000 	.word	0x58021000
 800598c:	58020c00 	.word	0x58020c00
 8005990:	58020400 	.word	0x58020400
 8005994:	0000019c 	.word	0x0000019c
 8005998:	24000eb0 	.word	0x24000eb0
 800599c:	24000464 	.word	0x24000464
 80059a0:	240000ac 	.word	0x240000ac
 80059a4:	24000380 	.word	0x24000380
 80059a8:	00000178 	.word	0x00000178
 80059ac:	000041e4 	.word	0x000041e4
 80059b0:	0801e9e8 	.word	0x0801e9e8
 80059b4:	24000eb4 	.word	0x24000eb4
 80059b8:	24001eec 	.word	0x24001eec
 80059bc:	0801e9ec 	.word	0x0801e9ec
 80059c0:	0801e9f8 	.word	0x0801e9f8
 80059c4:	24001ef0 	.word	0x24001ef0
 80059c8:	24002f28 	.word	0x24002f28
 80059cc:	0001f7e7 	.word	0x0001f7e7
 80059d0:	24002f24 	.word	0x24002f24
 80059d4:	24000198 	.word	0x24000198
			}
		}
		LED_Y_1;
 80059d8:	2201      	movs	r2, #1
 80059da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059de:	48b1      	ldr	r0, [pc, #708]	@ (8005ca4 <main+0xd7c>)
 80059e0:	f008 ff14 	bl	800e80c <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION(&accelx_cal, &accely_cal, &accelz_cal, &gyrox_cal, &gyroy_cal, &gyroz_cal, Gyr_Scale, Acc_Scale);
 80059e4:	eddf 7ab0 	vldr	s15, [pc, #704]	@ 8005ca8 <main+0xd80>
 80059e8:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8005cac <main+0xd84>
 80059ec:	4bb0      	ldr	r3, [pc, #704]	@ (8005cb0 <main+0xd88>)
 80059ee:	9301      	str	r3, [sp, #4]
 80059f0:	4bb0      	ldr	r3, [pc, #704]	@ (8005cb4 <main+0xd8c>)
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	eef0 0a47 	vmov.f32	s1, s14
 80059f8:	eeb0 0a67 	vmov.f32	s0, s15
 80059fc:	4bae      	ldr	r3, [pc, #696]	@ (8005cb8 <main+0xd90>)
 80059fe:	4aaf      	ldr	r2, [pc, #700]	@ (8005cbc <main+0xd94>)
 8005a00:	49af      	ldr	r1, [pc, #700]	@ (8005cc0 <main+0xd98>)
 8005a02:	48b0      	ldr	r0, [pc, #704]	@ (8005cc4 <main+0xd9c>)
 8005a04:	f7fb fc98 	bl	8001338 <MPU6050_CALIBRATION>
		LED_Y_0;
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a0e:	48a5      	ldr	r0, [pc, #660]	@ (8005ca4 <main+0xd7c>)
 8005a10:	f008 fefc 	bl	800e80c <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 8005a14:	48ac      	ldr	r0, [pc, #688]	@ (8005cc8 <main+0xda0>)
 8005a16:	f7fa fe5b 	bl	80006d0 <BMP180_init>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d107      	bne.n	8005a30 <main+0xb08>
			LED_R_1;
 8005a20:	2201      	movs	r2, #1
 8005a22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a26:	489f      	ldr	r0, [pc, #636]	@ (8005ca4 <main+0xd7c>)
 8005a28:	f008 fef0 	bl	800e80c <HAL_GPIO_WritePin>
			while(1){
 8005a2c:	bf00      	nop
 8005a2e:	e7fd      	b.n	8005a2c <main+0xb04>
			}
		}
		LED_Y_1;
 8005a30:	2201      	movs	r2, #1
 8005a32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a36:	489b      	ldr	r0, [pc, #620]	@ (8005ca4 <main+0xd7c>)
 8005a38:	f008 fee8 	bl	800e80c <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&startpres);
 8005a3c:	48a3      	ldr	r0, [pc, #652]	@ (8005ccc <main+0xda4>)
 8005a3e:	f7fb f999 	bl	8000d74 <BMP180_CALIBRATION>
		LED_Y_0;
 8005a42:	2200      	movs	r2, #0
 8005a44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a48:	4896      	ldr	r0, [pc, #600]	@ (8005ca4 <main+0xd7c>)
 8005a4a:	f008 fedf 	bl	800e80c <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 8005a4e:	489e      	ldr	r0, [pc, #632]	@ (8005cc8 <main+0xda0>)
 8005a50:	f7fb fac2 	bl	8000fd8 <HMC5883L_Init>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d107      	bne.n	8005a6a <main+0xb42>
			LED_R_1;
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a60:	4890      	ldr	r0, [pc, #576]	@ (8005ca4 <main+0xd7c>)
 8005a62:	f008 fed3 	bl	800e80c <HAL_GPIO_WritePin>
			while(1){
 8005a66:	bf00      	nop
 8005a68:	e7fd      	b.n	8005a66 <main+0xb3e>
			}
		}
		LED_Y_1;
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a70:	488c      	ldr	r0, [pc, #560]	@ (8005ca4 <main+0xd7c>)
 8005a72:	f008 fecb 	bl	800e80c <HAL_GPIO_WritePin>
		Mag_Offset_val = HMC5883L_Calibration();
 8005a76:	f7fb fb5f 	bl	8001138 <HMC5883L_Calibration>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	4b94      	ldr	r3, [pc, #592]	@ (8005cd0 <main+0xda8>)
 8005a80:	801a      	strh	r2, [r3, #0]
		LED_Y_0;
 8005a82:	2200      	movs	r2, #0
 8005a84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a88:	4886      	ldr	r0, [pc, #536]	@ (8005ca4 <main+0xd7c>)
 8005a8a:	f008 febf 	bl	800e80c <HAL_GPIO_WritePin>

		LED_5_0;
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a94:	488f      	ldr	r0, [pc, #572]	@ (8005cd4 <main+0xdac>)
 8005a96:	f008 feb9 	bl	800e80c <HAL_GPIO_WritePin>



		MYDRON.dron_status.Connection = DRON_CONNECTED;
 8005a9a:	4b8f      	ldr	r3, [pc, #572]	@ (8005cd8 <main+0xdb0>)
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	825a      	strh	r2, [r3, #18]
		MYDRON.dron_status.position = DRON_POSITION_OK;
 8005aa0:	4b8d      	ldr	r3, [pc, #564]	@ (8005cd8 <main+0xdb0>)
 8005aa2:	220c      	movs	r2, #12
 8005aa4:	835a      	strh	r2, [r3, #26]


		MYDRON.THRUST = 0;
 8005aa6:	4b8c      	ldr	r3, [pc, #560]	@ (8005cd8 <main+0xdb0>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	805a      	strh	r2, [r3, #2]
		MYDRON.PITCH = 0;
 8005aac:	4b8a      	ldr	r3, [pc, #552]	@ (8005cd8 <main+0xdb0>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	809a      	strh	r2, [r3, #4]
		MYDRON.ROOL = 0;
 8005ab2:	4b89      	ldr	r3, [pc, #548]	@ (8005cd8 <main+0xdb0>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	80da      	strh	r2, [r3, #6]
		MYDRON.YAW = 0;
 8005ab8:	4b87      	ldr	r3, [pc, #540]	@ (8005cd8 <main+0xdb0>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	811a      	strh	r2, [r3, #8]



	/////////////////////////////// nRF24
		LED_6_1;
 8005abe:	2201      	movs	r2, #1
 8005ac0:	2108      	movs	r1, #8
 8005ac2:	4886      	ldr	r0, [pc, #536]	@ (8005cdc <main+0xdb4>)
 8005ac4:	f008 fea2 	bl	800e80c <HAL_GPIO_WritePin>
		nRF24_Init(&hspi6);
 8005ac8:	4885      	ldr	r0, [pc, #532]	@ (8005ce0 <main+0xdb8>)
 8005aca:	f7fc fd81 	bl	80025d0 <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 8005ace:	f107 0308 	add.w	r3, r7, #8
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	f7fc fc20 	bl	800231a <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 8005ada:	1d3b      	adds	r3, r7, #4
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fc fc55 	bl	800238c <nRF24_SetTXAddress>
		nRF24_Inittest();
 8005ae2:	f7fc fdc9 	bl	8002678 <nRF24_Inittest>
		nRF24_TX_Mode();
 8005ae6:	f7fc fa43 	bl	8001f70 <nRF24_TX_Mode>


		for(int i = 0; i < 32; i++){
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	e007      	b.n	8005b00 <main+0xbd8>
			Txcode[i] = 0;
 8005af0:	4a7c      	ldr	r2, [pc, #496]	@ (8005ce4 <main+0xdbc>)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	4413      	add	r3, r2
 8005af6:	2200      	movs	r2, #0
 8005af8:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	3301      	adds	r3, #1
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	2b1f      	cmp	r3, #31
 8005b04:	ddf4      	ble.n	8005af0 <main+0xbc8>
		}
		Txcode[22] = 'd';
 8005b06:	4b77      	ldr	r3, [pc, #476]	@ (8005ce4 <main+0xdbc>)
 8005b08:	2264      	movs	r2, #100	@ 0x64
 8005b0a:	759a      	strb	r2, [r3, #22]
		Txcode[23] = 'r';
 8005b0c:	4b75      	ldr	r3, [pc, #468]	@ (8005ce4 <main+0xdbc>)
 8005b0e:	2272      	movs	r2, #114	@ 0x72
 8005b10:	75da      	strb	r2, [r3, #23]
		Txcode[24] = 'o';
 8005b12:	4b74      	ldr	r3, [pc, #464]	@ (8005ce4 <main+0xdbc>)
 8005b14:	226f      	movs	r2, #111	@ 0x6f
 8005b16:	761a      	strb	r2, [r3, #24]
		Txcode[25] = 'n';
 8005b18:	4b72      	ldr	r3, [pc, #456]	@ (8005ce4 <main+0xdbc>)
 8005b1a:	226e      	movs	r2, #110	@ 0x6e
 8005b1c:	765a      	strb	r2, [r3, #25]
		Txcode[26] = '2';
 8005b1e:	4b71      	ldr	r3, [pc, #452]	@ (8005ce4 <main+0xdbc>)
 8005b20:	2232      	movs	r2, #50	@ 0x32
 8005b22:	769a      	strb	r2, [r3, #26]
		Txcode[27] = 'c';
 8005b24:	4b6f      	ldr	r3, [pc, #444]	@ (8005ce4 <main+0xdbc>)
 8005b26:	2263      	movs	r2, #99	@ 0x63
 8005b28:	76da      	strb	r2, [r3, #27]
		Txcode[28] = '1';
 8005b2a:	4b6e      	ldr	r3, [pc, #440]	@ (8005ce4 <main+0xdbc>)
 8005b2c:	2231      	movs	r2, #49	@ 0x31
 8005b2e:	771a      	strb	r2, [r3, #28]
		Txcode[29] = 'z';
 8005b30:	4b6c      	ldr	r3, [pc, #432]	@ (8005ce4 <main+0xdbc>)
 8005b32:	227a      	movs	r2, #122	@ 0x7a
 8005b34:	775a      	strb	r2, [r3, #29]
		Txcode[30] = 'a';
 8005b36:	4b6b      	ldr	r3, [pc, #428]	@ (8005ce4 <main+0xdbc>)
 8005b38:	2261      	movs	r2, #97	@ 0x61
 8005b3a:	779a      	strb	r2, [r3, #30]
		Txcode[31] = '7';
 8005b3c:	4b69      	ldr	r3, [pc, #420]	@ (8005ce4 <main+0xdbc>)
 8005b3e:	2237      	movs	r2, #55	@ 0x37
 8005b40:	77da      	strb	r2, [r3, #31]



		nRF24_WriteTXPayload(Txcode);
 8005b42:	4868      	ldr	r0, [pc, #416]	@ (8005ce4 <main+0xdbc>)
 8005b44:	f7fc fcd2 	bl	80024ec <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 8005b48:	f7fc fcde 	bl	8002508 <nRF24_WaitTX>
		nRF24_RX_Mode();
 8005b4c:	f7fc f9e4 	bl	8001f18 <nRF24_RX_Mode>

		uint8_t cunter = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005b54:	e022      	b.n	8005b9c <main+0xc74>
			LED_G_1;
 8005b56:	2201      	movs	r2, #1
 8005b58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b5c:	485f      	ldr	r0, [pc, #380]	@ (8005cdc <main+0xdb4>)
 8005b5e:	f008 fe55 	bl	800e80c <HAL_GPIO_WritePin>
			LED_Y_1;
 8005b62:	2201      	movs	r2, #1
 8005b64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b68:	484e      	ldr	r0, [pc, #312]	@ (8005ca4 <main+0xd7c>)
 8005b6a:	f008 fe4f 	bl	800e80c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005b6e:	2001      	movs	r0, #1
 8005b70:	f003 fd10 	bl	8009594 <HAL_Delay>
			LED_G_0;
 8005b74:	2200      	movs	r2, #0
 8005b76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b7a:	4858      	ldr	r0, [pc, #352]	@ (8005cdc <main+0xdb4>)
 8005b7c:	f008 fe46 	bl	800e80c <HAL_GPIO_WritePin>
			LED_Y_0;
 8005b80:	2200      	movs	r2, #0
 8005b82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b86:	4847      	ldr	r0, [pc, #284]	@ (8005ca4 <main+0xd7c>)
 8005b88:	f008 fe40 	bl	800e80c <HAL_GPIO_WritePin>

			cunter++;
 8005b8c:	7cfb      	ldrb	r3, [r7, #19]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	74fb      	strb	r3, [r7, #19]
			if(cunter == 200){
 8005b92:	7cfb      	ldrb	r3, [r7, #19]
 8005b94:	2bc8      	cmp	r3, #200	@ 0xc8
 8005b96:	d101      	bne.n	8005b9c <main+0xc74>
				NVIC_SystemReset();
 8005b98:	f7ff f9b0 	bl	8004efc <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	f7fc fcf7 	bl	8002590 <nRF24_IsBitSetInFifoStatus>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d0d6      	beq.n	8005b56 <main+0xc2e>
			}
		}

		nRF24_ReadRXPaylaod(RxData);
 8005ba8:	484f      	ldr	r0, [pc, #316]	@ (8005ce8 <main+0xdc0>)
 8005baa:	f7fc fcd5 	bl	8002558 <nRF24_ReadRXPaylaod>
		LED_6_0;
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2108      	movs	r1, #8
 8005bb2:	484a      	ldr	r0, [pc, #296]	@ (8005cdc <main+0xdb4>)
 8005bb4:	f008 fe2a 	bl	800e80c <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 8005bb8:	230c      	movs	r3, #12
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	e00b      	b.n	8005bd6 <main+0xcae>
			Rxcode[i] = RxData[i];
 8005bbe:	4a4a      	ldr	r2, [pc, #296]	@ (8005ce8 <main+0xdc0>)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	7819      	ldrb	r1, [r3, #0]
 8005bc6:	4a49      	ldr	r2, [pc, #292]	@ (8005cec <main+0xdc4>)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	460a      	mov	r2, r1
 8005bce:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b15      	cmp	r3, #21
 8005bda:	ddf0      	ble.n	8005bbe <main+0xc96>
		}
	///////////////////////////////////////////////////////////////////////
		ESC_INT(&htim3);
 8005bdc:	4844      	ldr	r0, [pc, #272]	@ (8005cf0 <main+0xdc8>)
 8005bde:	f7fb f9b1 	bl	8000f44 <ESC_INT>

		LED_7_1;
 8005be2:	2201      	movs	r2, #1
 8005be4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005be8:	483a      	ldr	r0, [pc, #232]	@ (8005cd4 <main+0xdac>)
 8005bea:	f008 fe0f 	bl	800e80c <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 8005bee:	2201      	movs	r2, #1
 8005bf0:	4940      	ldr	r1, [pc, #256]	@ (8005cf4 <main+0xdcc>)
 8005bf2:	4841      	ldr	r0, [pc, #260]	@ (8005cf8 <main+0xdd0>)
 8005bf4:	f012 fad4 	bl	80181a0 <HAL_UART_Receive_IT>
		LED_7_0;
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005bfe:	4835      	ldr	r0, [pc, #212]	@ (8005cd4 <main+0xdac>)
 8005c00:	f008 fe04 	bl	800e80c <HAL_GPIO_WritePin>

		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 8005c04:	483d      	ldr	r0, [pc, #244]	@ (8005cfc <main+0xdd4>)
 8005c06:	f010 fc6f 	bl	80164e8 <HAL_TIM_Base_Start_IT>



	  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005c0a:	4b33      	ldr	r3, [pc, #204]	@ (8005cd8 <main+0xdb0>)
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	4618      	mov	r0, r3
 8005c12:	f001 fcc9 	bl	80075a8 <RGB_LED_For_BAT>


	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005c16:	4b30      	ldr	r3, [pc, #192]	@ (8005cd8 <main+0xdb0>)
 8005c18:	8a9b      	ldrh	r3, [r3, #20]
 8005c1a:	2b07      	cmp	r3, #7
 8005c1c:	d107      	bne.n	8005c2e <main+0xd06>
	  	{
	  		LED_R_1;
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c24:	481f      	ldr	r0, [pc, #124]	@ (8005ca4 <main+0xd7c>)
 8005c26:	f008 fdf1 	bl	800e80c <HAL_GPIO_WritePin>
	  		while(1){
 8005c2a:	bf00      	nop
 8005c2c:	e7fd      	b.n	8005c2a <main+0xd02>
	  		}
	  	}



	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8005cd8 <main+0xdb0>)
 8005c30:	8a9b      	ldrh	r3, [r3, #20]
 8005c32:	2b09      	cmp	r3, #9
 8005c34:	d107      	bne.n	8005c46 <main+0xd1e>
	  		LED_R_1;
 8005c36:	2201      	movs	r2, #1
 8005c38:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c3c:	4819      	ldr	r0, [pc, #100]	@ (8005ca4 <main+0xd7c>)
 8005c3e:	f008 fde5 	bl	800e80c <HAL_GPIO_WritePin>
	  		while(1){
 8005c42:	bf00      	nop
 8005c44:	e7fd      	b.n	8005c42 <main+0xd1a>
	  		}
	  	}



		STARTUP = 0;
 8005c46:	4b2e      	ldr	r3, [pc, #184]	@ (8005d00 <main+0xdd8>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005c4c:	4b22      	ldr	r3, [pc, #136]	@ (8005cd8 <main+0xdb0>)
 8005c4e:	8a9b      	ldrh	r3, [r3, #20]
 8005c50:	2b07      	cmp	r3, #7
 8005c52:	d10a      	bne.n	8005c6a <main+0xd42>
	  			LED_R_1;
 8005c54:	2201      	movs	r2, #1
 8005c56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c5a:	4812      	ldr	r0, [pc, #72]	@ (8005ca4 <main+0xd7c>)
 8005c5c:	f008 fdd6 	bl	800e80c <HAL_GPIO_WritePin>
	  			thrust_limit = MYDRON.THRUST;
 8005c60:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd8 <main+0xdb0>)
 8005c62:	885b      	ldrh	r3, [r3, #2]
 8005c64:	b21a      	sxth	r2, r3
 8005c66:	4b27      	ldr	r3, [pc, #156]	@ (8005d04 <main+0xddc>)
 8005c68:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_OK){
 8005c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd8 <main+0xdb0>)
 8005c6c:	8a9b      	ldrh	r3, [r3, #20]
 8005c6e:	2b08      	cmp	r3, #8
 8005c70:	d103      	bne.n	8005c7a <main+0xd52>
	  			thrust_limit = 10000;
 8005c72:	4b24      	ldr	r3, [pc, #144]	@ (8005d04 <main+0xddc>)
 8005c74:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005c78:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005c7a:	4b17      	ldr	r3, [pc, #92]	@ (8005cd8 <main+0xdb0>)
 8005c7c:	8a9b      	ldrh	r3, [r3, #20]
 8005c7e:	2b09      	cmp	r3, #9
 8005c80:	d14f      	bne.n	8005d22 <main+0xdfa>
	  			ESC_POWER_1;
 8005c82:	2201      	movs	r2, #1
 8005c84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c88:	481f      	ldr	r0, [pc, #124]	@ (8005d08 <main+0xde0>)
 8005c8a:	f008 fdbf 	bl	800e80c <HAL_GPIO_WritePin>
	  			LED_R_1;
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c94:	4803      	ldr	r0, [pc, #12]	@ (8005ca4 <main+0xd7c>)
 8005c96:	f008 fdb9 	bl	800e80c <HAL_GPIO_WritePin>
	  			f_close(&fil);
 8005c9a:	481c      	ldr	r0, [pc, #112]	@ (8005d0c <main+0xde4>)
 8005c9c:	f018 f84e 	bl	801dd3c <f_close>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005ca0:	e03b      	b.n	8005d1a <main+0xdf2>
 8005ca2:	bf00      	nop
 8005ca4:	58020400 	.word	0x58020400
 8005ca8:	42830000 	.word	0x42830000
 8005cac:	46000000 	.word	0x46000000
 8005cb0:	00000044 	.word	0x00000044
 8005cb4:	00000040 	.word	0x00000040
 8005cb8:	0000003c 	.word	0x0000003c
 8005cbc:	00000038 	.word	0x00000038
 8005cc0:	00000034 	.word	0x00000034
 8005cc4:	00000030 	.word	0x00000030
 8005cc8:	24000198 	.word	0x24000198
 8005ccc:	000000e4 	.word	0x000000e4
 8005cd0:	00000060 	.word	0x00000060
 8005cd4:	58020000 	.word	0x58020000
 8005cd8:	00000178 	.word	0x00000178
 8005cdc:	58021000 	.word	0x58021000
 8005ce0:	24000274 	.word	0x24000274
 8005ce4:	00000114 	.word	0x00000114
 8005ce8:	000000f4 	.word	0x000000f4
 8005cec:	00000154 	.word	0x00000154
 8005cf0:	24000418 	.word	0x24000418
 8005cf4:	000041d8 	.word	0x000041d8
 8005cf8:	240004b0 	.word	0x240004b0
 8005cfc:	240003cc 	.word	0x240003cc
 8005d00:	00000074 	.word	0x00000074
 8005d04:	0000405e 	.word	0x0000405e
 8005d08:	58021800 	.word	0x58021800
 8005d0c:	24001ef0 	.word	0x24001ef0
	  				HAL_Delay(10);
 8005d10:	200a      	movs	r0, #10
 8005d12:	f003 fc3f 	bl	8009594 <HAL_Delay>
	  				Get_batteryvalue();
 8005d16:	f7fe f9ff 	bl	8004118 <Get_batteryvalue>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005d1a:	4b61      	ldr	r3, [pc, #388]	@ (8005ea0 <main+0xf78>)
 8005d1c:	8a9b      	ldrh	r3, [r3, #20]
 8005d1e:	2b09      	cmp	r3, #9
 8005d20:	d0f6      	beq.n	8005d10 <main+0xde8>
	  			}
	  		}

	  		if(commandready == 1){
 8005d22:	4b60      	ldr	r3, [pc, #384]	@ (8005ea4 <main+0xf7c>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d159      	bne.n	8005dde <main+0xeb6>
	  			LED_7_1;
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d30:	485d      	ldr	r0, [pc, #372]	@ (8005ea8 <main+0xf80>)
 8005d32:	f008 fd6b 	bl	800e80c <HAL_GPIO_WritePin>
	  			interpretcommand();
 8005d36:	f7fc fcbd 	bl	80026b4 <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 8005d3a:	495c      	ldr	r1, [pc, #368]	@ (8005eac <main+0xf84>)
 8005d3c:	485c      	ldr	r0, [pc, #368]	@ (8005eb0 <main+0xf88>)
 8005d3e:	f7fc fd07 	bl	8002750 <executecommand>
	  			LED_7_0;
 8005d42:	2200      	movs	r2, #0
 8005d44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d48:	4857      	ldr	r0, [pc, #348]	@ (8005ea8 <main+0xf80>)
 8005d4a:	f008 fd5f 	bl	800e80c <HAL_GPIO_WritePin>

	  			PID_FAC_Pitch[0] = p_pitchfactor;
 8005d4e:	4b59      	ldr	r3, [pc, #356]	@ (8005eb4 <main+0xf8c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a59      	ldr	r2, [pc, #356]	@ (8005eb8 <main+0xf90>)
 8005d54:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Pitch[1] = i_pitchfactor;
 8005d56:	4b59      	ldr	r3, [pc, #356]	@ (8005ebc <main+0xf94>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a57      	ldr	r2, [pc, #348]	@ (8005eb8 <main+0xf90>)
 8005d5c:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Pitch[2] = d_pitchfactor;
 8005d5e:	4b58      	ldr	r3, [pc, #352]	@ (8005ec0 <main+0xf98>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a55      	ldr	r2, [pc, #340]	@ (8005eb8 <main+0xf90>)
 8005d64:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005d66:	4b57      	ldr	r3, [pc, #348]	@ (8005ec4 <main+0xf9c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a57      	ldr	r2, [pc, #348]	@ (8005ec8 <main+0xfa0>)
 8005d6c:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005d6e:	4b57      	ldr	r3, [pc, #348]	@ (8005ecc <main+0xfa4>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a55      	ldr	r2, [pc, #340]	@ (8005ec8 <main+0xfa0>)
 8005d74:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005d76:	4b56      	ldr	r3, [pc, #344]	@ (8005ed0 <main+0xfa8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a53      	ldr	r2, [pc, #332]	@ (8005ec8 <main+0xfa0>)
 8005d7c:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Rool[0] = p_roolfactor;
 8005d7e:	4b55      	ldr	r3, [pc, #340]	@ (8005ed4 <main+0xfac>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a55      	ldr	r2, [pc, #340]	@ (8005ed8 <main+0xfb0>)
 8005d84:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Rool[1] = i_roolfactor;
 8005d86:	4b55      	ldr	r3, [pc, #340]	@ (8005edc <main+0xfb4>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a53      	ldr	r2, [pc, #332]	@ (8005ed8 <main+0xfb0>)
 8005d8c:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Rool[2] = d_roolfactor;
 8005d8e:	4b54      	ldr	r3, [pc, #336]	@ (8005ee0 <main+0xfb8>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a51      	ldr	r2, [pc, #324]	@ (8005ed8 <main+0xfb0>)
 8005d94:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;
 8005d96:	4b53      	ldr	r3, [pc, #332]	@ (8005ee4 <main+0xfbc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a53      	ldr	r2, [pc, #332]	@ (8005ee8 <main+0xfc0>)
 8005d9c:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005d9e:	4b53      	ldr	r3, [pc, #332]	@ (8005eec <main+0xfc4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a51      	ldr	r2, [pc, #324]	@ (8005ee8 <main+0xfc0>)
 8005da4:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005da6:	4b52      	ldr	r3, [pc, #328]	@ (8005ef0 <main+0xfc8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a4f      	ldr	r2, [pc, #316]	@ (8005ee8 <main+0xfc0>)
 8005dac:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Yaw[0] = p_yawfactor;
 8005dae:	4b51      	ldr	r3, [pc, #324]	@ (8005ef4 <main+0xfcc>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a51      	ldr	r2, [pc, #324]	@ (8005ef8 <main+0xfd0>)
 8005db4:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Yaw[1] = i_yawfactor;
 8005db6:	4b51      	ldr	r3, [pc, #324]	@ (8005efc <main+0xfd4>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a4f      	ldr	r2, [pc, #316]	@ (8005ef8 <main+0xfd0>)
 8005dbc:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Yaw[2] = d_yawfactor;
 8005dbe:	4b50      	ldr	r3, [pc, #320]	@ (8005f00 <main+0xfd8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a4d      	ldr	r2, [pc, #308]	@ (8005ef8 <main+0xfd0>)
 8005dc4:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;
 8005dc6:	4b4f      	ldr	r3, [pc, #316]	@ (8005f04 <main+0xfdc>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a4f      	ldr	r2, [pc, #316]	@ (8005f08 <main+0xfe0>)
 8005dcc:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005dce:	4b4f      	ldr	r3, [pc, #316]	@ (8005f0c <main+0xfe4>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a4d      	ldr	r2, [pc, #308]	@ (8005f08 <main+0xfe0>)
 8005dd4:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 8005dd6:	4b4e      	ldr	r3, [pc, #312]	@ (8005f10 <main+0xfe8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a4b      	ldr	r2, [pc, #300]	@ (8005f08 <main+0xfe0>)
 8005ddc:	6093      	str	r3, [r2, #8]
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 8005dde:	4b4d      	ldr	r3, [pc, #308]	@ (8005f14 <main+0xfec>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d14d      	bne.n	8005e82 <main+0xf5a>
 8005de6:	4b4c      	ldr	r3, [pc, #304]	@ (8005f18 <main+0xff0>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d149      	bne.n	8005e82 <main+0xf5a>
 8005dee:	4b4b      	ldr	r3, [pc, #300]	@ (8005f1c <main+0xff4>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d145      	bne.n	8005e82 <main+0xf5a>
	  			TIM_inte_SD = 0;
 8005df6:	4b47      	ldr	r3, [pc, #284]	@ (8005f14 <main+0xfec>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);
 8005dfc:	4b48      	ldr	r3, [pc, #288]	@ (8005f20 <main+0xff8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f001 fd67 	bl	80078d4 <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 8005e06:	4b46      	ldr	r3, [pc, #280]	@ (8005f20 <main+0xff8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d12b      	bne.n	8005e6a <main+0xf42>
	  				SD_In_Use = 1;
 8005e12:	4b44      	ldr	r3, [pc, #272]	@ (8005f24 <main+0xffc>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e1e:	4842      	ldr	r0, [pc, #264]	@ (8005f28 <main+0x1000>)
 8005e20:	f008 fcf4 	bl	800e80c <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 8005e24:	2232      	movs	r2, #50	@ 0x32
 8005e26:	4941      	ldr	r1, [pc, #260]	@ (8005f2c <main+0x1004>)
 8005e28:	4841      	ldr	r0, [pc, #260]	@ (8005f30 <main+0x1008>)
 8005e2a:	f017 fbad 	bl	801d588 <f_open>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	461a      	mov	r2, r3
 8005e32:	4b39      	ldr	r3, [pc, #228]	@ (8005f18 <main+0xff0>)
 8005e34:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 8005e36:	4b3f      	ldr	r3, [pc, #252]	@ (8005f34 <main+0x100c>)
 8005e38:	4a3f      	ldr	r2, [pc, #252]	@ (8005f38 <main+0x1010>)
 8005e3a:	4940      	ldr	r1, [pc, #256]	@ (8005f3c <main+0x1014>)
 8005e3c:	483c      	ldr	r0, [pc, #240]	@ (8005f30 <main+0x1008>)
 8005e3e:	f017 fd6b 	bl	801d918 <f_write>
 8005e42:	4603      	mov	r3, r0
 8005e44:	461a      	mov	r2, r3
 8005e46:	4b34      	ldr	r3, [pc, #208]	@ (8005f18 <main+0xff0>)
 8005e48:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 8005e4a:	4839      	ldr	r0, [pc, #228]	@ (8005f30 <main+0x1008>)
 8005e4c:	f017 ff76 	bl	801dd3c <f_close>
 8005e50:	4603      	mov	r3, r0
 8005e52:	461a      	mov	r2, r3
 8005e54:	4b30      	ldr	r3, [pc, #192]	@ (8005f18 <main+0xff0>)
 8005e56:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e5e:	4832      	ldr	r0, [pc, #200]	@ (8005f28 <main+0x1000>)
 8005e60:	f008 fcd4 	bl	800e80c <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 8005e64:	4b2f      	ldr	r3, [pc, #188]	@ (8005f24 <main+0xffc>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	601a      	str	r2, [r3, #0]
	  				}

	  			Mainloop_Number = Mainloop_Number < 1000 ? Mainloop_Number+1 : 0;
 8005e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8005f20 <main+0xff8>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e72:	d203      	bcs.n	8005e7c <main+0xf54>
 8005e74:	4b2a      	ldr	r3, [pc, #168]	@ (8005f20 <main+0xff8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	e000      	b.n	8005e7e <main+0xf56>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4a28      	ldr	r2, [pc, #160]	@ (8005f20 <main+0xff8>)
 8005e80:	6013      	str	r3, [r2, #0]
	  		}

	  		if(TIM_inte == 1){
 8005e82:	4b2f      	ldr	r3, [pc, #188]	@ (8005f40 <main+0x1018>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	f47f aee0 	bne.w	8005c4c <main+0xd24>
	  			LED_R_0;
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e92:	482c      	ldr	r0, [pc, #176]	@ (8005f44 <main+0x101c>)
 8005e94:	f008 fcba 	bl	800e80c <HAL_GPIO_WritePin>
	  			TIM_inte = 0;
 8005e98:	4b29      	ldr	r3, [pc, #164]	@ (8005f40 <main+0x1018>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005e9e:	e6d5      	b.n	8005c4c <main+0xd24>
 8005ea0:	00000178 	.word	0x00000178
 8005ea4:	000041d6 	.word	0x000041d6
 8005ea8:	58020000 	.word	0x58020000
 8005eac:	000041b8 	.word	0x000041b8
 8005eb0:	000041c8 	.word	0x000041c8
 8005eb4:	000040e4 	.word	0x000040e4
 8005eb8:	00004108 	.word	0x00004108
 8005ebc:	000040f0 	.word	0x000040f0
 8005ec0:	000040fc 	.word	0x000040fc
 8005ec4:	00004144 	.word	0x00004144
 8005ec8:	00004168 	.word	0x00004168
 8005ecc:	00004150 	.word	0x00004150
 8005ed0:	0000415c 	.word	0x0000415c
 8005ed4:	000040e8 	.word	0x000040e8
 8005ed8:	0000411c 	.word	0x0000411c
 8005edc:	000040f4 	.word	0x000040f4
 8005ee0:	00004100 	.word	0x00004100
 8005ee4:	00004148 	.word	0x00004148
 8005ee8:	0000417c 	.word	0x0000417c
 8005eec:	00004154 	.word	0x00004154
 8005ef0:	00004160 	.word	0x00004160
 8005ef4:	000040ec 	.word	0x000040ec
 8005ef8:	00004130 	.word	0x00004130
 8005efc:	000040f8 	.word	0x000040f8
 8005f00:	00004104 	.word	0x00004104
 8005f04:	0000414c 	.word	0x0000414c
 8005f08:	00004190 	.word	0x00004190
 8005f0c:	00004158 	.word	0x00004158
 8005f10:	00004164 	.word	0x00004164
 8005f14:	0000006c 	.word	0x0000006c
 8005f18:	24001eec 	.word	0x24001eec
 8005f1c:	000041e4 	.word	0x000041e4
 8005f20:	000041dc 	.word	0x000041dc
 8005f24:	000041e0 	.word	0x000041e0
 8005f28:	58020c00 	.word	0x58020c00
 8005f2c:	0801e9f8 	.word	0x0801e9f8
 8005f30:	24001ef0 	.word	0x24001ef0
 8005f34:	24002f24 	.word	0x24002f24
 8005f38:	0001f7e8 	.word	0x0001f7e8
 8005f3c:	24002f28 	.word	0x24002f28
 8005f40:	00000070 	.word	0x00000070
 8005f44:	58020400 	.word	0x58020400

08005f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b09c      	sub	sp, #112	@ 0x70
 8005f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f52:	224c      	movs	r2, #76	@ 0x4c
 8005f54:	2100      	movs	r1, #0
 8005f56:	4618      	mov	r0, r3
 8005f58:	f018 f8e8 	bl	801e12c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f5c:	1d3b      	adds	r3, r7, #4
 8005f5e:	2220      	movs	r2, #32
 8005f60:	2100      	movs	r1, #0
 8005f62:	4618      	mov	r0, r3
 8005f64:	f018 f8e2 	bl	801e12c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005f68:	2002      	movs	r0, #2
 8005f6a:	f00b f901 	bl	8011170 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005f6e:	2300      	movs	r3, #0
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	4b2d      	ldr	r3, [pc, #180]	@ (8006028 <SystemClock_Config+0xe0>)
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	4a2c      	ldr	r2, [pc, #176]	@ (8006028 <SystemClock_Config+0xe0>)
 8005f78:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005f7c:	6193      	str	r3, [r2, #24]
 8005f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8006028 <SystemClock_Config+0xe0>)
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005f8a:	bf00      	nop
 8005f8c:	4b26      	ldr	r3, [pc, #152]	@ (8006028 <SystemClock_Config+0xe0>)
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f98:	d1f8      	bne.n	8005f8c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8005f9a:	2311      	movs	r3, #17
 8005f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8005fa4:	2380      	movs	r3, #128	@ 0x80
 8005fa6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8005fa8:	2310      	movs	r3, #16
 8005faa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005fac:	2302      	movs	r3, #2
 8005fae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005fb8:	2344      	movs	r3, #68	@ 0x44
 8005fba:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005fc8:	230c      	movs	r3, #12
 8005fca:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8005fd0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005fd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f00b f902 	bl	80111e4 <HAL_RCC_OscConfig>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005fe6:	f001 ff6b 	bl	8007ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005fea:	233f      	movs	r3, #63	@ 0x3f
 8005fec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005ff6:	2308      	movs	r3, #8
 8005ff8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005ffa:	2340      	movs	r3, #64	@ 0x40
 8005ffc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005ffe:	2340      	movs	r3, #64	@ 0x40
 8006000:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006002:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006006:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006008:	2340      	movs	r3, #64	@ 0x40
 800600a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800600c:	1d3b      	adds	r3, r7, #4
 800600e:	2103      	movs	r1, #3
 8006010:	4618      	mov	r0, r3
 8006012:	f00b fcc1 	bl	8011998 <HAL_RCC_ClockConfig>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800601c:	f001 ff50 	bl	8007ec0 <Error_Handler>
  }
}
 8006020:	bf00      	nop
 8006022:	3770      	adds	r7, #112	@ 0x70
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	58024800 	.word	0x58024800

0800602c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b0ae      	sub	sp, #184	@ 0xb8
 8006030:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006032:	463b      	mov	r3, r7
 8006034:	22b8      	movs	r2, #184	@ 0xb8
 8006036:	2100      	movs	r1, #0
 8006038:	4618      	mov	r0, r3
 800603a:	f018 f877 	bl	801e12c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2;
 800603e:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 800604a:	2316      	movs	r3, #22
 800604c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 800604e:	23c0      	movs	r3, #192	@ 0xc0
 8006050:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8006052:	2303      	movs	r3, #3
 8006054:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8006056:	2302      	movs	r3, #2
 8006058:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800605a:	2302      	movs	r3, #2
 800605c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800605e:	2300      	movs	r3, #0
 8006060:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8006062:	2320      	movs	r3, #32
 8006064:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800606a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800606e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8006070:	2300      	movs	r3, #0
 8006072:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006076:	463b      	mov	r3, r7
 8006078:	4618      	mov	r0, r3
 800607a:	f00c f819 	bl	80120b0 <HAL_RCCEx_PeriphCLKConfig>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8006084:	f001 ff1c 	bl	8007ec0 <Error_Handler>
  }
}
 8006088:	bf00      	nop
 800608a:	37b8      	adds	r7, #184	@ 0xb8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a89      	ldr	r2, [pc, #548]	@ (80062c0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800609c:	4293      	cmp	r3, r2
 800609e:	f040 810b 	bne.w	80062b8 <HAL_TIM_PeriodElapsedCallback+0x228>
	{
		TIM_inte_SD = 1;
 80060a2:	4b88      	ldr	r3, [pc, #544]	@ (80062c4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80060a4:	2201      	movs	r2, #1
 80060a6:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 80060a8:	4b87      	ldr	r3, [pc, #540]	@ (80062c8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80060aa:	2201      	movs	r2, #1
 80060ac:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 80060ae:	4b87      	ldr	r3, [pc, #540]	@ (80062cc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3301      	adds	r3, #1
 80060b4:	4a85      	ldr	r2, [pc, #532]	@ (80062cc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80060b6:	6013      	str	r3, [r2, #0]


		if(i == 0){// na calosc 100ms
 80060b8:	4b85      	ldr	r3, [pc, #532]	@ (80062d0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d113      	bne.n	80060e8 <HAL_TIM_PeriodElapsedCallback+0x58>
			LED_5_1;
 80060c0:	2201      	movs	r2, #1
 80060c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060c6:	4883      	ldr	r0, [pc, #524]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80060c8:	f008 fba0 	bl	800e80c <HAL_GPIO_WritePin>
			BMP180_start_measurment_temp_IT();
 80060cc:	f7fa fbd0 	bl	8000870 <BMP180_start_measurment_temp_IT>
			LED_5_0;
 80060d0:	2200      	movs	r2, #0
 80060d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060d6:	487f      	ldr	r0, [pc, #508]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80060d8:	f008 fb98 	bl	800e80c <HAL_GPIO_WritePin>


			RGB_LED_For_BAT(MYDRON.batterysize);
 80060dc:	4b7e      	ldr	r3, [pc, #504]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 fa60 	bl	80075a8 <RGB_LED_For_BAT>
		}

		if(i == 10){//2
 80060e8:	4b79      	ldr	r3, [pc, #484]	@ (80062d0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b0a      	cmp	r3, #10
 80060ee:	d10d      	bne.n	800610c <HAL_TIM_PeriodElapsedCallback+0x7c>
			LED_5_1;
 80060f0:	2201      	movs	r2, #1
 80060f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060f6:	4877      	ldr	r0, [pc, #476]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80060f8:	f008 fb88 	bl	800e80c <HAL_GPIO_WritePin>
			BMP180_start_measurment_pres_IT();
 80060fc:	f7fa fba2 	bl	8000844 <BMP180_start_measurment_pres_IT>
			LED_5_0;
 8006100:	2200      	movs	r2, #0
 8006102:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006106:	4873      	ldr	r0, [pc, #460]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006108:	f008 fb80 	bl	800e80c <HAL_GPIO_WritePin>
		}

		if(i == 36){
 800610c:	4b70      	ldr	r3, [pc, #448]	@ (80062d0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b24      	cmp	r3, #36	@ 0x24
 8006112:	d10d      	bne.n	8006130 <HAL_TIM_PeriodElapsedCallback+0xa0>
			LED_5_1;
 8006114:	2201      	movs	r2, #1
 8006116:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800611a:	486e      	ldr	r0, [pc, #440]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800611c:	f008 fb76 	bl	800e80c <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 8006120:	f7fa ffd8 	bl	80010d4 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 8006124:	2200      	movs	r2, #0
 8006126:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800612a:	486a      	ldr	r0, [pc, #424]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800612c:	f008 fb6e 	bl	800e80c <HAL_GPIO_WritePin>
		}

		if(i == 38){
 8006130:	4b67      	ldr	r3, [pc, #412]	@ (80062d0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b26      	cmp	r3, #38	@ 0x26
 8006136:	d10e      	bne.n	8006156 <HAL_TIM_PeriodElapsedCallback+0xc6>
			LED_6_1;
 8006138:	2201      	movs	r2, #1
 800613a:	2108      	movs	r1, #8
 800613c:	4867      	ldr	r0, [pc, #412]	@ (80062dc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800613e:	f008 fb65 	bl	800e80c <HAL_GPIO_WritePin>
			nRF24_TX_Mode();
 8006142:	f7fb ff15 	bl	8001f70 <nRF24_TX_Mode>
			nRF24_Rx_Mode = 0;
 8006146:	4b66      	ldr	r3, [pc, #408]	@ (80062e0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006148:	2200      	movs	r2, #0
 800614a:	701a      	strb	r2, [r3, #0]
			LED_6_0;
 800614c:	2200      	movs	r2, #0
 800614e:	2108      	movs	r1, #8
 8006150:	4862      	ldr	r0, [pc, #392]	@ (80062dc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8006152:	f008 fb5b 	bl	800e80c <HAL_GPIO_WritePin>
		}
		if(i == 40){//5
 8006156:	4b5e      	ldr	r3, [pc, #376]	@ (80062d0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b28      	cmp	r3, #40	@ 0x28
 800615c:	d14c      	bne.n	80061f8 <HAL_TIM_PeriodElapsedCallback+0x168>
			ampritude = startpres - pres;
 800615e:	4b61      	ldr	r3, [pc, #388]	@ (80062e4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006160:	ed93 7a00 	vldr	s14, [r3]
 8006164:	4b60      	ldr	r3, [pc, #384]	@ (80062e8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8006166:	edd3 7a00 	vldr	s15, [r3]
 800616a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800616e:	4b5f      	ldr	r3, [pc, #380]	@ (80062ec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8006170:	edc3 7a00 	vstr	s15, [r3]

			MYDRON.dronheight = (uint16_t)BMP180_GET_height();
 8006174:	f7fa fe3e 	bl	8000df4 <BMP180_GET_height>
 8006178:	eef0 7a40 	vmov.f32	s15, s0
 800617c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006180:	ee17 3a90 	vmov	r3, s15
 8006184:	b29b      	uxth	r3, r3
 8006186:	b21a      	sxth	r2, r3
 8006188:	4b53      	ldr	r3, [pc, #332]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800618a:	83da      	strh	r2, [r3, #30]
			convert_value_to_array(MYDRON.dronheight, TxData, 0, 3);
 800618c:	4b52      	ldr	r3, [pc, #328]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800618e:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8006192:	2303      	movs	r3, #3
 8006194:	2200      	movs	r2, #0
 8006196:	4956      	ldr	r1, [pc, #344]	@ (80062f0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006198:	f001 f929 	bl	80073ee <convert_value_to_array>

			Get_batteryvalue();
 800619c:	f7fd ffbc 	bl	8004118 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, TxData, 3, 6);
 80061a0:	4b4d      	ldr	r3, [pc, #308]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	b218      	sxth	r0, r3
 80061a6:	2306      	movs	r3, #6
 80061a8:	2203      	movs	r2, #3
 80061aa:	4951      	ldr	r1, [pc, #324]	@ (80062f0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80061ac:	f001 f91f 	bl	80073ee <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 80061b0:	2300      	movs	r3, #0
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	e00b      	b.n	80061ce <HAL_TIM_PeriodElapsedCallback+0x13e>
				TxData[22+i] = Txcode[22+i];
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f103 0216 	add.w	r2, r3, #22
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3316      	adds	r3, #22
 80061c0:	494c      	ldr	r1, [pc, #304]	@ (80062f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80061c2:	5c89      	ldrb	r1, [r1, r2]
 80061c4:	4a4a      	ldr	r2, [pc, #296]	@ (80062f0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80061c6:	54d1      	strb	r1, [r2, r3]
			for(int i = 0; i < 10; i++){
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3301      	adds	r3, #1
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b09      	cmp	r3, #9
 80061d2:	ddf0      	ble.n	80061b6 <HAL_TIM_PeriodElapsedCallback+0x126>
			}
			LED_6_1;
 80061d4:	2201      	movs	r2, #1
 80061d6:	2108      	movs	r1, #8
 80061d8:	4840      	ldr	r0, [pc, #256]	@ (80062dc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80061da:	f008 fb17 	bl	800e80c <HAL_GPIO_WritePin>
			nRF24_WriteTXPayload(TxData);
 80061de:	4844      	ldr	r0, [pc, #272]	@ (80062f0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80061e0:	f7fc f984 	bl	80024ec <nRF24_WriteTXPayload>
			NRF24_CE_HIGH;
 80061e4:	2201      	movs	r2, #1
 80061e6:	2140      	movs	r1, #64	@ 0x40
 80061e8:	4843      	ldr	r0, [pc, #268]	@ (80062f8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80061ea:	f008 fb0f 	bl	800e80c <HAL_GPIO_WritePin>
			LED_6_0;
 80061ee:	2200      	movs	r2, #0
 80061f0:	2108      	movs	r1, #8
 80061f2:	483a      	ldr	r0, [pc, #232]	@ (80062dc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80061f4:	f008 fb0a 	bl	800e80c <HAL_GPIO_WritePin>
		}
		if(i == 41){
 80061f8:	4b35      	ldr	r3, [pc, #212]	@ (80062d0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b29      	cmp	r3, #41	@ 0x29
 80061fe:	d104      	bne.n	800620a <HAL_TIM_PeriodElapsedCallback+0x17a>
			NRF24_CE_LOW;
 8006200:	2200      	movs	r2, #0
 8006202:	2140      	movs	r1, #64	@ 0x40
 8006204:	483c      	ldr	r0, [pc, #240]	@ (80062f8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006206:	f008 fb01 	bl	800e80c <HAL_GPIO_WritePin>
		}
		if(i >= 42){
 800620a:	4b31      	ldr	r3, [pc, #196]	@ (80062d0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b29      	cmp	r3, #41	@ 0x29
 8006210:	d916      	bls.n	8006240 <HAL_TIM_PeriodElapsedCallback+0x1b0>
			if(nRF24_Rx_Mode != 1){
 8006212:	4b33      	ldr	r3, [pc, #204]	@ (80062e0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d012      	beq.n	8006240 <HAL_TIM_PeriodElapsedCallback+0x1b0>
				if(((nRF24_ReadStatus() & (1<<NRF24_MAX_RT)) || (nRF24_ReadStatus() & (1<<NRF24_TX_DS)))){
 800621a:	f7fb ff2a 	bl	8002072 <nRF24_ReadStatus>
 800621e:	4603      	mov	r3, r0
 8006220:	f003 0310 	and.w	r3, r3, #16
 8006224:	2b00      	cmp	r3, #0
 8006226:	d106      	bne.n	8006236 <HAL_TIM_PeriodElapsedCallback+0x1a6>
 8006228:	f7fb ff23 	bl	8002072 <nRF24_ReadStatus>
 800622c:	4603      	mov	r3, r0
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b00      	cmp	r3, #0
 8006234:	d004      	beq.n	8006240 <HAL_TIM_PeriodElapsedCallback+0x1b0>
					nRF24_RX_Mode();
 8006236:	f7fb fe6f 	bl	8001f18 <nRF24_RX_Mode>
					nRF24_Rx_Mode = 1;
 800623a:	4b29      	ldr	r3, [pc, #164]	@ (80062e0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800623c:	2201      	movs	r2, #1
 800623e:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		LED_5_1;
 8006240:	2201      	movs	r2, #1
 8006242:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006246:	4823      	ldr	r0, [pc, #140]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006248:	f008 fae0 	bl	800e80c <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 800624c:	f7fb fa8c 	bl	8001768 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 8006250:	2200      	movs	r2, #0
 8006252:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006256:	481f      	ldr	r0, [pc, #124]	@ (80062d4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006258:	f008 fad8 	bl	800e80c <HAL_GPIO_WritePin>

		i = (i == 100) ? 0 : i+1;
 800625c:	4b1c      	ldr	r3, [pc, #112]	@ (80062d0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b64      	cmp	r3, #100	@ 0x64
 8006262:	d003      	beq.n	800626c <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8006264:	4b1a      	ldr	r3, [pc, #104]	@ (80062d0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3301      	adds	r3, #1
 800626a:	e000      	b.n	800626e <HAL_TIM_PeriodElapsedCallback+0x1de>
 800626c:	2300      	movs	r3, #0
 800626e:	4a18      	ldr	r2, [pc, #96]	@ (80062d0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006270:	6013      	str	r3, [r2, #0]

		if(NRF_TIM_Inte >= 1000){
 8006272:	4b16      	ldr	r3, [pc, #88]	@ (80062cc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800627a:	d308      	bcc.n	800628e <HAL_TIM_PeriodElapsedCallback+0x1fe>
			LED_R_1;
 800627c:	2201      	movs	r2, #1
 800627e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006282:	481d      	ldr	r0, [pc, #116]	@ (80062f8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006284:	f008 fac2 	bl	800e80c <HAL_GPIO_WritePin>
			MYDRON.dron_status.Connection = DRON_DISCONNECTED;
 8006288:	4b13      	ldr	r3, [pc, #76]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800628a:	2202      	movs	r2, #2
 800628c:	825a      	strh	r2, [r3, #18]
		}
		if(MYDRON.dron_status.Connection == DRON_DISCONNECTED){
 800628e:	4b12      	ldr	r3, [pc, #72]	@ (80062d8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006290:	8a5b      	ldrh	r3, [r3, #18]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d110      	bne.n	80062b8 <HAL_TIM_PeriodElapsedCallback+0x228>
			wanted_rool = 0;
 8006296:	4b19      	ldr	r3, [pc, #100]	@ (80062fc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	601a      	str	r2, [r3, #0]
			wanted_pitch = 0;
 800629e:	4b18      	ldr	r3, [pc, #96]	@ (8006300 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	601a      	str	r2, [r3, #0]
			wanted_yaw = 0;
 80062a6:	4b17      	ldr	r3, [pc, #92]	@ (8006304 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
			wanted_thrust = DRON_SLOWFALING;
 80062ae:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80062b2:	b21a      	sxth	r2, r3
 80062b4:	4b14      	ldr	r3, [pc, #80]	@ (8006308 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80062b6:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80062b8:	bf00      	nop
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	240003cc 	.word	0x240003cc
 80062c4:	0000006c 	.word	0x0000006c
 80062c8:	00000070 	.word	0x00000070
 80062cc:	00000078 	.word	0x00000078
 80062d0:	000041f0 	.word	0x000041f0
 80062d4:	58020000 	.word	0x58020000
 80062d8:	00000178 	.word	0x00000178
 80062dc:	58021000 	.word	0x58021000
 80062e0:	00000174 	.word	0x00000174
 80062e4:	000000e4 	.word	0x000000e4
 80062e8:	000000e0 	.word	0x000000e0
 80062ec:	000000e8 	.word	0x000000e8
 80062f0:	00000134 	.word	0x00000134
 80062f4:	00000114 	.word	0x00000114
 80062f8:	58020400 	.word	0x58020400
 80062fc:	0000406c 	.word	0x0000406c
 8006300:	00004068 	.word	0x00004068
 8006304:	00004070 	.word	0x00004070
 8006308:	0000405c 	.word	0x0000405c

0800630c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	4603      	mov	r3, r0
 8006314:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 8006316:	88fb      	ldrh	r3, [r7, #6]
 8006318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800631c:	f040 812c 	bne.w	8006578 <HAL_GPIO_EXTI_Callback+0x26c>
	{
		if(STARTUP == 0){
 8006320:	4b97      	ldr	r3, [pc, #604]	@ (8006580 <HAL_GPIO_EXTI_Callback+0x274>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	f040 8127 	bne.w	8006578 <HAL_GPIO_EXTI_Callback+0x26c>
			LED_6_1;
 800632a:	2201      	movs	r2, #1
 800632c:	2108      	movs	r1, #8
 800632e:	4895      	ldr	r0, [pc, #596]	@ (8006584 <HAL_GPIO_EXTI_Callback+0x278>)
 8006330:	f008 fa6c 	bl	800e80c <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod(RxData);
 8006334:	4894      	ldr	r0, [pc, #592]	@ (8006588 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006336:	f7fc f90f 	bl	8002558 <nRF24_ReadRXPaylaod>
			LED_6_0;
 800633a:	2200      	movs	r2, #0
 800633c:	2108      	movs	r1, #8
 800633e:	4891      	ldr	r0, [pc, #580]	@ (8006584 <HAL_GPIO_EXTI_Callback+0x278>)
 8006340:	f008 fa64 	bl	800e80c <HAL_GPIO_WritePin>


			LED_Y_1;
 8006344:	2201      	movs	r2, #1
 8006346:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800634a:	4890      	ldr	r0, [pc, #576]	@ (800658c <HAL_GPIO_EXTI_Callback+0x280>)
 800634c:	f008 fa5e 	bl	800e80c <HAL_GPIO_WritePin>

			loopnum = 0;
 8006350:	4b8f      	ldr	r3, [pc, #572]	@ (8006590 <HAL_GPIO_EXTI_Callback+0x284>)
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	e011      	b.n	8006380 <HAL_GPIO_EXTI_Callback+0x74>
				if(RxData[12+abc] == Rxcode[abc+12]){
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	330c      	adds	r3, #12
 8006360:	4a89      	ldr	r2, [pc, #548]	@ (8006588 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006362:	5cd2      	ldrb	r2, [r2, r3]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	330c      	adds	r3, #12
 8006368:	498a      	ldr	r1, [pc, #552]	@ (8006594 <HAL_GPIO_EXTI_Callback+0x288>)
 800636a:	5ccb      	ldrb	r3, [r1, r3]
 800636c:	429a      	cmp	r2, r3
 800636e:	d104      	bne.n	800637a <HAL_GPIO_EXTI_Callback+0x6e>
					loopnum++;
 8006370:	4b87      	ldr	r3, [pc, #540]	@ (8006590 <HAL_GPIO_EXTI_Callback+0x284>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3301      	adds	r3, #1
 8006376:	4a86      	ldr	r2, [pc, #536]	@ (8006590 <HAL_GPIO_EXTI_Callback+0x284>)
 8006378:	6013      	str	r3, [r2, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3301      	adds	r3, #1
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b09      	cmp	r3, #9
 8006384:	ddea      	ble.n	800635c <HAL_GPIO_EXTI_Callback+0x50>
				}
			}

			if(loopnum == 10){
 8006386:	4b82      	ldr	r3, [pc, #520]	@ (8006590 <HAL_GPIO_EXTI_Callback+0x284>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b0a      	cmp	r3, #10
 800638c:	f040 80e3 	bne.w	8006556 <HAL_GPIO_EXTI_Callback+0x24a>
				convert_array_to_value(RxData, &wanted_pitch_v, 0, 2);//pitch
 8006390:	2302      	movs	r3, #2
 8006392:	2200      	movs	r2, #0
 8006394:	4980      	ldr	r1, [pc, #512]	@ (8006598 <HAL_GPIO_EXTI_Callback+0x28c>)
 8006396:	487c      	ldr	r0, [pc, #496]	@ (8006588 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006398:	f000 ffd8 	bl	800734c <convert_array_to_value>
				convert_array_to_value(RxData, &wanted_roll_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 800639c:	2305      	movs	r3, #5
 800639e:	2203      	movs	r2, #3
 80063a0:	497e      	ldr	r1, [pc, #504]	@ (800659c <HAL_GPIO_EXTI_Callback+0x290>)
 80063a2:	4879      	ldr	r0, [pc, #484]	@ (8006588 <HAL_GPIO_EXTI_Callback+0x27c>)
 80063a4:	f000 ffd2 	bl	800734c <convert_array_to_value>
				if(wobble_strenght == 1){
 80063a8:	4b7d      	ldr	r3, [pc, #500]	@ (80065a0 <HAL_GPIO_EXTI_Callback+0x294>)
 80063aa:	edd3 7a00 	vldr	s15, [r3]
 80063ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063b2:	eef4 7a47 	vcmp.f32	s15, s14
 80063b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ba:	d105      	bne.n	80063c8 <HAL_GPIO_EXTI_Callback+0xbc>
					convert_array_to_value(RxData, &wanted_thrust, 6, 8);//
 80063bc:	2308      	movs	r3, #8
 80063be:	2206      	movs	r2, #6
 80063c0:	4978      	ldr	r1, [pc, #480]	@ (80065a4 <HAL_GPIO_EXTI_Callback+0x298>)
 80063c2:	4871      	ldr	r0, [pc, #452]	@ (8006588 <HAL_GPIO_EXTI_Callback+0x27c>)
 80063c4:	f000 ffc2 	bl	800734c <convert_array_to_value>
				}
				convert_array_to_value(RxData, &wanted_yaw_v, 9, 11);//
 80063c8:	230b      	movs	r3, #11
 80063ca:	2209      	movs	r2, #9
 80063cc:	4976      	ldr	r1, [pc, #472]	@ (80065a8 <HAL_GPIO_EXTI_Callback+0x29c>)
 80063ce:	486e      	ldr	r0, [pc, #440]	@ (8006588 <HAL_GPIO_EXTI_Callback+0x27c>)
 80063d0:	f000 ffbc 	bl	800734c <convert_array_to_value>
				MYDRON.dron_status.Connection = DRON_CONNECTED;
 80063d4:	4b75      	ldr	r3, [pc, #468]	@ (80065ac <HAL_GPIO_EXTI_Callback+0x2a0>)
 80063d6:	2201      	movs	r2, #1
 80063d8:	825a      	strh	r2, [r3, #18]

				if(RxData[23] == 1){
 80063da:	4b6b      	ldr	r3, [pc, #428]	@ (8006588 <HAL_GPIO_EXTI_Callback+0x27c>)
 80063dc:	7ddb      	ldrb	r3, [r3, #23]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d11b      	bne.n	800641a <HAL_GPIO_EXTI_Callback+0x10e>
					ESC_POWER_1;
 80063e2:	2201      	movs	r2, #1
 80063e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80063e8:	4871      	ldr	r0, [pc, #452]	@ (80065b0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80063ea:	f008 fa0f 	bl	800e80c <HAL_GPIO_WritePin>
					LED_R_1;
 80063ee:	2201      	movs	r2, #1
 80063f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80063f4:	4865      	ldr	r0, [pc, #404]	@ (800658c <HAL_GPIO_EXTI_Callback+0x280>)
 80063f6:	f008 fa09 	bl	800e80c <HAL_GPIO_WritePin>
					if(SD_enable_Flag == 1){
 80063fa:	4b6e      	ldr	r3, [pc, #440]	@ (80065b4 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d10b      	bne.n	800641a <HAL_GPIO_EXTI_Callback+0x10e>
						f_close(&fil);
 8006402:	486d      	ldr	r0, [pc, #436]	@ (80065b8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8006404:	f017 fc9a 	bl	801dd3c <f_close>
						fresult = f_mount(NULL, "/", 1);
 8006408:	2201      	movs	r2, #1
 800640a:	496c      	ldr	r1, [pc, #432]	@ (80065bc <HAL_GPIO_EXTI_Callback+0x2b0>)
 800640c:	2000      	movs	r0, #0
 800640e:	f017 f875 	bl	801d4fc <f_mount>
 8006412:	4603      	mov	r3, r0
 8006414:	461a      	mov	r2, r3
 8006416:	4b6a      	ldr	r3, [pc, #424]	@ (80065c0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8006418:	701a      	strb	r2, [r3, #0]
					}

				}

				if(wanted_thrust == 9999){
 800641a:	4b62      	ldr	r3, [pc, #392]	@ (80065a4 <HAL_GPIO_EXTI_Callback+0x298>)
 800641c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006420:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006424:	4293      	cmp	r3, r2
 8006426:	d103      	bne.n	8006430 <HAL_GPIO_EXTI_Callback+0x124>
					MYDRON.THRUST_flag = THRUST_MAX;
 8006428:	4b60      	ldr	r3, [pc, #384]	@ (80065ac <HAL_GPIO_EXTI_Callback+0x2a0>)
 800642a:	2210      	movs	r2, #16
 800642c:	f883 2020 	strb.w	r2, [r3, #32]
	  			}
				wanted_thrust = wanted_thrust * 20;
 8006430:	4b5c      	ldr	r3, [pc, #368]	@ (80065a4 <HAL_GPIO_EXTI_Callback+0x298>)
 8006432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006436:	b29b      	uxth	r3, r3
 8006438:	461a      	mov	r2, r3
 800643a:	0092      	lsls	r2, r2, #2
 800643c:	4413      	add	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	b29b      	uxth	r3, r3
 8006442:	b21a      	sxth	r2, r3
 8006444:	4b57      	ldr	r3, [pc, #348]	@ (80065a4 <HAL_GPIO_EXTI_Callback+0x298>)
 8006446:	801a      	strh	r2, [r3, #0]
				wanted_thrust = wanted_thrust - 10000;
 8006448:	4b56      	ldr	r3, [pc, #344]	@ (80065a4 <HAL_GPIO_EXTI_Callback+0x298>)
 800644a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800644e:	b29a      	uxth	r2, r3
 8006450:	4b5c      	ldr	r3, [pc, #368]	@ (80065c4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8006452:	4413      	add	r3, r2
 8006454:	b29b      	uxth	r3, r3
 8006456:	b21a      	sxth	r2, r3
 8006458:	4b52      	ldr	r3, [pc, #328]	@ (80065a4 <HAL_GPIO_EXTI_Callback+0x298>)
 800645a:	801a      	strh	r2, [r3, #0]
				if(wanted_thrust < 0){
 800645c:	4b51      	ldr	r3, [pc, #324]	@ (80065a4 <HAL_GPIO_EXTI_Callback+0x298>)
 800645e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006462:	2b00      	cmp	r3, #0
 8006464:	da02      	bge.n	800646c <HAL_GPIO_EXTI_Callback+0x160>
					wanted_thrust = 0;
 8006466:	4b4f      	ldr	r3, [pc, #316]	@ (80065a4 <HAL_GPIO_EXTI_Callback+0x298>)
 8006468:	2200      	movs	r2, #0
 800646a:	801a      	strh	r2, [r3, #0]
	  			}

				wanted_rool_rx = (wanted_roll_v - 500)*wanted_rool_factro;//wanted_rool_rx (-90 <-> 90)
 800646c:	4b4b      	ldr	r3, [pc, #300]	@ (800659c <HAL_GPIO_EXTI_Callback+0x290>)
 800646e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006472:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006476:	ee07 3a90 	vmov	s15, r3
 800647a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800647e:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80065c8 <HAL_GPIO_EXTI_Callback+0x2bc>
 8006482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006486:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800648a:	ee17 3a90 	vmov	r3, s15
 800648e:	b21a      	sxth	r2, r3
 8006490:	4b4e      	ldr	r3, [pc, #312]	@ (80065cc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006492:	801a      	strh	r2, [r3, #0]
				wanted_pitch_rx = (wanted_pitch_v - 500)*wanted_pitch_factro;// (-450 <-> 450)
 8006494:	4b40      	ldr	r3, [pc, #256]	@ (8006598 <HAL_GPIO_EXTI_Callback+0x28c>)
 8006496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800649a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064a6:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80065d0 <HAL_GPIO_EXTI_Callback+0x2c4>
 80064aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064b2:	ee17 3a90 	vmov	r3, s15
 80064b6:	b21a      	sxth	r2, r3
 80064b8:	4b46      	ldr	r3, [pc, #280]	@ (80065d4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80064ba:	801a      	strh	r2, [r3, #0]
				wanted_yaw_rx = (wanted_yaw_v - 500)*wanted_yaw_factro;
 80064bc:	4b3a      	ldr	r3, [pc, #232]	@ (80065a8 <HAL_GPIO_EXTI_Callback+0x29c>)
 80064be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064c2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80064c6:	ee07 3a90 	vmov	s15, r3
 80064ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064ce:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80065d8 <HAL_GPIO_EXTI_Callback+0x2cc>
 80064d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064da:	ee17 3a90 	vmov	r3, s15
 80064de:	b21a      	sxth	r2, r3
 80064e0:	4b3e      	ldr	r3, [pc, #248]	@ (80065dc <HAL_GPIO_EXTI_Callback+0x2d0>)
 80064e2:	801a      	strh	r2, [r3, #0]


				wanted_rool_rx = (wanted_rool_rx >= 30) ? 30 : (wanted_rool_rx <= -30) ? -30 : wanted_rool_rx;
 80064e4:	4b39      	ldr	r3, [pc, #228]	@ (80065cc <HAL_GPIO_EXTI_Callback+0x2c0>)
 80064e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064ea:	2b1d      	cmp	r3, #29
 80064ec:	dc09      	bgt.n	8006502 <HAL_GPIO_EXTI_Callback+0x1f6>
 80064ee:	4b37      	ldr	r3, [pc, #220]	@ (80065cc <HAL_GPIO_EXTI_Callback+0x2c0>)
 80064f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064f4:	f06f 021d 	mvn.w	r2, #29
 80064f8:	4293      	cmp	r3, r2
 80064fa:	bfb8      	it	lt
 80064fc:	4613      	movlt	r3, r2
 80064fe:	b21b      	sxth	r3, r3
 8006500:	e000      	b.n	8006504 <HAL_GPIO_EXTI_Callback+0x1f8>
 8006502:	231e      	movs	r3, #30
 8006504:	4a31      	ldr	r2, [pc, #196]	@ (80065cc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006506:	8013      	strh	r3, [r2, #0]
				wanted_pitch_rx = (wanted_pitch_rx >= 30) ? 30 : (wanted_pitch_rx <= -30) ? -30 : wanted_pitch_rx;
 8006508:	4b32      	ldr	r3, [pc, #200]	@ (80065d4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800650a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800650e:	2b1d      	cmp	r3, #29
 8006510:	dc09      	bgt.n	8006526 <HAL_GPIO_EXTI_Callback+0x21a>
 8006512:	4b30      	ldr	r3, [pc, #192]	@ (80065d4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006518:	f06f 021d 	mvn.w	r2, #29
 800651c:	4293      	cmp	r3, r2
 800651e:	bfb8      	it	lt
 8006520:	4613      	movlt	r3, r2
 8006522:	b21b      	sxth	r3, r3
 8006524:	e000      	b.n	8006528 <HAL_GPIO_EXTI_Callback+0x21c>
 8006526:	231e      	movs	r3, #30
 8006528:	4a2a      	ldr	r2, [pc, #168]	@ (80065d4 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800652a:	8013      	strh	r3, [r2, #0]
				wanted_yaw_rx = (wanted_yaw_rx >= 30) ? 30 : (wanted_yaw_rx <= -30) ? -30 : wanted_yaw_rx;
 800652c:	4b2b      	ldr	r3, [pc, #172]	@ (80065dc <HAL_GPIO_EXTI_Callback+0x2d0>)
 800652e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006532:	2b1d      	cmp	r3, #29
 8006534:	dc09      	bgt.n	800654a <HAL_GPIO_EXTI_Callback+0x23e>
 8006536:	4b29      	ldr	r3, [pc, #164]	@ (80065dc <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800653c:	f06f 021d 	mvn.w	r2, #29
 8006540:	4293      	cmp	r3, r2
 8006542:	bfb8      	it	lt
 8006544:	4613      	movlt	r3, r2
 8006546:	b21b      	sxth	r3, r3
 8006548:	e000      	b.n	800654c <HAL_GPIO_EXTI_Callback+0x240>
 800654a:	231e      	movs	r3, #30
 800654c:	4a23      	ldr	r2, [pc, #140]	@ (80065dc <HAL_GPIO_EXTI_Callback+0x2d0>)
 800654e:	8013      	strh	r3, [r2, #0]


				NRF_TIM_Inte = 0;
 8006550:	4b23      	ldr	r3, [pc, #140]	@ (80065e0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
	  		}

	  			if(loopnum > 0 && loopnum < 10){
 8006556:	4b0e      	ldr	r3, [pc, #56]	@ (8006590 <HAL_GPIO_EXTI_Callback+0x284>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d006      	beq.n	800656c <HAL_GPIO_EXTI_Callback+0x260>
 800655e:	4b0c      	ldr	r3, [pc, #48]	@ (8006590 <HAL_GPIO_EXTI_Callback+0x284>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b09      	cmp	r3, #9
 8006564:	d802      	bhi.n	800656c <HAL_GPIO_EXTI_Callback+0x260>
	  				MYDRON.dron_status.Connection = DRON_CONNECTION_ERROR;
 8006566:	4b11      	ldr	r3, [pc, #68]	@ (80065ac <HAL_GPIO_EXTI_Callback+0x2a0>)
 8006568:	2203      	movs	r2, #3
 800656a:	825a      	strh	r2, [r3, #18]
	  			}
	  			LED_Y_0;
 800656c:	2200      	movs	r2, #0
 800656e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006572:	4806      	ldr	r0, [pc, #24]	@ (800658c <HAL_GPIO_EXTI_Callback+0x280>)
 8006574:	f008 f94a 	bl	800e80c <HAL_GPIO_WritePin>
		}
	}
}
 8006578:	bf00      	nop
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	00000074 	.word	0x00000074
 8006584:	58021000 	.word	0x58021000
 8006588:	000000f4 	.word	0x000000f4
 800658c:	58020400 	.word	0x58020400
 8006590:	000041f4 	.word	0x000041f4
 8006594:	00000154 	.word	0x00000154
 8006598:	000041fa 	.word	0x000041fa
 800659c:	000041f8 	.word	0x000041f8
 80065a0:	000041e8 	.word	0x000041e8
 80065a4:	0000405c 	.word	0x0000405c
 80065a8:	000041fc 	.word	0x000041fc
 80065ac:	00000178 	.word	0x00000178
 80065b0:	58021800 	.word	0x58021800
 80065b4:	000041e4 	.word	0x000041e4
 80065b8:	24001ef0 	.word	0x24001ef0
 80065bc:	0801e9e8 	.word	0x0801e9e8
 80065c0:	24001eec 	.word	0x24001eec
 80065c4:	ffffd8f0 	.word	0xffffd8f0
 80065c8:	3f266666 	.word	0x3f266666
 80065cc:	0000404a 	.word	0x0000404a
 80065d0:	3f28f5c3 	.word	0x3f28f5c3
 80065d4:	00004048 	.word	0x00004048
 80065d8:	3f19999a 	.word	0x3f19999a
 80065dc:	0000404c 	.word	0x0000404c
 80065e0:	00000078 	.word	0x00000078

080065e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 80065ec:	4b24      	ldr	r3, [pc, #144]	@ (8006680 <HAL_UART_RxCpltCallback+0x9c>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	4b24      	ldr	r3, [pc, #144]	@ (8006684 <HAL_UART_RxCpltCallback+0xa0>)
 80065f4:	7819      	ldrb	r1, [r3, #0]
 80065f6:	4b24      	ldr	r3, [pc, #144]	@ (8006688 <HAL_UART_RxCpltCallback+0xa4>)
 80065f8:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 80065fa:	4b21      	ldr	r3, [pc, #132]	@ (8006680 <HAL_UART_RxCpltCallback+0x9c>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	4b21      	ldr	r3, [pc, #132]	@ (8006688 <HAL_UART_RxCpltCallback+0xa4>)
 8006602:	5c9b      	ldrb	r3, [r3, r2]
 8006604:	2b0d      	cmp	r3, #13
 8006606:	d11a      	bne.n	800663e <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 8006608:	230a      	movs	r3, #10
 800660a:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 800660c:	f107 010f 	add.w	r1, r7, #15
 8006610:	2364      	movs	r3, #100	@ 0x64
 8006612:	2201      	movs	r2, #1
 8006614:	481d      	ldr	r0, [pc, #116]	@ (800668c <HAL_UART_RxCpltCallback+0xa8>)
 8006616:	f011 fca1 	bl	8017f5c <HAL_UART_Transmit>
		Y = '\r';
 800661a:	230d      	movs	r3, #13
 800661c:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 800661e:	f107 010f 	add.w	r1, r7, #15
 8006622:	2364      	movs	r3, #100	@ 0x64
 8006624:	2201      	movs	r2, #1
 8006626:	4819      	ldr	r0, [pc, #100]	@ (800668c <HAL_UART_RxCpltCallback+0xa8>)
 8006628:	f011 fc98 	bl	8017f5c <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 800662c:	4b14      	ldr	r3, [pc, #80]	@ (8006680 <HAL_UART_RxCpltCallback+0x9c>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	461a      	mov	r2, r3
 8006632:	4b15      	ldr	r3, [pc, #84]	@ (8006688 <HAL_UART_RxCpltCallback+0xa4>)
 8006634:	2100      	movs	r1, #0
 8006636:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 8006638:	4b15      	ldr	r3, [pc, #84]	@ (8006690 <HAL_UART_RxCpltCallback+0xac>)
 800663a:	2201      	movs	r2, #1
 800663c:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 800663e:	4b10      	ldr	r3, [pc, #64]	@ (8006680 <HAL_UART_RxCpltCallback+0x9c>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	4b10      	ldr	r3, [pc, #64]	@ (8006688 <HAL_UART_RxCpltCallback+0xa4>)
 8006646:	4413      	add	r3, r2
 8006648:	2201      	movs	r2, #1
 800664a:	4619      	mov	r1, r3
 800664c:	480f      	ldr	r0, [pc, #60]	@ (800668c <HAL_UART_RxCpltCallback+0xa8>)
 800664e:	f011 fd13 	bl	8018078 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 8006652:	2201      	movs	r2, #1
 8006654:	490b      	ldr	r1, [pc, #44]	@ (8006684 <HAL_UART_RxCpltCallback+0xa0>)
 8006656:	480d      	ldr	r0, [pc, #52]	@ (800668c <HAL_UART_RxCpltCallback+0xa8>)
 8006658:	f011 fda2 	bl	80181a0 <HAL_UART_Receive_IT>
	command_ch_num++;
 800665c:	4b08      	ldr	r3, [pc, #32]	@ (8006680 <HAL_UART_RxCpltCallback+0x9c>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	3301      	adds	r3, #1
 8006662:	b2da      	uxtb	r2, r3
 8006664:	4b06      	ldr	r3, [pc, #24]	@ (8006680 <HAL_UART_RxCpltCallback+0x9c>)
 8006666:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 8006668:	4b09      	ldr	r3, [pc, #36]	@ (8006690 <HAL_UART_RxCpltCallback+0xac>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d102      	bne.n	8006676 <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 8006670:	4b03      	ldr	r3, [pc, #12]	@ (8006680 <HAL_UART_RxCpltCallback+0x9c>)
 8006672:	2200      	movs	r2, #0
 8006674:	701a      	strb	r2, [r3, #0]
	}
}
 8006676:	bf00      	nop
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	000041d7 	.word	0x000041d7
 8006684:	000041d8 	.word	0x000041d8
 8006688:	000041cc 	.word	0x000041cc
 800668c:	240004b0 	.word	0x240004b0
 8006690:	000041d6 	.word	0x000041d6
 8006694:	00000000 	.word	0x00000000

08006698 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af02      	add	r7, sp, #8
 800669e:	6078      	str	r0, [r7, #4]
	if(MPU6050_IRQ == 1){
 80066a0:	4bba      	ldr	r3, [pc, #744]	@ (800698c <HAL_I2C_MemRxCpltCallback+0x2f4>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	f040 85a5 	bne.w	80071f4 <HAL_I2C_MemRxCpltCallback+0xb5c>
			MPU6050_IRQ = 0;
 80066aa:	4bb8      	ldr	r3, [pc, #736]	@ (800698c <HAL_I2C_MemRxCpltCallback+0x2f4>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	701a      	strb	r2, [r3, #0]
			LED_G_1;
 80066b0:	2201      	movs	r2, #1
 80066b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80066b6:	48b6      	ldr	r0, [pc, #728]	@ (8006990 <HAL_I2C_MemRxCpltCallback+0x2f8>)
 80066b8:	f008 f8a8 	bl	800e80c <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 80066bc:	4bb5      	ldr	r3, [pc, #724]	@ (8006994 <HAL_I2C_MemRxCpltCallback+0x2fc>)
 80066be:	edd3 7a00 	vldr	s15, [r3]
 80066c2:	4bb5      	ldr	r3, [pc, #724]	@ (8006998 <HAL_I2C_MemRxCpltCallback+0x300>)
 80066c4:	ed93 7a00 	vldr	s14, [r3]
 80066c8:	4bb4      	ldr	r3, [pc, #720]	@ (800699c <HAL_I2C_MemRxCpltCallback+0x304>)
 80066ca:	edd3 6a00 	vldr	s13, [r3]
 80066ce:	4bb4      	ldr	r3, [pc, #720]	@ (80069a0 <HAL_I2C_MemRxCpltCallback+0x308>)
 80066d0:	ed93 6a00 	vldr	s12, [r3]
 80066d4:	4bb3      	ldr	r3, [pc, #716]	@ (80069a4 <HAL_I2C_MemRxCpltCallback+0x30c>)
 80066d6:	edd3 5a00 	vldr	s11, [r3]
 80066da:	4bb3      	ldr	r3, [pc, #716]	@ (80069a8 <HAL_I2C_MemRxCpltCallback+0x310>)
 80066dc:	ed93 5a00 	vldr	s10, [r3]
 80066e0:	eddf 4ab2 	vldr	s9, [pc, #712]	@ 80069ac <HAL_I2C_MemRxCpltCallback+0x314>
 80066e4:	ed9f 4ab2 	vldr	s8, [pc, #712]	@ 80069b0 <HAL_I2C_MemRxCpltCallback+0x318>
 80066e8:	4bb2      	ldr	r3, [pc, #712]	@ (80069b4 <HAL_I2C_MemRxCpltCallback+0x31c>)
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	4bb2      	ldr	r3, [pc, #712]	@ (80069b8 <HAL_I2C_MemRxCpltCallback+0x320>)
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	eef0 3a44 	vmov.f32	s7, s8
 80066f4:	eeb0 3a64 	vmov.f32	s6, s9
 80066f8:	eef0 2a45 	vmov.f32	s5, s10
 80066fc:	eeb0 2a65 	vmov.f32	s4, s11
 8006700:	eef0 1a46 	vmov.f32	s3, s12
 8006704:	eeb0 1a66 	vmov.f32	s2, s13
 8006708:	eef0 0a47 	vmov.f32	s1, s14
 800670c:	eeb0 0a67 	vmov.f32	s0, s15
 8006710:	4baa      	ldr	r3, [pc, #680]	@ (80069bc <HAL_I2C_MemRxCpltCallback+0x324>)
 8006712:	4aab      	ldr	r2, [pc, #684]	@ (80069c0 <HAL_I2C_MemRxCpltCallback+0x328>)
 8006714:	49ab      	ldr	r1, [pc, #684]	@ (80069c4 <HAL_I2C_MemRxCpltCallback+0x32c>)
 8006716:	48ac      	ldr	r0, [pc, #688]	@ (80069c8 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006718:	f7fb f840 	bl	800179c <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 800671c:	4baa      	ldr	r3, [pc, #680]	@ (80069c8 <HAL_I2C_MemRxCpltCallback+0x330>)
 800671e:	edd3 7a00 	vldr	s15, [r3]
 8006722:	4ba8      	ldr	r3, [pc, #672]	@ (80069c4 <HAL_I2C_MemRxCpltCallback+0x32c>)
 8006724:	ed93 7a00 	vldr	s14, [r3]
 8006728:	4ba5      	ldr	r3, [pc, #660]	@ (80069c0 <HAL_I2C_MemRxCpltCallback+0x328>)
 800672a:	edd3 6a00 	vldr	s13, [r3]
 800672e:	49a7      	ldr	r1, [pc, #668]	@ (80069cc <HAL_I2C_MemRxCpltCallback+0x334>)
 8006730:	48a7      	ldr	r0, [pc, #668]	@ (80069d0 <HAL_I2C_MemRxCpltCallback+0x338>)
 8006732:	eeb0 1a66 	vmov.f32	s2, s13
 8006736:	eef0 0a47 	vmov.f32	s1, s14
 800673a:	eeb0 0a67 	vmov.f32	s0, s15
 800673e:	f7fa fed3 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 8006742:	4ba3      	ldr	r3, [pc, #652]	@ (80069d0 <HAL_I2C_MemRxCpltCallback+0x338>)
 8006744:	edd3 7a00 	vldr	s15, [r3]
 8006748:	4ba0      	ldr	r3, [pc, #640]	@ (80069cc <HAL_I2C_MemRxCpltCallback+0x334>)
 800674a:	ed93 7a00 	vldr	s14, [r3]
 800674e:	4ba1      	ldr	r3, [pc, #644]	@ (80069d4 <HAL_I2C_MemRxCpltCallback+0x33c>)
 8006750:	edd3 6a00 	vldr	s13, [r3]
 8006754:	4b99      	ldr	r3, [pc, #612]	@ (80069bc <HAL_I2C_MemRxCpltCallback+0x324>)
 8006756:	ed93 6a00 	vldr	s12, [r3]
 800675a:	4b97      	ldr	r3, [pc, #604]	@ (80069b8 <HAL_I2C_MemRxCpltCallback+0x320>)
 800675c:	edd3 5a00 	vldr	s11, [r3]
 8006760:	4b94      	ldr	r3, [pc, #592]	@ (80069b4 <HAL_I2C_MemRxCpltCallback+0x31c>)
 8006762:	ed93 5a00 	vldr	s10, [r3]
 8006766:	eef0 2a45 	vmov.f32	s5, s10
 800676a:	eeb0 2a65 	vmov.f32	s4, s11
 800676e:	eef0 1a46 	vmov.f32	s3, s12
 8006772:	eeb0 1a66 	vmov.f32	s2, s13
 8006776:	eef0 0a47 	vmov.f32	s1, s14
 800677a:	eeb0 0a67 	vmov.f32	s0, s15
 800677e:	4896      	ldr	r0, [pc, #600]	@ (80069d8 <HAL_I2C_MemRxCpltCallback+0x340>)
 8006780:	f7fb f8b6 	bl	80018f0 <MPU6050_GET_ACCANDGYR_FILTRED>


			now_pitch = data.x;
 8006784:	4b94      	ldr	r3, [pc, #592]	@ (80069d8 <HAL_I2C_MemRxCpltCallback+0x340>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a94      	ldr	r2, [pc, #592]	@ (80069dc <HAL_I2C_MemRxCpltCallback+0x344>)
 800678a:	6013      	str	r3, [r2, #0]
			now_rool = data.y;
 800678c:	4b92      	ldr	r3, [pc, #584]	@ (80069d8 <HAL_I2C_MemRxCpltCallback+0x340>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	4a93      	ldr	r2, [pc, #588]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x348>)
 8006792:	6013      	str	r3, [r2, #0]
			now_yaw = data.z;
 8006794:	4b90      	ldr	r3, [pc, #576]	@ (80069d8 <HAL_I2C_MemRxCpltCallback+0x340>)
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	4a92      	ldr	r2, [pc, #584]	@ (80069e4 <HAL_I2C_MemRxCpltCallback+0x34c>)
 800679a:	6013      	str	r3, [r2, #0]


			wanted_rool = (float)wanted_rool_rx/10;
 800679c:	4b92      	ldr	r3, [pc, #584]	@ (80069e8 <HAL_I2C_MemRxCpltCallback+0x350>)
 800679e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067aa:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80067ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067b2:	4b8e      	ldr	r3, [pc, #568]	@ (80069ec <HAL_I2C_MemRxCpltCallback+0x354>)
 80067b4:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (float)wanted_pitch_rx/10;
 80067b8:	4b8d      	ldr	r3, [pc, #564]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0x358>)
 80067ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067be:	ee07 3a90 	vmov	s15, r3
 80067c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067c6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80067ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067ce:	4b89      	ldr	r3, [pc, #548]	@ (80069f4 <HAL_I2C_MemRxCpltCallback+0x35c>)
 80067d0:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = 0;//(float)wanted_yaw_rx/10;
 80067d4:	4b88      	ldr	r3, [pc, #544]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0x360>)
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	601a      	str	r2, [r3, #0]
				  			/*
				  				 * FDP
				  				 */
			wanted_rool = (wanted_rool * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_rool_rx * (1 / (1 + (FDP_FQ * looptime))));
 80067dc:	eddf 7a87 	vldr	s15, [pc, #540]	@ 80069fc <HAL_I2C_MemRxCpltCallback+0x364>
 80067e0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80067e4:	4b81      	ldr	r3, [pc, #516]	@ (80069ec <HAL_I2C_MemRxCpltCallback+0x354>)
 80067e6:	edd3 7a00 	vldr	s15, [r3]
 80067ea:	ee67 6a27 	vmul.f32	s13, s14, s15
 80067ee:	eddf 7a83 	vldr	s15, [pc, #524]	@ 80069fc <HAL_I2C_MemRxCpltCallback+0x364>
 80067f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80067f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006802:	eddf 7a7e 	vldr	s15, [pc, #504]	@ 80069fc <HAL_I2C_MemRxCpltCallback+0x364>
 8006806:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800680a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800680e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006812:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006816:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800681a:	4b79      	ldr	r3, [pc, #484]	@ (8006a00 <HAL_I2C_MemRxCpltCallback+0x368>)
 800681c:	edd3 7a00 	vldr	s15, [r3]
 8006820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006828:	4b70      	ldr	r3, [pc, #448]	@ (80069ec <HAL_I2C_MemRxCpltCallback+0x354>)
 800682a:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (wanted_pitch * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_pitch_rx * (1 / (1 + (FDP_FQ * looptime))));
 800682e:	eddf 7a73 	vldr	s15, [pc, #460]	@ 80069fc <HAL_I2C_MemRxCpltCallback+0x364>
 8006832:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006836:	4b6f      	ldr	r3, [pc, #444]	@ (80069f4 <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006838:	edd3 7a00 	vldr	s15, [r3]
 800683c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006840:	eddf 7a6e 	vldr	s15, [pc, #440]	@ 80069fc <HAL_I2C_MemRxCpltCallback+0x364>
 8006844:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006848:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800684c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006854:	eddf 7a69 	vldr	s15, [pc, #420]	@ 80069fc <HAL_I2C_MemRxCpltCallback+0x364>
 8006858:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800685c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006864:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006868:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800686c:	4b65      	ldr	r3, [pc, #404]	@ (8006a04 <HAL_I2C_MemRxCpltCallback+0x36c>)
 800686e:	edd3 7a00 	vldr	s15, [r3]
 8006872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800687a:	4b5e      	ldr	r3, [pc, #376]	@ (80069f4 <HAL_I2C_MemRxCpltCallback+0x35c>)
 800687c:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = (wanted_yaw * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_yaw_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006880:	eddf 7a5e 	vldr	s15, [pc, #376]	@ 80069fc <HAL_I2C_MemRxCpltCallback+0x364>
 8006884:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006888:	4b5b      	ldr	r3, [pc, #364]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0x360>)
 800688a:	edd3 7a00 	vldr	s15, [r3]
 800688e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006892:	eddf 7a5a 	vldr	s15, [pc, #360]	@ 80069fc <HAL_I2C_MemRxCpltCallback+0x364>
 8006896:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800689a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800689e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068a6:	eddf 7a55 	vldr	s15, [pc, #340]	@ 80069fc <HAL_I2C_MemRxCpltCallback+0x364>
 80068aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80068ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068b6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80068ba:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80068be:	4b52      	ldr	r3, [pc, #328]	@ (8006a08 <HAL_I2C_MemRxCpltCallback+0x370>)
 80068c0:	edd3 7a00 	vldr	s15, [r3]
 80068c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068cc:	4b4a      	ldr	r3, [pc, #296]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0x360>)
 80068ce:	edc3 7a00 	vstr	s15, [r3]


			last_wanted_rool_rx = wanted_rool;
 80068d2:	4b46      	ldr	r3, [pc, #280]	@ (80069ec <HAL_I2C_MemRxCpltCallback+0x354>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a4a      	ldr	r2, [pc, #296]	@ (8006a00 <HAL_I2C_MemRxCpltCallback+0x368>)
 80068d8:	6013      	str	r3, [r2, #0]
			last_wanted_pitch_rx = wanted_pitch;
 80068da:	4b46      	ldr	r3, [pc, #280]	@ (80069f4 <HAL_I2C_MemRxCpltCallback+0x35c>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a49      	ldr	r2, [pc, #292]	@ (8006a04 <HAL_I2C_MemRxCpltCallback+0x36c>)
 80068e0:	6013      	str	r3, [r2, #0]
			last_wanted_yaw_rx = wanted_yaw;
 80068e2:	4b45      	ldr	r3, [pc, #276]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0x360>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a48      	ldr	r2, [pc, #288]	@ (8006a08 <HAL_I2C_MemRxCpltCallback+0x370>)
 80068e8:	6013      	str	r3, [r2, #0]


		  	pitch_error = wanted_pitch - now_pitch;
 80068ea:	4b42      	ldr	r3, [pc, #264]	@ (80069f4 <HAL_I2C_MemRxCpltCallback+0x35c>)
 80068ec:	ed93 7a00 	vldr	s14, [r3]
 80068f0:	4b3a      	ldr	r3, [pc, #232]	@ (80069dc <HAL_I2C_MemRxCpltCallback+0x344>)
 80068f2:	edd3 7a00 	vldr	s15, [r3]
 80068f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068fa:	4b44      	ldr	r3, [pc, #272]	@ (8006a0c <HAL_I2C_MemRxCpltCallback+0x374>)
 80068fc:	edc3 7a00 	vstr	s15, [r3]
		  	rool_error = wanted_rool - now_rool;
 8006900:	4b3a      	ldr	r3, [pc, #232]	@ (80069ec <HAL_I2C_MemRxCpltCallback+0x354>)
 8006902:	ed93 7a00 	vldr	s14, [r3]
 8006906:	4b36      	ldr	r3, [pc, #216]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x348>)
 8006908:	edd3 7a00 	vldr	s15, [r3]
 800690c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006910:	4b3f      	ldr	r3, [pc, #252]	@ (8006a10 <HAL_I2C_MemRxCpltCallback+0x378>)
 8006912:	edc3 7a00 	vstr	s15, [r3]
		  	yaw_error = wanted_yaw - now_yaw;
 8006916:	4b38      	ldr	r3, [pc, #224]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006918:	ed93 7a00 	vldr	s14, [r3]
 800691c:	4b31      	ldr	r3, [pc, #196]	@ (80069e4 <HAL_I2C_MemRxCpltCallback+0x34c>)
 800691e:	edd3 7a00 	vldr	s15, [r3]
 8006922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006926:	4b3b      	ldr	r3, [pc, #236]	@ (8006a14 <HAL_I2C_MemRxCpltCallback+0x37c>)
 8006928:	edc3 7a00 	vstr	s15, [r3]
		  	pitch_ar_error = pid_pitch - gx;
 800692c:	4b3a      	ldr	r3, [pc, #232]	@ (8006a18 <HAL_I2C_MemRxCpltCallback+0x380>)
 800692e:	ed93 7a00 	vldr	s14, [r3]
 8006932:	4b22      	ldr	r3, [pc, #136]	@ (80069bc <HAL_I2C_MemRxCpltCallback+0x324>)
 8006934:	edd3 7a00 	vldr	s15, [r3]
 8006938:	ee77 7a67 	vsub.f32	s15, s14, s15
 800693c:	4b37      	ldr	r3, [pc, #220]	@ (8006a1c <HAL_I2C_MemRxCpltCallback+0x384>)
 800693e:	edc3 7a00 	vstr	s15, [r3]
		  	rool_ar_error = pid_rool - gy;
 8006942:	4b37      	ldr	r3, [pc, #220]	@ (8006a20 <HAL_I2C_MemRxCpltCallback+0x388>)
 8006944:	ed93 7a00 	vldr	s14, [r3]
 8006948:	4b1b      	ldr	r3, [pc, #108]	@ (80069b8 <HAL_I2C_MemRxCpltCallback+0x320>)
 800694a:	edd3 7a00 	vldr	s15, [r3]
 800694e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006952:	4b34      	ldr	r3, [pc, #208]	@ (8006a24 <HAL_I2C_MemRxCpltCallback+0x38c>)
 8006954:	edc3 7a00 	vstr	s15, [r3]
		  	yaw_ar_error = pid_yaw - gz;
 8006958:	4b33      	ldr	r3, [pc, #204]	@ (8006a28 <HAL_I2C_MemRxCpltCallback+0x390>)
 800695a:	ed93 7a00 	vldr	s14, [r3]
 800695e:	4b15      	ldr	r3, [pc, #84]	@ (80069b4 <HAL_I2C_MemRxCpltCallback+0x31c>)
 8006960:	edd3 7a00 	vldr	s15, [r3]
 8006964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006968:	4b30      	ldr	r3, [pc, #192]	@ (8006a2c <HAL_I2C_MemRxCpltCallback+0x394>)
 800696a:	edc3 7a00 	vstr	s15, [r3]


			error_sum_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_pitch : error_sum_pitch + (pitch_error);//pitch_error -> pitch_error
 800696e:	4b30      	ldr	r3, [pc, #192]	@ (8006a30 <HAL_I2C_MemRxCpltCallback+0x398>)
 8006970:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006974:	2b00      	cmp	r3, #0
 8006976:	d05f      	beq.n	8006a38 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006978:	4b2e      	ldr	r3, [pc, #184]	@ (8006a34 <HAL_I2C_MemRxCpltCallback+0x39c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	ee07 3a90 	vmov	s15, r3
 8006980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006988:	e063      	b.n	8006a52 <HAL_I2C_MemRxCpltCallback+0x3ba>
 800698a:	bf00      	nop
 800698c:	000041ec 	.word	0x000041ec
 8006990:	58021000 	.word	0x58021000
 8006994:	00000030 	.word	0x00000030
 8006998:	00000034 	.word	0x00000034
 800699c:	00000038 	.word	0x00000038
 80069a0:	0000003c 	.word	0x0000003c
 80069a4:	00000040 	.word	0x00000040
 80069a8:	00000044 	.word	0x00000044
 80069ac:	42830000 	.word	0x42830000
 80069b0:	46000000 	.word	0x46000000
 80069b4:	00000014 	.word	0x00000014
 80069b8:	00000010 	.word	0x00000010
 80069bc:	0000000c 	.word	0x0000000c
 80069c0:	00000008 	.word	0x00000008
 80069c4:	00000004 	.word	0x00000004
 80069c8:	00000000 	.word	0x00000000
 80069cc:	0000001c 	.word	0x0000001c
 80069d0:	00000018 	.word	0x00000018
 80069d4:	00000058 	.word	0x00000058
 80069d8:	0000007c 	.word	0x0000007c
 80069dc:	00004078 	.word	0x00004078
 80069e0:	0000407c 	.word	0x0000407c
 80069e4:	00004080 	.word	0x00004080
 80069e8:	0000404a 	.word	0x0000404a
 80069ec:	0000406c 	.word	0x0000406c
 80069f0:	00004048 	.word	0x00004048
 80069f4:	00004068 	.word	0x00004068
 80069f8:	00004070 	.word	0x00004070
 80069fc:	3a83126f 	.word	0x3a83126f
 8006a00:	00004054 	.word	0x00004054
 8006a04:	00004050 	.word	0x00004050
 8006a08:	00004058 	.word	0x00004058
 8006a0c:	00004084 	.word	0x00004084
 8006a10:	00004088 	.word	0x00004088
 8006a14:	0000408c 	.word	0x0000408c
 8006a18:	000040cc 	.word	0x000040cc
 8006a1c:	00004090 	.word	0x00004090
 8006a20:	000040d4 	.word	0x000040d4
 8006a24:	00004094 	.word	0x00004094
 8006a28:	000040d0 	.word	0x000040d0
 8006a2c:	00004098 	.word	0x00004098
 8006a30:	00000178 	.word	0x00000178
 8006a34:	000040b4 	.word	0x000040b4
 8006a38:	4ba4      	ldr	r3, [pc, #656]	@ (8006ccc <HAL_I2C_MemRxCpltCallback+0x634>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	ee07 3a90 	vmov	s15, r3
 8006a40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a44:	4ba2      	ldr	r3, [pc, #648]	@ (8006cd0 <HAL_I2C_MemRxCpltCallback+0x638>)
 8006a46:	edd3 7a00 	vldr	s15, [r3]
 8006a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a52:	4b9e      	ldr	r3, [pc, #632]	@ (8006ccc <HAL_I2C_MemRxCpltCallback+0x634>)
 8006a54:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = (MYDRON.ROOL_STA != 0) ? error_sum_rool : error_sum_rool + (rool_error);//rool_error
 8006a58:	4b9e      	ldr	r3, [pc, #632]	@ (8006cd4 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006a5a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d008      	beq.n	8006a74 <HAL_I2C_MemRxCpltCallback+0x3dc>
 8006a62:	4b9d      	ldr	r3, [pc, #628]	@ (8006cd8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	ee07 3a90 	vmov	s15, r3
 8006a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a72:	e00c      	b.n	8006a8e <HAL_I2C_MemRxCpltCallback+0x3f6>
 8006a74:	4b98      	ldr	r3, [pc, #608]	@ (8006cd8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	ee07 3a90 	vmov	s15, r3
 8006a7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a80:	4b96      	ldr	r3, [pc, #600]	@ (8006cdc <HAL_I2C_MemRxCpltCallback+0x644>)
 8006a82:	edd3 7a00 	vldr	s15, [r3]
 8006a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a8e:	4b92      	ldr	r3, [pc, #584]	@ (8006cd8 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006a90:	edc3 7a00 	vstr	s15, [r3]
			error_sum_yaw = (MYDRON.YAW_STA != 0) ? error_sum_yaw : error_sum_yaw + (yaw_error);//yaw_error
 8006a94:	4b8f      	ldr	r3, [pc, #572]	@ (8006cd4 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006a96:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d008      	beq.n	8006ab0 <HAL_I2C_MemRxCpltCallback+0x418>
 8006a9e:	4b90      	ldr	r3, [pc, #576]	@ (8006ce0 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aae:	e00c      	b.n	8006aca <HAL_I2C_MemRxCpltCallback+0x432>
 8006ab0:	4b8b      	ldr	r3, [pc, #556]	@ (8006ce0 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	ee07 3a90 	vmov	s15, r3
 8006ab8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006abc:	4b89      	ldr	r3, [pc, #548]	@ (8006ce4 <HAL_I2C_MemRxCpltCallback+0x64c>)
 8006abe:	edd3 7a00 	vldr	s15, [r3]
 8006ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ac6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aca:	4b85      	ldr	r3, [pc, #532]	@ (8006ce0 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006acc:	edc3 7a00 	vstr	s15, [r3]

			error_sum_angular_rate_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_angular_rate_pitch : error_sum_angular_rate_pitch + (pitch_ar_error);//pitch_ar_error
 8006ad0:	4b80      	ldr	r3, [pc, #512]	@ (8006cd4 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006ad2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d008      	beq.n	8006aec <HAL_I2C_MemRxCpltCallback+0x454>
 8006ada:	4b83      	ldr	r3, [pc, #524]	@ (8006ce8 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aea:	e00c      	b.n	8006b06 <HAL_I2C_MemRxCpltCallback+0x46e>
 8006aec:	4b7e      	ldr	r3, [pc, #504]	@ (8006ce8 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	ee07 3a90 	vmov	s15, r3
 8006af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006af8:	4b7c      	ldr	r3, [pc, #496]	@ (8006cec <HAL_I2C_MemRxCpltCallback+0x654>)
 8006afa:	edd3 7a00 	vldr	s15, [r3]
 8006afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b06:	4b78      	ldr	r3, [pc, #480]	@ (8006ce8 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006b08:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = (MYDRON.ROOL_STA != 0) ? error_sum_angular_rate_rool : error_sum_angular_rate_rool + (rool_ar_error);
 8006b0c:	4b71      	ldr	r3, [pc, #452]	@ (8006cd4 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006b0e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d008      	beq.n	8006b28 <HAL_I2C_MemRxCpltCallback+0x490>
 8006b16:	4b76      	ldr	r3, [pc, #472]	@ (8006cf0 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b26:	e00c      	b.n	8006b42 <HAL_I2C_MemRxCpltCallback+0x4aa>
 8006b28:	4b71      	ldr	r3, [pc, #452]	@ (8006cf0 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	ee07 3a90 	vmov	s15, r3
 8006b30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b34:	4b6f      	ldr	r3, [pc, #444]	@ (8006cf4 <HAL_I2C_MemRxCpltCallback+0x65c>)
 8006b36:	edd3 7a00 	vldr	s15, [r3]
 8006b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b42:	4b6b      	ldr	r3, [pc, #428]	@ (8006cf0 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006b44:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_yaw = (MYDRON.YAW_STA != 0) ? error_sum_angular_rate_yaw : error_sum_angular_rate_yaw + (yaw_ar_error);
 8006b48:	4b62      	ldr	r3, [pc, #392]	@ (8006cd4 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006b4a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d008      	beq.n	8006b64 <HAL_I2C_MemRxCpltCallback+0x4cc>
 8006b52:	4b69      	ldr	r3, [pc, #420]	@ (8006cf8 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b62:	e00c      	b.n	8006b7e <HAL_I2C_MemRxCpltCallback+0x4e6>
 8006b64:	4b64      	ldr	r3, [pc, #400]	@ (8006cf8 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	ee07 3a90 	vmov	s15, r3
 8006b6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b70:	4b62      	ldr	r3, [pc, #392]	@ (8006cfc <HAL_I2C_MemRxCpltCallback+0x664>)
 8006b72:	edd3 7a00 	vldr	s15, [r3]
 8006b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b7e:	4b5e      	ldr	r3, [pc, #376]	@ (8006cf8 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006b80:	edc3 7a00 	vstr	s15, [r3]


			PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8006b84:	2201      	movs	r2, #1
 8006b86:	495e      	ldr	r1, [pc, #376]	@ (8006d00 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006b88:	485e      	ldr	r0, [pc, #376]	@ (8006d04 <HAL_I2C_MemRxCpltCallback+0x66c>)
 8006b8a:	f7fc ff1f 	bl	80039cc <PID_cal>
			PID_cal(&pid_rool, PID_FAC_Rool, 2);
 8006b8e:	2202      	movs	r2, #2
 8006b90:	495d      	ldr	r1, [pc, #372]	@ (8006d08 <HAL_I2C_MemRxCpltCallback+0x670>)
 8006b92:	485e      	ldr	r0, [pc, #376]	@ (8006d0c <HAL_I2C_MemRxCpltCallback+0x674>)
 8006b94:	f7fc ff1a 	bl	80039cc <PID_cal>
			PID_cal(&pid_yaw, PID_FAC_Yaw, 3);
 8006b98:	2203      	movs	r2, #3
 8006b9a:	495d      	ldr	r1, [pc, #372]	@ (8006d10 <HAL_I2C_MemRxCpltCallback+0x678>)
 8006b9c:	485d      	ldr	r0, [pc, #372]	@ (8006d14 <HAL_I2C_MemRxCpltCallback+0x67c>)
 8006b9e:	f7fc ff15 	bl	80039cc <PID_cal>

			PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8006ba2:	2204      	movs	r2, #4
 8006ba4:	495c      	ldr	r1, [pc, #368]	@ (8006d18 <HAL_I2C_MemRxCpltCallback+0x680>)
 8006ba6:	485d      	ldr	r0, [pc, #372]	@ (8006d1c <HAL_I2C_MemRxCpltCallback+0x684>)
 8006ba8:	f7fc ff10 	bl	80039cc <PID_cal>
			PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 8006bac:	2205      	movs	r2, #5
 8006bae:	495c      	ldr	r1, [pc, #368]	@ (8006d20 <HAL_I2C_MemRxCpltCallback+0x688>)
 8006bb0:	485c      	ldr	r0, [pc, #368]	@ (8006d24 <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006bb2:	f7fc ff0b 	bl	80039cc <PID_cal>
			PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 8006bb6:	2206      	movs	r2, #6
 8006bb8:	495b      	ldr	r1, [pc, #364]	@ (8006d28 <HAL_I2C_MemRxCpltCallback+0x690>)
 8006bba:	485c      	ldr	r0, [pc, #368]	@ (8006d2c <HAL_I2C_MemRxCpltCallback+0x694>)
 8006bbc:	f7fc ff06 	bl	80039cc <PID_cal>


			old_error_pitch = pitch_error;
 8006bc0:	4b43      	ldr	r3, [pc, #268]	@ (8006cd0 <HAL_I2C_MemRxCpltCallback+0x638>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a5a      	ldr	r2, [pc, #360]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x698>)
 8006bc6:	6013      	str	r3, [r2, #0]
			old_error_rool = rool_error;
 8006bc8:	4b44      	ldr	r3, [pc, #272]	@ (8006cdc <HAL_I2C_MemRxCpltCallback+0x644>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a59      	ldr	r2, [pc, #356]	@ (8006d34 <HAL_I2C_MemRxCpltCallback+0x69c>)
 8006bce:	6013      	str	r3, [r2, #0]
			old_error_yaw = yaw_error;
 8006bd0:	4b44      	ldr	r3, [pc, #272]	@ (8006ce4 <HAL_I2C_MemRxCpltCallback+0x64c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a58      	ldr	r2, [pc, #352]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x6a0>)
 8006bd6:	6013      	str	r3, [r2, #0]

			old_error_angular_rate_pitch = pitch_ar_error;
 8006bd8:	4b44      	ldr	r3, [pc, #272]	@ (8006cec <HAL_I2C_MemRxCpltCallback+0x654>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a57      	ldr	r2, [pc, #348]	@ (8006d3c <HAL_I2C_MemRxCpltCallback+0x6a4>)
 8006bde:	6013      	str	r3, [r2, #0]
			old_error_angular_rate_rool = rool_ar_error;
 8006be0:	4b44      	ldr	r3, [pc, #272]	@ (8006cf4 <HAL_I2C_MemRxCpltCallback+0x65c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a56      	ldr	r2, [pc, #344]	@ (8006d40 <HAL_I2C_MemRxCpltCallback+0x6a8>)
 8006be6:	6013      	str	r3, [r2, #0]
			old_error_angular_rate_yaw = wanted_yaw - gz;
 8006be8:	4b56      	ldr	r3, [pc, #344]	@ (8006d44 <HAL_I2C_MemRxCpltCallback+0x6ac>)
 8006bea:	ed93 7a00 	vldr	s14, [r3]
 8006bee:	4b56      	ldr	r3, [pc, #344]	@ (8006d48 <HAL_I2C_MemRxCpltCallback+0x6b0>)
 8006bf0:	edd3 7a00 	vldr	s15, [r3]
 8006bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bf8:	4b54      	ldr	r3, [pc, #336]	@ (8006d4c <HAL_I2C_MemRxCpltCallback+0x6b4>)
 8006bfa:	edc3 7a00 	vstr	s15, [r3]


			MYDRON.ROOL 	= (pid_angular_rate_rool > 5000) ? ROOL_MAX_VAL(): (pid_angular_rate_rool < -5000) ? ROOL_MIN_VAL(): ROOL_GOOD_VAL();
 8006bfe:	4b49      	ldr	r3, [pc, #292]	@ (8006d24 <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006c00:	edd3 7a00 	vldr	s15, [r3]
 8006c04:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8006d50 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c10:	dd04      	ble.n	8006c1c <HAL_I2C_MemRxCpltCallback+0x584>
 8006c12:	f001 f881 	bl	8007d18 <ROOL_MAX_VAL>
 8006c16:	4603      	mov	r3, r0
 8006c18:	461a      	mov	r2, r3
 8006c1a:	e012      	b.n	8006c42 <HAL_I2C_MemRxCpltCallback+0x5aa>
 8006c1c:	4b41      	ldr	r3, [pc, #260]	@ (8006d24 <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006c1e:	edd3 7a00 	vldr	s15, [r3]
 8006c22:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006d54 <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c2e:	d504      	bpl.n	8006c3a <HAL_I2C_MemRxCpltCallback+0x5a2>
 8006c30:	f001 f882 	bl	8007d38 <ROOL_MIN_VAL>
 8006c34:	4603      	mov	r3, r0
 8006c36:	461a      	mov	r2, r3
 8006c38:	e003      	b.n	8006c42 <HAL_I2C_MemRxCpltCallback+0x5aa>
 8006c3a:	f001 f8cd 	bl	8007dd8 <ROOL_GOOD_VAL>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	461a      	mov	r2, r3
 8006c42:	4b24      	ldr	r3, [pc, #144]	@ (8006cd4 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006c44:	80da      	strh	r2, [r3, #6]
			MYDRON.PITCH 	= (pid_angular_rate_pitch > 5000) ? PITCH_MAX_VAL(): (pid_angular_rate_pitch < -5000) ? PITCH_MIN_VAL(): PITCH_GOOD_VAL();
 8006c46:	4b35      	ldr	r3, [pc, #212]	@ (8006d1c <HAL_I2C_MemRxCpltCallback+0x684>)
 8006c48:	edd3 7a00 	vldr	s15, [r3]
 8006c4c:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8006d50 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c58:	dd04      	ble.n	8006c64 <HAL_I2C_MemRxCpltCallback+0x5cc>
 8006c5a:	f001 f87d 	bl	8007d58 <PITCH_MAX_VAL>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	461a      	mov	r2, r3
 8006c62:	e012      	b.n	8006c8a <HAL_I2C_MemRxCpltCallback+0x5f2>
 8006c64:	4b2d      	ldr	r3, [pc, #180]	@ (8006d1c <HAL_I2C_MemRxCpltCallback+0x684>)
 8006c66:	edd3 7a00 	vldr	s15, [r3]
 8006c6a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8006d54 <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006c6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c76:	d504      	bpl.n	8006c82 <HAL_I2C_MemRxCpltCallback+0x5ea>
 8006c78:	f001 f87e 	bl	8007d78 <PITCH_MIN_VAL>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	461a      	mov	r2, r3
 8006c80:	e003      	b.n	8006c8a <HAL_I2C_MemRxCpltCallback+0x5f2>
 8006c82:	f001 f8c1 	bl	8007e08 <PITCH_GOOD_VAL>
 8006c86:	4603      	mov	r3, r0
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4b12      	ldr	r3, [pc, #72]	@ (8006cd4 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006c8c:	809a      	strh	r2, [r3, #4]
			MYDRON.YAW 		= (pid_angular_rate_yaw > 5000) ? YAW_MAX_VAL(): (pid_angular_rate_yaw < -5000) ? YAW_MIN_VAL(): YAW_GOOD_VAL();
 8006c8e:	4b27      	ldr	r3, [pc, #156]	@ (8006d2c <HAL_I2C_MemRxCpltCallback+0x694>)
 8006c90:	edd3 7a00 	vldr	s15, [r3]
 8006c94:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8006d50 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca0:	dd04      	ble.n	8006cac <HAL_I2C_MemRxCpltCallback+0x614>
 8006ca2:	f001 f879 	bl	8007d98 <YAW_MAX_VAL>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	461a      	mov	r2, r3
 8006caa:	e059      	b.n	8006d60 <HAL_I2C_MemRxCpltCallback+0x6c8>
 8006cac:	4b1f      	ldr	r3, [pc, #124]	@ (8006d2c <HAL_I2C_MemRxCpltCallback+0x694>)
 8006cae:	edd3 7a00 	vldr	s15, [r3]
 8006cb2:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006d54 <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cbe:	d54b      	bpl.n	8006d58 <HAL_I2C_MemRxCpltCallback+0x6c0>
 8006cc0:	f001 f87a 	bl	8007db8 <YAW_MIN_VAL>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	e04a      	b.n	8006d60 <HAL_I2C_MemRxCpltCallback+0x6c8>
 8006cca:	bf00      	nop
 8006ccc:	000040b4 	.word	0x000040b4
 8006cd0:	00004084 	.word	0x00004084
 8006cd4:	00000178 	.word	0x00000178
 8006cd8:	000040b8 	.word	0x000040b8
 8006cdc:	00004088 	.word	0x00004088
 8006ce0:	000040bc 	.word	0x000040bc
 8006ce4:	0000408c 	.word	0x0000408c
 8006ce8:	000040c0 	.word	0x000040c0
 8006cec:	00004090 	.word	0x00004090
 8006cf0:	000040c4 	.word	0x000040c4
 8006cf4:	00004094 	.word	0x00004094
 8006cf8:	000040c8 	.word	0x000040c8
 8006cfc:	00004098 	.word	0x00004098
 8006d00:	00004108 	.word	0x00004108
 8006d04:	000040cc 	.word	0x000040cc
 8006d08:	0000411c 	.word	0x0000411c
 8006d0c:	000040d4 	.word	0x000040d4
 8006d10:	00004130 	.word	0x00004130
 8006d14:	000040d0 	.word	0x000040d0
 8006d18:	00004168 	.word	0x00004168
 8006d1c:	000040d8 	.word	0x000040d8
 8006d20:	0000417c 	.word	0x0000417c
 8006d24:	000040e0 	.word	0x000040e0
 8006d28:	00004190 	.word	0x00004190
 8006d2c:	000040dc 	.word	0x000040dc
 8006d30:	0000409c 	.word	0x0000409c
 8006d34:	000040a0 	.word	0x000040a0
 8006d38:	000040a4 	.word	0x000040a4
 8006d3c:	000040a8 	.word	0x000040a8
 8006d40:	000040ac 	.word	0x000040ac
 8006d44:	00004070 	.word	0x00004070
 8006d48:	00000014 	.word	0x00000014
 8006d4c:	000040b0 	.word	0x000040b0
 8006d50:	459c4000 	.word	0x459c4000
 8006d54:	c59c4000 	.word	0xc59c4000
 8006d58:	f001 f86e 	bl	8007e38 <YAW_GOOD_VAL>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	461a      	mov	r2, r3
 8006d60:	4bc3      	ldr	r3, [pc, #780]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d62:	811a      	strh	r2, [r3, #8]
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 8006d64:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006d68:	f7fc fd06 	bl	8003778 <Thrust_filter>
			if(MYDRON.THRUST > thrust_limit){
 8006d6c:	4bc0      	ldr	r3, [pc, #768]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d6e:	885b      	ldrh	r3, [r3, #2]
 8006d70:	461a      	mov	r2, r3
 8006d72:	4bc0      	ldr	r3, [pc, #768]	@ (8007074 <HAL_I2C_MemRxCpltCallback+0x9dc>)
 8006d74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	dd05      	ble.n	8006d88 <HAL_I2C_MemRxCpltCallback+0x6f0>
				MYDRON.THRUST = thrust_limit;
 8006d7c:	4bbd      	ldr	r3, [pc, #756]	@ (8007074 <HAL_I2C_MemRxCpltCallback+0x9dc>)
 8006d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	4bba      	ldr	r3, [pc, #744]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d86:	805a      	strh	r2, [r3, #2]
			}


			Stack_Push(WartoscBezwgledna(PID_FAC_Pitch[4]));
 8006d88:	4bbb      	ldr	r3, [pc, #748]	@ (8007078 <HAL_I2C_MemRxCpltCallback+0x9e0>)
 8006d8a:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d92:	f000 fbcb 	bl	800752c <WartoscBezwgledna>
 8006d96:	eef0 7a40 	vmov.f32	s15, s0
 8006d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d9e:	f000 ff6f 	bl	8007c80 <Stack_Push>
			Stack_Push(WartoscBezwgledna(PID_FAC_Rool[4]));
 8006da2:	4bb6      	ldr	r3, [pc, #728]	@ (800707c <HAL_I2C_MemRxCpltCallback+0x9e4>)
 8006da4:	edd3 7a04 	vldr	s15, [r3, #16]
 8006da8:	eeb0 0a67 	vmov.f32	s0, s15
 8006dac:	f000 fbbe 	bl	800752c <WartoscBezwgledna>
 8006db0:	eef0 7a40 	vmov.f32	s15, s0
 8006db4:	eeb0 0a67 	vmov.f32	s0, s15
 8006db8:	f000 ff62 	bl	8007c80 <Stack_Push>
			Stack_Push(now_pitch);
 8006dbc:	4bb0      	ldr	r3, [pc, #704]	@ (8007080 <HAL_I2C_MemRxCpltCallback+0x9e8>)
 8006dbe:	edd3 7a00 	vldr	s15, [r3]
 8006dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8006dc6:	f000 ff5b 	bl	8007c80 <Stack_Push>
			Stack_Push(now_rool);
 8006dca:	4bae      	ldr	r3, [pc, #696]	@ (8007084 <HAL_I2C_MemRxCpltCallback+0x9ec>)
 8006dcc:	edd3 7a00 	vldr	s15, [r3]
 8006dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8006dd4:	f000 ff54 	bl	8007c80 <Stack_Push>


			SPEED1 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//trust 7000 max
 8006dd8:	4ba5      	ldr	r3, [pc, #660]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006dda:	885b      	ldrh	r3, [r3, #2]
 8006ddc:	ee07 3a90 	vmov	s15, r3
 8006de0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006de4:	ed9f 6b9c 	vldr	d6, [pc, #624]	@ 8007058 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006de8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006dec:	4ba0      	ldr	r3, [pc, #640]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006dee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dfa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006dfe:	4b9c      	ldr	r3, [pc, #624]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e04:	ee07 3a90 	vmov	s15, r3
 8006e08:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e10:	4b97      	ldr	r3, [pc, #604]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e1e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006e22:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 8007060 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006e26:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e2a:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 8007068 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006e2e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e32:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e36:	ee17 2a90 	vmov	r2, s15
 8006e3a:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d832      	bhi.n	8006ea8 <HAL_I2C_MemRxCpltCallback+0x810>
 8006e42:	4b8b      	ldr	r3, [pc, #556]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e44:	885b      	ldrh	r3, [r3, #2]
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e4e:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 8007058 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006e52:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e56:	4b86      	ldr	r3, [pc, #536]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e58:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006e5c:	ee07 3a90 	vmov	s15, r3
 8006e60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e64:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006e68:	4b81      	ldr	r3, [pc, #516]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e76:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e7a:	4b7d      	ldr	r3, [pc, #500]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e80:	ee07 3a90 	vmov	s15, r3
 8006e84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006e8c:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8007060 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006e90:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e94:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8007068 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006e98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e9c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006ea0:	ee17 3a90 	vmov	r3, s15
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	e001      	b.n	8006eac <HAL_I2C_MemRxCpltCallback+0x814>
 8006ea8:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006eac:	4a76      	ldr	r2, [pc, #472]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9f0>)
 8006eae:	8013      	strh	r3, [r2, #0]
			SPEED2 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006eb0:	4b6f      	ldr	r3, [pc, #444]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006eb2:	885b      	ldrh	r3, [r3, #2]
 8006eb4:	ee07 3a90 	vmov	s15, r3
 8006eb8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ebc:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007058 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006ec0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006ec4:	4b6a      	ldr	r3, [pc, #424]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006ec6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ed2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ed6:	4b66      	ldr	r3, [pc, #408]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006ed8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006edc:	ee07 3a90 	vmov	s15, r3
 8006ee0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ee4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ee8:	4b61      	ldr	r3, [pc, #388]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006eea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ef6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006efa:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8007060 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006efe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f02:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8007068 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006f06:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f0a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006f0e:	ee17 2a90 	vmov	r2, s15
 8006f12:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d832      	bhi.n	8006f80 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006f1a:	4b55      	ldr	r3, [pc, #340]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f1c:	885b      	ldrh	r3, [r3, #2]
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f26:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 8007058 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006f2a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f2e:	4b50      	ldr	r3, [pc, #320]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f30:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006f34:	ee07 3a90 	vmov	s15, r3
 8006f38:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f3c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006f40:	4b4b      	ldr	r3, [pc, #300]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006f52:	4b47      	ldr	r3, [pc, #284]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f58:	ee07 3a90 	vmov	s15, r3
 8006f5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f60:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006f64:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8007060 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006f68:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f6c:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8007068 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006f70:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006f78:	ee17 3a90 	vmov	r3, s15
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	e001      	b.n	8006f84 <HAL_I2C_MemRxCpltCallback+0x8ec>
 8006f80:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006f84:	4a41      	ldr	r2, [pc, #260]	@ (800708c <HAL_I2C_MemRxCpltCallback+0x9f4>)
 8006f86:	8013      	strh	r3, [r2, #0]
			SPEED3 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006f88:	4b39      	ldr	r3, [pc, #228]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f8a:	885b      	ldrh	r3, [r3, #2]
 8006f8c:	ee07 3a90 	vmov	s15, r3
 8006f90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f94:	ed9f 6b30 	vldr	d6, [pc, #192]	@ 8007058 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006f98:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f9c:	4b34      	ldr	r3, [pc, #208]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f9e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006faa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006fae:	4b30      	ldr	r3, [pc, #192]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006fb0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006fb4:	ee07 3a90 	vmov	s15, r3
 8006fb8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fbc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006fc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006fc6:	ee07 3a90 	vmov	s15, r3
 8006fca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fce:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006fd2:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8007060 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006fd6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006fda:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8007068 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006fde:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006fe2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006fe6:	ee17 2a90 	vmov	r2, s15
 8006fea:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d84e      	bhi.n	8007090 <HAL_I2C_MemRxCpltCallback+0x9f8>
 8006ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006ff4:	885b      	ldrh	r3, [r3, #2]
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ffe:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8007058 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8007002:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007006:	4b1a      	ldr	r3, [pc, #104]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8007008:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800700c:	ee07 3a90 	vmov	s15, r3
 8007010:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007014:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007018:	4b15      	ldr	r3, [pc, #84]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 800701a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007026:	ee36 6b07 	vadd.f64	d6, d6, d7
 800702a:	4b11      	ldr	r3, [pc, #68]	@ (8007070 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 800702c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007038:	ee36 7b47 	vsub.f64	d7, d6, d7
 800703c:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8007060 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8007040:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007044:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8007068 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8007048:	ee37 7b06 	vadd.f64	d7, d7, d6
 800704c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007050:	ee17 3a90 	vmov	r3, s15
 8007054:	b29b      	uxth	r3, r3
 8007056:	e01d      	b.n	8007094 <HAL_I2C_MemRxCpltCallback+0x9fc>
 8007058:	66666666 	.word	0x66666666
 800705c:	3fe66666 	.word	0x3fe66666
 8007060:	00000000 	.word	0x00000000
 8007064:	40c48200 	.word	0x40c48200
 8007068:	00000000 	.word	0x00000000
 800706c:	407f4000 	.word	0x407f4000
 8007070:	00000178 	.word	0x00000178
 8007074:	0000405e 	.word	0x0000405e
 8007078:	00004108 	.word	0x00004108
 800707c:	0000411c 	.word	0x0000411c
 8007080:	00004078 	.word	0x00004078
 8007084:	0000407c 	.word	0x0000407c
 8007088:	000041a4 	.word	0x000041a4
 800708c:	000041a6 	.word	0x000041a6
 8007090:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8007094:	4a9a      	ldr	r2, [pc, #616]	@ (8007300 <HAL_I2C_MemRxCpltCallback+0xc68>)
 8007096:	8013      	strh	r3, [r2, #0]
			SPEED4 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//
 8007098:	4b9a      	ldr	r3, [pc, #616]	@ (8007304 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 800709a:	885b      	ldrh	r3, [r3, #2]
 800709c:	ee07 3a90 	vmov	s15, r3
 80070a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070a4:	ed9f 6b8a 	vldr	d6, [pc, #552]	@ 80072d0 <HAL_I2C_MemRxCpltCallback+0xc38>
 80070a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80070ac:	4b95      	ldr	r3, [pc, #596]	@ (8007304 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 80070ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070ba:	ee36 6b47 	vsub.f64	d6, d6, d7
 80070be:	4b91      	ldr	r3, [pc, #580]	@ (8007304 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 80070c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80070c4:	ee07 3a90 	vmov	s15, r3
 80070c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070cc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80070d0:	4b8c      	ldr	r3, [pc, #560]	@ (8007304 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 80070d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070de:	ee36 7b07 	vadd.f64	d7, d6, d7
 80070e2:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 80072d8 <HAL_I2C_MemRxCpltCallback+0xc40>
 80070e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80070ea:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 80072e0 <HAL_I2C_MemRxCpltCallback+0xc48>
 80070ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80070f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80070f6:	ee17 2a90 	vmov	r2, s15
 80070fa:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 80070fe:	429a      	cmp	r2, r3
 8007100:	d832      	bhi.n	8007168 <HAL_I2C_MemRxCpltCallback+0xad0>
 8007102:	4b80      	ldr	r3, [pc, #512]	@ (8007304 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8007104:	885b      	ldrh	r3, [r3, #2]
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800710e:	ed9f 6b70 	vldr	d6, [pc, #448]	@ 80072d0 <HAL_I2C_MemRxCpltCallback+0xc38>
 8007112:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007116:	4b7b      	ldr	r3, [pc, #492]	@ (8007304 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8007118:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800711c:	ee07 3a90 	vmov	s15, r3
 8007120:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007124:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007128:	4b76      	ldr	r3, [pc, #472]	@ (8007304 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 800712a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007136:	ee36 6b07 	vadd.f64	d6, d6, d7
 800713a:	4b72      	ldr	r3, [pc, #456]	@ (8007304 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 800713c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007140:	ee07 3a90 	vmov	s15, r3
 8007144:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007148:	ee36 7b07 	vadd.f64	d7, d6, d7
 800714c:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 80072d8 <HAL_I2C_MemRxCpltCallback+0xc40>
 8007150:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007154:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 80072e0 <HAL_I2C_MemRxCpltCallback+0xc48>
 8007158:	ee37 7b06 	vadd.f64	d7, d7, d6
 800715c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007160:	ee17 3a90 	vmov	r3, s15
 8007164:	b29b      	uxth	r3, r3
 8007166:	e001      	b.n	800716c <HAL_I2C_MemRxCpltCallback+0xad4>
 8007168:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 800716c:	4a66      	ldr	r2, [pc, #408]	@ (8007308 <HAL_I2C_MemRxCpltCallback+0xc70>)
 800716e:	8013      	strh	r3, [r2, #0]

			if(SPEED1 != OLD_SPEED1){
 8007170:	4b66      	ldr	r3, [pc, #408]	@ (800730c <HAL_I2C_MemRxCpltCallback+0xc74>)
 8007172:	881a      	ldrh	r2, [r3, #0]
 8007174:	4b66      	ldr	r3, [pc, #408]	@ (8007310 <HAL_I2C_MemRxCpltCallback+0xc78>)
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	429a      	cmp	r2, r3
 800717a:	d004      	beq.n	8007186 <HAL_I2C_MemRxCpltCallback+0xaee>
				ESC_1_SPEED(SPEED1);
 800717c:	4b63      	ldr	r3, [pc, #396]	@ (800730c <HAL_I2C_MemRxCpltCallback+0xc74>)
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	4618      	mov	r0, r3
 8007182:	f7f9 fe57 	bl	8000e34 <ESC_1_SPEED>
			}
			if(SPEED2 != OLD_SPEED2){
 8007186:	4b63      	ldr	r3, [pc, #396]	@ (8007314 <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8007188:	881a      	ldrh	r2, [r3, #0]
 800718a:	4b63      	ldr	r3, [pc, #396]	@ (8007318 <HAL_I2C_MemRxCpltCallback+0xc80>)
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	429a      	cmp	r2, r3
 8007190:	d004      	beq.n	800719c <HAL_I2C_MemRxCpltCallback+0xb04>
				ESC_2_SPEED(SPEED2);
 8007192:	4b60      	ldr	r3, [pc, #384]	@ (8007314 <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	4618      	mov	r0, r3
 8007198:	f7f9 fe6e 	bl	8000e78 <ESC_2_SPEED>
			}
			if(SPEED3 != OLD_SPEED3){
 800719c:	4b58      	ldr	r3, [pc, #352]	@ (8007300 <HAL_I2C_MemRxCpltCallback+0xc68>)
 800719e:	881a      	ldrh	r2, [r3, #0]
 80071a0:	4b5e      	ldr	r3, [pc, #376]	@ (800731c <HAL_I2C_MemRxCpltCallback+0xc84>)
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d004      	beq.n	80071b2 <HAL_I2C_MemRxCpltCallback+0xb1a>
				ESC_3_SPEED(SPEED3);
 80071a8:	4b55      	ldr	r3, [pc, #340]	@ (8007300 <HAL_I2C_MemRxCpltCallback+0xc68>)
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7f9 fe85 	bl	8000ebc <ESC_3_SPEED>
			}
			if(SPEED4 != OLD_SPEED4){
 80071b2:	4b55      	ldr	r3, [pc, #340]	@ (8007308 <HAL_I2C_MemRxCpltCallback+0xc70>)
 80071b4:	881a      	ldrh	r2, [r3, #0]
 80071b6:	4b5a      	ldr	r3, [pc, #360]	@ (8007320 <HAL_I2C_MemRxCpltCallback+0xc88>)
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d004      	beq.n	80071c8 <HAL_I2C_MemRxCpltCallback+0xb30>
				ESC_4_SPEED(SPEED4);
 80071be:	4b52      	ldr	r3, [pc, #328]	@ (8007308 <HAL_I2C_MemRxCpltCallback+0xc70>)
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7f9 fe9c 	bl	8000f00 <ESC_4_SPEED>
			}

			OLD_SPEED1 = SPEED1;
 80071c8:	4b50      	ldr	r3, [pc, #320]	@ (800730c <HAL_I2C_MemRxCpltCallback+0xc74>)
 80071ca:	881a      	ldrh	r2, [r3, #0]
 80071cc:	4b50      	ldr	r3, [pc, #320]	@ (8007310 <HAL_I2C_MemRxCpltCallback+0xc78>)
 80071ce:	801a      	strh	r2, [r3, #0]
			OLD_SPEED2 = SPEED2;
 80071d0:	4b50      	ldr	r3, [pc, #320]	@ (8007314 <HAL_I2C_MemRxCpltCallback+0xc7c>)
 80071d2:	881a      	ldrh	r2, [r3, #0]
 80071d4:	4b50      	ldr	r3, [pc, #320]	@ (8007318 <HAL_I2C_MemRxCpltCallback+0xc80>)
 80071d6:	801a      	strh	r2, [r3, #0]
			OLD_SPEED3 = SPEED3;
 80071d8:	4b49      	ldr	r3, [pc, #292]	@ (8007300 <HAL_I2C_MemRxCpltCallback+0xc68>)
 80071da:	881a      	ldrh	r2, [r3, #0]
 80071dc:	4b4f      	ldr	r3, [pc, #316]	@ (800731c <HAL_I2C_MemRxCpltCallback+0xc84>)
 80071de:	801a      	strh	r2, [r3, #0]
			OLD_SPEED4 = SPEED4;
 80071e0:	4b49      	ldr	r3, [pc, #292]	@ (8007308 <HAL_I2C_MemRxCpltCallback+0xc70>)
 80071e2:	881a      	ldrh	r2, [r3, #0]
 80071e4:	4b4e      	ldr	r3, [pc, #312]	@ (8007320 <HAL_I2C_MemRxCpltCallback+0xc88>)
 80071e6:	801a      	strh	r2, [r3, #0]

			LED_G_0;
 80071e8:	2200      	movs	r2, #0
 80071ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80071ee:	484d      	ldr	r0, [pc, #308]	@ (8007324 <HAL_I2C_MemRxCpltCallback+0xc8c>)
 80071f0:	f007 fb0c 	bl	800e80c <HAL_GPIO_WritePin>
	}
	if(HMC583L_IRQ == 1){
 80071f4:	4b4c      	ldr	r3, [pc, #304]	@ (8007328 <HAL_I2C_MemRxCpltCallback+0xc90>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d132      	bne.n	8007262 <HAL_I2C_MemRxCpltCallback+0xbca>
		HMC583L_IRQ = 0;
 80071fc:	4b4a      	ldr	r3, [pc, #296]	@ (8007328 <HAL_I2C_MemRxCpltCallback+0xc90>)
 80071fe:	2200      	movs	r2, #0
 8007200:	701a      	strb	r2, [r3, #0]
		Mag_Z = (float)(HMC5883L_Get_Z_End_IT() - Mag_Offset_val);
 8007202:	f7f9 ff81 	bl	8001108 <HMC5883L_Get_Z_End_IT>
 8007206:	4603      	mov	r3, r0
 8007208:	461a      	mov	r2, r3
 800720a:	4b48      	ldr	r3, [pc, #288]	@ (800732c <HAL_I2C_MemRxCpltCallback+0xc94>)
 800720c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800721a:	4b45      	ldr	r3, [pc, #276]	@ (8007330 <HAL_I2C_MemRxCpltCallback+0xc98>)
 800721c:	edc3 7a00 	vstr	s15, [r3]
		Mag_Z = (Mag_Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (Old_Mag_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 8007220:	4b43      	ldr	r3, [pc, #268]	@ (8007330 <HAL_I2C_MemRxCpltCallback+0xc98>)
 8007222:	edd3 7a00 	vldr	s15, [r3]
 8007226:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800722a:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 80072e8 <HAL_I2C_MemRxCpltCallback+0xc50>
 800722e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007232:	ed9f 5b2f 	vldr	d5, [pc, #188]	@ 80072f0 <HAL_I2C_MemRxCpltCallback+0xc58>
 8007236:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800723a:	4b3e      	ldr	r3, [pc, #248]	@ (8007334 <HAL_I2C_MemRxCpltCallback+0xc9c>)
 800723c:	edd3 7a00 	vldr	s15, [r3]
 8007240:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007244:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 80072f8 <HAL_I2C_MemRxCpltCallback+0xc60>
 8007248:	ee27 7b05 	vmul.f64	d7, d7, d5
 800724c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007250:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007254:	4b36      	ldr	r3, [pc, #216]	@ (8007330 <HAL_I2C_MemRxCpltCallback+0xc98>)
 8007256:	edc3 7a00 	vstr	s15, [r3]
		Old_Mag_Z = Mag_Z;
 800725a:	4b35      	ldr	r3, [pc, #212]	@ (8007330 <HAL_I2C_MemRxCpltCallback+0xc98>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a35      	ldr	r2, [pc, #212]	@ (8007334 <HAL_I2C_MemRxCpltCallback+0xc9c>)
 8007260:	6013      	str	r3, [r2, #0]
	}
	if(BMP180_IRQ == 1){
 8007262:	4b35      	ldr	r3, [pc, #212]	@ (8007338 <HAL_I2C_MemRxCpltCallback+0xca0>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d113      	bne.n	8007292 <HAL_I2C_MemRxCpltCallback+0xbfa>
		temperature = BMP180_GET_temp_IT();
 800726a:	f7f9 fa91 	bl	8000790 <BMP180_GET_temp_IT>
 800726e:	4603      	mov	r3, r0
 8007270:	461a      	mov	r2, r3
 8007272:	4b32      	ldr	r3, [pc, #200]	@ (800733c <HAL_I2C_MemRxCpltCallback+0xca4>)
 8007274:	601a      	str	r2, [r3, #0]
		temp = BMP180_GET_temp(temperature);
 8007276:	4b31      	ldr	r3, [pc, #196]	@ (800733c <HAL_I2C_MemRxCpltCallback+0xca4>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	4618      	mov	r0, r3
 800727e:	f7f9 fbab 	bl	80009d8 <BMP180_GET_temp>
 8007282:	eef0 7a40 	vmov.f32	s15, s0
 8007286:	4b2e      	ldr	r3, [pc, #184]	@ (8007340 <HAL_I2C_MemRxCpltCallback+0xca8>)
 8007288:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 800728c:	4b2a      	ldr	r3, [pc, #168]	@ (8007338 <HAL_I2C_MemRxCpltCallback+0xca0>)
 800728e:	2200      	movs	r2, #0
 8007290:	701a      	strb	r2, [r3, #0]
	}
	if(BMP180_IRQ == 2){
 8007292:	4b29      	ldr	r3, [pc, #164]	@ (8007338 <HAL_I2C_MemRxCpltCallback+0xca0>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	2b02      	cmp	r3, #2
 8007298:	d113      	bne.n	80072c2 <HAL_I2C_MemRxCpltCallback+0xc2a>
		pressure = BMP180_GET_pres_IT();
 800729a:	f7f9 fa8f 	bl	80007bc <BMP180_GET_pres_IT>
 800729e:	4603      	mov	r3, r0
 80072a0:	461a      	mov	r2, r3
 80072a2:	4b28      	ldr	r3, [pc, #160]	@ (8007344 <HAL_I2C_MemRxCpltCallback+0xcac>)
 80072a4:	601a      	str	r2, [r3, #0]
		pres = BMP180_GET_pres(pressure);
 80072a6:	4b27      	ldr	r3, [pc, #156]	@ (8007344 <HAL_I2C_MemRxCpltCallback+0xcac>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7f9 fbef 	bl	8000a90 <BMP180_GET_pres>
 80072b2:	eef0 7a40 	vmov.f32	s15, s0
 80072b6:	4b24      	ldr	r3, [pc, #144]	@ (8007348 <HAL_I2C_MemRxCpltCallback+0xcb0>)
 80072b8:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 80072bc:	4b1e      	ldr	r3, [pc, #120]	@ (8007338 <HAL_I2C_MemRxCpltCallback+0xca0>)
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]
	}
}
 80072c2:	bf00      	nop
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	f3af 8000 	nop.w
 80072d0:	66666666 	.word	0x66666666
 80072d4:	3fe66666 	.word	0x3fe66666
 80072d8:	00000000 	.word	0x00000000
 80072dc:	40c48200 	.word	0x40c48200
 80072e0:	00000000 	.word	0x00000000
 80072e4:	407f4000 	.word	0x407f4000
 80072e8:	9999999a 	.word	0x9999999a
 80072ec:	3fc99999 	.word	0x3fc99999
 80072f0:	33333333 	.word	0x33333333
 80072f4:	3ff33333 	.word	0x3ff33333
 80072f8:	aaaaaaab 	.word	0xaaaaaaab
 80072fc:	3feaaaaa 	.word	0x3feaaaaa
 8007300:	000041a8 	.word	0x000041a8
 8007304:	00000178 	.word	0x00000178
 8007308:	000041aa 	.word	0x000041aa
 800730c:	000041a4 	.word	0x000041a4
 8007310:	000041ac 	.word	0x000041ac
 8007314:	000041a6 	.word	0x000041a6
 8007318:	000041ae 	.word	0x000041ae
 800731c:	000041b0 	.word	0x000041b0
 8007320:	000041b2 	.word	0x000041b2
 8007324:	58021000 	.word	0x58021000
 8007328:	000041ed 	.word	0x000041ed
 800732c:	00000060 	.word	0x00000060
 8007330:	00000058 	.word	0x00000058
 8007334:	0000005c 	.word	0x0000005c
 8007338:	000041ee 	.word	0x000041ee
 800733c:	000000b8 	.word	0x000000b8
 8007340:	000000dc 	.word	0x000000dc
 8007344:	000000bc 	.word	0x000000bc
 8007348:	000000e0 	.word	0x000000e0

0800734c <convert_array_to_value>:


void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 800734c:	b580      	push	{r7, lr}
 800734e:	ed2d 8b04 	vpush	{d8-d9}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	4611      	mov	r1, r2
 800735c:	461a      	mov	r2, r3
 800735e:	460b      	mov	r3, r1
 8007360:	71fb      	strb	r3, [r7, #7]
 8007362:	4613      	mov	r3, r2
 8007364:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2200      	movs	r2, #0
 800736a:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 800736c:	79ba      	ldrb	r2, [r7, #6]
 800736e:	79fb      	ldrb	r3, [r7, #7]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 8007374:	2300      	movs	r3, #0
 8007376:	617b      	str	r3, [r7, #20]
 8007378:	e02e      	b.n	80073d8 <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007380:	ee07 3a90 	vmov	s15, r3
 8007384:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8007388:	79fa      	ldrb	r2, [r7, #7]
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	4413      	add	r3, r2
 800738e:	461a      	mov	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4413      	add	r3, r2
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	ee07 3a90 	vmov	s15, r3
 800739a:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	ee07 3a90 	vmov	s15, r3
 80073a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80073ac:	eeb0 1b47 	vmov.f64	d1, d7
 80073b0:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80073b4:	f017 f844 	bl	801e440 <pow>
 80073b8:	eeb0 7b40 	vmov.f64	d7, d0
 80073bc:	ee29 7b07 	vmul.f64	d7, d9, d7
 80073c0:	ee38 7b07 	vadd.f64	d7, d8, d7
 80073c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80073c8:	ee17 3a90 	vmov	r3, s15
 80073cc:	b21a      	sxth	r2, r3
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	3301      	adds	r3, #1
 80073d6:	617b      	str	r3, [r7, #20]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	429a      	cmp	r2, r3
 80073de:	dacc      	bge.n	800737a <convert_array_to_value+0x2e>
	}

}
 80073e0:	bf00      	nop
 80073e2:	bf00      	nop
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	ecbd 8b04 	vpop	{d8-d9}
 80073ec:	bd80      	pop	{r7, pc}

080073ee <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80073ee:	b590      	push	{r4, r7, lr}
 80073f0:	b087      	sub	sp, #28
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6039      	str	r1, [r7, #0]
 80073f6:	4611      	mov	r1, r2
 80073f8:	461a      	mov	r2, r3
 80073fa:	4603      	mov	r3, r0
 80073fc:	80fb      	strh	r3, [r7, #6]
 80073fe:	460b      	mov	r3, r1
 8007400:	717b      	strb	r3, [r7, #5]
 8007402:	4613      	mov	r3, r2
 8007404:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8007406:	2300      	movs	r3, #0
 8007408:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 800740a:	2300      	movs	r3, #0
 800740c:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 800740e:	793a      	ldrb	r2, [r7, #4]
 8007410:	797b      	ldrb	r3, [r7, #5]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	e03e      	b.n	800749a <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 800741c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d028      	beq.n	8007476 <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	4619      	mov	r1, r3
 800742c:	200a      	movs	r0, #10
 800742e:	f000 f83d 	bl	80074ac <potenga>
 8007432:	4603      	mov	r3, r0
 8007434:	b29b      	uxth	r3, r3
 8007436:	88fa      	ldrh	r2, [r7, #6]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	b29b      	uxth	r3, r3
 800743c:	80fb      	strh	r3, [r7, #6]
			x++;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	3301      	adds	r3, #1
 8007442:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 8007444:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007456:	eeb0 1b47 	vmov.f64	d1, d7
 800745a:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800745e:	f016 ffef 	bl	801e440 <pow>
 8007462:	eeb0 7b40 	vmov.f64	d7, d0
 8007466:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800746a:	ee17 3a90 	vmov	r3, s15
 800746e:	b29b      	uxth	r3, r3
 8007470:	429c      	cmp	r4, r3
 8007472:	dad3      	bge.n	800741c <convert_value_to_array+0x2e>
 8007474:	e000      	b.n	8007478 <convert_value_to_array+0x8a>
				break;
 8007476:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 8007478:	797a      	ldrb	r2, [r7, #5]
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	4413      	add	r3, r2
 800747e:	461a      	mov	r2, r3
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	4413      	add	r3, r2
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]
		loopnum++;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	3301      	adds	r3, #1
 800748e:	613b      	str	r3, [r7, #16]
		x = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3301      	adds	r3, #1
 8007498:	60fb      	str	r3, [r7, #12]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	429a      	cmp	r2, r3
 80074a0:	dad0      	bge.n	8007444 <convert_value_to_array+0x56>
	}
}
 80074a2:	bf00      	nop
 80074a4:	bf00      	nop
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd90      	pop	{r4, r7, pc}

080074ac <potenga>:
uint32_t potenga(int a, int b){
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <potenga+0x18>
		return 1;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e02d      	b.n	8007520 <potenga+0x74>
	}
	if(b == 1){
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d101      	bne.n	80074ce <potenga+0x22>
		return a;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	e028      	b.n	8007520 <potenga+0x74>
	}
	if(b > 1){
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	dd10      	ble.n	80074f6 <potenga+0x4a>
			for(int i = 1; i < b; i++){
 80074d4:	2301      	movs	r3, #1
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	e007      	b.n	80074ea <potenga+0x3e>
			a = a*c;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	fb02 f303 	mul.w	r3, r2, r3
 80074e2:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	3301      	adds	r3, #1
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	dbf3      	blt.n	80074da <potenga+0x2e>
		}
		return a;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	e014      	b.n	8007520 <potenga+0x74>
	}
	if(b < 0){
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	da10      	bge.n	800751e <potenga+0x72>
		for(int i = 0; i < b; i++){
 80074fc:	2300      	movs	r3, #0
 80074fe:	613b      	str	r3, [r7, #16]
 8007500:	e007      	b.n	8007512 <potenga+0x66>
			a = a/c;
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	fb92 f3f3 	sdiv	r3, r2, r3
 800750a:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	3301      	adds	r3, #1
 8007510:	613b      	str	r3, [r7, #16]
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	429a      	cmp	r2, r3
 8007518:	dbf3      	blt.n	8007502 <potenga+0x56>
		}
		return a;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	e000      	b.n	8007520 <potenga+0x74>
	}
	return a;
 800751e:	687b      	ldr	r3, [r7, #4]
}
 8007520:	4618      	mov	r0, r3
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <WartoscBezwgledna>:
float WartoscBezwgledna(float a){
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	ed87 0a01 	vstr	s0, [r7, #4]
	a = (a < 0) ? a*(-1) : a;
 8007536:	edd7 7a01 	vldr	s15, [r7, #4]
 800753a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800753e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007542:	d504      	bpl.n	800754e <WartoscBezwgledna+0x22>
 8007544:	edd7 7a01 	vldr	s15, [r7, #4]
 8007548:	eef1 7a67 	vneg.f32	s15, s15
 800754c:	e001      	b.n	8007552 <WartoscBezwgledna+0x26>
 800754e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007552:	edc7 7a01 	vstr	s15, [r7, #4]
	return a;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	ee07 3a90 	vmov	s15, r3
}
 800755c:	eeb0 0a67 	vmov.f32	s0, s15
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
	...

0800756c <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	71fb      	strb	r3, [r7, #7]
 8007576:	460b      	mov	r3, r1
 8007578:	71bb      	strb	r3, [r7, #6]
 800757a:	4613      	mov	r3, r2
 800757c:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 800757e:	4b09      	ldr	r3, [pc, #36]	@ (80075a4 <RGB_LED_Set_color+0x38>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	797a      	ldrb	r2, [r7, #5]
 8007584:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 8007586:	4b07      	ldr	r3, [pc, #28]	@ (80075a4 <RGB_LED_Set_color+0x38>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	79fa      	ldrb	r2, [r7, #7]
 800758c:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 800758e:	4b05      	ldr	r3, [pc, #20]	@ (80075a4 <RGB_LED_Set_color+0x38>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	79ba      	ldrb	r2, [r7, #6]
 8007594:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	24000380 	.word	0x24000380

080075a8 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4603      	mov	r3, r0
 80075b0:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	ee07 3a90 	vmov	s15, r3
 80075b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80075c0:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8007610 <RGB_LED_For_BAT+0x68>
 80075c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075c8:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8007618 <RGB_LED_For_BAT+0x70>
 80075cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80075d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80075d4:	edc7 7a00 	vstr	s15, [r7]
 80075d8:	783b      	ldrb	r3, [r7, #0]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	79fa      	ldrb	r2, [r7, #7]
 80075de:	ee07 2a90 	vmov	s15, r2
 80075e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80075ea:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8007610 <RGB_LED_For_BAT+0x68>
 80075ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80075f6:	edc7 7a00 	vstr	s15, [r7]
 80075fa:	783a      	ldrb	r2, [r7, #0]
 80075fc:	b2d1      	uxtb	r1, r2
 80075fe:	2200      	movs	r2, #0
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff ffb3 	bl	800756c <RGB_LED_Set_color>
}
 8007606:	bf00      	nop
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	66666666 	.word	0x66666666
 8007614:	40046666 	.word	0x40046666
 8007618:	00000000 	.word	0x00000000
 800761c:	406fe000 	.word	0x406fe000

08007620 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007620:	b590      	push	{r4, r7, lr}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
 8007626:	6039      	str	r1, [r7, #0]
 8007628:	4611      	mov	r1, r2
 800762a:	461a      	mov	r2, r3
 800762c:	4603      	mov	r3, r0
 800762e:	80fb      	strh	r3, [r7, #6]
 8007630:	460b      	mov	r3, r1
 8007632:	717b      	strb	r3, [r7, #5]
 8007634:	4613      	mov	r3, r2
 8007636:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 800763c:	2300      	movs	r3, #0
 800763e:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8007640:	793a      	ldrb	r2, [r7, #4]
 8007642:	797b      	ldrb	r3, [r7, #5]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 8007648:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800764c:	2b00      	cmp	r3, #0
 800764e:	da04      	bge.n	800765a <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 8007650:	797b      	ldrb	r3, [r7, #5]
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	4413      	add	r3, r2
 8007656:	222d      	movs	r2, #45	@ 0x2d
 8007658:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 800765a:	2301      	movs	r3, #1
 800765c:	60fb      	str	r3, [r7, #12]
 800765e:	e035      	b.n	80076cc <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 8007660:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d01d      	beq.n	80076a4 <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	4619      	mov	r1, r3
 8007670:	200a      	movs	r0, #10
 8007672:	f7ff ff1b 	bl	80074ac <potenga>
 8007676:	4603      	mov	r3, r0
 8007678:	b29b      	uxth	r3, r3
 800767a:	88fa      	ldrh	r2, [r7, #6]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	b29b      	uxth	r3, r3
 8007680:	80fb      	strh	r3, [r7, #6]
			x++;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	3301      	adds	r3, #1
 8007686:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 8007688:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	4619      	mov	r1, r3
 8007694:	200a      	movs	r0, #10
 8007696:	f7ff ff09 	bl	80074ac <potenga>
 800769a:	4603      	mov	r3, r0
 800769c:	b29b      	uxth	r3, r3
 800769e:	429c      	cmp	r4, r3
 80076a0:	dade      	bge.n	8007660 <convert_value_to_array2+0x40>
 80076a2:	e000      	b.n	80076a6 <convert_value_to_array2+0x86>
				break;
 80076a4:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	7979      	ldrb	r1, [r7, #5]
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	440b      	add	r3, r1
 80076b0:	4619      	mov	r1, r3
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	440b      	add	r3, r1
 80076b6:	3230      	adds	r2, #48	@ 0x30
 80076b8:	b2d2      	uxtb	r2, r2
 80076ba:	701a      	strb	r2, [r3, #0]
		loopnum++;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	3301      	adds	r3, #1
 80076c0:	613b      	str	r3, [r7, #16]
		x = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3301      	adds	r3, #1
 80076ca:	60fb      	str	r3, [r7, #12]
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	dad9      	bge.n	8007688 <convert_value_to_array2+0x68>
	}
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop
 80076d8:	371c      	adds	r7, #28
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd90      	pop	{r4, r7, pc}

080076de <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80076de:	b580      	push	{r7, lr}
 80076e0:	ed2d 8b02 	vpush	{d8}
 80076e4:	b08c      	sub	sp, #48	@ 0x30
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	ed87 0a03 	vstr	s0, [r7, #12]
 80076ec:	60b8      	str	r0, [r7, #8]
 80076ee:	460b      	mov	r3, r1
 80076f0:	71fb      	strb	r3, [r7, #7]
 80076f2:	4613      	mov	r3, r2
 80076f4:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 80076f6:	2300      	movs	r3, #0
 80076f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 80076fe:	79ba      	ldrb	r2, [r7, #6]
 8007700:	79fb      	ldrb	r3, [r7, #7]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 800770a:	edd7 7a03 	vldr	s15, [r7, #12]
 800770e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007716:	d50a      	bpl.n	800772e <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 8007718:	79fb      	ldrb	r3, [r7, #7]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	4413      	add	r3, r2
 800771e:	222d      	movs	r2, #45	@ 0x2d
 8007720:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 8007722:	edd7 7a03 	vldr	s15, [r7, #12]
 8007726:	eef1 7a67 	vneg.f32	s15, s15
 800772a:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 800772e:	2301      	movs	r3, #1
 8007730:	61fb      	str	r3, [r7, #28]
 8007732:	e021      	b.n	8007778 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	ee07 3a90 	vmov	s15, r3
 800773e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007742:	eeb0 1b47 	vmov.f64	d1, d7
 8007746:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800774a:	f016 fe79 	bl	801e440 <pow>
 800774e:	eeb0 7b40 	vmov.f64	d7, d0
 8007752:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007756:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 800775a:	ed97 7a03 	vldr	s14, [r7, #12]
 800775e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007762:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800776a:	da0b      	bge.n	8007784 <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 800776c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776e:	3301      	adds	r3, #1
 8007770:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	3301      	adds	r3, #1
 8007776:	61fb      	str	r3, [r7, #28]
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	69fa      	ldr	r2, [r7, #28]
 800777e:	429a      	cmp	r2, r3
 8007780:	dbd8      	blt.n	8007734 <convert_value_to_array3+0x56>
 8007782:	e000      	b.n	8007786 <convert_value_to_array3+0xa8>
			break;
 8007784:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	3b01      	subs	r3, #1
 800778e:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 8007790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007792:	2b00      	cmp	r3, #0
 8007794:	dc07      	bgt.n	80077a6 <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 8007796:	79fb      	ldrb	r3, [r7, #7]
 8007798:	3301      	adds	r3, #1
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	4413      	add	r3, r2
 800779e:	222e      	movs	r2, #46	@ 0x2e
 80077a0:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 80077a2:	2301      	movs	r3, #1
 80077a4:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 80077a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	dd0a      	ble.n	80077c2 <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 80077ac:	79fa      	ldrb	r2, [r7, #7]
 80077ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b0:	4413      	add	r3, r2
 80077b2:	3301      	adds	r3, #1
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	4413      	add	r3, r2
 80077b8:	222e      	movs	r2, #46	@ 0x2e
 80077ba:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 80077bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077be:	3301      	adds	r3, #1
 80077c0:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 80077c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80077c6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	1e5a      	subs	r2, r3, #1
 80077ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80077da:	eeb0 1b47 	vmov.f64	d1, d7
 80077de:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80077e2:	f016 fe2d 	bl	801e440 <pow>
 80077e6:	eeb0 7b40 	vmov.f64	d7, d0
 80077ea:	ee28 7b07 	vmul.f64	d7, d8, d7
 80077ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80077f2:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 80077f6:	2300      	movs	r3, #0
 80077f8:	61bb      	str	r3, [r7, #24]
 80077fa:	e05f      	b.n	80078bc <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 80077fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8007800:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007808:	d93d      	bls.n	8007886 <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 800780a:	edd7 7a03 	vldr	s15, [r7, #12]
 800780e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	1e5a      	subs	r2, r3, #1
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	ee07 3a90 	vmov	s15, r3
 800781e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007822:	eeb0 1b47 	vmov.f64	d1, d7
 8007826:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800782a:	f016 fe09 	bl	801e440 <pow>
 800782e:	eeb0 7b40 	vmov.f64	d7, d0
 8007832:	ee38 7b47 	vsub.f64	d7, d8, d7
 8007836:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800783a:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 800783e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007840:	3301      	adds	r3, #1
 8007842:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	1e5a      	subs	r2, r3, #1
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	ee07 3a90 	vmov	s15, r3
 8007850:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007854:	eeb0 1b47 	vmov.f64	d1, d7
 8007858:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800785c:	f016 fdf0 	bl	801e440 <pow>
 8007860:	eeb0 7b40 	vmov.f64	d7, d0
 8007864:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007868:	ee17 3a90 	vmov	r3, s15
 800786c:	b29b      	uxth	r3, r3
 800786e:	ee07 3a90 	vmov	s15, r3
 8007872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007876:	ed97 7a03 	vldr	s14, [r7, #12]
 800787a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800787e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007882:	dabb      	bge.n	80077fc <convert_value_to_array3+0x11e>
 8007884:	e000      	b.n	8007888 <convert_value_to_array3+0x1aa>
				break;
 8007886:	bf00      	nop
		}

        if(loopnum == kropka){
 8007888:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	429a      	cmp	r2, r3
 800788e:	d102      	bne.n	8007896 <convert_value_to_array3+0x1b8>
            loopnum++;
 8007890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007892:	3301      	adds	r3, #1
 8007894:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 8007896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007898:	b2da      	uxtb	r2, r3
 800789a:	79f9      	ldrb	r1, [r7, #7]
 800789c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789e:	440b      	add	r3, r1
 80078a0:	4619      	mov	r1, r3
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	440b      	add	r3, r1
 80078a6:	3230      	adds	r2, #48	@ 0x30
 80078a8:	b2d2      	uxtb	r2, r2
 80078aa:	701a      	strb	r2, [r3, #0]
		loopnum++;
 80078ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ae:	3301      	adds	r3, #1
 80078b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 80078b2:	2300      	movs	r3, #0
 80078b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	3301      	adds	r3, #1
 80078ba:	61bb      	str	r3, [r7, #24]
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	3b02      	subs	r3, #2
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	dbbe      	blt.n	8007844 <convert_value_to_array3+0x166>
	}
}
 80078c6:	bf00      	nop
 80078c8:	bf00      	nop
 80078ca:	3730      	adds	r7, #48	@ 0x30
 80078cc:	46bd      	mov	sp, r7
 80078ce:	ecbd 8b02 	vpop	{d8}
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 80078dc:	4ba6      	ldr	r3, [pc, #664]	@ (8007b78 <uSD_Card_SendData_To_Buffer+0x2a4>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	b218      	sxth	r0, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	01db      	lsls	r3, r3, #7
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	01db      	lsls	r3, r3, #7
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	3308      	adds	r3, #8
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	49a1      	ldr	r1, [pc, #644]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80078f8:	f7ff fe92 	bl	8007620 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	01db      	lsls	r3, r3, #7
 8007900:	3308      	adds	r3, #8
 8007902:	4a9e      	ldr	r2, [pc, #632]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007904:	2120      	movs	r1, #32
 8007906:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(SPEED1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 8007908:	4b9d      	ldr	r3, [pc, #628]	@ (8007b80 <uSD_Card_SendData_To_Buffer+0x2ac>)
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	b218      	sxth	r0, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	01db      	lsls	r3, r3, #7
 8007914:	b2db      	uxtb	r3, r3
 8007916:	3309      	adds	r3, #9
 8007918:	b2da      	uxtb	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	01db      	lsls	r3, r3, #7
 8007920:	b2db      	uxtb	r3, r3
 8007922:	330f      	adds	r3, #15
 8007924:	b2db      	uxtb	r3, r3
 8007926:	4995      	ldr	r1, [pc, #596]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007928:	f7ff fe7a 	bl	8007620 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	01db      	lsls	r3, r3, #7
 8007930:	330f      	adds	r3, #15
 8007932:	4a92      	ldr	r2, [pc, #584]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007934:	2120      	movs	r1, #32
 8007936:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 8007938:	4b92      	ldr	r3, [pc, #584]	@ (8007b84 <uSD_Card_SendData_To_Buffer+0x2b0>)
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	b218      	sxth	r0, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	b2db      	uxtb	r3, r3
 8007942:	01db      	lsls	r3, r3, #7
 8007944:	b2db      	uxtb	r3, r3
 8007946:	3310      	adds	r3, #16
 8007948:	b2da      	uxtb	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	b2db      	uxtb	r3, r3
 800794e:	01db      	lsls	r3, r3, #7
 8007950:	b2db      	uxtb	r3, r3
 8007952:	3316      	adds	r3, #22
 8007954:	b2db      	uxtb	r3, r3
 8007956:	4989      	ldr	r1, [pc, #548]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007958:	f7ff fe62 	bl	8007620 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	01db      	lsls	r3, r3, #7
 8007960:	3316      	adds	r3, #22
 8007962:	4a86      	ldr	r2, [pc, #536]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007964:	2120      	movs	r1, #32
 8007966:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 8007968:	4b87      	ldr	r3, [pc, #540]	@ (8007b88 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800796a:	881b      	ldrh	r3, [r3, #0]
 800796c:	b218      	sxth	r0, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	01db      	lsls	r3, r3, #7
 8007974:	b2db      	uxtb	r3, r3
 8007976:	3317      	adds	r3, #23
 8007978:	b2da      	uxtb	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	b2db      	uxtb	r3, r3
 800797e:	01db      	lsls	r3, r3, #7
 8007980:	b2db      	uxtb	r3, r3
 8007982:	331d      	adds	r3, #29
 8007984:	b2db      	uxtb	r3, r3
 8007986:	497d      	ldr	r1, [pc, #500]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007988:	f7ff fe4a 	bl	8007620 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	01db      	lsls	r3, r3, #7
 8007990:	331d      	adds	r3, #29
 8007992:	4a7a      	ldr	r2, [pc, #488]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007994:	2120      	movs	r1, #32
 8007996:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 8007998:	4b7c      	ldr	r3, [pc, #496]	@ (8007b8c <uSD_Card_SendData_To_Buffer+0x2b8>)
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	b218      	sxth	r0, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	01db      	lsls	r3, r3, #7
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	331e      	adds	r3, #30
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	01db      	lsls	r3, r3, #7
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	3324      	adds	r3, #36	@ 0x24
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	4971      	ldr	r1, [pc, #452]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079b8:	f7ff fe32 	bl	8007620 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	01db      	lsls	r3, r3, #7
 80079c0:	3324      	adds	r3, #36	@ 0x24
 80079c2:	4a6e      	ldr	r2, [pc, #440]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079c4:	2120      	movs	r1, #32
 80079c6:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(wanted_rool, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 80079c8:	4b71      	ldr	r3, [pc, #452]	@ (8007b90 <uSD_Card_SendData_To_Buffer+0x2bc>)
 80079ca:	edd3 7a00 	vldr	s15, [r3]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	01db      	lsls	r3, r3, #7
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	3325      	adds	r3, #37	@ 0x25
 80079d8:	b2d9      	uxtb	r1, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	01db      	lsls	r3, r3, #7
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	332d      	adds	r3, #45	@ 0x2d
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	461a      	mov	r2, r3
 80079e8:	4864      	ldr	r0, [pc, #400]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079ea:	eeb0 0a67 	vmov.f32	s0, s15
 80079ee:	f7ff fe76 	bl	80076de <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	01db      	lsls	r3, r3, #7
 80079f6:	332d      	adds	r3, #45	@ 0x2d
 80079f8:	4a60      	ldr	r2, [pc, #384]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079fa:	2120      	movs	r1, #32
 80079fc:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_pitch, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 80079fe:	4b65      	ldr	r3, [pc, #404]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007a00:	edd3 7a00 	vldr	s15, [r3]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	01db      	lsls	r3, r3, #7
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	332e      	adds	r3, #46	@ 0x2e
 8007a0e:	b2d9      	uxtb	r1, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	01db      	lsls	r3, r3, #7
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	3336      	adds	r3, #54	@ 0x36
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	4857      	ldr	r0, [pc, #348]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a20:	eeb0 0a67 	vmov.f32	s0, s15
 8007a24:	f7ff fe5b 	bl	80076de <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	01db      	lsls	r3, r3, #7
 8007a2c:	3336      	adds	r3, #54	@ 0x36
 8007a2e:	4a53      	ldr	r2, [pc, #332]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a30:	2120      	movs	r1, #32
 8007a32:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_yaw, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 8007a34:	4b58      	ldr	r3, [pc, #352]	@ (8007b98 <uSD_Card_SendData_To_Buffer+0x2c4>)
 8007a36:	edd3 7a00 	vldr	s15, [r3]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	01db      	lsls	r3, r3, #7
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	3337      	adds	r3, #55	@ 0x37
 8007a44:	b2d9      	uxtb	r1, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	01db      	lsls	r3, r3, #7
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	333f      	adds	r3, #63	@ 0x3f
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	461a      	mov	r2, r3
 8007a54:	4849      	ldr	r0, [pc, #292]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a56:	eeb0 0a67 	vmov.f32	s0, s15
 8007a5a:	f7ff fe40 	bl	80076de <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	01db      	lsls	r3, r3, #7
 8007a62:	333f      	adds	r3, #63	@ 0x3f
 8007a64:	4a45      	ldr	r2, [pc, #276]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a66:	2120      	movs	r1, #32
 8007a68:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(error_sum_pitch, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 8007a6a:	4b4c      	ldr	r3, [pc, #304]	@ (8007b9c <uSD_Card_SendData_To_Buffer+0x2c8>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	b218      	sxth	r0, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	01db      	lsls	r3, r3, #7
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	3340      	adds	r3, #64	@ 0x40
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	01db      	lsls	r3, r3, #7
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	3348      	adds	r3, #72	@ 0x48
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	493c      	ldr	r1, [pc, #240]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a8a:	f7ff fdc9 	bl	8007620 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	01db      	lsls	r3, r3, #7
 8007a92:	3348      	adds	r3, #72	@ 0x48
 8007a94:	4a39      	ldr	r2, [pc, #228]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a96:	2120      	movs	r1, #32
 8007a98:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_rool, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 8007a9a:	4b41      	ldr	r3, [pc, #260]	@ (8007ba0 <uSD_Card_SendData_To_Buffer+0x2cc>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	b218      	sxth	r0, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	01db      	lsls	r3, r3, #7
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	3349      	adds	r3, #73	@ 0x49
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	01db      	lsls	r3, r3, #7
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	3351      	adds	r3, #81	@ 0x51
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	4930      	ldr	r1, [pc, #192]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007aba:	f7ff fdb1 	bl	8007620 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	01db      	lsls	r3, r3, #7
 8007ac2:	3351      	adds	r3, #81	@ 0x51
 8007ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007ac6:	2120      	movs	r1, #32
 8007ac8:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_yaw, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 8007aca:	4b36      	ldr	r3, [pc, #216]	@ (8007ba4 <uSD_Card_SendData_To_Buffer+0x2d0>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	b218      	sxth	r0, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	01db      	lsls	r3, r3, #7
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	3352      	adds	r3, #82	@ 0x52
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	01db      	lsls	r3, r3, #7
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	335a      	adds	r3, #90	@ 0x5a
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	4924      	ldr	r1, [pc, #144]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007aea:	f7ff fd99 	bl	8007620 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	01db      	lsls	r3, r3, #7
 8007af2:	335a      	adds	r3, #90	@ 0x5a
 8007af4:	4a21      	ldr	r2, [pc, #132]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007af6:	2120      	movs	r1, #32
 8007af8:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 8007afa:	4b2b      	ldr	r3, [pc, #172]	@ (8007ba8 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007afc:	edd3 7a00 	vldr	s15, [r3]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	01db      	lsls	r3, r3, #7
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	335b      	adds	r3, #91	@ 0x5b
 8007b0a:	b2d9      	uxtb	r1, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	01db      	lsls	r3, r3, #7
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	3362      	adds	r3, #98	@ 0x62
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4818      	ldr	r0, [pc, #96]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8007b20:	f7ff fddd 	bl	80076de <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	01db      	lsls	r3, r3, #7
 8007b28:	3362      	adds	r3, #98	@ 0x62
 8007b2a:	4a14      	ldr	r2, [pc, #80]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b2c:	2120      	movs	r1, #32
 8007b2e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 8007b30:	4b1d      	ldr	r3, [pc, #116]	@ (8007ba8 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007b32:	edd3 7a01 	vldr	s15, [r3, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	01db      	lsls	r3, r3, #7
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	3363      	adds	r3, #99	@ 0x63
 8007b40:	b2d9      	uxtb	r1, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	01db      	lsls	r3, r3, #7
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	336a      	adds	r3, #106	@ 0x6a
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	461a      	mov	r2, r3
 8007b50:	480a      	ldr	r0, [pc, #40]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b52:	eeb0 0a67 	vmov.f32	s0, s15
 8007b56:	f7ff fdc2 	bl	80076de <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	01db      	lsls	r3, r3, #7
 8007b5e:	336a      	adds	r3, #106	@ 0x6a
 8007b60:	4a06      	ldr	r2, [pc, #24]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b62:	2120      	movs	r1, #32
 8007b64:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 8007b66:	4b10      	ldr	r3, [pc, #64]	@ (8007ba8 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007b68:	edd3 7a02 	vldr	s15, [r3, #8]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	01db      	lsls	r3, r3, #7
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	336b      	adds	r3, #107	@ 0x6b
 8007b76:	e019      	b.n	8007bac <uSD_Card_SendData_To_Buffer+0x2d8>
 8007b78:	000041dc 	.word	0x000041dc
 8007b7c:	24002f28 	.word	0x24002f28
 8007b80:	000041a4 	.word	0x000041a4
 8007b84:	000041a6 	.word	0x000041a6
 8007b88:	000041a8 	.word	0x000041a8
 8007b8c:	000041aa 	.word	0x000041aa
 8007b90:	0000406c 	.word	0x0000406c
 8007b94:	00004068 	.word	0x00004068
 8007b98:	00004070 	.word	0x00004070
 8007b9c:	000040b4 	.word	0x000040b4
 8007ba0:	000040b8 	.word	0x000040b8
 8007ba4:	000040bc 	.word	0x000040bc
 8007ba8:	0000007c 	.word	0x0000007c
 8007bac:	b2d9      	uxtb	r1, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	01db      	lsls	r3, r3, #7
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	3372      	adds	r3, #114	@ 0x72
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	461a      	mov	r2, r3
 8007bbc:	482d      	ldr	r0, [pc, #180]	@ (8007c74 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8007bc2:	f7ff fd8c 	bl	80076de <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	01db      	lsls	r3, r3, #7
 8007bca:	3372      	adds	r3, #114	@ 0x72
 8007bcc:	4a29      	ldr	r2, [pc, #164]	@ (8007c74 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007bce:	2120      	movs	r1, #32
 8007bd0:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 8007bd2:	4b29      	ldr	r3, [pc, #164]	@ (8007c78 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007bd4:	881b      	ldrh	r3, [r3, #0]
 8007bd6:	b218      	sxth	r0, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	01db      	lsls	r3, r3, #7
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	3373      	adds	r3, #115	@ 0x73
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	01db      	lsls	r3, r3, #7
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	3377      	adds	r3, #119	@ 0x77
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	4920      	ldr	r1, [pc, #128]	@ (8007c74 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007bf2:	f7ff fd15 	bl	8007620 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	01db      	lsls	r3, r3, #7
 8007bfa:	3377      	adds	r3, #119	@ 0x77
 8007bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8007c74 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007bfe:	2120      	movs	r1, #32
 8007c00:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.dron_status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 8007c02:	4b1d      	ldr	r3, [pc, #116]	@ (8007c78 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007c04:	8a5b      	ldrh	r3, [r3, #18]
 8007c06:	b218      	sxth	r0, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	01db      	lsls	r3, r3, #7
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	3378      	adds	r3, #120	@ 0x78
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	01db      	lsls	r3, r3, #7
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	337a      	adds	r3, #122	@ 0x7a
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	4914      	ldr	r1, [pc, #80]	@ (8007c74 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c22:	f7ff fcfd 	bl	8007620 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	01db      	lsls	r3, r3, #7
 8007c2a:	337a      	adds	r3, #122	@ 0x7a
 8007c2c:	4a11      	ldr	r2, [pc, #68]	@ (8007c74 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c2e:	2120      	movs	r1, #32
 8007c30:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(Mag_Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 8007c32:	4b12      	ldr	r3, [pc, #72]	@ (8007c7c <uSD_Card_SendData_To_Buffer+0x3a8>)
 8007c34:	edd3 7a00 	vldr	s15, [r3]
 8007c38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c3c:	ee17 3a90 	vmov	r3, s15
 8007c40:	b218      	sxth	r0, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	01db      	lsls	r3, r3, #7
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	337b      	adds	r3, #123	@ 0x7b
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	01db      	lsls	r3, r3, #7
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	337f      	adds	r3, #127	@ 0x7f
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	4906      	ldr	r1, [pc, #24]	@ (8007c74 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c5c:	f7ff fce0 	bl	8007620 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	3301      	adds	r3, #1
 8007c64:	01db      	lsls	r3, r3, #7
 8007c66:	4a03      	ldr	r2, [pc, #12]	@ (8007c74 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c68:	210a      	movs	r1, #10
 8007c6a:	54d1      	strb	r1, [r2, r3]
}
 8007c6c:	bf00      	nop
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	24002f28 	.word	0x24002f28
 8007c78:	00000178 	.word	0x00000178
 8007c7c:	00000058 	.word	0x00000058

08007c80 <Stack_Push>:

void Stack_Push(float data){
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 8007c8a:	4b22      	ldr	r3, [pc, #136]	@ (8007d14 <Stack_Push+0x94>)
 8007c8c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c90:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007c94:	3301      	adds	r3, #1
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	4b1e      	ldr	r3, [pc, #120]	@ (8007d14 <Stack_Push+0x94>)
 8007c9a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c9e:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 8007ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8007d14 <Stack_Push+0x94>)
 8007ca4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007ca8:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007cac:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007cb0:	d105      	bne.n	8007cbe <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 8007cb2:	4b18      	ldr	r3, [pc, #96]	@ (8007d14 <Stack_Push+0x94>)
 8007cb4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 8007cbe:	4b15      	ldr	r3, [pc, #84]	@ (8007d14 <Stack_Push+0x94>)
 8007cc0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cc4:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007cc8:	4a12      	ldr	r2, [pc, #72]	@ (8007d14 <Stack_Push+0x94>)
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 8007cd2:	4b10      	ldr	r3, [pc, #64]	@ (8007d14 <Stack_Push+0x94>)
 8007cd4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cd8:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 8007cdc:	3301      	adds	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8007d14 <Stack_Push+0x94>)
 8007ce2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007ce6:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 8007cea:	4b0a      	ldr	r3, [pc, #40]	@ (8007d14 <Stack_Push+0x94>)
 8007cec:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cf0:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007cf4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007cf8:	d105      	bne.n	8007d06 <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 8007cfa:	4b06      	ldr	r3, [pc, #24]	@ (8007d14 <Stack_Push+0x94>)
 8007cfc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	0000019c 	.word	0x0000019c

08007d18 <ROOL_MAX_VAL>:

int16_t ROOL_MAX_VAL(void){
 8007d18:	b480      	push	{r7}
 8007d1a:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 2;
 8007d1c:	4b05      	ldr	r3, [pc, #20]	@ (8007d34 <ROOL_MAX_VAL+0x1c>)
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return 5000;
 8007d24:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	00000178 	.word	0x00000178

08007d38 <ROOL_MIN_VAL>:
int16_t ROOL_MIN_VAL(void){
 8007d38:	b480      	push	{r7}
 8007d3a:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 1;
 8007d3c:	4b04      	ldr	r3, [pc, #16]	@ (8007d50 <ROOL_MIN_VAL+0x18>)
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return -5000;
 8007d44:	4b03      	ldr	r3, [pc, #12]	@ (8007d54 <ROOL_MIN_VAL+0x1c>)
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	00000178 	.word	0x00000178
 8007d54:	ffffec78 	.word	0xffffec78

08007d58 <PITCH_MAX_VAL>:
int16_t PITCH_MAX_VAL(void){
 8007d58:	b480      	push	{r7}
 8007d5a:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 2;
 8007d5c:	4b05      	ldr	r3, [pc, #20]	@ (8007d74 <PITCH_MAX_VAL+0x1c>)
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return 5000;
 8007d64:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	00000178 	.word	0x00000178

08007d78 <PITCH_MIN_VAL>:
int16_t PITCH_MIN_VAL(void){
 8007d78:	b480      	push	{r7}
 8007d7a:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 1;
 8007d7c:	4b04      	ldr	r3, [pc, #16]	@ (8007d90 <PITCH_MIN_VAL+0x18>)
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return -5000;
 8007d84:	4b03      	ldr	r3, [pc, #12]	@ (8007d94 <PITCH_MIN_VAL+0x1c>)
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	00000178 	.word	0x00000178
 8007d94:	ffffec78 	.word	0xffffec78

08007d98 <YAW_MAX_VAL>:
int16_t YAW_MAX_VAL(void){
 8007d98:	b480      	push	{r7}
 8007d9a:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 2;
 8007d9c:	4b05      	ldr	r3, [pc, #20]	@ (8007db4 <YAW_MAX_VAL+0x1c>)
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return 5000;
 8007da4:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	00000178 	.word	0x00000178

08007db8 <YAW_MIN_VAL>:
int16_t YAW_MIN_VAL(void){
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 1;
 8007dbc:	4b04      	ldr	r3, [pc, #16]	@ (8007dd0 <YAW_MIN_VAL+0x18>)
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return -5000;
 8007dc4:	4b03      	ldr	r3, [pc, #12]	@ (8007dd4 <YAW_MIN_VAL+0x1c>)
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	00000178 	.word	0x00000178
 8007dd4:	ffffec78 	.word	0xffffec78

08007dd8 <ROOL_GOOD_VAL>:
int16_t ROOL_GOOD_VAL(void){
 8007dd8:	b480      	push	{r7}
 8007dda:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 0;
 8007ddc:	4b08      	ldr	r3, [pc, #32]	@ (8007e00 <ROOL_GOOD_VAL+0x28>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return pid_angular_rate_rool;
 8007de4:	4b07      	ldr	r3, [pc, #28]	@ (8007e04 <ROOL_GOOD_VAL+0x2c>)
 8007de6:	edd3 7a00 	vldr	s15, [r3]
 8007dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007dee:	ee17 3a90 	vmov	r3, s15
 8007df2:	b21b      	sxth	r3, r3
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	00000178 	.word	0x00000178
 8007e04:	000040e0 	.word	0x000040e0

08007e08 <PITCH_GOOD_VAL>:
int16_t PITCH_GOOD_VAL(void){
 8007e08:	b480      	push	{r7}
 8007e0a:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 0;
 8007e0c:	4b08      	ldr	r3, [pc, #32]	@ (8007e30 <PITCH_GOOD_VAL+0x28>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return pid_angular_rate_pitch;
 8007e14:	4b07      	ldr	r3, [pc, #28]	@ (8007e34 <PITCH_GOOD_VAL+0x2c>)
 8007e16:	edd3 7a00 	vldr	s15, [r3]
 8007e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e1e:	ee17 3a90 	vmov	r3, s15
 8007e22:	b21b      	sxth	r3, r3
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	00000178 	.word	0x00000178
 8007e34:	000040d8 	.word	0x000040d8

08007e38 <YAW_GOOD_VAL>:
int16_t YAW_GOOD_VAL(void){
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 0;
 8007e3c:	4b08      	ldr	r3, [pc, #32]	@ (8007e60 <YAW_GOOD_VAL+0x28>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return pid_angular_rate_yaw;
 8007e44:	4b07      	ldr	r3, [pc, #28]	@ (8007e64 <YAW_GOOD_VAL+0x2c>)
 8007e46:	edd3 7a00 	vldr	s15, [r3]
 8007e4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e4e:	ee17 3a90 	vmov	r3, s15
 8007e52:	b21b      	sxth	r3, r3
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	00000178 	.word	0x00000178
 8007e64:	000040dc 	.word	0x000040dc

08007e68 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007e6e:	463b      	mov	r3, r7
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	605a      	str	r2, [r3, #4]
 8007e76:	609a      	str	r2, [r3, #8]
 8007e78:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007e7a:	f003 fc3d 	bl	800b6f8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007e82:	2300      	movs	r3, #0
 8007e84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007e8a:	231f      	movs	r3, #31
 8007e8c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007e8e:	2387      	movs	r3, #135	@ 0x87
 8007e90:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007e96:	2300      	movs	r3, #0
 8007e98:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007eaa:	463b      	mov	r3, r7
 8007eac:	4618      	mov	r0, r3
 8007eae:	f003 fc5b 	bl	800b768 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007eb2:	2004      	movs	r0, #4
 8007eb4:	f003 fc38 	bl	800b728 <HAL_MPU_Enable>

}
 8007eb8:	bf00      	nop
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007ec4:	b672      	cpsid	i
}
 8007ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007ec8:	bf00      	nop
 8007eca:	e7fd      	b.n	8007ec8 <Error_Handler+0x8>

08007ecc <MX_SPI2_Init>:
SPI_HandleTypeDef hspi6;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007ed0:	4b27      	ldr	r3, [pc, #156]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007ed2:	4a28      	ldr	r2, [pc, #160]	@ (8007f74 <MX_SPI2_Init+0xa8>)
 8007ed4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007ed6:	4b26      	ldr	r3, [pc, #152]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007ed8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007edc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007ede:	4b24      	ldr	r3, [pc, #144]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007ee4:	4b22      	ldr	r3, [pc, #136]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007ee6:	2207      	movs	r2, #7
 8007ee8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007eea:	4b21      	ldr	r3, [pc, #132]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007ef8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007efc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007efe:	4b1c      	ldr	r3, [pc, #112]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007f04:	4b1a      	ldr	r3, [pc, #104]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007f0a:	4b19      	ldr	r3, [pc, #100]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f10:	4b17      	ldr	r3, [pc, #92]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007f16:	4b16      	ldr	r3, [pc, #88]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007f1c:	4b14      	ldr	r3, [pc, #80]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007f1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007f22:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007f24:	4b12      	ldr	r3, [pc, #72]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007f2a:	4b11      	ldr	r3, [pc, #68]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007f30:	4b0f      	ldr	r3, [pc, #60]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007f36:	4b0e      	ldr	r3, [pc, #56]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007f42:	4b0b      	ldr	r3, [pc, #44]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007f48:	4b09      	ldr	r3, [pc, #36]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007f4e:	4b08      	ldr	r3, [pc, #32]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007f54:	4b06      	ldr	r3, [pc, #24]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007f5a:	4805      	ldr	r0, [pc, #20]	@ (8007f70 <MX_SPI2_Init+0xa4>)
 8007f5c:	f00c fc8e 	bl	801487c <HAL_SPI_Init>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8007f66:	f7ff ffab 	bl	8007ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007f6a:	bf00      	nop
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	240001ec 	.word	0x240001ec
 8007f74:	40003800 	.word	0x40003800

08007f78 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8007f7c:	4b27      	ldr	r3, [pc, #156]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007f7e:	4a28      	ldr	r2, [pc, #160]	@ (8008020 <MX_SPI6_Init+0xa8>)
 8007f80:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8007f82:	4b26      	ldr	r3, [pc, #152]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007f84:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007f88:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8007f8a:	4b24      	ldr	r3, [pc, #144]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8007f90:	4b22      	ldr	r3, [pc, #136]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007f92:	2207      	movs	r2, #7
 8007f94:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f96:	4b21      	ldr	r3, [pc, #132]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8007fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007fa4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007fa8:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007faa:	4b1c      	ldr	r3, [pc, #112]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8007fb6:	4b19      	ldr	r3, [pc, #100]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fbc:	4b17      	ldr	r3, [pc, #92]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8007fc2:	4b16      	ldr	r3, [pc, #88]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007fc8:	4b14      	ldr	r3, [pc, #80]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007fca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007fce:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007fd0:	4b12      	ldr	r3, [pc, #72]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007fd6:	4b11      	ldr	r3, [pc, #68]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007fee:	4b0b      	ldr	r3, [pc, #44]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007ff4:	4b09      	ldr	r3, [pc, #36]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007ffa:	4b08      	ldr	r3, [pc, #32]	@ (800801c <MX_SPI6_Init+0xa4>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8008000:	4b06      	ldr	r3, [pc, #24]	@ (800801c <MX_SPI6_Init+0xa4>)
 8008002:	2200      	movs	r2, #0
 8008004:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8008006:	4805      	ldr	r0, [pc, #20]	@ (800801c <MX_SPI6_Init+0xa4>)
 8008008:	f00c fc38 	bl	801487c <HAL_SPI_Init>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8008012:	f7ff ff55 	bl	8007ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8008016:	bf00      	nop
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	24000274 	.word	0x24000274
 8008020:	58001400 	.word	0x58001400

08008024 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b0ba      	sub	sp, #232	@ 0xe8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800802c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	605a      	str	r2, [r3, #4]
 8008036:	609a      	str	r2, [r3, #8]
 8008038:	60da      	str	r2, [r3, #12]
 800803a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800803c:	f107 0318 	add.w	r3, r7, #24
 8008040:	22b8      	movs	r2, #184	@ 0xb8
 8008042:	2100      	movs	r1, #0
 8008044:	4618      	mov	r0, r3
 8008046:	f016 f871 	bl	801e12c <memset>
  if(spiHandle->Instance==SPI2)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a77      	ldr	r2, [pc, #476]	@ (800822c <HAL_SPI_MspInit+0x208>)
 8008050:	4293      	cmp	r3, r2
 8008052:	f040 8089 	bne.w	8008168 <HAL_SPI_MspInit+0x144>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008056:	4b76      	ldr	r3, [pc, #472]	@ (8008230 <HAL_SPI_MspInit+0x20c>)
 8008058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800805c:	4a74      	ldr	r2, [pc, #464]	@ (8008230 <HAL_SPI_MspInit+0x20c>)
 800805e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008062:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008066:	4b72      	ldr	r3, [pc, #456]	@ (8008230 <HAL_SPI_MspInit+0x20c>)
 8008068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800806c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008070:	617b      	str	r3, [r7, #20]
 8008072:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008074:	4b6e      	ldr	r3, [pc, #440]	@ (8008230 <HAL_SPI_MspInit+0x20c>)
 8008076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800807a:	4a6d      	ldr	r2, [pc, #436]	@ (8008230 <HAL_SPI_MspInit+0x20c>)
 800807c:	f043 0302 	orr.w	r3, r3, #2
 8008080:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008084:	4b6a      	ldr	r3, [pc, #424]	@ (8008230 <HAL_SPI_MspInit+0x20c>)
 8008086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	613b      	str	r3, [r7, #16]
 8008090:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008092:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008096:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800809a:	2302      	movs	r3, #2
 800809c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080a0:	2300      	movs	r3, #0
 80080a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80080a6:	2301      	movs	r3, #1
 80080a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80080ac:	2305      	movs	r3, #5
 80080ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80080b6:	4619      	mov	r1, r3
 80080b8:	485e      	ldr	r0, [pc, #376]	@ (8008234 <HAL_SPI_MspInit+0x210>)
 80080ba:	f006 f9e7 	bl	800e48c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80080be:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80080c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080c6:	2302      	movs	r3, #2
 80080c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80080cc:	2301      	movs	r3, #1
 80080ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80080d2:	2301      	movs	r3, #1
 80080d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80080d8:	2305      	movs	r3, #5
 80080da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080de:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80080e2:	4619      	mov	r1, r3
 80080e4:	4853      	ldr	r0, [pc, #332]	@ (8008234 <HAL_SPI_MspInit+0x210>)
 80080e6:	f006 f9d1 	bl	800e48c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream0;
 80080ea:	4b53      	ldr	r3, [pc, #332]	@ (8008238 <HAL_SPI_MspInit+0x214>)
 80080ec:	4a53      	ldr	r2, [pc, #332]	@ (800823c <HAL_SPI_MspInit+0x218>)
 80080ee:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80080f0:	4b51      	ldr	r3, [pc, #324]	@ (8008238 <HAL_SPI_MspInit+0x214>)
 80080f2:	2228      	movs	r2, #40	@ 0x28
 80080f4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80080f6:	4b50      	ldr	r3, [pc, #320]	@ (8008238 <HAL_SPI_MspInit+0x214>)
 80080f8:	2240      	movs	r2, #64	@ 0x40
 80080fa:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80080fc:	4b4e      	ldr	r3, [pc, #312]	@ (8008238 <HAL_SPI_MspInit+0x214>)
 80080fe:	2200      	movs	r2, #0
 8008100:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008102:	4b4d      	ldr	r3, [pc, #308]	@ (8008238 <HAL_SPI_MspInit+0x214>)
 8008104:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008108:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800810a:	4b4b      	ldr	r3, [pc, #300]	@ (8008238 <HAL_SPI_MspInit+0x214>)
 800810c:	2200      	movs	r2, #0
 800810e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008110:	4b49      	ldr	r3, [pc, #292]	@ (8008238 <HAL_SPI_MspInit+0x214>)
 8008112:	2200      	movs	r2, #0
 8008114:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8008116:	4b48      	ldr	r3, [pc, #288]	@ (8008238 <HAL_SPI_MspInit+0x214>)
 8008118:	2200      	movs	r2, #0
 800811a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800811c:	4b46      	ldr	r3, [pc, #280]	@ (8008238 <HAL_SPI_MspInit+0x214>)
 800811e:	2200      	movs	r2, #0
 8008120:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008122:	4b45      	ldr	r3, [pc, #276]	@ (8008238 <HAL_SPI_MspInit+0x214>)
 8008124:	2204      	movs	r2, #4
 8008126:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8008128:	4b43      	ldr	r3, [pc, #268]	@ (8008238 <HAL_SPI_MspInit+0x214>)
 800812a:	2203      	movs	r2, #3
 800812c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800812e:	4b42      	ldr	r3, [pc, #264]	@ (8008238 <HAL_SPI_MspInit+0x214>)
 8008130:	2200      	movs	r2, #0
 8008132:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008134:	4b40      	ldr	r3, [pc, #256]	@ (8008238 <HAL_SPI_MspInit+0x214>)
 8008136:	2200      	movs	r2, #0
 8008138:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800813a:	483f      	ldr	r0, [pc, #252]	@ (8008238 <HAL_SPI_MspInit+0x214>)
 800813c:	f003 fb54 	bl	800b7e8 <HAL_DMA_Init>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8008146:	f7ff febb 	bl	8007ec0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a3a      	ldr	r2, [pc, #232]	@ (8008238 <HAL_SPI_MspInit+0x214>)
 800814e:	679a      	str	r2, [r3, #120]	@ 0x78
 8008150:	4a39      	ldr	r2, [pc, #228]	@ (8008238 <HAL_SPI_MspInit+0x214>)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8008156:	2200      	movs	r2, #0
 8008158:	2100      	movs	r1, #0
 800815a:	2024      	movs	r0, #36	@ 0x24
 800815c:	f003 fa97 	bl	800b68e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8008160:	2024      	movs	r0, #36	@ 0x24
 8008162:	f003 faae 	bl	800b6c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8008166:	e05c      	b.n	8008222 <HAL_SPI_MspInit+0x1fe>
  else if(spiHandle->Instance==SPI6)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a34      	ldr	r2, [pc, #208]	@ (8008240 <HAL_SPI_MspInit+0x21c>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d157      	bne.n	8008222 <HAL_SPI_MspInit+0x1fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8008172:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008176:	f04f 0300 	mov.w	r3, #0
 800817a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 800817e:	2318      	movs	r3, #24
 8008180:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 8008182:	23c8      	movs	r3, #200	@ 0xc8
 8008184:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 1;
 8008186:	2301      	movs	r3, #1
 8008188:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 800818a:	230a      	movs	r3, #10
 800818c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800818e:	2302      	movs	r3, #2
 8008190:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8008192:	2300      	movs	r3, #0
 8008194:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8008196:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800819a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL3;
 80081a0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80081a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80081a8:	f107 0318 	add.w	r3, r7, #24
 80081ac:	4618      	mov	r0, r3
 80081ae:	f009 ff7f 	bl	80120b0 <HAL_RCCEx_PeriphCLKConfig>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <HAL_SPI_MspInit+0x198>
      Error_Handler();
 80081b8:	f7ff fe82 	bl	8007ec0 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80081bc:	4b1c      	ldr	r3, [pc, #112]	@ (8008230 <HAL_SPI_MspInit+0x20c>)
 80081be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008230 <HAL_SPI_MspInit+0x20c>)
 80081c4:	f043 0320 	orr.w	r3, r3, #32
 80081c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80081cc:	4b18      	ldr	r3, [pc, #96]	@ (8008230 <HAL_SPI_MspInit+0x20c>)
 80081ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081d2:	f003 0320 	and.w	r3, r3, #32
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081da:	4b15      	ldr	r3, [pc, #84]	@ (8008230 <HAL_SPI_MspInit+0x20c>)
 80081dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081e0:	4a13      	ldr	r2, [pc, #76]	@ (8008230 <HAL_SPI_MspInit+0x20c>)
 80081e2:	f043 0302 	orr.w	r3, r3, #2
 80081e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80081ea:	4b11      	ldr	r3, [pc, #68]	@ (8008230 <HAL_SPI_MspInit+0x20c>)
 80081ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	60bb      	str	r3, [r7, #8]
 80081f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80081f8:	2338      	movs	r3, #56	@ 0x38
 80081fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081fe:	2302      	movs	r3, #2
 8008200:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008204:	2300      	movs	r3, #0
 8008206:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800820a:	2300      	movs	r3, #0
 800820c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8008210:	2308      	movs	r3, #8
 8008212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008216:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800821a:	4619      	mov	r1, r3
 800821c:	4805      	ldr	r0, [pc, #20]	@ (8008234 <HAL_SPI_MspInit+0x210>)
 800821e:	f006 f935 	bl	800e48c <HAL_GPIO_Init>
}
 8008222:	bf00      	nop
 8008224:	37e8      	adds	r7, #232	@ 0xe8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	40003800 	.word	0x40003800
 8008230:	58024400 	.word	0x58024400
 8008234:	58020400 	.word	0x58020400
 8008238:	240002fc 	.word	0x240002fc
 800823c:	40020010 	.word	0x40020010
 8008240:	58001400 	.word	0x58001400

08008244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800824a:	4b0a      	ldr	r3, [pc, #40]	@ (8008274 <HAL_MspInit+0x30>)
 800824c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008250:	4a08      	ldr	r2, [pc, #32]	@ (8008274 <HAL_MspInit+0x30>)
 8008252:	f043 0302 	orr.w	r3, r3, #2
 8008256:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800825a:	4b06      	ldr	r3, [pc, #24]	@ (8008274 <HAL_MspInit+0x30>)
 800825c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	607b      	str	r3, [r7, #4]
 8008266:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	58024400 	.word	0x58024400

08008278 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 8008278:	b480      	push	{r7}
 800827a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800827c:	4b0b      	ldr	r3, [pc, #44]	@ (80082ac <SDTimer_Handler+0x34>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d004      	beq.n	800828e <SDTimer_Handler+0x16>
    Timer1--;
 8008284:	4b09      	ldr	r3, [pc, #36]	@ (80082ac <SDTimer_Handler+0x34>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3b01      	subs	r3, #1
 800828a:	4a08      	ldr	r2, [pc, #32]	@ (80082ac <SDTimer_Handler+0x34>)
 800828c:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 800828e:	4b08      	ldr	r3, [pc, #32]	@ (80082b0 <SDTimer_Handler+0x38>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d004      	beq.n	80082a0 <SDTimer_Handler+0x28>
    Timer2--;
 8008296:	4b06      	ldr	r3, [pc, #24]	@ (80082b0 <SDTimer_Handler+0x38>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	3b01      	subs	r3, #1
 800829c:	4a04      	ldr	r2, [pc, #16]	@ (80082b0 <SDTimer_Handler+0x38>)
 800829e:	6013      	str	r3, [r2, #0]
}
 80082a0:	bf00      	nop
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	24000378 	.word	0x24000378
 80082b0:	2400037c 	.word	0x2400037c
 80082b4:	00000000 	.word	0x00000000

080082b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 80082be:	2200      	movs	r2, #0
 80082c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80082c4:	48bc      	ldr	r0, [pc, #752]	@ (80085b8 <NMI_Handler+0x300>)
 80082c6:	f006 faa1 	bl	800e80c <HAL_GPIO_WritePin>
	LED_Y_0;
 80082ca:	2200      	movs	r2, #0
 80082cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80082d0:	48ba      	ldr	r0, [pc, #744]	@ (80085bc <NMI_Handler+0x304>)
 80082d2:	f006 fa9b 	bl	800e80c <HAL_GPIO_WritePin>
	LED_R_1;
 80082d6:	2201      	movs	r2, #1
 80082d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80082dc:	48b7      	ldr	r0, [pc, #732]	@ (80085bc <NMI_Handler+0x304>)
 80082de:	f006 fa95 	bl	800e80c <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 80082e2:	48b7      	ldr	r0, [pc, #732]	@ (80085c0 <NMI_Handler+0x308>)
 80082e4:	f015 fd2a 	bl	801dd3c <f_close>

	wanted_rool = 0;
 80082e8:	4bb6      	ldr	r3, [pc, #728]	@ (80085c4 <NMI_Handler+0x30c>)
 80082ea:	f04f 0200 	mov.w	r2, #0
 80082ee:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80082f0:	4bb5      	ldr	r3, [pc, #724]	@ (80085c8 <NMI_Handler+0x310>)
 80082f2:	f04f 0200 	mov.w	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80082f8:	4bb4      	ldr	r3, [pc, #720]	@ (80085cc <NMI_Handler+0x314>)
 80082fa:	f04f 0200 	mov.w	r2, #0
 80082fe:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008300:	4bb3      	ldr	r3, [pc, #716]	@ (80085d0 <NMI_Handler+0x318>)
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	b21a      	sxth	r2, r3
 8008306:	4bb3      	ldr	r3, [pc, #716]	@ (80085d4 <NMI_Handler+0x31c>)
 8008308:	801a      	strh	r2, [r3, #0]
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   	HAL_Delay(1);
 800830a:	2001      	movs	r0, #1
 800830c:	f001 f942 	bl	8009594 <HAL_Delay>
		MPU6050_GET_ACCANDGYR_CALANDSCL(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 8008310:	4bb1      	ldr	r3, [pc, #708]	@ (80085d8 <NMI_Handler+0x320>)
 8008312:	edd3 7a00 	vldr	s15, [r3]
 8008316:	4bb1      	ldr	r3, [pc, #708]	@ (80085dc <NMI_Handler+0x324>)
 8008318:	ed93 7a00 	vldr	s14, [r3]
 800831c:	4bb0      	ldr	r3, [pc, #704]	@ (80085e0 <NMI_Handler+0x328>)
 800831e:	edd3 6a00 	vldr	s13, [r3]
 8008322:	4bb0      	ldr	r3, [pc, #704]	@ (80085e4 <NMI_Handler+0x32c>)
 8008324:	ed93 6a00 	vldr	s12, [r3]
 8008328:	4baf      	ldr	r3, [pc, #700]	@ (80085e8 <NMI_Handler+0x330>)
 800832a:	edd3 5a00 	vldr	s11, [r3]
 800832e:	4baf      	ldr	r3, [pc, #700]	@ (80085ec <NMI_Handler+0x334>)
 8008330:	ed93 5a00 	vldr	s10, [r3]
 8008334:	4bae      	ldr	r3, [pc, #696]	@ (80085f0 <NMI_Handler+0x338>)
 8008336:	edd3 4a00 	vldr	s9, [r3]
 800833a:	4bae      	ldr	r3, [pc, #696]	@ (80085f4 <NMI_Handler+0x33c>)
 800833c:	ed93 4a00 	vldr	s8, [r3]
 8008340:	4bad      	ldr	r3, [pc, #692]	@ (80085f8 <NMI_Handler+0x340>)
 8008342:	9301      	str	r3, [sp, #4]
 8008344:	4bad      	ldr	r3, [pc, #692]	@ (80085fc <NMI_Handler+0x344>)
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	eef0 3a44 	vmov.f32	s7, s8
 800834c:	eeb0 3a64 	vmov.f32	s6, s9
 8008350:	eef0 2a45 	vmov.f32	s5, s10
 8008354:	eeb0 2a65 	vmov.f32	s4, s11
 8008358:	eef0 1a46 	vmov.f32	s3, s12
 800835c:	eeb0 1a66 	vmov.f32	s2, s13
 8008360:	eef0 0a47 	vmov.f32	s1, s14
 8008364:	eeb0 0a67 	vmov.f32	s0, s15
 8008368:	4ba5      	ldr	r3, [pc, #660]	@ (8008600 <NMI_Handler+0x348>)
 800836a:	4aa6      	ldr	r2, [pc, #664]	@ (8008604 <NMI_Handler+0x34c>)
 800836c:	49a6      	ldr	r1, [pc, #664]	@ (8008608 <NMI_Handler+0x350>)
 800836e:	48a7      	ldr	r0, [pc, #668]	@ (800860c <NMI_Handler+0x354>)
 8008370:	f7f9 f944 	bl	80015fc <MPU6050_GET_ACCANDGYR_CALANDSCL>
		MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 8008374:	4ba5      	ldr	r3, [pc, #660]	@ (800860c <NMI_Handler+0x354>)
 8008376:	edd3 7a00 	vldr	s15, [r3]
 800837a:	4ba3      	ldr	r3, [pc, #652]	@ (8008608 <NMI_Handler+0x350>)
 800837c:	ed93 7a00 	vldr	s14, [r3]
 8008380:	4ba0      	ldr	r3, [pc, #640]	@ (8008604 <NMI_Handler+0x34c>)
 8008382:	edd3 6a00 	vldr	s13, [r3]
 8008386:	49a2      	ldr	r1, [pc, #648]	@ (8008610 <NMI_Handler+0x358>)
 8008388:	48a2      	ldr	r0, [pc, #648]	@ (8008614 <NMI_Handler+0x35c>)
 800838a:	eeb0 1a66 	vmov.f32	s2, s13
 800838e:	eef0 0a47 	vmov.f32	s1, s14
 8008392:	eeb0 0a67 	vmov.f32	s0, s15
 8008396:	f7f9 f8a7 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
		MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 800839a:	4b9e      	ldr	r3, [pc, #632]	@ (8008614 <NMI_Handler+0x35c>)
 800839c:	edd3 7a00 	vldr	s15, [r3]
 80083a0:	4b9b      	ldr	r3, [pc, #620]	@ (8008610 <NMI_Handler+0x358>)
 80083a2:	ed93 7a00 	vldr	s14, [r3]
 80083a6:	4b9c      	ldr	r3, [pc, #624]	@ (8008618 <NMI_Handler+0x360>)
 80083a8:	edd3 6a00 	vldr	s13, [r3]
 80083ac:	4b94      	ldr	r3, [pc, #592]	@ (8008600 <NMI_Handler+0x348>)
 80083ae:	ed93 6a00 	vldr	s12, [r3]
 80083b2:	4b92      	ldr	r3, [pc, #584]	@ (80085fc <NMI_Handler+0x344>)
 80083b4:	edd3 5a00 	vldr	s11, [r3]
 80083b8:	4b8f      	ldr	r3, [pc, #572]	@ (80085f8 <NMI_Handler+0x340>)
 80083ba:	ed93 5a00 	vldr	s10, [r3]
 80083be:	eef0 2a45 	vmov.f32	s5, s10
 80083c2:	eeb0 2a65 	vmov.f32	s4, s11
 80083c6:	eef0 1a46 	vmov.f32	s3, s12
 80083ca:	eeb0 1a66 	vmov.f32	s2, s13
 80083ce:	eef0 0a47 	vmov.f32	s1, s14
 80083d2:	eeb0 0a67 	vmov.f32	s0, s15
 80083d6:	4891      	ldr	r0, [pc, #580]	@ (800861c <NMI_Handler+0x364>)
 80083d8:	f7f9 fa8a 	bl	80018f0 <MPU6050_GET_ACCANDGYR_FILTRED>


		now_pitch = data.x;
 80083dc:	4b8f      	ldr	r3, [pc, #572]	@ (800861c <NMI_Handler+0x364>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a8f      	ldr	r2, [pc, #572]	@ (8008620 <NMI_Handler+0x368>)
 80083e2:	6013      	str	r3, [r2, #0]
		now_rool = data.y;
 80083e4:	4b8d      	ldr	r3, [pc, #564]	@ (800861c <NMI_Handler+0x364>)
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	4a8e      	ldr	r2, [pc, #568]	@ (8008624 <NMI_Handler+0x36c>)
 80083ea:	6013      	str	r3, [r2, #0]
		now_yaw = data.z;
 80083ec:	4b8b      	ldr	r3, [pc, #556]	@ (800861c <NMI_Handler+0x364>)
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	4a8d      	ldr	r2, [pc, #564]	@ (8008628 <NMI_Handler+0x370>)
 80083f2:	6013      	str	r3, [r2, #0]


		last_wanted_rool_rx = wanted_rool;
 80083f4:	4b73      	ldr	r3, [pc, #460]	@ (80085c4 <NMI_Handler+0x30c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a8c      	ldr	r2, [pc, #560]	@ (800862c <NMI_Handler+0x374>)
 80083fa:	6013      	str	r3, [r2, #0]
		last_wanted_pitch_rx = wanted_pitch;
 80083fc:	4b72      	ldr	r3, [pc, #456]	@ (80085c8 <NMI_Handler+0x310>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a8b      	ldr	r2, [pc, #556]	@ (8008630 <NMI_Handler+0x378>)
 8008402:	6013      	str	r3, [r2, #0]
		last_wanted_yaw_rx = wanted_yaw;
 8008404:	4b71      	ldr	r3, [pc, #452]	@ (80085cc <NMI_Handler+0x314>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a8a      	ldr	r2, [pc, #552]	@ (8008634 <NMI_Handler+0x37c>)
 800840a:	6013      	str	r3, [r2, #0]


		error_sum_pitch = error_sum_pitch + (wanted_pitch - now_pitch);
 800840c:	4b8a      	ldr	r3, [pc, #552]	@ (8008638 <NMI_Handler+0x380>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	ee07 3a90 	vmov	s15, r3
 8008414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008418:	4b6b      	ldr	r3, [pc, #428]	@ (80085c8 <NMI_Handler+0x310>)
 800841a:	edd3 6a00 	vldr	s13, [r3]
 800841e:	4b80      	ldr	r3, [pc, #512]	@ (8008620 <NMI_Handler+0x368>)
 8008420:	edd3 7a00 	vldr	s15, [r3]
 8008424:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800842c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008430:	ee17 2a90 	vmov	r2, s15
 8008434:	4b80      	ldr	r3, [pc, #512]	@ (8008638 <NMI_Handler+0x380>)
 8008436:	601a      	str	r2, [r3, #0]
		error_sum_rool = error_sum_rool + (wanted_rool - now_rool);
 8008438:	4b80      	ldr	r3, [pc, #512]	@ (800863c <NMI_Handler+0x384>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	ee07 3a90 	vmov	s15, r3
 8008440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008444:	4b5f      	ldr	r3, [pc, #380]	@ (80085c4 <NMI_Handler+0x30c>)
 8008446:	edd3 6a00 	vldr	s13, [r3]
 800844a:	4b76      	ldr	r3, [pc, #472]	@ (8008624 <NMI_Handler+0x36c>)
 800844c:	edd3 7a00 	vldr	s15, [r3]
 8008450:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800845c:	ee17 2a90 	vmov	r2, s15
 8008460:	4b76      	ldr	r3, [pc, #472]	@ (800863c <NMI_Handler+0x384>)
 8008462:	601a      	str	r2, [r3, #0]
		error_sum_yaw = error_sum_yaw + (wanted_yaw - now_yaw);
 8008464:	4b76      	ldr	r3, [pc, #472]	@ (8008640 <NMI_Handler+0x388>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	ee07 3a90 	vmov	s15, r3
 800846c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008470:	4b56      	ldr	r3, [pc, #344]	@ (80085cc <NMI_Handler+0x314>)
 8008472:	edd3 6a00 	vldr	s13, [r3]
 8008476:	4b6c      	ldr	r3, [pc, #432]	@ (8008628 <NMI_Handler+0x370>)
 8008478:	edd3 7a00 	vldr	s15, [r3]
 800847c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008488:	ee17 2a90 	vmov	r2, s15
 800848c:	4b6c      	ldr	r3, [pc, #432]	@ (8008640 <NMI_Handler+0x388>)
 800848e:	601a      	str	r2, [r3, #0]

		error_sum_angular_rate_pitch = error_sum_angular_rate_pitch + (pid_pitch - gx);
 8008490:	4b6c      	ldr	r3, [pc, #432]	@ (8008644 <NMI_Handler+0x38c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	ee07 3a90 	vmov	s15, r3
 8008498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800849c:	4b6a      	ldr	r3, [pc, #424]	@ (8008648 <NMI_Handler+0x390>)
 800849e:	edd3 6a00 	vldr	s13, [r3]
 80084a2:	4b57      	ldr	r3, [pc, #348]	@ (8008600 <NMI_Handler+0x348>)
 80084a4:	edd3 7a00 	vldr	s15, [r3]
 80084a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80084ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084b4:	ee17 2a90 	vmov	r2, s15
 80084b8:	4b62      	ldr	r3, [pc, #392]	@ (8008644 <NMI_Handler+0x38c>)
 80084ba:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_rool = error_sum_angular_rate_rool + (pid_rool - gy);
 80084bc:	4b63      	ldr	r3, [pc, #396]	@ (800864c <NMI_Handler+0x394>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	ee07 3a90 	vmov	s15, r3
 80084c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084c8:	4b61      	ldr	r3, [pc, #388]	@ (8008650 <NMI_Handler+0x398>)
 80084ca:	edd3 6a00 	vldr	s13, [r3]
 80084ce:	4b4b      	ldr	r3, [pc, #300]	@ (80085fc <NMI_Handler+0x344>)
 80084d0:	edd3 7a00 	vldr	s15, [r3]
 80084d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80084d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084e0:	ee17 2a90 	vmov	r2, s15
 80084e4:	4b59      	ldr	r3, [pc, #356]	@ (800864c <NMI_Handler+0x394>)
 80084e6:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_yaw = error_sum_angular_rate_yaw + (pid_yaw - gz);
 80084e8:	4b5a      	ldr	r3, [pc, #360]	@ (8008654 <NMI_Handler+0x39c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	ee07 3a90 	vmov	s15, r3
 80084f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084f4:	4b58      	ldr	r3, [pc, #352]	@ (8008658 <NMI_Handler+0x3a0>)
 80084f6:	edd3 6a00 	vldr	s13, [r3]
 80084fa:	4b3f      	ldr	r3, [pc, #252]	@ (80085f8 <NMI_Handler+0x340>)
 80084fc:	edd3 7a00 	vldr	s15, [r3]
 8008500:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800850c:	ee17 2a90 	vmov	r2, s15
 8008510:	4b50      	ldr	r3, [pc, #320]	@ (8008654 <NMI_Handler+0x39c>)
 8008512:	601a      	str	r2, [r3, #0]


		PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8008514:	2201      	movs	r2, #1
 8008516:	4951      	ldr	r1, [pc, #324]	@ (800865c <NMI_Handler+0x3a4>)
 8008518:	484b      	ldr	r0, [pc, #300]	@ (8008648 <NMI_Handler+0x390>)
 800851a:	f7fb fa57 	bl	80039cc <PID_cal>
		PID_cal(&pid_rool, PID_FAC_Rool, 2);
 800851e:	2202      	movs	r2, #2
 8008520:	494f      	ldr	r1, [pc, #316]	@ (8008660 <NMI_Handler+0x3a8>)
 8008522:	484b      	ldr	r0, [pc, #300]	@ (8008650 <NMI_Handler+0x398>)
 8008524:	f7fb fa52 	bl	80039cc <PID_cal>

		PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8008528:	2204      	movs	r2, #4
 800852a:	494e      	ldr	r1, [pc, #312]	@ (8008664 <NMI_Handler+0x3ac>)
 800852c:	484e      	ldr	r0, [pc, #312]	@ (8008668 <NMI_Handler+0x3b0>)
 800852e:	f7fb fa4d 	bl	80039cc <PID_cal>
		PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 8008532:	2205      	movs	r2, #5
 8008534:	494d      	ldr	r1, [pc, #308]	@ (800866c <NMI_Handler+0x3b4>)
 8008536:	484e      	ldr	r0, [pc, #312]	@ (8008670 <NMI_Handler+0x3b8>)
 8008538:	f7fb fa48 	bl	80039cc <PID_cal>
		PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 800853c:	2206      	movs	r2, #6
 800853e:	494d      	ldr	r1, [pc, #308]	@ (8008674 <NMI_Handler+0x3bc>)
 8008540:	484d      	ldr	r0, [pc, #308]	@ (8008678 <NMI_Handler+0x3c0>)
 8008542:	f7fb fa43 	bl	80039cc <PID_cal>


		old_error_pitch = wanted_pitch - now_pitch;
 8008546:	4b20      	ldr	r3, [pc, #128]	@ (80085c8 <NMI_Handler+0x310>)
 8008548:	ed93 7a00 	vldr	s14, [r3]
 800854c:	4b34      	ldr	r3, [pc, #208]	@ (8008620 <NMI_Handler+0x368>)
 800854e:	edd3 7a00 	vldr	s15, [r3]
 8008552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008556:	4b49      	ldr	r3, [pc, #292]	@ (800867c <NMI_Handler+0x3c4>)
 8008558:	edc3 7a00 	vstr	s15, [r3]
		old_error_rool = wanted_rool - now_rool;
 800855c:	4b19      	ldr	r3, [pc, #100]	@ (80085c4 <NMI_Handler+0x30c>)
 800855e:	ed93 7a00 	vldr	s14, [r3]
 8008562:	4b30      	ldr	r3, [pc, #192]	@ (8008624 <NMI_Handler+0x36c>)
 8008564:	edd3 7a00 	vldr	s15, [r3]
 8008568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800856c:	4b44      	ldr	r3, [pc, #272]	@ (8008680 <NMI_Handler+0x3c8>)
 800856e:	edc3 7a00 	vstr	s15, [r3]

		old_error_angular_rate_pitch = pid_pitch - gx;
 8008572:	4b35      	ldr	r3, [pc, #212]	@ (8008648 <NMI_Handler+0x390>)
 8008574:	ed93 7a00 	vldr	s14, [r3]
 8008578:	4b21      	ldr	r3, [pc, #132]	@ (8008600 <NMI_Handler+0x348>)
 800857a:	edd3 7a00 	vldr	s15, [r3]
 800857e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008582:	4b40      	ldr	r3, [pc, #256]	@ (8008684 <NMI_Handler+0x3cc>)
 8008584:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_rool = pid_rool - gy;
 8008588:	4b31      	ldr	r3, [pc, #196]	@ (8008650 <NMI_Handler+0x398>)
 800858a:	ed93 7a00 	vldr	s14, [r3]
 800858e:	4b1b      	ldr	r3, [pc, #108]	@ (80085fc <NMI_Handler+0x344>)
 8008590:	edd3 7a00 	vldr	s15, [r3]
 8008594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008598:	4b3b      	ldr	r3, [pc, #236]	@ (8008688 <NMI_Handler+0x3d0>)
 800859a:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_yaw = wanted_yaw - gz;
 800859e:	4b0b      	ldr	r3, [pc, #44]	@ (80085cc <NMI_Handler+0x314>)
 80085a0:	ed93 7a00 	vldr	s14, [r3]
 80085a4:	4b14      	ldr	r3, [pc, #80]	@ (80085f8 <NMI_Handler+0x340>)
 80085a6:	edd3 7a00 	vldr	s15, [r3]
 80085aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085ae:	4b37      	ldr	r3, [pc, #220]	@ (800868c <NMI_Handler+0x3d4>)
 80085b0:	edc3 7a00 	vstr	s15, [r3]
 80085b4:	e06c      	b.n	8008690 <NMI_Handler+0x3d8>
 80085b6:	bf00      	nop
 80085b8:	58021000 	.word	0x58021000
 80085bc:	58020400 	.word	0x58020400
 80085c0:	24001ef0 	.word	0x24001ef0
 80085c4:	0000406c 	.word	0x0000406c
 80085c8:	00004068 	.word	0x00004068
 80085cc:	00004070 	.word	0x00004070
 80085d0:	0801ea60 	.word	0x0801ea60
 80085d4:	0000405c 	.word	0x0000405c
 80085d8:	00000030 	.word	0x00000030
 80085dc:	00000034 	.word	0x00000034
 80085e0:	00000038 	.word	0x00000038
 80085e4:	0000003c 	.word	0x0000003c
 80085e8:	00000040 	.word	0x00000040
 80085ec:	00000044 	.word	0x00000044
 80085f0:	0801ea54 	.word	0x0801ea54
 80085f4:	0801ea58 	.word	0x0801ea58
 80085f8:	00000014 	.word	0x00000014
 80085fc:	00000010 	.word	0x00000010
 8008600:	0000000c 	.word	0x0000000c
 8008604:	00000008 	.word	0x00000008
 8008608:	00000004 	.word	0x00000004
 800860c:	00000000 	.word	0x00000000
 8008610:	0000001c 	.word	0x0000001c
 8008614:	00000018 	.word	0x00000018
 8008618:	00000058 	.word	0x00000058
 800861c:	0000007c 	.word	0x0000007c
 8008620:	00004078 	.word	0x00004078
 8008624:	0000407c 	.word	0x0000407c
 8008628:	00004080 	.word	0x00004080
 800862c:	00004054 	.word	0x00004054
 8008630:	00004050 	.word	0x00004050
 8008634:	00004058 	.word	0x00004058
 8008638:	000040b4 	.word	0x000040b4
 800863c:	000040b8 	.word	0x000040b8
 8008640:	000040bc 	.word	0x000040bc
 8008644:	000040c0 	.word	0x000040c0
 8008648:	000040cc 	.word	0x000040cc
 800864c:	000040c4 	.word	0x000040c4
 8008650:	000040d4 	.word	0x000040d4
 8008654:	000040c8 	.word	0x000040c8
 8008658:	000040d0 	.word	0x000040d0
 800865c:	00004108 	.word	0x00004108
 8008660:	0000411c 	.word	0x0000411c
 8008664:	00004168 	.word	0x00004168
 8008668:	000040d8 	.word	0x000040d8
 800866c:	0000417c 	.word	0x0000417c
 8008670:	000040e0 	.word	0x000040e0
 8008674:	00004190 	.word	0x00004190
 8008678:	000040dc 	.word	0x000040dc
 800867c:	0000409c 	.word	0x0000409c
 8008680:	000040a0 	.word	0x000040a0
 8008684:	000040a8 	.word	0x000040a8
 8008688:	000040ac 	.word	0x000040ac
 800868c:	000040b0 	.word	0x000040b0


		MYDRON.ROOL = pid_angular_rate_rool;
 8008690:	4b99      	ldr	r3, [pc, #612]	@ (80088f8 <NMI_Handler+0x640>)
 8008692:	edd3 7a00 	vldr	s15, [r3]
 8008696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800869a:	ee17 3a90 	vmov	r3, s15
 800869e:	b21a      	sxth	r2, r3
 80086a0:	4b96      	ldr	r3, [pc, #600]	@ (80088fc <NMI_Handler+0x644>)
 80086a2:	80da      	strh	r2, [r3, #6]
		MYDRON.PITCH = pid_angular_rate_pitch;
 80086a4:	4b96      	ldr	r3, [pc, #600]	@ (8008900 <NMI_Handler+0x648>)
 80086a6:	edd3 7a00 	vldr	s15, [r3]
 80086aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086ae:	ee17 3a90 	vmov	r3, s15
 80086b2:	b21a      	sxth	r2, r3
 80086b4:	4b91      	ldr	r3, [pc, #580]	@ (80088fc <NMI_Handler+0x644>)
 80086b6:	809a      	strh	r2, [r3, #4]
		MYDRON.YAW = pid_angular_rate_yaw;
 80086b8:	4b92      	ldr	r3, [pc, #584]	@ (8008904 <NMI_Handler+0x64c>)
 80086ba:	edd3 7a00 	vldr	s15, [r3]
 80086be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086c2:	ee17 3a90 	vmov	r3, s15
 80086c6:	b21a      	sxth	r2, r3
 80086c8:	4b8c      	ldr	r3, [pc, #560]	@ (80088fc <NMI_Handler+0x644>)
 80086ca:	811a      	strh	r2, [r3, #8]



		Thrust_filter(1);
 80086cc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80086d0:	f7fb f852 	bl	8003778 <Thrust_filter>
		if(MYDRON.THRUST > thrust_limit){
 80086d4:	4b89      	ldr	r3, [pc, #548]	@ (80088fc <NMI_Handler+0x644>)
 80086d6:	885b      	ldrh	r3, [r3, #2]
 80086d8:	461a      	mov	r2, r3
 80086da:	4b8b      	ldr	r3, [pc, #556]	@ (8008908 <NMI_Handler+0x650>)
 80086dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	dd05      	ble.n	80086f0 <NMI_Handler+0x438>
			MYDRON.THRUST = thrust_limit;
 80086e4:	4b88      	ldr	r3, [pc, #544]	@ (8008908 <NMI_Handler+0x650>)
 80086e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	4b83      	ldr	r3, [pc, #524]	@ (80088fc <NMI_Handler+0x644>)
 80086ee:	805a      	strh	r2, [r3, #2]
		}


		SPEED1 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//trust 7000 max
 80086f0:	4b82      	ldr	r3, [pc, #520]	@ (80088fc <NMI_Handler+0x644>)
 80086f2:	885b      	ldrh	r3, [r3, #2]
 80086f4:	ee07 3a90 	vmov	s15, r3
 80086f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80086fc:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 80088e0 <NMI_Handler+0x628>
 8008700:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008704:	4b7d      	ldr	r3, [pc, #500]	@ (80088fc <NMI_Handler+0x644>)
 8008706:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800870a:	ee07 3a90 	vmov	s15, r3
 800870e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008712:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008716:	4b79      	ldr	r3, [pc, #484]	@ (80088fc <NMI_Handler+0x644>)
 8008718:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800871c:	ee07 3a90 	vmov	s15, r3
 8008720:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008724:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008728:	4b74      	ldr	r3, [pc, #464]	@ (80088fc <NMI_Handler+0x644>)
 800872a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008736:	ee36 7b07 	vadd.f64	d7, d6, d7
 800873a:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 80088e8 <NMI_Handler+0x630>
 800873e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008742:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 80088f0 <NMI_Handler+0x638>
 8008746:	ee37 7b06 	vadd.f64	d7, d7, d6
 800874a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800874e:	ee17 3a90 	vmov	r3, s15
 8008752:	b29a      	uxth	r2, r3
 8008754:	4b6d      	ldr	r3, [pc, #436]	@ (800890c <NMI_Handler+0x654>)
 8008756:	801a      	strh	r2, [r3, #0]
		SPEED2 = (MYDRON.THRUST*0.7)- MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8008758:	4b68      	ldr	r3, [pc, #416]	@ (80088fc <NMI_Handler+0x644>)
 800875a:	885b      	ldrh	r3, [r3, #2]
 800875c:	ee07 3a90 	vmov	s15, r3
 8008760:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008764:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 80088e0 <NMI_Handler+0x628>
 8008768:	ee27 6b06 	vmul.f64	d6, d7, d6
 800876c:	4b63      	ldr	r3, [pc, #396]	@ (80088fc <NMI_Handler+0x644>)
 800876e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800877a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800877e:	4b5f      	ldr	r3, [pc, #380]	@ (80088fc <NMI_Handler+0x644>)
 8008780:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008784:	ee07 3a90 	vmov	s15, r3
 8008788:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800878c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008790:	4b5a      	ldr	r3, [pc, #360]	@ (80088fc <NMI_Handler+0x644>)
 8008792:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008796:	ee07 3a90 	vmov	s15, r3
 800879a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800879e:	ee36 7b47 	vsub.f64	d7, d6, d7
 80087a2:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 80088e8 <NMI_Handler+0x630>
 80087a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80087aa:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 80088f0 <NMI_Handler+0x638>
 80087ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80087b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80087b6:	ee17 3a90 	vmov	r3, s15
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	4b54      	ldr	r3, [pc, #336]	@ (8008910 <NMI_Handler+0x658>)
 80087be:	801a      	strh	r2, [r3, #0]
		SPEED3 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 80087c0:	4b4e      	ldr	r3, [pc, #312]	@ (80088fc <NMI_Handler+0x644>)
 80087c2:	885b      	ldrh	r3, [r3, #2]
 80087c4:	ee07 3a90 	vmov	s15, r3
 80087c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087cc:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 80088e0 <NMI_Handler+0x628>
 80087d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80087d4:	4b49      	ldr	r3, [pc, #292]	@ (80088fc <NMI_Handler+0x644>)
 80087d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80087da:	ee07 3a90 	vmov	s15, r3
 80087de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087e2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80087e6:	4b45      	ldr	r3, [pc, #276]	@ (80088fc <NMI_Handler+0x644>)
 80087e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80087ec:	ee07 3a90 	vmov	s15, r3
 80087f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087f4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80087f8:	4b40      	ldr	r3, [pc, #256]	@ (80088fc <NMI_Handler+0x644>)
 80087fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80087fe:	ee07 3a90 	vmov	s15, r3
 8008802:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008806:	ee36 7b47 	vsub.f64	d7, d6, d7
 800880a:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 80088e8 <NMI_Handler+0x630>
 800880e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008812:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 80088f0 <NMI_Handler+0x638>
 8008816:	ee37 7b06 	vadd.f64	d7, d7, d6
 800881a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800881e:	ee17 3a90 	vmov	r3, s15
 8008822:	b29a      	uxth	r2, r3
 8008824:	4b3b      	ldr	r3, [pc, #236]	@ (8008914 <NMI_Handler+0x65c>)
 8008826:	801a      	strh	r2, [r3, #0]
		SPEED4 = (MYDRON.THRUST*0.7)- MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//
 8008828:	4b34      	ldr	r3, [pc, #208]	@ (80088fc <NMI_Handler+0x644>)
 800882a:	885b      	ldrh	r3, [r3, #2]
 800882c:	ee07 3a90 	vmov	s15, r3
 8008830:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008834:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 80088e0 <NMI_Handler+0x628>
 8008838:	ee27 6b06 	vmul.f64	d6, d7, d6
 800883c:	4b2f      	ldr	r3, [pc, #188]	@ (80088fc <NMI_Handler+0x644>)
 800883e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008842:	ee07 3a90 	vmov	s15, r3
 8008846:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800884a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800884e:	4b2b      	ldr	r3, [pc, #172]	@ (80088fc <NMI_Handler+0x644>)
 8008850:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008854:	ee07 3a90 	vmov	s15, r3
 8008858:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800885c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008860:	4b26      	ldr	r3, [pc, #152]	@ (80088fc <NMI_Handler+0x644>)
 8008862:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008866:	ee07 3a90 	vmov	s15, r3
 800886a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800886e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008872:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80088e8 <NMI_Handler+0x630>
 8008876:	ee37 7b06 	vadd.f64	d7, d7, d6
 800887a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80088f0 <NMI_Handler+0x638>
 800887e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008882:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008886:	ee17 3a90 	vmov	r3, s15
 800888a:	b29a      	uxth	r2, r3
 800888c:	4b22      	ldr	r3, [pc, #136]	@ (8008918 <NMI_Handler+0x660>)
 800888e:	801a      	strh	r2, [r3, #0]

		ESC_1_SPEED(SPEED1);
 8008890:	4b1e      	ldr	r3, [pc, #120]	@ (800890c <NMI_Handler+0x654>)
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	4618      	mov	r0, r3
 8008896:	f7f8 facd 	bl	8000e34 <ESC_1_SPEED>
		ESC_2_SPEED(SPEED2);
 800889a:	4b1d      	ldr	r3, [pc, #116]	@ (8008910 <NMI_Handler+0x658>)
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	4618      	mov	r0, r3
 80088a0:	f7f8 faea 	bl	8000e78 <ESC_2_SPEED>
		ESC_3_SPEED(SPEED3);
 80088a4:	4b1b      	ldr	r3, [pc, #108]	@ (8008914 <NMI_Handler+0x65c>)
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7f8 fb07 	bl	8000ebc <ESC_3_SPEED>
		ESC_4_SPEED(SPEED4);
 80088ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008918 <NMI_Handler+0x660>)
 80088b0:	881b      	ldrh	r3, [r3, #0]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7f8 fb24 	bl	8000f00 <ESC_4_SPEED>


		OLD_SPEED1 = SPEED1;
 80088b8:	4b14      	ldr	r3, [pc, #80]	@ (800890c <NMI_Handler+0x654>)
 80088ba:	881a      	ldrh	r2, [r3, #0]
 80088bc:	4b17      	ldr	r3, [pc, #92]	@ (800891c <NMI_Handler+0x664>)
 80088be:	801a      	strh	r2, [r3, #0]
		OLD_SPEED2 = SPEED2;
 80088c0:	4b13      	ldr	r3, [pc, #76]	@ (8008910 <NMI_Handler+0x658>)
 80088c2:	881a      	ldrh	r2, [r3, #0]
 80088c4:	4b16      	ldr	r3, [pc, #88]	@ (8008920 <NMI_Handler+0x668>)
 80088c6:	801a      	strh	r2, [r3, #0]
		OLD_SPEED3 = SPEED3;
 80088c8:	4b12      	ldr	r3, [pc, #72]	@ (8008914 <NMI_Handler+0x65c>)
 80088ca:	881a      	ldrh	r2, [r3, #0]
 80088cc:	4b15      	ldr	r3, [pc, #84]	@ (8008924 <NMI_Handler+0x66c>)
 80088ce:	801a      	strh	r2, [r3, #0]
		OLD_SPEED4 = SPEED4;
 80088d0:	4b11      	ldr	r3, [pc, #68]	@ (8008918 <NMI_Handler+0x660>)
 80088d2:	881a      	ldrh	r2, [r3, #0]
 80088d4:	4b14      	ldr	r3, [pc, #80]	@ (8008928 <NMI_Handler+0x670>)
 80088d6:	801a      	strh	r2, [r3, #0]
	   	HAL_Delay(1);
 80088d8:	e517      	b.n	800830a <NMI_Handler+0x52>
 80088da:	bf00      	nop
 80088dc:	f3af 8000 	nop.w
 80088e0:	66666666 	.word	0x66666666
 80088e4:	3fe66666 	.word	0x3fe66666
 80088e8:	00000000 	.word	0x00000000
 80088ec:	40c48200 	.word	0x40c48200
 80088f0:	00000000 	.word	0x00000000
 80088f4:	407f4000 	.word	0x407f4000
 80088f8:	000040e0 	.word	0x000040e0
 80088fc:	00000178 	.word	0x00000178
 8008900:	000040d8 	.word	0x000040d8
 8008904:	000040dc 	.word	0x000040dc
 8008908:	0000405e 	.word	0x0000405e
 800890c:	000041a4 	.word	0x000041a4
 8008910:	000041a6 	.word	0x000041a6
 8008914:	000041a8 	.word	0x000041a8
 8008918:	000041aa 	.word	0x000041aa
 800891c:	000041ac 	.word	0x000041ac
 8008920:	000041ae 	.word	0x000041ae
 8008924:	000041b0 	.word	0x000041b0
 8008928:	000041b2 	.word	0x000041b2

0800892c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 8008930:	2201      	movs	r2, #1
 8008932:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008936:	4812      	ldr	r0, [pc, #72]	@ (8008980 <HardFault_Handler+0x54>)
 8008938:	f005 ff68 	bl	800e80c <HAL_GPIO_WritePin>
	LED_Y_0;
 800893c:	2200      	movs	r2, #0
 800893e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008942:	4810      	ldr	r0, [pc, #64]	@ (8008984 <HardFault_Handler+0x58>)
 8008944:	f005 ff62 	bl	800e80c <HAL_GPIO_WritePin>
	LED_R_1;
 8008948:	2201      	movs	r2, #1
 800894a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800894e:	480d      	ldr	r0, [pc, #52]	@ (8008984 <HardFault_Handler+0x58>)
 8008950:	f005 ff5c 	bl	800e80c <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008954:	480c      	ldr	r0, [pc, #48]	@ (8008988 <HardFault_Handler+0x5c>)
 8008956:	f015 f9f1 	bl	801dd3c <f_close>
	wanted_rool = 0;
 800895a:	4b0c      	ldr	r3, [pc, #48]	@ (800898c <HardFault_Handler+0x60>)
 800895c:	f04f 0200 	mov.w	r2, #0
 8008960:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008962:	4b0b      	ldr	r3, [pc, #44]	@ (8008990 <HardFault_Handler+0x64>)
 8008964:	f04f 0200 	mov.w	r2, #0
 8008968:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 800896a:	4b0a      	ldr	r3, [pc, #40]	@ (8008994 <HardFault_Handler+0x68>)
 800896c:	f04f 0200 	mov.w	r2, #0
 8008970:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008972:	4b09      	ldr	r3, [pc, #36]	@ (8008998 <HardFault_Handler+0x6c>)
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	b21a      	sxth	r2, r3
 8008978:	4b08      	ldr	r3, [pc, #32]	@ (800899c <HardFault_Handler+0x70>)
 800897a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800897c:	bf00      	nop
 800897e:	e7fd      	b.n	800897c <HardFault_Handler+0x50>
 8008980:	58021000 	.word	0x58021000
 8008984:	58020400 	.word	0x58020400
 8008988:	24001ef0 	.word	0x24001ef0
 800898c:	0000406c 	.word	0x0000406c
 8008990:	00004068 	.word	0x00004068
 8008994:	00004070 	.word	0x00004070
 8008998:	0801ea60 	.word	0x0801ea60
 800899c:	0000405c 	.word	0x0000405c

080089a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 80089a4:	2200      	movs	r2, #0
 80089a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80089aa:	4812      	ldr	r0, [pc, #72]	@ (80089f4 <MemManage_Handler+0x54>)
 80089ac:	f005 ff2e 	bl	800e80c <HAL_GPIO_WritePin>
	LED_Y_0;
 80089b0:	2200      	movs	r2, #0
 80089b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80089b6:	4810      	ldr	r0, [pc, #64]	@ (80089f8 <MemManage_Handler+0x58>)
 80089b8:	f005 ff28 	bl	800e80c <HAL_GPIO_WritePin>
	LED_R_1;
 80089bc:	2201      	movs	r2, #1
 80089be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80089c2:	480d      	ldr	r0, [pc, #52]	@ (80089f8 <MemManage_Handler+0x58>)
 80089c4:	f005 ff22 	bl	800e80c <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80089c8:	480c      	ldr	r0, [pc, #48]	@ (80089fc <MemManage_Handler+0x5c>)
 80089ca:	f015 f9b7 	bl	801dd3c <f_close>
	wanted_rool = 0;
 80089ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008a00 <MemManage_Handler+0x60>)
 80089d0:	f04f 0200 	mov.w	r2, #0
 80089d4:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80089d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008a04 <MemManage_Handler+0x64>)
 80089d8:	f04f 0200 	mov.w	r2, #0
 80089dc:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80089de:	4b0a      	ldr	r3, [pc, #40]	@ (8008a08 <MemManage_Handler+0x68>)
 80089e0:	f04f 0200 	mov.w	r2, #0
 80089e4:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80089e6:	4b09      	ldr	r3, [pc, #36]	@ (8008a0c <MemManage_Handler+0x6c>)
 80089e8:	881b      	ldrh	r3, [r3, #0]
 80089ea:	b21a      	sxth	r2, r3
 80089ec:	4b08      	ldr	r3, [pc, #32]	@ (8008a10 <MemManage_Handler+0x70>)
 80089ee:	801a      	strh	r2, [r3, #0]
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80089f0:	bf00      	nop
 80089f2:	e7fd      	b.n	80089f0 <MemManage_Handler+0x50>
 80089f4:	58021000 	.word	0x58021000
 80089f8:	58020400 	.word	0x58020400
 80089fc:	24001ef0 	.word	0x24001ef0
 8008a00:	0000406c 	.word	0x0000406c
 8008a04:	00004068 	.word	0x00004068
 8008a08:	00004070 	.word	0x00004070
 8008a0c:	0801ea60 	.word	0x0801ea60
 8008a10:	0000405c 	.word	0x0000405c

08008a14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a1e:	4812      	ldr	r0, [pc, #72]	@ (8008a68 <BusFault_Handler+0x54>)
 8008a20:	f005 fef4 	bl	800e80c <HAL_GPIO_WritePin>
	LED_Y_1;
 8008a24:	2201      	movs	r2, #1
 8008a26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a2a:	4810      	ldr	r0, [pc, #64]	@ (8008a6c <BusFault_Handler+0x58>)
 8008a2c:	f005 feee 	bl	800e80c <HAL_GPIO_WritePin>
	LED_R_1;
 8008a30:	2201      	movs	r2, #1
 8008a32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008a36:	480d      	ldr	r0, [pc, #52]	@ (8008a6c <BusFault_Handler+0x58>)
 8008a38:	f005 fee8 	bl	800e80c <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008a3c:	480c      	ldr	r0, [pc, #48]	@ (8008a70 <BusFault_Handler+0x5c>)
 8008a3e:	f015 f97d 	bl	801dd3c <f_close>
	wanted_rool = 0;
 8008a42:	4b0c      	ldr	r3, [pc, #48]	@ (8008a74 <BusFault_Handler+0x60>)
 8008a44:	f04f 0200 	mov.w	r2, #0
 8008a48:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a78 <BusFault_Handler+0x64>)
 8008a4c:	f04f 0200 	mov.w	r2, #0
 8008a50:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008a52:	4b0a      	ldr	r3, [pc, #40]	@ (8008a7c <BusFault_Handler+0x68>)
 8008a54:	f04f 0200 	mov.w	r2, #0
 8008a58:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008a5a:	4b09      	ldr	r3, [pc, #36]	@ (8008a80 <BusFault_Handler+0x6c>)
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	b21a      	sxth	r2, r3
 8008a60:	4b08      	ldr	r3, [pc, #32]	@ (8008a84 <BusFault_Handler+0x70>)
 8008a62:	801a      	strh	r2, [r3, #0]
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a64:	bf00      	nop
 8008a66:	e7fd      	b.n	8008a64 <BusFault_Handler+0x50>
 8008a68:	58021000 	.word	0x58021000
 8008a6c:	58020400 	.word	0x58020400
 8008a70:	24001ef0 	.word	0x24001ef0
 8008a74:	0000406c 	.word	0x0000406c
 8008a78:	00004068 	.word	0x00004068
 8008a7c:	00004070 	.word	0x00004070
 8008a80:	0801ea60 	.word	0x0801ea60
 8008a84:	0000405c 	.word	0x0000405c

08008a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a92:	4812      	ldr	r0, [pc, #72]	@ (8008adc <UsageFault_Handler+0x54>)
 8008a94:	f005 feba 	bl	800e80c <HAL_GPIO_WritePin>
	LED_Y_1;
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a9e:	4810      	ldr	r0, [pc, #64]	@ (8008ae0 <UsageFault_Handler+0x58>)
 8008aa0:	f005 feb4 	bl	800e80c <HAL_GPIO_WritePin>
	LED_R_1;
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008aaa:	480d      	ldr	r0, [pc, #52]	@ (8008ae0 <UsageFault_Handler+0x58>)
 8008aac:	f005 feae 	bl	800e80c <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008ab0:	480c      	ldr	r0, [pc, #48]	@ (8008ae4 <UsageFault_Handler+0x5c>)
 8008ab2:	f015 f943 	bl	801dd3c <f_close>
	wanted_rool = 0;
 8008ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae8 <UsageFault_Handler+0x60>)
 8008ab8:	f04f 0200 	mov.w	r2, #0
 8008abc:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008abe:	4b0b      	ldr	r3, [pc, #44]	@ (8008aec <UsageFault_Handler+0x64>)
 8008ac0:	f04f 0200 	mov.w	r2, #0
 8008ac4:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8008af0 <UsageFault_Handler+0x68>)
 8008ac8:	f04f 0200 	mov.w	r2, #0
 8008acc:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008ace:	4b09      	ldr	r3, [pc, #36]	@ (8008af4 <UsageFault_Handler+0x6c>)
 8008ad0:	881b      	ldrh	r3, [r3, #0]
 8008ad2:	b21a      	sxth	r2, r3
 8008ad4:	4b08      	ldr	r3, [pc, #32]	@ (8008af8 <UsageFault_Handler+0x70>)
 8008ad6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ad8:	bf00      	nop
 8008ada:	e7fd      	b.n	8008ad8 <UsageFault_Handler+0x50>
 8008adc:	58021000 	.word	0x58021000
 8008ae0:	58020400 	.word	0x58020400
 8008ae4:	24001ef0 	.word	0x24001ef0
 8008ae8:	0000406c 	.word	0x0000406c
 8008aec:	00004068 	.word	0x00004068
 8008af0:	00004070 	.word	0x00004070
 8008af4:	0801ea60 	.word	0x0801ea60
 8008af8:	0000405c 	.word	0x0000405c

08008afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008afc:	b480      	push	{r7}
 8008afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008b00:	bf00      	nop
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b0e:	bf00      	nop
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b1c:	bf00      	nop
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
	...

08008b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8008b2c:	4b08      	ldr	r3, [pc, #32]	@ (8008b50 <SysTick_Handler+0x28>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3301      	adds	r3, #1
 8008b32:	4a07      	ldr	r2, [pc, #28]	@ (8008b50 <SysTick_Handler+0x28>)
 8008b34:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 8008b36:	4b06      	ldr	r3, [pc, #24]	@ (8008b50 <SysTick_Handler+0x28>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b09      	cmp	r3, #9
 8008b3c:	d904      	bls.n	8008b48 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 8008b3e:	4b04      	ldr	r3, [pc, #16]	@ (8008b50 <SysTick_Handler+0x28>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 8008b44:	f7ff fb98 	bl	8008278 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b48:	f000 fd04 	bl	8009554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b4c:	bf00      	nop
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	24000374 	.word	0x24000374

08008b54 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008b58:	4802      	ldr	r0, [pc, #8]	@ (8008b64 <DMA1_Stream0_IRQHandler+0x10>)
 8008b5a:	f004 f96b 	bl	800ce34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008b5e:	bf00      	nop
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	240002fc 	.word	0x240002fc

08008b68 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8008b6c:	4802      	ldr	r0, [pc, #8]	@ (8008b78 <ADC_IRQHandler+0x10>)
 8008b6e:	f001 fb3f 	bl	800a1f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008b72:	bf00      	nop
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	240000ac 	.word	0x240000ac

08008b7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008b80:	4802      	ldr	r0, [pc, #8]	@ (8008b8c <TIM2_IRQHandler+0x10>)
 8008b82:	f00d ff02 	bl	801698a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008b86:	bf00      	nop
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	240003cc 	.word	0x240003cc

08008b90 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008b94:	4802      	ldr	r0, [pc, #8]	@ (8008ba0 <SPI2_IRQHandler+0x10>)
 8008b96:	f00d f871 	bl	8015c7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008b9a:	bf00      	nop
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	240001ec 	.word	0x240001ec

08008ba4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008ba8:	4802      	ldr	r0, [pc, #8]	@ (8008bb4 <USART1_IRQHandler+0x10>)
 8008baa:	f00f fb45 	bl	8018238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008bae:	bf00      	nop
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	240004b0 	.word	0x240004b0

08008bb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8008bbc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008bc0:	f005 fe3d 	bl	800e83e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008bc4:	bf00      	nop
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008bcc:	4802      	ldr	r0, [pc, #8]	@ (8008bd8 <DMA2_Stream0_IRQHandler+0x10>)
 8008bce:	f004 f931 	bl	800ce34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008bd2:	bf00      	nop
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	2400011c 	.word	0x2400011c

08008bdc <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8008be0:	4802      	ldr	r0, [pc, #8]	@ (8008bec <I2C5_EV_IRQHandler+0x10>)
 8008be2:	f006 fa21 	bl	800f028 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 8008be6:	bf00      	nop
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	24000198 	.word	0x24000198

08008bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008bf4:	4b32      	ldr	r3, [pc, #200]	@ (8008cc0 <SystemInit+0xd0>)
 8008bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bfa:	4a31      	ldr	r2, [pc, #196]	@ (8008cc0 <SystemInit+0xd0>)
 8008bfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008c00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008c04:	4b2f      	ldr	r3, [pc, #188]	@ (8008cc4 <SystemInit+0xd4>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 030f 	and.w	r3, r3, #15
 8008c0c:	2b06      	cmp	r3, #6
 8008c0e:	d807      	bhi.n	8008c20 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008c10:	4b2c      	ldr	r3, [pc, #176]	@ (8008cc4 <SystemInit+0xd4>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f023 030f 	bic.w	r3, r3, #15
 8008c18:	4a2a      	ldr	r2, [pc, #168]	@ (8008cc4 <SystemInit+0xd4>)
 8008c1a:	f043 0307 	orr.w	r3, r3, #7
 8008c1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008c20:	4b29      	ldr	r3, [pc, #164]	@ (8008cc8 <SystemInit+0xd8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a28      	ldr	r2, [pc, #160]	@ (8008cc8 <SystemInit+0xd8>)
 8008c26:	f043 0301 	orr.w	r3, r3, #1
 8008c2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008c2c:	4b26      	ldr	r3, [pc, #152]	@ (8008cc8 <SystemInit+0xd8>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008c32:	4b25      	ldr	r3, [pc, #148]	@ (8008cc8 <SystemInit+0xd8>)
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	4924      	ldr	r1, [pc, #144]	@ (8008cc8 <SystemInit+0xd8>)
 8008c38:	4b24      	ldr	r3, [pc, #144]	@ (8008ccc <SystemInit+0xdc>)
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008c3e:	4b21      	ldr	r3, [pc, #132]	@ (8008cc4 <SystemInit+0xd4>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0308 	and.w	r3, r3, #8
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d007      	beq.n	8008c5a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8008cc4 <SystemInit+0xd4>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f023 030f 	bic.w	r3, r3, #15
 8008c52:	4a1c      	ldr	r2, [pc, #112]	@ (8008cc4 <SystemInit+0xd4>)
 8008c54:	f043 0307 	orr.w	r3, r3, #7
 8008c58:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc8 <SystemInit+0xd8>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008c60:	4b19      	ldr	r3, [pc, #100]	@ (8008cc8 <SystemInit+0xd8>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008c66:	4b18      	ldr	r3, [pc, #96]	@ (8008cc8 <SystemInit+0xd8>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008c6c:	4b16      	ldr	r3, [pc, #88]	@ (8008cc8 <SystemInit+0xd8>)
 8008c6e:	4a18      	ldr	r2, [pc, #96]	@ (8008cd0 <SystemInit+0xe0>)
 8008c70:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008c72:	4b15      	ldr	r3, [pc, #84]	@ (8008cc8 <SystemInit+0xd8>)
 8008c74:	4a17      	ldr	r2, [pc, #92]	@ (8008cd4 <SystemInit+0xe4>)
 8008c76:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008c78:	4b13      	ldr	r3, [pc, #76]	@ (8008cc8 <SystemInit+0xd8>)
 8008c7a:	4a17      	ldr	r2, [pc, #92]	@ (8008cd8 <SystemInit+0xe8>)
 8008c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008c7e:	4b12      	ldr	r3, [pc, #72]	@ (8008cc8 <SystemInit+0xd8>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008c84:	4b10      	ldr	r3, [pc, #64]	@ (8008cc8 <SystemInit+0xd8>)
 8008c86:	4a14      	ldr	r2, [pc, #80]	@ (8008cd8 <SystemInit+0xe8>)
 8008c88:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8008cc8 <SystemInit+0xd8>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008c90:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc8 <SystemInit+0xd8>)
 8008c92:	4a11      	ldr	r2, [pc, #68]	@ (8008cd8 <SystemInit+0xe8>)
 8008c94:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008c96:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc8 <SystemInit+0xd8>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc8 <SystemInit+0xd8>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a09      	ldr	r2, [pc, #36]	@ (8008cc8 <SystemInit+0xd8>)
 8008ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008ca6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008ca8:	4b07      	ldr	r3, [pc, #28]	@ (8008cc8 <SystemInit+0xd8>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008cae:	4b0b      	ldr	r3, [pc, #44]	@ (8008cdc <SystemInit+0xec>)
 8008cb0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8008cb4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008cb6:	bf00      	nop
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr
 8008cc0:	e000ed00 	.word	0xe000ed00
 8008cc4:	52002000 	.word	0x52002000
 8008cc8:	58024400 	.word	0x58024400
 8008ccc:	eaf6ed7f 	.word	0xeaf6ed7f
 8008cd0:	02020200 	.word	0x02020200
 8008cd4:	01ff0000 	.word	0x01ff0000
 8008cd8:	01010280 	.word	0x01010280
 8008cdc:	52004000 	.word	0x52004000

08008ce0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b098      	sub	sp, #96	@ 0x60
 8008ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ce6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008cea:	2200      	movs	r2, #0
 8008cec:	601a      	str	r2, [r3, #0]
 8008cee:	605a      	str	r2, [r3, #4]
 8008cf0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008cf2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	601a      	str	r2, [r3, #0]
 8008cfa:	605a      	str	r2, [r3, #4]
 8008cfc:	609a      	str	r2, [r3, #8]
 8008cfe:	60da      	str	r2, [r3, #12]
 8008d00:	611a      	str	r2, [r3, #16]
 8008d02:	615a      	str	r2, [r3, #20]
 8008d04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008d06:	1d3b      	adds	r3, r7, #4
 8008d08:	2234      	movs	r2, #52	@ 0x34
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f015 fa0d 	bl	801e12c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008d12:	4b45      	ldr	r3, [pc, #276]	@ (8008e28 <MX_TIM1_Init+0x148>)
 8008d14:	4a45      	ldr	r2, [pc, #276]	@ (8008e2c <MX_TIM1_Init+0x14c>)
 8008d16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8008d18:	4b43      	ldr	r3, [pc, #268]	@ (8008e28 <MX_TIM1_Init+0x148>)
 8008d1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008d1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d20:	4b41      	ldr	r3, [pc, #260]	@ (8008e28 <MX_TIM1_Init+0x148>)
 8008d22:	2200      	movs	r2, #0
 8008d24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8008d26:	4b40      	ldr	r3, [pc, #256]	@ (8008e28 <MX_TIM1_Init+0x148>)
 8008d28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e28 <MX_TIM1_Init+0x148>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008d34:	4b3c      	ldr	r3, [pc, #240]	@ (8008e28 <MX_TIM1_Init+0x148>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8008e28 <MX_TIM1_Init+0x148>)
 8008d3c:	2280      	movs	r2, #128	@ 0x80
 8008d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008d40:	4839      	ldr	r0, [pc, #228]	@ (8008e28 <MX_TIM1_Init+0x148>)
 8008d42:	f00d fc57 	bl	80165f4 <HAL_TIM_PWM_Init>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8008d4c:	f7ff f8b8 	bl	8007ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008d50:	2300      	movs	r3, #0
 8008d52:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008d54:	2300      	movs	r3, #0
 8008d56:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008d5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008d60:	4619      	mov	r1, r3
 8008d62:	4831      	ldr	r0, [pc, #196]	@ (8008e28 <MX_TIM1_Init+0x148>)
 8008d64:	f00e ff64 	bl	8017c30 <HAL_TIMEx_MasterConfigSynchronization>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008d6e:	f7ff f8a7 	bl	8007ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008d72:	2360      	movs	r3, #96	@ 0x60
 8008d74:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008d82:	2300      	movs	r3, #0
 8008d84:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008d86:	2300      	movs	r3, #0
 8008d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008d8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d92:	2204      	movs	r2, #4
 8008d94:	4619      	mov	r1, r3
 8008d96:	4824      	ldr	r0, [pc, #144]	@ (8008e28 <MX_TIM1_Init+0x148>)
 8008d98:	f00d ff9a 	bl	8016cd0 <HAL_TIM_PWM_ConfigChannel>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8008da2:	f7ff f88d 	bl	8007ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008da6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008daa:	2208      	movs	r2, #8
 8008dac:	4619      	mov	r1, r3
 8008dae:	481e      	ldr	r0, [pc, #120]	@ (8008e28 <MX_TIM1_Init+0x148>)
 8008db0:	f00d ff8e 	bl	8016cd0 <HAL_TIM_PWM_ConfigChannel>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8008dba:	f7ff f881 	bl	8007ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008dbe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008dc2:	220c      	movs	r2, #12
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4818      	ldr	r0, [pc, #96]	@ (8008e28 <MX_TIM1_Init+0x148>)
 8008dc8:	f00d ff82 	bl	8016cd0 <HAL_TIM_PWM_ConfigChannel>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8008dd2:	f7ff f875 	bl	8007ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008dde:	2300      	movs	r3, #0
 8008de0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008de6:	2300      	movs	r3, #0
 8008de8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008dea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008dee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008df4:	2300      	movs	r3, #0
 8008df6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008df8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008e02:	2300      	movs	r3, #0
 8008e04:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008e06:	1d3b      	adds	r3, r7, #4
 8008e08:	4619      	mov	r1, r3
 8008e0a:	4807      	ldr	r0, [pc, #28]	@ (8008e28 <MX_TIM1_Init+0x148>)
 8008e0c:	f00e ffac 	bl	8017d68 <HAL_TIMEx_ConfigBreakDeadTime>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8008e16:	f7ff f853 	bl	8007ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008e1a:	4803      	ldr	r0, [pc, #12]	@ (8008e28 <MX_TIM1_Init+0x148>)
 8008e1c:	f000 f9da 	bl	80091d4 <HAL_TIM_MspPostInit>

}
 8008e20:	bf00      	nop
 8008e22:	3760      	adds	r7, #96	@ 0x60
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	24000380 	.word	0x24000380
 8008e2c:	40010000 	.word	0x40010000

08008e30 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b088      	sub	sp, #32
 8008e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e36:	f107 0314 	add.w	r3, r7, #20
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	605a      	str	r2, [r3, #4]
 8008e40:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008e42:	1d3b      	adds	r3, r7, #4
 8008e44:	2200      	movs	r2, #0
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	605a      	str	r2, [r3, #4]
 8008e4a:	609a      	str	r2, [r3, #8]
 8008e4c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008e4e:	4b21      	ldr	r3, [pc, #132]	@ (8008ed4 <MX_TIM2_Init+0xa4>)
 8008e50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008e54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8008e56:	4b1f      	ldr	r3, [pc, #124]	@ (8008ed4 <MX_TIM2_Init+0xa4>)
 8008e58:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008e5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8008ed4 <MX_TIM2_Init+0xa4>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8008e64:	4b1b      	ldr	r3, [pc, #108]	@ (8008ed4 <MX_TIM2_Init+0xa4>)
 8008e66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008e6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e6c:	4b19      	ldr	r3, [pc, #100]	@ (8008ed4 <MX_TIM2_Init+0xa4>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008e72:	4b18      	ldr	r3, [pc, #96]	@ (8008ed4 <MX_TIM2_Init+0xa4>)
 8008e74:	2280      	movs	r2, #128	@ 0x80
 8008e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8008e78:	4816      	ldr	r0, [pc, #88]	@ (8008ed4 <MX_TIM2_Init+0xa4>)
 8008e7a:	f00d fd2f 	bl	80168dc <HAL_TIM_IC_Init>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8008e84:	f7ff f81c 	bl	8007ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008e90:	f107 0314 	add.w	r3, r7, #20
 8008e94:	4619      	mov	r1, r3
 8008e96:	480f      	ldr	r0, [pc, #60]	@ (8008ed4 <MX_TIM2_Init+0xa4>)
 8008e98:	f00e feca 	bl	8017c30 <HAL_TIMEx_MasterConfigSynchronization>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8008ea2:	f7ff f80d 	bl	8007ec0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008eb6:	1d3b      	adds	r3, r7, #4
 8008eb8:	2200      	movs	r2, #0
 8008eba:	4619      	mov	r1, r3
 8008ebc:	4805      	ldr	r0, [pc, #20]	@ (8008ed4 <MX_TIM2_Init+0xa4>)
 8008ebe:	f00d fe6b 	bl	8016b98 <HAL_TIM_IC_ConfigChannel>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008ec8:	f7fe fffa 	bl	8007ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008ecc:	bf00      	nop
 8008ece:	3720      	adds	r7, #32
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	240003cc 	.word	0x240003cc

08008ed8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b08a      	sub	sp, #40	@ 0x28
 8008edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ede:	f107 031c 	add.w	r3, r7, #28
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	605a      	str	r2, [r3, #4]
 8008ee8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008eea:	463b      	mov	r3, r7
 8008eec:	2200      	movs	r2, #0
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	605a      	str	r2, [r3, #4]
 8008ef2:	609a      	str	r2, [r3, #8]
 8008ef4:	60da      	str	r2, [r3, #12]
 8008ef6:	611a      	str	r2, [r3, #16]
 8008ef8:	615a      	str	r2, [r3, #20]
 8008efa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008efc:	4b32      	ldr	r3, [pc, #200]	@ (8008fc8 <MX_TIM3_Init+0xf0>)
 8008efe:	4a33      	ldr	r2, [pc, #204]	@ (8008fcc <MX_TIM3_Init+0xf4>)
 8008f00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 8008f02:	4b31      	ldr	r3, [pc, #196]	@ (8008fc8 <MX_TIM3_Init+0xf0>)
 8008f04:	221c      	movs	r2, #28
 8008f06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f08:	4b2f      	ldr	r3, [pc, #188]	@ (8008fc8 <MX_TIM3_Init+0xf0>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8008f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8008fc8 <MX_TIM3_Init+0xf0>)
 8008f10:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008f14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f16:	4b2c      	ldr	r3, [pc, #176]	@ (8008fc8 <MX_TIM3_Init+0xf0>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8008fc8 <MX_TIM3_Init+0xf0>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008f22:	4829      	ldr	r0, [pc, #164]	@ (8008fc8 <MX_TIM3_Init+0xf0>)
 8008f24:	f00d fb66 	bl	80165f4 <HAL_TIM_PWM_Init>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8008f2e:	f7fe ffc7 	bl	8007ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f32:	2300      	movs	r3, #0
 8008f34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f36:	2300      	movs	r3, #0
 8008f38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008f3a:	f107 031c 	add.w	r3, r7, #28
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4821      	ldr	r0, [pc, #132]	@ (8008fc8 <MX_TIM3_Init+0xf0>)
 8008f42:	f00e fe75 	bl	8017c30 <HAL_TIMEx_MasterConfigSynchronization>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8008f4c:	f7fe ffb8 	bl	8007ec0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f50:	2360      	movs	r3, #96	@ 0x60
 8008f52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008f54:	2300      	movs	r3, #0
 8008f56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008f60:	463b      	mov	r3, r7
 8008f62:	2200      	movs	r2, #0
 8008f64:	4619      	mov	r1, r3
 8008f66:	4818      	ldr	r0, [pc, #96]	@ (8008fc8 <MX_TIM3_Init+0xf0>)
 8008f68:	f00d feb2 	bl	8016cd0 <HAL_TIM_PWM_ConfigChannel>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8008f72:	f7fe ffa5 	bl	8007ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008f76:	463b      	mov	r3, r7
 8008f78:	2204      	movs	r2, #4
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	4812      	ldr	r0, [pc, #72]	@ (8008fc8 <MX_TIM3_Init+0xf0>)
 8008f7e:	f00d fea7 	bl	8016cd0 <HAL_TIM_PWM_ConfigChannel>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008f88:	f7fe ff9a 	bl	8007ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008f8c:	463b      	mov	r3, r7
 8008f8e:	2208      	movs	r2, #8
 8008f90:	4619      	mov	r1, r3
 8008f92:	480d      	ldr	r0, [pc, #52]	@ (8008fc8 <MX_TIM3_Init+0xf0>)
 8008f94:	f00d fe9c 	bl	8016cd0 <HAL_TIM_PWM_ConfigChannel>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8008f9e:	f7fe ff8f 	bl	8007ec0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008fa2:	463b      	mov	r3, r7
 8008fa4:	220c      	movs	r2, #12
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	4807      	ldr	r0, [pc, #28]	@ (8008fc8 <MX_TIM3_Init+0xf0>)
 8008faa:	f00d fe91 	bl	8016cd0 <HAL_TIM_PWM_ConfigChannel>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8008fb4:	f7fe ff84 	bl	8007ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008fb8:	4803      	ldr	r0, [pc, #12]	@ (8008fc8 <MX_TIM3_Init+0xf0>)
 8008fba:	f000 f90b 	bl	80091d4 <HAL_TIM_MspPostInit>

}
 8008fbe:	bf00      	nop
 8008fc0:	3728      	adds	r7, #40	@ 0x28
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	24000418 	.word	0x24000418
 8008fcc:	40000400 	.word	0x40000400

08008fd0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b088      	sub	sp, #32
 8008fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008fd6:	f107 0310 	add.w	r3, r7, #16
 8008fda:	2200      	movs	r2, #0
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	605a      	str	r2, [r3, #4]
 8008fe0:	609a      	str	r2, [r3, #8]
 8008fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008fe4:	1d3b      	adds	r3, r7, #4
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	601a      	str	r2, [r3, #0]
 8008fea:	605a      	str	r2, [r3, #4]
 8008fec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008fee:	4b21      	ldr	r3, [pc, #132]	@ (8009074 <MX_TIM8_Init+0xa4>)
 8008ff0:	4a21      	ldr	r2, [pc, #132]	@ (8009078 <MX_TIM8_Init+0xa8>)
 8008ff2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 8008ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8009074 <MX_TIM8_Init+0xa4>)
 8008ff6:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 8008ffa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8009074 <MX_TIM8_Init+0xa4>)
 8008ffe:	2200      	movs	r2, #0
 8009000:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8009002:	4b1c      	ldr	r3, [pc, #112]	@ (8009074 <MX_TIM8_Init+0xa4>)
 8009004:	f242 720f 	movw	r2, #9999	@ 0x270f
 8009008:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800900a:	4b1a      	ldr	r3, [pc, #104]	@ (8009074 <MX_TIM8_Init+0xa4>)
 800900c:	2200      	movs	r2, #0
 800900e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009010:	4b18      	ldr	r3, [pc, #96]	@ (8009074 <MX_TIM8_Init+0xa4>)
 8009012:	2200      	movs	r2, #0
 8009014:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009016:	4b17      	ldr	r3, [pc, #92]	@ (8009074 <MX_TIM8_Init+0xa4>)
 8009018:	2200      	movs	r2, #0
 800901a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800901c:	4815      	ldr	r0, [pc, #84]	@ (8009074 <MX_TIM8_Init+0xa4>)
 800901e:	f00d f98e 	bl	801633e <HAL_TIM_Base_Init>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8009028:	f7fe ff4a 	bl	8007ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800902c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009030:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009032:	f107 0310 	add.w	r3, r7, #16
 8009036:	4619      	mov	r1, r3
 8009038:	480e      	ldr	r0, [pc, #56]	@ (8009074 <MX_TIM8_Init+0xa4>)
 800903a:	f00d ff5d 	bl	8016ef8 <HAL_TIM_ConfigClockSource>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8009044:	f7fe ff3c 	bl	8007ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009048:	2320      	movs	r3, #32
 800904a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800904c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009050:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009052:	2300      	movs	r3, #0
 8009054:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009056:	1d3b      	adds	r3, r7, #4
 8009058:	4619      	mov	r1, r3
 800905a:	4806      	ldr	r0, [pc, #24]	@ (8009074 <MX_TIM8_Init+0xa4>)
 800905c:	f00e fde8 	bl	8017c30 <HAL_TIMEx_MasterConfigSynchronization>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009066:	f7fe ff2b 	bl	8007ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800906a:	bf00      	nop
 800906c:	3720      	adds	r7, #32
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	24000464 	.word	0x24000464
 8009078:	40010400 	.word	0x40010400

0800907c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a16      	ldr	r2, [pc, #88]	@ (80090e4 <HAL_TIM_PWM_MspInit+0x68>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d10f      	bne.n	80090ae <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800908e:	4b16      	ldr	r3, [pc, #88]	@ (80090e8 <HAL_TIM_PWM_MspInit+0x6c>)
 8009090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009094:	4a14      	ldr	r2, [pc, #80]	@ (80090e8 <HAL_TIM_PWM_MspInit+0x6c>)
 8009096:	f043 0301 	orr.w	r3, r3, #1
 800909a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800909e:	4b12      	ldr	r3, [pc, #72]	@ (80090e8 <HAL_TIM_PWM_MspInit+0x6c>)
 80090a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	60fb      	str	r3, [r7, #12]
 80090aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80090ac:	e013      	b.n	80090d6 <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a0e      	ldr	r2, [pc, #56]	@ (80090ec <HAL_TIM_PWM_MspInit+0x70>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d10e      	bne.n	80090d6 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80090b8:	4b0b      	ldr	r3, [pc, #44]	@ (80090e8 <HAL_TIM_PWM_MspInit+0x6c>)
 80090ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090be:	4a0a      	ldr	r2, [pc, #40]	@ (80090e8 <HAL_TIM_PWM_MspInit+0x6c>)
 80090c0:	f043 0302 	orr.w	r3, r3, #2
 80090c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80090c8:	4b07      	ldr	r3, [pc, #28]	@ (80090e8 <HAL_TIM_PWM_MspInit+0x6c>)
 80090ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090ce:	f003 0302 	and.w	r3, r3, #2
 80090d2:	60bb      	str	r3, [r7, #8]
 80090d4:	68bb      	ldr	r3, [r7, #8]
}
 80090d6:	bf00      	nop
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	40010000 	.word	0x40010000
 80090e8:	58024400 	.word	0x58024400
 80090ec:	40000400 	.word	0x40000400

080090f0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b08a      	sub	sp, #40	@ 0x28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090f8:	f107 0314 	add.w	r3, r7, #20
 80090fc:	2200      	movs	r2, #0
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	605a      	str	r2, [r3, #4]
 8009102:	609a      	str	r2, [r3, #8]
 8009104:	60da      	str	r2, [r3, #12]
 8009106:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009110:	d135      	bne.n	800917e <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009112:	4b1d      	ldr	r3, [pc, #116]	@ (8009188 <HAL_TIM_IC_MspInit+0x98>)
 8009114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009118:	4a1b      	ldr	r2, [pc, #108]	@ (8009188 <HAL_TIM_IC_MspInit+0x98>)
 800911a:	f043 0301 	orr.w	r3, r3, #1
 800911e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009122:	4b19      	ldr	r3, [pc, #100]	@ (8009188 <HAL_TIM_IC_MspInit+0x98>)
 8009124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	613b      	str	r3, [r7, #16]
 800912e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009130:	4b15      	ldr	r3, [pc, #84]	@ (8009188 <HAL_TIM_IC_MspInit+0x98>)
 8009132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009136:	4a14      	ldr	r2, [pc, #80]	@ (8009188 <HAL_TIM_IC_MspInit+0x98>)
 8009138:	f043 0301 	orr.w	r3, r3, #1
 800913c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009140:	4b11      	ldr	r3, [pc, #68]	@ (8009188 <HAL_TIM_IC_MspInit+0x98>)
 8009142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800914e:	2301      	movs	r3, #1
 8009150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009152:	2302      	movs	r3, #2
 8009154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009156:	2300      	movs	r3, #0
 8009158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800915a:	2300      	movs	r3, #0
 800915c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800915e:	2301      	movs	r3, #1
 8009160:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009162:	f107 0314 	add.w	r3, r7, #20
 8009166:	4619      	mov	r1, r3
 8009168:	4808      	ldr	r0, [pc, #32]	@ (800918c <HAL_TIM_IC_MspInit+0x9c>)
 800916a:	f005 f98f 	bl	800e48c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800916e:	2200      	movs	r2, #0
 8009170:	2101      	movs	r1, #1
 8009172:	201c      	movs	r0, #28
 8009174:	f002 fa8b 	bl	800b68e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009178:	201c      	movs	r0, #28
 800917a:	f002 faa2 	bl	800b6c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800917e:	bf00      	nop
 8009180:	3728      	adds	r7, #40	@ 0x28
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	58024400 	.word	0x58024400
 800918c:	58020000 	.word	0x58020000

08009190 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a0b      	ldr	r2, [pc, #44]	@ (80091cc <HAL_TIM_Base_MspInit+0x3c>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d10e      	bne.n	80091c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80091a2:	4b0b      	ldr	r3, [pc, #44]	@ (80091d0 <HAL_TIM_Base_MspInit+0x40>)
 80091a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091a8:	4a09      	ldr	r2, [pc, #36]	@ (80091d0 <HAL_TIM_Base_MspInit+0x40>)
 80091aa:	f043 0302 	orr.w	r3, r3, #2
 80091ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80091b2:	4b07      	ldr	r3, [pc, #28]	@ (80091d0 <HAL_TIM_Base_MspInit+0x40>)
 80091b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091b8:	f003 0302 	and.w	r3, r3, #2
 80091bc:	60fb      	str	r3, [r7, #12]
 80091be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80091c0:	bf00      	nop
 80091c2:	3714      	adds	r7, #20
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	40010400 	.word	0x40010400
 80091d0:	58024400 	.word	0x58024400

080091d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b08a      	sub	sp, #40	@ 0x28
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091dc:	f107 0314 	add.w	r3, r7, #20
 80091e0:	2200      	movs	r2, #0
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	605a      	str	r2, [r3, #4]
 80091e6:	609a      	str	r2, [r3, #8]
 80091e8:	60da      	str	r2, [r3, #12]
 80091ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a26      	ldr	r2, [pc, #152]	@ (800928c <HAL_TIM_MspPostInit+0xb8>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d120      	bne.n	8009238 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80091f6:	4b26      	ldr	r3, [pc, #152]	@ (8009290 <HAL_TIM_MspPostInit+0xbc>)
 80091f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091fc:	4a24      	ldr	r2, [pc, #144]	@ (8009290 <HAL_TIM_MspPostInit+0xbc>)
 80091fe:	f043 0310 	orr.w	r3, r3, #16
 8009202:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009206:	4b22      	ldr	r3, [pc, #136]	@ (8009290 <HAL_TIM_MspPostInit+0xbc>)
 8009208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800920c:	f003 0310 	and.w	r3, r3, #16
 8009210:	613b      	str	r3, [r7, #16]
 8009212:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8009214:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8009218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800921a:	2302      	movs	r3, #2
 800921c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800921e:	2300      	movs	r3, #0
 8009220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009222:	2300      	movs	r3, #0
 8009224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009226:	2301      	movs	r3, #1
 8009228:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800922a:	f107 0314 	add.w	r3, r7, #20
 800922e:	4619      	mov	r1, r3
 8009230:	4818      	ldr	r0, [pc, #96]	@ (8009294 <HAL_TIM_MspPostInit+0xc0>)
 8009232:	f005 f92b 	bl	800e48c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8009236:	e024      	b.n	8009282 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a16      	ldr	r2, [pc, #88]	@ (8009298 <HAL_TIM_MspPostInit+0xc4>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d11f      	bne.n	8009282 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009242:	4b13      	ldr	r3, [pc, #76]	@ (8009290 <HAL_TIM_MspPostInit+0xbc>)
 8009244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009248:	4a11      	ldr	r2, [pc, #68]	@ (8009290 <HAL_TIM_MspPostInit+0xbc>)
 800924a:	f043 0304 	orr.w	r3, r3, #4
 800924e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009252:	4b0f      	ldr	r3, [pc, #60]	@ (8009290 <HAL_TIM_MspPostInit+0xbc>)
 8009254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	60fb      	str	r3, [r7, #12]
 800925e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8009260:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8009264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009266:	2302      	movs	r3, #2
 8009268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800926a:	2300      	movs	r3, #0
 800926c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800926e:	2300      	movs	r3, #0
 8009270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009272:	2302      	movs	r3, #2
 8009274:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009276:	f107 0314 	add.w	r3, r7, #20
 800927a:	4619      	mov	r1, r3
 800927c:	4807      	ldr	r0, [pc, #28]	@ (800929c <HAL_TIM_MspPostInit+0xc8>)
 800927e:	f005 f905 	bl	800e48c <HAL_GPIO_Init>
}
 8009282:	bf00      	nop
 8009284:	3728      	adds	r7, #40	@ 0x28
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	40010000 	.word	0x40010000
 8009290:	58024400 	.word	0x58024400
 8009294:	58021000 	.word	0x58021000
 8009298:	40000400 	.word	0x40000400
 800929c:	58020800 	.word	0x58020800

080092a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80092a4:	4b22      	ldr	r3, [pc, #136]	@ (8009330 <MX_USART1_UART_Init+0x90>)
 80092a6:	4a23      	ldr	r2, [pc, #140]	@ (8009334 <MX_USART1_UART_Init+0x94>)
 80092a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80092aa:	4b21      	ldr	r3, [pc, #132]	@ (8009330 <MX_USART1_UART_Init+0x90>)
 80092ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80092b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80092b2:	4b1f      	ldr	r3, [pc, #124]	@ (8009330 <MX_USART1_UART_Init+0x90>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80092b8:	4b1d      	ldr	r3, [pc, #116]	@ (8009330 <MX_USART1_UART_Init+0x90>)
 80092ba:	2200      	movs	r2, #0
 80092bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80092be:	4b1c      	ldr	r3, [pc, #112]	@ (8009330 <MX_USART1_UART_Init+0x90>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80092c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009330 <MX_USART1_UART_Init+0x90>)
 80092c6:	220c      	movs	r2, #12
 80092c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80092ca:	4b19      	ldr	r3, [pc, #100]	@ (8009330 <MX_USART1_UART_Init+0x90>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80092d0:	4b17      	ldr	r3, [pc, #92]	@ (8009330 <MX_USART1_UART_Init+0x90>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80092d6:	4b16      	ldr	r3, [pc, #88]	@ (8009330 <MX_USART1_UART_Init+0x90>)
 80092d8:	2200      	movs	r2, #0
 80092da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80092dc:	4b14      	ldr	r3, [pc, #80]	@ (8009330 <MX_USART1_UART_Init+0x90>)
 80092de:	2200      	movs	r2, #0
 80092e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80092e2:	4b13      	ldr	r3, [pc, #76]	@ (8009330 <MX_USART1_UART_Init+0x90>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80092e8:	4811      	ldr	r0, [pc, #68]	@ (8009330 <MX_USART1_UART_Init+0x90>)
 80092ea:	f00e fde7 	bl	8017ebc <HAL_UART_Init>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80092f4:	f7fe fde4 	bl	8007ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80092f8:	2100      	movs	r1, #0
 80092fa:	480d      	ldr	r0, [pc, #52]	@ (8009330 <MX_USART1_UART_Init+0x90>)
 80092fc:	f011 fc97 	bl	801ac2e <HAL_UARTEx_SetTxFifoThreshold>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8009306:	f7fe fddb 	bl	8007ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800930a:	2100      	movs	r1, #0
 800930c:	4808      	ldr	r0, [pc, #32]	@ (8009330 <MX_USART1_UART_Init+0x90>)
 800930e:	f011 fccc 	bl	801acaa <HAL_UARTEx_SetRxFifoThreshold>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d001      	beq.n	800931c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8009318:	f7fe fdd2 	bl	8007ec0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800931c:	4804      	ldr	r0, [pc, #16]	@ (8009330 <MX_USART1_UART_Init+0x90>)
 800931e:	f011 fc4d 	bl	801abbc <HAL_UARTEx_DisableFifoMode>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8009328:	f7fe fdca 	bl	8007ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800932c:	bf00      	nop
 800932e:	bd80      	pop	{r7, pc}
 8009330:	240004b0 	.word	0x240004b0
 8009334:	40011000 	.word	0x40011000

08009338 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b0b8      	sub	sp, #224	@ 0xe0
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009340:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	605a      	str	r2, [r3, #4]
 800934a:	609a      	str	r2, [r3, #8]
 800934c:	60da      	str	r2, [r3, #12]
 800934e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009350:	f107 0310 	add.w	r3, r7, #16
 8009354:	22b8      	movs	r2, #184	@ 0xb8
 8009356:	2100      	movs	r1, #0
 8009358:	4618      	mov	r0, r3
 800935a:	f014 fee7 	bl	801e12c <memset>
  if(uartHandle->Instance==USART1)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a2b      	ldr	r2, [pc, #172]	@ (8009410 <HAL_UART_MspInit+0xd8>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d14e      	bne.n	8009406 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8009368:	f04f 0201 	mov.w	r2, #1
 800936c:	f04f 0300 	mov.w	r3, #0
 8009370:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8009374:	2300      	movs	r3, #0
 8009376:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800937a:	f107 0310 	add.w	r3, r7, #16
 800937e:	4618      	mov	r0, r3
 8009380:	f008 fe96 	bl	80120b0 <HAL_RCCEx_PeriphCLKConfig>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800938a:	f7fe fd99 	bl	8007ec0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800938e:	4b21      	ldr	r3, [pc, #132]	@ (8009414 <HAL_UART_MspInit+0xdc>)
 8009390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009394:	4a1f      	ldr	r2, [pc, #124]	@ (8009414 <HAL_UART_MspInit+0xdc>)
 8009396:	f043 0310 	orr.w	r3, r3, #16
 800939a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800939e:	4b1d      	ldr	r3, [pc, #116]	@ (8009414 <HAL_UART_MspInit+0xdc>)
 80093a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093a4:	f003 0310 	and.w	r3, r3, #16
 80093a8:	60fb      	str	r3, [r7, #12]
 80093aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093ac:	4b19      	ldr	r3, [pc, #100]	@ (8009414 <HAL_UART_MspInit+0xdc>)
 80093ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093b2:	4a18      	ldr	r2, [pc, #96]	@ (8009414 <HAL_UART_MspInit+0xdc>)
 80093b4:	f043 0301 	orr.w	r3, r3, #1
 80093b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80093bc:	4b15      	ldr	r3, [pc, #84]	@ (8009414 <HAL_UART_MspInit+0xdc>)
 80093be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	60bb      	str	r3, [r7, #8]
 80093c8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80093ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80093ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093d2:	2302      	movs	r3, #2
 80093d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093d8:	2300      	movs	r3, #0
 80093da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093de:	2300      	movs	r3, #0
 80093e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80093e4:	2307      	movs	r3, #7
 80093e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093ea:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80093ee:	4619      	mov	r1, r3
 80093f0:	4809      	ldr	r0, [pc, #36]	@ (8009418 <HAL_UART_MspInit+0xe0>)
 80093f2:	f005 f84b 	bl	800e48c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80093f6:	2200      	movs	r2, #0
 80093f8:	2100      	movs	r1, #0
 80093fa:	2025      	movs	r0, #37	@ 0x25
 80093fc:	f002 f947 	bl	800b68e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009400:	2025      	movs	r0, #37	@ 0x25
 8009402:	f002 f95e 	bl	800b6c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8009406:	bf00      	nop
 8009408:	37e0      	adds	r7, #224	@ 0xe0
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	40011000 	.word	0x40011000
 8009414:	58024400 	.word	0x58024400
 8009418:	58020000 	.word	0x58020000

0800941c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800941c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009454 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009420:	f7ff fbe6 	bl	8008bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009424:	480c      	ldr	r0, [pc, #48]	@ (8009458 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009426:	490d      	ldr	r1, [pc, #52]	@ (800945c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009428:	4a0d      	ldr	r2, [pc, #52]	@ (8009460 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800942a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800942c:	e002      	b.n	8009434 <LoopCopyDataInit>

0800942e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800942e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009432:	3304      	adds	r3, #4

08009434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009438:	d3f9      	bcc.n	800942e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800943a:	4a0a      	ldr	r2, [pc, #40]	@ (8009464 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800943c:	4c0a      	ldr	r4, [pc, #40]	@ (8009468 <LoopFillZerobss+0x22>)
  movs r3, #0
 800943e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009440:	e001      	b.n	8009446 <LoopFillZerobss>

08009442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009444:	3204      	adds	r2, #4

08009446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009448:	d3fb      	bcc.n	8009442 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800944a:	f014 fe7d 	bl	801e148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800944e:	f7fb fd6b 	bl	8004f28 <main>
  bx  lr
 8009452:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009454:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8009458:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800945c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8009460:	080207f0 	.word	0x080207f0
  ldr r2, =_sbss
 8009464:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8009468:	240008ac 	.word	0x240008ac

0800946c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800946c:	e7fe      	b.n	800946c <ADC3_IRQHandler>
	...

08009470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009476:	2003      	movs	r0, #3
 8009478:	f002 f8fe 	bl	800b678 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800947c:	f008 fc42 	bl	8011d04 <HAL_RCC_GetSysClockFreq>
 8009480:	4602      	mov	r2, r0
 8009482:	4b15      	ldr	r3, [pc, #84]	@ (80094d8 <HAL_Init+0x68>)
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	0a1b      	lsrs	r3, r3, #8
 8009488:	f003 030f 	and.w	r3, r3, #15
 800948c:	4913      	ldr	r1, [pc, #76]	@ (80094dc <HAL_Init+0x6c>)
 800948e:	5ccb      	ldrb	r3, [r1, r3]
 8009490:	f003 031f 	and.w	r3, r3, #31
 8009494:	fa22 f303 	lsr.w	r3, r2, r3
 8009498:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800949a:	4b0f      	ldr	r3, [pc, #60]	@ (80094d8 <HAL_Init+0x68>)
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	f003 030f 	and.w	r3, r3, #15
 80094a2:	4a0e      	ldr	r2, [pc, #56]	@ (80094dc <HAL_Init+0x6c>)
 80094a4:	5cd3      	ldrb	r3, [r2, r3]
 80094a6:	f003 031f 	and.w	r3, r3, #31
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	fa22 f303 	lsr.w	r3, r2, r3
 80094b0:	4a0b      	ldr	r2, [pc, #44]	@ (80094e0 <HAL_Init+0x70>)
 80094b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80094b4:	4a0b      	ldr	r2, [pc, #44]	@ (80094e4 <HAL_Init+0x74>)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80094ba:	200f      	movs	r0, #15
 80094bc:	f000 f814 	bl	80094e8 <HAL_InitTick>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e002      	b.n	80094d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80094ca:	f7fe febb 	bl	8008244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	58024400 	.word	0x58024400
 80094dc:	0801ea64 	.word	0x0801ea64
 80094e0:	24000008 	.word	0x24000008
 80094e4:	24000004 	.word	0x24000004

080094e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80094f0:	4b15      	ldr	r3, [pc, #84]	@ (8009548 <HAL_InitTick+0x60>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e021      	b.n	8009540 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80094fc:	4b13      	ldr	r3, [pc, #76]	@ (800954c <HAL_InitTick+0x64>)
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	4b11      	ldr	r3, [pc, #68]	@ (8009548 <HAL_InitTick+0x60>)
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	4619      	mov	r1, r3
 8009506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800950a:	fbb3 f3f1 	udiv	r3, r3, r1
 800950e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009512:	4618      	mov	r0, r3
 8009514:	f002 f8e3 	bl	800b6de <HAL_SYSTICK_Config>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e00e      	b.n	8009540 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2b0f      	cmp	r3, #15
 8009526:	d80a      	bhi.n	800953e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009528:	2200      	movs	r2, #0
 800952a:	6879      	ldr	r1, [r7, #4]
 800952c:	f04f 30ff 	mov.w	r0, #4294967295
 8009530:	f002 f8ad 	bl	800b68e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009534:	4a06      	ldr	r2, [pc, #24]	@ (8009550 <HAL_InitTick+0x68>)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	e000      	b.n	8009540 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
}
 8009540:	4618      	mov	r0, r3
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	24000010 	.word	0x24000010
 800954c:	24000004 	.word	0x24000004
 8009550:	2400000c 	.word	0x2400000c

08009554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009554:	b480      	push	{r7}
 8009556:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009558:	4b06      	ldr	r3, [pc, #24]	@ (8009574 <HAL_IncTick+0x20>)
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	461a      	mov	r2, r3
 800955e:	4b06      	ldr	r3, [pc, #24]	@ (8009578 <HAL_IncTick+0x24>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4413      	add	r3, r2
 8009564:	4a04      	ldr	r2, [pc, #16]	@ (8009578 <HAL_IncTick+0x24>)
 8009566:	6013      	str	r3, [r2, #0]
}
 8009568:	bf00      	nop
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	24000010 	.word	0x24000010
 8009578:	24000544 	.word	0x24000544

0800957c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800957c:	b480      	push	{r7}
 800957e:	af00      	add	r7, sp, #0
  return uwTick;
 8009580:	4b03      	ldr	r3, [pc, #12]	@ (8009590 <HAL_GetTick+0x14>)
 8009582:	681b      	ldr	r3, [r3, #0]
}
 8009584:	4618      	mov	r0, r3
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	24000544 	.word	0x24000544

08009594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800959c:	f7ff ffee 	bl	800957c <HAL_GetTick>
 80095a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ac:	d005      	beq.n	80095ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80095ae:	4b0a      	ldr	r3, [pc, #40]	@ (80095d8 <HAL_Delay+0x44>)
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	461a      	mov	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4413      	add	r3, r2
 80095b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80095ba:	bf00      	nop
 80095bc:	f7ff ffde 	bl	800957c <HAL_GetTick>
 80095c0:	4602      	mov	r2, r0
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d8f7      	bhi.n	80095bc <HAL_Delay+0x28>
  {
  }
}
 80095cc:	bf00      	nop
 80095ce:	bf00      	nop
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	24000010 	.word	0x24000010

080095dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	431a      	orrs	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	609a      	str	r2, [r3, #8]
}
 80095f6:	bf00      	nop
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009602:	b480      	push	{r7}
 8009604:	b083      	sub	sp, #12
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	431a      	orrs	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	609a      	str	r2, [r3, #8]
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8009638:	4618      	mov	r0, r3
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8009644:	b480      	push	{r7}
 8009646:	b087      	sub	sp, #28
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a18      	ldr	r2, [pc, #96]	@ (80096b4 <LL_ADC_SetChannelPreselection+0x70>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d027      	beq.n	80096a6 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800965c:	2b00      	cmp	r3, #0
 800965e:	d107      	bne.n	8009670 <LL_ADC_SetChannelPreselection+0x2c>
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	0e9b      	lsrs	r3, r3, #26
 8009664:	f003 031f 	and.w	r3, r3, #31
 8009668:	2201      	movs	r2, #1
 800966a:	fa02 f303 	lsl.w	r3, r2, r3
 800966e:	e015      	b.n	800969c <LL_ADC_SetChannelPreselection+0x58>
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	fa93 f3a3 	rbit	r3, r3
 800967a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d101      	bne.n	800968a <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8009686:	2320      	movs	r3, #32
 8009688:	e003      	b.n	8009692 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	fab3 f383 	clz	r3, r3
 8009690:	b2db      	uxtb	r3, r3
 8009692:	f003 031f 	and.w	r3, r3, #31
 8009696:	2201      	movs	r2, #1
 8009698:	fa02 f303 	lsl.w	r3, r2, r3
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	69d2      	ldr	r2, [r2, #28]
 80096a0:	431a      	orrs	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 80096a6:	bf00      	nop
 80096a8:	371c      	adds	r7, #28
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	58026000 	.word	0x58026000

080096b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b087      	sub	sp, #28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
 80096c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3360      	adds	r3, #96	@ 0x60
 80096ca:	461a      	mov	r2, r3
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	4413      	add	r3, r2
 80096d2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4a10      	ldr	r2, [pc, #64]	@ (8009718 <LL_ADC_SetOffset+0x60>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d10b      	bne.n	80096f4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	4313      	orrs	r3, r2
 80096ea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80096f2:	e00b      	b.n	800970c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	430b      	orrs	r3, r1
 8009706:	431a      	orrs	r2, r3
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	601a      	str	r2, [r3, #0]
}
 800970c:	bf00      	nop
 800970e:	371c      	adds	r7, #28
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	58026000 	.word	0x58026000

0800971c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	3360      	adds	r3, #96	@ 0x60
 800972a:	461a      	mov	r2, r3
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800973c:	4618      	mov	r0, r3
 800973e:	3714      	adds	r7, #20
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	f003 031f 	and.w	r3, r3, #31
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	fa01 f303 	lsl.w	r3, r1, r3
 8009768:	431a      	orrs	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	611a      	str	r2, [r3, #16]
}
 800976e:	bf00      	nop
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
	...

0800977c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800977c:	b480      	push	{r7}
 800977e:	b087      	sub	sp, #28
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	4a0c      	ldr	r2, [pc, #48]	@ (80097bc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d00e      	beq.n	80097ae <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	3360      	adds	r3, #96	@ 0x60
 8009794:	461a      	mov	r2, r3
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4413      	add	r3, r2
 800979c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	431a      	orrs	r2, r3
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	601a      	str	r2, [r3, #0]
  }
}
 80097ae:	bf00      	nop
 80097b0:	371c      	adds	r7, #28
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	58026000 	.word	0x58026000

080097c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b087      	sub	sp, #28
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4a0c      	ldr	r2, [pc, #48]	@ (8009800 <LL_ADC_SetOffsetSaturation+0x40>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d10e      	bne.n	80097f2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	3360      	adds	r3, #96	@ 0x60
 80097d8:	461a      	mov	r2, r3
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	431a      	orrs	r2, r3
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80097f2:	bf00      	nop
 80097f4:	371c      	adds	r7, #28
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	58026000 	.word	0x58026000

08009804 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8009804:	b480      	push	{r7}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4a0c      	ldr	r2, [pc, #48]	@ (8009844 <LL_ADC_SetOffsetSign+0x40>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d10e      	bne.n	8009836 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	3360      	adds	r3, #96	@ 0x60
 800981c:	461a      	mov	r2, r3
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	431a      	orrs	r2, r3
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8009836:	bf00      	nop
 8009838:	371c      	adds	r7, #28
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	58026000 	.word	0x58026000

08009848 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	3360      	adds	r3, #96	@ 0x60
 8009858:	461a      	mov	r2, r3
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	4413      	add	r3, r2
 8009860:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	4a0c      	ldr	r2, [pc, #48]	@ (8009898 <LL_ADC_SetOffsetState+0x50>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d108      	bne.n	800987c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	431a      	orrs	r2, r3
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800987a:	e007      	b.n	800988c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	431a      	orrs	r2, r3
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	601a      	str	r2, [r3, #0]
}
 800988c:	bf00      	nop
 800988e:	371c      	adds	r7, #28
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr
 8009898:	58026000 	.word	0x58026000

0800989c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80098b0:	2301      	movs	r3, #1
 80098b2:	e000      	b.n	80098b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80098c2:	b480      	push	{r7}
 80098c4:	b087      	sub	sp, #28
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	60f8      	str	r0, [r7, #12]
 80098ca:	60b9      	str	r1, [r7, #8]
 80098cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3330      	adds	r3, #48	@ 0x30
 80098d2:	461a      	mov	r2, r3
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	0a1b      	lsrs	r3, r3, #8
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	f003 030c 	and.w	r3, r3, #12
 80098de:	4413      	add	r3, r2
 80098e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	f003 031f 	and.w	r3, r3, #31
 80098ec:	211f      	movs	r1, #31
 80098ee:	fa01 f303 	lsl.w	r3, r1, r3
 80098f2:	43db      	mvns	r3, r3
 80098f4:	401a      	ands	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	0e9b      	lsrs	r3, r3, #26
 80098fa:	f003 011f 	and.w	r1, r3, #31
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	f003 031f 	and.w	r3, r3, #31
 8009904:	fa01 f303 	lsl.w	r3, r1, r3
 8009908:	431a      	orrs	r2, r3
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800990e:	bf00      	nop
 8009910:	371c      	adds	r7, #28
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800991a:	b480      	push	{r7}
 800991c:	b083      	sub	sp, #12
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	f023 0203 	bic.w	r2, r3, #3
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	431a      	orrs	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	60da      	str	r2, [r3, #12]
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f043 0201 	orr.w	r2, r3, #1
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	60da      	str	r2, [r3, #12]
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a08      	ldr	r2, [pc, #32]	@ (8009990 <LL_ADC_REG_SetDMATransferMode+0x30>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d107      	bne.n	8009982 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	f023 0203 	bic.w	r2, r3, #3
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	431a      	orrs	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	60da      	str	r2, [r3, #12]
  }
}
 8009982:	bf00      	nop
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	58026000 	.word	0x58026000

08009994 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099a0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80099a8:	2301      	movs	r3, #1
 80099aa:	e000      	b.n	80099ae <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	370c      	adds	r7, #12
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr

080099ba <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80099ba:	b480      	push	{r7}
 80099bc:	b087      	sub	sp, #28
 80099be:	af00      	add	r7, sp, #0
 80099c0:	60f8      	str	r0, [r7, #12]
 80099c2:	60b9      	str	r1, [r7, #8]
 80099c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	3314      	adds	r3, #20
 80099ca:	461a      	mov	r2, r3
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	0e5b      	lsrs	r3, r3, #25
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	f003 0304 	and.w	r3, r3, #4
 80099d6:	4413      	add	r3, r2
 80099d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	0d1b      	lsrs	r3, r3, #20
 80099e2:	f003 031f 	and.w	r3, r3, #31
 80099e6:	2107      	movs	r1, #7
 80099e8:	fa01 f303 	lsl.w	r3, r1, r3
 80099ec:	43db      	mvns	r3, r3
 80099ee:	401a      	ands	r2, r3
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	0d1b      	lsrs	r3, r3, #20
 80099f4:	f003 031f 	and.w	r3, r3, #31
 80099f8:	6879      	ldr	r1, [r7, #4]
 80099fa:	fa01 f303 	lsl.w	r3, r1, r3
 80099fe:	431a      	orrs	r2, r3
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009a04:	bf00      	nop
 8009a06:	371c      	adds	r7, #28
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8009a88 <LL_ADC_SetChannelSingleDiff+0x78>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d115      	bne.n	8009a50 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a30:	43db      	mvns	r3, r3
 8009a32:	401a      	ands	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f003 0318 	and.w	r3, r3, #24
 8009a3a:	4914      	ldr	r1, [pc, #80]	@ (8009a8c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009a3c:	40d9      	lsrs	r1, r3
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	400b      	ands	r3, r1
 8009a42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a46:	431a      	orrs	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8009a4e:	e014      	b.n	8009a7a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a5c:	43db      	mvns	r3, r3
 8009a5e:	401a      	ands	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f003 0318 	and.w	r3, r3, #24
 8009a66:	4909      	ldr	r1, [pc, #36]	@ (8009a8c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009a68:	40d9      	lsrs	r1, r3
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	400b      	ands	r3, r1
 8009a6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a72:	431a      	orrs	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8009a7a:	bf00      	nop
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	58026000 	.word	0x58026000
 8009a8c:	000fffff 	.word	0x000fffff

08009a90 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	f003 031f 	and.w	r3, r3, #31
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	4b04      	ldr	r3, [pc, #16]	@ (8009ae8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	6093      	str	r3, [r2, #8]
}
 8009adc:	bf00      	nop
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	5fffffc0 	.word	0x5fffffc0

08009aec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b00:	d101      	bne.n	8009b06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009b02:	2301      	movs	r3, #1
 8009b04:	e000      	b.n	8009b08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689a      	ldr	r2, [r3, #8]
 8009b20:	4b05      	ldr	r3, [pc, #20]	@ (8009b38 <LL_ADC_EnableInternalRegulator+0x24>)
 8009b22:	4013      	ands	r3, r2
 8009b24:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr
 8009b38:	6fffffc0 	.word	0x6fffffc0

08009b3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b50:	d101      	bne.n	8009b56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009b52:	2301      	movs	r3, #1
 8009b54:	e000      	b.n	8009b58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	4b05      	ldr	r3, [pc, #20]	@ (8009b88 <LL_ADC_Enable+0x24>)
 8009b72:	4013      	ands	r3, r2
 8009b74:	f043 0201 	orr.w	r2, r3, #1
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	7fffffc0 	.word	0x7fffffc0

08009b8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	f003 0301 	and.w	r3, r3, #1
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d101      	bne.n	8009ba4 <LL_ADC_IsEnabled+0x18>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e000      	b.n	8009ba6 <LL_ADC_IsEnabled+0x1a>
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	370c      	adds	r7, #12
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
	...

08009bb4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	689a      	ldr	r2, [r3, #8]
 8009bc0:	4b05      	ldr	r3, [pc, #20]	@ (8009bd8 <LL_ADC_REG_StartConversion+0x24>)
 8009bc2:	4013      	ands	r3, r2
 8009bc4:	f043 0204 	orr.w	r2, r3, #4
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	7fffffc0 	.word	0x7fffffc0

08009bdc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f003 0304 	and.w	r3, r3, #4
 8009bec:	2b04      	cmp	r3, #4
 8009bee:	d101      	bne.n	8009bf4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e000      	b.n	8009bf6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	370c      	adds	r7, #12
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b083      	sub	sp, #12
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	f003 0308 	and.w	r3, r3, #8
 8009c12:	2b08      	cmp	r3, #8
 8009c14:	d101      	bne.n	8009c1a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009c16:	2301      	movs	r3, #1
 8009c18:	e000      	b.n	8009c1c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009c28:	b590      	push	{r4, r7, lr}
 8009c2a:	b089      	sub	sp, #36	@ 0x24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009c34:	2300      	movs	r3, #0
 8009c36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d101      	bne.n	8009c42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e1ee      	b.n	800a020 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	691b      	ldr	r3, [r3, #16]
 8009c46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d109      	bne.n	8009c64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7f9 fcd5 	bl	8003600 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7ff ff3f 	bl	8009aec <LL_ADC_IsDeepPowerDownEnabled>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d004      	beq.n	8009c7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7ff ff25 	bl	8009ac8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7ff ff5a 	bl	8009b3c <LL_ADC_IsInternalRegulatorEnabled>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d114      	bne.n	8009cb8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7ff ff3e 	bl	8009b14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009c98:	4b8e      	ldr	r3, [pc, #568]	@ (8009ed4 <HAL_ADC_Init+0x2ac>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	099b      	lsrs	r3, r3, #6
 8009c9e:	4a8e      	ldr	r2, [pc, #568]	@ (8009ed8 <HAL_ADC_Init+0x2b0>)
 8009ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ca4:	099b      	lsrs	r3, r3, #6
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009caa:	e002      	b.n	8009cb2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1f9      	bne.n	8009cac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7ff ff3d 	bl	8009b3c <LL_ADC_IsInternalRegulatorEnabled>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10d      	bne.n	8009ce4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ccc:	f043 0210 	orr.w	r2, r3, #16
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cd8:	f043 0201 	orr.w	r2, r3, #1
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7ff ff77 	bl	8009bdc <LL_ADC_REG_IsConversionOngoing>
 8009cee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cf4:	f003 0310 	and.w	r3, r3, #16
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f040 8188 	bne.w	800a00e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f040 8184 	bne.w	800a00e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d0a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009d0e:	f043 0202 	orr.w	r2, r3, #2
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7ff ff36 	bl	8009b8c <LL_ADC_IsEnabled>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d136      	bne.n	8009d94 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a6c      	ldr	r2, [pc, #432]	@ (8009edc <HAL_ADC_Init+0x2b4>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d004      	beq.n	8009d3a <HAL_ADC_Init+0x112>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a6a      	ldr	r2, [pc, #424]	@ (8009ee0 <HAL_ADC_Init+0x2b8>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d10e      	bne.n	8009d58 <HAL_ADC_Init+0x130>
 8009d3a:	4868      	ldr	r0, [pc, #416]	@ (8009edc <HAL_ADC_Init+0x2b4>)
 8009d3c:	f7ff ff26 	bl	8009b8c <LL_ADC_IsEnabled>
 8009d40:	4604      	mov	r4, r0
 8009d42:	4867      	ldr	r0, [pc, #412]	@ (8009ee0 <HAL_ADC_Init+0x2b8>)
 8009d44:	f7ff ff22 	bl	8009b8c <LL_ADC_IsEnabled>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	4323      	orrs	r3, r4
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	bf0c      	ite	eq
 8009d50:	2301      	moveq	r3, #1
 8009d52:	2300      	movne	r3, #0
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	e008      	b.n	8009d6a <HAL_ADC_Init+0x142>
 8009d58:	4862      	ldr	r0, [pc, #392]	@ (8009ee4 <HAL_ADC_Init+0x2bc>)
 8009d5a:	f7ff ff17 	bl	8009b8c <LL_ADC_IsEnabled>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	bf0c      	ite	eq
 8009d64:	2301      	moveq	r3, #1
 8009d66:	2300      	movne	r3, #0
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d012      	beq.n	8009d94 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a5a      	ldr	r2, [pc, #360]	@ (8009edc <HAL_ADC_Init+0x2b4>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d004      	beq.n	8009d82 <HAL_ADC_Init+0x15a>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a58      	ldr	r2, [pc, #352]	@ (8009ee0 <HAL_ADC_Init+0x2b8>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d101      	bne.n	8009d86 <HAL_ADC_Init+0x15e>
 8009d82:	4a59      	ldr	r2, [pc, #356]	@ (8009ee8 <HAL_ADC_Init+0x2c0>)
 8009d84:	e000      	b.n	8009d88 <HAL_ADC_Init+0x160>
 8009d86:	4a59      	ldr	r2, [pc, #356]	@ (8009eec <HAL_ADC_Init+0x2c4>)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	4610      	mov	r0, r2
 8009d90:	f7ff fc24 	bl	80095dc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a52      	ldr	r2, [pc, #328]	@ (8009ee4 <HAL_ADC_Init+0x2bc>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d129      	bne.n	8009df2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	7e5b      	ldrb	r3, [r3, #25]
 8009da2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009da8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8009dae:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	2b08      	cmp	r3, #8
 8009db6:	d013      	beq.n	8009de0 <HAL_ADC_Init+0x1b8>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	2b0c      	cmp	r3, #12
 8009dbe:	d00d      	beq.n	8009ddc <HAL_ADC_Init+0x1b4>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	2b1c      	cmp	r3, #28
 8009dc6:	d007      	beq.n	8009dd8 <HAL_ADC_Init+0x1b0>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	2b18      	cmp	r3, #24
 8009dce:	d101      	bne.n	8009dd4 <HAL_ADC_Init+0x1ac>
 8009dd0:	2318      	movs	r3, #24
 8009dd2:	e006      	b.n	8009de2 <HAL_ADC_Init+0x1ba>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	e004      	b.n	8009de2 <HAL_ADC_Init+0x1ba>
 8009dd8:	2310      	movs	r3, #16
 8009dda:	e002      	b.n	8009de2 <HAL_ADC_Init+0x1ba>
 8009ddc:	2308      	movs	r3, #8
 8009dde:	e000      	b.n	8009de2 <HAL_ADC_Init+0x1ba>
 8009de0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8009de2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009dea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009dec:	4313      	orrs	r3, r2
 8009dee:	61bb      	str	r3, [r7, #24]
 8009df0:	e00e      	b.n	8009e10 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	7e5b      	ldrb	r3, [r3, #25]
 8009df6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009dfc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8009e02:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e0a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d106      	bne.n	8009e28 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	045b      	lsls	r3, r3, #17
 8009e22:	69ba      	ldr	r2, [r7, #24]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d009      	beq.n	8009e44 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e34:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e3c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009e3e:	69ba      	ldr	r2, [r7, #24]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a26      	ldr	r2, [pc, #152]	@ (8009ee4 <HAL_ADC_Init+0x2bc>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d115      	bne.n	8009e7a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68da      	ldr	r2, [r3, #12]
 8009e54:	4b26      	ldr	r3, [pc, #152]	@ (8009ef0 <HAL_ADC_Init+0x2c8>)
 8009e56:	4013      	ands	r3, r2
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	6812      	ldr	r2, [r2, #0]
 8009e5c:	69b9      	ldr	r1, [r7, #24]
 8009e5e:	430b      	orrs	r3, r1
 8009e60:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	430a      	orrs	r2, r1
 8009e76:	611a      	str	r2, [r3, #16]
 8009e78:	e009      	b.n	8009e8e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68da      	ldr	r2, [r3, #12]
 8009e80:	4b1c      	ldr	r3, [pc, #112]	@ (8009ef4 <HAL_ADC_Init+0x2cc>)
 8009e82:	4013      	ands	r3, r2
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	6812      	ldr	r2, [r2, #0]
 8009e88:	69b9      	ldr	r1, [r7, #24]
 8009e8a:	430b      	orrs	r3, r1
 8009e8c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7ff fea2 	bl	8009bdc <LL_ADC_REG_IsConversionOngoing>
 8009e98:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7ff feaf 	bl	8009c02 <LL_ADC_INJ_IsConversionOngoing>
 8009ea4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f040 808e 	bne.w	8009fca <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f040 808a 	bne.w	8009fca <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a0a      	ldr	r2, [pc, #40]	@ (8009ee4 <HAL_ADC_Init+0x2bc>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d11b      	bne.n	8009ef8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	7e1b      	ldrb	r3, [r3, #24]
 8009ec4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009ecc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	61bb      	str	r3, [r7, #24]
 8009ed2:	e018      	b.n	8009f06 <HAL_ADC_Init+0x2de>
 8009ed4:	24000004 	.word	0x24000004
 8009ed8:	053e2d63 	.word	0x053e2d63
 8009edc:	40022000 	.word	0x40022000
 8009ee0:	40022100 	.word	0x40022100
 8009ee4:	58026000 	.word	0x58026000
 8009ee8:	40022300 	.word	0x40022300
 8009eec:	58026300 	.word	0x58026300
 8009ef0:	fff04007 	.word	0xfff04007
 8009ef4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	7e1b      	ldrb	r3, [r3, #24]
 8009efc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8009f02:	4313      	orrs	r3, r2
 8009f04:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68da      	ldr	r2, [r3, #12]
 8009f0c:	4b46      	ldr	r3, [pc, #280]	@ (800a028 <HAL_ADC_Init+0x400>)
 8009f0e:	4013      	ands	r3, r2
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	6812      	ldr	r2, [r2, #0]
 8009f14:	69b9      	ldr	r1, [r7, #24]
 8009f16:	430b      	orrs	r3, r1
 8009f18:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d137      	bne.n	8009f94 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f28:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a3f      	ldr	r2, [pc, #252]	@ (800a02c <HAL_ADC_Init+0x404>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d116      	bne.n	8009f62 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	691a      	ldr	r2, [r3, #16]
 8009f3a:	4b3d      	ldr	r3, [pc, #244]	@ (800a030 <HAL_ADC_Init+0x408>)
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009f46:	4311      	orrs	r1, r2
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009f4c:	4311      	orrs	r1, r2
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009f52:	430a      	orrs	r2, r1
 8009f54:	431a      	orrs	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f042 0201 	orr.w	r2, r2, #1
 8009f5e:	611a      	str	r2, [r3, #16]
 8009f60:	e020      	b.n	8009fa4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	691a      	ldr	r2, [r3, #16]
 8009f68:	4b32      	ldr	r3, [pc, #200]	@ (800a034 <HAL_ADC_Init+0x40c>)
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009f70:	3a01      	subs	r2, #1
 8009f72:	0411      	lsls	r1, r2, #16
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009f78:	4311      	orrs	r1, r2
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009f7e:	4311      	orrs	r1, r2
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009f84:	430a      	orrs	r2, r1
 8009f86:	431a      	orrs	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f042 0201 	orr.w	r2, r2, #1
 8009f90:	611a      	str	r2, [r3, #16]
 8009f92:	e007      	b.n	8009fa4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	691a      	ldr	r2, [r3, #16]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f022 0201 	bic.w	r2, r2, #1
 8009fa2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	430a      	orrs	r2, r1
 8009fb8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a1b      	ldr	r2, [pc, #108]	@ (800a02c <HAL_ADC_Init+0x404>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d002      	beq.n	8009fca <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f001 f967 	bl	800b298 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d10c      	bne.n	8009fec <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fd8:	f023 010f 	bic.w	r1, r3, #15
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	69db      	ldr	r3, [r3, #28]
 8009fe0:	1e5a      	subs	r2, r3, #1
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	430a      	orrs	r2, r1
 8009fe8:	631a      	str	r2, [r3, #48]	@ 0x30
 8009fea:	e007      	b.n	8009ffc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f022 020f 	bic.w	r2, r2, #15
 8009ffa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a000:	f023 0303 	bic.w	r3, r3, #3
 800a004:	f043 0201 	orr.w	r2, r3, #1
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	661a      	str	r2, [r3, #96]	@ 0x60
 800a00c:	e007      	b.n	800a01e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a012:	f043 0210 	orr.w	r2, r3, #16
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a01e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3724      	adds	r7, #36	@ 0x24
 800a024:	46bd      	mov	sp, r7
 800a026:	bd90      	pop	{r4, r7, pc}
 800a028:	ffffbffc 	.word	0xffffbffc
 800a02c:	58026000 	.word	0x58026000
 800a030:	fc00f81f 	.word	0xfc00f81f
 800a034:	fc00f81e 	.word	0xfc00f81e

0800a038 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a60      	ldr	r2, [pc, #384]	@ (800a1cc <HAL_ADC_Start_DMA+0x194>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d004      	beq.n	800a058 <HAL_ADC_Start_DMA+0x20>
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a5f      	ldr	r2, [pc, #380]	@ (800a1d0 <HAL_ADC_Start_DMA+0x198>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d101      	bne.n	800a05c <HAL_ADC_Start_DMA+0x24>
 800a058:	4b5e      	ldr	r3, [pc, #376]	@ (800a1d4 <HAL_ADC_Start_DMA+0x19c>)
 800a05a:	e000      	b.n	800a05e <HAL_ADC_Start_DMA+0x26>
 800a05c:	4b5e      	ldr	r3, [pc, #376]	@ (800a1d8 <HAL_ADC_Start_DMA+0x1a0>)
 800a05e:	4618      	mov	r0, r3
 800a060:	f7ff fd16 	bl	8009a90 <LL_ADC_GetMultimode>
 800a064:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7ff fdb6 	bl	8009bdc <LL_ADC_REG_IsConversionOngoing>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	f040 80a2 	bne.w	800a1bc <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d101      	bne.n	800a086 <HAL_ADC_Start_DMA+0x4e>
 800a082:	2302      	movs	r3, #2
 800a084:	e09d      	b.n	800a1c2 <HAL_ADC_Start_DMA+0x18a>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d006      	beq.n	800a0a2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	2b05      	cmp	r3, #5
 800a098:	d003      	beq.n	800a0a2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	2b09      	cmp	r3, #9
 800a09e:	f040 8086 	bne.w	800a1ae <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f000 ffda 	bl	800b05c <ADC_Enable>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d178      	bne.n	800a1a4 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a0b6:	4b49      	ldr	r3, [pc, #292]	@ (800a1dc <HAL_ADC_Start_DMA+0x1a4>)
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a42      	ldr	r2, [pc, #264]	@ (800a1d0 <HAL_ADC_Start_DMA+0x198>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d002      	beq.n	800a0d2 <HAL_ADC_Start_DMA+0x9a>
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	e000      	b.n	800a0d4 <HAL_ADC_Start_DMA+0x9c>
 800a0d2:	4b3e      	ldr	r3, [pc, #248]	@ (800a1cc <HAL_ADC_Start_DMA+0x194>)
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	6812      	ldr	r2, [r2, #0]
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d002      	beq.n	800a0e2 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d105      	bne.n	800a0ee <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0e6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d006      	beq.n	800a108 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0fe:	f023 0206 	bic.w	r2, r3, #6
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	665a      	str	r2, [r3, #100]	@ 0x64
 800a106:	e002      	b.n	800a10e <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2200      	movs	r2, #0
 800a10c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a112:	4a33      	ldr	r2, [pc, #204]	@ (800a1e0 <HAL_ADC_Start_DMA+0x1a8>)
 800a114:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a11a:	4a32      	ldr	r2, [pc, #200]	@ (800a1e4 <HAL_ADC_Start_DMA+0x1ac>)
 800a11c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a122:	4a31      	ldr	r2, [pc, #196]	@ (800a1e8 <HAL_ADC_Start_DMA+0x1b0>)
 800a124:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	221c      	movs	r2, #28
 800a12c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f042 0210 	orr.w	r2, r2, #16
 800a144:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a28      	ldr	r2, [pc, #160]	@ (800a1ec <HAL_ADC_Start_DMA+0x1b4>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d10f      	bne.n	800a170 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a15a:	005b      	lsls	r3, r3, #1
 800a15c:	4619      	mov	r1, r3
 800a15e:	4610      	mov	r0, r2
 800a160:	f7ff fbfe 	bl	8009960 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4618      	mov	r0, r3
 800a16a:	f7ff fbe9 	bl	8009940 <LL_ADC_EnableDMAReq>
 800a16e:	e007      	b.n	800a180 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a178:	4619      	mov	r1, r3
 800a17a:	4610      	mov	r0, r2
 800a17c:	f7ff fbcd 	bl	800991a <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	3340      	adds	r3, #64	@ 0x40
 800a18a:	4619      	mov	r1, r3
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f001 fe82 	bl	800be98 <HAL_DMA_Start_IT>
 800a194:	4603      	mov	r3, r0
 800a196:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7ff fd09 	bl	8009bb4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a1a2:	e00d      	b.n	800a1c0 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 800a1ac:	e008      	b.n	800a1c0 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800a1ba:	e001      	b.n	800a1c0 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a1bc:	2302      	movs	r3, #2
 800a1be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3718      	adds	r7, #24
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	40022000 	.word	0x40022000
 800a1d0:	40022100 	.word	0x40022100
 800a1d4:	40022300 	.word	0x40022300
 800a1d8:	58026300 	.word	0x58026300
 800a1dc:	fffff0fe 	.word	0xfffff0fe
 800a1e0:	0800b171 	.word	0x0800b171
 800a1e4:	0800b249 	.word	0x0800b249
 800a1e8:	0800b265 	.word	0x0800b265
 800a1ec:	58026000 	.word	0x58026000

0800a1f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b08a      	sub	sp, #40	@ 0x28
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a87      	ldr	r2, [pc, #540]	@ (800a430 <HAL_ADC_IRQHandler+0x240>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d004      	beq.n	800a220 <HAL_ADC_IRQHandler+0x30>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a86      	ldr	r2, [pc, #536]	@ (800a434 <HAL_ADC_IRQHandler+0x244>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d101      	bne.n	800a224 <HAL_ADC_IRQHandler+0x34>
 800a220:	4b85      	ldr	r3, [pc, #532]	@ (800a438 <HAL_ADC_IRQHandler+0x248>)
 800a222:	e000      	b.n	800a226 <HAL_ADC_IRQHandler+0x36>
 800a224:	4b85      	ldr	r3, [pc, #532]	@ (800a43c <HAL_ADC_IRQHandler+0x24c>)
 800a226:	4618      	mov	r0, r3
 800a228:	f7ff fc32 	bl	8009a90 <LL_ADC_GetMultimode>
 800a22c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	f003 0302 	and.w	r3, r3, #2
 800a234:	2b00      	cmp	r3, #0
 800a236:	d017      	beq.n	800a268 <HAL_ADC_IRQHandler+0x78>
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	f003 0302 	and.w	r3, r3, #2
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d012      	beq.n	800a268 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a246:	f003 0310 	and.w	r3, r3, #16
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d105      	bne.n	800a25a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a252:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f001 f932 	bl	800b4c4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2202      	movs	r2, #2
 800a266:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	f003 0304 	and.w	r3, r3, #4
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d004      	beq.n	800a27c <HAL_ADC_IRQHandler+0x8c>
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	f003 0304 	and.w	r3, r3, #4
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10a      	bne.n	800a292 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a282:	2b00      	cmp	r3, #0
 800a284:	f000 8083 	beq.w	800a38e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	f003 0308 	and.w	r3, r3, #8
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d07d      	beq.n	800a38e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a296:	f003 0310 	and.w	r3, r3, #16
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d105      	bne.n	800a2aa <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7ff faf4 	bl	800989c <LL_ADC_REG_IsTriggerSourceSWStart>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d062      	beq.n	800a380 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a5d      	ldr	r2, [pc, #372]	@ (800a434 <HAL_ADC_IRQHandler+0x244>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d002      	beq.n	800a2ca <HAL_ADC_IRQHandler+0xda>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	e000      	b.n	800a2cc <HAL_ADC_IRQHandler+0xdc>
 800a2ca:	4b59      	ldr	r3, [pc, #356]	@ (800a430 <HAL_ADC_IRQHandler+0x240>)
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	6812      	ldr	r2, [r2, #0]
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d008      	beq.n	800a2e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d005      	beq.n	800a2e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	2b05      	cmp	r3, #5
 800a2de:	d002      	beq.n	800a2e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	2b09      	cmp	r3, #9
 800a2e4:	d104      	bne.n	800a2f0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	623b      	str	r3, [r7, #32]
 800a2ee:	e00c      	b.n	800a30a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a4f      	ldr	r2, [pc, #316]	@ (800a434 <HAL_ADC_IRQHandler+0x244>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d002      	beq.n	800a300 <HAL_ADC_IRQHandler+0x110>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	e000      	b.n	800a302 <HAL_ADC_IRQHandler+0x112>
 800a300:	4b4b      	ldr	r3, [pc, #300]	@ (800a430 <HAL_ADC_IRQHandler+0x240>)
 800a302:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800a30a:	6a3b      	ldr	r3, [r7, #32]
 800a30c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a310:	2b00      	cmp	r3, #0
 800a312:	d135      	bne.n	800a380 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0308 	and.w	r3, r3, #8
 800a31e:	2b08      	cmp	r3, #8
 800a320:	d12e      	bne.n	800a380 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4618      	mov	r0, r3
 800a328:	f7ff fc58 	bl	8009bdc <LL_ADC_REG_IsConversionOngoing>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d11a      	bne.n	800a368 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f022 020c 	bic.w	r2, r2, #12
 800a340:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a346:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a352:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a356:	2b00      	cmp	r3, #0
 800a358:	d112      	bne.n	800a380 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a35e:	f043 0201 	orr.w	r2, r3, #1
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	661a      	str	r2, [r3, #96]	@ 0x60
 800a366:	e00b      	b.n	800a380 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a36c:	f043 0210 	orr.w	r2, r3, #16
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a378:	f043 0201 	orr.w	r2, r3, #1
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f96f 	bl	800a664 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	220c      	movs	r2, #12
 800a38c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	f003 0320 	and.w	r3, r3, #32
 800a394:	2b00      	cmp	r3, #0
 800a396:	d004      	beq.n	800a3a2 <HAL_ADC_IRQHandler+0x1b2>
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	f003 0320 	and.w	r3, r3, #32
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d10b      	bne.n	800a3ba <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 80a0 	beq.w	800a4ee <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a3ae:	69bb      	ldr	r3, [r7, #24]
 800a3b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f000 809a 	beq.w	800a4ee <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3be:	f003 0310 	and.w	r3, r3, #16
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d105      	bne.n	800a3d2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3ca:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7ff fadc 	bl	8009994 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800a3dc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7ff fa5a 	bl	800989c <LL_ADC_REG_IsTriggerSourceSWStart>
 800a3e8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a11      	ldr	r2, [pc, #68]	@ (800a434 <HAL_ADC_IRQHandler+0x244>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d002      	beq.n	800a3fa <HAL_ADC_IRQHandler+0x20a>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	e000      	b.n	800a3fc <HAL_ADC_IRQHandler+0x20c>
 800a3fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a430 <HAL_ADC_IRQHandler+0x240>)
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	6812      	ldr	r2, [r2, #0]
 800a400:	4293      	cmp	r3, r2
 800a402:	d008      	beq.n	800a416 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d005      	beq.n	800a416 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	2b06      	cmp	r3, #6
 800a40e:	d002      	beq.n	800a416 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2b07      	cmp	r3, #7
 800a414:	d104      	bne.n	800a420 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	623b      	str	r3, [r7, #32]
 800a41e:	e014      	b.n	800a44a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a03      	ldr	r2, [pc, #12]	@ (800a434 <HAL_ADC_IRQHandler+0x244>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d00a      	beq.n	800a440 <HAL_ADC_IRQHandler+0x250>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	e008      	b.n	800a442 <HAL_ADC_IRQHandler+0x252>
 800a430:	40022000 	.word	0x40022000
 800a434:	40022100 	.word	0x40022100
 800a438:	40022300 	.word	0x40022300
 800a43c:	58026300 	.word	0x58026300
 800a440:	4b84      	ldr	r3, [pc, #528]	@ (800a654 <HAL_ADC_IRQHandler+0x464>)
 800a442:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d047      	beq.n	800a4e0 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800a450:	6a3b      	ldr	r3, [r7, #32]
 800a452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a456:	2b00      	cmp	r3, #0
 800a458:	d007      	beq.n	800a46a <HAL_ADC_IRQHandler+0x27a>
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d03f      	beq.n	800a4e0 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800a460:	6a3b      	ldr	r3, [r7, #32]
 800a462:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800a466:	2b00      	cmp	r3, #0
 800a468:	d13a      	bne.n	800a4e0 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a474:	2b40      	cmp	r3, #64	@ 0x40
 800a476:	d133      	bne.n	800a4e0 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800a478:	6a3b      	ldr	r3, [r7, #32]
 800a47a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d12e      	bne.n	800a4e0 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4618      	mov	r0, r3
 800a488:	f7ff fbbb 	bl	8009c02 <LL_ADC_INJ_IsConversionOngoing>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d11a      	bne.n	800a4c8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	685a      	ldr	r2, [r3, #4]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a4a0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d112      	bne.n	800a4e0 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4be:	f043 0201 	orr.w	r2, r3, #1
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	661a      	str	r2, [r3, #96]	@ 0x60
 800a4c6:	e00b      	b.n	800a4e0 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4cc:	f043 0210 	orr.w	r2, r3, #16
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4d8:	f043 0201 	orr.w	r2, r3, #1
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 ffc7 	bl	800b474 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2260      	movs	r2, #96	@ 0x60
 800a4ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d011      	beq.n	800a51c <HAL_ADC_IRQHandler+0x32c>
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00c      	beq.n	800a51c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a506:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f8bc 	bl	800a68c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2280      	movs	r2, #128	@ 0x80
 800a51a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a522:	2b00      	cmp	r3, #0
 800a524:	d012      	beq.n	800a54c <HAL_ADC_IRQHandler+0x35c>
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00d      	beq.n	800a54c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a534:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 ffad 	bl	800b49c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a54a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a552:	2b00      	cmp	r3, #0
 800a554:	d012      	beq.n	800a57c <HAL_ADC_IRQHandler+0x38c>
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00d      	beq.n	800a57c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a564:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 ff9f 	bl	800b4b0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a57a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	f003 0310 	and.w	r3, r3, #16
 800a582:	2b00      	cmp	r3, #0
 800a584:	d043      	beq.n	800a60e <HAL_ADC_IRQHandler+0x41e>
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	f003 0310 	and.w	r3, r3, #16
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d03e      	beq.n	800a60e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a594:	2b00      	cmp	r3, #0
 800a596:	d102      	bne.n	800a59e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800a598:	2301      	movs	r3, #1
 800a59a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a59c:	e021      	b.n	800a5e2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d015      	beq.n	800a5d0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a2a      	ldr	r2, [pc, #168]	@ (800a654 <HAL_ADC_IRQHandler+0x464>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d004      	beq.n	800a5b8 <HAL_ADC_IRQHandler+0x3c8>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a29      	ldr	r2, [pc, #164]	@ (800a658 <HAL_ADC_IRQHandler+0x468>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d101      	bne.n	800a5bc <HAL_ADC_IRQHandler+0x3cc>
 800a5b8:	4b28      	ldr	r3, [pc, #160]	@ (800a65c <HAL_ADC_IRQHandler+0x46c>)
 800a5ba:	e000      	b.n	800a5be <HAL_ADC_IRQHandler+0x3ce>
 800a5bc:	4b28      	ldr	r3, [pc, #160]	@ (800a660 <HAL_ADC_IRQHandler+0x470>)
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7ff fa74 	bl	8009aac <LL_ADC_GetMultiDMATransfer>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00b      	beq.n	800a5e2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5ce:	e008      	b.n	800a5e2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	f003 0303 	and.w	r3, r3, #3
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d001      	beq.n	800a5e2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d10e      	bne.n	800a606 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5ec:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5f8:	f043 0202 	orr.w	r2, r3, #2
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f84d 	bl	800a6a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2210      	movs	r2, #16
 800a60c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a614:	2b00      	cmp	r3, #0
 800a616:	d018      	beq.n	800a64a <HAL_ADC_IRQHandler+0x45a>
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d013      	beq.n	800a64a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a626:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a632:	f043 0208 	orr.w	r2, r3, #8
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a642:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 ff1f 	bl	800b488 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a64a:	bf00      	nop
 800a64c:	3728      	adds	r7, #40	@ 0x28
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	40022000 	.word	0x40022000
 800a658:	40022100 	.word	0x40022100
 800a65c:	40022300 	.word	0x40022300
 800a660:	58026300 	.word	0x58026300

0800a664 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a66c:	bf00      	nop
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a694:	bf00      	nop
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a6b4:	b590      	push	{r4, r7, lr}
 800a6b6:	b0a5      	sub	sp, #148	@ 0x94
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6ce:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	4aa4      	ldr	r2, [pc, #656]	@ (800a968 <HAL_ADC_ConfigChannel+0x2b4>)
 800a6d6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d102      	bne.n	800a6e8 <HAL_ADC_ConfigChannel+0x34>
 800a6e2:	2302      	movs	r3, #2
 800a6e4:	f000 bca2 	b.w	800b02c <HAL_ADC_ConfigChannel+0x978>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7ff fa71 	bl	8009bdc <LL_ADC_REG_IsConversionOngoing>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f040 8486 	bne.w	800b00e <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	db31      	blt.n	800a76e <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a97      	ldr	r2, [pc, #604]	@ (800a96c <HAL_ADC_ConfigChannel+0x2b8>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d02c      	beq.n	800a76e <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d108      	bne.n	800a732 <HAL_ADC_ConfigChannel+0x7e>
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	0e9b      	lsrs	r3, r3, #26
 800a726:	f003 031f 	and.w	r3, r3, #31
 800a72a:	2201      	movs	r2, #1
 800a72c:	fa02 f303 	lsl.w	r3, r2, r3
 800a730:	e016      	b.n	800a760 <HAL_ADC_ConfigChannel+0xac>
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a738:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a73a:	fa93 f3a3 	rbit	r3, r3
 800a73e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800a740:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a742:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800a744:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a746:	2b00      	cmp	r3, #0
 800a748:	d101      	bne.n	800a74e <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800a74a:	2320      	movs	r3, #32
 800a74c:	e003      	b.n	800a756 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800a74e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a750:	fab3 f383 	clz	r3, r3
 800a754:	b2db      	uxtb	r3, r3
 800a756:	f003 031f 	and.w	r3, r3, #31
 800a75a:	2201      	movs	r2, #1
 800a75c:	fa02 f303 	lsl.w	r3, r2, r3
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	6812      	ldr	r2, [r2, #0]
 800a764:	69d1      	ldr	r1, [r2, #28]
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	6812      	ldr	r2, [r2, #0]
 800a76a:	430b      	orrs	r3, r1
 800a76c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	6859      	ldr	r1, [r3, #4]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	461a      	mov	r2, r3
 800a77c:	f7ff f8a1 	bl	80098c2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4618      	mov	r0, r3
 800a786:	f7ff fa29 	bl	8009bdc <LL_ADC_REG_IsConversionOngoing>
 800a78a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4618      	mov	r0, r3
 800a794:	f7ff fa35 	bl	8009c02 <LL_ADC_INJ_IsConversionOngoing>
 800a798:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a79c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f040 824a 	bne.w	800ac3a <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a7a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f040 8245 	bne.w	800ac3a <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6818      	ldr	r0, [r3, #0]
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	6819      	ldr	r1, [r3, #0]
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	461a      	mov	r2, r3
 800a7be:	f7ff f8fc 	bl	80099ba <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a69      	ldr	r2, [pc, #420]	@ (800a96c <HAL_ADC_ConfigChannel+0x2b8>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d10d      	bne.n	800a7e8 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	695a      	ldr	r2, [r3, #20]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	08db      	lsrs	r3, r3, #3
 800a7d8:	f003 0303 	and.w	r3, r3, #3
 800a7dc:	005b      	lsls	r3, r3, #1
 800a7de:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a7e6:	e032      	b.n	800a84e <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a7e8:	4b61      	ldr	r3, [pc, #388]	@ (800a970 <HAL_ADC_ConfigChannel+0x2bc>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a7f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7f4:	d10b      	bne.n	800a80e <HAL_ADC_ConfigChannel+0x15a>
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	695a      	ldr	r2, [r3, #20]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	089b      	lsrs	r3, r3, #2
 800a802:	f003 0307 	and.w	r3, r3, #7
 800a806:	005b      	lsls	r3, r3, #1
 800a808:	fa02 f303 	lsl.w	r3, r2, r3
 800a80c:	e01d      	b.n	800a84a <HAL_ADC_ConfigChannel+0x196>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	f003 0310 	and.w	r3, r3, #16
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10b      	bne.n	800a834 <HAL_ADC_ConfigChannel+0x180>
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	695a      	ldr	r2, [r3, #20]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	089b      	lsrs	r3, r3, #2
 800a828:	f003 0307 	and.w	r3, r3, #7
 800a82c:	005b      	lsls	r3, r3, #1
 800a82e:	fa02 f303 	lsl.w	r3, r2, r3
 800a832:	e00a      	b.n	800a84a <HAL_ADC_ConfigChannel+0x196>
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	695a      	ldr	r2, [r3, #20]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	089b      	lsrs	r3, r3, #2
 800a840:	f003 0304 	and.w	r3, r3, #4
 800a844:	005b      	lsls	r3, r3, #1
 800a846:	fa02 f303 	lsl.w	r3, r2, r3
 800a84a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	2b04      	cmp	r3, #4
 800a854:	d048      	beq.n	800a8e8 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6818      	ldr	r0, [r3, #0]
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	6919      	ldr	r1, [r3, #16]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a866:	f7fe ff27 	bl	80096b8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a3f      	ldr	r2, [pc, #252]	@ (800a96c <HAL_ADC_ConfigChannel+0x2b8>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d119      	bne.n	800a8a8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6818      	ldr	r0, [r3, #0]
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	6919      	ldr	r1, [r3, #16]
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	69db      	ldr	r3, [r3, #28]
 800a880:	461a      	mov	r2, r3
 800a882:	f7fe ffbf 	bl	8009804 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6818      	ldr	r0, [r3, #0]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	6919      	ldr	r1, [r3, #16]
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a894:	2b01      	cmp	r3, #1
 800a896:	d102      	bne.n	800a89e <HAL_ADC_ConfigChannel+0x1ea>
 800a898:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a89c:	e000      	b.n	800a8a0 <HAL_ADC_ConfigChannel+0x1ec>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	f7fe ff8d 	bl	80097c0 <LL_ADC_SetOffsetSaturation>
 800a8a6:	e1c8      	b.n	800ac3a <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6818      	ldr	r0, [r3, #0]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	6919      	ldr	r1, [r3, #16]
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d102      	bne.n	800a8c0 <HAL_ADC_ConfigChannel+0x20c>
 800a8ba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a8be:	e000      	b.n	800a8c2 <HAL_ADC_ConfigChannel+0x20e>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	f7fe ff5a 	bl	800977c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6818      	ldr	r0, [r3, #0]
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	6919      	ldr	r1, [r3, #16]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	7e1b      	ldrb	r3, [r3, #24]
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d102      	bne.n	800a8de <HAL_ADC_ConfigChannel+0x22a>
 800a8d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a8dc:	e000      	b.n	800a8e0 <HAL_ADC_ConfigChannel+0x22c>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	f7fe ff31 	bl	8009748 <LL_ADC_SetDataRightShift>
 800a8e6:	e1a8      	b.n	800ac3a <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a1f      	ldr	r2, [pc, #124]	@ (800a96c <HAL_ADC_ConfigChannel+0x2b8>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	f040 815b 	bne.w	800abaa <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7fe ff0e 	bl	800971c <LL_ADC_GetOffsetChannel>
 800a900:	4603      	mov	r3, r0
 800a902:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10a      	bne.n	800a920 <HAL_ADC_ConfigChannel+0x26c>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2100      	movs	r1, #0
 800a910:	4618      	mov	r0, r3
 800a912:	f7fe ff03 	bl	800971c <LL_ADC_GetOffsetChannel>
 800a916:	4603      	mov	r3, r0
 800a918:	0e9b      	lsrs	r3, r3, #26
 800a91a:	f003 021f 	and.w	r2, r3, #31
 800a91e:	e017      	b.n	800a950 <HAL_ADC_ConfigChannel+0x29c>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2100      	movs	r1, #0
 800a926:	4618      	mov	r0, r3
 800a928:	f7fe fef8 	bl	800971c <LL_ADC_GetOffsetChannel>
 800a92c:	4603      	mov	r3, r0
 800a92e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a930:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a932:	fa93 f3a3 	rbit	r3, r3
 800a936:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800a938:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a93a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800a93c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800a942:	2320      	movs	r3, #32
 800a944:	e003      	b.n	800a94e <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800a946:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a948:	fab3 f383 	clz	r3, r3
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	461a      	mov	r2, r3
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10b      	bne.n	800a974 <HAL_ADC_ConfigChannel+0x2c0>
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	0e9b      	lsrs	r3, r3, #26
 800a962:	f003 031f 	and.w	r3, r3, #31
 800a966:	e017      	b.n	800a998 <HAL_ADC_ConfigChannel+0x2e4>
 800a968:	47ff0000 	.word	0x47ff0000
 800a96c:	58026000 	.word	0x58026000
 800a970:	5c001000 	.word	0x5c001000
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a97a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a97c:	fa93 f3a3 	rbit	r3, r3
 800a980:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800a982:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a984:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800a986:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d101      	bne.n	800a990 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800a98c:	2320      	movs	r3, #32
 800a98e:	e003      	b.n	800a998 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800a990:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a992:	fab3 f383 	clz	r3, r3
 800a996:	b2db      	uxtb	r3, r3
 800a998:	429a      	cmp	r2, r3
 800a99a:	d106      	bne.n	800a9aa <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7fe ff4f 	bl	8009848 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2101      	movs	r1, #1
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fe feb3 	bl	800971c <LL_ADC_GetOffsetChannel>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10a      	bne.n	800a9d6 <HAL_ADC_ConfigChannel+0x322>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2101      	movs	r1, #1
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fe fea8 	bl	800971c <LL_ADC_GetOffsetChannel>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	0e9b      	lsrs	r3, r3, #26
 800a9d0:	f003 021f 	and.w	r2, r3, #31
 800a9d4:	e017      	b.n	800aa06 <HAL_ADC_ConfigChannel+0x352>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2101      	movs	r1, #1
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7fe fe9d 	bl	800971c <LL_ADC_GetOffsetChannel>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9e8:	fa93 f3a3 	rbit	r3, r3
 800a9ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800a9ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800a9f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d101      	bne.n	800a9fc <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800a9f8:	2320      	movs	r3, #32
 800a9fa:	e003      	b.n	800aa04 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800a9fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9fe:	fab3 f383 	clz	r3, r3
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	461a      	mov	r2, r3
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d105      	bne.n	800aa1e <HAL_ADC_ConfigChannel+0x36a>
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	0e9b      	lsrs	r3, r3, #26
 800aa18:	f003 031f 	and.w	r3, r3, #31
 800aa1c:	e011      	b.n	800aa42 <HAL_ADC_ConfigChannel+0x38e>
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa26:	fa93 f3a3 	rbit	r3, r3
 800aa2a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800aa2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800aa30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d101      	bne.n	800aa3a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800aa36:	2320      	movs	r3, #32
 800aa38:	e003      	b.n	800aa42 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800aa3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa3c:	fab3 f383 	clz	r3, r3
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d106      	bne.n	800aa54 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	2101      	movs	r1, #1
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7fe fefa 	bl	8009848 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2102      	movs	r1, #2
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fe fe5e 	bl	800971c <LL_ADC_GetOffsetChannel>
 800aa60:	4603      	mov	r3, r0
 800aa62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d10a      	bne.n	800aa80 <HAL_ADC_ConfigChannel+0x3cc>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2102      	movs	r1, #2
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fe fe53 	bl	800971c <LL_ADC_GetOffsetChannel>
 800aa76:	4603      	mov	r3, r0
 800aa78:	0e9b      	lsrs	r3, r3, #26
 800aa7a:	f003 021f 	and.w	r2, r3, #31
 800aa7e:	e017      	b.n	800aab0 <HAL_ADC_ConfigChannel+0x3fc>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2102      	movs	r1, #2
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7fe fe48 	bl	800971c <LL_ADC_GetOffsetChannel>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa92:	fa93 f3a3 	rbit	r3, r3
 800aa96:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800aa98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800aa9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d101      	bne.n	800aaa6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800aaa2:	2320      	movs	r3, #32
 800aaa4:	e003      	b.n	800aaae <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800aaa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaa8:	fab3 f383 	clz	r3, r3
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	461a      	mov	r2, r3
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d105      	bne.n	800aac8 <HAL_ADC_ConfigChannel+0x414>
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	0e9b      	lsrs	r3, r3, #26
 800aac2:	f003 031f 	and.w	r3, r3, #31
 800aac6:	e011      	b.n	800aaec <HAL_ADC_ConfigChannel+0x438>
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aad0:	fa93 f3a3 	rbit	r3, r3
 800aad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800aad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800aada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d101      	bne.n	800aae4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800aae0:	2320      	movs	r3, #32
 800aae2:	e003      	b.n	800aaec <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800aae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae6:	fab3 f383 	clz	r3, r3
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d106      	bne.n	800aafe <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	2102      	movs	r1, #2
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fe fea5 	bl	8009848 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2103      	movs	r1, #3
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fe fe09 	bl	800971c <LL_ADC_GetOffsetChannel>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d10a      	bne.n	800ab2a <HAL_ADC_ConfigChannel+0x476>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2103      	movs	r1, #3
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fe fdfe 	bl	800971c <LL_ADC_GetOffsetChannel>
 800ab20:	4603      	mov	r3, r0
 800ab22:	0e9b      	lsrs	r3, r3, #26
 800ab24:	f003 021f 	and.w	r2, r3, #31
 800ab28:	e017      	b.n	800ab5a <HAL_ADC_ConfigChannel+0x4a6>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2103      	movs	r1, #3
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7fe fdf3 	bl	800971c <LL_ADC_GetOffsetChannel>
 800ab36:	4603      	mov	r3, r0
 800ab38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab3a:	6a3b      	ldr	r3, [r7, #32]
 800ab3c:	fa93 f3a3 	rbit	r3, r3
 800ab40:	61fb      	str	r3, [r7, #28]
  return result;
 800ab42:	69fb      	ldr	r3, [r7, #28]
 800ab44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ab46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d101      	bne.n	800ab50 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800ab4c:	2320      	movs	r3, #32
 800ab4e:	e003      	b.n	800ab58 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800ab50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab52:	fab3 f383 	clz	r3, r3
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	461a      	mov	r2, r3
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d105      	bne.n	800ab72 <HAL_ADC_ConfigChannel+0x4be>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	0e9b      	lsrs	r3, r3, #26
 800ab6c:	f003 031f 	and.w	r3, r3, #31
 800ab70:	e011      	b.n	800ab96 <HAL_ADC_ConfigChannel+0x4e2>
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	fa93 f3a3 	rbit	r3, r3
 800ab7e:	613b      	str	r3, [r7, #16]
  return result;
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d101      	bne.n	800ab8e <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800ab8a:	2320      	movs	r3, #32
 800ab8c:	e003      	b.n	800ab96 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	fab3 f383 	clz	r3, r3
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d14f      	bne.n	800ac3a <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	2103      	movs	r1, #3
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fe fe50 	bl	8009848 <LL_ADC_SetOffsetState>
 800aba8:	e047      	b.n	800ac3a <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abb0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	069b      	lsls	r3, r3, #26
 800abba:	429a      	cmp	r2, r3
 800abbc:	d107      	bne.n	800abce <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800abcc:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abd4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	069b      	lsls	r3, r3, #26
 800abde:	429a      	cmp	r2, r3
 800abe0:	d107      	bne.n	800abf2 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800abf0:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abf8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	069b      	lsls	r3, r3, #26
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d107      	bne.n	800ac16 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ac14:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac1c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	069b      	lsls	r3, r3, #26
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d107      	bne.n	800ac3a <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ac38:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fe ffa4 	bl	8009b8c <LL_ADC_IsEnabled>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f040 81ea 	bne.w	800b020 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6818      	ldr	r0, [r3, #0]
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	6819      	ldr	r1, [r3, #0]
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	461a      	mov	r2, r3
 800ac5a:	f7fe fed9 	bl	8009a10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	4a7a      	ldr	r2, [pc, #488]	@ (800ae4c <HAL_ADC_ConfigChannel+0x798>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	f040 80e0 	bne.w	800ae2a <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4977      	ldr	r1, [pc, #476]	@ (800ae50 <HAL_ADC_ConfigChannel+0x79c>)
 800ac74:	428b      	cmp	r3, r1
 800ac76:	d147      	bne.n	800ad08 <HAL_ADC_ConfigChannel+0x654>
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4975      	ldr	r1, [pc, #468]	@ (800ae54 <HAL_ADC_ConfigChannel+0x7a0>)
 800ac7e:	428b      	cmp	r3, r1
 800ac80:	d040      	beq.n	800ad04 <HAL_ADC_ConfigChannel+0x650>
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4974      	ldr	r1, [pc, #464]	@ (800ae58 <HAL_ADC_ConfigChannel+0x7a4>)
 800ac88:	428b      	cmp	r3, r1
 800ac8a:	d039      	beq.n	800ad00 <HAL_ADC_ConfigChannel+0x64c>
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4972      	ldr	r1, [pc, #456]	@ (800ae5c <HAL_ADC_ConfigChannel+0x7a8>)
 800ac92:	428b      	cmp	r3, r1
 800ac94:	d032      	beq.n	800acfc <HAL_ADC_ConfigChannel+0x648>
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4971      	ldr	r1, [pc, #452]	@ (800ae60 <HAL_ADC_ConfigChannel+0x7ac>)
 800ac9c:	428b      	cmp	r3, r1
 800ac9e:	d02b      	beq.n	800acf8 <HAL_ADC_ConfigChannel+0x644>
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	496f      	ldr	r1, [pc, #444]	@ (800ae64 <HAL_ADC_ConfigChannel+0x7b0>)
 800aca6:	428b      	cmp	r3, r1
 800aca8:	d024      	beq.n	800acf4 <HAL_ADC_ConfigChannel+0x640>
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	496e      	ldr	r1, [pc, #440]	@ (800ae68 <HAL_ADC_ConfigChannel+0x7b4>)
 800acb0:	428b      	cmp	r3, r1
 800acb2:	d01d      	beq.n	800acf0 <HAL_ADC_ConfigChannel+0x63c>
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	496c      	ldr	r1, [pc, #432]	@ (800ae6c <HAL_ADC_ConfigChannel+0x7b8>)
 800acba:	428b      	cmp	r3, r1
 800acbc:	d016      	beq.n	800acec <HAL_ADC_ConfigChannel+0x638>
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	496b      	ldr	r1, [pc, #428]	@ (800ae70 <HAL_ADC_ConfigChannel+0x7bc>)
 800acc4:	428b      	cmp	r3, r1
 800acc6:	d00f      	beq.n	800ace8 <HAL_ADC_ConfigChannel+0x634>
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4969      	ldr	r1, [pc, #420]	@ (800ae74 <HAL_ADC_ConfigChannel+0x7c0>)
 800acce:	428b      	cmp	r3, r1
 800acd0:	d008      	beq.n	800ace4 <HAL_ADC_ConfigChannel+0x630>
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4968      	ldr	r1, [pc, #416]	@ (800ae78 <HAL_ADC_ConfigChannel+0x7c4>)
 800acd8:	428b      	cmp	r3, r1
 800acda:	d101      	bne.n	800ace0 <HAL_ADC_ConfigChannel+0x62c>
 800acdc:	4b67      	ldr	r3, [pc, #412]	@ (800ae7c <HAL_ADC_ConfigChannel+0x7c8>)
 800acde:	e0a0      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ace0:	2300      	movs	r3, #0
 800ace2:	e09e      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ace4:	4b66      	ldr	r3, [pc, #408]	@ (800ae80 <HAL_ADC_ConfigChannel+0x7cc>)
 800ace6:	e09c      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ace8:	4b66      	ldr	r3, [pc, #408]	@ (800ae84 <HAL_ADC_ConfigChannel+0x7d0>)
 800acea:	e09a      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800acec:	4b60      	ldr	r3, [pc, #384]	@ (800ae70 <HAL_ADC_ConfigChannel+0x7bc>)
 800acee:	e098      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800acf0:	4b5e      	ldr	r3, [pc, #376]	@ (800ae6c <HAL_ADC_ConfigChannel+0x7b8>)
 800acf2:	e096      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800acf4:	4b64      	ldr	r3, [pc, #400]	@ (800ae88 <HAL_ADC_ConfigChannel+0x7d4>)
 800acf6:	e094      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800acf8:	4b64      	ldr	r3, [pc, #400]	@ (800ae8c <HAL_ADC_ConfigChannel+0x7d8>)
 800acfa:	e092      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800acfc:	4b64      	ldr	r3, [pc, #400]	@ (800ae90 <HAL_ADC_ConfigChannel+0x7dc>)
 800acfe:	e090      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ad00:	4b64      	ldr	r3, [pc, #400]	@ (800ae94 <HAL_ADC_ConfigChannel+0x7e0>)
 800ad02:	e08e      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ad04:	2301      	movs	r3, #1
 800ad06:	e08c      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4962      	ldr	r1, [pc, #392]	@ (800ae98 <HAL_ADC_ConfigChannel+0x7e4>)
 800ad0e:	428b      	cmp	r3, r1
 800ad10:	d140      	bne.n	800ad94 <HAL_ADC_ConfigChannel+0x6e0>
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	494f      	ldr	r1, [pc, #316]	@ (800ae54 <HAL_ADC_ConfigChannel+0x7a0>)
 800ad18:	428b      	cmp	r3, r1
 800ad1a:	d039      	beq.n	800ad90 <HAL_ADC_ConfigChannel+0x6dc>
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	494d      	ldr	r1, [pc, #308]	@ (800ae58 <HAL_ADC_ConfigChannel+0x7a4>)
 800ad22:	428b      	cmp	r3, r1
 800ad24:	d032      	beq.n	800ad8c <HAL_ADC_ConfigChannel+0x6d8>
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	494c      	ldr	r1, [pc, #304]	@ (800ae5c <HAL_ADC_ConfigChannel+0x7a8>)
 800ad2c:	428b      	cmp	r3, r1
 800ad2e:	d02b      	beq.n	800ad88 <HAL_ADC_ConfigChannel+0x6d4>
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	494a      	ldr	r1, [pc, #296]	@ (800ae60 <HAL_ADC_ConfigChannel+0x7ac>)
 800ad36:	428b      	cmp	r3, r1
 800ad38:	d024      	beq.n	800ad84 <HAL_ADC_ConfigChannel+0x6d0>
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4949      	ldr	r1, [pc, #292]	@ (800ae64 <HAL_ADC_ConfigChannel+0x7b0>)
 800ad40:	428b      	cmp	r3, r1
 800ad42:	d01d      	beq.n	800ad80 <HAL_ADC_ConfigChannel+0x6cc>
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4947      	ldr	r1, [pc, #284]	@ (800ae68 <HAL_ADC_ConfigChannel+0x7b4>)
 800ad4a:	428b      	cmp	r3, r1
 800ad4c:	d016      	beq.n	800ad7c <HAL_ADC_ConfigChannel+0x6c8>
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4946      	ldr	r1, [pc, #280]	@ (800ae6c <HAL_ADC_ConfigChannel+0x7b8>)
 800ad54:	428b      	cmp	r3, r1
 800ad56:	d00f      	beq.n	800ad78 <HAL_ADC_ConfigChannel+0x6c4>
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4944      	ldr	r1, [pc, #272]	@ (800ae70 <HAL_ADC_ConfigChannel+0x7bc>)
 800ad5e:	428b      	cmp	r3, r1
 800ad60:	d008      	beq.n	800ad74 <HAL_ADC_ConfigChannel+0x6c0>
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4944      	ldr	r1, [pc, #272]	@ (800ae78 <HAL_ADC_ConfigChannel+0x7c4>)
 800ad68:	428b      	cmp	r3, r1
 800ad6a:	d101      	bne.n	800ad70 <HAL_ADC_ConfigChannel+0x6bc>
 800ad6c:	4b43      	ldr	r3, [pc, #268]	@ (800ae7c <HAL_ADC_ConfigChannel+0x7c8>)
 800ad6e:	e058      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ad70:	2300      	movs	r3, #0
 800ad72:	e056      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ad74:	4b43      	ldr	r3, [pc, #268]	@ (800ae84 <HAL_ADC_ConfigChannel+0x7d0>)
 800ad76:	e054      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ad78:	4b3d      	ldr	r3, [pc, #244]	@ (800ae70 <HAL_ADC_ConfigChannel+0x7bc>)
 800ad7a:	e052      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ad7c:	4b3b      	ldr	r3, [pc, #236]	@ (800ae6c <HAL_ADC_ConfigChannel+0x7b8>)
 800ad7e:	e050      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ad80:	4b41      	ldr	r3, [pc, #260]	@ (800ae88 <HAL_ADC_ConfigChannel+0x7d4>)
 800ad82:	e04e      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ad84:	4b41      	ldr	r3, [pc, #260]	@ (800ae8c <HAL_ADC_ConfigChannel+0x7d8>)
 800ad86:	e04c      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ad88:	4b41      	ldr	r3, [pc, #260]	@ (800ae90 <HAL_ADC_ConfigChannel+0x7dc>)
 800ad8a:	e04a      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ad8c:	4b41      	ldr	r3, [pc, #260]	@ (800ae94 <HAL_ADC_ConfigChannel+0x7e0>)
 800ad8e:	e048      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ad90:	2301      	movs	r3, #1
 800ad92:	e046      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4940      	ldr	r1, [pc, #256]	@ (800ae9c <HAL_ADC_ConfigChannel+0x7e8>)
 800ad9a:	428b      	cmp	r3, r1
 800ad9c:	d140      	bne.n	800ae20 <HAL_ADC_ConfigChannel+0x76c>
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	492c      	ldr	r1, [pc, #176]	@ (800ae54 <HAL_ADC_ConfigChannel+0x7a0>)
 800ada4:	428b      	cmp	r3, r1
 800ada6:	d039      	beq.n	800ae1c <HAL_ADC_ConfigChannel+0x768>
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	492a      	ldr	r1, [pc, #168]	@ (800ae58 <HAL_ADC_ConfigChannel+0x7a4>)
 800adae:	428b      	cmp	r3, r1
 800adb0:	d032      	beq.n	800ae18 <HAL_ADC_ConfigChannel+0x764>
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4929      	ldr	r1, [pc, #164]	@ (800ae5c <HAL_ADC_ConfigChannel+0x7a8>)
 800adb8:	428b      	cmp	r3, r1
 800adba:	d02b      	beq.n	800ae14 <HAL_ADC_ConfigChannel+0x760>
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4927      	ldr	r1, [pc, #156]	@ (800ae60 <HAL_ADC_ConfigChannel+0x7ac>)
 800adc2:	428b      	cmp	r3, r1
 800adc4:	d024      	beq.n	800ae10 <HAL_ADC_ConfigChannel+0x75c>
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4926      	ldr	r1, [pc, #152]	@ (800ae64 <HAL_ADC_ConfigChannel+0x7b0>)
 800adcc:	428b      	cmp	r3, r1
 800adce:	d01d      	beq.n	800ae0c <HAL_ADC_ConfigChannel+0x758>
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4924      	ldr	r1, [pc, #144]	@ (800ae68 <HAL_ADC_ConfigChannel+0x7b4>)
 800add6:	428b      	cmp	r3, r1
 800add8:	d016      	beq.n	800ae08 <HAL_ADC_ConfigChannel+0x754>
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4923      	ldr	r1, [pc, #140]	@ (800ae6c <HAL_ADC_ConfigChannel+0x7b8>)
 800ade0:	428b      	cmp	r3, r1
 800ade2:	d00f      	beq.n	800ae04 <HAL_ADC_ConfigChannel+0x750>
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4926      	ldr	r1, [pc, #152]	@ (800ae84 <HAL_ADC_ConfigChannel+0x7d0>)
 800adea:	428b      	cmp	r3, r1
 800adec:	d008      	beq.n	800ae00 <HAL_ADC_ConfigChannel+0x74c>
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	492b      	ldr	r1, [pc, #172]	@ (800aea0 <HAL_ADC_ConfigChannel+0x7ec>)
 800adf4:	428b      	cmp	r3, r1
 800adf6:	d101      	bne.n	800adfc <HAL_ADC_ConfigChannel+0x748>
 800adf8:	4b2a      	ldr	r3, [pc, #168]	@ (800aea4 <HAL_ADC_ConfigChannel+0x7f0>)
 800adfa:	e012      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800adfc:	2300      	movs	r3, #0
 800adfe:	e010      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ae00:	4b27      	ldr	r3, [pc, #156]	@ (800aea0 <HAL_ADC_ConfigChannel+0x7ec>)
 800ae02:	e00e      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ae04:	4b1a      	ldr	r3, [pc, #104]	@ (800ae70 <HAL_ADC_ConfigChannel+0x7bc>)
 800ae06:	e00c      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ae08:	4b18      	ldr	r3, [pc, #96]	@ (800ae6c <HAL_ADC_ConfigChannel+0x7b8>)
 800ae0a:	e00a      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ae0c:	4b1e      	ldr	r3, [pc, #120]	@ (800ae88 <HAL_ADC_ConfigChannel+0x7d4>)
 800ae0e:	e008      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ae10:	4b1e      	ldr	r3, [pc, #120]	@ (800ae8c <HAL_ADC_ConfigChannel+0x7d8>)
 800ae12:	e006      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ae14:	4b1e      	ldr	r3, [pc, #120]	@ (800ae90 <HAL_ADC_ConfigChannel+0x7dc>)
 800ae16:	e004      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ae18:	4b1e      	ldr	r3, [pc, #120]	@ (800ae94 <HAL_ADC_ConfigChannel+0x7e0>)
 800ae1a:	e002      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e000      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x76e>
 800ae20:	2300      	movs	r3, #0
 800ae22:	4619      	mov	r1, r3
 800ae24:	4610      	mov	r0, r2
 800ae26:	f7fe fc0d 	bl	8009644 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f280 80f6 	bge.w	800b020 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a05      	ldr	r2, [pc, #20]	@ (800ae50 <HAL_ADC_ConfigChannel+0x79c>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d004      	beq.n	800ae48 <HAL_ADC_ConfigChannel+0x794>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a15      	ldr	r2, [pc, #84]	@ (800ae98 <HAL_ADC_ConfigChannel+0x7e4>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d131      	bne.n	800aeac <HAL_ADC_ConfigChannel+0x7f8>
 800ae48:	4b17      	ldr	r3, [pc, #92]	@ (800aea8 <HAL_ADC_ConfigChannel+0x7f4>)
 800ae4a:	e030      	b.n	800aeae <HAL_ADC_ConfigChannel+0x7fa>
 800ae4c:	47ff0000 	.word	0x47ff0000
 800ae50:	40022000 	.word	0x40022000
 800ae54:	04300002 	.word	0x04300002
 800ae58:	08600004 	.word	0x08600004
 800ae5c:	0c900008 	.word	0x0c900008
 800ae60:	10c00010 	.word	0x10c00010
 800ae64:	14f00020 	.word	0x14f00020
 800ae68:	2a000400 	.word	0x2a000400
 800ae6c:	2e300800 	.word	0x2e300800
 800ae70:	32601000 	.word	0x32601000
 800ae74:	43210000 	.word	0x43210000
 800ae78:	4b840000 	.word	0x4b840000
 800ae7c:	4fb80000 	.word	0x4fb80000
 800ae80:	47520000 	.word	0x47520000
 800ae84:	36902000 	.word	0x36902000
 800ae88:	25b00200 	.word	0x25b00200
 800ae8c:	21800100 	.word	0x21800100
 800ae90:	1d500080 	.word	0x1d500080
 800ae94:	19200040 	.word	0x19200040
 800ae98:	40022100 	.word	0x40022100
 800ae9c:	58026000 	.word	0x58026000
 800aea0:	3ac04000 	.word	0x3ac04000
 800aea4:	3ef08000 	.word	0x3ef08000
 800aea8:	40022300 	.word	0x40022300
 800aeac:	4b61      	ldr	r3, [pc, #388]	@ (800b034 <HAL_ADC_ConfigChannel+0x980>)
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fe fbba 	bl	8009628 <LL_ADC_GetCommonPathInternalCh>
 800aeb4:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a5f      	ldr	r2, [pc, #380]	@ (800b038 <HAL_ADC_ConfigChannel+0x984>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d004      	beq.n	800aeca <HAL_ADC_ConfigChannel+0x816>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a5d      	ldr	r2, [pc, #372]	@ (800b03c <HAL_ADC_ConfigChannel+0x988>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d10e      	bne.n	800aee8 <HAL_ADC_ConfigChannel+0x834>
 800aeca:	485b      	ldr	r0, [pc, #364]	@ (800b038 <HAL_ADC_ConfigChannel+0x984>)
 800aecc:	f7fe fe5e 	bl	8009b8c <LL_ADC_IsEnabled>
 800aed0:	4604      	mov	r4, r0
 800aed2:	485a      	ldr	r0, [pc, #360]	@ (800b03c <HAL_ADC_ConfigChannel+0x988>)
 800aed4:	f7fe fe5a 	bl	8009b8c <LL_ADC_IsEnabled>
 800aed8:	4603      	mov	r3, r0
 800aeda:	4323      	orrs	r3, r4
 800aedc:	2b00      	cmp	r3, #0
 800aede:	bf0c      	ite	eq
 800aee0:	2301      	moveq	r3, #1
 800aee2:	2300      	movne	r3, #0
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	e008      	b.n	800aefa <HAL_ADC_ConfigChannel+0x846>
 800aee8:	4855      	ldr	r0, [pc, #340]	@ (800b040 <HAL_ADC_ConfigChannel+0x98c>)
 800aeea:	f7fe fe4f 	bl	8009b8c <LL_ADC_IsEnabled>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	bf0c      	ite	eq
 800aef4:	2301      	moveq	r3, #1
 800aef6:	2300      	movne	r3, #0
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d07d      	beq.n	800affa <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a50      	ldr	r2, [pc, #320]	@ (800b044 <HAL_ADC_ConfigChannel+0x990>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d130      	bne.n	800af6a <HAL_ADC_ConfigChannel+0x8b6>
 800af08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d12b      	bne.n	800af6a <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a4a      	ldr	r2, [pc, #296]	@ (800b040 <HAL_ADC_ConfigChannel+0x98c>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	f040 8081 	bne.w	800b020 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a45      	ldr	r2, [pc, #276]	@ (800b038 <HAL_ADC_ConfigChannel+0x984>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d004      	beq.n	800af32 <HAL_ADC_ConfigChannel+0x87e>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a43      	ldr	r2, [pc, #268]	@ (800b03c <HAL_ADC_ConfigChannel+0x988>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d101      	bne.n	800af36 <HAL_ADC_ConfigChannel+0x882>
 800af32:	4a45      	ldr	r2, [pc, #276]	@ (800b048 <HAL_ADC_ConfigChannel+0x994>)
 800af34:	e000      	b.n	800af38 <HAL_ADC_ConfigChannel+0x884>
 800af36:	4a3f      	ldr	r2, [pc, #252]	@ (800b034 <HAL_ADC_ConfigChannel+0x980>)
 800af38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af3a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800af3e:	4619      	mov	r1, r3
 800af40:	4610      	mov	r0, r2
 800af42:	f7fe fb5e 	bl	8009602 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800af46:	4b41      	ldr	r3, [pc, #260]	@ (800b04c <HAL_ADC_ConfigChannel+0x998>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	099b      	lsrs	r3, r3, #6
 800af4c:	4a40      	ldr	r2, [pc, #256]	@ (800b050 <HAL_ADC_ConfigChannel+0x99c>)
 800af4e:	fba2 2303 	umull	r2, r3, r2, r3
 800af52:	099b      	lsrs	r3, r3, #6
 800af54:	3301      	adds	r3, #1
 800af56:	005b      	lsls	r3, r3, #1
 800af58:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800af5a:	e002      	b.n	800af62 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	3b01      	subs	r3, #1
 800af60:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d1f9      	bne.n	800af5c <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800af68:	e05a      	b.n	800b020 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a39      	ldr	r2, [pc, #228]	@ (800b054 <HAL_ADC_ConfigChannel+0x9a0>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d11e      	bne.n	800afb2 <HAL_ADC_ConfigChannel+0x8fe>
 800af74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d119      	bne.n	800afb2 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a2f      	ldr	r2, [pc, #188]	@ (800b040 <HAL_ADC_ConfigChannel+0x98c>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d14b      	bne.n	800b020 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a2a      	ldr	r2, [pc, #168]	@ (800b038 <HAL_ADC_ConfigChannel+0x984>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d004      	beq.n	800af9c <HAL_ADC_ConfigChannel+0x8e8>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a29      	ldr	r2, [pc, #164]	@ (800b03c <HAL_ADC_ConfigChannel+0x988>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d101      	bne.n	800afa0 <HAL_ADC_ConfigChannel+0x8ec>
 800af9c:	4a2a      	ldr	r2, [pc, #168]	@ (800b048 <HAL_ADC_ConfigChannel+0x994>)
 800af9e:	e000      	b.n	800afa2 <HAL_ADC_ConfigChannel+0x8ee>
 800afa0:	4a24      	ldr	r2, [pc, #144]	@ (800b034 <HAL_ADC_ConfigChannel+0x980>)
 800afa2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800afa4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800afa8:	4619      	mov	r1, r3
 800afaa:	4610      	mov	r0, r2
 800afac:	f7fe fb29 	bl	8009602 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800afb0:	e036      	b.n	800b020 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a28      	ldr	r2, [pc, #160]	@ (800b058 <HAL_ADC_ConfigChannel+0x9a4>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d131      	bne.n	800b020 <HAL_ADC_ConfigChannel+0x96c>
 800afbc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800afbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d12c      	bne.n	800b020 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a1d      	ldr	r2, [pc, #116]	@ (800b040 <HAL_ADC_ConfigChannel+0x98c>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d127      	bne.n	800b020 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a18      	ldr	r2, [pc, #96]	@ (800b038 <HAL_ADC_ConfigChannel+0x984>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d004      	beq.n	800afe4 <HAL_ADC_ConfigChannel+0x930>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a17      	ldr	r2, [pc, #92]	@ (800b03c <HAL_ADC_ConfigChannel+0x988>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d101      	bne.n	800afe8 <HAL_ADC_ConfigChannel+0x934>
 800afe4:	4a18      	ldr	r2, [pc, #96]	@ (800b048 <HAL_ADC_ConfigChannel+0x994>)
 800afe6:	e000      	b.n	800afea <HAL_ADC_ConfigChannel+0x936>
 800afe8:	4a12      	ldr	r2, [pc, #72]	@ (800b034 <HAL_ADC_ConfigChannel+0x980>)
 800afea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800afec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800aff0:	4619      	mov	r1, r3
 800aff2:	4610      	mov	r0, r2
 800aff4:	f7fe fb05 	bl	8009602 <LL_ADC_SetCommonPathInternalCh>
 800aff8:	e012      	b.n	800b020 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800affe:	f043 0220 	orr.w	r2, r3, #32
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800b00c:	e008      	b.n	800b020 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b012:	f043 0220 	orr.w	r2, r3, #32
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800b028:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3794      	adds	r7, #148	@ 0x94
 800b030:	46bd      	mov	sp, r7
 800b032:	bd90      	pop	{r4, r7, pc}
 800b034:	58026300 	.word	0x58026300
 800b038:	40022000 	.word	0x40022000
 800b03c:	40022100 	.word	0x40022100
 800b040:	58026000 	.word	0x58026000
 800b044:	c7520000 	.word	0xc7520000
 800b048:	40022300 	.word	0x40022300
 800b04c:	24000004 	.word	0x24000004
 800b050:	053e2d63 	.word	0x053e2d63
 800b054:	c3210000 	.word	0xc3210000
 800b058:	cb840000 	.word	0xcb840000

0800b05c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4618      	mov	r0, r3
 800b06a:	f7fe fd8f 	bl	8009b8c <LL_ADC_IsEnabled>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d16e      	bne.n	800b152 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	689a      	ldr	r2, [r3, #8]
 800b07a:	4b38      	ldr	r3, [pc, #224]	@ (800b15c <ADC_Enable+0x100>)
 800b07c:	4013      	ands	r3, r2
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00d      	beq.n	800b09e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b086:	f043 0210 	orr.w	r2, r3, #16
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b092:	f043 0201 	orr.w	r2, r3, #1
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	e05a      	b.n	800b154 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fe fd5e 	bl	8009b64 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b0a8:	f7fe fa68 	bl	800957c <HAL_GetTick>
 800b0ac:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a2b      	ldr	r2, [pc, #172]	@ (800b160 <ADC_Enable+0x104>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d004      	beq.n	800b0c2 <ADC_Enable+0x66>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a29      	ldr	r2, [pc, #164]	@ (800b164 <ADC_Enable+0x108>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d101      	bne.n	800b0c6 <ADC_Enable+0x6a>
 800b0c2:	4b29      	ldr	r3, [pc, #164]	@ (800b168 <ADC_Enable+0x10c>)
 800b0c4:	e000      	b.n	800b0c8 <ADC_Enable+0x6c>
 800b0c6:	4b29      	ldr	r3, [pc, #164]	@ (800b16c <ADC_Enable+0x110>)
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7fe fce1 	bl	8009a90 <LL_ADC_GetMultimode>
 800b0ce:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a23      	ldr	r2, [pc, #140]	@ (800b164 <ADC_Enable+0x108>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d002      	beq.n	800b0e0 <ADC_Enable+0x84>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	e000      	b.n	800b0e2 <ADC_Enable+0x86>
 800b0e0:	4b1f      	ldr	r3, [pc, #124]	@ (800b160 <ADC_Enable+0x104>)
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	6812      	ldr	r2, [r2, #0]
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d02c      	beq.n	800b144 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d130      	bne.n	800b152 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b0f0:	e028      	b.n	800b144 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fe fd48 	bl	8009b8c <LL_ADC_IsEnabled>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d104      	bne.n	800b10c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4618      	mov	r0, r3
 800b108:	f7fe fd2c 	bl	8009b64 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b10c:	f7fe fa36 	bl	800957c <HAL_GetTick>
 800b110:	4602      	mov	r2, r0
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	1ad3      	subs	r3, r2, r3
 800b116:	2b02      	cmp	r3, #2
 800b118:	d914      	bls.n	800b144 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f003 0301 	and.w	r3, r3, #1
 800b124:	2b01      	cmp	r3, #1
 800b126:	d00d      	beq.n	800b144 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b12c:	f043 0210 	orr.w	r2, r3, #16
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b138:	f043 0201 	orr.w	r2, r3, #1
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800b140:	2301      	movs	r3, #1
 800b142:	e007      	b.n	800b154 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 0301 	and.w	r3, r3, #1
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d1cf      	bne.n	800b0f2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	8000003f 	.word	0x8000003f
 800b160:	40022000 	.word	0x40022000
 800b164:	40022100 	.word	0x40022100
 800b168:	40022300 	.word	0x40022300
 800b16c:	58026300 	.word	0x58026300

0800b170 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b17c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b182:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b186:	2b00      	cmp	r3, #0
 800b188:	d14b      	bne.n	800b222 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b18e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 0308 	and.w	r3, r3, #8
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d021      	beq.n	800b1e8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7fe fb77 	bl	800989c <LL_ADC_REG_IsTriggerSourceSWStart>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d032      	beq.n	800b21a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d12b      	bne.n	800b21a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d11f      	bne.n	800b21a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1de:	f043 0201 	orr.w	r2, r3, #1
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	661a      	str	r2, [r3, #96]	@ 0x60
 800b1e6:	e018      	b.n	800b21a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	f003 0303 	and.w	r3, r3, #3
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d111      	bne.n	800b21a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b206:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d105      	bne.n	800b21a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b212:	f043 0201 	orr.w	r2, r3, #1
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f7ff fa22 	bl	800a664 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b220:	e00e      	b.n	800b240 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b226:	f003 0310 	and.w	r3, r3, #16
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d003      	beq.n	800b236 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f7ff fa36 	bl	800a6a0 <HAL_ADC_ErrorCallback>
}
 800b234:	e004      	b.n	800b240 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b23a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	4798      	blx	r3
}
 800b240:	bf00      	nop
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b254:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f7ff fa0e 	bl	800a678 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b25c:	bf00      	nop
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b270:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b276:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b282:	f043 0204 	orr.w	r2, r3, #4
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f7ff fa08 	bl	800a6a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b290:	bf00      	nop
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a6c      	ldr	r2, [pc, #432]	@ (800b458 <ADC_ConfigureBoostMode+0x1c0>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d004      	beq.n	800b2b4 <ADC_ConfigureBoostMode+0x1c>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a6b      	ldr	r2, [pc, #428]	@ (800b45c <ADC_ConfigureBoostMode+0x1c4>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d109      	bne.n	800b2c8 <ADC_ConfigureBoostMode+0x30>
 800b2b4:	4b6a      	ldr	r3, [pc, #424]	@ (800b460 <ADC_ConfigureBoostMode+0x1c8>)
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	bf14      	ite	ne
 800b2c0:	2301      	movne	r3, #1
 800b2c2:	2300      	moveq	r3, #0
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	e008      	b.n	800b2da <ADC_ConfigureBoostMode+0x42>
 800b2c8:	4b66      	ldr	r3, [pc, #408]	@ (800b464 <ADC_ConfigureBoostMode+0x1cc>)
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	bf14      	ite	ne
 800b2d4:	2301      	movne	r3, #1
 800b2d6:	2300      	moveq	r3, #0
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d01c      	beq.n	800b318 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800b2de:	f006 fe8b 	bl	8011ff8 <HAL_RCC_GetHCLKFreq>
 800b2e2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b2ec:	d010      	beq.n	800b310 <ADC_ConfigureBoostMode+0x78>
 800b2ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b2f2:	d873      	bhi.n	800b3dc <ADC_ConfigureBoostMode+0x144>
 800b2f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2f8:	d002      	beq.n	800b300 <ADC_ConfigureBoostMode+0x68>
 800b2fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2fe:	d16d      	bne.n	800b3dc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	0c1b      	lsrs	r3, r3, #16
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	fbb2 f3f3 	udiv	r3, r2, r3
 800b30c:	60fb      	str	r3, [r7, #12]
        break;
 800b30e:	e068      	b.n	800b3e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	089b      	lsrs	r3, r3, #2
 800b314:	60fb      	str	r3, [r7, #12]
        break;
 800b316:	e064      	b.n	800b3e2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800b318:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b31c:	f04f 0100 	mov.w	r1, #0
 800b320:	f008 f866 	bl	80133f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b324:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b32e:	d051      	beq.n	800b3d4 <ADC_ConfigureBoostMode+0x13c>
 800b330:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b334:	d854      	bhi.n	800b3e0 <ADC_ConfigureBoostMode+0x148>
 800b336:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b33a:	d047      	beq.n	800b3cc <ADC_ConfigureBoostMode+0x134>
 800b33c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b340:	d84e      	bhi.n	800b3e0 <ADC_ConfigureBoostMode+0x148>
 800b342:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b346:	d03d      	beq.n	800b3c4 <ADC_ConfigureBoostMode+0x12c>
 800b348:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b34c:	d848      	bhi.n	800b3e0 <ADC_ConfigureBoostMode+0x148>
 800b34e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b352:	d033      	beq.n	800b3bc <ADC_ConfigureBoostMode+0x124>
 800b354:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b358:	d842      	bhi.n	800b3e0 <ADC_ConfigureBoostMode+0x148>
 800b35a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b35e:	d029      	beq.n	800b3b4 <ADC_ConfigureBoostMode+0x11c>
 800b360:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b364:	d83c      	bhi.n	800b3e0 <ADC_ConfigureBoostMode+0x148>
 800b366:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b36a:	d01a      	beq.n	800b3a2 <ADC_ConfigureBoostMode+0x10a>
 800b36c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b370:	d836      	bhi.n	800b3e0 <ADC_ConfigureBoostMode+0x148>
 800b372:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b376:	d014      	beq.n	800b3a2 <ADC_ConfigureBoostMode+0x10a>
 800b378:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b37c:	d830      	bhi.n	800b3e0 <ADC_ConfigureBoostMode+0x148>
 800b37e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b382:	d00e      	beq.n	800b3a2 <ADC_ConfigureBoostMode+0x10a>
 800b384:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b388:	d82a      	bhi.n	800b3e0 <ADC_ConfigureBoostMode+0x148>
 800b38a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b38e:	d008      	beq.n	800b3a2 <ADC_ConfigureBoostMode+0x10a>
 800b390:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b394:	d824      	bhi.n	800b3e0 <ADC_ConfigureBoostMode+0x148>
 800b396:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b39a:	d002      	beq.n	800b3a2 <ADC_ConfigureBoostMode+0x10a>
 800b39c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b3a0:	d11e      	bne.n	800b3e0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	0c9b      	lsrs	r3, r3, #18
 800b3a8:	005b      	lsls	r3, r3, #1
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3b0:	60fb      	str	r3, [r7, #12]
        break;
 800b3b2:	e016      	b.n	800b3e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	091b      	lsrs	r3, r3, #4
 800b3b8:	60fb      	str	r3, [r7, #12]
        break;
 800b3ba:	e012      	b.n	800b3e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	095b      	lsrs	r3, r3, #5
 800b3c0:	60fb      	str	r3, [r7, #12]
        break;
 800b3c2:	e00e      	b.n	800b3e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	099b      	lsrs	r3, r3, #6
 800b3c8:	60fb      	str	r3, [r7, #12]
        break;
 800b3ca:	e00a      	b.n	800b3e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	09db      	lsrs	r3, r3, #7
 800b3d0:	60fb      	str	r3, [r7, #12]
        break;
 800b3d2:	e006      	b.n	800b3e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	0a1b      	lsrs	r3, r3, #8
 800b3d8:	60fb      	str	r3, [r7, #12]
        break;
 800b3da:	e002      	b.n	800b3e2 <ADC_ConfigureBoostMode+0x14a>
        break;
 800b3dc:	bf00      	nop
 800b3de:	e000      	b.n	800b3e2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800b3e0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	085b      	lsrs	r3, r3, #1
 800b3e6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	4a1f      	ldr	r2, [pc, #124]	@ (800b468 <ADC_ConfigureBoostMode+0x1d0>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d808      	bhi.n	800b402 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	689a      	ldr	r2, [r3, #8]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b3fe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800b400:	e025      	b.n	800b44e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	4a19      	ldr	r2, [pc, #100]	@ (800b46c <ADC_ConfigureBoostMode+0x1d4>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d80a      	bhi.n	800b420 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b41c:	609a      	str	r2, [r3, #8]
}
 800b41e:	e016      	b.n	800b44e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	4a13      	ldr	r2, [pc, #76]	@ (800b470 <ADC_ConfigureBoostMode+0x1d8>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d80a      	bhi.n	800b43e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b43a:	609a      	str	r2, [r3, #8]
}
 800b43c:	e007      	b.n	800b44e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	689a      	ldr	r2, [r3, #8]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800b44c:	609a      	str	r2, [r3, #8]
}
 800b44e:	bf00      	nop
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	40022000 	.word	0x40022000
 800b45c:	40022100 	.word	0x40022100
 800b460:	40022300 	.word	0x40022300
 800b464:	58026300 	.word	0x58026300
 800b468:	005f5e10 	.word	0x005f5e10
 800b46c:	00bebc20 	.word	0x00bebc20
 800b470:	017d7840 	.word	0x017d7840

0800b474 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800b47c:	bf00      	nop
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800b490:	bf00      	nop
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800b4a4:	bf00      	nop
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800b4b8:	bf00      	nop
 800b4ba:	370c      	adds	r7, #12
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800b4cc:	bf00      	nop
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <__NVIC_SetPriorityGrouping>:
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f003 0307 	and.w	r3, r3, #7
 800b4e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b4e8:	4b0b      	ldr	r3, [pc, #44]	@ (800b518 <__NVIC_SetPriorityGrouping+0x40>)
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b500:	4b06      	ldr	r3, [pc, #24]	@ (800b51c <__NVIC_SetPriorityGrouping+0x44>)
 800b502:	4313      	orrs	r3, r2
 800b504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b506:	4a04      	ldr	r2, [pc, #16]	@ (800b518 <__NVIC_SetPriorityGrouping+0x40>)
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	60d3      	str	r3, [r2, #12]
}
 800b50c:	bf00      	nop
 800b50e:	3714      	adds	r7, #20
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr
 800b518:	e000ed00 	.word	0xe000ed00
 800b51c:	05fa0000 	.word	0x05fa0000

0800b520 <__NVIC_GetPriorityGrouping>:
{
 800b520:	b480      	push	{r7}
 800b522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b524:	4b04      	ldr	r3, [pc, #16]	@ (800b538 <__NVIC_GetPriorityGrouping+0x18>)
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	0a1b      	lsrs	r3, r3, #8
 800b52a:	f003 0307 	and.w	r3, r3, #7
}
 800b52e:	4618      	mov	r0, r3
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	e000ed00 	.word	0xe000ed00

0800b53c <__NVIC_EnableIRQ>:
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	4603      	mov	r3, r0
 800b544:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	db0b      	blt.n	800b566 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b54e:	88fb      	ldrh	r3, [r7, #6]
 800b550:	f003 021f 	and.w	r2, r3, #31
 800b554:	4907      	ldr	r1, [pc, #28]	@ (800b574 <__NVIC_EnableIRQ+0x38>)
 800b556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b55a:	095b      	lsrs	r3, r3, #5
 800b55c:	2001      	movs	r0, #1
 800b55e:	fa00 f202 	lsl.w	r2, r0, r2
 800b562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b566:	bf00      	nop
 800b568:	370c      	adds	r7, #12
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	e000e100 	.word	0xe000e100

0800b578 <__NVIC_SetPriority>:
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	4603      	mov	r3, r0
 800b580:	6039      	str	r1, [r7, #0]
 800b582:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b584:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	db0a      	blt.n	800b5a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	b2da      	uxtb	r2, r3
 800b590:	490c      	ldr	r1, [pc, #48]	@ (800b5c4 <__NVIC_SetPriority+0x4c>)
 800b592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b596:	0112      	lsls	r2, r2, #4
 800b598:	b2d2      	uxtb	r2, r2
 800b59a:	440b      	add	r3, r1
 800b59c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b5a0:	e00a      	b.n	800b5b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	b2da      	uxtb	r2, r3
 800b5a6:	4908      	ldr	r1, [pc, #32]	@ (800b5c8 <__NVIC_SetPriority+0x50>)
 800b5a8:	88fb      	ldrh	r3, [r7, #6]
 800b5aa:	f003 030f 	and.w	r3, r3, #15
 800b5ae:	3b04      	subs	r3, #4
 800b5b0:	0112      	lsls	r2, r2, #4
 800b5b2:	b2d2      	uxtb	r2, r2
 800b5b4:	440b      	add	r3, r1
 800b5b6:	761a      	strb	r2, [r3, #24]
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	e000e100 	.word	0xe000e100
 800b5c8:	e000ed00 	.word	0xe000ed00

0800b5cc <NVIC_EncodePriority>:
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b089      	sub	sp, #36	@ 0x24
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f003 0307 	and.w	r3, r3, #7
 800b5de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	f1c3 0307 	rsb	r3, r3, #7
 800b5e6:	2b04      	cmp	r3, #4
 800b5e8:	bf28      	it	cs
 800b5ea:	2304      	movcs	r3, #4
 800b5ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	3304      	adds	r3, #4
 800b5f2:	2b06      	cmp	r3, #6
 800b5f4:	d902      	bls.n	800b5fc <NVIC_EncodePriority+0x30>
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	3b03      	subs	r3, #3
 800b5fa:	e000      	b.n	800b5fe <NVIC_EncodePriority+0x32>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b600:	f04f 32ff 	mov.w	r2, #4294967295
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	fa02 f303 	lsl.w	r3, r2, r3
 800b60a:	43da      	mvns	r2, r3
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	401a      	ands	r2, r3
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b614:	f04f 31ff 	mov.w	r1, #4294967295
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	fa01 f303 	lsl.w	r3, r1, r3
 800b61e:	43d9      	mvns	r1, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b624:	4313      	orrs	r3, r2
}
 800b626:	4618      	mov	r0, r3
 800b628:	3724      	adds	r7, #36	@ 0x24
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
	...

0800b634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	3b01      	subs	r3, #1
 800b640:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b644:	d301      	bcc.n	800b64a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b646:	2301      	movs	r3, #1
 800b648:	e00f      	b.n	800b66a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b64a:	4a0a      	ldr	r2, [pc, #40]	@ (800b674 <SysTick_Config+0x40>)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	3b01      	subs	r3, #1
 800b650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b652:	210f      	movs	r1, #15
 800b654:	f04f 30ff 	mov.w	r0, #4294967295
 800b658:	f7ff ff8e 	bl	800b578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b65c:	4b05      	ldr	r3, [pc, #20]	@ (800b674 <SysTick_Config+0x40>)
 800b65e:	2200      	movs	r2, #0
 800b660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b662:	4b04      	ldr	r3, [pc, #16]	@ (800b674 <SysTick_Config+0x40>)
 800b664:	2207      	movs	r2, #7
 800b666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	e000e010 	.word	0xe000e010

0800b678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f7ff ff29 	bl	800b4d8 <__NVIC_SetPriorityGrouping>
}
 800b686:	bf00      	nop
 800b688:	3708      	adds	r7, #8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b086      	sub	sp, #24
 800b692:	af00      	add	r7, sp, #0
 800b694:	4603      	mov	r3, r0
 800b696:	60b9      	str	r1, [r7, #8]
 800b698:	607a      	str	r2, [r7, #4]
 800b69a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b69c:	f7ff ff40 	bl	800b520 <__NVIC_GetPriorityGrouping>
 800b6a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	68b9      	ldr	r1, [r7, #8]
 800b6a6:	6978      	ldr	r0, [r7, #20]
 800b6a8:	f7ff ff90 	bl	800b5cc <NVIC_EncodePriority>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7ff ff5f 	bl	800b578 <__NVIC_SetPriority>
}
 800b6ba:	bf00      	nop
 800b6bc:	3718      	adds	r7, #24
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b082      	sub	sp, #8
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b6cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7ff ff33 	bl	800b53c <__NVIC_EnableIRQ>
}
 800b6d6:	bf00      	nop
 800b6d8:	3708      	adds	r7, #8
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b082      	sub	sp, #8
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f7ff ffa4 	bl	800b634 <SysTick_Config>
 800b6ec:	4603      	mov	r3, r0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
	...

0800b6f8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800b6fc:	f3bf 8f5f 	dmb	sy
}
 800b700:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b702:	4b07      	ldr	r3, [pc, #28]	@ (800b720 <HAL_MPU_Disable+0x28>)
 800b704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b706:	4a06      	ldr	r2, [pc, #24]	@ (800b720 <HAL_MPU_Disable+0x28>)
 800b708:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b70c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b70e:	4b05      	ldr	r3, [pc, #20]	@ (800b724 <HAL_MPU_Disable+0x2c>)
 800b710:	2200      	movs	r2, #0
 800b712:	605a      	str	r2, [r3, #4]
}
 800b714:	bf00      	nop
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	e000ed00 	.word	0xe000ed00
 800b724:	e000ed90 	.word	0xe000ed90

0800b728 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b730:	4a0b      	ldr	r2, [pc, #44]	@ (800b760 <HAL_MPU_Enable+0x38>)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f043 0301 	orr.w	r3, r3, #1
 800b738:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b73a:	4b0a      	ldr	r3, [pc, #40]	@ (800b764 <HAL_MPU_Enable+0x3c>)
 800b73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b73e:	4a09      	ldr	r2, [pc, #36]	@ (800b764 <HAL_MPU_Enable+0x3c>)
 800b740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b744:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b746:	f3bf 8f4f 	dsb	sy
}
 800b74a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b74c:	f3bf 8f6f 	isb	sy
}
 800b750:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b752:	bf00      	nop
 800b754:	370c      	adds	r7, #12
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	e000ed90 	.word	0xe000ed90
 800b764:	e000ed00 	.word	0xe000ed00

0800b768 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	785a      	ldrb	r2, [r3, #1]
 800b774:	4b1b      	ldr	r3, [pc, #108]	@ (800b7e4 <HAL_MPU_ConfigRegion+0x7c>)
 800b776:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800b778:	4b1a      	ldr	r3, [pc, #104]	@ (800b7e4 <HAL_MPU_ConfigRegion+0x7c>)
 800b77a:	691b      	ldr	r3, [r3, #16]
 800b77c:	4a19      	ldr	r2, [pc, #100]	@ (800b7e4 <HAL_MPU_ConfigRegion+0x7c>)
 800b77e:	f023 0301 	bic.w	r3, r3, #1
 800b782:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800b784:	4a17      	ldr	r2, [pc, #92]	@ (800b7e4 <HAL_MPU_ConfigRegion+0x7c>)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	7b1b      	ldrb	r3, [r3, #12]
 800b790:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	7adb      	ldrb	r3, [r3, #11]
 800b796:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b798:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	7a9b      	ldrb	r3, [r3, #10]
 800b79e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b7a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	7b5b      	ldrb	r3, [r3, #13]
 800b7a6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b7a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	7b9b      	ldrb	r3, [r3, #14]
 800b7ae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b7b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	7bdb      	ldrb	r3, [r3, #15]
 800b7b6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b7b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	7a5b      	ldrb	r3, [r3, #9]
 800b7be:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b7c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	7a1b      	ldrb	r3, [r3, #8]
 800b7c6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b7c8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	7812      	ldrb	r2, [r2, #0]
 800b7ce:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b7d0:	4a04      	ldr	r2, [pc, #16]	@ (800b7e4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b7d2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b7d4:	6113      	str	r3, [r2, #16]
}
 800b7d6:	bf00      	nop
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	e000ed90 	.word	0xe000ed90

0800b7e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b086      	sub	sp, #24
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800b7f0:	f7fd fec4 	bl	800957c <HAL_GetTick>
 800b7f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d101      	bne.n	800b800 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	e312      	b.n	800be26 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a66      	ldr	r2, [pc, #408]	@ (800b9a0 <HAL_DMA_Init+0x1b8>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d04a      	beq.n	800b8a0 <HAL_DMA_Init+0xb8>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4a65      	ldr	r2, [pc, #404]	@ (800b9a4 <HAL_DMA_Init+0x1bc>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d045      	beq.n	800b8a0 <HAL_DMA_Init+0xb8>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a63      	ldr	r2, [pc, #396]	@ (800b9a8 <HAL_DMA_Init+0x1c0>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d040      	beq.n	800b8a0 <HAL_DMA_Init+0xb8>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a62      	ldr	r2, [pc, #392]	@ (800b9ac <HAL_DMA_Init+0x1c4>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d03b      	beq.n	800b8a0 <HAL_DMA_Init+0xb8>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a60      	ldr	r2, [pc, #384]	@ (800b9b0 <HAL_DMA_Init+0x1c8>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d036      	beq.n	800b8a0 <HAL_DMA_Init+0xb8>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a5f      	ldr	r2, [pc, #380]	@ (800b9b4 <HAL_DMA_Init+0x1cc>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d031      	beq.n	800b8a0 <HAL_DMA_Init+0xb8>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a5d      	ldr	r2, [pc, #372]	@ (800b9b8 <HAL_DMA_Init+0x1d0>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d02c      	beq.n	800b8a0 <HAL_DMA_Init+0xb8>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a5c      	ldr	r2, [pc, #368]	@ (800b9bc <HAL_DMA_Init+0x1d4>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d027      	beq.n	800b8a0 <HAL_DMA_Init+0xb8>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a5a      	ldr	r2, [pc, #360]	@ (800b9c0 <HAL_DMA_Init+0x1d8>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d022      	beq.n	800b8a0 <HAL_DMA_Init+0xb8>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a59      	ldr	r2, [pc, #356]	@ (800b9c4 <HAL_DMA_Init+0x1dc>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d01d      	beq.n	800b8a0 <HAL_DMA_Init+0xb8>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a57      	ldr	r2, [pc, #348]	@ (800b9c8 <HAL_DMA_Init+0x1e0>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d018      	beq.n	800b8a0 <HAL_DMA_Init+0xb8>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a56      	ldr	r2, [pc, #344]	@ (800b9cc <HAL_DMA_Init+0x1e4>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d013      	beq.n	800b8a0 <HAL_DMA_Init+0xb8>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a54      	ldr	r2, [pc, #336]	@ (800b9d0 <HAL_DMA_Init+0x1e8>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d00e      	beq.n	800b8a0 <HAL_DMA_Init+0xb8>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a53      	ldr	r2, [pc, #332]	@ (800b9d4 <HAL_DMA_Init+0x1ec>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d009      	beq.n	800b8a0 <HAL_DMA_Init+0xb8>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a51      	ldr	r2, [pc, #324]	@ (800b9d8 <HAL_DMA_Init+0x1f0>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d004      	beq.n	800b8a0 <HAL_DMA_Init+0xb8>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a50      	ldr	r2, [pc, #320]	@ (800b9dc <HAL_DMA_Init+0x1f4>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d101      	bne.n	800b8a4 <HAL_DMA_Init+0xbc>
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e000      	b.n	800b8a6 <HAL_DMA_Init+0xbe>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f000 813c 	beq.w	800bb24 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2202      	movs	r2, #2
 800b8b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a37      	ldr	r2, [pc, #220]	@ (800b9a0 <HAL_DMA_Init+0x1b8>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d04a      	beq.n	800b95c <HAL_DMA_Init+0x174>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a36      	ldr	r2, [pc, #216]	@ (800b9a4 <HAL_DMA_Init+0x1bc>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d045      	beq.n	800b95c <HAL_DMA_Init+0x174>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a34      	ldr	r2, [pc, #208]	@ (800b9a8 <HAL_DMA_Init+0x1c0>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d040      	beq.n	800b95c <HAL_DMA_Init+0x174>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a33      	ldr	r2, [pc, #204]	@ (800b9ac <HAL_DMA_Init+0x1c4>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d03b      	beq.n	800b95c <HAL_DMA_Init+0x174>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a31      	ldr	r2, [pc, #196]	@ (800b9b0 <HAL_DMA_Init+0x1c8>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d036      	beq.n	800b95c <HAL_DMA_Init+0x174>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a30      	ldr	r2, [pc, #192]	@ (800b9b4 <HAL_DMA_Init+0x1cc>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d031      	beq.n	800b95c <HAL_DMA_Init+0x174>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a2e      	ldr	r2, [pc, #184]	@ (800b9b8 <HAL_DMA_Init+0x1d0>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d02c      	beq.n	800b95c <HAL_DMA_Init+0x174>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a2d      	ldr	r2, [pc, #180]	@ (800b9bc <HAL_DMA_Init+0x1d4>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d027      	beq.n	800b95c <HAL_DMA_Init+0x174>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a2b      	ldr	r2, [pc, #172]	@ (800b9c0 <HAL_DMA_Init+0x1d8>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d022      	beq.n	800b95c <HAL_DMA_Init+0x174>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a2a      	ldr	r2, [pc, #168]	@ (800b9c4 <HAL_DMA_Init+0x1dc>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d01d      	beq.n	800b95c <HAL_DMA_Init+0x174>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a28      	ldr	r2, [pc, #160]	@ (800b9c8 <HAL_DMA_Init+0x1e0>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d018      	beq.n	800b95c <HAL_DMA_Init+0x174>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a27      	ldr	r2, [pc, #156]	@ (800b9cc <HAL_DMA_Init+0x1e4>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d013      	beq.n	800b95c <HAL_DMA_Init+0x174>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a25      	ldr	r2, [pc, #148]	@ (800b9d0 <HAL_DMA_Init+0x1e8>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d00e      	beq.n	800b95c <HAL_DMA_Init+0x174>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a24      	ldr	r2, [pc, #144]	@ (800b9d4 <HAL_DMA_Init+0x1ec>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d009      	beq.n	800b95c <HAL_DMA_Init+0x174>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a22      	ldr	r2, [pc, #136]	@ (800b9d8 <HAL_DMA_Init+0x1f0>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d004      	beq.n	800b95c <HAL_DMA_Init+0x174>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a21      	ldr	r2, [pc, #132]	@ (800b9dc <HAL_DMA_Init+0x1f4>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d108      	bne.n	800b96e <HAL_DMA_Init+0x186>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f022 0201 	bic.w	r2, r2, #1
 800b96a:	601a      	str	r2, [r3, #0]
 800b96c:	e007      	b.n	800b97e <HAL_DMA_Init+0x196>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f022 0201 	bic.w	r2, r2, #1
 800b97c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b97e:	e02f      	b.n	800b9e0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b980:	f7fd fdfc 	bl	800957c <HAL_GetTick>
 800b984:	4602      	mov	r2, r0
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	1ad3      	subs	r3, r2, r3
 800b98a:	2b05      	cmp	r3, #5
 800b98c:	d928      	bls.n	800b9e0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2220      	movs	r2, #32
 800b992:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2203      	movs	r2, #3
 800b998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	e242      	b.n	800be26 <HAL_DMA_Init+0x63e>
 800b9a0:	40020010 	.word	0x40020010
 800b9a4:	40020028 	.word	0x40020028
 800b9a8:	40020040 	.word	0x40020040
 800b9ac:	40020058 	.word	0x40020058
 800b9b0:	40020070 	.word	0x40020070
 800b9b4:	40020088 	.word	0x40020088
 800b9b8:	400200a0 	.word	0x400200a0
 800b9bc:	400200b8 	.word	0x400200b8
 800b9c0:	40020410 	.word	0x40020410
 800b9c4:	40020428 	.word	0x40020428
 800b9c8:	40020440 	.word	0x40020440
 800b9cc:	40020458 	.word	0x40020458
 800b9d0:	40020470 	.word	0x40020470
 800b9d4:	40020488 	.word	0x40020488
 800b9d8:	400204a0 	.word	0x400204a0
 800b9dc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 0301 	and.w	r3, r3, #1
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1c8      	bne.n	800b980 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b9f6:	697a      	ldr	r2, [r7, #20]
 800b9f8:	4b83      	ldr	r3, [pc, #524]	@ (800bc08 <HAL_DMA_Init+0x420>)
 800b9fa:	4013      	ands	r3, r2
 800b9fc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800ba06:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	691b      	ldr	r3, [r3, #16]
 800ba0c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba12:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba1e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6a1b      	ldr	r3, [r3, #32]
 800ba24:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800ba26:	697a      	ldr	r2, [r7, #20]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba30:	2b04      	cmp	r3, #4
 800ba32:	d107      	bne.n	800ba44 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	2b28      	cmp	r3, #40	@ 0x28
 800ba4a:	d903      	bls.n	800ba54 <HAL_DMA_Init+0x26c>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba52:	d91f      	bls.n	800ba94 <HAL_DMA_Init+0x2ac>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	2b3e      	cmp	r3, #62	@ 0x3e
 800ba5a:	d903      	bls.n	800ba64 <HAL_DMA_Init+0x27c>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	2b42      	cmp	r3, #66	@ 0x42
 800ba62:	d917      	bls.n	800ba94 <HAL_DMA_Init+0x2ac>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	2b46      	cmp	r3, #70	@ 0x46
 800ba6a:	d903      	bls.n	800ba74 <HAL_DMA_Init+0x28c>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	2b48      	cmp	r3, #72	@ 0x48
 800ba72:	d90f      	bls.n	800ba94 <HAL_DMA_Init+0x2ac>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	2b4e      	cmp	r3, #78	@ 0x4e
 800ba7a:	d903      	bls.n	800ba84 <HAL_DMA_Init+0x29c>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	2b52      	cmp	r3, #82	@ 0x52
 800ba82:	d907      	bls.n	800ba94 <HAL_DMA_Init+0x2ac>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	2b73      	cmp	r3, #115	@ 0x73
 800ba8a:	d905      	bls.n	800ba98 <HAL_DMA_Init+0x2b0>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	2b77      	cmp	r3, #119	@ 0x77
 800ba92:	d801      	bhi.n	800ba98 <HAL_DMA_Init+0x2b0>
 800ba94:	2301      	movs	r3, #1
 800ba96:	e000      	b.n	800ba9a <HAL_DMA_Init+0x2b2>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d003      	beq.n	800baa6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800baa4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	697a      	ldr	r2, [r7, #20]
 800baac:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	695b      	ldr	r3, [r3, #20]
 800bab4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	f023 0307 	bic.w	r3, r3, #7
 800babc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bac2:	697a      	ldr	r2, [r7, #20]
 800bac4:	4313      	orrs	r3, r2
 800bac6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bacc:	2b04      	cmp	r3, #4
 800bace:	d117      	bne.n	800bb00 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bad4:	697a      	ldr	r2, [r7, #20]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00e      	beq.n	800bb00 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f002 fb48 	bl	800e178 <DMA_CheckFifoParam>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d008      	beq.n	800bb00 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2240      	movs	r2, #64	@ 0x40
 800baf2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	e192      	b.n	800be26 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	697a      	ldr	r2, [r7, #20]
 800bb06:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f002 fa83 	bl	800e014 <DMA_CalcBaseAndBitshift>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb16:	f003 031f 	and.w	r3, r3, #31
 800bb1a:	223f      	movs	r2, #63	@ 0x3f
 800bb1c:	409a      	lsls	r2, r3
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	609a      	str	r2, [r3, #8]
 800bb22:	e0c8      	b.n	800bcb6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a38      	ldr	r2, [pc, #224]	@ (800bc0c <HAL_DMA_Init+0x424>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d022      	beq.n	800bb74 <HAL_DMA_Init+0x38c>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a37      	ldr	r2, [pc, #220]	@ (800bc10 <HAL_DMA_Init+0x428>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d01d      	beq.n	800bb74 <HAL_DMA_Init+0x38c>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a35      	ldr	r2, [pc, #212]	@ (800bc14 <HAL_DMA_Init+0x42c>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d018      	beq.n	800bb74 <HAL_DMA_Init+0x38c>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a34      	ldr	r2, [pc, #208]	@ (800bc18 <HAL_DMA_Init+0x430>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d013      	beq.n	800bb74 <HAL_DMA_Init+0x38c>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a32      	ldr	r2, [pc, #200]	@ (800bc1c <HAL_DMA_Init+0x434>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d00e      	beq.n	800bb74 <HAL_DMA_Init+0x38c>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a31      	ldr	r2, [pc, #196]	@ (800bc20 <HAL_DMA_Init+0x438>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d009      	beq.n	800bb74 <HAL_DMA_Init+0x38c>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a2f      	ldr	r2, [pc, #188]	@ (800bc24 <HAL_DMA_Init+0x43c>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d004      	beq.n	800bb74 <HAL_DMA_Init+0x38c>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a2e      	ldr	r2, [pc, #184]	@ (800bc28 <HAL_DMA_Init+0x440>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d101      	bne.n	800bb78 <HAL_DMA_Init+0x390>
 800bb74:	2301      	movs	r3, #1
 800bb76:	e000      	b.n	800bb7a <HAL_DMA_Init+0x392>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	f000 8092 	beq.w	800bca4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a21      	ldr	r2, [pc, #132]	@ (800bc0c <HAL_DMA_Init+0x424>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d021      	beq.n	800bbce <HAL_DMA_Init+0x3e6>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4a20      	ldr	r2, [pc, #128]	@ (800bc10 <HAL_DMA_Init+0x428>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d01c      	beq.n	800bbce <HAL_DMA_Init+0x3e6>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4a1e      	ldr	r2, [pc, #120]	@ (800bc14 <HAL_DMA_Init+0x42c>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d017      	beq.n	800bbce <HAL_DMA_Init+0x3e6>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a1d      	ldr	r2, [pc, #116]	@ (800bc18 <HAL_DMA_Init+0x430>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d012      	beq.n	800bbce <HAL_DMA_Init+0x3e6>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a1b      	ldr	r2, [pc, #108]	@ (800bc1c <HAL_DMA_Init+0x434>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d00d      	beq.n	800bbce <HAL_DMA_Init+0x3e6>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a1a      	ldr	r2, [pc, #104]	@ (800bc20 <HAL_DMA_Init+0x438>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d008      	beq.n	800bbce <HAL_DMA_Init+0x3e6>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a18      	ldr	r2, [pc, #96]	@ (800bc24 <HAL_DMA_Init+0x43c>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d003      	beq.n	800bbce <HAL_DMA_Init+0x3e6>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a17      	ldr	r2, [pc, #92]	@ (800bc28 <HAL_DMA_Init+0x440>)
 800bbcc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2202      	movs	r2, #2
 800bbd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	4b10      	ldr	r3, [pc, #64]	@ (800bc2c <HAL_DMA_Init+0x444>)
 800bbea:	4013      	ands	r3, r2
 800bbec:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	2b40      	cmp	r3, #64	@ 0x40
 800bbf4:	d01c      	beq.n	800bc30 <HAL_DMA_Init+0x448>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	2b80      	cmp	r3, #128	@ 0x80
 800bbfc:	d102      	bne.n	800bc04 <HAL_DMA_Init+0x41c>
 800bbfe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bc02:	e016      	b.n	800bc32 <HAL_DMA_Init+0x44a>
 800bc04:	2300      	movs	r3, #0
 800bc06:	e014      	b.n	800bc32 <HAL_DMA_Init+0x44a>
 800bc08:	fe10803f 	.word	0xfe10803f
 800bc0c:	58025408 	.word	0x58025408
 800bc10:	5802541c 	.word	0x5802541c
 800bc14:	58025430 	.word	0x58025430
 800bc18:	58025444 	.word	0x58025444
 800bc1c:	58025458 	.word	0x58025458
 800bc20:	5802546c 	.word	0x5802546c
 800bc24:	58025480 	.word	0x58025480
 800bc28:	58025494 	.word	0x58025494
 800bc2c:	fffe000f 	.word	0xfffe000f
 800bc30:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	68d2      	ldr	r2, [r2, #12]
 800bc36:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bc38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	691b      	ldr	r3, [r3, #16]
 800bc3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800bc40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	695b      	ldr	r3, [r3, #20]
 800bc46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bc48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	699b      	ldr	r3, [r3, #24]
 800bc4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800bc50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	69db      	ldr	r3, [r3, #28]
 800bc56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800bc58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a1b      	ldr	r3, [r3, #32]
 800bc5e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800bc60:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	4313      	orrs	r3, r2
 800bc66:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	697a      	ldr	r2, [r7, #20]
 800bc6e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	461a      	mov	r2, r3
 800bc76:	4b6e      	ldr	r3, [pc, #440]	@ (800be30 <HAL_DMA_Init+0x648>)
 800bc78:	4413      	add	r3, r2
 800bc7a:	4a6e      	ldr	r2, [pc, #440]	@ (800be34 <HAL_DMA_Init+0x64c>)
 800bc7c:	fba2 2303 	umull	r2, r3, r2, r3
 800bc80:	091b      	lsrs	r3, r3, #4
 800bc82:	009a      	lsls	r2, r3, #2
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f002 f9c3 	bl	800e014 <DMA_CalcBaseAndBitshift>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc96:	f003 031f 	and.w	r3, r3, #31
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	409a      	lsls	r2, r3
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	605a      	str	r2, [r3, #4]
 800bca2:	e008      	b.n	800bcb6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2240      	movs	r2, #64	@ 0x40
 800bca8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2203      	movs	r2, #3
 800bcae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e0b7      	b.n	800be26 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a5f      	ldr	r2, [pc, #380]	@ (800be38 <HAL_DMA_Init+0x650>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d072      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a5d      	ldr	r2, [pc, #372]	@ (800be3c <HAL_DMA_Init+0x654>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d06d      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a5c      	ldr	r2, [pc, #368]	@ (800be40 <HAL_DMA_Init+0x658>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d068      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a5a      	ldr	r2, [pc, #360]	@ (800be44 <HAL_DMA_Init+0x65c>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d063      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a59      	ldr	r2, [pc, #356]	@ (800be48 <HAL_DMA_Init+0x660>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d05e      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a57      	ldr	r2, [pc, #348]	@ (800be4c <HAL_DMA_Init+0x664>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d059      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a56      	ldr	r2, [pc, #344]	@ (800be50 <HAL_DMA_Init+0x668>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d054      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a54      	ldr	r2, [pc, #336]	@ (800be54 <HAL_DMA_Init+0x66c>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d04f      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a53      	ldr	r2, [pc, #332]	@ (800be58 <HAL_DMA_Init+0x670>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d04a      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a51      	ldr	r2, [pc, #324]	@ (800be5c <HAL_DMA_Init+0x674>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d045      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a50      	ldr	r2, [pc, #320]	@ (800be60 <HAL_DMA_Init+0x678>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d040      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a4e      	ldr	r2, [pc, #312]	@ (800be64 <HAL_DMA_Init+0x67c>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d03b      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a4d      	ldr	r2, [pc, #308]	@ (800be68 <HAL_DMA_Init+0x680>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d036      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a4b      	ldr	r2, [pc, #300]	@ (800be6c <HAL_DMA_Init+0x684>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d031      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a4a      	ldr	r2, [pc, #296]	@ (800be70 <HAL_DMA_Init+0x688>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d02c      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a48      	ldr	r2, [pc, #288]	@ (800be74 <HAL_DMA_Init+0x68c>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d027      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a47      	ldr	r2, [pc, #284]	@ (800be78 <HAL_DMA_Init+0x690>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d022      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a45      	ldr	r2, [pc, #276]	@ (800be7c <HAL_DMA_Init+0x694>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d01d      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a44      	ldr	r2, [pc, #272]	@ (800be80 <HAL_DMA_Init+0x698>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d018      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a42      	ldr	r2, [pc, #264]	@ (800be84 <HAL_DMA_Init+0x69c>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d013      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a41      	ldr	r2, [pc, #260]	@ (800be88 <HAL_DMA_Init+0x6a0>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d00e      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a3f      	ldr	r2, [pc, #252]	@ (800be8c <HAL_DMA_Init+0x6a4>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d009      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a3e      	ldr	r2, [pc, #248]	@ (800be90 <HAL_DMA_Init+0x6a8>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d004      	beq.n	800bda6 <HAL_DMA_Init+0x5be>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a3c      	ldr	r2, [pc, #240]	@ (800be94 <HAL_DMA_Init+0x6ac>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d101      	bne.n	800bdaa <HAL_DMA_Init+0x5c2>
 800bda6:	2301      	movs	r3, #1
 800bda8:	e000      	b.n	800bdac <HAL_DMA_Init+0x5c4>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d032      	beq.n	800be16 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f002 fa5d 	bl	800e270 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	2b80      	cmp	r3, #128	@ 0x80
 800bdbc:	d102      	bne.n	800bdc4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	685a      	ldr	r2, [r3, #4]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bdcc:	b2d2      	uxtb	r2, r2
 800bdce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800bdd8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d010      	beq.n	800be04 <HAL_DMA_Init+0x61c>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	2b08      	cmp	r3, #8
 800bde8:	d80c      	bhi.n	800be04 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f002 fada 	bl	800e3a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800be00:	605a      	str	r2, [r3, #4]
 800be02:	e008      	b.n	800be16 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2201      	movs	r2, #1
 800be20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3718      	adds	r7, #24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	a7fdabf8 	.word	0xa7fdabf8
 800be34:	cccccccd 	.word	0xcccccccd
 800be38:	40020010 	.word	0x40020010
 800be3c:	40020028 	.word	0x40020028
 800be40:	40020040 	.word	0x40020040
 800be44:	40020058 	.word	0x40020058
 800be48:	40020070 	.word	0x40020070
 800be4c:	40020088 	.word	0x40020088
 800be50:	400200a0 	.word	0x400200a0
 800be54:	400200b8 	.word	0x400200b8
 800be58:	40020410 	.word	0x40020410
 800be5c:	40020428 	.word	0x40020428
 800be60:	40020440 	.word	0x40020440
 800be64:	40020458 	.word	0x40020458
 800be68:	40020470 	.word	0x40020470
 800be6c:	40020488 	.word	0x40020488
 800be70:	400204a0 	.word	0x400204a0
 800be74:	400204b8 	.word	0x400204b8
 800be78:	58025408 	.word	0x58025408
 800be7c:	5802541c 	.word	0x5802541c
 800be80:	58025430 	.word	0x58025430
 800be84:	58025444 	.word	0x58025444
 800be88:	58025458 	.word	0x58025458
 800be8c:	5802546c 	.word	0x5802546c
 800be90:	58025480 	.word	0x58025480
 800be94:	58025494 	.word	0x58025494

0800be98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b086      	sub	sp, #24
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	607a      	str	r2, [r7, #4]
 800bea4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bea6:	2300      	movs	r3, #0
 800bea8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d101      	bne.n	800beb4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800beb0:	2301      	movs	r3, #1
 800beb2:	e226      	b.n	800c302 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d101      	bne.n	800bec2 <HAL_DMA_Start_IT+0x2a>
 800bebe:	2302      	movs	r3, #2
 800bec0:	e21f      	b.n	800c302 <HAL_DMA_Start_IT+0x46a>
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2201      	movs	r2, #1
 800bec6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	f040 820a 	bne.w	800c2ec <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2202      	movs	r2, #2
 800bedc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2200      	movs	r2, #0
 800bee4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a68      	ldr	r2, [pc, #416]	@ (800c08c <HAL_DMA_Start_IT+0x1f4>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d04a      	beq.n	800bf86 <HAL_DMA_Start_IT+0xee>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a66      	ldr	r2, [pc, #408]	@ (800c090 <HAL_DMA_Start_IT+0x1f8>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d045      	beq.n	800bf86 <HAL_DMA_Start_IT+0xee>
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4a65      	ldr	r2, [pc, #404]	@ (800c094 <HAL_DMA_Start_IT+0x1fc>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d040      	beq.n	800bf86 <HAL_DMA_Start_IT+0xee>
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a63      	ldr	r2, [pc, #396]	@ (800c098 <HAL_DMA_Start_IT+0x200>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d03b      	beq.n	800bf86 <HAL_DMA_Start_IT+0xee>
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a62      	ldr	r2, [pc, #392]	@ (800c09c <HAL_DMA_Start_IT+0x204>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d036      	beq.n	800bf86 <HAL_DMA_Start_IT+0xee>
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a60      	ldr	r2, [pc, #384]	@ (800c0a0 <HAL_DMA_Start_IT+0x208>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d031      	beq.n	800bf86 <HAL_DMA_Start_IT+0xee>
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a5f      	ldr	r2, [pc, #380]	@ (800c0a4 <HAL_DMA_Start_IT+0x20c>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d02c      	beq.n	800bf86 <HAL_DMA_Start_IT+0xee>
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a5d      	ldr	r2, [pc, #372]	@ (800c0a8 <HAL_DMA_Start_IT+0x210>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d027      	beq.n	800bf86 <HAL_DMA_Start_IT+0xee>
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a5c      	ldr	r2, [pc, #368]	@ (800c0ac <HAL_DMA_Start_IT+0x214>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d022      	beq.n	800bf86 <HAL_DMA_Start_IT+0xee>
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a5a      	ldr	r2, [pc, #360]	@ (800c0b0 <HAL_DMA_Start_IT+0x218>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d01d      	beq.n	800bf86 <HAL_DMA_Start_IT+0xee>
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a59      	ldr	r2, [pc, #356]	@ (800c0b4 <HAL_DMA_Start_IT+0x21c>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d018      	beq.n	800bf86 <HAL_DMA_Start_IT+0xee>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a57      	ldr	r2, [pc, #348]	@ (800c0b8 <HAL_DMA_Start_IT+0x220>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d013      	beq.n	800bf86 <HAL_DMA_Start_IT+0xee>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a56      	ldr	r2, [pc, #344]	@ (800c0bc <HAL_DMA_Start_IT+0x224>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d00e      	beq.n	800bf86 <HAL_DMA_Start_IT+0xee>
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a54      	ldr	r2, [pc, #336]	@ (800c0c0 <HAL_DMA_Start_IT+0x228>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d009      	beq.n	800bf86 <HAL_DMA_Start_IT+0xee>
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a53      	ldr	r2, [pc, #332]	@ (800c0c4 <HAL_DMA_Start_IT+0x22c>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d004      	beq.n	800bf86 <HAL_DMA_Start_IT+0xee>
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a51      	ldr	r2, [pc, #324]	@ (800c0c8 <HAL_DMA_Start_IT+0x230>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d108      	bne.n	800bf98 <HAL_DMA_Start_IT+0x100>
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f022 0201 	bic.w	r2, r2, #1
 800bf94:	601a      	str	r2, [r3, #0]
 800bf96:	e007      	b.n	800bfa8 <HAL_DMA_Start_IT+0x110>
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f022 0201 	bic.w	r2, r2, #1
 800bfa6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	68b9      	ldr	r1, [r7, #8]
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	f001 fe84 	bl	800dcbc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a34      	ldr	r2, [pc, #208]	@ (800c08c <HAL_DMA_Start_IT+0x1f4>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d04a      	beq.n	800c054 <HAL_DMA_Start_IT+0x1bc>
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a33      	ldr	r2, [pc, #204]	@ (800c090 <HAL_DMA_Start_IT+0x1f8>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d045      	beq.n	800c054 <HAL_DMA_Start_IT+0x1bc>
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a31      	ldr	r2, [pc, #196]	@ (800c094 <HAL_DMA_Start_IT+0x1fc>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d040      	beq.n	800c054 <HAL_DMA_Start_IT+0x1bc>
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a30      	ldr	r2, [pc, #192]	@ (800c098 <HAL_DMA_Start_IT+0x200>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d03b      	beq.n	800c054 <HAL_DMA_Start_IT+0x1bc>
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4a2e      	ldr	r2, [pc, #184]	@ (800c09c <HAL_DMA_Start_IT+0x204>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d036      	beq.n	800c054 <HAL_DMA_Start_IT+0x1bc>
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4a2d      	ldr	r2, [pc, #180]	@ (800c0a0 <HAL_DMA_Start_IT+0x208>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d031      	beq.n	800c054 <HAL_DMA_Start_IT+0x1bc>
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4a2b      	ldr	r2, [pc, #172]	@ (800c0a4 <HAL_DMA_Start_IT+0x20c>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d02c      	beq.n	800c054 <HAL_DMA_Start_IT+0x1bc>
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a2a      	ldr	r2, [pc, #168]	@ (800c0a8 <HAL_DMA_Start_IT+0x210>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d027      	beq.n	800c054 <HAL_DMA_Start_IT+0x1bc>
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a28      	ldr	r2, [pc, #160]	@ (800c0ac <HAL_DMA_Start_IT+0x214>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d022      	beq.n	800c054 <HAL_DMA_Start_IT+0x1bc>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4a27      	ldr	r2, [pc, #156]	@ (800c0b0 <HAL_DMA_Start_IT+0x218>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d01d      	beq.n	800c054 <HAL_DMA_Start_IT+0x1bc>
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a25      	ldr	r2, [pc, #148]	@ (800c0b4 <HAL_DMA_Start_IT+0x21c>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d018      	beq.n	800c054 <HAL_DMA_Start_IT+0x1bc>
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4a24      	ldr	r2, [pc, #144]	@ (800c0b8 <HAL_DMA_Start_IT+0x220>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d013      	beq.n	800c054 <HAL_DMA_Start_IT+0x1bc>
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a22      	ldr	r2, [pc, #136]	@ (800c0bc <HAL_DMA_Start_IT+0x224>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d00e      	beq.n	800c054 <HAL_DMA_Start_IT+0x1bc>
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4a21      	ldr	r2, [pc, #132]	@ (800c0c0 <HAL_DMA_Start_IT+0x228>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d009      	beq.n	800c054 <HAL_DMA_Start_IT+0x1bc>
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4a1f      	ldr	r2, [pc, #124]	@ (800c0c4 <HAL_DMA_Start_IT+0x22c>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d004      	beq.n	800c054 <HAL_DMA_Start_IT+0x1bc>
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	4a1e      	ldr	r2, [pc, #120]	@ (800c0c8 <HAL_DMA_Start_IT+0x230>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d101      	bne.n	800c058 <HAL_DMA_Start_IT+0x1c0>
 800c054:	2301      	movs	r3, #1
 800c056:	e000      	b.n	800c05a <HAL_DMA_Start_IT+0x1c2>
 800c058:	2300      	movs	r3, #0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d036      	beq.n	800c0cc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f023 021e 	bic.w	r2, r3, #30
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f042 0216 	orr.w	r2, r2, #22
 800c070:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c076:	2b00      	cmp	r3, #0
 800c078:	d03e      	beq.n	800c0f8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f042 0208 	orr.w	r2, r2, #8
 800c088:	601a      	str	r2, [r3, #0]
 800c08a:	e035      	b.n	800c0f8 <HAL_DMA_Start_IT+0x260>
 800c08c:	40020010 	.word	0x40020010
 800c090:	40020028 	.word	0x40020028
 800c094:	40020040 	.word	0x40020040
 800c098:	40020058 	.word	0x40020058
 800c09c:	40020070 	.word	0x40020070
 800c0a0:	40020088 	.word	0x40020088
 800c0a4:	400200a0 	.word	0x400200a0
 800c0a8:	400200b8 	.word	0x400200b8
 800c0ac:	40020410 	.word	0x40020410
 800c0b0:	40020428 	.word	0x40020428
 800c0b4:	40020440 	.word	0x40020440
 800c0b8:	40020458 	.word	0x40020458
 800c0bc:	40020470 	.word	0x40020470
 800c0c0:	40020488 	.word	0x40020488
 800c0c4:	400204a0 	.word	0x400204a0
 800c0c8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f023 020e 	bic.w	r2, r3, #14
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f042 020a 	orr.w	r2, r2, #10
 800c0de:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d007      	beq.n	800c0f8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f042 0204 	orr.w	r2, r2, #4
 800c0f6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a83      	ldr	r2, [pc, #524]	@ (800c30c <HAL_DMA_Start_IT+0x474>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d072      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a82      	ldr	r2, [pc, #520]	@ (800c310 <HAL_DMA_Start_IT+0x478>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d06d      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a80      	ldr	r2, [pc, #512]	@ (800c314 <HAL_DMA_Start_IT+0x47c>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d068      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a7f      	ldr	r2, [pc, #508]	@ (800c318 <HAL_DMA_Start_IT+0x480>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d063      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a7d      	ldr	r2, [pc, #500]	@ (800c31c <HAL_DMA_Start_IT+0x484>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d05e      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a7c      	ldr	r2, [pc, #496]	@ (800c320 <HAL_DMA_Start_IT+0x488>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d059      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a7a      	ldr	r2, [pc, #488]	@ (800c324 <HAL_DMA_Start_IT+0x48c>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d054      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	4a79      	ldr	r2, [pc, #484]	@ (800c328 <HAL_DMA_Start_IT+0x490>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d04f      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a77      	ldr	r2, [pc, #476]	@ (800c32c <HAL_DMA_Start_IT+0x494>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d04a      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a76      	ldr	r2, [pc, #472]	@ (800c330 <HAL_DMA_Start_IT+0x498>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d045      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a74      	ldr	r2, [pc, #464]	@ (800c334 <HAL_DMA_Start_IT+0x49c>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d040      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a73      	ldr	r2, [pc, #460]	@ (800c338 <HAL_DMA_Start_IT+0x4a0>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d03b      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4a71      	ldr	r2, [pc, #452]	@ (800c33c <HAL_DMA_Start_IT+0x4a4>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d036      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4a70      	ldr	r2, [pc, #448]	@ (800c340 <HAL_DMA_Start_IT+0x4a8>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d031      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a6e      	ldr	r2, [pc, #440]	@ (800c344 <HAL_DMA_Start_IT+0x4ac>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d02c      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	4a6d      	ldr	r2, [pc, #436]	@ (800c348 <HAL_DMA_Start_IT+0x4b0>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d027      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a6b      	ldr	r2, [pc, #428]	@ (800c34c <HAL_DMA_Start_IT+0x4b4>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d022      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a6a      	ldr	r2, [pc, #424]	@ (800c350 <HAL_DMA_Start_IT+0x4b8>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d01d      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a68      	ldr	r2, [pc, #416]	@ (800c354 <HAL_DMA_Start_IT+0x4bc>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d018      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a67      	ldr	r2, [pc, #412]	@ (800c358 <HAL_DMA_Start_IT+0x4c0>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d013      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4a65      	ldr	r2, [pc, #404]	@ (800c35c <HAL_DMA_Start_IT+0x4c4>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d00e      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4a64      	ldr	r2, [pc, #400]	@ (800c360 <HAL_DMA_Start_IT+0x4c8>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d009      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a62      	ldr	r2, [pc, #392]	@ (800c364 <HAL_DMA_Start_IT+0x4cc>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d004      	beq.n	800c1e8 <HAL_DMA_Start_IT+0x350>
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a61      	ldr	r2, [pc, #388]	@ (800c368 <HAL_DMA_Start_IT+0x4d0>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d101      	bne.n	800c1ec <HAL_DMA_Start_IT+0x354>
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e000      	b.n	800c1ee <HAL_DMA_Start_IT+0x356>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d01a      	beq.n	800c228 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d007      	beq.n	800c210 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c20a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c20e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c214:	2b00      	cmp	r3, #0
 800c216:	d007      	beq.n	800c228 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c222:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c226:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a37      	ldr	r2, [pc, #220]	@ (800c30c <HAL_DMA_Start_IT+0x474>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d04a      	beq.n	800c2c8 <HAL_DMA_Start_IT+0x430>
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4a36      	ldr	r2, [pc, #216]	@ (800c310 <HAL_DMA_Start_IT+0x478>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d045      	beq.n	800c2c8 <HAL_DMA_Start_IT+0x430>
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a34      	ldr	r2, [pc, #208]	@ (800c314 <HAL_DMA_Start_IT+0x47c>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d040      	beq.n	800c2c8 <HAL_DMA_Start_IT+0x430>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a33      	ldr	r2, [pc, #204]	@ (800c318 <HAL_DMA_Start_IT+0x480>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d03b      	beq.n	800c2c8 <HAL_DMA_Start_IT+0x430>
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4a31      	ldr	r2, [pc, #196]	@ (800c31c <HAL_DMA_Start_IT+0x484>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d036      	beq.n	800c2c8 <HAL_DMA_Start_IT+0x430>
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a30      	ldr	r2, [pc, #192]	@ (800c320 <HAL_DMA_Start_IT+0x488>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d031      	beq.n	800c2c8 <HAL_DMA_Start_IT+0x430>
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a2e      	ldr	r2, [pc, #184]	@ (800c324 <HAL_DMA_Start_IT+0x48c>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d02c      	beq.n	800c2c8 <HAL_DMA_Start_IT+0x430>
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4a2d      	ldr	r2, [pc, #180]	@ (800c328 <HAL_DMA_Start_IT+0x490>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d027      	beq.n	800c2c8 <HAL_DMA_Start_IT+0x430>
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a2b      	ldr	r2, [pc, #172]	@ (800c32c <HAL_DMA_Start_IT+0x494>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d022      	beq.n	800c2c8 <HAL_DMA_Start_IT+0x430>
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4a2a      	ldr	r2, [pc, #168]	@ (800c330 <HAL_DMA_Start_IT+0x498>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d01d      	beq.n	800c2c8 <HAL_DMA_Start_IT+0x430>
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a28      	ldr	r2, [pc, #160]	@ (800c334 <HAL_DMA_Start_IT+0x49c>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d018      	beq.n	800c2c8 <HAL_DMA_Start_IT+0x430>
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a27      	ldr	r2, [pc, #156]	@ (800c338 <HAL_DMA_Start_IT+0x4a0>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d013      	beq.n	800c2c8 <HAL_DMA_Start_IT+0x430>
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a25      	ldr	r2, [pc, #148]	@ (800c33c <HAL_DMA_Start_IT+0x4a4>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d00e      	beq.n	800c2c8 <HAL_DMA_Start_IT+0x430>
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4a24      	ldr	r2, [pc, #144]	@ (800c340 <HAL_DMA_Start_IT+0x4a8>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d009      	beq.n	800c2c8 <HAL_DMA_Start_IT+0x430>
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a22      	ldr	r2, [pc, #136]	@ (800c344 <HAL_DMA_Start_IT+0x4ac>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d004      	beq.n	800c2c8 <HAL_DMA_Start_IT+0x430>
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4a21      	ldr	r2, [pc, #132]	@ (800c348 <HAL_DMA_Start_IT+0x4b0>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d108      	bne.n	800c2da <HAL_DMA_Start_IT+0x442>
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f042 0201 	orr.w	r2, r2, #1
 800c2d6:	601a      	str	r2, [r3, #0]
 800c2d8:	e012      	b.n	800c300 <HAL_DMA_Start_IT+0x468>
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f042 0201 	orr.w	r2, r2, #1
 800c2e8:	601a      	str	r2, [r3, #0]
 800c2ea:	e009      	b.n	800c300 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c2f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c300:	7dfb      	ldrb	r3, [r7, #23]
}
 800c302:	4618      	mov	r0, r3
 800c304:	3718      	adds	r7, #24
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	40020010 	.word	0x40020010
 800c310:	40020028 	.word	0x40020028
 800c314:	40020040 	.word	0x40020040
 800c318:	40020058 	.word	0x40020058
 800c31c:	40020070 	.word	0x40020070
 800c320:	40020088 	.word	0x40020088
 800c324:	400200a0 	.word	0x400200a0
 800c328:	400200b8 	.word	0x400200b8
 800c32c:	40020410 	.word	0x40020410
 800c330:	40020428 	.word	0x40020428
 800c334:	40020440 	.word	0x40020440
 800c338:	40020458 	.word	0x40020458
 800c33c:	40020470 	.word	0x40020470
 800c340:	40020488 	.word	0x40020488
 800c344:	400204a0 	.word	0x400204a0
 800c348:	400204b8 	.word	0x400204b8
 800c34c:	58025408 	.word	0x58025408
 800c350:	5802541c 	.word	0x5802541c
 800c354:	58025430 	.word	0x58025430
 800c358:	58025444 	.word	0x58025444
 800c35c:	58025458 	.word	0x58025458
 800c360:	5802546c 	.word	0x5802546c
 800c364:	58025480 	.word	0x58025480
 800c368:	58025494 	.word	0x58025494

0800c36c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b086      	sub	sp, #24
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800c374:	f7fd f902 	bl	800957c <HAL_GetTick>
 800c378:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d101      	bne.n	800c384 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800c380:	2301      	movs	r3, #1
 800c382:	e2dc      	b.n	800c93e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	2b02      	cmp	r3, #2
 800c38e:	d008      	beq.n	800c3a2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2280      	movs	r2, #128	@ 0x80
 800c394:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e2cd      	b.n	800c93e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4a76      	ldr	r2, [pc, #472]	@ (800c580 <HAL_DMA_Abort+0x214>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d04a      	beq.n	800c442 <HAL_DMA_Abort+0xd6>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a74      	ldr	r2, [pc, #464]	@ (800c584 <HAL_DMA_Abort+0x218>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d045      	beq.n	800c442 <HAL_DMA_Abort+0xd6>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a73      	ldr	r2, [pc, #460]	@ (800c588 <HAL_DMA_Abort+0x21c>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d040      	beq.n	800c442 <HAL_DMA_Abort+0xd6>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a71      	ldr	r2, [pc, #452]	@ (800c58c <HAL_DMA_Abort+0x220>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d03b      	beq.n	800c442 <HAL_DMA_Abort+0xd6>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a70      	ldr	r2, [pc, #448]	@ (800c590 <HAL_DMA_Abort+0x224>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d036      	beq.n	800c442 <HAL_DMA_Abort+0xd6>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a6e      	ldr	r2, [pc, #440]	@ (800c594 <HAL_DMA_Abort+0x228>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d031      	beq.n	800c442 <HAL_DMA_Abort+0xd6>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a6d      	ldr	r2, [pc, #436]	@ (800c598 <HAL_DMA_Abort+0x22c>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d02c      	beq.n	800c442 <HAL_DMA_Abort+0xd6>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a6b      	ldr	r2, [pc, #428]	@ (800c59c <HAL_DMA_Abort+0x230>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d027      	beq.n	800c442 <HAL_DMA_Abort+0xd6>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4a6a      	ldr	r2, [pc, #424]	@ (800c5a0 <HAL_DMA_Abort+0x234>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d022      	beq.n	800c442 <HAL_DMA_Abort+0xd6>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a68      	ldr	r2, [pc, #416]	@ (800c5a4 <HAL_DMA_Abort+0x238>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d01d      	beq.n	800c442 <HAL_DMA_Abort+0xd6>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a67      	ldr	r2, [pc, #412]	@ (800c5a8 <HAL_DMA_Abort+0x23c>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d018      	beq.n	800c442 <HAL_DMA_Abort+0xd6>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a65      	ldr	r2, [pc, #404]	@ (800c5ac <HAL_DMA_Abort+0x240>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d013      	beq.n	800c442 <HAL_DMA_Abort+0xd6>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a64      	ldr	r2, [pc, #400]	@ (800c5b0 <HAL_DMA_Abort+0x244>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d00e      	beq.n	800c442 <HAL_DMA_Abort+0xd6>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a62      	ldr	r2, [pc, #392]	@ (800c5b4 <HAL_DMA_Abort+0x248>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d009      	beq.n	800c442 <HAL_DMA_Abort+0xd6>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a61      	ldr	r2, [pc, #388]	@ (800c5b8 <HAL_DMA_Abort+0x24c>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d004      	beq.n	800c442 <HAL_DMA_Abort+0xd6>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a5f      	ldr	r2, [pc, #380]	@ (800c5bc <HAL_DMA_Abort+0x250>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d101      	bne.n	800c446 <HAL_DMA_Abort+0xda>
 800c442:	2301      	movs	r3, #1
 800c444:	e000      	b.n	800c448 <HAL_DMA_Abort+0xdc>
 800c446:	2300      	movs	r3, #0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d013      	beq.n	800c474 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f022 021e 	bic.w	r2, r2, #30
 800c45a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	695a      	ldr	r2, [r3, #20]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c46a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	617b      	str	r3, [r7, #20]
 800c472:	e00a      	b.n	800c48a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	681a      	ldr	r2, [r3, #0]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f022 020e 	bic.w	r2, r2, #14
 800c482:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a3c      	ldr	r2, [pc, #240]	@ (800c580 <HAL_DMA_Abort+0x214>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d072      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a3a      	ldr	r2, [pc, #232]	@ (800c584 <HAL_DMA_Abort+0x218>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d06d      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a39      	ldr	r2, [pc, #228]	@ (800c588 <HAL_DMA_Abort+0x21c>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d068      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a37      	ldr	r2, [pc, #220]	@ (800c58c <HAL_DMA_Abort+0x220>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d063      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a36      	ldr	r2, [pc, #216]	@ (800c590 <HAL_DMA_Abort+0x224>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d05e      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4a34      	ldr	r2, [pc, #208]	@ (800c594 <HAL_DMA_Abort+0x228>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d059      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a33      	ldr	r2, [pc, #204]	@ (800c598 <HAL_DMA_Abort+0x22c>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d054      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a31      	ldr	r2, [pc, #196]	@ (800c59c <HAL_DMA_Abort+0x230>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d04f      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a30      	ldr	r2, [pc, #192]	@ (800c5a0 <HAL_DMA_Abort+0x234>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d04a      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a2e      	ldr	r2, [pc, #184]	@ (800c5a4 <HAL_DMA_Abort+0x238>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d045      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4a2d      	ldr	r2, [pc, #180]	@ (800c5a8 <HAL_DMA_Abort+0x23c>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d040      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a2b      	ldr	r2, [pc, #172]	@ (800c5ac <HAL_DMA_Abort+0x240>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d03b      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a2a      	ldr	r2, [pc, #168]	@ (800c5b0 <HAL_DMA_Abort+0x244>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d036      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a28      	ldr	r2, [pc, #160]	@ (800c5b4 <HAL_DMA_Abort+0x248>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d031      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a27      	ldr	r2, [pc, #156]	@ (800c5b8 <HAL_DMA_Abort+0x24c>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d02c      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4a25      	ldr	r2, [pc, #148]	@ (800c5bc <HAL_DMA_Abort+0x250>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d027      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4a24      	ldr	r2, [pc, #144]	@ (800c5c0 <HAL_DMA_Abort+0x254>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d022      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a22      	ldr	r2, [pc, #136]	@ (800c5c4 <HAL_DMA_Abort+0x258>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d01d      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4a21      	ldr	r2, [pc, #132]	@ (800c5c8 <HAL_DMA_Abort+0x25c>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d018      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a1f      	ldr	r2, [pc, #124]	@ (800c5cc <HAL_DMA_Abort+0x260>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d013      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4a1e      	ldr	r2, [pc, #120]	@ (800c5d0 <HAL_DMA_Abort+0x264>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d00e      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a1c      	ldr	r2, [pc, #112]	@ (800c5d4 <HAL_DMA_Abort+0x268>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d009      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a1b      	ldr	r2, [pc, #108]	@ (800c5d8 <HAL_DMA_Abort+0x26c>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d004      	beq.n	800c57a <HAL_DMA_Abort+0x20e>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a19      	ldr	r2, [pc, #100]	@ (800c5dc <HAL_DMA_Abort+0x270>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d132      	bne.n	800c5e0 <HAL_DMA_Abort+0x274>
 800c57a:	2301      	movs	r3, #1
 800c57c:	e031      	b.n	800c5e2 <HAL_DMA_Abort+0x276>
 800c57e:	bf00      	nop
 800c580:	40020010 	.word	0x40020010
 800c584:	40020028 	.word	0x40020028
 800c588:	40020040 	.word	0x40020040
 800c58c:	40020058 	.word	0x40020058
 800c590:	40020070 	.word	0x40020070
 800c594:	40020088 	.word	0x40020088
 800c598:	400200a0 	.word	0x400200a0
 800c59c:	400200b8 	.word	0x400200b8
 800c5a0:	40020410 	.word	0x40020410
 800c5a4:	40020428 	.word	0x40020428
 800c5a8:	40020440 	.word	0x40020440
 800c5ac:	40020458 	.word	0x40020458
 800c5b0:	40020470 	.word	0x40020470
 800c5b4:	40020488 	.word	0x40020488
 800c5b8:	400204a0 	.word	0x400204a0
 800c5bc:	400204b8 	.word	0x400204b8
 800c5c0:	58025408 	.word	0x58025408
 800c5c4:	5802541c 	.word	0x5802541c
 800c5c8:	58025430 	.word	0x58025430
 800c5cc:	58025444 	.word	0x58025444
 800c5d0:	58025458 	.word	0x58025458
 800c5d4:	5802546c 	.word	0x5802546c
 800c5d8:	58025480 	.word	0x58025480
 800c5dc:	58025494 	.word	0x58025494
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d007      	beq.n	800c5f6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c5f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c5f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a6d      	ldr	r2, [pc, #436]	@ (800c7b0 <HAL_DMA_Abort+0x444>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d04a      	beq.n	800c696 <HAL_DMA_Abort+0x32a>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a6b      	ldr	r2, [pc, #428]	@ (800c7b4 <HAL_DMA_Abort+0x448>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d045      	beq.n	800c696 <HAL_DMA_Abort+0x32a>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a6a      	ldr	r2, [pc, #424]	@ (800c7b8 <HAL_DMA_Abort+0x44c>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d040      	beq.n	800c696 <HAL_DMA_Abort+0x32a>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a68      	ldr	r2, [pc, #416]	@ (800c7bc <HAL_DMA_Abort+0x450>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d03b      	beq.n	800c696 <HAL_DMA_Abort+0x32a>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a67      	ldr	r2, [pc, #412]	@ (800c7c0 <HAL_DMA_Abort+0x454>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d036      	beq.n	800c696 <HAL_DMA_Abort+0x32a>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a65      	ldr	r2, [pc, #404]	@ (800c7c4 <HAL_DMA_Abort+0x458>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d031      	beq.n	800c696 <HAL_DMA_Abort+0x32a>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a64      	ldr	r2, [pc, #400]	@ (800c7c8 <HAL_DMA_Abort+0x45c>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d02c      	beq.n	800c696 <HAL_DMA_Abort+0x32a>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a62      	ldr	r2, [pc, #392]	@ (800c7cc <HAL_DMA_Abort+0x460>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d027      	beq.n	800c696 <HAL_DMA_Abort+0x32a>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a61      	ldr	r2, [pc, #388]	@ (800c7d0 <HAL_DMA_Abort+0x464>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d022      	beq.n	800c696 <HAL_DMA_Abort+0x32a>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4a5f      	ldr	r2, [pc, #380]	@ (800c7d4 <HAL_DMA_Abort+0x468>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d01d      	beq.n	800c696 <HAL_DMA_Abort+0x32a>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	4a5e      	ldr	r2, [pc, #376]	@ (800c7d8 <HAL_DMA_Abort+0x46c>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d018      	beq.n	800c696 <HAL_DMA_Abort+0x32a>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4a5c      	ldr	r2, [pc, #368]	@ (800c7dc <HAL_DMA_Abort+0x470>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d013      	beq.n	800c696 <HAL_DMA_Abort+0x32a>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4a5b      	ldr	r2, [pc, #364]	@ (800c7e0 <HAL_DMA_Abort+0x474>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d00e      	beq.n	800c696 <HAL_DMA_Abort+0x32a>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a59      	ldr	r2, [pc, #356]	@ (800c7e4 <HAL_DMA_Abort+0x478>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d009      	beq.n	800c696 <HAL_DMA_Abort+0x32a>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4a58      	ldr	r2, [pc, #352]	@ (800c7e8 <HAL_DMA_Abort+0x47c>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d004      	beq.n	800c696 <HAL_DMA_Abort+0x32a>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a56      	ldr	r2, [pc, #344]	@ (800c7ec <HAL_DMA_Abort+0x480>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d108      	bne.n	800c6a8 <HAL_DMA_Abort+0x33c>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f022 0201 	bic.w	r2, r2, #1
 800c6a4:	601a      	str	r2, [r3, #0]
 800c6a6:	e007      	b.n	800c6b8 <HAL_DMA_Abort+0x34c>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f022 0201 	bic.w	r2, r2, #1
 800c6b6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c6b8:	e013      	b.n	800c6e2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c6ba:	f7fc ff5f 	bl	800957c <HAL_GetTick>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	1ad3      	subs	r3, r2, r3
 800c6c4:	2b05      	cmp	r3, #5
 800c6c6:	d90c      	bls.n	800c6e2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2220      	movs	r2, #32
 800c6cc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2203      	movs	r2, #3
 800c6d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	e12d      	b.n	800c93e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f003 0301 	and.w	r3, r3, #1
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1e5      	bne.n	800c6ba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4a2f      	ldr	r2, [pc, #188]	@ (800c7b0 <HAL_DMA_Abort+0x444>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d04a      	beq.n	800c78e <HAL_DMA_Abort+0x422>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a2d      	ldr	r2, [pc, #180]	@ (800c7b4 <HAL_DMA_Abort+0x448>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d045      	beq.n	800c78e <HAL_DMA_Abort+0x422>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4a2c      	ldr	r2, [pc, #176]	@ (800c7b8 <HAL_DMA_Abort+0x44c>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d040      	beq.n	800c78e <HAL_DMA_Abort+0x422>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a2a      	ldr	r2, [pc, #168]	@ (800c7bc <HAL_DMA_Abort+0x450>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d03b      	beq.n	800c78e <HAL_DMA_Abort+0x422>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a29      	ldr	r2, [pc, #164]	@ (800c7c0 <HAL_DMA_Abort+0x454>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d036      	beq.n	800c78e <HAL_DMA_Abort+0x422>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a27      	ldr	r2, [pc, #156]	@ (800c7c4 <HAL_DMA_Abort+0x458>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d031      	beq.n	800c78e <HAL_DMA_Abort+0x422>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a26      	ldr	r2, [pc, #152]	@ (800c7c8 <HAL_DMA_Abort+0x45c>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d02c      	beq.n	800c78e <HAL_DMA_Abort+0x422>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a24      	ldr	r2, [pc, #144]	@ (800c7cc <HAL_DMA_Abort+0x460>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d027      	beq.n	800c78e <HAL_DMA_Abort+0x422>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4a23      	ldr	r2, [pc, #140]	@ (800c7d0 <HAL_DMA_Abort+0x464>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d022      	beq.n	800c78e <HAL_DMA_Abort+0x422>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a21      	ldr	r2, [pc, #132]	@ (800c7d4 <HAL_DMA_Abort+0x468>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d01d      	beq.n	800c78e <HAL_DMA_Abort+0x422>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a20      	ldr	r2, [pc, #128]	@ (800c7d8 <HAL_DMA_Abort+0x46c>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d018      	beq.n	800c78e <HAL_DMA_Abort+0x422>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a1e      	ldr	r2, [pc, #120]	@ (800c7dc <HAL_DMA_Abort+0x470>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d013      	beq.n	800c78e <HAL_DMA_Abort+0x422>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a1d      	ldr	r2, [pc, #116]	@ (800c7e0 <HAL_DMA_Abort+0x474>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d00e      	beq.n	800c78e <HAL_DMA_Abort+0x422>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a1b      	ldr	r2, [pc, #108]	@ (800c7e4 <HAL_DMA_Abort+0x478>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d009      	beq.n	800c78e <HAL_DMA_Abort+0x422>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a1a      	ldr	r2, [pc, #104]	@ (800c7e8 <HAL_DMA_Abort+0x47c>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d004      	beq.n	800c78e <HAL_DMA_Abort+0x422>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a18      	ldr	r2, [pc, #96]	@ (800c7ec <HAL_DMA_Abort+0x480>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d101      	bne.n	800c792 <HAL_DMA_Abort+0x426>
 800c78e:	2301      	movs	r3, #1
 800c790:	e000      	b.n	800c794 <HAL_DMA_Abort+0x428>
 800c792:	2300      	movs	r3, #0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d02b      	beq.n	800c7f0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c79c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7a2:	f003 031f 	and.w	r3, r3, #31
 800c7a6:	223f      	movs	r2, #63	@ 0x3f
 800c7a8:	409a      	lsls	r2, r3
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	609a      	str	r2, [r3, #8]
 800c7ae:	e02a      	b.n	800c806 <HAL_DMA_Abort+0x49a>
 800c7b0:	40020010 	.word	0x40020010
 800c7b4:	40020028 	.word	0x40020028
 800c7b8:	40020040 	.word	0x40020040
 800c7bc:	40020058 	.word	0x40020058
 800c7c0:	40020070 	.word	0x40020070
 800c7c4:	40020088 	.word	0x40020088
 800c7c8:	400200a0 	.word	0x400200a0
 800c7cc:	400200b8 	.word	0x400200b8
 800c7d0:	40020410 	.word	0x40020410
 800c7d4:	40020428 	.word	0x40020428
 800c7d8:	40020440 	.word	0x40020440
 800c7dc:	40020458 	.word	0x40020458
 800c7e0:	40020470 	.word	0x40020470
 800c7e4:	40020488 	.word	0x40020488
 800c7e8:	400204a0 	.word	0x400204a0
 800c7ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7f4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7fa:	f003 031f 	and.w	r3, r3, #31
 800c7fe:	2201      	movs	r2, #1
 800c800:	409a      	lsls	r2, r3
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a4f      	ldr	r2, [pc, #316]	@ (800c948 <HAL_DMA_Abort+0x5dc>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d072      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a4d      	ldr	r2, [pc, #308]	@ (800c94c <HAL_DMA_Abort+0x5e0>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d06d      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a4c      	ldr	r2, [pc, #304]	@ (800c950 <HAL_DMA_Abort+0x5e4>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d068      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a4a      	ldr	r2, [pc, #296]	@ (800c954 <HAL_DMA_Abort+0x5e8>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d063      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a49      	ldr	r2, [pc, #292]	@ (800c958 <HAL_DMA_Abort+0x5ec>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d05e      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a47      	ldr	r2, [pc, #284]	@ (800c95c <HAL_DMA_Abort+0x5f0>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d059      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4a46      	ldr	r2, [pc, #280]	@ (800c960 <HAL_DMA_Abort+0x5f4>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d054      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a44      	ldr	r2, [pc, #272]	@ (800c964 <HAL_DMA_Abort+0x5f8>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d04f      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a43      	ldr	r2, [pc, #268]	@ (800c968 <HAL_DMA_Abort+0x5fc>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d04a      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a41      	ldr	r2, [pc, #260]	@ (800c96c <HAL_DMA_Abort+0x600>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d045      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a40      	ldr	r2, [pc, #256]	@ (800c970 <HAL_DMA_Abort+0x604>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d040      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a3e      	ldr	r2, [pc, #248]	@ (800c974 <HAL_DMA_Abort+0x608>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d03b      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4a3d      	ldr	r2, [pc, #244]	@ (800c978 <HAL_DMA_Abort+0x60c>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d036      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a3b      	ldr	r2, [pc, #236]	@ (800c97c <HAL_DMA_Abort+0x610>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d031      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4a3a      	ldr	r2, [pc, #232]	@ (800c980 <HAL_DMA_Abort+0x614>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d02c      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a38      	ldr	r2, [pc, #224]	@ (800c984 <HAL_DMA_Abort+0x618>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d027      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a37      	ldr	r2, [pc, #220]	@ (800c988 <HAL_DMA_Abort+0x61c>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d022      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a35      	ldr	r2, [pc, #212]	@ (800c98c <HAL_DMA_Abort+0x620>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d01d      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a34      	ldr	r2, [pc, #208]	@ (800c990 <HAL_DMA_Abort+0x624>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d018      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a32      	ldr	r2, [pc, #200]	@ (800c994 <HAL_DMA_Abort+0x628>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d013      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a31      	ldr	r2, [pc, #196]	@ (800c998 <HAL_DMA_Abort+0x62c>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d00e      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a2f      	ldr	r2, [pc, #188]	@ (800c99c <HAL_DMA_Abort+0x630>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d009      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a2e      	ldr	r2, [pc, #184]	@ (800c9a0 <HAL_DMA_Abort+0x634>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d004      	beq.n	800c8f6 <HAL_DMA_Abort+0x58a>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a2c      	ldr	r2, [pc, #176]	@ (800c9a4 <HAL_DMA_Abort+0x638>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d101      	bne.n	800c8fa <HAL_DMA_Abort+0x58e>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e000      	b.n	800c8fc <HAL_DMA_Abort+0x590>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d015      	beq.n	800c92c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c908:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00c      	beq.n	800c92c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c91c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c920:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c92a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2201      	movs	r2, #1
 800c930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3718      	adds	r7, #24
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	40020010 	.word	0x40020010
 800c94c:	40020028 	.word	0x40020028
 800c950:	40020040 	.word	0x40020040
 800c954:	40020058 	.word	0x40020058
 800c958:	40020070 	.word	0x40020070
 800c95c:	40020088 	.word	0x40020088
 800c960:	400200a0 	.word	0x400200a0
 800c964:	400200b8 	.word	0x400200b8
 800c968:	40020410 	.word	0x40020410
 800c96c:	40020428 	.word	0x40020428
 800c970:	40020440 	.word	0x40020440
 800c974:	40020458 	.word	0x40020458
 800c978:	40020470 	.word	0x40020470
 800c97c:	40020488 	.word	0x40020488
 800c980:	400204a0 	.word	0x400204a0
 800c984:	400204b8 	.word	0x400204b8
 800c988:	58025408 	.word	0x58025408
 800c98c:	5802541c 	.word	0x5802541c
 800c990:	58025430 	.word	0x58025430
 800c994:	58025444 	.word	0x58025444
 800c998:	58025458 	.word	0x58025458
 800c99c:	5802546c 	.word	0x5802546c
 800c9a0:	58025480 	.word	0x58025480
 800c9a4:	58025494 	.word	0x58025494

0800c9a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d101      	bne.n	800c9ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e237      	b.n	800ce2a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	2b02      	cmp	r3, #2
 800c9c4:	d004      	beq.n	800c9d0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2280      	movs	r2, #128	@ 0x80
 800c9ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e22c      	b.n	800ce2a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a5c      	ldr	r2, [pc, #368]	@ (800cb48 <HAL_DMA_Abort_IT+0x1a0>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d04a      	beq.n	800ca70 <HAL_DMA_Abort_IT+0xc8>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a5b      	ldr	r2, [pc, #364]	@ (800cb4c <HAL_DMA_Abort_IT+0x1a4>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d045      	beq.n	800ca70 <HAL_DMA_Abort_IT+0xc8>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a59      	ldr	r2, [pc, #356]	@ (800cb50 <HAL_DMA_Abort_IT+0x1a8>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d040      	beq.n	800ca70 <HAL_DMA_Abort_IT+0xc8>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a58      	ldr	r2, [pc, #352]	@ (800cb54 <HAL_DMA_Abort_IT+0x1ac>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d03b      	beq.n	800ca70 <HAL_DMA_Abort_IT+0xc8>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a56      	ldr	r2, [pc, #344]	@ (800cb58 <HAL_DMA_Abort_IT+0x1b0>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d036      	beq.n	800ca70 <HAL_DMA_Abort_IT+0xc8>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a55      	ldr	r2, [pc, #340]	@ (800cb5c <HAL_DMA_Abort_IT+0x1b4>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d031      	beq.n	800ca70 <HAL_DMA_Abort_IT+0xc8>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a53      	ldr	r2, [pc, #332]	@ (800cb60 <HAL_DMA_Abort_IT+0x1b8>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d02c      	beq.n	800ca70 <HAL_DMA_Abort_IT+0xc8>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a52      	ldr	r2, [pc, #328]	@ (800cb64 <HAL_DMA_Abort_IT+0x1bc>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d027      	beq.n	800ca70 <HAL_DMA_Abort_IT+0xc8>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a50      	ldr	r2, [pc, #320]	@ (800cb68 <HAL_DMA_Abort_IT+0x1c0>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d022      	beq.n	800ca70 <HAL_DMA_Abort_IT+0xc8>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a4f      	ldr	r2, [pc, #316]	@ (800cb6c <HAL_DMA_Abort_IT+0x1c4>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d01d      	beq.n	800ca70 <HAL_DMA_Abort_IT+0xc8>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a4d      	ldr	r2, [pc, #308]	@ (800cb70 <HAL_DMA_Abort_IT+0x1c8>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d018      	beq.n	800ca70 <HAL_DMA_Abort_IT+0xc8>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4a4c      	ldr	r2, [pc, #304]	@ (800cb74 <HAL_DMA_Abort_IT+0x1cc>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d013      	beq.n	800ca70 <HAL_DMA_Abort_IT+0xc8>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a4a      	ldr	r2, [pc, #296]	@ (800cb78 <HAL_DMA_Abort_IT+0x1d0>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d00e      	beq.n	800ca70 <HAL_DMA_Abort_IT+0xc8>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4a49      	ldr	r2, [pc, #292]	@ (800cb7c <HAL_DMA_Abort_IT+0x1d4>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d009      	beq.n	800ca70 <HAL_DMA_Abort_IT+0xc8>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4a47      	ldr	r2, [pc, #284]	@ (800cb80 <HAL_DMA_Abort_IT+0x1d8>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d004      	beq.n	800ca70 <HAL_DMA_Abort_IT+0xc8>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a46      	ldr	r2, [pc, #280]	@ (800cb84 <HAL_DMA_Abort_IT+0x1dc>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d101      	bne.n	800ca74 <HAL_DMA_Abort_IT+0xcc>
 800ca70:	2301      	movs	r3, #1
 800ca72:	e000      	b.n	800ca76 <HAL_DMA_Abort_IT+0xce>
 800ca74:	2300      	movs	r3, #0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	f000 8086 	beq.w	800cb88 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2204      	movs	r2, #4
 800ca80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a2f      	ldr	r2, [pc, #188]	@ (800cb48 <HAL_DMA_Abort_IT+0x1a0>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d04a      	beq.n	800cb24 <HAL_DMA_Abort_IT+0x17c>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a2e      	ldr	r2, [pc, #184]	@ (800cb4c <HAL_DMA_Abort_IT+0x1a4>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d045      	beq.n	800cb24 <HAL_DMA_Abort_IT+0x17c>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a2c      	ldr	r2, [pc, #176]	@ (800cb50 <HAL_DMA_Abort_IT+0x1a8>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d040      	beq.n	800cb24 <HAL_DMA_Abort_IT+0x17c>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a2b      	ldr	r2, [pc, #172]	@ (800cb54 <HAL_DMA_Abort_IT+0x1ac>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d03b      	beq.n	800cb24 <HAL_DMA_Abort_IT+0x17c>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a29      	ldr	r2, [pc, #164]	@ (800cb58 <HAL_DMA_Abort_IT+0x1b0>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d036      	beq.n	800cb24 <HAL_DMA_Abort_IT+0x17c>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a28      	ldr	r2, [pc, #160]	@ (800cb5c <HAL_DMA_Abort_IT+0x1b4>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d031      	beq.n	800cb24 <HAL_DMA_Abort_IT+0x17c>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4a26      	ldr	r2, [pc, #152]	@ (800cb60 <HAL_DMA_Abort_IT+0x1b8>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d02c      	beq.n	800cb24 <HAL_DMA_Abort_IT+0x17c>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4a25      	ldr	r2, [pc, #148]	@ (800cb64 <HAL_DMA_Abort_IT+0x1bc>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d027      	beq.n	800cb24 <HAL_DMA_Abort_IT+0x17c>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a23      	ldr	r2, [pc, #140]	@ (800cb68 <HAL_DMA_Abort_IT+0x1c0>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d022      	beq.n	800cb24 <HAL_DMA_Abort_IT+0x17c>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4a22      	ldr	r2, [pc, #136]	@ (800cb6c <HAL_DMA_Abort_IT+0x1c4>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d01d      	beq.n	800cb24 <HAL_DMA_Abort_IT+0x17c>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a20      	ldr	r2, [pc, #128]	@ (800cb70 <HAL_DMA_Abort_IT+0x1c8>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d018      	beq.n	800cb24 <HAL_DMA_Abort_IT+0x17c>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a1f      	ldr	r2, [pc, #124]	@ (800cb74 <HAL_DMA_Abort_IT+0x1cc>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d013      	beq.n	800cb24 <HAL_DMA_Abort_IT+0x17c>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a1d      	ldr	r2, [pc, #116]	@ (800cb78 <HAL_DMA_Abort_IT+0x1d0>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d00e      	beq.n	800cb24 <HAL_DMA_Abort_IT+0x17c>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a1c      	ldr	r2, [pc, #112]	@ (800cb7c <HAL_DMA_Abort_IT+0x1d4>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d009      	beq.n	800cb24 <HAL_DMA_Abort_IT+0x17c>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a1a      	ldr	r2, [pc, #104]	@ (800cb80 <HAL_DMA_Abort_IT+0x1d8>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d004      	beq.n	800cb24 <HAL_DMA_Abort_IT+0x17c>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4a19      	ldr	r2, [pc, #100]	@ (800cb84 <HAL_DMA_Abort_IT+0x1dc>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d108      	bne.n	800cb36 <HAL_DMA_Abort_IT+0x18e>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f022 0201 	bic.w	r2, r2, #1
 800cb32:	601a      	str	r2, [r3, #0]
 800cb34:	e178      	b.n	800ce28 <HAL_DMA_Abort_IT+0x480>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f022 0201 	bic.w	r2, r2, #1
 800cb44:	601a      	str	r2, [r3, #0]
 800cb46:	e16f      	b.n	800ce28 <HAL_DMA_Abort_IT+0x480>
 800cb48:	40020010 	.word	0x40020010
 800cb4c:	40020028 	.word	0x40020028
 800cb50:	40020040 	.word	0x40020040
 800cb54:	40020058 	.word	0x40020058
 800cb58:	40020070 	.word	0x40020070
 800cb5c:	40020088 	.word	0x40020088
 800cb60:	400200a0 	.word	0x400200a0
 800cb64:	400200b8 	.word	0x400200b8
 800cb68:	40020410 	.word	0x40020410
 800cb6c:	40020428 	.word	0x40020428
 800cb70:	40020440 	.word	0x40020440
 800cb74:	40020458 	.word	0x40020458
 800cb78:	40020470 	.word	0x40020470
 800cb7c:	40020488 	.word	0x40020488
 800cb80:	400204a0 	.word	0x400204a0
 800cb84:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f022 020e 	bic.w	r2, r2, #14
 800cb96:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a6c      	ldr	r2, [pc, #432]	@ (800cd50 <HAL_DMA_Abort_IT+0x3a8>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d04a      	beq.n	800cc38 <HAL_DMA_Abort_IT+0x290>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a6b      	ldr	r2, [pc, #428]	@ (800cd54 <HAL_DMA_Abort_IT+0x3ac>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d045      	beq.n	800cc38 <HAL_DMA_Abort_IT+0x290>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a69      	ldr	r2, [pc, #420]	@ (800cd58 <HAL_DMA_Abort_IT+0x3b0>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d040      	beq.n	800cc38 <HAL_DMA_Abort_IT+0x290>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4a68      	ldr	r2, [pc, #416]	@ (800cd5c <HAL_DMA_Abort_IT+0x3b4>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d03b      	beq.n	800cc38 <HAL_DMA_Abort_IT+0x290>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a66      	ldr	r2, [pc, #408]	@ (800cd60 <HAL_DMA_Abort_IT+0x3b8>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d036      	beq.n	800cc38 <HAL_DMA_Abort_IT+0x290>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a65      	ldr	r2, [pc, #404]	@ (800cd64 <HAL_DMA_Abort_IT+0x3bc>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d031      	beq.n	800cc38 <HAL_DMA_Abort_IT+0x290>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a63      	ldr	r2, [pc, #396]	@ (800cd68 <HAL_DMA_Abort_IT+0x3c0>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d02c      	beq.n	800cc38 <HAL_DMA_Abort_IT+0x290>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a62      	ldr	r2, [pc, #392]	@ (800cd6c <HAL_DMA_Abort_IT+0x3c4>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d027      	beq.n	800cc38 <HAL_DMA_Abort_IT+0x290>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a60      	ldr	r2, [pc, #384]	@ (800cd70 <HAL_DMA_Abort_IT+0x3c8>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d022      	beq.n	800cc38 <HAL_DMA_Abort_IT+0x290>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a5f      	ldr	r2, [pc, #380]	@ (800cd74 <HAL_DMA_Abort_IT+0x3cc>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d01d      	beq.n	800cc38 <HAL_DMA_Abort_IT+0x290>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a5d      	ldr	r2, [pc, #372]	@ (800cd78 <HAL_DMA_Abort_IT+0x3d0>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d018      	beq.n	800cc38 <HAL_DMA_Abort_IT+0x290>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a5c      	ldr	r2, [pc, #368]	@ (800cd7c <HAL_DMA_Abort_IT+0x3d4>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d013      	beq.n	800cc38 <HAL_DMA_Abort_IT+0x290>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a5a      	ldr	r2, [pc, #360]	@ (800cd80 <HAL_DMA_Abort_IT+0x3d8>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d00e      	beq.n	800cc38 <HAL_DMA_Abort_IT+0x290>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	4a59      	ldr	r2, [pc, #356]	@ (800cd84 <HAL_DMA_Abort_IT+0x3dc>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d009      	beq.n	800cc38 <HAL_DMA_Abort_IT+0x290>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a57      	ldr	r2, [pc, #348]	@ (800cd88 <HAL_DMA_Abort_IT+0x3e0>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d004      	beq.n	800cc38 <HAL_DMA_Abort_IT+0x290>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4a56      	ldr	r2, [pc, #344]	@ (800cd8c <HAL_DMA_Abort_IT+0x3e4>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d108      	bne.n	800cc4a <HAL_DMA_Abort_IT+0x2a2>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f022 0201 	bic.w	r2, r2, #1
 800cc46:	601a      	str	r2, [r3, #0]
 800cc48:	e007      	b.n	800cc5a <HAL_DMA_Abort_IT+0x2b2>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f022 0201 	bic.w	r2, r2, #1
 800cc58:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a3c      	ldr	r2, [pc, #240]	@ (800cd50 <HAL_DMA_Abort_IT+0x3a8>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d072      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a3a      	ldr	r2, [pc, #232]	@ (800cd54 <HAL_DMA_Abort_IT+0x3ac>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d06d      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4a39      	ldr	r2, [pc, #228]	@ (800cd58 <HAL_DMA_Abort_IT+0x3b0>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d068      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a37      	ldr	r2, [pc, #220]	@ (800cd5c <HAL_DMA_Abort_IT+0x3b4>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d063      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4a36      	ldr	r2, [pc, #216]	@ (800cd60 <HAL_DMA_Abort_IT+0x3b8>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d05e      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4a34      	ldr	r2, [pc, #208]	@ (800cd64 <HAL_DMA_Abort_IT+0x3bc>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d059      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a33      	ldr	r2, [pc, #204]	@ (800cd68 <HAL_DMA_Abort_IT+0x3c0>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d054      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4a31      	ldr	r2, [pc, #196]	@ (800cd6c <HAL_DMA_Abort_IT+0x3c4>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d04f      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4a30      	ldr	r2, [pc, #192]	@ (800cd70 <HAL_DMA_Abort_IT+0x3c8>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d04a      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4a2e      	ldr	r2, [pc, #184]	@ (800cd74 <HAL_DMA_Abort_IT+0x3cc>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d045      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4a2d      	ldr	r2, [pc, #180]	@ (800cd78 <HAL_DMA_Abort_IT+0x3d0>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d040      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a2b      	ldr	r2, [pc, #172]	@ (800cd7c <HAL_DMA_Abort_IT+0x3d4>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d03b      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4a2a      	ldr	r2, [pc, #168]	@ (800cd80 <HAL_DMA_Abort_IT+0x3d8>)
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d036      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4a28      	ldr	r2, [pc, #160]	@ (800cd84 <HAL_DMA_Abort_IT+0x3dc>)
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d031      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4a27      	ldr	r2, [pc, #156]	@ (800cd88 <HAL_DMA_Abort_IT+0x3e0>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d02c      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a25      	ldr	r2, [pc, #148]	@ (800cd8c <HAL_DMA_Abort_IT+0x3e4>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d027      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	4a24      	ldr	r2, [pc, #144]	@ (800cd90 <HAL_DMA_Abort_IT+0x3e8>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d022      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a22      	ldr	r2, [pc, #136]	@ (800cd94 <HAL_DMA_Abort_IT+0x3ec>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d01d      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4a21      	ldr	r2, [pc, #132]	@ (800cd98 <HAL_DMA_Abort_IT+0x3f0>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d018      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a1f      	ldr	r2, [pc, #124]	@ (800cd9c <HAL_DMA_Abort_IT+0x3f4>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d013      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a1e      	ldr	r2, [pc, #120]	@ (800cda0 <HAL_DMA_Abort_IT+0x3f8>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d00e      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a1c      	ldr	r2, [pc, #112]	@ (800cda4 <HAL_DMA_Abort_IT+0x3fc>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d009      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4a1b      	ldr	r2, [pc, #108]	@ (800cda8 <HAL_DMA_Abort_IT+0x400>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d004      	beq.n	800cd4a <HAL_DMA_Abort_IT+0x3a2>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4a19      	ldr	r2, [pc, #100]	@ (800cdac <HAL_DMA_Abort_IT+0x404>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d132      	bne.n	800cdb0 <HAL_DMA_Abort_IT+0x408>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e031      	b.n	800cdb2 <HAL_DMA_Abort_IT+0x40a>
 800cd4e:	bf00      	nop
 800cd50:	40020010 	.word	0x40020010
 800cd54:	40020028 	.word	0x40020028
 800cd58:	40020040 	.word	0x40020040
 800cd5c:	40020058 	.word	0x40020058
 800cd60:	40020070 	.word	0x40020070
 800cd64:	40020088 	.word	0x40020088
 800cd68:	400200a0 	.word	0x400200a0
 800cd6c:	400200b8 	.word	0x400200b8
 800cd70:	40020410 	.word	0x40020410
 800cd74:	40020428 	.word	0x40020428
 800cd78:	40020440 	.word	0x40020440
 800cd7c:	40020458 	.word	0x40020458
 800cd80:	40020470 	.word	0x40020470
 800cd84:	40020488 	.word	0x40020488
 800cd88:	400204a0 	.word	0x400204a0
 800cd8c:	400204b8 	.word	0x400204b8
 800cd90:	58025408 	.word	0x58025408
 800cd94:	5802541c 	.word	0x5802541c
 800cd98:	58025430 	.word	0x58025430
 800cd9c:	58025444 	.word	0x58025444
 800cda0:	58025458 	.word	0x58025458
 800cda4:	5802546c 	.word	0x5802546c
 800cda8:	58025480 	.word	0x58025480
 800cdac:	58025494 	.word	0x58025494
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d028      	beq.n	800ce08 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cdba:	681a      	ldr	r2, [r3, #0]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cdc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cdc4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdca:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdd0:	f003 031f 	and.w	r3, r3, #31
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	409a      	lsls	r2, r3
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800cde4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d00c      	beq.n	800ce08 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdf8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cdfc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ce06:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d003      	beq.n	800ce28 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop

0800ce34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b08a      	sub	sp, #40	@ 0x28
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ce40:	4b67      	ldr	r3, [pc, #412]	@ (800cfe0 <HAL_DMA_IRQHandler+0x1ac>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4a67      	ldr	r2, [pc, #412]	@ (800cfe4 <HAL_DMA_IRQHandler+0x1b0>)
 800ce46:	fba2 2303 	umull	r2, r3, r2, r3
 800ce4a:	0a9b      	lsrs	r3, r3, #10
 800ce4c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce52:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce58:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800ce5a:	6a3b      	ldr	r3, [r7, #32]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4a5f      	ldr	r2, [pc, #380]	@ (800cfe8 <HAL_DMA_IRQHandler+0x1b4>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d04a      	beq.n	800cf06 <HAL_DMA_IRQHandler+0xd2>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a5d      	ldr	r2, [pc, #372]	@ (800cfec <HAL_DMA_IRQHandler+0x1b8>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d045      	beq.n	800cf06 <HAL_DMA_IRQHandler+0xd2>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4a5c      	ldr	r2, [pc, #368]	@ (800cff0 <HAL_DMA_IRQHandler+0x1bc>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d040      	beq.n	800cf06 <HAL_DMA_IRQHandler+0xd2>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a5a      	ldr	r2, [pc, #360]	@ (800cff4 <HAL_DMA_IRQHandler+0x1c0>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d03b      	beq.n	800cf06 <HAL_DMA_IRQHandler+0xd2>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a59      	ldr	r2, [pc, #356]	@ (800cff8 <HAL_DMA_IRQHandler+0x1c4>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d036      	beq.n	800cf06 <HAL_DMA_IRQHandler+0xd2>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a57      	ldr	r2, [pc, #348]	@ (800cffc <HAL_DMA_IRQHandler+0x1c8>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d031      	beq.n	800cf06 <HAL_DMA_IRQHandler+0xd2>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4a56      	ldr	r2, [pc, #344]	@ (800d000 <HAL_DMA_IRQHandler+0x1cc>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d02c      	beq.n	800cf06 <HAL_DMA_IRQHandler+0xd2>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a54      	ldr	r2, [pc, #336]	@ (800d004 <HAL_DMA_IRQHandler+0x1d0>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d027      	beq.n	800cf06 <HAL_DMA_IRQHandler+0xd2>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a53      	ldr	r2, [pc, #332]	@ (800d008 <HAL_DMA_IRQHandler+0x1d4>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d022      	beq.n	800cf06 <HAL_DMA_IRQHandler+0xd2>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a51      	ldr	r2, [pc, #324]	@ (800d00c <HAL_DMA_IRQHandler+0x1d8>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d01d      	beq.n	800cf06 <HAL_DMA_IRQHandler+0xd2>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a50      	ldr	r2, [pc, #320]	@ (800d010 <HAL_DMA_IRQHandler+0x1dc>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d018      	beq.n	800cf06 <HAL_DMA_IRQHandler+0xd2>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a4e      	ldr	r2, [pc, #312]	@ (800d014 <HAL_DMA_IRQHandler+0x1e0>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d013      	beq.n	800cf06 <HAL_DMA_IRQHandler+0xd2>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a4d      	ldr	r2, [pc, #308]	@ (800d018 <HAL_DMA_IRQHandler+0x1e4>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d00e      	beq.n	800cf06 <HAL_DMA_IRQHandler+0xd2>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a4b      	ldr	r2, [pc, #300]	@ (800d01c <HAL_DMA_IRQHandler+0x1e8>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d009      	beq.n	800cf06 <HAL_DMA_IRQHandler+0xd2>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a4a      	ldr	r2, [pc, #296]	@ (800d020 <HAL_DMA_IRQHandler+0x1ec>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d004      	beq.n	800cf06 <HAL_DMA_IRQHandler+0xd2>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a48      	ldr	r2, [pc, #288]	@ (800d024 <HAL_DMA_IRQHandler+0x1f0>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d101      	bne.n	800cf0a <HAL_DMA_IRQHandler+0xd6>
 800cf06:	2301      	movs	r3, #1
 800cf08:	e000      	b.n	800cf0c <HAL_DMA_IRQHandler+0xd8>
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f000 842b 	beq.w	800d768 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf16:	f003 031f 	and.w	r3, r3, #31
 800cf1a:	2208      	movs	r2, #8
 800cf1c:	409a      	lsls	r2, r3
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	4013      	ands	r3, r2
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	f000 80a2 	beq.w	800d06c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4a2e      	ldr	r2, [pc, #184]	@ (800cfe8 <HAL_DMA_IRQHandler+0x1b4>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d04a      	beq.n	800cfc8 <HAL_DMA_IRQHandler+0x194>
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	4a2d      	ldr	r2, [pc, #180]	@ (800cfec <HAL_DMA_IRQHandler+0x1b8>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d045      	beq.n	800cfc8 <HAL_DMA_IRQHandler+0x194>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a2b      	ldr	r2, [pc, #172]	@ (800cff0 <HAL_DMA_IRQHandler+0x1bc>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d040      	beq.n	800cfc8 <HAL_DMA_IRQHandler+0x194>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	4a2a      	ldr	r2, [pc, #168]	@ (800cff4 <HAL_DMA_IRQHandler+0x1c0>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d03b      	beq.n	800cfc8 <HAL_DMA_IRQHandler+0x194>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a28      	ldr	r2, [pc, #160]	@ (800cff8 <HAL_DMA_IRQHandler+0x1c4>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d036      	beq.n	800cfc8 <HAL_DMA_IRQHandler+0x194>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4a27      	ldr	r2, [pc, #156]	@ (800cffc <HAL_DMA_IRQHandler+0x1c8>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d031      	beq.n	800cfc8 <HAL_DMA_IRQHandler+0x194>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4a25      	ldr	r2, [pc, #148]	@ (800d000 <HAL_DMA_IRQHandler+0x1cc>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d02c      	beq.n	800cfc8 <HAL_DMA_IRQHandler+0x194>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4a24      	ldr	r2, [pc, #144]	@ (800d004 <HAL_DMA_IRQHandler+0x1d0>)
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d027      	beq.n	800cfc8 <HAL_DMA_IRQHandler+0x194>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4a22      	ldr	r2, [pc, #136]	@ (800d008 <HAL_DMA_IRQHandler+0x1d4>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d022      	beq.n	800cfc8 <HAL_DMA_IRQHandler+0x194>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4a21      	ldr	r2, [pc, #132]	@ (800d00c <HAL_DMA_IRQHandler+0x1d8>)
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d01d      	beq.n	800cfc8 <HAL_DMA_IRQHandler+0x194>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4a1f      	ldr	r2, [pc, #124]	@ (800d010 <HAL_DMA_IRQHandler+0x1dc>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d018      	beq.n	800cfc8 <HAL_DMA_IRQHandler+0x194>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4a1e      	ldr	r2, [pc, #120]	@ (800d014 <HAL_DMA_IRQHandler+0x1e0>)
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d013      	beq.n	800cfc8 <HAL_DMA_IRQHandler+0x194>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a1c      	ldr	r2, [pc, #112]	@ (800d018 <HAL_DMA_IRQHandler+0x1e4>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d00e      	beq.n	800cfc8 <HAL_DMA_IRQHandler+0x194>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4a1b      	ldr	r2, [pc, #108]	@ (800d01c <HAL_DMA_IRQHandler+0x1e8>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d009      	beq.n	800cfc8 <HAL_DMA_IRQHandler+0x194>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4a19      	ldr	r2, [pc, #100]	@ (800d020 <HAL_DMA_IRQHandler+0x1ec>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d004      	beq.n	800cfc8 <HAL_DMA_IRQHandler+0x194>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a18      	ldr	r2, [pc, #96]	@ (800d024 <HAL_DMA_IRQHandler+0x1f0>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d12f      	bne.n	800d028 <HAL_DMA_IRQHandler+0x1f4>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f003 0304 	and.w	r3, r3, #4
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	bf14      	ite	ne
 800cfd6:	2301      	movne	r3, #1
 800cfd8:	2300      	moveq	r3, #0
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	e02e      	b.n	800d03c <HAL_DMA_IRQHandler+0x208>
 800cfde:	bf00      	nop
 800cfe0:	24000004 	.word	0x24000004
 800cfe4:	1b4e81b5 	.word	0x1b4e81b5
 800cfe8:	40020010 	.word	0x40020010
 800cfec:	40020028 	.word	0x40020028
 800cff0:	40020040 	.word	0x40020040
 800cff4:	40020058 	.word	0x40020058
 800cff8:	40020070 	.word	0x40020070
 800cffc:	40020088 	.word	0x40020088
 800d000:	400200a0 	.word	0x400200a0
 800d004:	400200b8 	.word	0x400200b8
 800d008:	40020410 	.word	0x40020410
 800d00c:	40020428 	.word	0x40020428
 800d010:	40020440 	.word	0x40020440
 800d014:	40020458 	.word	0x40020458
 800d018:	40020470 	.word	0x40020470
 800d01c:	40020488 	.word	0x40020488
 800d020:	400204a0 	.word	0x400204a0
 800d024:	400204b8 	.word	0x400204b8
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f003 0308 	and.w	r3, r3, #8
 800d032:	2b00      	cmp	r3, #0
 800d034:	bf14      	ite	ne
 800d036:	2301      	movne	r3, #1
 800d038:	2300      	moveq	r3, #0
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d015      	beq.n	800d06c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f022 0204 	bic.w	r2, r2, #4
 800d04e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d054:	f003 031f 	and.w	r3, r3, #31
 800d058:	2208      	movs	r2, #8
 800d05a:	409a      	lsls	r2, r3
 800d05c:	6a3b      	ldr	r3, [r7, #32]
 800d05e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d064:	f043 0201 	orr.w	r2, r3, #1
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d070:	f003 031f 	and.w	r3, r3, #31
 800d074:	69ba      	ldr	r2, [r7, #24]
 800d076:	fa22 f303 	lsr.w	r3, r2, r3
 800d07a:	f003 0301 	and.w	r3, r3, #1
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d06e      	beq.n	800d160 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	4a69      	ldr	r2, [pc, #420]	@ (800d22c <HAL_DMA_IRQHandler+0x3f8>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d04a      	beq.n	800d122 <HAL_DMA_IRQHandler+0x2ee>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a67      	ldr	r2, [pc, #412]	@ (800d230 <HAL_DMA_IRQHandler+0x3fc>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d045      	beq.n	800d122 <HAL_DMA_IRQHandler+0x2ee>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a66      	ldr	r2, [pc, #408]	@ (800d234 <HAL_DMA_IRQHandler+0x400>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d040      	beq.n	800d122 <HAL_DMA_IRQHandler+0x2ee>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a64      	ldr	r2, [pc, #400]	@ (800d238 <HAL_DMA_IRQHandler+0x404>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d03b      	beq.n	800d122 <HAL_DMA_IRQHandler+0x2ee>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a63      	ldr	r2, [pc, #396]	@ (800d23c <HAL_DMA_IRQHandler+0x408>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d036      	beq.n	800d122 <HAL_DMA_IRQHandler+0x2ee>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a61      	ldr	r2, [pc, #388]	@ (800d240 <HAL_DMA_IRQHandler+0x40c>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d031      	beq.n	800d122 <HAL_DMA_IRQHandler+0x2ee>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4a60      	ldr	r2, [pc, #384]	@ (800d244 <HAL_DMA_IRQHandler+0x410>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d02c      	beq.n	800d122 <HAL_DMA_IRQHandler+0x2ee>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a5e      	ldr	r2, [pc, #376]	@ (800d248 <HAL_DMA_IRQHandler+0x414>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d027      	beq.n	800d122 <HAL_DMA_IRQHandler+0x2ee>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a5d      	ldr	r2, [pc, #372]	@ (800d24c <HAL_DMA_IRQHandler+0x418>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d022      	beq.n	800d122 <HAL_DMA_IRQHandler+0x2ee>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a5b      	ldr	r2, [pc, #364]	@ (800d250 <HAL_DMA_IRQHandler+0x41c>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d01d      	beq.n	800d122 <HAL_DMA_IRQHandler+0x2ee>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a5a      	ldr	r2, [pc, #360]	@ (800d254 <HAL_DMA_IRQHandler+0x420>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d018      	beq.n	800d122 <HAL_DMA_IRQHandler+0x2ee>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a58      	ldr	r2, [pc, #352]	@ (800d258 <HAL_DMA_IRQHandler+0x424>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d013      	beq.n	800d122 <HAL_DMA_IRQHandler+0x2ee>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4a57      	ldr	r2, [pc, #348]	@ (800d25c <HAL_DMA_IRQHandler+0x428>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d00e      	beq.n	800d122 <HAL_DMA_IRQHandler+0x2ee>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a55      	ldr	r2, [pc, #340]	@ (800d260 <HAL_DMA_IRQHandler+0x42c>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d009      	beq.n	800d122 <HAL_DMA_IRQHandler+0x2ee>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4a54      	ldr	r2, [pc, #336]	@ (800d264 <HAL_DMA_IRQHandler+0x430>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d004      	beq.n	800d122 <HAL_DMA_IRQHandler+0x2ee>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a52      	ldr	r2, [pc, #328]	@ (800d268 <HAL_DMA_IRQHandler+0x434>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d10a      	bne.n	800d138 <HAL_DMA_IRQHandler+0x304>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	695b      	ldr	r3, [r3, #20]
 800d128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	bf14      	ite	ne
 800d130:	2301      	movne	r3, #1
 800d132:	2300      	moveq	r3, #0
 800d134:	b2db      	uxtb	r3, r3
 800d136:	e003      	b.n	800d140 <HAL_DMA_IRQHandler+0x30c>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2300      	movs	r3, #0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d00d      	beq.n	800d160 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d148:	f003 031f 	and.w	r3, r3, #31
 800d14c:	2201      	movs	r2, #1
 800d14e:	409a      	lsls	r2, r3
 800d150:	6a3b      	ldr	r3, [r7, #32]
 800d152:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d158:	f043 0202 	orr.w	r2, r3, #2
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d164:	f003 031f 	and.w	r3, r3, #31
 800d168:	2204      	movs	r2, #4
 800d16a:	409a      	lsls	r2, r3
 800d16c:	69bb      	ldr	r3, [r7, #24]
 800d16e:	4013      	ands	r3, r2
 800d170:	2b00      	cmp	r3, #0
 800d172:	f000 808f 	beq.w	800d294 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4a2c      	ldr	r2, [pc, #176]	@ (800d22c <HAL_DMA_IRQHandler+0x3f8>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d04a      	beq.n	800d216 <HAL_DMA_IRQHandler+0x3e2>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4a2a      	ldr	r2, [pc, #168]	@ (800d230 <HAL_DMA_IRQHandler+0x3fc>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d045      	beq.n	800d216 <HAL_DMA_IRQHandler+0x3e2>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	4a29      	ldr	r2, [pc, #164]	@ (800d234 <HAL_DMA_IRQHandler+0x400>)
 800d190:	4293      	cmp	r3, r2
 800d192:	d040      	beq.n	800d216 <HAL_DMA_IRQHandler+0x3e2>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a27      	ldr	r2, [pc, #156]	@ (800d238 <HAL_DMA_IRQHandler+0x404>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d03b      	beq.n	800d216 <HAL_DMA_IRQHandler+0x3e2>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4a26      	ldr	r2, [pc, #152]	@ (800d23c <HAL_DMA_IRQHandler+0x408>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d036      	beq.n	800d216 <HAL_DMA_IRQHandler+0x3e2>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a24      	ldr	r2, [pc, #144]	@ (800d240 <HAL_DMA_IRQHandler+0x40c>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d031      	beq.n	800d216 <HAL_DMA_IRQHandler+0x3e2>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4a23      	ldr	r2, [pc, #140]	@ (800d244 <HAL_DMA_IRQHandler+0x410>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d02c      	beq.n	800d216 <HAL_DMA_IRQHandler+0x3e2>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a21      	ldr	r2, [pc, #132]	@ (800d248 <HAL_DMA_IRQHandler+0x414>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d027      	beq.n	800d216 <HAL_DMA_IRQHandler+0x3e2>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4a20      	ldr	r2, [pc, #128]	@ (800d24c <HAL_DMA_IRQHandler+0x418>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d022      	beq.n	800d216 <HAL_DMA_IRQHandler+0x3e2>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a1e      	ldr	r2, [pc, #120]	@ (800d250 <HAL_DMA_IRQHandler+0x41c>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d01d      	beq.n	800d216 <HAL_DMA_IRQHandler+0x3e2>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4a1d      	ldr	r2, [pc, #116]	@ (800d254 <HAL_DMA_IRQHandler+0x420>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d018      	beq.n	800d216 <HAL_DMA_IRQHandler+0x3e2>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a1b      	ldr	r2, [pc, #108]	@ (800d258 <HAL_DMA_IRQHandler+0x424>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d013      	beq.n	800d216 <HAL_DMA_IRQHandler+0x3e2>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	4a1a      	ldr	r2, [pc, #104]	@ (800d25c <HAL_DMA_IRQHandler+0x428>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d00e      	beq.n	800d216 <HAL_DMA_IRQHandler+0x3e2>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4a18      	ldr	r2, [pc, #96]	@ (800d260 <HAL_DMA_IRQHandler+0x42c>)
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d009      	beq.n	800d216 <HAL_DMA_IRQHandler+0x3e2>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	4a17      	ldr	r2, [pc, #92]	@ (800d264 <HAL_DMA_IRQHandler+0x430>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d004      	beq.n	800d216 <HAL_DMA_IRQHandler+0x3e2>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a15      	ldr	r2, [pc, #84]	@ (800d268 <HAL_DMA_IRQHandler+0x434>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d12a      	bne.n	800d26c <HAL_DMA_IRQHandler+0x438>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f003 0302 	and.w	r3, r3, #2
 800d220:	2b00      	cmp	r3, #0
 800d222:	bf14      	ite	ne
 800d224:	2301      	movne	r3, #1
 800d226:	2300      	moveq	r3, #0
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	e023      	b.n	800d274 <HAL_DMA_IRQHandler+0x440>
 800d22c:	40020010 	.word	0x40020010
 800d230:	40020028 	.word	0x40020028
 800d234:	40020040 	.word	0x40020040
 800d238:	40020058 	.word	0x40020058
 800d23c:	40020070 	.word	0x40020070
 800d240:	40020088 	.word	0x40020088
 800d244:	400200a0 	.word	0x400200a0
 800d248:	400200b8 	.word	0x400200b8
 800d24c:	40020410 	.word	0x40020410
 800d250:	40020428 	.word	0x40020428
 800d254:	40020440 	.word	0x40020440
 800d258:	40020458 	.word	0x40020458
 800d25c:	40020470 	.word	0x40020470
 800d260:	40020488 	.word	0x40020488
 800d264:	400204a0 	.word	0x400204a0
 800d268:	400204b8 	.word	0x400204b8
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2300      	movs	r3, #0
 800d274:	2b00      	cmp	r3, #0
 800d276:	d00d      	beq.n	800d294 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d27c:	f003 031f 	and.w	r3, r3, #31
 800d280:	2204      	movs	r2, #4
 800d282:	409a      	lsls	r2, r3
 800d284:	6a3b      	ldr	r3, [r7, #32]
 800d286:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d28c:	f043 0204 	orr.w	r2, r3, #4
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d298:	f003 031f 	and.w	r3, r3, #31
 800d29c:	2210      	movs	r2, #16
 800d29e:	409a      	lsls	r2, r3
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	4013      	ands	r3, r2
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f000 80a6 	beq.w	800d3f6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a85      	ldr	r2, [pc, #532]	@ (800d4c4 <HAL_DMA_IRQHandler+0x690>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d04a      	beq.n	800d34a <HAL_DMA_IRQHandler+0x516>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a83      	ldr	r2, [pc, #524]	@ (800d4c8 <HAL_DMA_IRQHandler+0x694>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d045      	beq.n	800d34a <HAL_DMA_IRQHandler+0x516>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a82      	ldr	r2, [pc, #520]	@ (800d4cc <HAL_DMA_IRQHandler+0x698>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d040      	beq.n	800d34a <HAL_DMA_IRQHandler+0x516>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a80      	ldr	r2, [pc, #512]	@ (800d4d0 <HAL_DMA_IRQHandler+0x69c>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d03b      	beq.n	800d34a <HAL_DMA_IRQHandler+0x516>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4a7f      	ldr	r2, [pc, #508]	@ (800d4d4 <HAL_DMA_IRQHandler+0x6a0>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d036      	beq.n	800d34a <HAL_DMA_IRQHandler+0x516>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a7d      	ldr	r2, [pc, #500]	@ (800d4d8 <HAL_DMA_IRQHandler+0x6a4>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d031      	beq.n	800d34a <HAL_DMA_IRQHandler+0x516>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a7c      	ldr	r2, [pc, #496]	@ (800d4dc <HAL_DMA_IRQHandler+0x6a8>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d02c      	beq.n	800d34a <HAL_DMA_IRQHandler+0x516>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4a7a      	ldr	r2, [pc, #488]	@ (800d4e0 <HAL_DMA_IRQHandler+0x6ac>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d027      	beq.n	800d34a <HAL_DMA_IRQHandler+0x516>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4a79      	ldr	r2, [pc, #484]	@ (800d4e4 <HAL_DMA_IRQHandler+0x6b0>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d022      	beq.n	800d34a <HAL_DMA_IRQHandler+0x516>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4a77      	ldr	r2, [pc, #476]	@ (800d4e8 <HAL_DMA_IRQHandler+0x6b4>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d01d      	beq.n	800d34a <HAL_DMA_IRQHandler+0x516>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4a76      	ldr	r2, [pc, #472]	@ (800d4ec <HAL_DMA_IRQHandler+0x6b8>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d018      	beq.n	800d34a <HAL_DMA_IRQHandler+0x516>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4a74      	ldr	r2, [pc, #464]	@ (800d4f0 <HAL_DMA_IRQHandler+0x6bc>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d013      	beq.n	800d34a <HAL_DMA_IRQHandler+0x516>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4a73      	ldr	r2, [pc, #460]	@ (800d4f4 <HAL_DMA_IRQHandler+0x6c0>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d00e      	beq.n	800d34a <HAL_DMA_IRQHandler+0x516>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4a71      	ldr	r2, [pc, #452]	@ (800d4f8 <HAL_DMA_IRQHandler+0x6c4>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d009      	beq.n	800d34a <HAL_DMA_IRQHandler+0x516>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a70      	ldr	r2, [pc, #448]	@ (800d4fc <HAL_DMA_IRQHandler+0x6c8>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d004      	beq.n	800d34a <HAL_DMA_IRQHandler+0x516>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4a6e      	ldr	r2, [pc, #440]	@ (800d500 <HAL_DMA_IRQHandler+0x6cc>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d10a      	bne.n	800d360 <HAL_DMA_IRQHandler+0x52c>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f003 0308 	and.w	r3, r3, #8
 800d354:	2b00      	cmp	r3, #0
 800d356:	bf14      	ite	ne
 800d358:	2301      	movne	r3, #1
 800d35a:	2300      	moveq	r3, #0
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	e009      	b.n	800d374 <HAL_DMA_IRQHandler+0x540>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f003 0304 	and.w	r3, r3, #4
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	bf14      	ite	ne
 800d36e:	2301      	movne	r3, #1
 800d370:	2300      	moveq	r3, #0
 800d372:	b2db      	uxtb	r3, r3
 800d374:	2b00      	cmp	r3, #0
 800d376:	d03e      	beq.n	800d3f6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d37c:	f003 031f 	and.w	r3, r3, #31
 800d380:	2210      	movs	r2, #16
 800d382:	409a      	lsls	r2, r3
 800d384:	6a3b      	ldr	r3, [r7, #32]
 800d386:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d392:	2b00      	cmp	r3, #0
 800d394:	d018      	beq.n	800d3c8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d108      	bne.n	800d3b6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d024      	beq.n	800d3f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	4798      	blx	r3
 800d3b4:	e01f      	b.n	800d3f6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d01b      	beq.n	800d3f6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	4798      	blx	r3
 800d3c6:	e016      	b.n	800d3f6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d107      	bne.n	800d3e6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f022 0208 	bic.w	r2, r2, #8
 800d3e4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d003      	beq.n	800d3f6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3fa:	f003 031f 	and.w	r3, r3, #31
 800d3fe:	2220      	movs	r2, #32
 800d400:	409a      	lsls	r2, r3
 800d402:	69bb      	ldr	r3, [r7, #24]
 800d404:	4013      	ands	r3, r2
 800d406:	2b00      	cmp	r3, #0
 800d408:	f000 8110 	beq.w	800d62c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4a2c      	ldr	r2, [pc, #176]	@ (800d4c4 <HAL_DMA_IRQHandler+0x690>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d04a      	beq.n	800d4ac <HAL_DMA_IRQHandler+0x678>
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	4a2b      	ldr	r2, [pc, #172]	@ (800d4c8 <HAL_DMA_IRQHandler+0x694>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d045      	beq.n	800d4ac <HAL_DMA_IRQHandler+0x678>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4a29      	ldr	r2, [pc, #164]	@ (800d4cc <HAL_DMA_IRQHandler+0x698>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d040      	beq.n	800d4ac <HAL_DMA_IRQHandler+0x678>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	4a28      	ldr	r2, [pc, #160]	@ (800d4d0 <HAL_DMA_IRQHandler+0x69c>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d03b      	beq.n	800d4ac <HAL_DMA_IRQHandler+0x678>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4a26      	ldr	r2, [pc, #152]	@ (800d4d4 <HAL_DMA_IRQHandler+0x6a0>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d036      	beq.n	800d4ac <HAL_DMA_IRQHandler+0x678>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	4a25      	ldr	r2, [pc, #148]	@ (800d4d8 <HAL_DMA_IRQHandler+0x6a4>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d031      	beq.n	800d4ac <HAL_DMA_IRQHandler+0x678>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a23      	ldr	r2, [pc, #140]	@ (800d4dc <HAL_DMA_IRQHandler+0x6a8>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d02c      	beq.n	800d4ac <HAL_DMA_IRQHandler+0x678>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4a22      	ldr	r2, [pc, #136]	@ (800d4e0 <HAL_DMA_IRQHandler+0x6ac>)
 800d458:	4293      	cmp	r3, r2
 800d45a:	d027      	beq.n	800d4ac <HAL_DMA_IRQHandler+0x678>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a20      	ldr	r2, [pc, #128]	@ (800d4e4 <HAL_DMA_IRQHandler+0x6b0>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d022      	beq.n	800d4ac <HAL_DMA_IRQHandler+0x678>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4a1f      	ldr	r2, [pc, #124]	@ (800d4e8 <HAL_DMA_IRQHandler+0x6b4>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d01d      	beq.n	800d4ac <HAL_DMA_IRQHandler+0x678>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a1d      	ldr	r2, [pc, #116]	@ (800d4ec <HAL_DMA_IRQHandler+0x6b8>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d018      	beq.n	800d4ac <HAL_DMA_IRQHandler+0x678>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4a1c      	ldr	r2, [pc, #112]	@ (800d4f0 <HAL_DMA_IRQHandler+0x6bc>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d013      	beq.n	800d4ac <HAL_DMA_IRQHandler+0x678>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4a1a      	ldr	r2, [pc, #104]	@ (800d4f4 <HAL_DMA_IRQHandler+0x6c0>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d00e      	beq.n	800d4ac <HAL_DMA_IRQHandler+0x678>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4a19      	ldr	r2, [pc, #100]	@ (800d4f8 <HAL_DMA_IRQHandler+0x6c4>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d009      	beq.n	800d4ac <HAL_DMA_IRQHandler+0x678>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4a17      	ldr	r2, [pc, #92]	@ (800d4fc <HAL_DMA_IRQHandler+0x6c8>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d004      	beq.n	800d4ac <HAL_DMA_IRQHandler+0x678>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4a16      	ldr	r2, [pc, #88]	@ (800d500 <HAL_DMA_IRQHandler+0x6cc>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d12b      	bne.n	800d504 <HAL_DMA_IRQHandler+0x6d0>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f003 0310 	and.w	r3, r3, #16
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	bf14      	ite	ne
 800d4ba:	2301      	movne	r3, #1
 800d4bc:	2300      	moveq	r3, #0
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	e02a      	b.n	800d518 <HAL_DMA_IRQHandler+0x6e4>
 800d4c2:	bf00      	nop
 800d4c4:	40020010 	.word	0x40020010
 800d4c8:	40020028 	.word	0x40020028
 800d4cc:	40020040 	.word	0x40020040
 800d4d0:	40020058 	.word	0x40020058
 800d4d4:	40020070 	.word	0x40020070
 800d4d8:	40020088 	.word	0x40020088
 800d4dc:	400200a0 	.word	0x400200a0
 800d4e0:	400200b8 	.word	0x400200b8
 800d4e4:	40020410 	.word	0x40020410
 800d4e8:	40020428 	.word	0x40020428
 800d4ec:	40020440 	.word	0x40020440
 800d4f0:	40020458 	.word	0x40020458
 800d4f4:	40020470 	.word	0x40020470
 800d4f8:	40020488 	.word	0x40020488
 800d4fc:	400204a0 	.word	0x400204a0
 800d500:	400204b8 	.word	0x400204b8
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f003 0302 	and.w	r3, r3, #2
 800d50e:	2b00      	cmp	r3, #0
 800d510:	bf14      	ite	ne
 800d512:	2301      	movne	r3, #1
 800d514:	2300      	moveq	r3, #0
 800d516:	b2db      	uxtb	r3, r3
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f000 8087 	beq.w	800d62c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d522:	f003 031f 	and.w	r3, r3, #31
 800d526:	2220      	movs	r2, #32
 800d528:	409a      	lsls	r2, r3
 800d52a:	6a3b      	ldr	r3, [r7, #32]
 800d52c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d534:	b2db      	uxtb	r3, r3
 800d536:	2b04      	cmp	r3, #4
 800d538:	d139      	bne.n	800d5ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f022 0216 	bic.w	r2, r2, #22
 800d548:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	695a      	ldr	r2, [r3, #20]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d558:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d103      	bne.n	800d56a <HAL_DMA_IRQHandler+0x736>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d566:	2b00      	cmp	r3, #0
 800d568:	d007      	beq.n	800d57a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f022 0208 	bic.w	r2, r2, #8
 800d578:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d57e:	f003 031f 	and.w	r3, r3, #31
 800d582:	223f      	movs	r2, #63	@ 0x3f
 800d584:	409a      	lsls	r2, r3
 800d586:	6a3b      	ldr	r3, [r7, #32]
 800d588:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2201      	movs	r2, #1
 800d58e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2200      	movs	r2, #0
 800d596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f000 834a 	beq.w	800dc38 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	4798      	blx	r3
          }
          return;
 800d5ac:	e344      	b.n	800dc38 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d018      	beq.n	800d5ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d108      	bne.n	800d5dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d02c      	beq.n	800d62c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	4798      	blx	r3
 800d5da:	e027      	b.n	800d62c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d023      	beq.n	800d62c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	4798      	blx	r3
 800d5ec:	e01e      	b.n	800d62c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d10f      	bne.n	800d61c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f022 0210 	bic.w	r2, r2, #16
 800d60a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2201      	movs	r2, #1
 800d610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2200      	movs	r2, #0
 800d618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d620:	2b00      	cmp	r3, #0
 800d622:	d003      	beq.n	800d62c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d630:	2b00      	cmp	r3, #0
 800d632:	f000 8306 	beq.w	800dc42 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d63a:	f003 0301 	and.w	r3, r3, #1
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f000 8088 	beq.w	800d754 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2204      	movs	r2, #4
 800d648:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4a7a      	ldr	r2, [pc, #488]	@ (800d83c <HAL_DMA_IRQHandler+0xa08>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d04a      	beq.n	800d6ec <HAL_DMA_IRQHandler+0x8b8>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a79      	ldr	r2, [pc, #484]	@ (800d840 <HAL_DMA_IRQHandler+0xa0c>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d045      	beq.n	800d6ec <HAL_DMA_IRQHandler+0x8b8>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4a77      	ldr	r2, [pc, #476]	@ (800d844 <HAL_DMA_IRQHandler+0xa10>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d040      	beq.n	800d6ec <HAL_DMA_IRQHandler+0x8b8>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	4a76      	ldr	r2, [pc, #472]	@ (800d848 <HAL_DMA_IRQHandler+0xa14>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d03b      	beq.n	800d6ec <HAL_DMA_IRQHandler+0x8b8>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4a74      	ldr	r2, [pc, #464]	@ (800d84c <HAL_DMA_IRQHandler+0xa18>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d036      	beq.n	800d6ec <HAL_DMA_IRQHandler+0x8b8>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4a73      	ldr	r2, [pc, #460]	@ (800d850 <HAL_DMA_IRQHandler+0xa1c>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d031      	beq.n	800d6ec <HAL_DMA_IRQHandler+0x8b8>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4a71      	ldr	r2, [pc, #452]	@ (800d854 <HAL_DMA_IRQHandler+0xa20>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d02c      	beq.n	800d6ec <HAL_DMA_IRQHandler+0x8b8>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4a70      	ldr	r2, [pc, #448]	@ (800d858 <HAL_DMA_IRQHandler+0xa24>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	d027      	beq.n	800d6ec <HAL_DMA_IRQHandler+0x8b8>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a6e      	ldr	r2, [pc, #440]	@ (800d85c <HAL_DMA_IRQHandler+0xa28>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d022      	beq.n	800d6ec <HAL_DMA_IRQHandler+0x8b8>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4a6d      	ldr	r2, [pc, #436]	@ (800d860 <HAL_DMA_IRQHandler+0xa2c>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d01d      	beq.n	800d6ec <HAL_DMA_IRQHandler+0x8b8>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4a6b      	ldr	r2, [pc, #428]	@ (800d864 <HAL_DMA_IRQHandler+0xa30>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d018      	beq.n	800d6ec <HAL_DMA_IRQHandler+0x8b8>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	4a6a      	ldr	r2, [pc, #424]	@ (800d868 <HAL_DMA_IRQHandler+0xa34>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d013      	beq.n	800d6ec <HAL_DMA_IRQHandler+0x8b8>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	4a68      	ldr	r2, [pc, #416]	@ (800d86c <HAL_DMA_IRQHandler+0xa38>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d00e      	beq.n	800d6ec <HAL_DMA_IRQHandler+0x8b8>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4a67      	ldr	r2, [pc, #412]	@ (800d870 <HAL_DMA_IRQHandler+0xa3c>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d009      	beq.n	800d6ec <HAL_DMA_IRQHandler+0x8b8>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a65      	ldr	r2, [pc, #404]	@ (800d874 <HAL_DMA_IRQHandler+0xa40>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d004      	beq.n	800d6ec <HAL_DMA_IRQHandler+0x8b8>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	4a64      	ldr	r2, [pc, #400]	@ (800d878 <HAL_DMA_IRQHandler+0xa44>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d108      	bne.n	800d6fe <HAL_DMA_IRQHandler+0x8ca>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f022 0201 	bic.w	r2, r2, #1
 800d6fa:	601a      	str	r2, [r3, #0]
 800d6fc:	e007      	b.n	800d70e <HAL_DMA_IRQHandler+0x8da>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f022 0201 	bic.w	r2, r2, #1
 800d70c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	3301      	adds	r3, #1
 800d712:	60fb      	str	r3, [r7, #12]
 800d714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d716:	429a      	cmp	r2, r3
 800d718:	d307      	bcc.n	800d72a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f003 0301 	and.w	r3, r3, #1
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1f2      	bne.n	800d70e <HAL_DMA_IRQHandler+0x8da>
 800d728:	e000      	b.n	800d72c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800d72a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f003 0301 	and.w	r3, r3, #1
 800d736:	2b00      	cmp	r3, #0
 800d738:	d004      	beq.n	800d744 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2203      	movs	r2, #3
 800d73e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800d742:	e003      	b.n	800d74c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2201      	movs	r2, #1
 800d748:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2200      	movs	r2, #0
 800d750:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d758:	2b00      	cmp	r3, #0
 800d75a:	f000 8272 	beq.w	800dc42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	4798      	blx	r3
 800d766:	e26c      	b.n	800dc42 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a43      	ldr	r2, [pc, #268]	@ (800d87c <HAL_DMA_IRQHandler+0xa48>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d022      	beq.n	800d7b8 <HAL_DMA_IRQHandler+0x984>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a42      	ldr	r2, [pc, #264]	@ (800d880 <HAL_DMA_IRQHandler+0xa4c>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d01d      	beq.n	800d7b8 <HAL_DMA_IRQHandler+0x984>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a40      	ldr	r2, [pc, #256]	@ (800d884 <HAL_DMA_IRQHandler+0xa50>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d018      	beq.n	800d7b8 <HAL_DMA_IRQHandler+0x984>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a3f      	ldr	r2, [pc, #252]	@ (800d888 <HAL_DMA_IRQHandler+0xa54>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d013      	beq.n	800d7b8 <HAL_DMA_IRQHandler+0x984>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a3d      	ldr	r2, [pc, #244]	@ (800d88c <HAL_DMA_IRQHandler+0xa58>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d00e      	beq.n	800d7b8 <HAL_DMA_IRQHandler+0x984>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4a3c      	ldr	r2, [pc, #240]	@ (800d890 <HAL_DMA_IRQHandler+0xa5c>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d009      	beq.n	800d7b8 <HAL_DMA_IRQHandler+0x984>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a3a      	ldr	r2, [pc, #232]	@ (800d894 <HAL_DMA_IRQHandler+0xa60>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d004      	beq.n	800d7b8 <HAL_DMA_IRQHandler+0x984>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4a39      	ldr	r2, [pc, #228]	@ (800d898 <HAL_DMA_IRQHandler+0xa64>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d101      	bne.n	800d7bc <HAL_DMA_IRQHandler+0x988>
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	e000      	b.n	800d7be <HAL_DMA_IRQHandler+0x98a>
 800d7bc:	2300      	movs	r3, #0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f000 823f 	beq.w	800dc42 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d7d0:	f003 031f 	and.w	r3, r3, #31
 800d7d4:	2204      	movs	r2, #4
 800d7d6:	409a      	lsls	r2, r3
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	4013      	ands	r3, r2
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	f000 80cd 	beq.w	800d97c <HAL_DMA_IRQHandler+0xb48>
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	f003 0304 	and.w	r3, r3, #4
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	f000 80c7 	beq.w	800d97c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d7f2:	f003 031f 	and.w	r3, r3, #31
 800d7f6:	2204      	movs	r2, #4
 800d7f8:	409a      	lsls	r2, r3
 800d7fa:	69fb      	ldr	r3, [r7, #28]
 800d7fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d804:	2b00      	cmp	r3, #0
 800d806:	d049      	beq.n	800d89c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d109      	bne.n	800d826 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d816:	2b00      	cmp	r3, #0
 800d818:	f000 8210 	beq.w	800dc3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d824:	e20a      	b.n	800dc3c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	f000 8206 	beq.w	800dc3c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d838:	e200      	b.n	800dc3c <HAL_DMA_IRQHandler+0xe08>
 800d83a:	bf00      	nop
 800d83c:	40020010 	.word	0x40020010
 800d840:	40020028 	.word	0x40020028
 800d844:	40020040 	.word	0x40020040
 800d848:	40020058 	.word	0x40020058
 800d84c:	40020070 	.word	0x40020070
 800d850:	40020088 	.word	0x40020088
 800d854:	400200a0 	.word	0x400200a0
 800d858:	400200b8 	.word	0x400200b8
 800d85c:	40020410 	.word	0x40020410
 800d860:	40020428 	.word	0x40020428
 800d864:	40020440 	.word	0x40020440
 800d868:	40020458 	.word	0x40020458
 800d86c:	40020470 	.word	0x40020470
 800d870:	40020488 	.word	0x40020488
 800d874:	400204a0 	.word	0x400204a0
 800d878:	400204b8 	.word	0x400204b8
 800d87c:	58025408 	.word	0x58025408
 800d880:	5802541c 	.word	0x5802541c
 800d884:	58025430 	.word	0x58025430
 800d888:	58025444 	.word	0x58025444
 800d88c:	58025458 	.word	0x58025458
 800d890:	5802546c 	.word	0x5802546c
 800d894:	58025480 	.word	0x58025480
 800d898:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	f003 0320 	and.w	r3, r3, #32
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d160      	bne.n	800d968 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4a7f      	ldr	r2, [pc, #508]	@ (800daa8 <HAL_DMA_IRQHandler+0xc74>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d04a      	beq.n	800d946 <HAL_DMA_IRQHandler+0xb12>
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4a7d      	ldr	r2, [pc, #500]	@ (800daac <HAL_DMA_IRQHandler+0xc78>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d045      	beq.n	800d946 <HAL_DMA_IRQHandler+0xb12>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4a7c      	ldr	r2, [pc, #496]	@ (800dab0 <HAL_DMA_IRQHandler+0xc7c>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d040      	beq.n	800d946 <HAL_DMA_IRQHandler+0xb12>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a7a      	ldr	r2, [pc, #488]	@ (800dab4 <HAL_DMA_IRQHandler+0xc80>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d03b      	beq.n	800d946 <HAL_DMA_IRQHandler+0xb12>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4a79      	ldr	r2, [pc, #484]	@ (800dab8 <HAL_DMA_IRQHandler+0xc84>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d036      	beq.n	800d946 <HAL_DMA_IRQHandler+0xb12>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a77      	ldr	r2, [pc, #476]	@ (800dabc <HAL_DMA_IRQHandler+0xc88>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d031      	beq.n	800d946 <HAL_DMA_IRQHandler+0xb12>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4a76      	ldr	r2, [pc, #472]	@ (800dac0 <HAL_DMA_IRQHandler+0xc8c>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d02c      	beq.n	800d946 <HAL_DMA_IRQHandler+0xb12>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4a74      	ldr	r2, [pc, #464]	@ (800dac4 <HAL_DMA_IRQHandler+0xc90>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d027      	beq.n	800d946 <HAL_DMA_IRQHandler+0xb12>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a73      	ldr	r2, [pc, #460]	@ (800dac8 <HAL_DMA_IRQHandler+0xc94>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d022      	beq.n	800d946 <HAL_DMA_IRQHandler+0xb12>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a71      	ldr	r2, [pc, #452]	@ (800dacc <HAL_DMA_IRQHandler+0xc98>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d01d      	beq.n	800d946 <HAL_DMA_IRQHandler+0xb12>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4a70      	ldr	r2, [pc, #448]	@ (800dad0 <HAL_DMA_IRQHandler+0xc9c>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d018      	beq.n	800d946 <HAL_DMA_IRQHandler+0xb12>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4a6e      	ldr	r2, [pc, #440]	@ (800dad4 <HAL_DMA_IRQHandler+0xca0>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d013      	beq.n	800d946 <HAL_DMA_IRQHandler+0xb12>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4a6d      	ldr	r2, [pc, #436]	@ (800dad8 <HAL_DMA_IRQHandler+0xca4>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d00e      	beq.n	800d946 <HAL_DMA_IRQHandler+0xb12>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4a6b      	ldr	r2, [pc, #428]	@ (800dadc <HAL_DMA_IRQHandler+0xca8>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d009      	beq.n	800d946 <HAL_DMA_IRQHandler+0xb12>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	4a6a      	ldr	r2, [pc, #424]	@ (800dae0 <HAL_DMA_IRQHandler+0xcac>)
 800d938:	4293      	cmp	r3, r2
 800d93a:	d004      	beq.n	800d946 <HAL_DMA_IRQHandler+0xb12>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4a68      	ldr	r2, [pc, #416]	@ (800dae4 <HAL_DMA_IRQHandler+0xcb0>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d108      	bne.n	800d958 <HAL_DMA_IRQHandler+0xb24>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f022 0208 	bic.w	r2, r2, #8
 800d954:	601a      	str	r2, [r3, #0]
 800d956:	e007      	b.n	800d968 <HAL_DMA_IRQHandler+0xb34>
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f022 0204 	bic.w	r2, r2, #4
 800d966:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f000 8165 	beq.w	800dc3c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d97a:	e15f      	b.n	800dc3c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d980:	f003 031f 	and.w	r3, r3, #31
 800d984:	2202      	movs	r2, #2
 800d986:	409a      	lsls	r2, r3
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	4013      	ands	r3, r2
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	f000 80c5 	beq.w	800db1c <HAL_DMA_IRQHandler+0xce8>
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	f003 0302 	and.w	r3, r3, #2
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f000 80bf 	beq.w	800db1c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d9a2:	f003 031f 	and.w	r3, r3, #31
 800d9a6:	2202      	movs	r2, #2
 800d9a8:	409a      	lsls	r2, r3
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d018      	beq.n	800d9ea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d109      	bne.n	800d9d6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	f000 813a 	beq.w	800dc40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d9d4:	e134      	b.n	800dc40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	f000 8130 	beq.w	800dc40 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d9e8:	e12a      	b.n	800dc40 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	f003 0320 	and.w	r3, r3, #32
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	f040 8089 	bne.w	800db08 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4a2b      	ldr	r2, [pc, #172]	@ (800daa8 <HAL_DMA_IRQHandler+0xc74>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d04a      	beq.n	800da96 <HAL_DMA_IRQHandler+0xc62>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a29      	ldr	r2, [pc, #164]	@ (800daac <HAL_DMA_IRQHandler+0xc78>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d045      	beq.n	800da96 <HAL_DMA_IRQHandler+0xc62>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	4a28      	ldr	r2, [pc, #160]	@ (800dab0 <HAL_DMA_IRQHandler+0xc7c>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d040      	beq.n	800da96 <HAL_DMA_IRQHandler+0xc62>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a26      	ldr	r2, [pc, #152]	@ (800dab4 <HAL_DMA_IRQHandler+0xc80>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d03b      	beq.n	800da96 <HAL_DMA_IRQHandler+0xc62>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	4a25      	ldr	r2, [pc, #148]	@ (800dab8 <HAL_DMA_IRQHandler+0xc84>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d036      	beq.n	800da96 <HAL_DMA_IRQHandler+0xc62>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a23      	ldr	r2, [pc, #140]	@ (800dabc <HAL_DMA_IRQHandler+0xc88>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d031      	beq.n	800da96 <HAL_DMA_IRQHandler+0xc62>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4a22      	ldr	r2, [pc, #136]	@ (800dac0 <HAL_DMA_IRQHandler+0xc8c>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d02c      	beq.n	800da96 <HAL_DMA_IRQHandler+0xc62>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a20      	ldr	r2, [pc, #128]	@ (800dac4 <HAL_DMA_IRQHandler+0xc90>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d027      	beq.n	800da96 <HAL_DMA_IRQHandler+0xc62>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4a1f      	ldr	r2, [pc, #124]	@ (800dac8 <HAL_DMA_IRQHandler+0xc94>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d022      	beq.n	800da96 <HAL_DMA_IRQHandler+0xc62>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4a1d      	ldr	r2, [pc, #116]	@ (800dacc <HAL_DMA_IRQHandler+0xc98>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d01d      	beq.n	800da96 <HAL_DMA_IRQHandler+0xc62>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4a1c      	ldr	r2, [pc, #112]	@ (800dad0 <HAL_DMA_IRQHandler+0xc9c>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d018      	beq.n	800da96 <HAL_DMA_IRQHandler+0xc62>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4a1a      	ldr	r2, [pc, #104]	@ (800dad4 <HAL_DMA_IRQHandler+0xca0>)
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d013      	beq.n	800da96 <HAL_DMA_IRQHandler+0xc62>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	4a19      	ldr	r2, [pc, #100]	@ (800dad8 <HAL_DMA_IRQHandler+0xca4>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d00e      	beq.n	800da96 <HAL_DMA_IRQHandler+0xc62>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a17      	ldr	r2, [pc, #92]	@ (800dadc <HAL_DMA_IRQHandler+0xca8>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d009      	beq.n	800da96 <HAL_DMA_IRQHandler+0xc62>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	4a16      	ldr	r2, [pc, #88]	@ (800dae0 <HAL_DMA_IRQHandler+0xcac>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d004      	beq.n	800da96 <HAL_DMA_IRQHandler+0xc62>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4a14      	ldr	r2, [pc, #80]	@ (800dae4 <HAL_DMA_IRQHandler+0xcb0>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d128      	bne.n	800dae8 <HAL_DMA_IRQHandler+0xcb4>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f022 0214 	bic.w	r2, r2, #20
 800daa4:	601a      	str	r2, [r3, #0]
 800daa6:	e027      	b.n	800daf8 <HAL_DMA_IRQHandler+0xcc4>
 800daa8:	40020010 	.word	0x40020010
 800daac:	40020028 	.word	0x40020028
 800dab0:	40020040 	.word	0x40020040
 800dab4:	40020058 	.word	0x40020058
 800dab8:	40020070 	.word	0x40020070
 800dabc:	40020088 	.word	0x40020088
 800dac0:	400200a0 	.word	0x400200a0
 800dac4:	400200b8 	.word	0x400200b8
 800dac8:	40020410 	.word	0x40020410
 800dacc:	40020428 	.word	0x40020428
 800dad0:	40020440 	.word	0x40020440
 800dad4:	40020458 	.word	0x40020458
 800dad8:	40020470 	.word	0x40020470
 800dadc:	40020488 	.word	0x40020488
 800dae0:	400204a0 	.word	0x400204a0
 800dae4:	400204b8 	.word	0x400204b8
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	681a      	ldr	r2, [r3, #0]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f022 020a 	bic.w	r2, r2, #10
 800daf6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2201      	movs	r2, #1
 800dafc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	f000 8097 	beq.w	800dc40 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800db1a:	e091      	b.n	800dc40 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db20:	f003 031f 	and.w	r3, r3, #31
 800db24:	2208      	movs	r2, #8
 800db26:	409a      	lsls	r2, r3
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	4013      	ands	r3, r2
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	f000 8088 	beq.w	800dc42 <HAL_DMA_IRQHandler+0xe0e>
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	f003 0308 	and.w	r3, r3, #8
 800db38:	2b00      	cmp	r3, #0
 800db3a:	f000 8082 	beq.w	800dc42 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	4a41      	ldr	r2, [pc, #260]	@ (800dc48 <HAL_DMA_IRQHandler+0xe14>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d04a      	beq.n	800dbde <HAL_DMA_IRQHandler+0xdaa>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a3f      	ldr	r2, [pc, #252]	@ (800dc4c <HAL_DMA_IRQHandler+0xe18>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d045      	beq.n	800dbde <HAL_DMA_IRQHandler+0xdaa>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4a3e      	ldr	r2, [pc, #248]	@ (800dc50 <HAL_DMA_IRQHandler+0xe1c>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d040      	beq.n	800dbde <HAL_DMA_IRQHandler+0xdaa>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a3c      	ldr	r2, [pc, #240]	@ (800dc54 <HAL_DMA_IRQHandler+0xe20>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d03b      	beq.n	800dbde <HAL_DMA_IRQHandler+0xdaa>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a3b      	ldr	r2, [pc, #236]	@ (800dc58 <HAL_DMA_IRQHandler+0xe24>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d036      	beq.n	800dbde <HAL_DMA_IRQHandler+0xdaa>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a39      	ldr	r2, [pc, #228]	@ (800dc5c <HAL_DMA_IRQHandler+0xe28>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d031      	beq.n	800dbde <HAL_DMA_IRQHandler+0xdaa>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a38      	ldr	r2, [pc, #224]	@ (800dc60 <HAL_DMA_IRQHandler+0xe2c>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d02c      	beq.n	800dbde <HAL_DMA_IRQHandler+0xdaa>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4a36      	ldr	r2, [pc, #216]	@ (800dc64 <HAL_DMA_IRQHandler+0xe30>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d027      	beq.n	800dbde <HAL_DMA_IRQHandler+0xdaa>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4a35      	ldr	r2, [pc, #212]	@ (800dc68 <HAL_DMA_IRQHandler+0xe34>)
 800db94:	4293      	cmp	r3, r2
 800db96:	d022      	beq.n	800dbde <HAL_DMA_IRQHandler+0xdaa>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	4a33      	ldr	r2, [pc, #204]	@ (800dc6c <HAL_DMA_IRQHandler+0xe38>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d01d      	beq.n	800dbde <HAL_DMA_IRQHandler+0xdaa>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	4a32      	ldr	r2, [pc, #200]	@ (800dc70 <HAL_DMA_IRQHandler+0xe3c>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d018      	beq.n	800dbde <HAL_DMA_IRQHandler+0xdaa>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a30      	ldr	r2, [pc, #192]	@ (800dc74 <HAL_DMA_IRQHandler+0xe40>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d013      	beq.n	800dbde <HAL_DMA_IRQHandler+0xdaa>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4a2f      	ldr	r2, [pc, #188]	@ (800dc78 <HAL_DMA_IRQHandler+0xe44>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d00e      	beq.n	800dbde <HAL_DMA_IRQHandler+0xdaa>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4a2d      	ldr	r2, [pc, #180]	@ (800dc7c <HAL_DMA_IRQHandler+0xe48>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d009      	beq.n	800dbde <HAL_DMA_IRQHandler+0xdaa>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4a2c      	ldr	r2, [pc, #176]	@ (800dc80 <HAL_DMA_IRQHandler+0xe4c>)
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d004      	beq.n	800dbde <HAL_DMA_IRQHandler+0xdaa>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4a2a      	ldr	r2, [pc, #168]	@ (800dc84 <HAL_DMA_IRQHandler+0xe50>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d108      	bne.n	800dbf0 <HAL_DMA_IRQHandler+0xdbc>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f022 021c 	bic.w	r2, r2, #28
 800dbec:	601a      	str	r2, [r3, #0]
 800dbee:	e007      	b.n	800dc00 <HAL_DMA_IRQHandler+0xdcc>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	681a      	ldr	r2, [r3, #0]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f022 020e 	bic.w	r2, r2, #14
 800dbfe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dc04:	f003 031f 	and.w	r3, r3, #31
 800dc08:	2201      	movs	r2, #1
 800dc0a:	409a      	lsls	r2, r3
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2201      	movs	r2, #1
 800dc14:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2201      	movs	r2, #1
 800dc1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2200      	movs	r2, #0
 800dc22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d009      	beq.n	800dc42 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	4798      	blx	r3
 800dc36:	e004      	b.n	800dc42 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800dc38:	bf00      	nop
 800dc3a:	e002      	b.n	800dc42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dc3c:	bf00      	nop
 800dc3e:	e000      	b.n	800dc42 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dc40:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800dc42:	3728      	adds	r7, #40	@ 0x28
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	40020010 	.word	0x40020010
 800dc4c:	40020028 	.word	0x40020028
 800dc50:	40020040 	.word	0x40020040
 800dc54:	40020058 	.word	0x40020058
 800dc58:	40020070 	.word	0x40020070
 800dc5c:	40020088 	.word	0x40020088
 800dc60:	400200a0 	.word	0x400200a0
 800dc64:	400200b8 	.word	0x400200b8
 800dc68:	40020410 	.word	0x40020410
 800dc6c:	40020428 	.word	0x40020428
 800dc70:	40020440 	.word	0x40020440
 800dc74:	40020458 	.word	0x40020458
 800dc78:	40020470 	.word	0x40020470
 800dc7c:	40020488 	.word	0x40020488
 800dc80:	400204a0 	.word	0x400204a0
 800dc84:	400204b8 	.word	0x400204b8

0800dc88 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dc96:	b2db      	uxtb	r3, r3
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	370c      	adds	r7, #12
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr

0800dca4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	370c      	adds	r7, #12
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b087      	sub	sp, #28
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	607a      	str	r2, [r7, #4]
 800dcc8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcce:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcd4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4a7f      	ldr	r2, [pc, #508]	@ (800ded8 <DMA_SetConfig+0x21c>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d072      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4a7d      	ldr	r2, [pc, #500]	@ (800dedc <DMA_SetConfig+0x220>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d06d      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4a7c      	ldr	r2, [pc, #496]	@ (800dee0 <DMA_SetConfig+0x224>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d068      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	4a7a      	ldr	r2, [pc, #488]	@ (800dee4 <DMA_SetConfig+0x228>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d063      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	4a79      	ldr	r2, [pc, #484]	@ (800dee8 <DMA_SetConfig+0x22c>)
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d05e      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	4a77      	ldr	r2, [pc, #476]	@ (800deec <DMA_SetConfig+0x230>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d059      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	4a76      	ldr	r2, [pc, #472]	@ (800def0 <DMA_SetConfig+0x234>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d054      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4a74      	ldr	r2, [pc, #464]	@ (800def4 <DMA_SetConfig+0x238>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d04f      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	4a73      	ldr	r2, [pc, #460]	@ (800def8 <DMA_SetConfig+0x23c>)
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d04a      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4a71      	ldr	r2, [pc, #452]	@ (800defc <DMA_SetConfig+0x240>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d045      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	4a70      	ldr	r2, [pc, #448]	@ (800df00 <DMA_SetConfig+0x244>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d040      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4a6e      	ldr	r2, [pc, #440]	@ (800df04 <DMA_SetConfig+0x248>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d03b      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	4a6d      	ldr	r2, [pc, #436]	@ (800df08 <DMA_SetConfig+0x24c>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d036      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4a6b      	ldr	r2, [pc, #428]	@ (800df0c <DMA_SetConfig+0x250>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d031      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	4a6a      	ldr	r2, [pc, #424]	@ (800df10 <DMA_SetConfig+0x254>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d02c      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4a68      	ldr	r2, [pc, #416]	@ (800df14 <DMA_SetConfig+0x258>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d027      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4a67      	ldr	r2, [pc, #412]	@ (800df18 <DMA_SetConfig+0x25c>)
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d022      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4a65      	ldr	r2, [pc, #404]	@ (800df1c <DMA_SetConfig+0x260>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d01d      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4a64      	ldr	r2, [pc, #400]	@ (800df20 <DMA_SetConfig+0x264>)
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d018      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	4a62      	ldr	r2, [pc, #392]	@ (800df24 <DMA_SetConfig+0x268>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d013      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4a61      	ldr	r2, [pc, #388]	@ (800df28 <DMA_SetConfig+0x26c>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d00e      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	4a5f      	ldr	r2, [pc, #380]	@ (800df2c <DMA_SetConfig+0x270>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d009      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	4a5e      	ldr	r2, [pc, #376]	@ (800df30 <DMA_SetConfig+0x274>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d004      	beq.n	800ddc6 <DMA_SetConfig+0x10a>
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a5c      	ldr	r2, [pc, #368]	@ (800df34 <DMA_SetConfig+0x278>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d101      	bne.n	800ddca <DMA_SetConfig+0x10e>
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	e000      	b.n	800ddcc <DMA_SetConfig+0x110>
 800ddca:	2300      	movs	r3, #0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d00d      	beq.n	800ddec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ddd4:	68fa      	ldr	r2, [r7, #12]
 800ddd6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ddd8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d004      	beq.n	800ddec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dde6:	68fa      	ldr	r2, [r7, #12]
 800dde8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ddea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4a39      	ldr	r2, [pc, #228]	@ (800ded8 <DMA_SetConfig+0x21c>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d04a      	beq.n	800de8c <DMA_SetConfig+0x1d0>
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4a38      	ldr	r2, [pc, #224]	@ (800dedc <DMA_SetConfig+0x220>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d045      	beq.n	800de8c <DMA_SetConfig+0x1d0>
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4a36      	ldr	r2, [pc, #216]	@ (800dee0 <DMA_SetConfig+0x224>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d040      	beq.n	800de8c <DMA_SetConfig+0x1d0>
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4a35      	ldr	r2, [pc, #212]	@ (800dee4 <DMA_SetConfig+0x228>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d03b      	beq.n	800de8c <DMA_SetConfig+0x1d0>
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	4a33      	ldr	r2, [pc, #204]	@ (800dee8 <DMA_SetConfig+0x22c>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d036      	beq.n	800de8c <DMA_SetConfig+0x1d0>
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	4a32      	ldr	r2, [pc, #200]	@ (800deec <DMA_SetConfig+0x230>)
 800de24:	4293      	cmp	r3, r2
 800de26:	d031      	beq.n	800de8c <DMA_SetConfig+0x1d0>
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	4a30      	ldr	r2, [pc, #192]	@ (800def0 <DMA_SetConfig+0x234>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d02c      	beq.n	800de8c <DMA_SetConfig+0x1d0>
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	4a2f      	ldr	r2, [pc, #188]	@ (800def4 <DMA_SetConfig+0x238>)
 800de38:	4293      	cmp	r3, r2
 800de3a:	d027      	beq.n	800de8c <DMA_SetConfig+0x1d0>
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4a2d      	ldr	r2, [pc, #180]	@ (800def8 <DMA_SetConfig+0x23c>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d022      	beq.n	800de8c <DMA_SetConfig+0x1d0>
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	4a2c      	ldr	r2, [pc, #176]	@ (800defc <DMA_SetConfig+0x240>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d01d      	beq.n	800de8c <DMA_SetConfig+0x1d0>
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	4a2a      	ldr	r2, [pc, #168]	@ (800df00 <DMA_SetConfig+0x244>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d018      	beq.n	800de8c <DMA_SetConfig+0x1d0>
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4a29      	ldr	r2, [pc, #164]	@ (800df04 <DMA_SetConfig+0x248>)
 800de60:	4293      	cmp	r3, r2
 800de62:	d013      	beq.n	800de8c <DMA_SetConfig+0x1d0>
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4a27      	ldr	r2, [pc, #156]	@ (800df08 <DMA_SetConfig+0x24c>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d00e      	beq.n	800de8c <DMA_SetConfig+0x1d0>
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	4a26      	ldr	r2, [pc, #152]	@ (800df0c <DMA_SetConfig+0x250>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d009      	beq.n	800de8c <DMA_SetConfig+0x1d0>
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	4a24      	ldr	r2, [pc, #144]	@ (800df10 <DMA_SetConfig+0x254>)
 800de7e:	4293      	cmp	r3, r2
 800de80:	d004      	beq.n	800de8c <DMA_SetConfig+0x1d0>
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	4a23      	ldr	r2, [pc, #140]	@ (800df14 <DMA_SetConfig+0x258>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	d101      	bne.n	800de90 <DMA_SetConfig+0x1d4>
 800de8c:	2301      	movs	r3, #1
 800de8e:	e000      	b.n	800de92 <DMA_SetConfig+0x1d6>
 800de90:	2300      	movs	r3, #0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d059      	beq.n	800df4a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de9a:	f003 031f 	and.w	r3, r3, #31
 800de9e:	223f      	movs	r2, #63	@ 0x3f
 800dea0:	409a      	lsls	r2, r3
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800deb4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	683a      	ldr	r2, [r7, #0]
 800debc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	689b      	ldr	r3, [r3, #8]
 800dec2:	2b40      	cmp	r3, #64	@ 0x40
 800dec4:	d138      	bne.n	800df38 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	68ba      	ldr	r2, [r7, #8]
 800ded4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ded6:	e086      	b.n	800dfe6 <DMA_SetConfig+0x32a>
 800ded8:	40020010 	.word	0x40020010
 800dedc:	40020028 	.word	0x40020028
 800dee0:	40020040 	.word	0x40020040
 800dee4:	40020058 	.word	0x40020058
 800dee8:	40020070 	.word	0x40020070
 800deec:	40020088 	.word	0x40020088
 800def0:	400200a0 	.word	0x400200a0
 800def4:	400200b8 	.word	0x400200b8
 800def8:	40020410 	.word	0x40020410
 800defc:	40020428 	.word	0x40020428
 800df00:	40020440 	.word	0x40020440
 800df04:	40020458 	.word	0x40020458
 800df08:	40020470 	.word	0x40020470
 800df0c:	40020488 	.word	0x40020488
 800df10:	400204a0 	.word	0x400204a0
 800df14:	400204b8 	.word	0x400204b8
 800df18:	58025408 	.word	0x58025408
 800df1c:	5802541c 	.word	0x5802541c
 800df20:	58025430 	.word	0x58025430
 800df24:	58025444 	.word	0x58025444
 800df28:	58025458 	.word	0x58025458
 800df2c:	5802546c 	.word	0x5802546c
 800df30:	58025480 	.word	0x58025480
 800df34:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	68ba      	ldr	r2, [r7, #8]
 800df3e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	687a      	ldr	r2, [r7, #4]
 800df46:	60da      	str	r2, [r3, #12]
}
 800df48:	e04d      	b.n	800dfe6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	4a29      	ldr	r2, [pc, #164]	@ (800dff4 <DMA_SetConfig+0x338>)
 800df50:	4293      	cmp	r3, r2
 800df52:	d022      	beq.n	800df9a <DMA_SetConfig+0x2de>
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a27      	ldr	r2, [pc, #156]	@ (800dff8 <DMA_SetConfig+0x33c>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d01d      	beq.n	800df9a <DMA_SetConfig+0x2de>
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a26      	ldr	r2, [pc, #152]	@ (800dffc <DMA_SetConfig+0x340>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d018      	beq.n	800df9a <DMA_SetConfig+0x2de>
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4a24      	ldr	r2, [pc, #144]	@ (800e000 <DMA_SetConfig+0x344>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d013      	beq.n	800df9a <DMA_SetConfig+0x2de>
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	4a23      	ldr	r2, [pc, #140]	@ (800e004 <DMA_SetConfig+0x348>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d00e      	beq.n	800df9a <DMA_SetConfig+0x2de>
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a21      	ldr	r2, [pc, #132]	@ (800e008 <DMA_SetConfig+0x34c>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d009      	beq.n	800df9a <DMA_SetConfig+0x2de>
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4a20      	ldr	r2, [pc, #128]	@ (800e00c <DMA_SetConfig+0x350>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d004      	beq.n	800df9a <DMA_SetConfig+0x2de>
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4a1e      	ldr	r2, [pc, #120]	@ (800e010 <DMA_SetConfig+0x354>)
 800df96:	4293      	cmp	r3, r2
 800df98:	d101      	bne.n	800df9e <DMA_SetConfig+0x2e2>
 800df9a:	2301      	movs	r3, #1
 800df9c:	e000      	b.n	800dfa0 <DMA_SetConfig+0x2e4>
 800df9e:	2300      	movs	r3, #0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d020      	beq.n	800dfe6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dfa8:	f003 031f 	and.w	r3, r3, #31
 800dfac:	2201      	movs	r2, #1
 800dfae:	409a      	lsls	r2, r3
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	683a      	ldr	r2, [r7, #0]
 800dfba:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	689b      	ldr	r3, [r3, #8]
 800dfc0:	2b40      	cmp	r3, #64	@ 0x40
 800dfc2:	d108      	bne.n	800dfd6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	68ba      	ldr	r2, [r7, #8]
 800dfd2:	60da      	str	r2, [r3, #12]
}
 800dfd4:	e007      	b.n	800dfe6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	68ba      	ldr	r2, [r7, #8]
 800dfdc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	60da      	str	r2, [r3, #12]
}
 800dfe6:	bf00      	nop
 800dfe8:	371c      	adds	r7, #28
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop
 800dff4:	58025408 	.word	0x58025408
 800dff8:	5802541c 	.word	0x5802541c
 800dffc:	58025430 	.word	0x58025430
 800e000:	58025444 	.word	0x58025444
 800e004:	58025458 	.word	0x58025458
 800e008:	5802546c 	.word	0x5802546c
 800e00c:	58025480 	.word	0x58025480
 800e010:	58025494 	.word	0x58025494

0800e014 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e014:	b480      	push	{r7}
 800e016:	b085      	sub	sp, #20
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a42      	ldr	r2, [pc, #264]	@ (800e12c <DMA_CalcBaseAndBitshift+0x118>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d04a      	beq.n	800e0bc <DMA_CalcBaseAndBitshift+0xa8>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4a41      	ldr	r2, [pc, #260]	@ (800e130 <DMA_CalcBaseAndBitshift+0x11c>)
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d045      	beq.n	800e0bc <DMA_CalcBaseAndBitshift+0xa8>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4a3f      	ldr	r2, [pc, #252]	@ (800e134 <DMA_CalcBaseAndBitshift+0x120>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d040      	beq.n	800e0bc <DMA_CalcBaseAndBitshift+0xa8>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	4a3e      	ldr	r2, [pc, #248]	@ (800e138 <DMA_CalcBaseAndBitshift+0x124>)
 800e040:	4293      	cmp	r3, r2
 800e042:	d03b      	beq.n	800e0bc <DMA_CalcBaseAndBitshift+0xa8>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	4a3c      	ldr	r2, [pc, #240]	@ (800e13c <DMA_CalcBaseAndBitshift+0x128>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d036      	beq.n	800e0bc <DMA_CalcBaseAndBitshift+0xa8>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4a3b      	ldr	r2, [pc, #236]	@ (800e140 <DMA_CalcBaseAndBitshift+0x12c>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d031      	beq.n	800e0bc <DMA_CalcBaseAndBitshift+0xa8>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	4a39      	ldr	r2, [pc, #228]	@ (800e144 <DMA_CalcBaseAndBitshift+0x130>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d02c      	beq.n	800e0bc <DMA_CalcBaseAndBitshift+0xa8>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	4a38      	ldr	r2, [pc, #224]	@ (800e148 <DMA_CalcBaseAndBitshift+0x134>)
 800e068:	4293      	cmp	r3, r2
 800e06a:	d027      	beq.n	800e0bc <DMA_CalcBaseAndBitshift+0xa8>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4a36      	ldr	r2, [pc, #216]	@ (800e14c <DMA_CalcBaseAndBitshift+0x138>)
 800e072:	4293      	cmp	r3, r2
 800e074:	d022      	beq.n	800e0bc <DMA_CalcBaseAndBitshift+0xa8>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a35      	ldr	r2, [pc, #212]	@ (800e150 <DMA_CalcBaseAndBitshift+0x13c>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d01d      	beq.n	800e0bc <DMA_CalcBaseAndBitshift+0xa8>
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4a33      	ldr	r2, [pc, #204]	@ (800e154 <DMA_CalcBaseAndBitshift+0x140>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d018      	beq.n	800e0bc <DMA_CalcBaseAndBitshift+0xa8>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4a32      	ldr	r2, [pc, #200]	@ (800e158 <DMA_CalcBaseAndBitshift+0x144>)
 800e090:	4293      	cmp	r3, r2
 800e092:	d013      	beq.n	800e0bc <DMA_CalcBaseAndBitshift+0xa8>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4a30      	ldr	r2, [pc, #192]	@ (800e15c <DMA_CalcBaseAndBitshift+0x148>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d00e      	beq.n	800e0bc <DMA_CalcBaseAndBitshift+0xa8>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4a2f      	ldr	r2, [pc, #188]	@ (800e160 <DMA_CalcBaseAndBitshift+0x14c>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d009      	beq.n	800e0bc <DMA_CalcBaseAndBitshift+0xa8>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4a2d      	ldr	r2, [pc, #180]	@ (800e164 <DMA_CalcBaseAndBitshift+0x150>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d004      	beq.n	800e0bc <DMA_CalcBaseAndBitshift+0xa8>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4a2c      	ldr	r2, [pc, #176]	@ (800e168 <DMA_CalcBaseAndBitshift+0x154>)
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d101      	bne.n	800e0c0 <DMA_CalcBaseAndBitshift+0xac>
 800e0bc:	2301      	movs	r3, #1
 800e0be:	e000      	b.n	800e0c2 <DMA_CalcBaseAndBitshift+0xae>
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d024      	beq.n	800e110 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	3b10      	subs	r3, #16
 800e0ce:	4a27      	ldr	r2, [pc, #156]	@ (800e16c <DMA_CalcBaseAndBitshift+0x158>)
 800e0d0:	fba2 2303 	umull	r2, r3, r2, r3
 800e0d4:	091b      	lsrs	r3, r3, #4
 800e0d6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f003 0307 	and.w	r3, r3, #7
 800e0de:	4a24      	ldr	r2, [pc, #144]	@ (800e170 <DMA_CalcBaseAndBitshift+0x15c>)
 800e0e0:	5cd3      	ldrb	r3, [r2, r3]
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2b03      	cmp	r3, #3
 800e0ec:	d908      	bls.n	800e100 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	4b1f      	ldr	r3, [pc, #124]	@ (800e174 <DMA_CalcBaseAndBitshift+0x160>)
 800e0f6:	4013      	ands	r3, r2
 800e0f8:	1d1a      	adds	r2, r3, #4
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	659a      	str	r2, [r3, #88]	@ 0x58
 800e0fe:	e00d      	b.n	800e11c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	461a      	mov	r2, r3
 800e106:	4b1b      	ldr	r3, [pc, #108]	@ (800e174 <DMA_CalcBaseAndBitshift+0x160>)
 800e108:	4013      	ands	r3, r2
 800e10a:	687a      	ldr	r2, [r7, #4]
 800e10c:	6593      	str	r3, [r2, #88]	@ 0x58
 800e10e:	e005      	b.n	800e11c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800e120:	4618      	mov	r0, r3
 800e122:	3714      	adds	r7, #20
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr
 800e12c:	40020010 	.word	0x40020010
 800e130:	40020028 	.word	0x40020028
 800e134:	40020040 	.word	0x40020040
 800e138:	40020058 	.word	0x40020058
 800e13c:	40020070 	.word	0x40020070
 800e140:	40020088 	.word	0x40020088
 800e144:	400200a0 	.word	0x400200a0
 800e148:	400200b8 	.word	0x400200b8
 800e14c:	40020410 	.word	0x40020410
 800e150:	40020428 	.word	0x40020428
 800e154:	40020440 	.word	0x40020440
 800e158:	40020458 	.word	0x40020458
 800e15c:	40020470 	.word	0x40020470
 800e160:	40020488 	.word	0x40020488
 800e164:	400204a0 	.word	0x400204a0
 800e168:	400204b8 	.word	0x400204b8
 800e16c:	aaaaaaab 	.word	0xaaaaaaab
 800e170:	0801ea74 	.word	0x0801ea74
 800e174:	fffffc00 	.word	0xfffffc00

0800e178 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800e178:	b480      	push	{r7}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e180:	2300      	movs	r3, #0
 800e182:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	699b      	ldr	r3, [r3, #24]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d120      	bne.n	800e1ce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e190:	2b03      	cmp	r3, #3
 800e192:	d858      	bhi.n	800e246 <DMA_CheckFifoParam+0xce>
 800e194:	a201      	add	r2, pc, #4	@ (adr r2, 800e19c <DMA_CheckFifoParam+0x24>)
 800e196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e19a:	bf00      	nop
 800e19c:	0800e1ad 	.word	0x0800e1ad
 800e1a0:	0800e1bf 	.word	0x0800e1bf
 800e1a4:	0800e1ad 	.word	0x0800e1ad
 800e1a8:	0800e247 	.word	0x0800e247
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d048      	beq.n	800e24a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e1bc:	e045      	b.n	800e24a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e1c6:	d142      	bne.n	800e24e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e1cc:	e03f      	b.n	800e24e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	699b      	ldr	r3, [r3, #24]
 800e1d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e1d6:	d123      	bne.n	800e220 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1dc:	2b03      	cmp	r3, #3
 800e1de:	d838      	bhi.n	800e252 <DMA_CheckFifoParam+0xda>
 800e1e0:	a201      	add	r2, pc, #4	@ (adr r2, 800e1e8 <DMA_CheckFifoParam+0x70>)
 800e1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e6:	bf00      	nop
 800e1e8:	0800e1f9 	.word	0x0800e1f9
 800e1ec:	0800e1ff 	.word	0x0800e1ff
 800e1f0:	0800e1f9 	.word	0x0800e1f9
 800e1f4:	0800e211 	.word	0x0800e211
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	73fb      	strb	r3, [r7, #15]
        break;
 800e1fc:	e030      	b.n	800e260 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e202:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e206:	2b00      	cmp	r3, #0
 800e208:	d025      	beq.n	800e256 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800e20a:	2301      	movs	r3, #1
 800e20c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e20e:	e022      	b.n	800e256 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e214:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e218:	d11f      	bne.n	800e25a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800e21a:	2301      	movs	r3, #1
 800e21c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e21e:	e01c      	b.n	800e25a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e224:	2b02      	cmp	r3, #2
 800e226:	d902      	bls.n	800e22e <DMA_CheckFifoParam+0xb6>
 800e228:	2b03      	cmp	r3, #3
 800e22a:	d003      	beq.n	800e234 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800e22c:	e018      	b.n	800e260 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800e22e:	2301      	movs	r3, #1
 800e230:	73fb      	strb	r3, [r7, #15]
        break;
 800e232:	e015      	b.n	800e260 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e238:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d00e      	beq.n	800e25e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800e240:	2301      	movs	r3, #1
 800e242:	73fb      	strb	r3, [r7, #15]
    break;
 800e244:	e00b      	b.n	800e25e <DMA_CheckFifoParam+0xe6>
        break;
 800e246:	bf00      	nop
 800e248:	e00a      	b.n	800e260 <DMA_CheckFifoParam+0xe8>
        break;
 800e24a:	bf00      	nop
 800e24c:	e008      	b.n	800e260 <DMA_CheckFifoParam+0xe8>
        break;
 800e24e:	bf00      	nop
 800e250:	e006      	b.n	800e260 <DMA_CheckFifoParam+0xe8>
        break;
 800e252:	bf00      	nop
 800e254:	e004      	b.n	800e260 <DMA_CheckFifoParam+0xe8>
        break;
 800e256:	bf00      	nop
 800e258:	e002      	b.n	800e260 <DMA_CheckFifoParam+0xe8>
        break;
 800e25a:	bf00      	nop
 800e25c:	e000      	b.n	800e260 <DMA_CheckFifoParam+0xe8>
    break;
 800e25e:	bf00      	nop
    }
  }

  return status;
 800e260:	7bfb      	ldrb	r3, [r7, #15]
}
 800e262:	4618      	mov	r0, r3
 800e264:	3714      	adds	r7, #20
 800e266:	46bd      	mov	sp, r7
 800e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26c:	4770      	bx	lr
 800e26e:	bf00      	nop

0800e270 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e270:	b480      	push	{r7}
 800e272:	b085      	sub	sp, #20
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4a38      	ldr	r2, [pc, #224]	@ (800e364 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d022      	beq.n	800e2ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4a36      	ldr	r2, [pc, #216]	@ (800e368 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d01d      	beq.n	800e2ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4a35      	ldr	r2, [pc, #212]	@ (800e36c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800e298:	4293      	cmp	r3, r2
 800e29a:	d018      	beq.n	800e2ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a33      	ldr	r2, [pc, #204]	@ (800e370 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d013      	beq.n	800e2ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4a32      	ldr	r2, [pc, #200]	@ (800e374 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d00e      	beq.n	800e2ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4a30      	ldr	r2, [pc, #192]	@ (800e378 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d009      	beq.n	800e2ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4a2f      	ldr	r2, [pc, #188]	@ (800e37c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d004      	beq.n	800e2ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4a2d      	ldr	r2, [pc, #180]	@ (800e380 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d101      	bne.n	800e2d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	e000      	b.n	800e2d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d01a      	beq.n	800e30e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	b2db      	uxtb	r3, r3
 800e2de:	3b08      	subs	r3, #8
 800e2e0:	4a28      	ldr	r2, [pc, #160]	@ (800e384 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800e2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e2e6:	091b      	lsrs	r3, r3, #4
 800e2e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e2ea:	68fa      	ldr	r2, [r7, #12]
 800e2ec:	4b26      	ldr	r3, [pc, #152]	@ (800e388 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800e2ee:	4413      	add	r3, r2
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	4a24      	ldr	r2, [pc, #144]	@ (800e38c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800e2fc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f003 031f 	and.w	r3, r3, #31
 800e304:	2201      	movs	r2, #1
 800e306:	409a      	lsls	r2, r3
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800e30c:	e024      	b.n	800e358 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	b2db      	uxtb	r3, r3
 800e314:	3b10      	subs	r3, #16
 800e316:	4a1e      	ldr	r2, [pc, #120]	@ (800e390 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800e318:	fba2 2303 	umull	r2, r3, r2, r3
 800e31c:	091b      	lsrs	r3, r3, #4
 800e31e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	4a1c      	ldr	r2, [pc, #112]	@ (800e394 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d806      	bhi.n	800e336 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	4a1b      	ldr	r2, [pc, #108]	@ (800e398 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d902      	bls.n	800e336 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	3308      	adds	r3, #8
 800e334:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e336:	68fa      	ldr	r2, [r7, #12]
 800e338:	4b18      	ldr	r3, [pc, #96]	@ (800e39c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800e33a:	4413      	add	r3, r2
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	461a      	mov	r2, r3
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	4a16      	ldr	r2, [pc, #88]	@ (800e3a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800e348:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f003 031f 	and.w	r3, r3, #31
 800e350:	2201      	movs	r2, #1
 800e352:	409a      	lsls	r2, r3
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800e358:	bf00      	nop
 800e35a:	3714      	adds	r7, #20
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr
 800e364:	58025408 	.word	0x58025408
 800e368:	5802541c 	.word	0x5802541c
 800e36c:	58025430 	.word	0x58025430
 800e370:	58025444 	.word	0x58025444
 800e374:	58025458 	.word	0x58025458
 800e378:	5802546c 	.word	0x5802546c
 800e37c:	58025480 	.word	0x58025480
 800e380:	58025494 	.word	0x58025494
 800e384:	cccccccd 	.word	0xcccccccd
 800e388:	16009600 	.word	0x16009600
 800e38c:	58025880 	.word	0x58025880
 800e390:	aaaaaaab 	.word	0xaaaaaaab
 800e394:	400204b8 	.word	0x400204b8
 800e398:	4002040f 	.word	0x4002040f
 800e39c:	10008200 	.word	0x10008200
 800e3a0:	40020880 	.word	0x40020880

0800e3a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b085      	sub	sp, #20
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d04a      	beq.n	800e450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2b08      	cmp	r3, #8
 800e3be:	d847      	bhi.n	800e450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4a25      	ldr	r2, [pc, #148]	@ (800e45c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d022      	beq.n	800e410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	4a24      	ldr	r2, [pc, #144]	@ (800e460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d01d      	beq.n	800e410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	4a22      	ldr	r2, [pc, #136]	@ (800e464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d018      	beq.n	800e410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	4a21      	ldr	r2, [pc, #132]	@ (800e468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d013      	beq.n	800e410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4a1f      	ldr	r2, [pc, #124]	@ (800e46c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d00e      	beq.n	800e410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	4a1e      	ldr	r2, [pc, #120]	@ (800e470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d009      	beq.n	800e410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4a1c      	ldr	r2, [pc, #112]	@ (800e474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d004      	beq.n	800e410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4a1b      	ldr	r2, [pc, #108]	@ (800e478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800e40c:	4293      	cmp	r3, r2
 800e40e:	d101      	bne.n	800e414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800e410:	2301      	movs	r3, #1
 800e412:	e000      	b.n	800e416 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800e414:	2300      	movs	r3, #0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d00a      	beq.n	800e430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e41a:	68fa      	ldr	r2, [r7, #12]
 800e41c:	4b17      	ldr	r3, [pc, #92]	@ (800e47c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800e41e:	4413      	add	r3, r2
 800e420:	009b      	lsls	r3, r3, #2
 800e422:	461a      	mov	r2, r3
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	4a15      	ldr	r2, [pc, #84]	@ (800e480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800e42c:	671a      	str	r2, [r3, #112]	@ 0x70
 800e42e:	e009      	b.n	800e444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e430:	68fa      	ldr	r2, [r7, #12]
 800e432:	4b14      	ldr	r3, [pc, #80]	@ (800e484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800e434:	4413      	add	r3, r2
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	461a      	mov	r2, r3
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	4a11      	ldr	r2, [pc, #68]	@ (800e488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800e442:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	3b01      	subs	r3, #1
 800e448:	2201      	movs	r2, #1
 800e44a:	409a      	lsls	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800e450:	bf00      	nop
 800e452:	3714      	adds	r7, #20
 800e454:	46bd      	mov	sp, r7
 800e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45a:	4770      	bx	lr
 800e45c:	58025408 	.word	0x58025408
 800e460:	5802541c 	.word	0x5802541c
 800e464:	58025430 	.word	0x58025430
 800e468:	58025444 	.word	0x58025444
 800e46c:	58025458 	.word	0x58025458
 800e470:	5802546c 	.word	0x5802546c
 800e474:	58025480 	.word	0x58025480
 800e478:	58025494 	.word	0x58025494
 800e47c:	1600963f 	.word	0x1600963f
 800e480:	58025940 	.word	0x58025940
 800e484:	1000823f 	.word	0x1000823f
 800e488:	40020940 	.word	0x40020940

0800e48c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b089      	sub	sp, #36	@ 0x24
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e496:	2300      	movs	r3, #0
 800e498:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800e49a:	4b86      	ldr	r3, [pc, #536]	@ (800e6b4 <HAL_GPIO_Init+0x228>)
 800e49c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e49e:	e18c      	b.n	800e7ba <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	2101      	movs	r1, #1
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	fa01 f303 	lsl.w	r3, r1, r3
 800e4ac:	4013      	ands	r3, r2
 800e4ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	f000 817e 	beq.w	800e7b4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	685b      	ldr	r3, [r3, #4]
 800e4bc:	f003 0303 	and.w	r3, r3, #3
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d005      	beq.n	800e4d0 <HAL_GPIO_Init+0x44>
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	f003 0303 	and.w	r3, r3, #3
 800e4cc:	2b02      	cmp	r3, #2
 800e4ce:	d130      	bne.n	800e532 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	689b      	ldr	r3, [r3, #8]
 800e4d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	005b      	lsls	r3, r3, #1
 800e4da:	2203      	movs	r2, #3
 800e4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800e4e0:	43db      	mvns	r3, r3
 800e4e2:	69ba      	ldr	r2, [r7, #24]
 800e4e4:	4013      	ands	r3, r2
 800e4e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	68da      	ldr	r2, [r3, #12]
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	005b      	lsls	r3, r3, #1
 800e4f0:	fa02 f303 	lsl.w	r3, r2, r3
 800e4f4:	69ba      	ldr	r2, [r7, #24]
 800e4f6:	4313      	orrs	r3, r2
 800e4f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	69ba      	ldr	r2, [r7, #24]
 800e4fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e506:	2201      	movs	r2, #1
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	fa02 f303 	lsl.w	r3, r2, r3
 800e50e:	43db      	mvns	r3, r3
 800e510:	69ba      	ldr	r2, [r7, #24]
 800e512:	4013      	ands	r3, r2
 800e514:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	091b      	lsrs	r3, r3, #4
 800e51c:	f003 0201 	and.w	r2, r3, #1
 800e520:	69fb      	ldr	r3, [r7, #28]
 800e522:	fa02 f303 	lsl.w	r3, r2, r3
 800e526:	69ba      	ldr	r2, [r7, #24]
 800e528:	4313      	orrs	r3, r2
 800e52a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	69ba      	ldr	r2, [r7, #24]
 800e530:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	685b      	ldr	r3, [r3, #4]
 800e536:	f003 0303 	and.w	r3, r3, #3
 800e53a:	2b03      	cmp	r3, #3
 800e53c:	d017      	beq.n	800e56e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	68db      	ldr	r3, [r3, #12]
 800e542:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e544:	69fb      	ldr	r3, [r7, #28]
 800e546:	005b      	lsls	r3, r3, #1
 800e548:	2203      	movs	r2, #3
 800e54a:	fa02 f303 	lsl.w	r3, r2, r3
 800e54e:	43db      	mvns	r3, r3
 800e550:	69ba      	ldr	r2, [r7, #24]
 800e552:	4013      	ands	r3, r2
 800e554:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	689a      	ldr	r2, [r3, #8]
 800e55a:	69fb      	ldr	r3, [r7, #28]
 800e55c:	005b      	lsls	r3, r3, #1
 800e55e:	fa02 f303 	lsl.w	r3, r2, r3
 800e562:	69ba      	ldr	r2, [r7, #24]
 800e564:	4313      	orrs	r3, r2
 800e566:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	69ba      	ldr	r2, [r7, #24]
 800e56c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	f003 0303 	and.w	r3, r3, #3
 800e576:	2b02      	cmp	r3, #2
 800e578:	d123      	bne.n	800e5c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e57a:	69fb      	ldr	r3, [r7, #28]
 800e57c:	08da      	lsrs	r2, r3, #3
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	3208      	adds	r2, #8
 800e582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	f003 0307 	and.w	r3, r3, #7
 800e58e:	009b      	lsls	r3, r3, #2
 800e590:	220f      	movs	r2, #15
 800e592:	fa02 f303 	lsl.w	r3, r2, r3
 800e596:	43db      	mvns	r3, r3
 800e598:	69ba      	ldr	r2, [r7, #24]
 800e59a:	4013      	ands	r3, r2
 800e59c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	691a      	ldr	r2, [r3, #16]
 800e5a2:	69fb      	ldr	r3, [r7, #28]
 800e5a4:	f003 0307 	and.w	r3, r3, #7
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	fa02 f303 	lsl.w	r3, r2, r3
 800e5ae:	69ba      	ldr	r2, [r7, #24]
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	08da      	lsrs	r2, r3, #3
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	3208      	adds	r2, #8
 800e5bc:	69b9      	ldr	r1, [r7, #24]
 800e5be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e5c8:	69fb      	ldr	r3, [r7, #28]
 800e5ca:	005b      	lsls	r3, r3, #1
 800e5cc:	2203      	movs	r2, #3
 800e5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800e5d2:	43db      	mvns	r3, r3
 800e5d4:	69ba      	ldr	r2, [r7, #24]
 800e5d6:	4013      	ands	r3, r2
 800e5d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	f003 0203 	and.w	r2, r3, #3
 800e5e2:	69fb      	ldr	r3, [r7, #28]
 800e5e4:	005b      	lsls	r3, r3, #1
 800e5e6:	fa02 f303 	lsl.w	r3, r2, r3
 800e5ea:	69ba      	ldr	r2, [r7, #24]
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	69ba      	ldr	r2, [r7, #24]
 800e5f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	f000 80d8 	beq.w	800e7b4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e604:	4b2c      	ldr	r3, [pc, #176]	@ (800e6b8 <HAL_GPIO_Init+0x22c>)
 800e606:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e60a:	4a2b      	ldr	r2, [pc, #172]	@ (800e6b8 <HAL_GPIO_Init+0x22c>)
 800e60c:	f043 0302 	orr.w	r3, r3, #2
 800e610:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800e614:	4b28      	ldr	r3, [pc, #160]	@ (800e6b8 <HAL_GPIO_Init+0x22c>)
 800e616:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e61a:	f003 0302 	and.w	r3, r3, #2
 800e61e:	60fb      	str	r3, [r7, #12]
 800e620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e622:	4a26      	ldr	r2, [pc, #152]	@ (800e6bc <HAL_GPIO_Init+0x230>)
 800e624:	69fb      	ldr	r3, [r7, #28]
 800e626:	089b      	lsrs	r3, r3, #2
 800e628:	3302      	adds	r3, #2
 800e62a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e62e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e630:	69fb      	ldr	r3, [r7, #28]
 800e632:	f003 0303 	and.w	r3, r3, #3
 800e636:	009b      	lsls	r3, r3, #2
 800e638:	220f      	movs	r2, #15
 800e63a:	fa02 f303 	lsl.w	r3, r2, r3
 800e63e:	43db      	mvns	r3, r3
 800e640:	69ba      	ldr	r2, [r7, #24]
 800e642:	4013      	ands	r3, r2
 800e644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	4a1d      	ldr	r2, [pc, #116]	@ (800e6c0 <HAL_GPIO_Init+0x234>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d04a      	beq.n	800e6e4 <HAL_GPIO_Init+0x258>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	4a1c      	ldr	r2, [pc, #112]	@ (800e6c4 <HAL_GPIO_Init+0x238>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d02b      	beq.n	800e6ae <HAL_GPIO_Init+0x222>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4a1b      	ldr	r2, [pc, #108]	@ (800e6c8 <HAL_GPIO_Init+0x23c>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d025      	beq.n	800e6aa <HAL_GPIO_Init+0x21e>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	4a1a      	ldr	r2, [pc, #104]	@ (800e6cc <HAL_GPIO_Init+0x240>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d01f      	beq.n	800e6a6 <HAL_GPIO_Init+0x21a>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	4a19      	ldr	r2, [pc, #100]	@ (800e6d0 <HAL_GPIO_Init+0x244>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d019      	beq.n	800e6a2 <HAL_GPIO_Init+0x216>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4a18      	ldr	r2, [pc, #96]	@ (800e6d4 <HAL_GPIO_Init+0x248>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d013      	beq.n	800e69e <HAL_GPIO_Init+0x212>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	4a17      	ldr	r2, [pc, #92]	@ (800e6d8 <HAL_GPIO_Init+0x24c>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d00d      	beq.n	800e69a <HAL_GPIO_Init+0x20e>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4a16      	ldr	r2, [pc, #88]	@ (800e6dc <HAL_GPIO_Init+0x250>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d007      	beq.n	800e696 <HAL_GPIO_Init+0x20a>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	4a15      	ldr	r2, [pc, #84]	@ (800e6e0 <HAL_GPIO_Init+0x254>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d101      	bne.n	800e692 <HAL_GPIO_Init+0x206>
 800e68e:	2309      	movs	r3, #9
 800e690:	e029      	b.n	800e6e6 <HAL_GPIO_Init+0x25a>
 800e692:	230a      	movs	r3, #10
 800e694:	e027      	b.n	800e6e6 <HAL_GPIO_Init+0x25a>
 800e696:	2307      	movs	r3, #7
 800e698:	e025      	b.n	800e6e6 <HAL_GPIO_Init+0x25a>
 800e69a:	2306      	movs	r3, #6
 800e69c:	e023      	b.n	800e6e6 <HAL_GPIO_Init+0x25a>
 800e69e:	2305      	movs	r3, #5
 800e6a0:	e021      	b.n	800e6e6 <HAL_GPIO_Init+0x25a>
 800e6a2:	2304      	movs	r3, #4
 800e6a4:	e01f      	b.n	800e6e6 <HAL_GPIO_Init+0x25a>
 800e6a6:	2303      	movs	r3, #3
 800e6a8:	e01d      	b.n	800e6e6 <HAL_GPIO_Init+0x25a>
 800e6aa:	2302      	movs	r3, #2
 800e6ac:	e01b      	b.n	800e6e6 <HAL_GPIO_Init+0x25a>
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e019      	b.n	800e6e6 <HAL_GPIO_Init+0x25a>
 800e6b2:	bf00      	nop
 800e6b4:	58000080 	.word	0x58000080
 800e6b8:	58024400 	.word	0x58024400
 800e6bc:	58000400 	.word	0x58000400
 800e6c0:	58020000 	.word	0x58020000
 800e6c4:	58020400 	.word	0x58020400
 800e6c8:	58020800 	.word	0x58020800
 800e6cc:	58020c00 	.word	0x58020c00
 800e6d0:	58021000 	.word	0x58021000
 800e6d4:	58021400 	.word	0x58021400
 800e6d8:	58021800 	.word	0x58021800
 800e6dc:	58021c00 	.word	0x58021c00
 800e6e0:	58022400 	.word	0x58022400
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	69fa      	ldr	r2, [r7, #28]
 800e6e8:	f002 0203 	and.w	r2, r2, #3
 800e6ec:	0092      	lsls	r2, r2, #2
 800e6ee:	4093      	lsls	r3, r2
 800e6f0:	69ba      	ldr	r2, [r7, #24]
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e6f6:	4938      	ldr	r1, [pc, #224]	@ (800e7d8 <HAL_GPIO_Init+0x34c>)
 800e6f8:	69fb      	ldr	r3, [r7, #28]
 800e6fa:	089b      	lsrs	r3, r3, #2
 800e6fc:	3302      	adds	r3, #2
 800e6fe:	69ba      	ldr	r2, [r7, #24]
 800e700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e704:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	43db      	mvns	r3, r3
 800e710:	69ba      	ldr	r2, [r7, #24]
 800e712:	4013      	ands	r3, r2
 800e714:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	685b      	ldr	r3, [r3, #4]
 800e71a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d003      	beq.n	800e72a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800e722:	69ba      	ldr	r2, [r7, #24]
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	4313      	orrs	r3, r2
 800e728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800e72a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	43db      	mvns	r3, r3
 800e73e:	69ba      	ldr	r2, [r7, #24]
 800e740:	4013      	ands	r3, r2
 800e742:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d003      	beq.n	800e758 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800e750:	69ba      	ldr	r2, [r7, #24]
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	4313      	orrs	r3, r2
 800e756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800e758:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e75c:	69bb      	ldr	r3, [r7, #24]
 800e75e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	43db      	mvns	r3, r3
 800e76a:	69ba      	ldr	r2, [r7, #24]
 800e76c:	4013      	ands	r3, r2
 800e76e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d003      	beq.n	800e784 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800e77c:	69ba      	ldr	r2, [r7, #24]
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	4313      	orrs	r3, r2
 800e782:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	69ba      	ldr	r2, [r7, #24]
 800e788:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	43db      	mvns	r3, r3
 800e794:	69ba      	ldr	r2, [r7, #24]
 800e796:	4013      	ands	r3, r2
 800e798:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d003      	beq.n	800e7ae <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800e7a6:	69ba      	ldr	r2, [r7, #24]
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	69ba      	ldr	r2, [r7, #24]
 800e7b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800e7b4:	69fb      	ldr	r3, [r7, #28]
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	fa22 f303 	lsr.w	r3, r2, r3
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	f47f ae6b 	bne.w	800e4a0 <HAL_GPIO_Init+0x14>
  }
}
 800e7ca:	bf00      	nop
 800e7cc:	bf00      	nop
 800e7ce:	3724      	adds	r7, #36	@ 0x24
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr
 800e7d8:	58000400 	.word	0x58000400

0800e7dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b085      	sub	sp, #20
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	691a      	ldr	r2, [r3, #16]
 800e7ec:	887b      	ldrh	r3, [r7, #2]
 800e7ee:	4013      	ands	r3, r2
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d002      	beq.n	800e7fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	73fb      	strb	r3, [r7, #15]
 800e7f8:	e001      	b.n	800e7fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e7fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e800:	4618      	mov	r0, r3
 800e802:	3714      	adds	r7, #20
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr

0800e80c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	460b      	mov	r3, r1
 800e816:	807b      	strh	r3, [r7, #2]
 800e818:	4613      	mov	r3, r2
 800e81a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e81c:	787b      	ldrb	r3, [r7, #1]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d003      	beq.n	800e82a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e822:	887a      	ldrh	r2, [r7, #2]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800e828:	e003      	b.n	800e832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e82a:	887b      	ldrh	r3, [r7, #2]
 800e82c:	041a      	lsls	r2, r3, #16
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	619a      	str	r2, [r3, #24]
}
 800e832:	bf00      	nop
 800e834:	370c      	adds	r7, #12
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr

0800e83e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e83e:	b580      	push	{r7, lr}
 800e840:	b082      	sub	sp, #8
 800e842:	af00      	add	r7, sp, #0
 800e844:	4603      	mov	r3, r0
 800e846:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800e848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e84c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e850:	88fb      	ldrh	r3, [r7, #6]
 800e852:	4013      	ands	r3, r2
 800e854:	2b00      	cmp	r3, #0
 800e856:	d008      	beq.n	800e86a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e858:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e85c:	88fb      	ldrh	r3, [r7, #6]
 800e85e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e862:	88fb      	ldrh	r3, [r7, #6]
 800e864:	4618      	mov	r0, r3
 800e866:	f7f7 fd51 	bl	800630c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800e86a:	bf00      	nop
 800e86c:	3708      	adds	r7, #8
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
	...

0800e874 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d101      	bne.n	800e886 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e882:	2301      	movs	r3, #1
 800e884:	e08b      	b.n	800e99e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d106      	bne.n	800e8a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2200      	movs	r2, #0
 800e896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f7f6 fabc 	bl	8004e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2224      	movs	r2, #36	@ 0x24
 800e8a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f022 0201 	bic.w	r2, r2, #1
 800e8b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	685a      	ldr	r2, [r3, #4]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e8c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	689a      	ldr	r2, [r3, #8]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e8d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	68db      	ldr	r3, [r3, #12]
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	d107      	bne.n	800e8ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	689a      	ldr	r2, [r3, #8]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e8ea:	609a      	str	r2, [r3, #8]
 800e8ec:	e006      	b.n	800e8fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	689a      	ldr	r2, [r3, #8]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e8fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	68db      	ldr	r3, [r3, #12]
 800e900:	2b02      	cmp	r3, #2
 800e902:	d108      	bne.n	800e916 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	685a      	ldr	r2, [r3, #4]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e912:	605a      	str	r2, [r3, #4]
 800e914:	e007      	b.n	800e926 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	685a      	ldr	r2, [r3, #4]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e924:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	6859      	ldr	r1, [r3, #4]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	4b1d      	ldr	r3, [pc, #116]	@ (800e9a8 <HAL_I2C_Init+0x134>)
 800e932:	430b      	orrs	r3, r1
 800e934:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	68da      	ldr	r2, [r3, #12]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e944:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	691a      	ldr	r2, [r3, #16]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	695b      	ldr	r3, [r3, #20]
 800e94e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	699b      	ldr	r3, [r3, #24]
 800e956:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	430a      	orrs	r2, r1
 800e95e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	69d9      	ldr	r1, [r3, #28]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6a1a      	ldr	r2, [r3, #32]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	430a      	orrs	r2, r1
 800e96e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f042 0201 	orr.w	r2, r2, #1
 800e97e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2200      	movs	r2, #0
 800e984:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2220      	movs	r2, #32
 800e98a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2200      	movs	r2, #0
 800e992:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2200      	movs	r2, #0
 800e998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e99c:	2300      	movs	r3, #0
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3708      	adds	r7, #8
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	02008000 	.word	0x02008000

0800e9ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b088      	sub	sp, #32
 800e9b0:	af02      	add	r7, sp, #8
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	4608      	mov	r0, r1
 800e9b6:	4611      	mov	r1, r2
 800e9b8:	461a      	mov	r2, r3
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	817b      	strh	r3, [r7, #10]
 800e9be:	460b      	mov	r3, r1
 800e9c0:	813b      	strh	r3, [r7, #8]
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	2b20      	cmp	r3, #32
 800e9d0:	f040 80f9 	bne.w	800ebc6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9d4:	6a3b      	ldr	r3, [r7, #32]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d002      	beq.n	800e9e0 <HAL_I2C_Mem_Write+0x34>
 800e9da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d105      	bne.n	800e9ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	e0ed      	b.n	800ebc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	d101      	bne.n	800e9fa <HAL_I2C_Mem_Write+0x4e>
 800e9f6:	2302      	movs	r3, #2
 800e9f8:	e0e6      	b.n	800ebc8 <HAL_I2C_Mem_Write+0x21c>
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ea02:	f7fa fdbb 	bl	800957c <HAL_GetTick>
 800ea06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	9300      	str	r3, [sp, #0]
 800ea0c:	2319      	movs	r3, #25
 800ea0e:	2201      	movs	r2, #1
 800ea10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ea14:	68f8      	ldr	r0, [r7, #12]
 800ea16:	f002 f818 	bl	8010a4a <I2C_WaitOnFlagUntilTimeout>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d001      	beq.n	800ea24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800ea20:	2301      	movs	r3, #1
 800ea22:	e0d1      	b.n	800ebc8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2221      	movs	r2, #33	@ 0x21
 800ea28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2240      	movs	r2, #64	@ 0x40
 800ea30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	2200      	movs	r2, #0
 800ea38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	6a3a      	ldr	r2, [r7, #32]
 800ea3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ea44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2200      	movs	r2, #0
 800ea4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ea4c:	88f8      	ldrh	r0, [r7, #6]
 800ea4e:	893a      	ldrh	r2, [r7, #8]
 800ea50:	8979      	ldrh	r1, [r7, #10]
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	9301      	str	r3, [sp, #4]
 800ea56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea58:	9300      	str	r3, [sp, #0]
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	68f8      	ldr	r0, [r7, #12]
 800ea5e:	f001 f965 	bl	800fd2c <I2C_RequestMemoryWrite>
 800ea62:	4603      	mov	r3, r0
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d005      	beq.n	800ea74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ea70:	2301      	movs	r3, #1
 800ea72:	e0a9      	b.n	800ebc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	2bff      	cmp	r3, #255	@ 0xff
 800ea7c:	d90e      	bls.n	800ea9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	22ff      	movs	r2, #255	@ 0xff
 800ea82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea88:	b2da      	uxtb	r2, r3
 800ea8a:	8979      	ldrh	r1, [r7, #10]
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ea94:	68f8      	ldr	r0, [r7, #12]
 800ea96:	f002 f99b 	bl	8010dd0 <I2C_TransferConfig>
 800ea9a:	e00f      	b.n	800eabc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eaa0:	b29a      	uxth	r2, r3
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eaaa:	b2da      	uxtb	r2, r3
 800eaac:	8979      	ldrh	r1, [r7, #10]
 800eaae:	2300      	movs	r3, #0
 800eab0:	9300      	str	r3, [sp, #0]
 800eab2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	f002 f98a 	bl	8010dd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eabc:	697a      	ldr	r2, [r7, #20]
 800eabe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eac0:	68f8      	ldr	r0, [r7, #12]
 800eac2:	f002 f81b 	bl	8010afc <I2C_WaitOnTXISFlagUntilTimeout>
 800eac6:	4603      	mov	r3, r0
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d001      	beq.n	800ead0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800eacc:	2301      	movs	r3, #1
 800eace:	e07b      	b.n	800ebc8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ead4:	781a      	ldrb	r2, [r3, #0]
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eae0:	1c5a      	adds	r2, r3, #1
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	3b01      	subs	r3, #1
 800eaee:	b29a      	uxth	r2, r3
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	b29a      	uxth	r2, r3
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d034      	beq.n	800eb74 <HAL_I2C_Mem_Write+0x1c8>
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d130      	bne.n	800eb74 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	9300      	str	r3, [sp, #0]
 800eb16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb18:	2200      	movs	r2, #0
 800eb1a:	2180      	movs	r1, #128	@ 0x80
 800eb1c:	68f8      	ldr	r0, [r7, #12]
 800eb1e:	f001 ff94 	bl	8010a4a <I2C_WaitOnFlagUntilTimeout>
 800eb22:	4603      	mov	r3, r0
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d001      	beq.n	800eb2c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800eb28:	2301      	movs	r3, #1
 800eb2a:	e04d      	b.n	800ebc8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	2bff      	cmp	r3, #255	@ 0xff
 800eb34:	d90e      	bls.n	800eb54 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	22ff      	movs	r2, #255	@ 0xff
 800eb3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb40:	b2da      	uxtb	r2, r3
 800eb42:	8979      	ldrh	r1, [r7, #10]
 800eb44:	2300      	movs	r3, #0
 800eb46:	9300      	str	r3, [sp, #0]
 800eb48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eb4c:	68f8      	ldr	r0, [r7, #12]
 800eb4e:	f002 f93f 	bl	8010dd0 <I2C_TransferConfig>
 800eb52:	e00f      	b.n	800eb74 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb58:	b29a      	uxth	r2, r3
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb62:	b2da      	uxtb	r2, r3
 800eb64:	8979      	ldrh	r1, [r7, #10]
 800eb66:	2300      	movs	r3, #0
 800eb68:	9300      	str	r3, [sp, #0]
 800eb6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eb6e:	68f8      	ldr	r0, [r7, #12]
 800eb70:	f002 f92e 	bl	8010dd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d19e      	bne.n	800eabc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eb7e:	697a      	ldr	r2, [r7, #20]
 800eb80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb82:	68f8      	ldr	r0, [r7, #12]
 800eb84:	f002 f801 	bl	8010b8a <I2C_WaitOnSTOPFlagUntilTimeout>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d001      	beq.n	800eb92 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	e01a      	b.n	800ebc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	2220      	movs	r2, #32
 800eb98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	6859      	ldr	r1, [r3, #4]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	4b0a      	ldr	r3, [pc, #40]	@ (800ebd0 <HAL_I2C_Mem_Write+0x224>)
 800eba6:	400b      	ands	r3, r1
 800eba8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2220      	movs	r2, #32
 800ebae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	e000      	b.n	800ebc8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ebc6:	2302      	movs	r3, #2
  }
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3718      	adds	r7, #24
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	fe00e800 	.word	0xfe00e800

0800ebd4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b088      	sub	sp, #32
 800ebd8:	af02      	add	r7, sp, #8
 800ebda:	60f8      	str	r0, [r7, #12]
 800ebdc:	4608      	mov	r0, r1
 800ebde:	4611      	mov	r1, r2
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	817b      	strh	r3, [r7, #10]
 800ebe6:	460b      	mov	r3, r1
 800ebe8:	813b      	strh	r3, [r7, #8]
 800ebea:	4613      	mov	r3, r2
 800ebec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	2b20      	cmp	r3, #32
 800ebf8:	f040 80fd 	bne.w	800edf6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ebfc:	6a3b      	ldr	r3, [r7, #32]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d002      	beq.n	800ec08 <HAL_I2C_Mem_Read+0x34>
 800ec02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d105      	bne.n	800ec14 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec0e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ec10:	2301      	movs	r3, #1
 800ec12:	e0f1      	b.n	800edf8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	d101      	bne.n	800ec22 <HAL_I2C_Mem_Read+0x4e>
 800ec1e:	2302      	movs	r3, #2
 800ec20:	e0ea      	b.n	800edf8 <HAL_I2C_Mem_Read+0x224>
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	2201      	movs	r2, #1
 800ec26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ec2a:	f7fa fca7 	bl	800957c <HAL_GetTick>
 800ec2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	9300      	str	r3, [sp, #0]
 800ec34:	2319      	movs	r3, #25
 800ec36:	2201      	movs	r2, #1
 800ec38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ec3c:	68f8      	ldr	r0, [r7, #12]
 800ec3e:	f001 ff04 	bl	8010a4a <I2C_WaitOnFlagUntilTimeout>
 800ec42:	4603      	mov	r3, r0
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d001      	beq.n	800ec4c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	e0d5      	b.n	800edf8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2222      	movs	r2, #34	@ 0x22
 800ec50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2240      	movs	r2, #64	@ 0x40
 800ec58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2200      	movs	r2, #0
 800ec60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	6a3a      	ldr	r2, [r7, #32]
 800ec66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ec6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2200      	movs	r2, #0
 800ec72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ec74:	88f8      	ldrh	r0, [r7, #6]
 800ec76:	893a      	ldrh	r2, [r7, #8]
 800ec78:	8979      	ldrh	r1, [r7, #10]
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	9301      	str	r3, [sp, #4]
 800ec7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec80:	9300      	str	r3, [sp, #0]
 800ec82:	4603      	mov	r3, r0
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f001 f8a5 	bl	800fdd4 <I2C_RequestMemoryRead>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d005      	beq.n	800ec9c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2200      	movs	r2, #0
 800ec94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ec98:	2301      	movs	r3, #1
 800ec9a:	e0ad      	b.n	800edf8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eca0:	b29b      	uxth	r3, r3
 800eca2:	2bff      	cmp	r3, #255	@ 0xff
 800eca4:	d90e      	bls.n	800ecc4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	22ff      	movs	r2, #255	@ 0xff
 800ecaa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecb0:	b2da      	uxtb	r2, r3
 800ecb2:	8979      	ldrh	r1, [r7, #10]
 800ecb4:	4b52      	ldr	r3, [pc, #328]	@ (800ee00 <HAL_I2C_Mem_Read+0x22c>)
 800ecb6:	9300      	str	r3, [sp, #0]
 800ecb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ecbc:	68f8      	ldr	r0, [r7, #12]
 800ecbe:	f002 f887 	bl	8010dd0 <I2C_TransferConfig>
 800ecc2:	e00f      	b.n	800ece4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecc8:	b29a      	uxth	r2, r3
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecd2:	b2da      	uxtb	r2, r3
 800ecd4:	8979      	ldrh	r1, [r7, #10]
 800ecd6:	4b4a      	ldr	r3, [pc, #296]	@ (800ee00 <HAL_I2C_Mem_Read+0x22c>)
 800ecd8:	9300      	str	r3, [sp, #0]
 800ecda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ecde:	68f8      	ldr	r0, [r7, #12]
 800ece0:	f002 f876 	bl	8010dd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	9300      	str	r3, [sp, #0]
 800ece8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecea:	2200      	movs	r2, #0
 800ecec:	2104      	movs	r1, #4
 800ecee:	68f8      	ldr	r0, [r7, #12]
 800ecf0:	f001 feab 	bl	8010a4a <I2C_WaitOnFlagUntilTimeout>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d001      	beq.n	800ecfe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	e07c      	b.n	800edf8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed08:	b2d2      	uxtb	r2, r2
 800ed0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed10:	1c5a      	adds	r2, r3, #1
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed1a:	3b01      	subs	r3, #1
 800ed1c:	b29a      	uxth	r2, r3
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	3b01      	subs	r3, #1
 800ed2a:	b29a      	uxth	r2, r3
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d034      	beq.n	800eda4 <HAL_I2C_Mem_Read+0x1d0>
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d130      	bne.n	800eda4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	9300      	str	r3, [sp, #0]
 800ed46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed48:	2200      	movs	r2, #0
 800ed4a:	2180      	movs	r1, #128	@ 0x80
 800ed4c:	68f8      	ldr	r0, [r7, #12]
 800ed4e:	f001 fe7c 	bl	8010a4a <I2C_WaitOnFlagUntilTimeout>
 800ed52:	4603      	mov	r3, r0
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d001      	beq.n	800ed5c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	e04d      	b.n	800edf8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed60:	b29b      	uxth	r3, r3
 800ed62:	2bff      	cmp	r3, #255	@ 0xff
 800ed64:	d90e      	bls.n	800ed84 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	22ff      	movs	r2, #255	@ 0xff
 800ed6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed70:	b2da      	uxtb	r2, r3
 800ed72:	8979      	ldrh	r1, [r7, #10]
 800ed74:	2300      	movs	r3, #0
 800ed76:	9300      	str	r3, [sp, #0]
 800ed78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ed7c:	68f8      	ldr	r0, [r7, #12]
 800ed7e:	f002 f827 	bl	8010dd0 <I2C_TransferConfig>
 800ed82:	e00f      	b.n	800eda4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed88:	b29a      	uxth	r2, r3
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed92:	b2da      	uxtb	r2, r3
 800ed94:	8979      	ldrh	r1, [r7, #10]
 800ed96:	2300      	movs	r3, #0
 800ed98:	9300      	str	r3, [sp, #0]
 800ed9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ed9e:	68f8      	ldr	r0, [r7, #12]
 800eda0:	f002 f816 	bl	8010dd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eda8:	b29b      	uxth	r3, r3
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d19a      	bne.n	800ece4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800edae:	697a      	ldr	r2, [r7, #20]
 800edb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f001 fee9 	bl	8010b8a <I2C_WaitOnSTOPFlagUntilTimeout>
 800edb8:	4603      	mov	r3, r0
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d001      	beq.n	800edc2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800edbe:	2301      	movs	r3, #1
 800edc0:	e01a      	b.n	800edf8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	2220      	movs	r2, #32
 800edc8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	6859      	ldr	r1, [r3, #4]
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	4b0b      	ldr	r3, [pc, #44]	@ (800ee04 <HAL_I2C_Mem_Read+0x230>)
 800edd6:	400b      	ands	r3, r1
 800edd8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2220      	movs	r2, #32
 800edde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2200      	movs	r2, #0
 800ede6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2200      	movs	r2, #0
 800edee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800edf2:	2300      	movs	r3, #0
 800edf4:	e000      	b.n	800edf8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800edf6:	2302      	movs	r3, #2
  }
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3718      	adds	r7, #24
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	80002400 	.word	0x80002400
 800ee04:	fe00e800 	.word	0xfe00e800

0800ee08 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b086      	sub	sp, #24
 800ee0c:	af02      	add	r7, sp, #8
 800ee0e:	60f8      	str	r0, [r7, #12]
 800ee10:	4608      	mov	r0, r1
 800ee12:	4611      	mov	r1, r2
 800ee14:	461a      	mov	r2, r3
 800ee16:	4603      	mov	r3, r0
 800ee18:	817b      	strh	r3, [r7, #10]
 800ee1a:	460b      	mov	r3, r1
 800ee1c:	813b      	strh	r3, [r7, #8]
 800ee1e:	4613      	mov	r3, r2
 800ee20:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	2b20      	cmp	r3, #32
 800ee2c:	d16a      	bne.n	800ef04 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee2e:	69bb      	ldr	r3, [r7, #24]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d002      	beq.n	800ee3a <HAL_I2C_Mem_Write_IT+0x32>
 800ee34:	8bbb      	ldrh	r3, [r7, #28]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d105      	bne.n	800ee46 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee40:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ee42:	2301      	movs	r3, #1
 800ee44:	e05f      	b.n	800ef06 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	699b      	ldr	r3, [r3, #24]
 800ee4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ee50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee54:	d101      	bne.n	800ee5a <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800ee56:	2302      	movs	r3, #2
 800ee58:	e055      	b.n	800ef06 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d101      	bne.n	800ee68 <HAL_I2C_Mem_Write_IT+0x60>
 800ee64:	2302      	movs	r3, #2
 800ee66:	e04e      	b.n	800ef06 <HAL_I2C_Mem_Write_IT+0xfe>
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2221      	movs	r2, #33	@ 0x21
 800ee74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2240      	movs	r2, #64	@ 0x40
 800ee7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2200      	movs	r2, #0
 800ee84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	69ba      	ldr	r2, [r7, #24]
 800ee90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	8bba      	ldrh	r2, [r7, #28]
 800ee96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	4a1d      	ldr	r2, [pc, #116]	@ (800ef10 <HAL_I2C_Mem_Write_IT+0x108>)
 800ee9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	4a1c      	ldr	r2, [pc, #112]	@ (800ef14 <HAL_I2C_Mem_Write_IT+0x10c>)
 800eea2:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800eea4:	897a      	ldrh	r2, [r7, #10]
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800eeaa:	88fb      	ldrh	r3, [r7, #6]
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	d109      	bne.n	800eec4 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800eeb0:	893b      	ldrh	r3, [r7, #8]
 800eeb2:	b2da      	uxtb	r2, r3
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	f04f 32ff 	mov.w	r2, #4294967295
 800eec0:	651a      	str	r2, [r3, #80]	@ 0x50
 800eec2:	e00b      	b.n	800eedc <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800eec4:	893b      	ldrh	r3, [r7, #8]
 800eec6:	0a1b      	lsrs	r3, r3, #8
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	b2da      	uxtb	r2, r3
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800eed2:	893b      	ldrh	r3, [r7, #8]
 800eed4:	b2db      	uxtb	r3, r3
 800eed6:	461a      	mov	r2, r3
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800eedc:	88fb      	ldrh	r3, [r7, #6]
 800eede:	b2da      	uxtb	r2, r3
 800eee0:	8979      	ldrh	r1, [r7, #10]
 800eee2:	4b0d      	ldr	r3, [pc, #52]	@ (800ef18 <HAL_I2C_Mem_Write_IT+0x110>)
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eeea:	68f8      	ldr	r0, [r7, #12]
 800eeec:	f001 ff70 	bl	8010dd0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	2200      	movs	r2, #0
 800eef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800eef8:	2101      	movs	r1, #1
 800eefa:	68f8      	ldr	r0, [r7, #12]
 800eefc:	f001 ff9a 	bl	8010e34 <I2C_Enable_IRQ>

    return HAL_OK;
 800ef00:	2300      	movs	r3, #0
 800ef02:	e000      	b.n	800ef06 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800ef04:	2302      	movs	r3, #2
  }
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3710      	adds	r7, #16
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	ffff0000 	.word	0xffff0000
 800ef14:	0800f119 	.word	0x0800f119
 800ef18:	80002000 	.word	0x80002000

0800ef1c <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b086      	sub	sp, #24
 800ef20:	af02      	add	r7, sp, #8
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	4608      	mov	r0, r1
 800ef26:	4611      	mov	r1, r2
 800ef28:	461a      	mov	r2, r3
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	817b      	strh	r3, [r7, #10]
 800ef2e:	460b      	mov	r3, r1
 800ef30:	813b      	strh	r3, [r7, #8]
 800ef32:	4613      	mov	r3, r2
 800ef34:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	2b20      	cmp	r3, #32
 800ef40:	d166      	bne.n	800f010 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef42:	69bb      	ldr	r3, [r7, #24]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d002      	beq.n	800ef4e <HAL_I2C_Mem_Read_IT+0x32>
 800ef48:	8bbb      	ldrh	r3, [r7, #28]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d105      	bne.n	800ef5a <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef54:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ef56:	2301      	movs	r3, #1
 800ef58:	e05b      	b.n	800f012 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	699b      	ldr	r3, [r3, #24]
 800ef60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ef64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef68:	d101      	bne.n	800ef6e <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800ef6a:	2302      	movs	r3, #2
 800ef6c:	e051      	b.n	800f012 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d101      	bne.n	800ef7c <HAL_I2C_Mem_Read_IT+0x60>
 800ef78:	2302      	movs	r3, #2
 800ef7a:	e04a      	b.n	800f012 <HAL_I2C_Mem_Read_IT+0xf6>
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2201      	movs	r2, #1
 800ef80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2222      	movs	r2, #34	@ 0x22
 800ef88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2240      	movs	r2, #64	@ 0x40
 800ef90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2200      	movs	r2, #0
 800ef98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	69ba      	ldr	r2, [r7, #24]
 800ef9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	8bba      	ldrh	r2, [r7, #28]
 800efa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	4a1c      	ldr	r2, [pc, #112]	@ (800f01c <HAL_I2C_Mem_Read_IT+0x100>)
 800efaa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	4a1c      	ldr	r2, [pc, #112]	@ (800f020 <HAL_I2C_Mem_Read_IT+0x104>)
 800efb0:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800efb2:	897a      	ldrh	r2, [r7, #10]
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800efb8:	88fb      	ldrh	r3, [r7, #6]
 800efba:	2b01      	cmp	r3, #1
 800efbc:	d109      	bne.n	800efd2 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800efbe:	893b      	ldrh	r3, [r7, #8]
 800efc0:	b2da      	uxtb	r2, r3
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f04f 32ff 	mov.w	r2, #4294967295
 800efce:	651a      	str	r2, [r3, #80]	@ 0x50
 800efd0:	e00b      	b.n	800efea <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800efd2:	893b      	ldrh	r3, [r7, #8]
 800efd4:	0a1b      	lsrs	r3, r3, #8
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	b2da      	uxtb	r2, r3
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800efe0:	893b      	ldrh	r3, [r7, #8]
 800efe2:	b2db      	uxtb	r3, r3
 800efe4:	461a      	mov	r2, r3
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800efea:	88fb      	ldrh	r3, [r7, #6]
 800efec:	b2da      	uxtb	r2, r3
 800efee:	8979      	ldrh	r1, [r7, #10]
 800eff0:	4b0c      	ldr	r3, [pc, #48]	@ (800f024 <HAL_I2C_Mem_Read_IT+0x108>)
 800eff2:	9300      	str	r3, [sp, #0]
 800eff4:	2300      	movs	r3, #0
 800eff6:	68f8      	ldr	r0, [r7, #12]
 800eff8:	f001 feea 	bl	8010dd0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2200      	movs	r2, #0
 800f000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f004:	2101      	movs	r1, #1
 800f006:	68f8      	ldr	r0, [r7, #12]
 800f008:	f001 ff14 	bl	8010e34 <I2C_Enable_IRQ>

    return HAL_OK;
 800f00c:	2300      	movs	r3, #0
 800f00e:	e000      	b.n	800f012 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800f010:	2302      	movs	r3, #2
  }
}
 800f012:	4618      	mov	r0, r3
 800f014:	3710      	adds	r7, #16
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	bf00      	nop
 800f01c:	ffff0000 	.word	0xffff0000
 800f020:	0800f119 	.word	0x0800f119
 800f024:	80002000 	.word	0x80002000

0800f028 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	699b      	ldr	r3, [r3, #24]
 800f036:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f044:	2b00      	cmp	r3, #0
 800f046:	d005      	beq.n	800f054 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f04c:	68ba      	ldr	r2, [r7, #8]
 800f04e:	68f9      	ldr	r1, [r7, #12]
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	4798      	blx	r3
  }
}
 800f054:	bf00      	nop
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800f064:	bf00      	nop
 800f066:	370c      	adds	r7, #12
 800f068:	46bd      	mov	sp, r7
 800f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06e:	4770      	bx	lr

0800f070 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f070:	b480      	push	{r7}
 800f072:	b083      	sub	sp, #12
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800f078:	bf00      	nop
 800f07a:	370c      	adds	r7, #12
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr

0800f084 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f08c:	bf00      	nop
 800f08e:	370c      	adds	r7, #12
 800f090:	46bd      	mov	sp, r7
 800f092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f096:	4770      	bx	lr

0800f098 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f098:	b480      	push	{r7}
 800f09a:	b083      	sub	sp, #12
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f0a0:	bf00      	nop
 800f0a2:	370c      	adds	r7, #12
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr

0800f0ac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b083      	sub	sp, #12
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	460b      	mov	r3, r1
 800f0b6:	70fb      	strb	r3, [r7, #3]
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f0bc:	bf00      	nop
 800f0be:	370c      	adds	r7, #12
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c6:	4770      	bx	lr

0800f0c8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b083      	sub	sp, #12
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800f0d0:	bf00      	nop
 800f0d2:	370c      	adds	r7, #12
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b083      	sub	sp, #12
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800f0e4:	bf00      	nop
 800f0e6:	370c      	adds	r7, #12
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr

0800f0f0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b083      	sub	sp, #12
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f0f8:	bf00      	nop
 800f0fa:	370c      	adds	r7, #12
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr

0800f104 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f104:	b480      	push	{r7}
 800f106:	b083      	sub	sp, #12
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f10c:	bf00      	nop
 800f10e:	370c      	adds	r7, #12
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr

0800f118 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b088      	sub	sp, #32
 800f11c:	af02      	add	r7, sp, #8
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f124:	4b8d      	ldr	r3, [pc, #564]	@ (800f35c <I2C_Mem_ISR_IT+0x244>)
 800f126:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f132:	2b01      	cmp	r3, #1
 800f134:	d101      	bne.n	800f13a <I2C_Mem_ISR_IT+0x22>
 800f136:	2302      	movs	r3, #2
 800f138:	e10c      	b.n	800f354 <I2C_Mem_ISR_IT+0x23c>
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2201      	movs	r2, #1
 800f13e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	f003 0310 	and.w	r3, r3, #16
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d012      	beq.n	800f172 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f152:	2b00      	cmp	r3, #0
 800f154:	d00d      	beq.n	800f172 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2210      	movs	r2, #16
 800f15c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f162:	f043 0204 	orr.w	r2, r3, #4
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f16a:	68f8      	ldr	r0, [r7, #12]
 800f16c:	f001 fc2b 	bl	80109c6 <I2C_Flush_TXDR>
 800f170:	e0dd      	b.n	800f32e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	f003 0304 	and.w	r3, r3, #4
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d022      	beq.n	800f1c2 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f182:	2b00      	cmp	r3, #0
 800f184:	d01d      	beq.n	800f1c2 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800f186:	693b      	ldr	r3, [r7, #16]
 800f188:	f023 0304 	bic.w	r3, r3, #4
 800f18c:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f198:	b2d2      	uxtb	r2, r2
 800f19a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1a0:	1c5a      	adds	r2, r3, #1
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1aa:	3b01      	subs	r3, #1
 800f1ac:	b29a      	uxth	r2, r3
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	3b01      	subs	r3, #1
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f1c0:	e0b5      	b.n	800f32e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	f003 0302 	and.w	r3, r3, #2
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d02c      	beq.n	800f226 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d027      	beq.n	800f226 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1de:	d118      	bne.n	800f212 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1e4:	781a      	ldrb	r2, [r3, #0]
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1f0:	1c5a      	adds	r2, r3, #1
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	b29a      	uxth	r2, r3
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f206:	b29b      	uxth	r3, r3
 800f208:	3b01      	subs	r3, #1
 800f20a:	b29a      	uxth	r2, r3
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f210:	e08d      	b.n	800f32e <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	68fa      	ldr	r2, [r7, #12]
 800f218:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f21a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f04f 32ff 	mov.w	r2, #4294967295
 800f222:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f224:	e083      	b.n	800f32e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d03c      	beq.n	800f2aa <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f236:	2b00      	cmp	r3, #0
 800f238:	d037      	beq.n	800f2aa <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f23e:	b29b      	uxth	r3, r3
 800f240:	2b00      	cmp	r3, #0
 800f242:	d02c      	beq.n	800f29e <I2C_Mem_ISR_IT+0x186>
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d128      	bne.n	800f29e <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f250:	b29b      	uxth	r3, r3
 800f252:	2bff      	cmp	r3, #255	@ 0xff
 800f254:	d910      	bls.n	800f278 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	22ff      	movs	r2, #255	@ 0xff
 800f25a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f260:	b299      	uxth	r1, r3
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f266:	b2da      	uxtb	r2, r3
 800f268:	2300      	movs	r3, #0
 800f26a:	9300      	str	r3, [sp, #0]
 800f26c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f270:	68f8      	ldr	r0, [r7, #12]
 800f272:	f001 fdad 	bl	8010dd0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f276:	e017      	b.n	800f2a8 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f27c:	b29a      	uxth	r2, r3
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f286:	b299      	uxth	r1, r3
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f28c:	b2da      	uxtb	r2, r3
 800f28e:	2300      	movs	r3, #0
 800f290:	9300      	str	r3, [sp, #0]
 800f292:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f296:	68f8      	ldr	r0, [r7, #12]
 800f298:	f001 fd9a 	bl	8010dd0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f29c:	e004      	b.n	800f2a8 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f29e:	2140      	movs	r1, #64	@ 0x40
 800f2a0:	68f8      	ldr	r0, [r7, #12]
 800f2a2:	f001 fa79 	bl	8010798 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f2a6:	e042      	b.n	800f32e <I2C_Mem_ISR_IT+0x216>
 800f2a8:	e041      	b.n	800f32e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d03c      	beq.n	800f32e <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d037      	beq.n	800f32e <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f2be:	2101      	movs	r1, #1
 800f2c0:	68f8      	ldr	r0, [r7, #12]
 800f2c2:	f001 fe3b 	bl	8010f3c <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f2c6:	2102      	movs	r1, #2
 800f2c8:	68f8      	ldr	r0, [r7, #12]
 800f2ca:	f001 fdb3 	bl	8010e34 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f2d4:	b2db      	uxtb	r3, r3
 800f2d6:	2b22      	cmp	r3, #34	@ 0x22
 800f2d8:	d101      	bne.n	800f2de <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800f2da:	4b21      	ldr	r3, [pc, #132]	@ (800f360 <I2C_Mem_ISR_IT+0x248>)
 800f2dc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	2bff      	cmp	r3, #255	@ 0xff
 800f2e6:	d910      	bls.n	800f30a <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	22ff      	movs	r2, #255	@ 0xff
 800f2ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f2f2:	b299      	uxth	r1, r3
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f2f8:	b2da      	uxtb	r2, r3
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	9300      	str	r3, [sp, #0]
 800f2fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f302:	68f8      	ldr	r0, [r7, #12]
 800f304:	f001 fd64 	bl	8010dd0 <I2C_TransferConfig>
 800f308:	e011      	b.n	800f32e <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f30e:	b29a      	uxth	r2, r3
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f318:	b299      	uxth	r1, r3
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f31e:	b2da      	uxtb	r2, r3
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	9300      	str	r3, [sp, #0]
 800f324:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f328:	68f8      	ldr	r0, [r7, #12]
 800f32a:	f001 fd51 	bl	8010dd0 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	f003 0320 	and.w	r3, r3, #32
 800f334:	2b00      	cmp	r3, #0
 800f336:	d008      	beq.n	800f34a <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d003      	beq.n	800f34a <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800f342:	6939      	ldr	r1, [r7, #16]
 800f344:	68f8      	ldr	r0, [r7, #12]
 800f346:	f000 feb7 	bl	80100b8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	2200      	movs	r2, #0
 800f34e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f352:	2300      	movs	r3, #0
}
 800f354:	4618      	mov	r0, r3
 800f356:	3718      	adds	r7, #24
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}
 800f35c:	80002000 	.word	0x80002000
 800f360:	80002400 	.word	0x80002400

0800f364 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b086      	sub	sp, #24
 800f368:	af00      	add	r7, sp, #0
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f374:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f380:	2b01      	cmp	r3, #1
 800f382:	d101      	bne.n	800f388 <I2C_Slave_ISR_IT+0x24>
 800f384:	2302      	movs	r3, #2
 800f386:	e0e2      	b.n	800f54e <I2C_Slave_ISR_IT+0x1ea>
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	2201      	movs	r2, #1
 800f38c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f390:	693b      	ldr	r3, [r7, #16]
 800f392:	f003 0320 	and.w	r3, r3, #32
 800f396:	2b00      	cmp	r3, #0
 800f398:	d009      	beq.n	800f3ae <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d004      	beq.n	800f3ae <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f3a4:	6939      	ldr	r1, [r7, #16]
 800f3a6:	68f8      	ldr	r0, [r7, #12]
 800f3a8:	f000 ff4e 	bl	8010248 <I2C_ITSlaveCplt>
 800f3ac:	e0ca      	b.n	800f544 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	f003 0310 	and.w	r3, r3, #16
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d04b      	beq.n	800f450 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d046      	beq.n	800f450 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3c6:	b29b      	uxth	r3, r3
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d128      	bne.n	800f41e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	2b28      	cmp	r3, #40	@ 0x28
 800f3d6:	d108      	bne.n	800f3ea <I2C_Slave_ISR_IT+0x86>
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f3de:	d104      	bne.n	800f3ea <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f3e0:	6939      	ldr	r1, [r7, #16]
 800f3e2:	68f8      	ldr	r0, [r7, #12]
 800f3e4:	f001 f984 	bl	80106f0 <I2C_ITListenCplt>
 800f3e8:	e031      	b.n	800f44e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f3f0:	b2db      	uxtb	r3, r3
 800f3f2:	2b29      	cmp	r3, #41	@ 0x29
 800f3f4:	d10e      	bne.n	800f414 <I2C_Slave_ISR_IT+0xb0>
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f3fc:	d00a      	beq.n	800f414 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	2210      	movs	r2, #16
 800f404:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f406:	68f8      	ldr	r0, [r7, #12]
 800f408:	f001 fadd 	bl	80109c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f40c:	68f8      	ldr	r0, [r7, #12]
 800f40e:	f000 fdf6 	bl	800fffe <I2C_ITSlaveSeqCplt>
 800f412:	e01c      	b.n	800f44e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	2210      	movs	r2, #16
 800f41a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f41c:	e08f      	b.n	800f53e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2210      	movs	r2, #16
 800f424:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f42a:	f043 0204 	orr.w	r2, r3, #4
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d003      	beq.n	800f440 <I2C_Slave_ISR_IT+0xdc>
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f43e:	d17e      	bne.n	800f53e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f444:	4619      	mov	r1, r3
 800f446:	68f8      	ldr	r0, [r7, #12]
 800f448:	f001 f9a6 	bl	8010798 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f44c:	e077      	b.n	800f53e <I2C_Slave_ISR_IT+0x1da>
 800f44e:	e076      	b.n	800f53e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	f003 0304 	and.w	r3, r3, #4
 800f456:	2b00      	cmp	r3, #0
 800f458:	d02f      	beq.n	800f4ba <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f460:	2b00      	cmp	r3, #0
 800f462:	d02a      	beq.n	800f4ba <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f468:	b29b      	uxth	r3, r3
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d018      	beq.n	800f4a0 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f478:	b2d2      	uxtb	r2, r2
 800f47a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f480:	1c5a      	adds	r2, r3, #1
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f48a:	3b01      	subs	r3, #1
 800f48c:	b29a      	uxth	r2, r3
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f496:	b29b      	uxth	r3, r3
 800f498:	3b01      	subs	r3, #1
 800f49a:	b29a      	uxth	r2, r3
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d14b      	bne.n	800f542 <I2C_Slave_ISR_IT+0x1de>
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f4b0:	d047      	beq.n	800f542 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800f4b2:	68f8      	ldr	r0, [r7, #12]
 800f4b4:	f000 fda3 	bl	800fffe <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800f4b8:	e043      	b.n	800f542 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	f003 0308 	and.w	r3, r3, #8
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d009      	beq.n	800f4d8 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d004      	beq.n	800f4d8 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f4ce:	6939      	ldr	r1, [r7, #16]
 800f4d0:	68f8      	ldr	r0, [r7, #12]
 800f4d2:	f000 fcd3 	bl	800fe7c <I2C_ITAddrCplt>
 800f4d6:	e035      	b.n	800f544 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	f003 0302 	and.w	r3, r3, #2
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d030      	beq.n	800f544 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d02b      	beq.n	800f544 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4f0:	b29b      	uxth	r3, r3
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d018      	beq.n	800f528 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4fa:	781a      	ldrb	r2, [r3, #0]
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f506:	1c5a      	adds	r2, r3, #1
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f510:	b29b      	uxth	r3, r3
 800f512:	3b01      	subs	r3, #1
 800f514:	b29a      	uxth	r2, r3
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f51e:	3b01      	subs	r3, #1
 800f520:	b29a      	uxth	r2, r3
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f526:	e00d      	b.n	800f544 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f52e:	d002      	beq.n	800f536 <I2C_Slave_ISR_IT+0x1d2>
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d106      	bne.n	800f544 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f536:	68f8      	ldr	r0, [r7, #12]
 800f538:	f000 fd61 	bl	800fffe <I2C_ITSlaveSeqCplt>
 800f53c:	e002      	b.n	800f544 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800f53e:	bf00      	nop
 800f540:	e000      	b.n	800f544 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800f542:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2200      	movs	r2, #0
 800f548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f54c:	2300      	movs	r3, #0
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3718      	adds	r7, #24
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}

0800f556 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800f556:	b580      	push	{r7, lr}
 800f558:	b088      	sub	sp, #32
 800f55a:	af02      	add	r7, sp, #8
 800f55c:	60f8      	str	r0, [r7, #12]
 800f55e:	60b9      	str	r1, [r7, #8]
 800f560:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d101      	bne.n	800f570 <I2C_Master_ISR_DMA+0x1a>
 800f56c:	2302      	movs	r3, #2
 800f56e:	e0d9      	b.n	800f724 <I2C_Master_ISR_DMA+0x1ce>
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2201      	movs	r2, #1
 800f574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	f003 0310 	and.w	r3, r3, #16
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d016      	beq.n	800f5b0 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d011      	beq.n	800f5b0 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	2210      	movs	r2, #16
 800f592:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f598:	f043 0204 	orr.w	r2, r3, #4
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f5a0:	2120      	movs	r1, #32
 800f5a2:	68f8      	ldr	r0, [r7, #12]
 800f5a4:	f001 fc46 	bl	8010e34 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f5a8:	68f8      	ldr	r0, [r7, #12]
 800f5aa:	f001 fa0c 	bl	80109c6 <I2C_Flush_TXDR>
 800f5ae:	e0b4      	b.n	800f71a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d071      	beq.n	800f69e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d06c      	beq.n	800f69e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	681a      	ldr	r2, [r3, #0]
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f5d2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5d8:	b29b      	uxth	r3, r3
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d04e      	beq.n	800f67c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	b29b      	uxth	r3, r3
 800f5e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f5ea:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5f0:	b29b      	uxth	r3, r3
 800f5f2:	2bff      	cmp	r3, #255	@ 0xff
 800f5f4:	d906      	bls.n	800f604 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	22ff      	movs	r2, #255	@ 0xff
 800f5fa:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800f5fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f600:	617b      	str	r3, [r7, #20]
 800f602:	e010      	b.n	800f626 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f608:	b29a      	uxth	r2, r3
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f612:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f616:	d003      	beq.n	800f620 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f61c:	617b      	str	r3, [r7, #20]
 800f61e:	e002      	b.n	800f626 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800f620:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f624:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f62a:	b2da      	uxtb	r2, r3
 800f62c:	8a79      	ldrh	r1, [r7, #18]
 800f62e:	2300      	movs	r3, #0
 800f630:	9300      	str	r3, [sp, #0]
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	68f8      	ldr	r0, [r7, #12]
 800f636:	f001 fbcb 	bl	8010dd0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f63e:	b29a      	uxth	r2, r3
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f644:	1ad3      	subs	r3, r2, r3
 800f646:	b29a      	uxth	r2, r3
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f652:	b2db      	uxtb	r3, r3
 800f654:	2b22      	cmp	r3, #34	@ 0x22
 800f656:	d108      	bne.n	800f66a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	681a      	ldr	r2, [r3, #0]
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f666:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f668:	e057      	b.n	800f71a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	681a      	ldr	r2, [r3, #0]
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f678:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f67a:	e04e      	b.n	800f71a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f686:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f68a:	d003      	beq.n	800f694 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f68c:	68f8      	ldr	r0, [r7, #12]
 800f68e:	f000 fc79 	bl	800ff84 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800f692:	e042      	b.n	800f71a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f694:	2140      	movs	r1, #64	@ 0x40
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	f001 f87e 	bl	8010798 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f69c:	e03d      	b.n	800f71a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d028      	beq.n	800f6fa <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d023      	beq.n	800f6fa <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d119      	bne.n	800f6f0 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f6c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f6ca:	d025      	beq.n	800f718 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f6d4:	d108      	bne.n	800f6e8 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	685a      	ldr	r2, [r3, #4]
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f6e4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800f6e6:	e017      	b.n	800f718 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f6e8:	68f8      	ldr	r0, [r7, #12]
 800f6ea:	f000 fc4b 	bl	800ff84 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800f6ee:	e013      	b.n	800f718 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f6f0:	2140      	movs	r1, #64	@ 0x40
 800f6f2:	68f8      	ldr	r0, [r7, #12]
 800f6f4:	f001 f850 	bl	8010798 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f6f8:	e00e      	b.n	800f718 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	f003 0320 	and.w	r3, r3, #32
 800f700:	2b00      	cmp	r3, #0
 800f702:	d00a      	beq.n	800f71a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d005      	beq.n	800f71a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f70e:	68b9      	ldr	r1, [r7, #8]
 800f710:	68f8      	ldr	r0, [r7, #12]
 800f712:	f000 fcd1 	bl	80100b8 <I2C_ITMasterCplt>
 800f716:	e000      	b.n	800f71a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800f718:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	2200      	movs	r2, #0
 800f71e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f722:	2300      	movs	r3, #0
}
 800f724:	4618      	mov	r0, r3
 800f726:	3718      	adds	r7, #24
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b088      	sub	sp, #32
 800f730:	af02      	add	r7, sp, #8
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	60b9      	str	r1, [r7, #8]
 800f736:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f738:	4b8d      	ldr	r3, [pc, #564]	@ (800f970 <I2C_Mem_ISR_DMA+0x244>)
 800f73a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f742:	2b01      	cmp	r3, #1
 800f744:	d101      	bne.n	800f74a <I2C_Mem_ISR_DMA+0x1e>
 800f746:	2302      	movs	r3, #2
 800f748:	e10e      	b.n	800f968 <I2C_Mem_ISR_DMA+0x23c>
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	2201      	movs	r2, #1
 800f74e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	f003 0310 	and.w	r3, r3, #16
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d016      	beq.n	800f78a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f762:	2b00      	cmp	r3, #0
 800f764:	d011      	beq.n	800f78a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	2210      	movs	r2, #16
 800f76c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f772:	f043 0204 	orr.w	r2, r3, #4
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f77a:	2120      	movs	r1, #32
 800f77c:	68f8      	ldr	r0, [r7, #12]
 800f77e:	f001 fb59 	bl	8010e34 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f782:	68f8      	ldr	r0, [r7, #12]
 800f784:	f001 f91f 	bl	80109c6 <I2C_Flush_TXDR>
 800f788:	e0e9      	b.n	800f95e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	f003 0302 	and.w	r3, r3, #2
 800f790:	2b00      	cmp	r3, #0
 800f792:	d00e      	beq.n	800f7b2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d009      	beq.n	800f7b2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	68fa      	ldr	r2, [r7, #12]
 800f7a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f7a6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f7ae:	651a      	str	r2, [r3, #80]	@ 0x50
 800f7b0:	e0d5      	b.n	800f95e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d05f      	beq.n	800f87c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d05a      	beq.n	800f87c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f7c6:	2101      	movs	r1, #1
 800f7c8:	68f8      	ldr	r0, [r7, #12]
 800f7ca:	f001 fbb7 	bl	8010f3c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f7ce:	2110      	movs	r1, #16
 800f7d0:	68f8      	ldr	r0, [r7, #12]
 800f7d2:	f001 fb2f 	bl	8010e34 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7da:	b29b      	uxth	r3, r3
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d048      	beq.n	800f872 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7e4:	b29b      	uxth	r3, r3
 800f7e6:	2bff      	cmp	r3, #255	@ 0xff
 800f7e8:	d910      	bls.n	800f80c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	22ff      	movs	r2, #255	@ 0xff
 800f7ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7f4:	b299      	uxth	r1, r3
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7fa:	b2da      	uxtb	r2, r3
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	9300      	str	r3, [sp, #0]
 800f800:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f804:	68f8      	ldr	r0, [r7, #12]
 800f806:	f001 fae3 	bl	8010dd0 <I2C_TransferConfig>
 800f80a:	e011      	b.n	800f830 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f810:	b29a      	uxth	r2, r3
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f81a:	b299      	uxth	r1, r3
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f820:	b2da      	uxtb	r2, r3
 800f822:	2300      	movs	r3, #0
 800f824:	9300      	str	r3, [sp, #0]
 800f826:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f82a:	68f8      	ldr	r0, [r7, #12]
 800f82c:	f001 fad0 	bl	8010dd0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f834:	b29a      	uxth	r2, r3
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f83a:	1ad3      	subs	r3, r2, r3
 800f83c:	b29a      	uxth	r2, r3
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	2b22      	cmp	r3, #34	@ 0x22
 800f84c:	d108      	bne.n	800f860 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f85c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f85e:	e07e      	b.n	800f95e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	681a      	ldr	r2, [r3, #0]
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f86e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f870:	e075      	b.n	800f95e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f872:	2140      	movs	r1, #64	@ 0x40
 800f874:	68f8      	ldr	r0, [r7, #12]
 800f876:	f000 ff8f 	bl	8010798 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f87a:	e070      	b.n	800f95e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f882:	2b00      	cmp	r3, #0
 800f884:	d05d      	beq.n	800f942 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d058      	beq.n	800f942 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f890:	2101      	movs	r1, #1
 800f892:	68f8      	ldr	r0, [r7, #12]
 800f894:	f001 fb52 	bl	8010f3c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f898:	2110      	movs	r1, #16
 800f89a:	68f8      	ldr	r0, [r7, #12]
 800f89c:	f001 faca 	bl	8010e34 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f8a6:	b2db      	uxtb	r3, r3
 800f8a8:	2b22      	cmp	r3, #34	@ 0x22
 800f8aa:	d101      	bne.n	800f8b0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800f8ac:	4b31      	ldr	r3, [pc, #196]	@ (800f974 <I2C_Mem_ISR_DMA+0x248>)
 800f8ae:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8b4:	b29b      	uxth	r3, r3
 800f8b6:	2bff      	cmp	r3, #255	@ 0xff
 800f8b8:	d910      	bls.n	800f8dc <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	22ff      	movs	r2, #255	@ 0xff
 800f8be:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8c4:	b299      	uxth	r1, r3
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8ca:	b2da      	uxtb	r2, r3
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	9300      	str	r3, [sp, #0]
 800f8d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f8d4:	68f8      	ldr	r0, [r7, #12]
 800f8d6:	f001 fa7b 	bl	8010dd0 <I2C_TransferConfig>
 800f8da:	e011      	b.n	800f900 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8e0:	b29a      	uxth	r2, r3
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8ea:	b299      	uxth	r1, r3
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8f0:	b2da      	uxtb	r2, r3
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	9300      	str	r3, [sp, #0]
 800f8f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	f001 fa68 	bl	8010dd0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f904:	b29a      	uxth	r2, r3
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f90a:	1ad3      	subs	r3, r2, r3
 800f90c:	b29a      	uxth	r2, r3
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	2b22      	cmp	r3, #34	@ 0x22
 800f91c:	d108      	bne.n	800f930 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	681a      	ldr	r2, [r3, #0]
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f92c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f92e:	e016      	b.n	800f95e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f93e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f940:	e00d      	b.n	800f95e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	f003 0320 	and.w	r3, r3, #32
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d008      	beq.n	800f95e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f952:	2b00      	cmp	r3, #0
 800f954:	d003      	beq.n	800f95e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f956:	68b9      	ldr	r1, [r7, #8]
 800f958:	68f8      	ldr	r0, [r7, #12]
 800f95a:	f000 fbad 	bl	80100b8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2200      	movs	r2, #0
 800f962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f966:	2300      	movs	r3, #0
}
 800f968:	4618      	mov	r0, r3
 800f96a:	3718      	adds	r7, #24
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	80002000 	.word	0x80002000
 800f974:	80002400 	.word	0x80002400

0800f978 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b088      	sub	sp, #32
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f988:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800f98a:	2300      	movs	r3, #0
 800f98c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f994:	2b01      	cmp	r3, #1
 800f996:	d101      	bne.n	800f99c <I2C_Slave_ISR_DMA+0x24>
 800f998:	2302      	movs	r3, #2
 800f99a:	e1c2      	b.n	800fd22 <I2C_Slave_ISR_DMA+0x3aa>
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	2201      	movs	r2, #1
 800f9a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	f003 0320 	and.w	r3, r3, #32
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d009      	beq.n	800f9c2 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d004      	beq.n	800f9c2 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800f9b8:	68b9      	ldr	r1, [r7, #8]
 800f9ba:	68f8      	ldr	r0, [r7, #12]
 800f9bc:	f000 fc44 	bl	8010248 <I2C_ITSlaveCplt>
 800f9c0:	e1aa      	b.n	800fd18 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	f003 0310 	and.w	r3, r3, #16
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	f000 8197 	beq.w	800fcfc <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	f000 8191 	beq.w	800fcfc <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d105      	bne.n	800f9f0 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	f000 817f 	beq.w	800fcee <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d07b      	beq.n	800faf0 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d076      	beq.n	800faf0 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4a74      	ldr	r2, [pc, #464]	@ (800fbdc <I2C_Slave_ISR_DMA+0x264>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d059      	beq.n	800fac2 <I2C_Slave_ISR_DMA+0x14a>
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4a72      	ldr	r2, [pc, #456]	@ (800fbe0 <I2C_Slave_ISR_DMA+0x268>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d053      	beq.n	800fac2 <I2C_Slave_ISR_DMA+0x14a>
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a70      	ldr	r2, [pc, #448]	@ (800fbe4 <I2C_Slave_ISR_DMA+0x26c>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d04d      	beq.n	800fac2 <I2C_Slave_ISR_DMA+0x14a>
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	4a6e      	ldr	r2, [pc, #440]	@ (800fbe8 <I2C_Slave_ISR_DMA+0x270>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	d047      	beq.n	800fac2 <I2C_Slave_ISR_DMA+0x14a>
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	4a6c      	ldr	r2, [pc, #432]	@ (800fbec <I2C_Slave_ISR_DMA+0x274>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d041      	beq.n	800fac2 <I2C_Slave_ISR_DMA+0x14a>
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4a6a      	ldr	r2, [pc, #424]	@ (800fbf0 <I2C_Slave_ISR_DMA+0x278>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d03b      	beq.n	800fac2 <I2C_Slave_ISR_DMA+0x14a>
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	4a68      	ldr	r2, [pc, #416]	@ (800fbf4 <I2C_Slave_ISR_DMA+0x27c>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d035      	beq.n	800fac2 <I2C_Slave_ISR_DMA+0x14a>
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4a66      	ldr	r2, [pc, #408]	@ (800fbf8 <I2C_Slave_ISR_DMA+0x280>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d02f      	beq.n	800fac2 <I2C_Slave_ISR_DMA+0x14a>
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	4a64      	ldr	r2, [pc, #400]	@ (800fbfc <I2C_Slave_ISR_DMA+0x284>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d029      	beq.n	800fac2 <I2C_Slave_ISR_DMA+0x14a>
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a62      	ldr	r2, [pc, #392]	@ (800fc00 <I2C_Slave_ISR_DMA+0x288>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d023      	beq.n	800fac2 <I2C_Slave_ISR_DMA+0x14a>
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a60      	ldr	r2, [pc, #384]	@ (800fc04 <I2C_Slave_ISR_DMA+0x28c>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d01d      	beq.n	800fac2 <I2C_Slave_ISR_DMA+0x14a>
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4a5e      	ldr	r2, [pc, #376]	@ (800fc08 <I2C_Slave_ISR_DMA+0x290>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d017      	beq.n	800fac2 <I2C_Slave_ISR_DMA+0x14a>
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a5c      	ldr	r2, [pc, #368]	@ (800fc0c <I2C_Slave_ISR_DMA+0x294>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d011      	beq.n	800fac2 <I2C_Slave_ISR_DMA+0x14a>
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4a5a      	ldr	r2, [pc, #360]	@ (800fc10 <I2C_Slave_ISR_DMA+0x298>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d00b      	beq.n	800fac2 <I2C_Slave_ISR_DMA+0x14a>
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	4a58      	ldr	r2, [pc, #352]	@ (800fc14 <I2C_Slave_ISR_DMA+0x29c>)
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d005      	beq.n	800fac2 <I2C_Slave_ISR_DMA+0x14a>
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a56      	ldr	r2, [pc, #344]	@ (800fc18 <I2C_Slave_ISR_DMA+0x2a0>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d109      	bne.n	800fad6 <I2C_Slave_ISR_DMA+0x15e>
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	685b      	ldr	r3, [r3, #4]
 800faca:	2b00      	cmp	r3, #0
 800facc:	bf0c      	ite	eq
 800face:	2301      	moveq	r3, #1
 800fad0:	2300      	movne	r3, #0
 800fad2:	b2db      	uxtb	r3, r3
 800fad4:	e008      	b.n	800fae8 <I2C_Slave_ISR_DMA+0x170>
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	bf0c      	ite	eq
 800fae2:	2301      	moveq	r3, #1
 800fae4:	2300      	movne	r3, #0
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d001      	beq.n	800faf0 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800faec:	2301      	movs	r3, #1
 800faee:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	f000 809e 	beq.w	800fc36 <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	f000 8098 	beq.w	800fc36 <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	4a33      	ldr	r2, [pc, #204]	@ (800fbdc <I2C_Slave_ISR_DMA+0x264>)
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	d059      	beq.n	800fbc6 <I2C_Slave_ISR_DMA+0x24e>
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4a31      	ldr	r2, [pc, #196]	@ (800fbe0 <I2C_Slave_ISR_DMA+0x268>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d053      	beq.n	800fbc6 <I2C_Slave_ISR_DMA+0x24e>
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	4a2f      	ldr	r2, [pc, #188]	@ (800fbe4 <I2C_Slave_ISR_DMA+0x26c>)
 800fb26:	4293      	cmp	r3, r2
 800fb28:	d04d      	beq.n	800fbc6 <I2C_Slave_ISR_DMA+0x24e>
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	4a2d      	ldr	r2, [pc, #180]	@ (800fbe8 <I2C_Slave_ISR_DMA+0x270>)
 800fb32:	4293      	cmp	r3, r2
 800fb34:	d047      	beq.n	800fbc6 <I2C_Slave_ISR_DMA+0x24e>
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	4a2b      	ldr	r2, [pc, #172]	@ (800fbec <I2C_Slave_ISR_DMA+0x274>)
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	d041      	beq.n	800fbc6 <I2C_Slave_ISR_DMA+0x24e>
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	4a29      	ldr	r2, [pc, #164]	@ (800fbf0 <I2C_Slave_ISR_DMA+0x278>)
 800fb4a:	4293      	cmp	r3, r2
 800fb4c:	d03b      	beq.n	800fbc6 <I2C_Slave_ISR_DMA+0x24e>
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	4a27      	ldr	r2, [pc, #156]	@ (800fbf4 <I2C_Slave_ISR_DMA+0x27c>)
 800fb56:	4293      	cmp	r3, r2
 800fb58:	d035      	beq.n	800fbc6 <I2C_Slave_ISR_DMA+0x24e>
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4a25      	ldr	r2, [pc, #148]	@ (800fbf8 <I2C_Slave_ISR_DMA+0x280>)
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d02f      	beq.n	800fbc6 <I2C_Slave_ISR_DMA+0x24e>
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	4a23      	ldr	r2, [pc, #140]	@ (800fbfc <I2C_Slave_ISR_DMA+0x284>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d029      	beq.n	800fbc6 <I2C_Slave_ISR_DMA+0x24e>
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	4a21      	ldr	r2, [pc, #132]	@ (800fc00 <I2C_Slave_ISR_DMA+0x288>)
 800fb7a:	4293      	cmp	r3, r2
 800fb7c:	d023      	beq.n	800fbc6 <I2C_Slave_ISR_DMA+0x24e>
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	4a1f      	ldr	r2, [pc, #124]	@ (800fc04 <I2C_Slave_ISR_DMA+0x28c>)
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d01d      	beq.n	800fbc6 <I2C_Slave_ISR_DMA+0x24e>
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	4a1d      	ldr	r2, [pc, #116]	@ (800fc08 <I2C_Slave_ISR_DMA+0x290>)
 800fb92:	4293      	cmp	r3, r2
 800fb94:	d017      	beq.n	800fbc6 <I2C_Slave_ISR_DMA+0x24e>
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4a1b      	ldr	r2, [pc, #108]	@ (800fc0c <I2C_Slave_ISR_DMA+0x294>)
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d011      	beq.n	800fbc6 <I2C_Slave_ISR_DMA+0x24e>
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4a19      	ldr	r2, [pc, #100]	@ (800fc10 <I2C_Slave_ISR_DMA+0x298>)
 800fbaa:	4293      	cmp	r3, r2
 800fbac:	d00b      	beq.n	800fbc6 <I2C_Slave_ISR_DMA+0x24e>
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	4a17      	ldr	r2, [pc, #92]	@ (800fc14 <I2C_Slave_ISR_DMA+0x29c>)
 800fbb6:	4293      	cmp	r3, r2
 800fbb8:	d005      	beq.n	800fbc6 <I2C_Slave_ISR_DMA+0x24e>
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	4a15      	ldr	r2, [pc, #84]	@ (800fc18 <I2C_Slave_ISR_DMA+0x2a0>)
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d12a      	bne.n	800fc1c <I2C_Slave_ISR_DMA+0x2a4>
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	bf0c      	ite	eq
 800fbd2:	2301      	moveq	r3, #1
 800fbd4:	2300      	movne	r3, #0
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	e029      	b.n	800fc2e <I2C_Slave_ISR_DMA+0x2b6>
 800fbda:	bf00      	nop
 800fbdc:	40020010 	.word	0x40020010
 800fbe0:	40020028 	.word	0x40020028
 800fbe4:	40020040 	.word	0x40020040
 800fbe8:	40020058 	.word	0x40020058
 800fbec:	40020070 	.word	0x40020070
 800fbf0:	40020088 	.word	0x40020088
 800fbf4:	400200a0 	.word	0x400200a0
 800fbf8:	400200b8 	.word	0x400200b8
 800fbfc:	40020410 	.word	0x40020410
 800fc00:	40020428 	.word	0x40020428
 800fc04:	40020440 	.word	0x40020440
 800fc08:	40020458 	.word	0x40020458
 800fc0c:	40020470 	.word	0x40020470
 800fc10:	40020488 	.word	0x40020488
 800fc14:	400204a0 	.word	0x400204a0
 800fc18:	400204b8 	.word	0x400204b8
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	685b      	ldr	r3, [r3, #4]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	bf0c      	ite	eq
 800fc28:	2301      	moveq	r3, #1
 800fc2a:	2300      	movne	r3, #0
 800fc2c:	b2db      	uxtb	r3, r3
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d001      	beq.n	800fc36 <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800fc32:	2301      	movs	r3, #1
 800fc34:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800fc36:	69fb      	ldr	r3, [r7, #28]
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d128      	bne.n	800fc8e <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc42:	b2db      	uxtb	r3, r3
 800fc44:	2b28      	cmp	r3, #40	@ 0x28
 800fc46:	d108      	bne.n	800fc5a <I2C_Slave_ISR_DMA+0x2e2>
 800fc48:	69bb      	ldr	r3, [r7, #24]
 800fc4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fc4e:	d104      	bne.n	800fc5a <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800fc50:	68b9      	ldr	r1, [r7, #8]
 800fc52:	68f8      	ldr	r0, [r7, #12]
 800fc54:	f000 fd4c 	bl	80106f0 <I2C_ITListenCplt>
 800fc58:	e048      	b.n	800fcec <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc60:	b2db      	uxtb	r3, r3
 800fc62:	2b29      	cmp	r3, #41	@ 0x29
 800fc64:	d10e      	bne.n	800fc84 <I2C_Slave_ISR_DMA+0x30c>
 800fc66:	69bb      	ldr	r3, [r7, #24]
 800fc68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800fc6c:	d00a      	beq.n	800fc84 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	2210      	movs	r2, #16
 800fc74:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800fc76:	68f8      	ldr	r0, [r7, #12]
 800fc78:	f000 fea5 	bl	80109c6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800fc7c:	68f8      	ldr	r0, [r7, #12]
 800fc7e:	f000 f9be 	bl	800fffe <I2C_ITSlaveSeqCplt>
 800fc82:	e033      	b.n	800fcec <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	2210      	movs	r2, #16
 800fc8a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800fc8c:	e034      	b.n	800fcf8 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	2210      	movs	r2, #16
 800fc94:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc9a:	f043 0204 	orr.w	r2, r3, #4
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fca8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d003      	beq.n	800fcb8 <I2C_Slave_ISR_DMA+0x340>
 800fcb0:	69bb      	ldr	r3, [r7, #24]
 800fcb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fcb6:	d11f      	bne.n	800fcf8 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800fcb8:	7dfb      	ldrb	r3, [r7, #23]
 800fcba:	2b21      	cmp	r3, #33	@ 0x21
 800fcbc:	d002      	beq.n	800fcc4 <I2C_Slave_ISR_DMA+0x34c>
 800fcbe:	7dfb      	ldrb	r3, [r7, #23]
 800fcc0:	2b29      	cmp	r3, #41	@ 0x29
 800fcc2:	d103      	bne.n	800fccc <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2221      	movs	r2, #33	@ 0x21
 800fcc8:	631a      	str	r2, [r3, #48]	@ 0x30
 800fcca:	e008      	b.n	800fcde <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800fccc:	7dfb      	ldrb	r3, [r7, #23]
 800fcce:	2b22      	cmp	r3, #34	@ 0x22
 800fcd0:	d002      	beq.n	800fcd8 <I2C_Slave_ISR_DMA+0x360>
 800fcd2:	7dfb      	ldrb	r3, [r7, #23]
 800fcd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcd6:	d102      	bne.n	800fcde <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2222      	movs	r2, #34	@ 0x22
 800fcdc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fce2:	4619      	mov	r1, r3
 800fce4:	68f8      	ldr	r0, [r7, #12]
 800fce6:	f000 fd57 	bl	8010798 <I2C_ITError>
      if (treatdmanack == 1U)
 800fcea:	e005      	b.n	800fcf8 <I2C_Slave_ISR_DMA+0x380>
 800fcec:	e004      	b.n	800fcf8 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	2210      	movs	r2, #16
 800fcf4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fcf6:	e00f      	b.n	800fd18 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800fcf8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fcfa:	e00d      	b.n	800fd18 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	f003 0308 	and.w	r3, r3, #8
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d008      	beq.n	800fd18 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d003      	beq.n	800fd18 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800fd10:	68b9      	ldr	r1, [r7, #8]
 800fd12:	68f8      	ldr	r0, [r7, #12]
 800fd14:	f000 f8b2 	bl	800fe7c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fd20:	2300      	movs	r3, #0
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	3720      	adds	r7, #32
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
 800fd2a:	bf00      	nop

0800fd2c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b086      	sub	sp, #24
 800fd30:	af02      	add	r7, sp, #8
 800fd32:	60f8      	str	r0, [r7, #12]
 800fd34:	4608      	mov	r0, r1
 800fd36:	4611      	mov	r1, r2
 800fd38:	461a      	mov	r2, r3
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	817b      	strh	r3, [r7, #10]
 800fd3e:	460b      	mov	r3, r1
 800fd40:	813b      	strh	r3, [r7, #8]
 800fd42:	4613      	mov	r3, r2
 800fd44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800fd46:	88fb      	ldrh	r3, [r7, #6]
 800fd48:	b2da      	uxtb	r2, r3
 800fd4a:	8979      	ldrh	r1, [r7, #10]
 800fd4c:	4b20      	ldr	r3, [pc, #128]	@ (800fdd0 <I2C_RequestMemoryWrite+0xa4>)
 800fd4e:	9300      	str	r3, [sp, #0]
 800fd50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800fd54:	68f8      	ldr	r0, [r7, #12]
 800fd56:	f001 f83b 	bl	8010dd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd5a:	69fa      	ldr	r2, [r7, #28]
 800fd5c:	69b9      	ldr	r1, [r7, #24]
 800fd5e:	68f8      	ldr	r0, [r7, #12]
 800fd60:	f000 fecc 	bl	8010afc <I2C_WaitOnTXISFlagUntilTimeout>
 800fd64:	4603      	mov	r3, r0
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d001      	beq.n	800fd6e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	e02c      	b.n	800fdc8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fd6e:	88fb      	ldrh	r3, [r7, #6]
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d105      	bne.n	800fd80 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fd74:	893b      	ldrh	r3, [r7, #8]
 800fd76:	b2da      	uxtb	r2, r3
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	629a      	str	r2, [r3, #40]	@ 0x28
 800fd7e:	e015      	b.n	800fdac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fd80:	893b      	ldrh	r3, [r7, #8]
 800fd82:	0a1b      	lsrs	r3, r3, #8
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	b2da      	uxtb	r2, r3
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd8e:	69fa      	ldr	r2, [r7, #28]
 800fd90:	69b9      	ldr	r1, [r7, #24]
 800fd92:	68f8      	ldr	r0, [r7, #12]
 800fd94:	f000 feb2 	bl	8010afc <I2C_WaitOnTXISFlagUntilTimeout>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d001      	beq.n	800fda2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800fd9e:	2301      	movs	r3, #1
 800fda0:	e012      	b.n	800fdc8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fda2:	893b      	ldrh	r3, [r7, #8]
 800fda4:	b2da      	uxtb	r2, r3
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	9300      	str	r3, [sp, #0]
 800fdb0:	69bb      	ldr	r3, [r7, #24]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	2180      	movs	r1, #128	@ 0x80
 800fdb6:	68f8      	ldr	r0, [r7, #12]
 800fdb8:	f000 fe47 	bl	8010a4a <I2C_WaitOnFlagUntilTimeout>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d001      	beq.n	800fdc6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	e000      	b.n	800fdc8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800fdc6:	2300      	movs	r3, #0
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3710      	adds	r7, #16
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	80002000 	.word	0x80002000

0800fdd4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b086      	sub	sp, #24
 800fdd8:	af02      	add	r7, sp, #8
 800fdda:	60f8      	str	r0, [r7, #12]
 800fddc:	4608      	mov	r0, r1
 800fdde:	4611      	mov	r1, r2
 800fde0:	461a      	mov	r2, r3
 800fde2:	4603      	mov	r3, r0
 800fde4:	817b      	strh	r3, [r7, #10]
 800fde6:	460b      	mov	r3, r1
 800fde8:	813b      	strh	r3, [r7, #8]
 800fdea:	4613      	mov	r3, r2
 800fdec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800fdee:	88fb      	ldrh	r3, [r7, #6]
 800fdf0:	b2da      	uxtb	r2, r3
 800fdf2:	8979      	ldrh	r1, [r7, #10]
 800fdf4:	4b20      	ldr	r3, [pc, #128]	@ (800fe78 <I2C_RequestMemoryRead+0xa4>)
 800fdf6:	9300      	str	r3, [sp, #0]
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	68f8      	ldr	r0, [r7, #12]
 800fdfc:	f000 ffe8 	bl	8010dd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fe00:	69fa      	ldr	r2, [r7, #28]
 800fe02:	69b9      	ldr	r1, [r7, #24]
 800fe04:	68f8      	ldr	r0, [r7, #12]
 800fe06:	f000 fe79 	bl	8010afc <I2C_WaitOnTXISFlagUntilTimeout>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d001      	beq.n	800fe14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800fe10:	2301      	movs	r3, #1
 800fe12:	e02c      	b.n	800fe6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fe14:	88fb      	ldrh	r3, [r7, #6]
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	d105      	bne.n	800fe26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fe1a:	893b      	ldrh	r3, [r7, #8]
 800fe1c:	b2da      	uxtb	r2, r3
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	629a      	str	r2, [r3, #40]	@ 0x28
 800fe24:	e015      	b.n	800fe52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fe26:	893b      	ldrh	r3, [r7, #8]
 800fe28:	0a1b      	lsrs	r3, r3, #8
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	b2da      	uxtb	r2, r3
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fe34:	69fa      	ldr	r2, [r7, #28]
 800fe36:	69b9      	ldr	r1, [r7, #24]
 800fe38:	68f8      	ldr	r0, [r7, #12]
 800fe3a:	f000 fe5f 	bl	8010afc <I2C_WaitOnTXISFlagUntilTimeout>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d001      	beq.n	800fe48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800fe44:	2301      	movs	r3, #1
 800fe46:	e012      	b.n	800fe6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fe48:	893b      	ldrh	r3, [r7, #8]
 800fe4a:	b2da      	uxtb	r2, r3
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800fe52:	69fb      	ldr	r3, [r7, #28]
 800fe54:	9300      	str	r3, [sp, #0]
 800fe56:	69bb      	ldr	r3, [r7, #24]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	2140      	movs	r1, #64	@ 0x40
 800fe5c:	68f8      	ldr	r0, [r7, #12]
 800fe5e:	f000 fdf4 	bl	8010a4a <I2C_WaitOnFlagUntilTimeout>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d001      	beq.n	800fe6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800fe68:	2301      	movs	r3, #1
 800fe6a:	e000      	b.n	800fe6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800fe6c:	2300      	movs	r3, #0
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3710      	adds	r7, #16
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	80002000 	.word	0x80002000

0800fe7c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b084      	sub	sp, #16
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800fe92:	2b28      	cmp	r3, #40	@ 0x28
 800fe94:	d16a      	bne.n	800ff6c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	699b      	ldr	r3, [r3, #24]
 800fe9c:	0c1b      	lsrs	r3, r3, #16
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	f003 0301 	and.w	r3, r3, #1
 800fea4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	699b      	ldr	r3, [r3, #24]
 800feac:	0c1b      	lsrs	r3, r3, #16
 800feae:	b29b      	uxth	r3, r3
 800feb0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800feb4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	689b      	ldr	r3, [r3, #8]
 800febc:	b29b      	uxth	r3, r3
 800febe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fec2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	68db      	ldr	r3, [r3, #12]
 800feca:	b29b      	uxth	r3, r3
 800fecc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fed0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	68db      	ldr	r3, [r3, #12]
 800fed6:	2b02      	cmp	r3, #2
 800fed8:	d138      	bne.n	800ff4c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800feda:	897b      	ldrh	r3, [r7, #10]
 800fedc:	09db      	lsrs	r3, r3, #7
 800fede:	b29a      	uxth	r2, r3
 800fee0:	89bb      	ldrh	r3, [r7, #12]
 800fee2:	4053      	eors	r3, r2
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	f003 0306 	and.w	r3, r3, #6
 800feea:	2b00      	cmp	r3, #0
 800feec:	d11c      	bne.n	800ff28 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800feee:	897b      	ldrh	r3, [r7, #10]
 800fef0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fef6:	1c5a      	adds	r2, r3, #1
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ff00:	2b02      	cmp	r3, #2
 800ff02:	d13b      	bne.n	800ff7c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2200      	movs	r2, #0
 800ff08:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	2208      	movs	r2, #8
 800ff10:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2200      	movs	r2, #0
 800ff16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ff1a:	89ba      	ldrh	r2, [r7, #12]
 800ff1c:	7bfb      	ldrb	r3, [r7, #15]
 800ff1e:	4619      	mov	r1, r3
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f7ff f8c3 	bl	800f0ac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800ff26:	e029      	b.n	800ff7c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800ff28:	893b      	ldrh	r3, [r7, #8]
 800ff2a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ff2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f001 f803 	bl	8010f3c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ff3e:	89ba      	ldrh	r2, [r7, #12]
 800ff40:	7bfb      	ldrb	r3, [r7, #15]
 800ff42:	4619      	mov	r1, r3
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f7ff f8b1 	bl	800f0ac <HAL_I2C_AddrCallback>
}
 800ff4a:	e017      	b.n	800ff7c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ff4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 fff3 	bl	8010f3c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ff5e:	89ba      	ldrh	r2, [r7, #12]
 800ff60:	7bfb      	ldrb	r3, [r7, #15]
 800ff62:	4619      	mov	r1, r3
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f7ff f8a1 	bl	800f0ac <HAL_I2C_AddrCallback>
}
 800ff6a:	e007      	b.n	800ff7c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	2208      	movs	r2, #8
 800ff72:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2200      	movs	r2, #0
 800ff78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800ff7c:	bf00      	nop
 800ff7e:	3710      	adds	r7, #16
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b082      	sub	sp, #8
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ff9a:	b2db      	uxtb	r3, r3
 800ff9c:	2b21      	cmp	r3, #33	@ 0x21
 800ff9e:	d115      	bne.n	800ffcc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2220      	movs	r2, #32
 800ffa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2211      	movs	r2, #17
 800ffac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ffb4:	2101      	movs	r1, #1
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f000 ffc0 	bl	8010f3c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f7ff f849 	bl	800f05c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ffca:	e014      	b.n	800fff6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2220      	movs	r2, #32
 800ffd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2212      	movs	r2, #18
 800ffd8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ffe0:	2102      	movs	r1, #2
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f000 ffaa 	bl	8010f3c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2200      	movs	r2, #0
 800ffec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f7ff f83d 	bl	800f070 <HAL_I2C_MasterRxCpltCallback>
}
 800fff6:	bf00      	nop
 800fff8:	3708      	adds	r7, #8
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}

0800fffe <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fffe:	b580      	push	{r7, lr}
 8010000:	b084      	sub	sp, #16
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2200      	movs	r2, #0
 8010012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801001c:	2b00      	cmp	r3, #0
 801001e:	d008      	beq.n	8010032 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	681a      	ldr	r2, [r3, #0]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801002e:	601a      	str	r2, [r3, #0]
 8010030:	e00c      	b.n	801004c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010038:	2b00      	cmp	r3, #0
 801003a:	d007      	beq.n	801004c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	681a      	ldr	r2, [r3, #0]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801004a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010052:	b2db      	uxtb	r3, r3
 8010054:	2b29      	cmp	r3, #41	@ 0x29
 8010056:	d112      	bne.n	801007e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2228      	movs	r2, #40	@ 0x28
 801005c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2221      	movs	r2, #33	@ 0x21
 8010064:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010066:	2101      	movs	r1, #1
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f000 ff67 	bl	8010f3c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2200      	movs	r2, #0
 8010072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f7ff f804 	bl	800f084 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801007c:	e017      	b.n	80100ae <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010084:	b2db      	uxtb	r3, r3
 8010086:	2b2a      	cmp	r3, #42	@ 0x2a
 8010088:	d111      	bne.n	80100ae <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2228      	movs	r2, #40	@ 0x28
 801008e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2222      	movs	r2, #34	@ 0x22
 8010096:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010098:	2102      	movs	r1, #2
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f000 ff4e 	bl	8010f3c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2200      	movs	r2, #0
 80100a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f7fe fff5 	bl	800f098 <HAL_I2C_SlaveRxCpltCallback>
}
 80100ae:	bf00      	nop
 80100b0:	3710      	adds	r7, #16
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}
	...

080100b8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b086      	sub	sp, #24
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	2220      	movs	r2, #32
 80100cc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100d4:	b2db      	uxtb	r3, r3
 80100d6:	2b21      	cmp	r3, #33	@ 0x21
 80100d8:	d107      	bne.n	80100ea <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80100da:	2101      	movs	r1, #1
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f000 ff2d 	bl	8010f3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2211      	movs	r2, #17
 80100e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80100e8:	e00c      	b.n	8010104 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	2b22      	cmp	r3, #34	@ 0x22
 80100f4:	d106      	bne.n	8010104 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80100f6:	2102      	movs	r1, #2
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f000 ff1f 	bl	8010f3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2212      	movs	r2, #18
 8010102:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	6859      	ldr	r1, [r3, #4]
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681a      	ldr	r2, [r3, #0]
 801010e:	4b4c      	ldr	r3, [pc, #304]	@ (8010240 <I2C_ITMasterCplt+0x188>)
 8010110:	400b      	ands	r3, r1
 8010112:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2200      	movs	r2, #0
 8010118:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	4a49      	ldr	r2, [pc, #292]	@ (8010244 <I2C_ITMasterCplt+0x18c>)
 801011e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	f003 0310 	and.w	r3, r3, #16
 8010126:	2b00      	cmp	r3, #0
 8010128:	d009      	beq.n	801013e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	2210      	movs	r2, #16
 8010130:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010136:	f043 0204 	orr.w	r2, r3, #4
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010144:	b2db      	uxtb	r3, r3
 8010146:	2b60      	cmp	r3, #96	@ 0x60
 8010148:	d10a      	bne.n	8010160 <I2C_ITMasterCplt+0xa8>
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	f003 0304 	and.w	r3, r3, #4
 8010150:	2b00      	cmp	r3, #0
 8010152:	d005      	beq.n	8010160 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801015a:	b2db      	uxtb	r3, r3
 801015c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 801015e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f000 fc30 	bl	80109c6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801016a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010172:	b2db      	uxtb	r3, r3
 8010174:	2b60      	cmp	r3, #96	@ 0x60
 8010176:	d002      	beq.n	801017e <I2C_ITMasterCplt+0xc6>
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d006      	beq.n	801018c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010182:	4619      	mov	r1, r3
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f000 fb07 	bl	8010798 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 801018a:	e054      	b.n	8010236 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010192:	b2db      	uxtb	r3, r3
 8010194:	2b21      	cmp	r3, #33	@ 0x21
 8010196:	d124      	bne.n	80101e2 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2220      	movs	r2, #32
 801019c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2200      	movs	r2, #0
 80101a4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80101ac:	b2db      	uxtb	r3, r3
 80101ae:	2b40      	cmp	r3, #64	@ 0x40
 80101b0:	d10b      	bne.n	80101ca <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2200      	movs	r2, #0
 80101b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2200      	movs	r2, #0
 80101be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f7fe ff8a 	bl	800f0dc <HAL_I2C_MemTxCpltCallback>
}
 80101c8:	e035      	b.n	8010236 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2200      	movs	r2, #0
 80101ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2200      	movs	r2, #0
 80101d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f7fe ff3e 	bl	800f05c <HAL_I2C_MasterTxCpltCallback>
}
 80101e0:	e029      	b.n	8010236 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80101e8:	b2db      	uxtb	r3, r3
 80101ea:	2b22      	cmp	r3, #34	@ 0x22
 80101ec:	d123      	bne.n	8010236 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2220      	movs	r2, #32
 80101f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2200      	movs	r2, #0
 80101fa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010202:	b2db      	uxtb	r3, r3
 8010204:	2b40      	cmp	r3, #64	@ 0x40
 8010206:	d10b      	bne.n	8010220 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2200      	movs	r2, #0
 801020c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2200      	movs	r2, #0
 8010214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f7f6 fa3d 	bl	8006698 <HAL_I2C_MemRxCpltCallback>
}
 801021e:	e00a      	b.n	8010236 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2200      	movs	r2, #0
 8010224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2200      	movs	r2, #0
 801022c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f7fe ff1d 	bl	800f070 <HAL_I2C_MasterRxCpltCallback>
}
 8010236:	bf00      	nop
 8010238:	3718      	adds	r7, #24
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}
 801023e:	bf00      	nop
 8010240:	fe00e800 	.word	0xfe00e800
 8010244:	ffff0000 	.word	0xffff0000

08010248 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b086      	sub	sp, #24
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010262:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801026a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	2220      	movs	r2, #32
 8010272:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010274:	7afb      	ldrb	r3, [r7, #11]
 8010276:	2b21      	cmp	r3, #33	@ 0x21
 8010278:	d002      	beq.n	8010280 <I2C_ITSlaveCplt+0x38>
 801027a:	7afb      	ldrb	r3, [r7, #11]
 801027c:	2b29      	cmp	r3, #41	@ 0x29
 801027e:	d108      	bne.n	8010292 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8010280:	f248 0101 	movw	r1, #32769	@ 0x8001
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f000 fe59 	bl	8010f3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2221      	movs	r2, #33	@ 0x21
 801028e:	631a      	str	r2, [r3, #48]	@ 0x30
 8010290:	e019      	b.n	80102c6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010292:	7afb      	ldrb	r3, [r7, #11]
 8010294:	2b22      	cmp	r3, #34	@ 0x22
 8010296:	d002      	beq.n	801029e <I2C_ITSlaveCplt+0x56>
 8010298:	7afb      	ldrb	r3, [r7, #11]
 801029a:	2b2a      	cmp	r3, #42	@ 0x2a
 801029c:	d108      	bne.n	80102b0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 801029e:	f248 0102 	movw	r1, #32770	@ 0x8002
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f000 fe4a 	bl	8010f3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2222      	movs	r2, #34	@ 0x22
 80102ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80102ae:	e00a      	b.n	80102c6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80102b0:	7afb      	ldrb	r3, [r7, #11]
 80102b2:	2b28      	cmp	r3, #40	@ 0x28
 80102b4:	d107      	bne.n	80102c6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80102b6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f000 fe3e 	bl	8010f3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2200      	movs	r2, #0
 80102c4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	685a      	ldr	r2, [r3, #4]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80102d4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	6859      	ldr	r1, [r3, #4]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681a      	ldr	r2, [r3, #0]
 80102e0:	4b7f      	ldr	r3, [pc, #508]	@ (80104e0 <I2C_ITSlaveCplt+0x298>)
 80102e2:	400b      	ands	r3, r1
 80102e4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f000 fb6d 	bl	80109c6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80102ec:	693b      	ldr	r3, [r7, #16]
 80102ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d07a      	beq.n	80103ec <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	681a      	ldr	r2, [r3, #0]
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010304:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801030a:	2b00      	cmp	r3, #0
 801030c:	f000 8111 	beq.w	8010532 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	4a73      	ldr	r2, [pc, #460]	@ (80104e4 <I2C_ITSlaveCplt+0x29c>)
 8010318:	4293      	cmp	r3, r2
 801031a:	d059      	beq.n	80103d0 <I2C_ITSlaveCplt+0x188>
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	4a71      	ldr	r2, [pc, #452]	@ (80104e8 <I2C_ITSlaveCplt+0x2a0>)
 8010324:	4293      	cmp	r3, r2
 8010326:	d053      	beq.n	80103d0 <I2C_ITSlaveCplt+0x188>
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	4a6f      	ldr	r2, [pc, #444]	@ (80104ec <I2C_ITSlaveCplt+0x2a4>)
 8010330:	4293      	cmp	r3, r2
 8010332:	d04d      	beq.n	80103d0 <I2C_ITSlaveCplt+0x188>
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4a6d      	ldr	r2, [pc, #436]	@ (80104f0 <I2C_ITSlaveCplt+0x2a8>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d047      	beq.n	80103d0 <I2C_ITSlaveCplt+0x188>
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	4a6b      	ldr	r2, [pc, #428]	@ (80104f4 <I2C_ITSlaveCplt+0x2ac>)
 8010348:	4293      	cmp	r3, r2
 801034a:	d041      	beq.n	80103d0 <I2C_ITSlaveCplt+0x188>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	4a69      	ldr	r2, [pc, #420]	@ (80104f8 <I2C_ITSlaveCplt+0x2b0>)
 8010354:	4293      	cmp	r3, r2
 8010356:	d03b      	beq.n	80103d0 <I2C_ITSlaveCplt+0x188>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	4a67      	ldr	r2, [pc, #412]	@ (80104fc <I2C_ITSlaveCplt+0x2b4>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d035      	beq.n	80103d0 <I2C_ITSlaveCplt+0x188>
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	4a65      	ldr	r2, [pc, #404]	@ (8010500 <I2C_ITSlaveCplt+0x2b8>)
 801036c:	4293      	cmp	r3, r2
 801036e:	d02f      	beq.n	80103d0 <I2C_ITSlaveCplt+0x188>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	4a63      	ldr	r2, [pc, #396]	@ (8010504 <I2C_ITSlaveCplt+0x2bc>)
 8010378:	4293      	cmp	r3, r2
 801037a:	d029      	beq.n	80103d0 <I2C_ITSlaveCplt+0x188>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	4a61      	ldr	r2, [pc, #388]	@ (8010508 <I2C_ITSlaveCplt+0x2c0>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d023      	beq.n	80103d0 <I2C_ITSlaveCplt+0x188>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	4a5f      	ldr	r2, [pc, #380]	@ (801050c <I2C_ITSlaveCplt+0x2c4>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d01d      	beq.n	80103d0 <I2C_ITSlaveCplt+0x188>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	4a5d      	ldr	r2, [pc, #372]	@ (8010510 <I2C_ITSlaveCplt+0x2c8>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d017      	beq.n	80103d0 <I2C_ITSlaveCplt+0x188>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	4a5b      	ldr	r2, [pc, #364]	@ (8010514 <I2C_ITSlaveCplt+0x2cc>)
 80103a8:	4293      	cmp	r3, r2
 80103aa:	d011      	beq.n	80103d0 <I2C_ITSlaveCplt+0x188>
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	4a59      	ldr	r2, [pc, #356]	@ (8010518 <I2C_ITSlaveCplt+0x2d0>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	d00b      	beq.n	80103d0 <I2C_ITSlaveCplt+0x188>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	4a57      	ldr	r2, [pc, #348]	@ (801051c <I2C_ITSlaveCplt+0x2d4>)
 80103c0:	4293      	cmp	r3, r2
 80103c2:	d005      	beq.n	80103d0 <I2C_ITSlaveCplt+0x188>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	4a55      	ldr	r2, [pc, #340]	@ (8010520 <I2C_ITSlaveCplt+0x2d8>)
 80103cc:	4293      	cmp	r3, r2
 80103ce:	d105      	bne.n	80103dc <I2C_ITSlaveCplt+0x194>
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	b29b      	uxth	r3, r3
 80103da:	e004      	b.n	80103e6 <I2C_ITSlaveCplt+0x19e>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	685b      	ldr	r3, [r3, #4]
 80103e4:	b29b      	uxth	r3, r3
 80103e6:	687a      	ldr	r2, [r7, #4]
 80103e8:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80103ea:	e0a2      	b.n	8010532 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80103ec:	693b      	ldr	r3, [r7, #16]
 80103ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	f000 809d 	beq.w	8010532 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	681a      	ldr	r2, [r3, #0]
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010406:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801040c:	2b00      	cmp	r3, #0
 801040e:	f000 8090 	beq.w	8010532 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	4a32      	ldr	r2, [pc, #200]	@ (80104e4 <I2C_ITSlaveCplt+0x29c>)
 801041a:	4293      	cmp	r3, r2
 801041c:	d059      	beq.n	80104d2 <I2C_ITSlaveCplt+0x28a>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	4a30      	ldr	r2, [pc, #192]	@ (80104e8 <I2C_ITSlaveCplt+0x2a0>)
 8010426:	4293      	cmp	r3, r2
 8010428:	d053      	beq.n	80104d2 <I2C_ITSlaveCplt+0x28a>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	4a2e      	ldr	r2, [pc, #184]	@ (80104ec <I2C_ITSlaveCplt+0x2a4>)
 8010432:	4293      	cmp	r3, r2
 8010434:	d04d      	beq.n	80104d2 <I2C_ITSlaveCplt+0x28a>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	4a2c      	ldr	r2, [pc, #176]	@ (80104f0 <I2C_ITSlaveCplt+0x2a8>)
 801043e:	4293      	cmp	r3, r2
 8010440:	d047      	beq.n	80104d2 <I2C_ITSlaveCplt+0x28a>
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	4a2a      	ldr	r2, [pc, #168]	@ (80104f4 <I2C_ITSlaveCplt+0x2ac>)
 801044a:	4293      	cmp	r3, r2
 801044c:	d041      	beq.n	80104d2 <I2C_ITSlaveCplt+0x28a>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	4a28      	ldr	r2, [pc, #160]	@ (80104f8 <I2C_ITSlaveCplt+0x2b0>)
 8010456:	4293      	cmp	r3, r2
 8010458:	d03b      	beq.n	80104d2 <I2C_ITSlaveCplt+0x28a>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	4a26      	ldr	r2, [pc, #152]	@ (80104fc <I2C_ITSlaveCplt+0x2b4>)
 8010462:	4293      	cmp	r3, r2
 8010464:	d035      	beq.n	80104d2 <I2C_ITSlaveCplt+0x28a>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	4a24      	ldr	r2, [pc, #144]	@ (8010500 <I2C_ITSlaveCplt+0x2b8>)
 801046e:	4293      	cmp	r3, r2
 8010470:	d02f      	beq.n	80104d2 <I2C_ITSlaveCplt+0x28a>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	4a22      	ldr	r2, [pc, #136]	@ (8010504 <I2C_ITSlaveCplt+0x2bc>)
 801047a:	4293      	cmp	r3, r2
 801047c:	d029      	beq.n	80104d2 <I2C_ITSlaveCplt+0x28a>
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4a20      	ldr	r2, [pc, #128]	@ (8010508 <I2C_ITSlaveCplt+0x2c0>)
 8010486:	4293      	cmp	r3, r2
 8010488:	d023      	beq.n	80104d2 <I2C_ITSlaveCplt+0x28a>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	4a1e      	ldr	r2, [pc, #120]	@ (801050c <I2C_ITSlaveCplt+0x2c4>)
 8010492:	4293      	cmp	r3, r2
 8010494:	d01d      	beq.n	80104d2 <I2C_ITSlaveCplt+0x28a>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	4a1c      	ldr	r2, [pc, #112]	@ (8010510 <I2C_ITSlaveCplt+0x2c8>)
 801049e:	4293      	cmp	r3, r2
 80104a0:	d017      	beq.n	80104d2 <I2C_ITSlaveCplt+0x28a>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4a1a      	ldr	r2, [pc, #104]	@ (8010514 <I2C_ITSlaveCplt+0x2cc>)
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d011      	beq.n	80104d2 <I2C_ITSlaveCplt+0x28a>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4a18      	ldr	r2, [pc, #96]	@ (8010518 <I2C_ITSlaveCplt+0x2d0>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d00b      	beq.n	80104d2 <I2C_ITSlaveCplt+0x28a>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	4a16      	ldr	r2, [pc, #88]	@ (801051c <I2C_ITSlaveCplt+0x2d4>)
 80104c2:	4293      	cmp	r3, r2
 80104c4:	d005      	beq.n	80104d2 <I2C_ITSlaveCplt+0x28a>
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	4a14      	ldr	r2, [pc, #80]	@ (8010520 <I2C_ITSlaveCplt+0x2d8>)
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d128      	bne.n	8010524 <I2C_ITSlaveCplt+0x2dc>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	b29b      	uxth	r3, r3
 80104dc:	e027      	b.n	801052e <I2C_ITSlaveCplt+0x2e6>
 80104de:	bf00      	nop
 80104e0:	fe00e800 	.word	0xfe00e800
 80104e4:	40020010 	.word	0x40020010
 80104e8:	40020028 	.word	0x40020028
 80104ec:	40020040 	.word	0x40020040
 80104f0:	40020058 	.word	0x40020058
 80104f4:	40020070 	.word	0x40020070
 80104f8:	40020088 	.word	0x40020088
 80104fc:	400200a0 	.word	0x400200a0
 8010500:	400200b8 	.word	0x400200b8
 8010504:	40020410 	.word	0x40020410
 8010508:	40020428 	.word	0x40020428
 801050c:	40020440 	.word	0x40020440
 8010510:	40020458 	.word	0x40020458
 8010514:	40020470 	.word	0x40020470
 8010518:	40020488 	.word	0x40020488
 801051c:	400204a0 	.word	0x400204a0
 8010520:	400204b8 	.word	0x400204b8
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	685b      	ldr	r3, [r3, #4]
 801052c:	b29b      	uxth	r3, r3
 801052e:	687a      	ldr	r2, [r7, #4]
 8010530:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	f003 0304 	and.w	r3, r3, #4
 8010538:	2b00      	cmp	r3, #0
 801053a:	d020      	beq.n	801057e <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	f023 0304 	bic.w	r3, r3, #4
 8010542:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801054e:	b2d2      	uxtb	r2, r2
 8010550:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010556:	1c5a      	adds	r2, r3, #1
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010560:	2b00      	cmp	r3, #0
 8010562:	d00c      	beq.n	801057e <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010568:	3b01      	subs	r3, #1
 801056a:	b29a      	uxth	r2, r3
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010574:	b29b      	uxth	r3, r3
 8010576:	3b01      	subs	r3, #1
 8010578:	b29a      	uxth	r2, r3
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010582:	b29b      	uxth	r3, r3
 8010584:	2b00      	cmp	r3, #0
 8010586:	d005      	beq.n	8010594 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801058c:	f043 0204 	orr.w	r2, r3, #4
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010594:	697b      	ldr	r3, [r7, #20]
 8010596:	f003 0310 	and.w	r3, r3, #16
 801059a:	2b00      	cmp	r3, #0
 801059c:	d049      	beq.n	8010632 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d044      	beq.n	8010632 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105ac:	b29b      	uxth	r3, r3
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d128      	bne.n	8010604 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80105b8:	b2db      	uxtb	r3, r3
 80105ba:	2b28      	cmp	r3, #40	@ 0x28
 80105bc:	d108      	bne.n	80105d0 <I2C_ITSlaveCplt+0x388>
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80105c4:	d104      	bne.n	80105d0 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80105c6:	6979      	ldr	r1, [r7, #20]
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f000 f891 	bl	80106f0 <I2C_ITListenCplt>
 80105ce:	e030      	b.n	8010632 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80105d6:	b2db      	uxtb	r3, r3
 80105d8:	2b29      	cmp	r3, #41	@ 0x29
 80105da:	d10e      	bne.n	80105fa <I2C_ITSlaveCplt+0x3b2>
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80105e2:	d00a      	beq.n	80105fa <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	2210      	movs	r2, #16
 80105ea:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f000 f9ea 	bl	80109c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f7ff fd03 	bl	800fffe <I2C_ITSlaveSeqCplt>
 80105f8:	e01b      	b.n	8010632 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	2210      	movs	r2, #16
 8010600:	61da      	str	r2, [r3, #28]
 8010602:	e016      	b.n	8010632 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	2210      	movs	r2, #16
 801060a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010610:	f043 0204 	orr.w	r2, r3, #4
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d003      	beq.n	8010626 <I2C_ITSlaveCplt+0x3de>
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010624:	d105      	bne.n	8010632 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801062a:	4619      	mov	r1, r3
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f000 f8b3 	bl	8010798 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2200      	movs	r2, #0
 8010636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2200      	movs	r2, #0
 801063e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010644:	2b00      	cmp	r3, #0
 8010646:	d010      	beq.n	801066a <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801064c:	4619      	mov	r1, r3
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f000 f8a2 	bl	8010798 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801065a:	b2db      	uxtb	r3, r3
 801065c:	2b28      	cmp	r3, #40	@ 0x28
 801065e:	d141      	bne.n	80106e4 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8010660:	6979      	ldr	r1, [r7, #20]
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f000 f844 	bl	80106f0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010668:	e03c      	b.n	80106e4 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801066e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8010672:	d014      	beq.n	801069e <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f7ff fcc2 	bl	800fffe <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	4a1b      	ldr	r2, [pc, #108]	@ (80106ec <I2C_ITSlaveCplt+0x4a4>)
 801067e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2220      	movs	r2, #32
 8010684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2200      	movs	r2, #0
 801068c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2200      	movs	r2, #0
 8010692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f7fe fd16 	bl	800f0c8 <HAL_I2C_ListenCpltCallback>
}
 801069c:	e022      	b.n	80106e4 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80106a4:	b2db      	uxtb	r3, r3
 80106a6:	2b22      	cmp	r3, #34	@ 0x22
 80106a8:	d10e      	bne.n	80106c8 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2220      	movs	r2, #32
 80106ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2200      	movs	r2, #0
 80106b6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2200      	movs	r2, #0
 80106bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f7fe fce9 	bl	800f098 <HAL_I2C_SlaveRxCpltCallback>
}
 80106c6:	e00d      	b.n	80106e4 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2220      	movs	r2, #32
 80106cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2200      	movs	r2, #0
 80106d4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2200      	movs	r2, #0
 80106da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f7fe fcd0 	bl	800f084 <HAL_I2C_SlaveTxCpltCallback>
}
 80106e4:	bf00      	nop
 80106e6:	3718      	adds	r7, #24
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}
 80106ec:	ffff0000 	.word	0xffff0000

080106f0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b082      	sub	sp, #8
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	4a25      	ldr	r2, [pc, #148]	@ (8010794 <I2C_ITListenCplt+0xa4>)
 80106fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2200      	movs	r2, #0
 8010704:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2220      	movs	r2, #32
 801070a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2200      	movs	r2, #0
 8010712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2200      	movs	r2, #0
 801071a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	f003 0304 	and.w	r3, r3, #4
 8010722:	2b00      	cmp	r3, #0
 8010724:	d022      	beq.n	801076c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010730:	b2d2      	uxtb	r2, r2
 8010732:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010738:	1c5a      	adds	r2, r3, #1
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010742:	2b00      	cmp	r3, #0
 8010744:	d012      	beq.n	801076c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801074a:	3b01      	subs	r3, #1
 801074c:	b29a      	uxth	r2, r3
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010756:	b29b      	uxth	r3, r3
 8010758:	3b01      	subs	r3, #1
 801075a:	b29a      	uxth	r2, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010764:	f043 0204 	orr.w	r2, r3, #4
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801076c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	f000 fbe3 	bl	8010f3c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	2210      	movs	r2, #16
 801077c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2200      	movs	r2, #0
 8010782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f7fe fc9e 	bl	800f0c8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801078c:	bf00      	nop
 801078e:	3708      	adds	r7, #8
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}
 8010794:	ffff0000 	.word	0xffff0000

08010798 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b084      	sub	sp, #16
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80107a8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2200      	movs	r2, #0
 80107ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	4a6d      	ldr	r2, [pc, #436]	@ (801096c <I2C_ITError+0x1d4>)
 80107b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2200      	movs	r2, #0
 80107bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	431a      	orrs	r2, r3
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80107ca:	7bfb      	ldrb	r3, [r7, #15]
 80107cc:	2b28      	cmp	r3, #40	@ 0x28
 80107ce:	d005      	beq.n	80107dc <I2C_ITError+0x44>
 80107d0:	7bfb      	ldrb	r3, [r7, #15]
 80107d2:	2b29      	cmp	r3, #41	@ 0x29
 80107d4:	d002      	beq.n	80107dc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80107d6:	7bfb      	ldrb	r3, [r7, #15]
 80107d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80107da:	d10b      	bne.n	80107f4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80107dc:	2103      	movs	r1, #3
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f000 fbac 	bl	8010f3c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2228      	movs	r2, #40	@ 0x28
 80107e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	4a60      	ldr	r2, [pc, #384]	@ (8010970 <I2C_ITError+0x1d8>)
 80107f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80107f2:	e030      	b.n	8010856 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80107f4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f000 fb9f 	bl	8010f3c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f000 f8e1 	bl	80109c6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801080a:	b2db      	uxtb	r3, r3
 801080c:	2b60      	cmp	r3, #96	@ 0x60
 801080e:	d01f      	beq.n	8010850 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2220      	movs	r2, #32
 8010814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	699b      	ldr	r3, [r3, #24]
 801081e:	f003 0320 	and.w	r3, r3, #32
 8010822:	2b20      	cmp	r3, #32
 8010824:	d114      	bne.n	8010850 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	699b      	ldr	r3, [r3, #24]
 801082c:	f003 0310 	and.w	r3, r3, #16
 8010830:	2b10      	cmp	r3, #16
 8010832:	d109      	bne.n	8010848 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	2210      	movs	r2, #16
 801083a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010840:	f043 0204 	orr.w	r2, r3, #4
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	2220      	movs	r2, #32
 801084e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2200      	movs	r2, #0
 8010854:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801085a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010860:	2b00      	cmp	r3, #0
 8010862:	d039      	beq.n	80108d8 <I2C_ITError+0x140>
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	2b11      	cmp	r3, #17
 8010868:	d002      	beq.n	8010870 <I2C_ITError+0xd8>
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	2b21      	cmp	r3, #33	@ 0x21
 801086e:	d133      	bne.n	80108d8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801087a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801087e:	d107      	bne.n	8010890 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	681a      	ldr	r2, [r3, #0]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801088e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010894:	4618      	mov	r0, r3
 8010896:	f7fd f9f7 	bl	800dc88 <HAL_DMA_GetState>
 801089a:	4603      	mov	r3, r0
 801089c:	2b01      	cmp	r3, #1
 801089e:	d017      	beq.n	80108d0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108a4:	4a33      	ldr	r2, [pc, #204]	@ (8010974 <I2C_ITError+0x1dc>)
 80108a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2200      	movs	r2, #0
 80108ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7fc f877 	bl	800c9a8 <HAL_DMA_Abort_IT>
 80108ba:	4603      	mov	r3, r0
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d04d      	beq.n	801095c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80108c6:	687a      	ldr	r2, [r7, #4]
 80108c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80108ca:	4610      	mov	r0, r2
 80108cc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80108ce:	e045      	b.n	801095c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	f000 f851 	bl	8010978 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80108d6:	e041      	b.n	801095c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d039      	beq.n	8010954 <I2C_ITError+0x1bc>
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	2b12      	cmp	r3, #18
 80108e4:	d002      	beq.n	80108ec <I2C_ITError+0x154>
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	2b22      	cmp	r3, #34	@ 0x22
 80108ea:	d133      	bne.n	8010954 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80108f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80108fa:	d107      	bne.n	801090c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	681a      	ldr	r2, [r3, #0]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801090a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010910:	4618      	mov	r0, r3
 8010912:	f7fd f9b9 	bl	800dc88 <HAL_DMA_GetState>
 8010916:	4603      	mov	r3, r0
 8010918:	2b01      	cmp	r3, #1
 801091a:	d017      	beq.n	801094c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010920:	4a14      	ldr	r2, [pc, #80]	@ (8010974 <I2C_ITError+0x1dc>)
 8010922:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2200      	movs	r2, #0
 8010928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010930:	4618      	mov	r0, r3
 8010932:	f7fc f839 	bl	800c9a8 <HAL_DMA_Abort_IT>
 8010936:	4603      	mov	r3, r0
 8010938:	2b00      	cmp	r3, #0
 801093a:	d011      	beq.n	8010960 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010942:	687a      	ldr	r2, [r7, #4]
 8010944:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010946:	4610      	mov	r0, r2
 8010948:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801094a:	e009      	b.n	8010960 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f000 f813 	bl	8010978 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010952:	e005      	b.n	8010960 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f000 f80f 	bl	8010978 <I2C_TreatErrorCallback>
  }
}
 801095a:	e002      	b.n	8010962 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801095c:	bf00      	nop
 801095e:	e000      	b.n	8010962 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010960:	bf00      	nop
}
 8010962:	bf00      	nop
 8010964:	3710      	adds	r7, #16
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}
 801096a:	bf00      	nop
 801096c:	ffff0000 	.word	0xffff0000
 8010970:	0800f365 	.word	0x0800f365
 8010974:	08010a0f 	.word	0x08010a0f

08010978 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010986:	b2db      	uxtb	r3, r3
 8010988:	2b60      	cmp	r3, #96	@ 0x60
 801098a:	d10e      	bne.n	80109aa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2220      	movs	r2, #32
 8010990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2200      	movs	r2, #0
 8010998:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2200      	movs	r2, #0
 801099e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f7fe fbae 	bl	800f104 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80109a8:	e009      	b.n	80109be <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2200      	movs	r2, #0
 80109ae:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2200      	movs	r2, #0
 80109b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f7fe fb99 	bl	800f0f0 <HAL_I2C_ErrorCallback>
}
 80109be:	bf00      	nop
 80109c0:	3708      	adds	r7, #8
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}

080109c6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80109c6:	b480      	push	{r7}
 80109c8:	b083      	sub	sp, #12
 80109ca:	af00      	add	r7, sp, #0
 80109cc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	699b      	ldr	r3, [r3, #24]
 80109d4:	f003 0302 	and.w	r3, r3, #2
 80109d8:	2b02      	cmp	r3, #2
 80109da:	d103      	bne.n	80109e4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	2200      	movs	r2, #0
 80109e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	699b      	ldr	r3, [r3, #24]
 80109ea:	f003 0301 	and.w	r3, r3, #1
 80109ee:	2b01      	cmp	r3, #1
 80109f0:	d007      	beq.n	8010a02 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	699a      	ldr	r2, [r3, #24]
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f042 0201 	orr.w	r2, r2, #1
 8010a00:	619a      	str	r2, [r3, #24]
  }
}
 8010a02:	bf00      	nop
 8010a04:	370c      	adds	r7, #12
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr

08010a0e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010a0e:	b580      	push	{r7, lr}
 8010a10:	b084      	sub	sp, #16
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a1a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d003      	beq.n	8010a2c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a28:	2200      	movs	r2, #0
 8010a2a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d003      	beq.n	8010a3c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a38:	2200      	movs	r2, #0
 8010a3a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8010a3c:	68f8      	ldr	r0, [r7, #12]
 8010a3e:	f7ff ff9b 	bl	8010978 <I2C_TreatErrorCallback>
}
 8010a42:	bf00      	nop
 8010a44:	3710      	adds	r7, #16
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}

08010a4a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010a4a:	b580      	push	{r7, lr}
 8010a4c:	b084      	sub	sp, #16
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	60f8      	str	r0, [r7, #12]
 8010a52:	60b9      	str	r1, [r7, #8]
 8010a54:	603b      	str	r3, [r7, #0]
 8010a56:	4613      	mov	r3, r2
 8010a58:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010a5a:	e03b      	b.n	8010ad4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010a5c:	69ba      	ldr	r2, [r7, #24]
 8010a5e:	6839      	ldr	r1, [r7, #0]
 8010a60:	68f8      	ldr	r0, [r7, #12]
 8010a62:	f000 f8d5 	bl	8010c10 <I2C_IsErrorOccurred>
 8010a66:	4603      	mov	r3, r0
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d001      	beq.n	8010a70 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8010a6c:	2301      	movs	r3, #1
 8010a6e:	e041      	b.n	8010af4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a76:	d02d      	beq.n	8010ad4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a78:	f7f8 fd80 	bl	800957c <HAL_GetTick>
 8010a7c:	4602      	mov	r2, r0
 8010a7e:	69bb      	ldr	r3, [r7, #24]
 8010a80:	1ad3      	subs	r3, r2, r3
 8010a82:	683a      	ldr	r2, [r7, #0]
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d302      	bcc.n	8010a8e <I2C_WaitOnFlagUntilTimeout+0x44>
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d122      	bne.n	8010ad4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	699a      	ldr	r2, [r3, #24]
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	4013      	ands	r3, r2
 8010a98:	68ba      	ldr	r2, [r7, #8]
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	bf0c      	ite	eq
 8010a9e:	2301      	moveq	r3, #1
 8010aa0:	2300      	movne	r3, #0
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	461a      	mov	r2, r3
 8010aa6:	79fb      	ldrb	r3, [r7, #7]
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d113      	bne.n	8010ad4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ab0:	f043 0220 	orr.w	r2, r3, #32
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2220      	movs	r2, #32
 8010abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	2200      	movs	r2, #0
 8010acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	e00f      	b.n	8010af4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	699a      	ldr	r2, [r3, #24]
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	4013      	ands	r3, r2
 8010ade:	68ba      	ldr	r2, [r7, #8]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	bf0c      	ite	eq
 8010ae4:	2301      	moveq	r3, #1
 8010ae6:	2300      	movne	r3, #0
 8010ae8:	b2db      	uxtb	r3, r3
 8010aea:	461a      	mov	r2, r3
 8010aec:	79fb      	ldrb	r3, [r7, #7]
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d0b4      	beq.n	8010a5c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010af2:	2300      	movs	r3, #0
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	3710      	adds	r7, #16
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}

08010afc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b084      	sub	sp, #16
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	60f8      	str	r0, [r7, #12]
 8010b04:	60b9      	str	r1, [r7, #8]
 8010b06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010b08:	e033      	b.n	8010b72 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b0a:	687a      	ldr	r2, [r7, #4]
 8010b0c:	68b9      	ldr	r1, [r7, #8]
 8010b0e:	68f8      	ldr	r0, [r7, #12]
 8010b10:	f000 f87e 	bl	8010c10 <I2C_IsErrorOccurred>
 8010b14:	4603      	mov	r3, r0
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d001      	beq.n	8010b1e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	e031      	b.n	8010b82 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b24:	d025      	beq.n	8010b72 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b26:	f7f8 fd29 	bl	800957c <HAL_GetTick>
 8010b2a:	4602      	mov	r2, r0
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	1ad3      	subs	r3, r2, r3
 8010b30:	68ba      	ldr	r2, [r7, #8]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d302      	bcc.n	8010b3c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d11a      	bne.n	8010b72 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	699b      	ldr	r3, [r3, #24]
 8010b42:	f003 0302 	and.w	r3, r3, #2
 8010b46:	2b02      	cmp	r3, #2
 8010b48:	d013      	beq.n	8010b72 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b4e:	f043 0220 	orr.w	r2, r3, #32
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	2220      	movs	r2, #32
 8010b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	2200      	movs	r2, #0
 8010b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010b6e:	2301      	movs	r3, #1
 8010b70:	e007      	b.n	8010b82 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	699b      	ldr	r3, [r3, #24]
 8010b78:	f003 0302 	and.w	r3, r3, #2
 8010b7c:	2b02      	cmp	r3, #2
 8010b7e:	d1c4      	bne.n	8010b0a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8010b80:	2300      	movs	r3, #0
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3710      	adds	r7, #16
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010b8a:	b580      	push	{r7, lr}
 8010b8c:	b084      	sub	sp, #16
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	60f8      	str	r0, [r7, #12]
 8010b92:	60b9      	str	r1, [r7, #8]
 8010b94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010b96:	e02f      	b.n	8010bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b98:	687a      	ldr	r2, [r7, #4]
 8010b9a:	68b9      	ldr	r1, [r7, #8]
 8010b9c:	68f8      	ldr	r0, [r7, #12]
 8010b9e:	f000 f837 	bl	8010c10 <I2C_IsErrorOccurred>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d001      	beq.n	8010bac <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010ba8:	2301      	movs	r3, #1
 8010baa:	e02d      	b.n	8010c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010bac:	f7f8 fce6 	bl	800957c <HAL_GetTick>
 8010bb0:	4602      	mov	r2, r0
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	1ad3      	subs	r3, r2, r3
 8010bb6:	68ba      	ldr	r2, [r7, #8]
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d302      	bcc.n	8010bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d11a      	bne.n	8010bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	699b      	ldr	r3, [r3, #24]
 8010bc8:	f003 0320 	and.w	r3, r3, #32
 8010bcc:	2b20      	cmp	r3, #32
 8010bce:	d013      	beq.n	8010bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010bd4:	f043 0220 	orr.w	r2, r3, #32
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	2220      	movs	r2, #32
 8010be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	2200      	movs	r2, #0
 8010be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	2200      	movs	r2, #0
 8010bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8010bf4:	2301      	movs	r3, #1
 8010bf6:	e007      	b.n	8010c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	699b      	ldr	r3, [r3, #24]
 8010bfe:	f003 0320 	and.w	r3, r3, #32
 8010c02:	2b20      	cmp	r3, #32
 8010c04:	d1c8      	bne.n	8010b98 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010c06:	2300      	movs	r3, #0
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3710      	adds	r7, #16
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b08a      	sub	sp, #40	@ 0x28
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	60f8      	str	r0, [r7, #12]
 8010c18:	60b9      	str	r1, [r7, #8]
 8010c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	699b      	ldr	r3, [r3, #24]
 8010c28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8010c32:	69bb      	ldr	r3, [r7, #24]
 8010c34:	f003 0310 	and.w	r3, r3, #16
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d068      	beq.n	8010d0e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	2210      	movs	r2, #16
 8010c42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010c44:	e049      	b.n	8010cda <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010c46:	68bb      	ldr	r3, [r7, #8]
 8010c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c4c:	d045      	beq.n	8010cda <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010c4e:	f7f8 fc95 	bl	800957c <HAL_GetTick>
 8010c52:	4602      	mov	r2, r0
 8010c54:	69fb      	ldr	r3, [r7, #28]
 8010c56:	1ad3      	subs	r3, r2, r3
 8010c58:	68ba      	ldr	r2, [r7, #8]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d302      	bcc.n	8010c64 <I2C_IsErrorOccurred+0x54>
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d13a      	bne.n	8010cda <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	685b      	ldr	r3, [r3, #4]
 8010c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010c6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010c76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	699b      	ldr	r3, [r3, #24]
 8010c7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010c82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010c86:	d121      	bne.n	8010ccc <I2C_IsErrorOccurred+0xbc>
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010c8e:	d01d      	beq.n	8010ccc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8010c90:	7cfb      	ldrb	r3, [r7, #19]
 8010c92:	2b20      	cmp	r3, #32
 8010c94:	d01a      	beq.n	8010ccc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	685a      	ldr	r2, [r3, #4]
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010ca4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8010ca6:	f7f8 fc69 	bl	800957c <HAL_GetTick>
 8010caa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010cac:	e00e      	b.n	8010ccc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8010cae:	f7f8 fc65 	bl	800957c <HAL_GetTick>
 8010cb2:	4602      	mov	r2, r0
 8010cb4:	69fb      	ldr	r3, [r7, #28]
 8010cb6:	1ad3      	subs	r3, r2, r3
 8010cb8:	2b19      	cmp	r3, #25
 8010cba:	d907      	bls.n	8010ccc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8010cbc:	6a3b      	ldr	r3, [r7, #32]
 8010cbe:	f043 0320 	orr.w	r3, r3, #32
 8010cc2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8010cca:	e006      	b.n	8010cda <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	699b      	ldr	r3, [r3, #24]
 8010cd2:	f003 0320 	and.w	r3, r3, #32
 8010cd6:	2b20      	cmp	r3, #32
 8010cd8:	d1e9      	bne.n	8010cae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	699b      	ldr	r3, [r3, #24]
 8010ce0:	f003 0320 	and.w	r3, r3, #32
 8010ce4:	2b20      	cmp	r3, #32
 8010ce6:	d003      	beq.n	8010cf0 <I2C_IsErrorOccurred+0xe0>
 8010ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d0aa      	beq.n	8010c46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8010cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d103      	bne.n	8010d00 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	2220      	movs	r2, #32
 8010cfe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8010d00:	6a3b      	ldr	r3, [r7, #32]
 8010d02:	f043 0304 	orr.w	r3, r3, #4
 8010d06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8010d08:	2301      	movs	r3, #1
 8010d0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	699b      	ldr	r3, [r3, #24]
 8010d14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8010d16:	69bb      	ldr	r3, [r7, #24]
 8010d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d00b      	beq.n	8010d38 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010d20:	6a3b      	ldr	r3, [r7, #32]
 8010d22:	f043 0301 	orr.w	r3, r3, #1
 8010d26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010d30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010d32:	2301      	movs	r3, #1
 8010d34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010d38:	69bb      	ldr	r3, [r7, #24]
 8010d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d00b      	beq.n	8010d5a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010d42:	6a3b      	ldr	r3, [r7, #32]
 8010d44:	f043 0308 	orr.w	r3, r3, #8
 8010d48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010d52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010d54:	2301      	movs	r3, #1
 8010d56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010d5a:	69bb      	ldr	r3, [r7, #24]
 8010d5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d00b      	beq.n	8010d7c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010d64:	6a3b      	ldr	r3, [r7, #32]
 8010d66:	f043 0302 	orr.w	r3, r3, #2
 8010d6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010d76:	2301      	movs	r3, #1
 8010d78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8010d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d01c      	beq.n	8010dbe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010d84:	68f8      	ldr	r0, [r7, #12]
 8010d86:	f7ff fe1e 	bl	80109c6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	6859      	ldr	r1, [r3, #4]
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	681a      	ldr	r2, [r3, #0]
 8010d94:	4b0d      	ldr	r3, [pc, #52]	@ (8010dcc <I2C_IsErrorOccurred+0x1bc>)
 8010d96:	400b      	ands	r3, r1
 8010d98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010d9e:	6a3b      	ldr	r3, [r7, #32]
 8010da0:	431a      	orrs	r2, r3
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	2220      	movs	r2, #32
 8010daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	2200      	movs	r2, #0
 8010db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	2200      	movs	r2, #0
 8010dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8010dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3728      	adds	r7, #40	@ 0x28
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	fe00e800 	.word	0xfe00e800

08010dd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b087      	sub	sp, #28
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	60f8      	str	r0, [r7, #12]
 8010dd8:	607b      	str	r3, [r7, #4]
 8010dda:	460b      	mov	r3, r1
 8010ddc:	817b      	strh	r3, [r7, #10]
 8010dde:	4613      	mov	r3, r2
 8010de0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010de2:	897b      	ldrh	r3, [r7, #10]
 8010de4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010de8:	7a7b      	ldrb	r3, [r7, #9]
 8010dea:	041b      	lsls	r3, r3, #16
 8010dec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010df0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010df6:	6a3b      	ldr	r3, [r7, #32]
 8010df8:	4313      	orrs	r3, r2
 8010dfa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010dfe:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	685a      	ldr	r2, [r3, #4]
 8010e06:	6a3b      	ldr	r3, [r7, #32]
 8010e08:	0d5b      	lsrs	r3, r3, #21
 8010e0a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8010e0e:	4b08      	ldr	r3, [pc, #32]	@ (8010e30 <I2C_TransferConfig+0x60>)
 8010e10:	430b      	orrs	r3, r1
 8010e12:	43db      	mvns	r3, r3
 8010e14:	ea02 0103 	and.w	r1, r2, r3
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	697a      	ldr	r2, [r7, #20]
 8010e1e:	430a      	orrs	r2, r1
 8010e20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010e22:	bf00      	nop
 8010e24:	371c      	adds	r7, #28
 8010e26:	46bd      	mov	sp, r7
 8010e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2c:	4770      	bx	lr
 8010e2e:	bf00      	nop
 8010e30:	03ff63ff 	.word	0x03ff63ff

08010e34 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b085      	sub	sp, #20
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
 8010e3c:	460b      	mov	r3, r1
 8010e3e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010e40:	2300      	movs	r3, #0
 8010e42:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e48:	4a39      	ldr	r2, [pc, #228]	@ (8010f30 <I2C_Enable_IRQ+0xfc>)
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	d032      	beq.n	8010eb4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010e52:	4a38      	ldr	r2, [pc, #224]	@ (8010f34 <I2C_Enable_IRQ+0x100>)
 8010e54:	4293      	cmp	r3, r2
 8010e56:	d02d      	beq.n	8010eb4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010e5c:	4a36      	ldr	r2, [pc, #216]	@ (8010f38 <I2C_Enable_IRQ+0x104>)
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d028      	beq.n	8010eb4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010e62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	da03      	bge.n	8010e72 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010e70:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010e72:	887b      	ldrh	r3, [r7, #2]
 8010e74:	f003 0301 	and.w	r3, r3, #1
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d003      	beq.n	8010e84 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010e82:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010e84:	887b      	ldrh	r3, [r7, #2]
 8010e86:	f003 0302 	and.w	r3, r3, #2
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d003      	beq.n	8010e96 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010e94:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010e96:	887b      	ldrh	r3, [r7, #2]
 8010e98:	2b10      	cmp	r3, #16
 8010e9a:	d103      	bne.n	8010ea4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010ea2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010ea4:	887b      	ldrh	r3, [r7, #2]
 8010ea6:	2b20      	cmp	r3, #32
 8010ea8:	d133      	bne.n	8010f12 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	f043 0320 	orr.w	r3, r3, #32
 8010eb0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010eb2:	e02e      	b.n	8010f12 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010eb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	da03      	bge.n	8010ec4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010ec2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010ec4:	887b      	ldrh	r3, [r7, #2]
 8010ec6:	f003 0301 	and.w	r3, r3, #1
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d003      	beq.n	8010ed6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010ed4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010ed6:	887b      	ldrh	r3, [r7, #2]
 8010ed8:	f003 0302 	and.w	r3, r3, #2
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d003      	beq.n	8010ee8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010ee6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010ee8:	887b      	ldrh	r3, [r7, #2]
 8010eea:	2b10      	cmp	r3, #16
 8010eec:	d103      	bne.n	8010ef6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010ef4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010ef6:	887b      	ldrh	r3, [r7, #2]
 8010ef8:	2b20      	cmp	r3, #32
 8010efa:	d103      	bne.n	8010f04 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010f02:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010f04:	887b      	ldrh	r3, [r7, #2]
 8010f06:	2b40      	cmp	r3, #64	@ 0x40
 8010f08:	d103      	bne.n	8010f12 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f10:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	6819      	ldr	r1, [r3, #0]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	68fa      	ldr	r2, [r7, #12]
 8010f1e:	430a      	orrs	r2, r1
 8010f20:	601a      	str	r2, [r3, #0]
}
 8010f22:	bf00      	nop
 8010f24:	3714      	adds	r7, #20
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr
 8010f2e:	bf00      	nop
 8010f30:	0800f557 	.word	0x0800f557
 8010f34:	0800f979 	.word	0x0800f979
 8010f38:	0800f72d 	.word	0x0800f72d

08010f3c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b085      	sub	sp, #20
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
 8010f44:	460b      	mov	r3, r1
 8010f46:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010f4c:	887b      	ldrh	r3, [r7, #2]
 8010f4e:	f003 0301 	and.w	r3, r3, #1
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d00f      	beq.n	8010f76 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8010f5c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010f64:	b2db      	uxtb	r3, r3
 8010f66:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010f6a:	2b28      	cmp	r3, #40	@ 0x28
 8010f6c:	d003      	beq.n	8010f76 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010f74:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010f76:	887b      	ldrh	r3, [r7, #2]
 8010f78:	f003 0302 	and.w	r3, r3, #2
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d00f      	beq.n	8010fa0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8010f86:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010f8e:	b2db      	uxtb	r3, r3
 8010f90:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010f94:	2b28      	cmp	r3, #40	@ 0x28
 8010f96:	d003      	beq.n	8010fa0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010f9e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010fa0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	da03      	bge.n	8010fb0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010fae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010fb0:	887b      	ldrh	r3, [r7, #2]
 8010fb2:	2b10      	cmp	r3, #16
 8010fb4:	d103      	bne.n	8010fbe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010fbc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010fbe:	887b      	ldrh	r3, [r7, #2]
 8010fc0:	2b20      	cmp	r3, #32
 8010fc2:	d103      	bne.n	8010fcc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	f043 0320 	orr.w	r3, r3, #32
 8010fca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010fcc:	887b      	ldrh	r3, [r7, #2]
 8010fce:	2b40      	cmp	r3, #64	@ 0x40
 8010fd0:	d103      	bne.n	8010fda <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fd8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	6819      	ldr	r1, [r3, #0]
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	43da      	mvns	r2, r3
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	400a      	ands	r2, r1
 8010fea:	601a      	str	r2, [r3, #0]
}
 8010fec:	bf00      	nop
 8010fee:	3714      	adds	r7, #20
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr

08010ff8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	b083      	sub	sp, #12
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011008:	b2db      	uxtb	r3, r3
 801100a:	2b20      	cmp	r3, #32
 801100c:	d138      	bne.n	8011080 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011014:	2b01      	cmp	r3, #1
 8011016:	d101      	bne.n	801101c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8011018:	2302      	movs	r3, #2
 801101a:	e032      	b.n	8011082 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2201      	movs	r2, #1
 8011020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2224      	movs	r2, #36	@ 0x24
 8011028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	681a      	ldr	r2, [r3, #0]
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	f022 0201 	bic.w	r2, r2, #1
 801103a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	681a      	ldr	r2, [r3, #0]
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801104a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	6819      	ldr	r1, [r3, #0]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	683a      	ldr	r2, [r7, #0]
 8011058:	430a      	orrs	r2, r1
 801105a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	681a      	ldr	r2, [r3, #0]
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	f042 0201 	orr.w	r2, r2, #1
 801106a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2220      	movs	r2, #32
 8011070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2200      	movs	r2, #0
 8011078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801107c:	2300      	movs	r3, #0
 801107e:	e000      	b.n	8011082 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011080:	2302      	movs	r3, #2
  }
}
 8011082:	4618      	mov	r0, r3
 8011084:	370c      	adds	r7, #12
 8011086:	46bd      	mov	sp, r7
 8011088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108c:	4770      	bx	lr

0801108e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801108e:	b480      	push	{r7}
 8011090:	b085      	sub	sp, #20
 8011092:	af00      	add	r7, sp, #0
 8011094:	6078      	str	r0, [r7, #4]
 8011096:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	2b20      	cmp	r3, #32
 80110a2:	d139      	bne.n	8011118 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80110aa:	2b01      	cmp	r3, #1
 80110ac:	d101      	bne.n	80110b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80110ae:	2302      	movs	r3, #2
 80110b0:	e033      	b.n	801111a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2201      	movs	r2, #1
 80110b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2224      	movs	r2, #36	@ 0x24
 80110be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	681a      	ldr	r2, [r3, #0]
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	f022 0201 	bic.w	r2, r2, #1
 80110d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80110e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	021b      	lsls	r3, r3, #8
 80110e6:	68fa      	ldr	r2, [r7, #12]
 80110e8:	4313      	orrs	r3, r2
 80110ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	68fa      	ldr	r2, [r7, #12]
 80110f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	681a      	ldr	r2, [r3, #0]
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	f042 0201 	orr.w	r2, r2, #1
 8011102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2220      	movs	r2, #32
 8011108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2200      	movs	r2, #0
 8011110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8011114:	2300      	movs	r3, #0
 8011116:	e000      	b.n	801111a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011118:	2302      	movs	r3, #2
  }
}
 801111a:	4618      	mov	r0, r3
 801111c:	3714      	adds	r7, #20
 801111e:	46bd      	mov	sp, r7
 8011120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011124:	4770      	bx	lr
	...

08011128 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8011128:	b480      	push	{r7}
 801112a:	b085      	sub	sp, #20
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011130:	4b0d      	ldr	r3, [pc, #52]	@ (8011168 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8011132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011136:	4a0c      	ldr	r2, [pc, #48]	@ (8011168 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8011138:	f043 0302 	orr.w	r3, r3, #2
 801113c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8011140:	4b09      	ldr	r3, [pc, #36]	@ (8011168 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8011142:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011146:	f003 0302 	and.w	r3, r3, #2
 801114a:	60fb      	str	r3, [r7, #12]
 801114c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 801114e:	4b07      	ldr	r3, [pc, #28]	@ (801116c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8011150:	685a      	ldr	r2, [r3, #4]
 8011152:	4906      	ldr	r1, [pc, #24]	@ (801116c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	4313      	orrs	r3, r2
 8011158:	604b      	str	r3, [r1, #4]
}
 801115a:	bf00      	nop
 801115c:	3714      	adds	r7, #20
 801115e:	46bd      	mov	sp, r7
 8011160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011164:	4770      	bx	lr
 8011166:	bf00      	nop
 8011168:	58024400 	.word	0x58024400
 801116c:	58000400 	.word	0x58000400

08011170 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b084      	sub	sp, #16
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8011178:	4b19      	ldr	r3, [pc, #100]	@ (80111e0 <HAL_PWREx_ConfigSupply+0x70>)
 801117a:	68db      	ldr	r3, [r3, #12]
 801117c:	f003 0304 	and.w	r3, r3, #4
 8011180:	2b04      	cmp	r3, #4
 8011182:	d00a      	beq.n	801119a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8011184:	4b16      	ldr	r3, [pc, #88]	@ (80111e0 <HAL_PWREx_ConfigSupply+0x70>)
 8011186:	68db      	ldr	r3, [r3, #12]
 8011188:	f003 0307 	and.w	r3, r3, #7
 801118c:	687a      	ldr	r2, [r7, #4]
 801118e:	429a      	cmp	r2, r3
 8011190:	d001      	beq.n	8011196 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8011192:	2301      	movs	r3, #1
 8011194:	e01f      	b.n	80111d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8011196:	2300      	movs	r3, #0
 8011198:	e01d      	b.n	80111d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801119a:	4b11      	ldr	r3, [pc, #68]	@ (80111e0 <HAL_PWREx_ConfigSupply+0x70>)
 801119c:	68db      	ldr	r3, [r3, #12]
 801119e:	f023 0207 	bic.w	r2, r3, #7
 80111a2:	490f      	ldr	r1, [pc, #60]	@ (80111e0 <HAL_PWREx_ConfigSupply+0x70>)
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	4313      	orrs	r3, r2
 80111a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80111aa:	f7f8 f9e7 	bl	800957c <HAL_GetTick>
 80111ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80111b0:	e009      	b.n	80111c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80111b2:	f7f8 f9e3 	bl	800957c <HAL_GetTick>
 80111b6:	4602      	mov	r2, r0
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	1ad3      	subs	r3, r2, r3
 80111bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80111c0:	d901      	bls.n	80111c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80111c2:	2301      	movs	r3, #1
 80111c4:	e007      	b.n	80111d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80111c6:	4b06      	ldr	r3, [pc, #24]	@ (80111e0 <HAL_PWREx_ConfigSupply+0x70>)
 80111c8:	685b      	ldr	r3, [r3, #4]
 80111ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80111ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80111d2:	d1ee      	bne.n	80111b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80111d4:	2300      	movs	r3, #0
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3710      	adds	r7, #16
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
 80111de:	bf00      	nop
 80111e0:	58024800 	.word	0x58024800

080111e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b08c      	sub	sp, #48	@ 0x30
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d101      	bne.n	80111f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80111f2:	2301      	movs	r3, #1
 80111f4:	e3c8      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	f003 0301 	and.w	r3, r3, #1
 80111fe:	2b00      	cmp	r3, #0
 8011200:	f000 8087 	beq.w	8011312 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011204:	4b88      	ldr	r3, [pc, #544]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 8011206:	691b      	ldr	r3, [r3, #16]
 8011208:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801120e:	4b86      	ldr	r3, [pc, #536]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 8011210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011212:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8011214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011216:	2b10      	cmp	r3, #16
 8011218:	d007      	beq.n	801122a <HAL_RCC_OscConfig+0x46>
 801121a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801121c:	2b18      	cmp	r3, #24
 801121e:	d110      	bne.n	8011242 <HAL_RCC_OscConfig+0x5e>
 8011220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011222:	f003 0303 	and.w	r3, r3, #3
 8011226:	2b02      	cmp	r3, #2
 8011228:	d10b      	bne.n	8011242 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801122a:	4b7f      	ldr	r3, [pc, #508]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011232:	2b00      	cmp	r3, #0
 8011234:	d06c      	beq.n	8011310 <HAL_RCC_OscConfig+0x12c>
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d168      	bne.n	8011310 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 801123e:	2301      	movs	r3, #1
 8011240:	e3a2      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	685b      	ldr	r3, [r3, #4]
 8011246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801124a:	d106      	bne.n	801125a <HAL_RCC_OscConfig+0x76>
 801124c:	4b76      	ldr	r3, [pc, #472]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	4a75      	ldr	r2, [pc, #468]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 8011252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011256:	6013      	str	r3, [r2, #0]
 8011258:	e02e      	b.n	80112b8 <HAL_RCC_OscConfig+0xd4>
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d10c      	bne.n	801127c <HAL_RCC_OscConfig+0x98>
 8011262:	4b71      	ldr	r3, [pc, #452]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	4a70      	ldr	r2, [pc, #448]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 8011268:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801126c:	6013      	str	r3, [r2, #0]
 801126e:	4b6e      	ldr	r3, [pc, #440]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	4a6d      	ldr	r2, [pc, #436]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 8011274:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011278:	6013      	str	r3, [r2, #0]
 801127a:	e01d      	b.n	80112b8 <HAL_RCC_OscConfig+0xd4>
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	685b      	ldr	r3, [r3, #4]
 8011280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011284:	d10c      	bne.n	80112a0 <HAL_RCC_OscConfig+0xbc>
 8011286:	4b68      	ldr	r3, [pc, #416]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	4a67      	ldr	r2, [pc, #412]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 801128c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011290:	6013      	str	r3, [r2, #0]
 8011292:	4b65      	ldr	r3, [pc, #404]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	4a64      	ldr	r2, [pc, #400]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 8011298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801129c:	6013      	str	r3, [r2, #0]
 801129e:	e00b      	b.n	80112b8 <HAL_RCC_OscConfig+0xd4>
 80112a0:	4b61      	ldr	r3, [pc, #388]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	4a60      	ldr	r2, [pc, #384]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 80112a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80112aa:	6013      	str	r3, [r2, #0]
 80112ac:	4b5e      	ldr	r3, [pc, #376]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	4a5d      	ldr	r2, [pc, #372]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 80112b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80112b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d013      	beq.n	80112e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112c0:	f7f8 f95c 	bl	800957c <HAL_GetTick>
 80112c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80112c6:	e008      	b.n	80112da <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80112c8:	f7f8 f958 	bl	800957c <HAL_GetTick>
 80112cc:	4602      	mov	r2, r0
 80112ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112d0:	1ad3      	subs	r3, r2, r3
 80112d2:	2b64      	cmp	r3, #100	@ 0x64
 80112d4:	d901      	bls.n	80112da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80112d6:	2303      	movs	r3, #3
 80112d8:	e356      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80112da:	4b53      	ldr	r3, [pc, #332]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d0f0      	beq.n	80112c8 <HAL_RCC_OscConfig+0xe4>
 80112e6:	e014      	b.n	8011312 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112e8:	f7f8 f948 	bl	800957c <HAL_GetTick>
 80112ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80112ee:	e008      	b.n	8011302 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80112f0:	f7f8 f944 	bl	800957c <HAL_GetTick>
 80112f4:	4602      	mov	r2, r0
 80112f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112f8:	1ad3      	subs	r3, r2, r3
 80112fa:	2b64      	cmp	r3, #100	@ 0x64
 80112fc:	d901      	bls.n	8011302 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80112fe:	2303      	movs	r3, #3
 8011300:	e342      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011302:	4b49      	ldr	r3, [pc, #292]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801130a:	2b00      	cmp	r3, #0
 801130c:	d1f0      	bne.n	80112f0 <HAL_RCC_OscConfig+0x10c>
 801130e:	e000      	b.n	8011312 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	f003 0302 	and.w	r3, r3, #2
 801131a:	2b00      	cmp	r3, #0
 801131c:	f000 808c 	beq.w	8011438 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011320:	4b41      	ldr	r3, [pc, #260]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 8011322:	691b      	ldr	r3, [r3, #16]
 8011324:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011328:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801132a:	4b3f      	ldr	r3, [pc, #252]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 801132c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801132e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8011330:	6a3b      	ldr	r3, [r7, #32]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d007      	beq.n	8011346 <HAL_RCC_OscConfig+0x162>
 8011336:	6a3b      	ldr	r3, [r7, #32]
 8011338:	2b18      	cmp	r3, #24
 801133a:	d137      	bne.n	80113ac <HAL_RCC_OscConfig+0x1c8>
 801133c:	69fb      	ldr	r3, [r7, #28]
 801133e:	f003 0303 	and.w	r3, r3, #3
 8011342:	2b00      	cmp	r3, #0
 8011344:	d132      	bne.n	80113ac <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011346:	4b38      	ldr	r3, [pc, #224]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f003 0304 	and.w	r3, r3, #4
 801134e:	2b00      	cmp	r3, #0
 8011350:	d005      	beq.n	801135e <HAL_RCC_OscConfig+0x17a>
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	68db      	ldr	r3, [r3, #12]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d101      	bne.n	801135e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801135a:	2301      	movs	r3, #1
 801135c:	e314      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801135e:	4b32      	ldr	r3, [pc, #200]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f023 0219 	bic.w	r2, r3, #25
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	68db      	ldr	r3, [r3, #12]
 801136a:	492f      	ldr	r1, [pc, #188]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 801136c:	4313      	orrs	r3, r2
 801136e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011370:	f7f8 f904 	bl	800957c <HAL_GetTick>
 8011374:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011376:	e008      	b.n	801138a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011378:	f7f8 f900 	bl	800957c <HAL_GetTick>
 801137c:	4602      	mov	r2, r0
 801137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011380:	1ad3      	subs	r3, r2, r3
 8011382:	2b02      	cmp	r3, #2
 8011384:	d901      	bls.n	801138a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8011386:	2303      	movs	r3, #3
 8011388:	e2fe      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801138a:	4b27      	ldr	r3, [pc, #156]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	f003 0304 	and.w	r3, r3, #4
 8011392:	2b00      	cmp	r3, #0
 8011394:	d0f0      	beq.n	8011378 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011396:	4b24      	ldr	r3, [pc, #144]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 8011398:	685b      	ldr	r3, [r3, #4]
 801139a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	691b      	ldr	r3, [r3, #16]
 80113a2:	061b      	lsls	r3, r3, #24
 80113a4:	4920      	ldr	r1, [pc, #128]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 80113a6:	4313      	orrs	r3, r2
 80113a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80113aa:	e045      	b.n	8011438 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d026      	beq.n	8011402 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80113b4:	4b1c      	ldr	r3, [pc, #112]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	f023 0219 	bic.w	r2, r3, #25
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	68db      	ldr	r3, [r3, #12]
 80113c0:	4919      	ldr	r1, [pc, #100]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 80113c2:	4313      	orrs	r3, r2
 80113c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80113c6:	f7f8 f8d9 	bl	800957c <HAL_GetTick>
 80113ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80113cc:	e008      	b.n	80113e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80113ce:	f7f8 f8d5 	bl	800957c <HAL_GetTick>
 80113d2:	4602      	mov	r2, r0
 80113d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113d6:	1ad3      	subs	r3, r2, r3
 80113d8:	2b02      	cmp	r3, #2
 80113da:	d901      	bls.n	80113e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80113dc:	2303      	movs	r3, #3
 80113de:	e2d3      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80113e0:	4b11      	ldr	r3, [pc, #68]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	f003 0304 	and.w	r3, r3, #4
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d0f0      	beq.n	80113ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80113ec:	4b0e      	ldr	r3, [pc, #56]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 80113ee:	685b      	ldr	r3, [r3, #4]
 80113f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	691b      	ldr	r3, [r3, #16]
 80113f8:	061b      	lsls	r3, r3, #24
 80113fa:	490b      	ldr	r1, [pc, #44]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 80113fc:	4313      	orrs	r3, r2
 80113fe:	604b      	str	r3, [r1, #4]
 8011400:	e01a      	b.n	8011438 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011402:	4b09      	ldr	r3, [pc, #36]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	4a08      	ldr	r2, [pc, #32]	@ (8011428 <HAL_RCC_OscConfig+0x244>)
 8011408:	f023 0301 	bic.w	r3, r3, #1
 801140c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801140e:	f7f8 f8b5 	bl	800957c <HAL_GetTick>
 8011412:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011414:	e00a      	b.n	801142c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011416:	f7f8 f8b1 	bl	800957c <HAL_GetTick>
 801141a:	4602      	mov	r2, r0
 801141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801141e:	1ad3      	subs	r3, r2, r3
 8011420:	2b02      	cmp	r3, #2
 8011422:	d903      	bls.n	801142c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8011424:	2303      	movs	r3, #3
 8011426:	e2af      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
 8011428:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801142c:	4b96      	ldr	r3, [pc, #600]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	f003 0304 	and.w	r3, r3, #4
 8011434:	2b00      	cmp	r3, #0
 8011436:	d1ee      	bne.n	8011416 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f003 0310 	and.w	r3, r3, #16
 8011440:	2b00      	cmp	r3, #0
 8011442:	d06a      	beq.n	801151a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011444:	4b90      	ldr	r3, [pc, #576]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 8011446:	691b      	ldr	r3, [r3, #16]
 8011448:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801144c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801144e:	4b8e      	ldr	r3, [pc, #568]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 8011450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011452:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8011454:	69bb      	ldr	r3, [r7, #24]
 8011456:	2b08      	cmp	r3, #8
 8011458:	d007      	beq.n	801146a <HAL_RCC_OscConfig+0x286>
 801145a:	69bb      	ldr	r3, [r7, #24]
 801145c:	2b18      	cmp	r3, #24
 801145e:	d11b      	bne.n	8011498 <HAL_RCC_OscConfig+0x2b4>
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	f003 0303 	and.w	r3, r3, #3
 8011466:	2b01      	cmp	r3, #1
 8011468:	d116      	bne.n	8011498 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801146a:	4b87      	ldr	r3, [pc, #540]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011472:	2b00      	cmp	r3, #0
 8011474:	d005      	beq.n	8011482 <HAL_RCC_OscConfig+0x29e>
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	69db      	ldr	r3, [r3, #28]
 801147a:	2b80      	cmp	r3, #128	@ 0x80
 801147c:	d001      	beq.n	8011482 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801147e:	2301      	movs	r3, #1
 8011480:	e282      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011482:	4b81      	ldr	r3, [pc, #516]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 8011484:	68db      	ldr	r3, [r3, #12]
 8011486:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6a1b      	ldr	r3, [r3, #32]
 801148e:	061b      	lsls	r3, r3, #24
 8011490:	497d      	ldr	r1, [pc, #500]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 8011492:	4313      	orrs	r3, r2
 8011494:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011496:	e040      	b.n	801151a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	69db      	ldr	r3, [r3, #28]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d023      	beq.n	80114e8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80114a0:	4b79      	ldr	r3, [pc, #484]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	4a78      	ldr	r2, [pc, #480]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 80114a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80114ac:	f7f8 f866 	bl	800957c <HAL_GetTick>
 80114b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80114b2:	e008      	b.n	80114c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80114b4:	f7f8 f862 	bl	800957c <HAL_GetTick>
 80114b8:	4602      	mov	r2, r0
 80114ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114bc:	1ad3      	subs	r3, r2, r3
 80114be:	2b02      	cmp	r3, #2
 80114c0:	d901      	bls.n	80114c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80114c2:	2303      	movs	r3, #3
 80114c4:	e260      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80114c6:	4b70      	ldr	r3, [pc, #448]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d0f0      	beq.n	80114b4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80114d2:	4b6d      	ldr	r3, [pc, #436]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 80114d4:	68db      	ldr	r3, [r3, #12]
 80114d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6a1b      	ldr	r3, [r3, #32]
 80114de:	061b      	lsls	r3, r3, #24
 80114e0:	4969      	ldr	r1, [pc, #420]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 80114e2:	4313      	orrs	r3, r2
 80114e4:	60cb      	str	r3, [r1, #12]
 80114e6:	e018      	b.n	801151a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80114e8:	4b67      	ldr	r3, [pc, #412]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	4a66      	ldr	r2, [pc, #408]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 80114ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80114f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80114f4:	f7f8 f842 	bl	800957c <HAL_GetTick>
 80114f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80114fa:	e008      	b.n	801150e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80114fc:	f7f8 f83e 	bl	800957c <HAL_GetTick>
 8011500:	4602      	mov	r2, r0
 8011502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011504:	1ad3      	subs	r3, r2, r3
 8011506:	2b02      	cmp	r3, #2
 8011508:	d901      	bls.n	801150e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 801150a:	2303      	movs	r3, #3
 801150c:	e23c      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801150e:	4b5e      	ldr	r3, [pc, #376]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011516:	2b00      	cmp	r3, #0
 8011518:	d1f0      	bne.n	80114fc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	f003 0308 	and.w	r3, r3, #8
 8011522:	2b00      	cmp	r3, #0
 8011524:	d036      	beq.n	8011594 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	695b      	ldr	r3, [r3, #20]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d019      	beq.n	8011562 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801152e:	4b56      	ldr	r3, [pc, #344]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 8011530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011532:	4a55      	ldr	r2, [pc, #340]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 8011534:	f043 0301 	orr.w	r3, r3, #1
 8011538:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801153a:	f7f8 f81f 	bl	800957c <HAL_GetTick>
 801153e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011540:	e008      	b.n	8011554 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011542:	f7f8 f81b 	bl	800957c <HAL_GetTick>
 8011546:	4602      	mov	r2, r0
 8011548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801154a:	1ad3      	subs	r3, r2, r3
 801154c:	2b02      	cmp	r3, #2
 801154e:	d901      	bls.n	8011554 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8011550:	2303      	movs	r3, #3
 8011552:	e219      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011554:	4b4c      	ldr	r3, [pc, #304]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 8011556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011558:	f003 0302 	and.w	r3, r3, #2
 801155c:	2b00      	cmp	r3, #0
 801155e:	d0f0      	beq.n	8011542 <HAL_RCC_OscConfig+0x35e>
 8011560:	e018      	b.n	8011594 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011562:	4b49      	ldr	r3, [pc, #292]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 8011564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011566:	4a48      	ldr	r2, [pc, #288]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 8011568:	f023 0301 	bic.w	r3, r3, #1
 801156c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801156e:	f7f8 f805 	bl	800957c <HAL_GetTick>
 8011572:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011574:	e008      	b.n	8011588 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011576:	f7f8 f801 	bl	800957c <HAL_GetTick>
 801157a:	4602      	mov	r2, r0
 801157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801157e:	1ad3      	subs	r3, r2, r3
 8011580:	2b02      	cmp	r3, #2
 8011582:	d901      	bls.n	8011588 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8011584:	2303      	movs	r3, #3
 8011586:	e1ff      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011588:	4b3f      	ldr	r3, [pc, #252]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 801158a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801158c:	f003 0302 	and.w	r3, r3, #2
 8011590:	2b00      	cmp	r3, #0
 8011592:	d1f0      	bne.n	8011576 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	f003 0320 	and.w	r3, r3, #32
 801159c:	2b00      	cmp	r3, #0
 801159e:	d036      	beq.n	801160e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	699b      	ldr	r3, [r3, #24]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d019      	beq.n	80115dc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80115a8:	4b37      	ldr	r3, [pc, #220]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	4a36      	ldr	r2, [pc, #216]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 80115ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80115b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80115b4:	f7f7 ffe2 	bl	800957c <HAL_GetTick>
 80115b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80115ba:	e008      	b.n	80115ce <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80115bc:	f7f7 ffde 	bl	800957c <HAL_GetTick>
 80115c0:	4602      	mov	r2, r0
 80115c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c4:	1ad3      	subs	r3, r2, r3
 80115c6:	2b02      	cmp	r3, #2
 80115c8:	d901      	bls.n	80115ce <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80115ca:	2303      	movs	r3, #3
 80115cc:	e1dc      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80115ce:	4b2e      	ldr	r3, [pc, #184]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d0f0      	beq.n	80115bc <HAL_RCC_OscConfig+0x3d8>
 80115da:	e018      	b.n	801160e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80115dc:	4b2a      	ldr	r3, [pc, #168]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	4a29      	ldr	r2, [pc, #164]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 80115e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80115e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80115e8:	f7f7 ffc8 	bl	800957c <HAL_GetTick>
 80115ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80115ee:	e008      	b.n	8011602 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80115f0:	f7f7 ffc4 	bl	800957c <HAL_GetTick>
 80115f4:	4602      	mov	r2, r0
 80115f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115f8:	1ad3      	subs	r3, r2, r3
 80115fa:	2b02      	cmp	r3, #2
 80115fc:	d901      	bls.n	8011602 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80115fe:	2303      	movs	r3, #3
 8011600:	e1c2      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011602:	4b21      	ldr	r3, [pc, #132]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801160a:	2b00      	cmp	r3, #0
 801160c:	d1f0      	bne.n	80115f0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	f003 0304 	and.w	r3, r3, #4
 8011616:	2b00      	cmp	r3, #0
 8011618:	f000 8086 	beq.w	8011728 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801161c:	4b1b      	ldr	r3, [pc, #108]	@ (801168c <HAL_RCC_OscConfig+0x4a8>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	4a1a      	ldr	r2, [pc, #104]	@ (801168c <HAL_RCC_OscConfig+0x4a8>)
 8011622:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011626:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011628:	f7f7 ffa8 	bl	800957c <HAL_GetTick>
 801162c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801162e:	e008      	b.n	8011642 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011630:	f7f7 ffa4 	bl	800957c <HAL_GetTick>
 8011634:	4602      	mov	r2, r0
 8011636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011638:	1ad3      	subs	r3, r2, r3
 801163a:	2b64      	cmp	r3, #100	@ 0x64
 801163c:	d901      	bls.n	8011642 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 801163e:	2303      	movs	r3, #3
 8011640:	e1a2      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011642:	4b12      	ldr	r3, [pc, #72]	@ (801168c <HAL_RCC_OscConfig+0x4a8>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801164a:	2b00      	cmp	r3, #0
 801164c:	d0f0      	beq.n	8011630 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	689b      	ldr	r3, [r3, #8]
 8011652:	2b01      	cmp	r3, #1
 8011654:	d106      	bne.n	8011664 <HAL_RCC_OscConfig+0x480>
 8011656:	4b0c      	ldr	r3, [pc, #48]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 8011658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801165a:	4a0b      	ldr	r2, [pc, #44]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 801165c:	f043 0301 	orr.w	r3, r3, #1
 8011660:	6713      	str	r3, [r2, #112]	@ 0x70
 8011662:	e032      	b.n	80116ca <HAL_RCC_OscConfig+0x4e6>
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	689b      	ldr	r3, [r3, #8]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d111      	bne.n	8011690 <HAL_RCC_OscConfig+0x4ac>
 801166c:	4b06      	ldr	r3, [pc, #24]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 801166e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011670:	4a05      	ldr	r2, [pc, #20]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 8011672:	f023 0301 	bic.w	r3, r3, #1
 8011676:	6713      	str	r3, [r2, #112]	@ 0x70
 8011678:	4b03      	ldr	r3, [pc, #12]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 801167a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801167c:	4a02      	ldr	r2, [pc, #8]	@ (8011688 <HAL_RCC_OscConfig+0x4a4>)
 801167e:	f023 0304 	bic.w	r3, r3, #4
 8011682:	6713      	str	r3, [r2, #112]	@ 0x70
 8011684:	e021      	b.n	80116ca <HAL_RCC_OscConfig+0x4e6>
 8011686:	bf00      	nop
 8011688:	58024400 	.word	0x58024400
 801168c:	58024800 	.word	0x58024800
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	689b      	ldr	r3, [r3, #8]
 8011694:	2b05      	cmp	r3, #5
 8011696:	d10c      	bne.n	80116b2 <HAL_RCC_OscConfig+0x4ce>
 8011698:	4b83      	ldr	r3, [pc, #524]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 801169a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801169c:	4a82      	ldr	r2, [pc, #520]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 801169e:	f043 0304 	orr.w	r3, r3, #4
 80116a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80116a4:	4b80      	ldr	r3, [pc, #512]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 80116a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116a8:	4a7f      	ldr	r2, [pc, #508]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 80116aa:	f043 0301 	orr.w	r3, r3, #1
 80116ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80116b0:	e00b      	b.n	80116ca <HAL_RCC_OscConfig+0x4e6>
 80116b2:	4b7d      	ldr	r3, [pc, #500]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 80116b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116b6:	4a7c      	ldr	r2, [pc, #496]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 80116b8:	f023 0301 	bic.w	r3, r3, #1
 80116bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80116be:	4b7a      	ldr	r3, [pc, #488]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 80116c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116c2:	4a79      	ldr	r2, [pc, #484]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 80116c4:	f023 0304 	bic.w	r3, r3, #4
 80116c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	689b      	ldr	r3, [r3, #8]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d015      	beq.n	80116fe <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80116d2:	f7f7 ff53 	bl	800957c <HAL_GetTick>
 80116d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80116d8:	e00a      	b.n	80116f0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80116da:	f7f7 ff4f 	bl	800957c <HAL_GetTick>
 80116de:	4602      	mov	r2, r0
 80116e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116e2:	1ad3      	subs	r3, r2, r3
 80116e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80116e8:	4293      	cmp	r3, r2
 80116ea:	d901      	bls.n	80116f0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80116ec:	2303      	movs	r3, #3
 80116ee:	e14b      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80116f0:	4b6d      	ldr	r3, [pc, #436]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 80116f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116f4:	f003 0302 	and.w	r3, r3, #2
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d0ee      	beq.n	80116da <HAL_RCC_OscConfig+0x4f6>
 80116fc:	e014      	b.n	8011728 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80116fe:	f7f7 ff3d 	bl	800957c <HAL_GetTick>
 8011702:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011704:	e00a      	b.n	801171c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011706:	f7f7 ff39 	bl	800957c <HAL_GetTick>
 801170a:	4602      	mov	r2, r0
 801170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801170e:	1ad3      	subs	r3, r2, r3
 8011710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011714:	4293      	cmp	r3, r2
 8011716:	d901      	bls.n	801171c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8011718:	2303      	movs	r3, #3
 801171a:	e135      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801171c:	4b62      	ldr	r3, [pc, #392]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 801171e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011720:	f003 0302 	and.w	r3, r3, #2
 8011724:	2b00      	cmp	r3, #0
 8011726:	d1ee      	bne.n	8011706 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801172c:	2b00      	cmp	r3, #0
 801172e:	f000 812a 	beq.w	8011986 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8011732:	4b5d      	ldr	r3, [pc, #372]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 8011734:	691b      	ldr	r3, [r3, #16]
 8011736:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801173a:	2b18      	cmp	r3, #24
 801173c:	f000 80ba 	beq.w	80118b4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011744:	2b02      	cmp	r3, #2
 8011746:	f040 8095 	bne.w	8011874 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801174a:	4b57      	ldr	r3, [pc, #348]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	4a56      	ldr	r2, [pc, #344]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 8011750:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011756:	f7f7 ff11 	bl	800957c <HAL_GetTick>
 801175a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801175c:	e008      	b.n	8011770 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801175e:	f7f7 ff0d 	bl	800957c <HAL_GetTick>
 8011762:	4602      	mov	r2, r0
 8011764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011766:	1ad3      	subs	r3, r2, r3
 8011768:	2b02      	cmp	r3, #2
 801176a:	d901      	bls.n	8011770 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 801176c:	2303      	movs	r3, #3
 801176e:	e10b      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011770:	4b4d      	ldr	r3, [pc, #308]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011778:	2b00      	cmp	r3, #0
 801177a:	d1f0      	bne.n	801175e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801177c:	4b4a      	ldr	r3, [pc, #296]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 801177e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011780:	4b4a      	ldr	r3, [pc, #296]	@ (80118ac <HAL_RCC_OscConfig+0x6c8>)
 8011782:	4013      	ands	r3, r2
 8011784:	687a      	ldr	r2, [r7, #4]
 8011786:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8011788:	687a      	ldr	r2, [r7, #4]
 801178a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801178c:	0112      	lsls	r2, r2, #4
 801178e:	430a      	orrs	r2, r1
 8011790:	4945      	ldr	r1, [pc, #276]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 8011792:	4313      	orrs	r3, r2
 8011794:	628b      	str	r3, [r1, #40]	@ 0x28
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801179a:	3b01      	subs	r3, #1
 801179c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80117a4:	3b01      	subs	r3, #1
 80117a6:	025b      	lsls	r3, r3, #9
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	431a      	orrs	r2, r3
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117b0:	3b01      	subs	r3, #1
 80117b2:	041b      	lsls	r3, r3, #16
 80117b4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80117b8:	431a      	orrs	r2, r3
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117be:	3b01      	subs	r3, #1
 80117c0:	061b      	lsls	r3, r3, #24
 80117c2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80117c6:	4938      	ldr	r1, [pc, #224]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 80117c8:	4313      	orrs	r3, r2
 80117ca:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80117cc:	4b36      	ldr	r3, [pc, #216]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 80117ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117d0:	4a35      	ldr	r2, [pc, #212]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 80117d2:	f023 0301 	bic.w	r3, r3, #1
 80117d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80117d8:	4b33      	ldr	r3, [pc, #204]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 80117da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80117dc:	4b34      	ldr	r3, [pc, #208]	@ (80118b0 <HAL_RCC_OscConfig+0x6cc>)
 80117de:	4013      	ands	r3, r2
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80117e4:	00d2      	lsls	r2, r2, #3
 80117e6:	4930      	ldr	r1, [pc, #192]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 80117e8:	4313      	orrs	r3, r2
 80117ea:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80117ec:	4b2e      	ldr	r3, [pc, #184]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 80117ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117f0:	f023 020c 	bic.w	r2, r3, #12
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80117f8:	492b      	ldr	r1, [pc, #172]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 80117fa:	4313      	orrs	r3, r2
 80117fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80117fe:	4b2a      	ldr	r3, [pc, #168]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 8011800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011802:	f023 0202 	bic.w	r2, r3, #2
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801180a:	4927      	ldr	r1, [pc, #156]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 801180c:	4313      	orrs	r3, r2
 801180e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8011810:	4b25      	ldr	r3, [pc, #148]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 8011812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011814:	4a24      	ldr	r2, [pc, #144]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 8011816:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801181a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801181c:	4b22      	ldr	r3, [pc, #136]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 801181e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011820:	4a21      	ldr	r2, [pc, #132]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 8011822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011826:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8011828:	4b1f      	ldr	r3, [pc, #124]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 801182a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801182c:	4a1e      	ldr	r2, [pc, #120]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 801182e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011832:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8011834:	4b1c      	ldr	r3, [pc, #112]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 8011836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011838:	4a1b      	ldr	r2, [pc, #108]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 801183a:	f043 0301 	orr.w	r3, r3, #1
 801183e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011840:	4b19      	ldr	r3, [pc, #100]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	4a18      	ldr	r2, [pc, #96]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 8011846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801184a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801184c:	f7f7 fe96 	bl	800957c <HAL_GetTick>
 8011850:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011852:	e008      	b.n	8011866 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011854:	f7f7 fe92 	bl	800957c <HAL_GetTick>
 8011858:	4602      	mov	r2, r0
 801185a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801185c:	1ad3      	subs	r3, r2, r3
 801185e:	2b02      	cmp	r3, #2
 8011860:	d901      	bls.n	8011866 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8011862:	2303      	movs	r3, #3
 8011864:	e090      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011866:	4b10      	ldr	r3, [pc, #64]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801186e:	2b00      	cmp	r3, #0
 8011870:	d0f0      	beq.n	8011854 <HAL_RCC_OscConfig+0x670>
 8011872:	e088      	b.n	8011986 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011874:	4b0c      	ldr	r3, [pc, #48]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	4a0b      	ldr	r2, [pc, #44]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 801187a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801187e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011880:	f7f7 fe7c 	bl	800957c <HAL_GetTick>
 8011884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011886:	e008      	b.n	801189a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011888:	f7f7 fe78 	bl	800957c <HAL_GetTick>
 801188c:	4602      	mov	r2, r0
 801188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011890:	1ad3      	subs	r3, r2, r3
 8011892:	2b02      	cmp	r3, #2
 8011894:	d901      	bls.n	801189a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8011896:	2303      	movs	r3, #3
 8011898:	e076      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801189a:	4b03      	ldr	r3, [pc, #12]	@ (80118a8 <HAL_RCC_OscConfig+0x6c4>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d1f0      	bne.n	8011888 <HAL_RCC_OscConfig+0x6a4>
 80118a6:	e06e      	b.n	8011986 <HAL_RCC_OscConfig+0x7a2>
 80118a8:	58024400 	.word	0x58024400
 80118ac:	fffffc0c 	.word	0xfffffc0c
 80118b0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80118b4:	4b36      	ldr	r3, [pc, #216]	@ (8011990 <HAL_RCC_OscConfig+0x7ac>)
 80118b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80118ba:	4b35      	ldr	r3, [pc, #212]	@ (8011990 <HAL_RCC_OscConfig+0x7ac>)
 80118bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118c4:	2b01      	cmp	r3, #1
 80118c6:	d031      	beq.n	801192c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	f003 0203 	and.w	r2, r3, #3
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d12a      	bne.n	801192c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	091b      	lsrs	r3, r3, #4
 80118da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80118e2:	429a      	cmp	r2, r3
 80118e4:	d122      	bne.n	801192c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d11a      	bne.n	801192c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	0a5b      	lsrs	r3, r3, #9
 80118fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011902:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011904:	429a      	cmp	r2, r3
 8011906:	d111      	bne.n	801192c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	0c1b      	lsrs	r3, r3, #16
 801190c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011914:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011916:	429a      	cmp	r2, r3
 8011918:	d108      	bne.n	801192c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	0e1b      	lsrs	r3, r3, #24
 801191e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011926:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011928:	429a      	cmp	r2, r3
 801192a:	d001      	beq.n	8011930 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 801192c:	2301      	movs	r3, #1
 801192e:	e02b      	b.n	8011988 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8011930:	4b17      	ldr	r3, [pc, #92]	@ (8011990 <HAL_RCC_OscConfig+0x7ac>)
 8011932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011934:	08db      	lsrs	r3, r3, #3
 8011936:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801193a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011940:	693a      	ldr	r2, [r7, #16]
 8011942:	429a      	cmp	r2, r3
 8011944:	d01f      	beq.n	8011986 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8011946:	4b12      	ldr	r3, [pc, #72]	@ (8011990 <HAL_RCC_OscConfig+0x7ac>)
 8011948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801194a:	4a11      	ldr	r2, [pc, #68]	@ (8011990 <HAL_RCC_OscConfig+0x7ac>)
 801194c:	f023 0301 	bic.w	r3, r3, #1
 8011950:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011952:	f7f7 fe13 	bl	800957c <HAL_GetTick>
 8011956:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8011958:	bf00      	nop
 801195a:	f7f7 fe0f 	bl	800957c <HAL_GetTick>
 801195e:	4602      	mov	r2, r0
 8011960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011962:	4293      	cmp	r3, r2
 8011964:	d0f9      	beq.n	801195a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011966:	4b0a      	ldr	r3, [pc, #40]	@ (8011990 <HAL_RCC_OscConfig+0x7ac>)
 8011968:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801196a:	4b0a      	ldr	r3, [pc, #40]	@ (8011994 <HAL_RCC_OscConfig+0x7b0>)
 801196c:	4013      	ands	r3, r2
 801196e:	687a      	ldr	r2, [r7, #4]
 8011970:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8011972:	00d2      	lsls	r2, r2, #3
 8011974:	4906      	ldr	r1, [pc, #24]	@ (8011990 <HAL_RCC_OscConfig+0x7ac>)
 8011976:	4313      	orrs	r3, r2
 8011978:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801197a:	4b05      	ldr	r3, [pc, #20]	@ (8011990 <HAL_RCC_OscConfig+0x7ac>)
 801197c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801197e:	4a04      	ldr	r2, [pc, #16]	@ (8011990 <HAL_RCC_OscConfig+0x7ac>)
 8011980:	f043 0301 	orr.w	r3, r3, #1
 8011984:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8011986:	2300      	movs	r3, #0
}
 8011988:	4618      	mov	r0, r3
 801198a:	3730      	adds	r7, #48	@ 0x30
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}
 8011990:	58024400 	.word	0x58024400
 8011994:	ffff0007 	.word	0xffff0007

08011998 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b086      	sub	sp, #24
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
 80119a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d101      	bne.n	80119ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80119a8:	2301      	movs	r3, #1
 80119aa:	e19c      	b.n	8011ce6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80119ac:	4b8a      	ldr	r3, [pc, #552]	@ (8011bd8 <HAL_RCC_ClockConfig+0x240>)
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	f003 030f 	and.w	r3, r3, #15
 80119b4:	683a      	ldr	r2, [r7, #0]
 80119b6:	429a      	cmp	r2, r3
 80119b8:	d910      	bls.n	80119dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80119ba:	4b87      	ldr	r3, [pc, #540]	@ (8011bd8 <HAL_RCC_ClockConfig+0x240>)
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	f023 020f 	bic.w	r2, r3, #15
 80119c2:	4985      	ldr	r1, [pc, #532]	@ (8011bd8 <HAL_RCC_ClockConfig+0x240>)
 80119c4:	683b      	ldr	r3, [r7, #0]
 80119c6:	4313      	orrs	r3, r2
 80119c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80119ca:	4b83      	ldr	r3, [pc, #524]	@ (8011bd8 <HAL_RCC_ClockConfig+0x240>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	f003 030f 	and.w	r3, r3, #15
 80119d2:	683a      	ldr	r2, [r7, #0]
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d001      	beq.n	80119dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80119d8:	2301      	movs	r3, #1
 80119da:	e184      	b.n	8011ce6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	f003 0304 	and.w	r3, r3, #4
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d010      	beq.n	8011a0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	691a      	ldr	r2, [r3, #16]
 80119ec:	4b7b      	ldr	r3, [pc, #492]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 80119ee:	699b      	ldr	r3, [r3, #24]
 80119f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d908      	bls.n	8011a0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80119f8:	4b78      	ldr	r3, [pc, #480]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 80119fa:	699b      	ldr	r3, [r3, #24]
 80119fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	691b      	ldr	r3, [r3, #16]
 8011a04:	4975      	ldr	r1, [pc, #468]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011a06:	4313      	orrs	r3, r2
 8011a08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	f003 0308 	and.w	r3, r3, #8
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d010      	beq.n	8011a38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	695a      	ldr	r2, [r3, #20]
 8011a1a:	4b70      	ldr	r3, [pc, #448]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011a1c:	69db      	ldr	r3, [r3, #28]
 8011a1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011a22:	429a      	cmp	r2, r3
 8011a24:	d908      	bls.n	8011a38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011a26:	4b6d      	ldr	r3, [pc, #436]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011a28:	69db      	ldr	r3, [r3, #28]
 8011a2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	695b      	ldr	r3, [r3, #20]
 8011a32:	496a      	ldr	r1, [pc, #424]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011a34:	4313      	orrs	r3, r2
 8011a36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	f003 0310 	and.w	r3, r3, #16
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d010      	beq.n	8011a66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	699a      	ldr	r2, [r3, #24]
 8011a48:	4b64      	ldr	r3, [pc, #400]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011a4a:	69db      	ldr	r3, [r3, #28]
 8011a4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d908      	bls.n	8011a66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011a54:	4b61      	ldr	r3, [pc, #388]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011a56:	69db      	ldr	r3, [r3, #28]
 8011a58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	699b      	ldr	r3, [r3, #24]
 8011a60:	495e      	ldr	r1, [pc, #376]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011a62:	4313      	orrs	r3, r2
 8011a64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	f003 0320 	and.w	r3, r3, #32
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d010      	beq.n	8011a94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	69da      	ldr	r2, [r3, #28]
 8011a76:	4b59      	ldr	r3, [pc, #356]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011a78:	6a1b      	ldr	r3, [r3, #32]
 8011a7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d908      	bls.n	8011a94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011a82:	4b56      	ldr	r3, [pc, #344]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011a84:	6a1b      	ldr	r3, [r3, #32]
 8011a86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	69db      	ldr	r3, [r3, #28]
 8011a8e:	4953      	ldr	r1, [pc, #332]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011a90:	4313      	orrs	r3, r2
 8011a92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	f003 0302 	and.w	r3, r3, #2
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d010      	beq.n	8011ac2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	68da      	ldr	r2, [r3, #12]
 8011aa4:	4b4d      	ldr	r3, [pc, #308]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011aa6:	699b      	ldr	r3, [r3, #24]
 8011aa8:	f003 030f 	and.w	r3, r3, #15
 8011aac:	429a      	cmp	r2, r3
 8011aae:	d908      	bls.n	8011ac2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011ab0:	4b4a      	ldr	r3, [pc, #296]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011ab2:	699b      	ldr	r3, [r3, #24]
 8011ab4:	f023 020f 	bic.w	r2, r3, #15
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	68db      	ldr	r3, [r3, #12]
 8011abc:	4947      	ldr	r1, [pc, #284]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011abe:	4313      	orrs	r3, r2
 8011ac0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	f003 0301 	and.w	r3, r3, #1
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d055      	beq.n	8011b7a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011ace:	4b43      	ldr	r3, [pc, #268]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011ad0:	699b      	ldr	r3, [r3, #24]
 8011ad2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	689b      	ldr	r3, [r3, #8]
 8011ada:	4940      	ldr	r1, [pc, #256]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011adc:	4313      	orrs	r3, r2
 8011ade:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	2b02      	cmp	r3, #2
 8011ae6:	d107      	bne.n	8011af8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d121      	bne.n	8011b38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011af4:	2301      	movs	r3, #1
 8011af6:	e0f6      	b.n	8011ce6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	2b03      	cmp	r3, #3
 8011afe:	d107      	bne.n	8011b10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011b00:	4b36      	ldr	r3, [pc, #216]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d115      	bne.n	8011b38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	e0ea      	b.n	8011ce6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	685b      	ldr	r3, [r3, #4]
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	d107      	bne.n	8011b28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011b18:	4b30      	ldr	r3, [pc, #192]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d109      	bne.n	8011b38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011b24:	2301      	movs	r3, #1
 8011b26:	e0de      	b.n	8011ce6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011b28:	4b2c      	ldr	r3, [pc, #176]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	f003 0304 	and.w	r3, r3, #4
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d101      	bne.n	8011b38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011b34:	2301      	movs	r3, #1
 8011b36:	e0d6      	b.n	8011ce6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011b38:	4b28      	ldr	r3, [pc, #160]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011b3a:	691b      	ldr	r3, [r3, #16]
 8011b3c:	f023 0207 	bic.w	r2, r3, #7
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	685b      	ldr	r3, [r3, #4]
 8011b44:	4925      	ldr	r1, [pc, #148]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011b46:	4313      	orrs	r3, r2
 8011b48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011b4a:	f7f7 fd17 	bl	800957c <HAL_GetTick>
 8011b4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011b50:	e00a      	b.n	8011b68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011b52:	f7f7 fd13 	bl	800957c <HAL_GetTick>
 8011b56:	4602      	mov	r2, r0
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	1ad3      	subs	r3, r2, r3
 8011b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011b60:	4293      	cmp	r3, r2
 8011b62:	d901      	bls.n	8011b68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8011b64:	2303      	movs	r3, #3
 8011b66:	e0be      	b.n	8011ce6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011b68:	4b1c      	ldr	r3, [pc, #112]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011b6a:	691b      	ldr	r3, [r3, #16]
 8011b6c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	685b      	ldr	r3, [r3, #4]
 8011b74:	00db      	lsls	r3, r3, #3
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d1eb      	bne.n	8011b52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	f003 0302 	and.w	r3, r3, #2
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d010      	beq.n	8011ba8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	68da      	ldr	r2, [r3, #12]
 8011b8a:	4b14      	ldr	r3, [pc, #80]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011b8c:	699b      	ldr	r3, [r3, #24]
 8011b8e:	f003 030f 	and.w	r3, r3, #15
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d208      	bcs.n	8011ba8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011b96:	4b11      	ldr	r3, [pc, #68]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011b98:	699b      	ldr	r3, [r3, #24]
 8011b9a:	f023 020f 	bic.w	r2, r3, #15
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	68db      	ldr	r3, [r3, #12]
 8011ba2:	490e      	ldr	r1, [pc, #56]	@ (8011bdc <HAL_RCC_ClockConfig+0x244>)
 8011ba4:	4313      	orrs	r3, r2
 8011ba6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8011bd8 <HAL_RCC_ClockConfig+0x240>)
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	f003 030f 	and.w	r3, r3, #15
 8011bb0:	683a      	ldr	r2, [r7, #0]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d214      	bcs.n	8011be0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011bb6:	4b08      	ldr	r3, [pc, #32]	@ (8011bd8 <HAL_RCC_ClockConfig+0x240>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	f023 020f 	bic.w	r2, r3, #15
 8011bbe:	4906      	ldr	r1, [pc, #24]	@ (8011bd8 <HAL_RCC_ClockConfig+0x240>)
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	4313      	orrs	r3, r2
 8011bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011bc6:	4b04      	ldr	r3, [pc, #16]	@ (8011bd8 <HAL_RCC_ClockConfig+0x240>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	f003 030f 	and.w	r3, r3, #15
 8011bce:	683a      	ldr	r2, [r7, #0]
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d005      	beq.n	8011be0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8011bd4:	2301      	movs	r3, #1
 8011bd6:	e086      	b.n	8011ce6 <HAL_RCC_ClockConfig+0x34e>
 8011bd8:	52002000 	.word	0x52002000
 8011bdc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	f003 0304 	and.w	r3, r3, #4
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d010      	beq.n	8011c0e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	691a      	ldr	r2, [r3, #16]
 8011bf0:	4b3f      	ldr	r3, [pc, #252]	@ (8011cf0 <HAL_RCC_ClockConfig+0x358>)
 8011bf2:	699b      	ldr	r3, [r3, #24]
 8011bf4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d208      	bcs.n	8011c0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8011cf0 <HAL_RCC_ClockConfig+0x358>)
 8011bfe:	699b      	ldr	r3, [r3, #24]
 8011c00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	691b      	ldr	r3, [r3, #16]
 8011c08:	4939      	ldr	r1, [pc, #228]	@ (8011cf0 <HAL_RCC_ClockConfig+0x358>)
 8011c0a:	4313      	orrs	r3, r2
 8011c0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	f003 0308 	and.w	r3, r3, #8
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d010      	beq.n	8011c3c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	695a      	ldr	r2, [r3, #20]
 8011c1e:	4b34      	ldr	r3, [pc, #208]	@ (8011cf0 <HAL_RCC_ClockConfig+0x358>)
 8011c20:	69db      	ldr	r3, [r3, #28]
 8011c22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d208      	bcs.n	8011c3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011c2a:	4b31      	ldr	r3, [pc, #196]	@ (8011cf0 <HAL_RCC_ClockConfig+0x358>)
 8011c2c:	69db      	ldr	r3, [r3, #28]
 8011c2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	695b      	ldr	r3, [r3, #20]
 8011c36:	492e      	ldr	r1, [pc, #184]	@ (8011cf0 <HAL_RCC_ClockConfig+0x358>)
 8011c38:	4313      	orrs	r3, r2
 8011c3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	f003 0310 	and.w	r3, r3, #16
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d010      	beq.n	8011c6a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	699a      	ldr	r2, [r3, #24]
 8011c4c:	4b28      	ldr	r3, [pc, #160]	@ (8011cf0 <HAL_RCC_ClockConfig+0x358>)
 8011c4e:	69db      	ldr	r3, [r3, #28]
 8011c50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d208      	bcs.n	8011c6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011c58:	4b25      	ldr	r3, [pc, #148]	@ (8011cf0 <HAL_RCC_ClockConfig+0x358>)
 8011c5a:	69db      	ldr	r3, [r3, #28]
 8011c5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	699b      	ldr	r3, [r3, #24]
 8011c64:	4922      	ldr	r1, [pc, #136]	@ (8011cf0 <HAL_RCC_ClockConfig+0x358>)
 8011c66:	4313      	orrs	r3, r2
 8011c68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	f003 0320 	and.w	r3, r3, #32
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d010      	beq.n	8011c98 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	69da      	ldr	r2, [r3, #28]
 8011c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8011cf0 <HAL_RCC_ClockConfig+0x358>)
 8011c7c:	6a1b      	ldr	r3, [r3, #32]
 8011c7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d208      	bcs.n	8011c98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011c86:	4b1a      	ldr	r3, [pc, #104]	@ (8011cf0 <HAL_RCC_ClockConfig+0x358>)
 8011c88:	6a1b      	ldr	r3, [r3, #32]
 8011c8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	69db      	ldr	r3, [r3, #28]
 8011c92:	4917      	ldr	r1, [pc, #92]	@ (8011cf0 <HAL_RCC_ClockConfig+0x358>)
 8011c94:	4313      	orrs	r3, r2
 8011c96:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011c98:	f000 f834 	bl	8011d04 <HAL_RCC_GetSysClockFreq>
 8011c9c:	4602      	mov	r2, r0
 8011c9e:	4b14      	ldr	r3, [pc, #80]	@ (8011cf0 <HAL_RCC_ClockConfig+0x358>)
 8011ca0:	699b      	ldr	r3, [r3, #24]
 8011ca2:	0a1b      	lsrs	r3, r3, #8
 8011ca4:	f003 030f 	and.w	r3, r3, #15
 8011ca8:	4912      	ldr	r1, [pc, #72]	@ (8011cf4 <HAL_RCC_ClockConfig+0x35c>)
 8011caa:	5ccb      	ldrb	r3, [r1, r3]
 8011cac:	f003 031f 	and.w	r3, r3, #31
 8011cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8011cb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8011cf0 <HAL_RCC_ClockConfig+0x358>)
 8011cb8:	699b      	ldr	r3, [r3, #24]
 8011cba:	f003 030f 	and.w	r3, r3, #15
 8011cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8011cf4 <HAL_RCC_ClockConfig+0x35c>)
 8011cc0:	5cd3      	ldrb	r3, [r2, r3]
 8011cc2:	f003 031f 	and.w	r3, r3, #31
 8011cc6:	693a      	ldr	r2, [r7, #16]
 8011cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8011ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8011cf8 <HAL_RCC_ClockConfig+0x360>)
 8011cce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8011cfc <HAL_RCC_ClockConfig+0x364>)
 8011cd2:	693b      	ldr	r3, [r7, #16]
 8011cd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8011cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8011d00 <HAL_RCC_ClockConfig+0x368>)
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f7f7 fc04 	bl	80094e8 <HAL_InitTick>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8011ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3718      	adds	r7, #24
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}
 8011cee:	bf00      	nop
 8011cf0:	58024400 	.word	0x58024400
 8011cf4:	0801ea64 	.word	0x0801ea64
 8011cf8:	24000008 	.word	0x24000008
 8011cfc:	24000004 	.word	0x24000004
 8011d00:	2400000c 	.word	0x2400000c

08011d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011d04:	b480      	push	{r7}
 8011d06:	b089      	sub	sp, #36	@ 0x24
 8011d08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011d0a:	4bb3      	ldr	r3, [pc, #716]	@ (8011fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d0c:	691b      	ldr	r3, [r3, #16]
 8011d0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011d12:	2b18      	cmp	r3, #24
 8011d14:	f200 8155 	bhi.w	8011fc2 <HAL_RCC_GetSysClockFreq+0x2be>
 8011d18:	a201      	add	r2, pc, #4	@ (adr r2, 8011d20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8011d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d1e:	bf00      	nop
 8011d20:	08011d85 	.word	0x08011d85
 8011d24:	08011fc3 	.word	0x08011fc3
 8011d28:	08011fc3 	.word	0x08011fc3
 8011d2c:	08011fc3 	.word	0x08011fc3
 8011d30:	08011fc3 	.word	0x08011fc3
 8011d34:	08011fc3 	.word	0x08011fc3
 8011d38:	08011fc3 	.word	0x08011fc3
 8011d3c:	08011fc3 	.word	0x08011fc3
 8011d40:	08011dab 	.word	0x08011dab
 8011d44:	08011fc3 	.word	0x08011fc3
 8011d48:	08011fc3 	.word	0x08011fc3
 8011d4c:	08011fc3 	.word	0x08011fc3
 8011d50:	08011fc3 	.word	0x08011fc3
 8011d54:	08011fc3 	.word	0x08011fc3
 8011d58:	08011fc3 	.word	0x08011fc3
 8011d5c:	08011fc3 	.word	0x08011fc3
 8011d60:	08011db1 	.word	0x08011db1
 8011d64:	08011fc3 	.word	0x08011fc3
 8011d68:	08011fc3 	.word	0x08011fc3
 8011d6c:	08011fc3 	.word	0x08011fc3
 8011d70:	08011fc3 	.word	0x08011fc3
 8011d74:	08011fc3 	.word	0x08011fc3
 8011d78:	08011fc3 	.word	0x08011fc3
 8011d7c:	08011fc3 	.word	0x08011fc3
 8011d80:	08011db7 	.word	0x08011db7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011d84:	4b94      	ldr	r3, [pc, #592]	@ (8011fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	f003 0320 	and.w	r3, r3, #32
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d009      	beq.n	8011da4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011d90:	4b91      	ldr	r3, [pc, #580]	@ (8011fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	08db      	lsrs	r3, r3, #3
 8011d96:	f003 0303 	and.w	r3, r3, #3
 8011d9a:	4a90      	ldr	r2, [pc, #576]	@ (8011fdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8011da0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8011da2:	e111      	b.n	8011fc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011da4:	4b8d      	ldr	r3, [pc, #564]	@ (8011fdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011da6:	61bb      	str	r3, [r7, #24]
      break;
 8011da8:	e10e      	b.n	8011fc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8011daa:	4b8d      	ldr	r3, [pc, #564]	@ (8011fe0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011dac:	61bb      	str	r3, [r7, #24]
      break;
 8011dae:	e10b      	b.n	8011fc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8011db0:	4b8c      	ldr	r3, [pc, #560]	@ (8011fe4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011db2:	61bb      	str	r3, [r7, #24]
      break;
 8011db4:	e108      	b.n	8011fc8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011db6:	4b88      	ldr	r3, [pc, #544]	@ (8011fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dba:	f003 0303 	and.w	r3, r3, #3
 8011dbe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8011dc0:	4b85      	ldr	r3, [pc, #532]	@ (8011fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dc4:	091b      	lsrs	r3, r3, #4
 8011dc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011dca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8011dcc:	4b82      	ldr	r3, [pc, #520]	@ (8011fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dd0:	f003 0301 	and.w	r3, r3, #1
 8011dd4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011dd6:	4b80      	ldr	r3, [pc, #512]	@ (8011fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011dda:	08db      	lsrs	r3, r3, #3
 8011ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011de0:	68fa      	ldr	r2, [r7, #12]
 8011de2:	fb02 f303 	mul.w	r3, r2, r3
 8011de6:	ee07 3a90 	vmov	s15, r3
 8011dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011dee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8011df2:	693b      	ldr	r3, [r7, #16]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	f000 80e1 	beq.w	8011fbc <HAL_RCC_GetSysClockFreq+0x2b8>
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	2b02      	cmp	r3, #2
 8011dfe:	f000 8083 	beq.w	8011f08 <HAL_RCC_GetSysClockFreq+0x204>
 8011e02:	697b      	ldr	r3, [r7, #20]
 8011e04:	2b02      	cmp	r3, #2
 8011e06:	f200 80a1 	bhi.w	8011f4c <HAL_RCC_GetSysClockFreq+0x248>
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d003      	beq.n	8011e18 <HAL_RCC_GetSysClockFreq+0x114>
 8011e10:	697b      	ldr	r3, [r7, #20]
 8011e12:	2b01      	cmp	r3, #1
 8011e14:	d056      	beq.n	8011ec4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8011e16:	e099      	b.n	8011f4c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011e18:	4b6f      	ldr	r3, [pc, #444]	@ (8011fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	f003 0320 	and.w	r3, r3, #32
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d02d      	beq.n	8011e80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011e24:	4b6c      	ldr	r3, [pc, #432]	@ (8011fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	08db      	lsrs	r3, r3, #3
 8011e2a:	f003 0303 	and.w	r3, r3, #3
 8011e2e:	4a6b      	ldr	r2, [pc, #428]	@ (8011fdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011e30:	fa22 f303 	lsr.w	r3, r2, r3
 8011e34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	ee07 3a90 	vmov	s15, r3
 8011e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e40:	693b      	ldr	r3, [r7, #16]
 8011e42:	ee07 3a90 	vmov	s15, r3
 8011e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011e4e:	4b62      	ldr	r3, [pc, #392]	@ (8011fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e56:	ee07 3a90 	vmov	s15, r3
 8011e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011e62:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8011fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8011e7e:	e087      	b.n	8011f90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011e80:	693b      	ldr	r3, [r7, #16]
 8011e82:	ee07 3a90 	vmov	s15, r3
 8011e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e8a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8011fec <HAL_RCC_GetSysClockFreq+0x2e8>
 8011e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011e92:	4b51      	ldr	r3, [pc, #324]	@ (8011fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e9a:	ee07 3a90 	vmov	s15, r3
 8011e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8011ea6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8011fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ebe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011ec2:	e065      	b.n	8011f90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011ec4:	693b      	ldr	r3, [r7, #16]
 8011ec6:	ee07 3a90 	vmov	s15, r3
 8011eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ece:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8011ff0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011ed6:	4b40      	ldr	r3, [pc, #256]	@ (8011fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ede:	ee07 3a90 	vmov	s15, r3
 8011ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8011eea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011f06:	e043      	b.n	8011f90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011f08:	693b      	ldr	r3, [r7, #16]
 8011f0a:	ee07 3a90 	vmov	s15, r3
 8011f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f12:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8011ff4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8011f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8011fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f22:	ee07 3a90 	vmov	s15, r3
 8011f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8011f2e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8011fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011f4a:	e021      	b.n	8011f90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	ee07 3a90 	vmov	s15, r3
 8011f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f56:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011ff0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8011fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f66:	ee07 3a90 	vmov	s15, r3
 8011f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011f72:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8011fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011f8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8011f90:	4b11      	ldr	r3, [pc, #68]	@ (8011fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f94:	0a5b      	lsrs	r3, r3, #9
 8011f96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f9a:	3301      	adds	r3, #1
 8011f9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	ee07 3a90 	vmov	s15, r3
 8011fa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011fa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8011fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011fb4:	ee17 3a90 	vmov	r3, s15
 8011fb8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8011fba:	e005      	b.n	8011fc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	61bb      	str	r3, [r7, #24]
      break;
 8011fc0:	e002      	b.n	8011fc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8011fc2:	4b07      	ldr	r3, [pc, #28]	@ (8011fe0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011fc4:	61bb      	str	r3, [r7, #24]
      break;
 8011fc6:	bf00      	nop
  }

  return sysclockfreq;
 8011fc8:	69bb      	ldr	r3, [r7, #24]
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	3724      	adds	r7, #36	@ 0x24
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr
 8011fd6:	bf00      	nop
 8011fd8:	58024400 	.word	0x58024400
 8011fdc:	03d09000 	.word	0x03d09000
 8011fe0:	003d0900 	.word	0x003d0900
 8011fe4:	016e3600 	.word	0x016e3600
 8011fe8:	46000000 	.word	0x46000000
 8011fec:	4c742400 	.word	0x4c742400
 8011ff0:	4a742400 	.word	0x4a742400
 8011ff4:	4bb71b00 	.word	0x4bb71b00

08011ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b082      	sub	sp, #8
 8011ffc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8011ffe:	f7ff fe81 	bl	8011d04 <HAL_RCC_GetSysClockFreq>
 8012002:	4602      	mov	r2, r0
 8012004:	4b10      	ldr	r3, [pc, #64]	@ (8012048 <HAL_RCC_GetHCLKFreq+0x50>)
 8012006:	699b      	ldr	r3, [r3, #24]
 8012008:	0a1b      	lsrs	r3, r3, #8
 801200a:	f003 030f 	and.w	r3, r3, #15
 801200e:	490f      	ldr	r1, [pc, #60]	@ (801204c <HAL_RCC_GetHCLKFreq+0x54>)
 8012010:	5ccb      	ldrb	r3, [r1, r3]
 8012012:	f003 031f 	and.w	r3, r3, #31
 8012016:	fa22 f303 	lsr.w	r3, r2, r3
 801201a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801201c:	4b0a      	ldr	r3, [pc, #40]	@ (8012048 <HAL_RCC_GetHCLKFreq+0x50>)
 801201e:	699b      	ldr	r3, [r3, #24]
 8012020:	f003 030f 	and.w	r3, r3, #15
 8012024:	4a09      	ldr	r2, [pc, #36]	@ (801204c <HAL_RCC_GetHCLKFreq+0x54>)
 8012026:	5cd3      	ldrb	r3, [r2, r3]
 8012028:	f003 031f 	and.w	r3, r3, #31
 801202c:	687a      	ldr	r2, [r7, #4]
 801202e:	fa22 f303 	lsr.w	r3, r2, r3
 8012032:	4a07      	ldr	r2, [pc, #28]	@ (8012050 <HAL_RCC_GetHCLKFreq+0x58>)
 8012034:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012036:	4a07      	ldr	r2, [pc, #28]	@ (8012054 <HAL_RCC_GetHCLKFreq+0x5c>)
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801203c:	4b04      	ldr	r3, [pc, #16]	@ (8012050 <HAL_RCC_GetHCLKFreq+0x58>)
 801203e:	681b      	ldr	r3, [r3, #0]
}
 8012040:	4618      	mov	r0, r3
 8012042:	3708      	adds	r7, #8
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}
 8012048:	58024400 	.word	0x58024400
 801204c:	0801ea64 	.word	0x0801ea64
 8012050:	24000008 	.word	0x24000008
 8012054:	24000004 	.word	0x24000004

08012058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801205c:	f7ff ffcc 	bl	8011ff8 <HAL_RCC_GetHCLKFreq>
 8012060:	4602      	mov	r2, r0
 8012062:	4b06      	ldr	r3, [pc, #24]	@ (801207c <HAL_RCC_GetPCLK1Freq+0x24>)
 8012064:	69db      	ldr	r3, [r3, #28]
 8012066:	091b      	lsrs	r3, r3, #4
 8012068:	f003 0307 	and.w	r3, r3, #7
 801206c:	4904      	ldr	r1, [pc, #16]	@ (8012080 <HAL_RCC_GetPCLK1Freq+0x28>)
 801206e:	5ccb      	ldrb	r3, [r1, r3]
 8012070:	f003 031f 	and.w	r3, r3, #31
 8012074:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8012078:	4618      	mov	r0, r3
 801207a:	bd80      	pop	{r7, pc}
 801207c:	58024400 	.word	0x58024400
 8012080:	0801ea64 	.word	0x0801ea64

08012084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8012088:	f7ff ffb6 	bl	8011ff8 <HAL_RCC_GetHCLKFreq>
 801208c:	4602      	mov	r2, r0
 801208e:	4b06      	ldr	r3, [pc, #24]	@ (80120a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012090:	69db      	ldr	r3, [r3, #28]
 8012092:	0a1b      	lsrs	r3, r3, #8
 8012094:	f003 0307 	and.w	r3, r3, #7
 8012098:	4904      	ldr	r1, [pc, #16]	@ (80120ac <HAL_RCC_GetPCLK2Freq+0x28>)
 801209a:	5ccb      	ldrb	r3, [r1, r3]
 801209c:	f003 031f 	and.w	r3, r3, #31
 80120a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	bd80      	pop	{r7, pc}
 80120a8:	58024400 	.word	0x58024400
 80120ac:	0801ea64 	.word	0x0801ea64

080120b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80120b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80120b4:	b0c6      	sub	sp, #280	@ 0x118
 80120b6:	af00      	add	r7, sp, #0
 80120b8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80120bc:	2300      	movs	r3, #0
 80120be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80120c2:	2300      	movs	r3, #0
 80120c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80120c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80120d4:	2500      	movs	r5, #0
 80120d6:	ea54 0305 	orrs.w	r3, r4, r5
 80120da:	d049      	beq.n	8012170 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80120dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80120e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80120e6:	d02f      	beq.n	8012148 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80120e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80120ec:	d828      	bhi.n	8012140 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80120ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80120f2:	d01a      	beq.n	801212a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80120f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80120f8:	d822      	bhi.n	8012140 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d003      	beq.n	8012106 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80120fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012102:	d007      	beq.n	8012114 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8012104:	e01c      	b.n	8012140 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012106:	4bab      	ldr	r3, [pc, #684]	@ (80123b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801210a:	4aaa      	ldr	r2, [pc, #680]	@ (80123b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801210c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012110:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012112:	e01a      	b.n	801214a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012118:	3308      	adds	r3, #8
 801211a:	2102      	movs	r1, #2
 801211c:	4618      	mov	r0, r3
 801211e:	f002 fa49 	bl	80145b4 <RCCEx_PLL2_Config>
 8012122:	4603      	mov	r3, r0
 8012124:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012128:	e00f      	b.n	801214a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801212a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801212e:	3328      	adds	r3, #40	@ 0x28
 8012130:	2102      	movs	r1, #2
 8012132:	4618      	mov	r0, r3
 8012134:	f002 faf0 	bl	8014718 <RCCEx_PLL3_Config>
 8012138:	4603      	mov	r3, r0
 801213a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801213e:	e004      	b.n	801214a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012140:	2301      	movs	r3, #1
 8012142:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012146:	e000      	b.n	801214a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8012148:	bf00      	nop
    }

    if (ret == HAL_OK)
 801214a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801214e:	2b00      	cmp	r3, #0
 8012150:	d10a      	bne.n	8012168 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8012152:	4b98      	ldr	r3, [pc, #608]	@ (80123b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012156:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801215a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801215e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012160:	4a94      	ldr	r2, [pc, #592]	@ (80123b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012162:	430b      	orrs	r3, r1
 8012164:	6513      	str	r3, [r2, #80]	@ 0x50
 8012166:	e003      	b.n	8012170 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012168:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801216c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012178:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801217c:	f04f 0900 	mov.w	r9, #0
 8012180:	ea58 0309 	orrs.w	r3, r8, r9
 8012184:	d047      	beq.n	8012216 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8012186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801218a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801218c:	2b04      	cmp	r3, #4
 801218e:	d82a      	bhi.n	80121e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8012190:	a201      	add	r2, pc, #4	@ (adr r2, 8012198 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8012192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012196:	bf00      	nop
 8012198:	080121ad 	.word	0x080121ad
 801219c:	080121bb 	.word	0x080121bb
 80121a0:	080121d1 	.word	0x080121d1
 80121a4:	080121ef 	.word	0x080121ef
 80121a8:	080121ef 	.word	0x080121ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80121ac:	4b81      	ldr	r3, [pc, #516]	@ (80123b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80121ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121b0:	4a80      	ldr	r2, [pc, #512]	@ (80123b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80121b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80121b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80121b8:	e01a      	b.n	80121f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80121ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121be:	3308      	adds	r3, #8
 80121c0:	2100      	movs	r1, #0
 80121c2:	4618      	mov	r0, r3
 80121c4:	f002 f9f6 	bl	80145b4 <RCCEx_PLL2_Config>
 80121c8:	4603      	mov	r3, r0
 80121ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80121ce:	e00f      	b.n	80121f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80121d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121d4:	3328      	adds	r3, #40	@ 0x28
 80121d6:	2100      	movs	r1, #0
 80121d8:	4618      	mov	r0, r3
 80121da:	f002 fa9d 	bl	8014718 <RCCEx_PLL3_Config>
 80121de:	4603      	mov	r3, r0
 80121e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80121e4:	e004      	b.n	80121f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80121e6:	2301      	movs	r3, #1
 80121e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80121ec:	e000      	b.n	80121f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80121ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80121f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d10a      	bne.n	801220e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80121f8:	4b6e      	ldr	r3, [pc, #440]	@ (80123b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80121fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80121fc:	f023 0107 	bic.w	r1, r3, #7
 8012200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012206:	4a6b      	ldr	r2, [pc, #428]	@ (80123b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012208:	430b      	orrs	r3, r1
 801220a:	6513      	str	r3, [r2, #80]	@ 0x50
 801220c:	e003      	b.n	8012216 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801220e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012212:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8012216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801221e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8012222:	f04f 0b00 	mov.w	fp, #0
 8012226:	ea5a 030b 	orrs.w	r3, sl, fp
 801222a:	d05b      	beq.n	80122e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801222c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012230:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012234:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8012238:	d03b      	beq.n	80122b2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 801223a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 801223e:	d834      	bhi.n	80122aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012240:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012244:	d037      	beq.n	80122b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8012246:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801224a:	d82e      	bhi.n	80122aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801224c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012250:	d033      	beq.n	80122ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8012252:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012256:	d828      	bhi.n	80122aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012258:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801225c:	d01a      	beq.n	8012294 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 801225e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012262:	d822      	bhi.n	80122aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012264:	2b00      	cmp	r3, #0
 8012266:	d003      	beq.n	8012270 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8012268:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801226c:	d007      	beq.n	801227e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 801226e:	e01c      	b.n	80122aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012270:	4b50      	ldr	r3, [pc, #320]	@ (80123b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012274:	4a4f      	ldr	r2, [pc, #316]	@ (80123b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801227a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801227c:	e01e      	b.n	80122bc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801227e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012282:	3308      	adds	r3, #8
 8012284:	2100      	movs	r1, #0
 8012286:	4618      	mov	r0, r3
 8012288:	f002 f994 	bl	80145b4 <RCCEx_PLL2_Config>
 801228c:	4603      	mov	r3, r0
 801228e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8012292:	e013      	b.n	80122bc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012298:	3328      	adds	r3, #40	@ 0x28
 801229a:	2100      	movs	r1, #0
 801229c:	4618      	mov	r0, r3
 801229e:	f002 fa3b 	bl	8014718 <RCCEx_PLL3_Config>
 80122a2:	4603      	mov	r3, r0
 80122a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80122a8:	e008      	b.n	80122bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80122aa:	2301      	movs	r3, #1
 80122ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80122b0:	e004      	b.n	80122bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80122b2:	bf00      	nop
 80122b4:	e002      	b.n	80122bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80122b6:	bf00      	nop
 80122b8:	e000      	b.n	80122bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80122ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80122bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d10b      	bne.n	80122dc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80122c4:	4b3b      	ldr	r3, [pc, #236]	@ (80123b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80122c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122c8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80122cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80122d4:	4a37      	ldr	r2, [pc, #220]	@ (80123b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80122d6:	430b      	orrs	r3, r1
 80122d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80122da:	e003      	b.n	80122e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80122dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80122e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ec:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80122f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80122f4:	2300      	movs	r3, #0
 80122f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80122fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80122fe:	460b      	mov	r3, r1
 8012300:	4313      	orrs	r3, r2
 8012302:	d05d      	beq.n	80123c0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8012304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012308:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801230c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8012310:	d03b      	beq.n	801238a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8012312:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8012316:	d834      	bhi.n	8012382 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012318:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801231c:	d037      	beq.n	801238e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 801231e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012322:	d82e      	bhi.n	8012382 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012324:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012328:	d033      	beq.n	8012392 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 801232a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801232e:	d828      	bhi.n	8012382 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012330:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012334:	d01a      	beq.n	801236c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8012336:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801233a:	d822      	bhi.n	8012382 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801233c:	2b00      	cmp	r3, #0
 801233e:	d003      	beq.n	8012348 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8012340:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012344:	d007      	beq.n	8012356 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8012346:	e01c      	b.n	8012382 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012348:	4b1a      	ldr	r3, [pc, #104]	@ (80123b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801234a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801234c:	4a19      	ldr	r2, [pc, #100]	@ (80123b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801234e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012352:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012354:	e01e      	b.n	8012394 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801235a:	3308      	adds	r3, #8
 801235c:	2100      	movs	r1, #0
 801235e:	4618      	mov	r0, r3
 8012360:	f002 f928 	bl	80145b4 <RCCEx_PLL2_Config>
 8012364:	4603      	mov	r3, r0
 8012366:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801236a:	e013      	b.n	8012394 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801236c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012370:	3328      	adds	r3, #40	@ 0x28
 8012372:	2100      	movs	r1, #0
 8012374:	4618      	mov	r0, r3
 8012376:	f002 f9cf 	bl	8014718 <RCCEx_PLL3_Config>
 801237a:	4603      	mov	r3, r0
 801237c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012380:	e008      	b.n	8012394 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8012382:	2301      	movs	r3, #1
 8012384:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012388:	e004      	b.n	8012394 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801238a:	bf00      	nop
 801238c:	e002      	b.n	8012394 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801238e:	bf00      	nop
 8012390:	e000      	b.n	8012394 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8012392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012394:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012398:	2b00      	cmp	r3, #0
 801239a:	d10d      	bne.n	80123b8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801239c:	4b05      	ldr	r3, [pc, #20]	@ (80123b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801239e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80123a0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80123a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80123ac:	4a01      	ldr	r2, [pc, #4]	@ (80123b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80123ae:	430b      	orrs	r3, r1
 80123b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80123b2:	e005      	b.n	80123c0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80123b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80123b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80123bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80123c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80123cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80123d0:	2300      	movs	r3, #0
 80123d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80123d6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80123da:	460b      	mov	r3, r1
 80123dc:	4313      	orrs	r3, r2
 80123de:	d03a      	beq.n	8012456 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80123e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123e6:	2b30      	cmp	r3, #48	@ 0x30
 80123e8:	d01f      	beq.n	801242a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80123ea:	2b30      	cmp	r3, #48	@ 0x30
 80123ec:	d819      	bhi.n	8012422 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80123ee:	2b20      	cmp	r3, #32
 80123f0:	d00c      	beq.n	801240c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80123f2:	2b20      	cmp	r3, #32
 80123f4:	d815      	bhi.n	8012422 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d019      	beq.n	801242e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80123fa:	2b10      	cmp	r3, #16
 80123fc:	d111      	bne.n	8012422 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80123fe:	4baa      	ldr	r3, [pc, #680]	@ (80126a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012402:	4aa9      	ldr	r2, [pc, #676]	@ (80126a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012408:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801240a:	e011      	b.n	8012430 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801240c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012410:	3308      	adds	r3, #8
 8012412:	2102      	movs	r1, #2
 8012414:	4618      	mov	r0, r3
 8012416:	f002 f8cd 	bl	80145b4 <RCCEx_PLL2_Config>
 801241a:	4603      	mov	r3, r0
 801241c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8012420:	e006      	b.n	8012430 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8012422:	2301      	movs	r3, #1
 8012424:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012428:	e002      	b.n	8012430 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801242a:	bf00      	nop
 801242c:	e000      	b.n	8012430 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801242e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012434:	2b00      	cmp	r3, #0
 8012436:	d10a      	bne.n	801244e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8012438:	4b9b      	ldr	r3, [pc, #620]	@ (80126a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801243a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801243c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8012440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012446:	4a98      	ldr	r2, [pc, #608]	@ (80126a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012448:	430b      	orrs	r3, r1
 801244a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801244c:	e003      	b.n	8012456 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801244e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012452:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8012456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801245e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8012462:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8012466:	2300      	movs	r3, #0
 8012468:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801246c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8012470:	460b      	mov	r3, r1
 8012472:	4313      	orrs	r3, r2
 8012474:	d051      	beq.n	801251a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8012476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801247a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801247c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012480:	d035      	beq.n	80124ee <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8012482:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012486:	d82e      	bhi.n	80124e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012488:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801248c:	d031      	beq.n	80124f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 801248e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012492:	d828      	bhi.n	80124e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012494:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012498:	d01a      	beq.n	80124d0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 801249a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801249e:	d822      	bhi.n	80124e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d003      	beq.n	80124ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80124a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80124a8:	d007      	beq.n	80124ba <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80124aa:	e01c      	b.n	80124e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80124ac:	4b7e      	ldr	r3, [pc, #504]	@ (80126a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80124ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124b0:	4a7d      	ldr	r2, [pc, #500]	@ (80126a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80124b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80124b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80124b8:	e01c      	b.n	80124f4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80124ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124be:	3308      	adds	r3, #8
 80124c0:	2100      	movs	r1, #0
 80124c2:	4618      	mov	r0, r3
 80124c4:	f002 f876 	bl	80145b4 <RCCEx_PLL2_Config>
 80124c8:	4603      	mov	r3, r0
 80124ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80124ce:	e011      	b.n	80124f4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80124d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124d4:	3328      	adds	r3, #40	@ 0x28
 80124d6:	2100      	movs	r1, #0
 80124d8:	4618      	mov	r0, r3
 80124da:	f002 f91d 	bl	8014718 <RCCEx_PLL3_Config>
 80124de:	4603      	mov	r3, r0
 80124e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80124e4:	e006      	b.n	80124f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80124e6:	2301      	movs	r3, #1
 80124e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80124ec:	e002      	b.n	80124f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80124ee:	bf00      	nop
 80124f0:	e000      	b.n	80124f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80124f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80124f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d10a      	bne.n	8012512 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80124fc:	4b6a      	ldr	r3, [pc, #424]	@ (80126a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80124fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012500:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8012504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801250a:	4a67      	ldr	r2, [pc, #412]	@ (80126a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801250c:	430b      	orrs	r3, r1
 801250e:	6513      	str	r3, [r2, #80]	@ 0x50
 8012510:	e003      	b.n	801251a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012512:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012516:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801251a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012522:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8012526:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801252a:	2300      	movs	r3, #0
 801252c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012530:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8012534:	460b      	mov	r3, r1
 8012536:	4313      	orrs	r3, r2
 8012538:	d053      	beq.n	80125e2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801253a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801253e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012540:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012544:	d033      	beq.n	80125ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8012546:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801254a:	d82c      	bhi.n	80125a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801254c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012550:	d02f      	beq.n	80125b2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8012552:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012556:	d826      	bhi.n	80125a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012558:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801255c:	d02b      	beq.n	80125b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 801255e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012562:	d820      	bhi.n	80125a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012564:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012568:	d012      	beq.n	8012590 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 801256a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801256e:	d81a      	bhi.n	80125a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012570:	2b00      	cmp	r3, #0
 8012572:	d022      	beq.n	80125ba <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8012574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012578:	d115      	bne.n	80125a6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801257a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801257e:	3308      	adds	r3, #8
 8012580:	2101      	movs	r1, #1
 8012582:	4618      	mov	r0, r3
 8012584:	f002 f816 	bl	80145b4 <RCCEx_PLL2_Config>
 8012588:	4603      	mov	r3, r0
 801258a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801258e:	e015      	b.n	80125bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012594:	3328      	adds	r3, #40	@ 0x28
 8012596:	2101      	movs	r1, #1
 8012598:	4618      	mov	r0, r3
 801259a:	f002 f8bd 	bl	8014718 <RCCEx_PLL3_Config>
 801259e:	4603      	mov	r3, r0
 80125a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80125a4:	e00a      	b.n	80125bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80125a6:	2301      	movs	r3, #1
 80125a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80125ac:	e006      	b.n	80125bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80125ae:	bf00      	nop
 80125b0:	e004      	b.n	80125bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80125b2:	bf00      	nop
 80125b4:	e002      	b.n	80125bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80125b6:	bf00      	nop
 80125b8:	e000      	b.n	80125bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80125ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80125bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d10a      	bne.n	80125da <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80125c4:	4b38      	ldr	r3, [pc, #224]	@ (80126a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80125c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80125c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80125cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80125d2:	4a35      	ldr	r2, [pc, #212]	@ (80126a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80125d4:	430b      	orrs	r3, r1
 80125d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80125d8:	e003      	b.n	80125e2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80125da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80125e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ea:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80125ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80125f2:	2300      	movs	r3, #0
 80125f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80125f8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80125fc:	460b      	mov	r3, r1
 80125fe:	4313      	orrs	r3, r2
 8012600:	d058      	beq.n	80126b4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8012602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012606:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801260a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801260e:	d033      	beq.n	8012678 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8012610:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012614:	d82c      	bhi.n	8012670 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801261a:	d02f      	beq.n	801267c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 801261c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012620:	d826      	bhi.n	8012670 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012622:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012626:	d02b      	beq.n	8012680 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8012628:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801262c:	d820      	bhi.n	8012670 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801262e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012632:	d012      	beq.n	801265a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8012634:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012638:	d81a      	bhi.n	8012670 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801263a:	2b00      	cmp	r3, #0
 801263c:	d022      	beq.n	8012684 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801263e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012642:	d115      	bne.n	8012670 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012648:	3308      	adds	r3, #8
 801264a:	2101      	movs	r1, #1
 801264c:	4618      	mov	r0, r3
 801264e:	f001 ffb1 	bl	80145b4 <RCCEx_PLL2_Config>
 8012652:	4603      	mov	r3, r0
 8012654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012658:	e015      	b.n	8012686 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801265a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801265e:	3328      	adds	r3, #40	@ 0x28
 8012660:	2101      	movs	r1, #1
 8012662:	4618      	mov	r0, r3
 8012664:	f002 f858 	bl	8014718 <RCCEx_PLL3_Config>
 8012668:	4603      	mov	r3, r0
 801266a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801266e:	e00a      	b.n	8012686 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8012670:	2301      	movs	r3, #1
 8012672:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012676:	e006      	b.n	8012686 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012678:	bf00      	nop
 801267a:	e004      	b.n	8012686 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801267c:	bf00      	nop
 801267e:	e002      	b.n	8012686 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012680:	bf00      	nop
 8012682:	e000      	b.n	8012686 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012686:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801268a:	2b00      	cmp	r3, #0
 801268c:	d10e      	bne.n	80126ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801268e:	4b06      	ldr	r3, [pc, #24]	@ (80126a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012692:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801269a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801269e:	4a02      	ldr	r2, [pc, #8]	@ (80126a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80126a0:	430b      	orrs	r3, r1
 80126a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80126a4:	e006      	b.n	80126b4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80126a6:	bf00      	nop
 80126a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80126ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80126b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80126b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126bc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80126c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80126c4:	2300      	movs	r3, #0
 80126c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80126ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80126ce:	460b      	mov	r3, r1
 80126d0:	4313      	orrs	r3, r2
 80126d2:	d037      	beq.n	8012744 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80126d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80126de:	d00e      	beq.n	80126fe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80126e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80126e4:	d816      	bhi.n	8012714 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d018      	beq.n	801271c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80126ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80126ee:	d111      	bne.n	8012714 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80126f0:	4bc4      	ldr	r3, [pc, #784]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80126f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126f4:	4ac3      	ldr	r2, [pc, #780]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80126f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80126fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80126fc:	e00f      	b.n	801271e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80126fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012702:	3308      	adds	r3, #8
 8012704:	2101      	movs	r1, #1
 8012706:	4618      	mov	r0, r3
 8012708:	f001 ff54 	bl	80145b4 <RCCEx_PLL2_Config>
 801270c:	4603      	mov	r3, r0
 801270e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012712:	e004      	b.n	801271e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012714:	2301      	movs	r3, #1
 8012716:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801271a:	e000      	b.n	801271e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 801271c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801271e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012722:	2b00      	cmp	r3, #0
 8012724:	d10a      	bne.n	801273c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8012726:	4bb7      	ldr	r3, [pc, #732]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801272a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801272e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012734:	4ab3      	ldr	r2, [pc, #716]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012736:	430b      	orrs	r3, r1
 8012738:	6513      	str	r3, [r2, #80]	@ 0x50
 801273a:	e003      	b.n	8012744 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801273c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012740:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8012744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801274c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8012750:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012754:	2300      	movs	r3, #0
 8012756:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801275a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801275e:	460b      	mov	r3, r1
 8012760:	4313      	orrs	r3, r2
 8012762:	d039      	beq.n	80127d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8012764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801276a:	2b03      	cmp	r3, #3
 801276c:	d81c      	bhi.n	80127a8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 801276e:	a201      	add	r2, pc, #4	@ (adr r2, 8012774 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8012770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012774:	080127b1 	.word	0x080127b1
 8012778:	08012785 	.word	0x08012785
 801277c:	08012793 	.word	0x08012793
 8012780:	080127b1 	.word	0x080127b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012784:	4b9f      	ldr	r3, [pc, #636]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012788:	4a9e      	ldr	r2, [pc, #632]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801278a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801278e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012790:	e00f      	b.n	80127b2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012796:	3308      	adds	r3, #8
 8012798:	2102      	movs	r1, #2
 801279a:	4618      	mov	r0, r3
 801279c:	f001 ff0a 	bl	80145b4 <RCCEx_PLL2_Config>
 80127a0:	4603      	mov	r3, r0
 80127a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80127a6:	e004      	b.n	80127b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80127a8:	2301      	movs	r3, #1
 80127aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80127ae:	e000      	b.n	80127b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80127b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80127b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d10a      	bne.n	80127d0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80127ba:	4b92      	ldr	r3, [pc, #584]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80127be:	f023 0103 	bic.w	r1, r3, #3
 80127c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80127c8:	4a8e      	ldr	r2, [pc, #568]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127ca:	430b      	orrs	r3, r1
 80127cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80127ce:	e003      	b.n	80127d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80127d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80127d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80127e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80127e8:	2300      	movs	r3, #0
 80127ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80127ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80127f2:	460b      	mov	r3, r1
 80127f4:	4313      	orrs	r3, r2
 80127f6:	f000 8099 	beq.w	801292c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80127fa:	4b83      	ldr	r3, [pc, #524]	@ (8012a08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	4a82      	ldr	r2, [pc, #520]	@ (8012a08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012804:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012806:	f7f6 feb9 	bl	800957c <HAL_GetTick>
 801280a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801280e:	e00b      	b.n	8012828 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012810:	f7f6 feb4 	bl	800957c <HAL_GetTick>
 8012814:	4602      	mov	r2, r0
 8012816:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801281a:	1ad3      	subs	r3, r2, r3
 801281c:	2b64      	cmp	r3, #100	@ 0x64
 801281e:	d903      	bls.n	8012828 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8012820:	2303      	movs	r3, #3
 8012822:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012826:	e005      	b.n	8012834 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012828:	4b77      	ldr	r3, [pc, #476]	@ (8012a08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012830:	2b00      	cmp	r3, #0
 8012832:	d0ed      	beq.n	8012810 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8012834:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012838:	2b00      	cmp	r3, #0
 801283a:	d173      	bne.n	8012924 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801283c:	4b71      	ldr	r3, [pc, #452]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801283e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012844:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012848:	4053      	eors	r3, r2
 801284a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801284e:	2b00      	cmp	r3, #0
 8012850:	d015      	beq.n	801287e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012852:	4b6c      	ldr	r3, [pc, #432]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801285a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801285e:	4b69      	ldr	r3, [pc, #420]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012862:	4a68      	ldr	r2, [pc, #416]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012868:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801286a:	4b66      	ldr	r3, [pc, #408]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801286c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801286e:	4a65      	ldr	r2, [pc, #404]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012870:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012874:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8012876:	4a63      	ldr	r2, [pc, #396]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012878:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801287c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801287e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012882:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801288a:	d118      	bne.n	80128be <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801288c:	f7f6 fe76 	bl	800957c <HAL_GetTick>
 8012890:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012894:	e00d      	b.n	80128b2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012896:	f7f6 fe71 	bl	800957c <HAL_GetTick>
 801289a:	4602      	mov	r2, r0
 801289c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80128a0:	1ad2      	subs	r2, r2, r3
 80128a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80128a6:	429a      	cmp	r2, r3
 80128a8:	d903      	bls.n	80128b2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80128aa:	2303      	movs	r3, #3
 80128ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80128b0:	e005      	b.n	80128be <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80128b2:	4b54      	ldr	r3, [pc, #336]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80128b6:	f003 0302 	and.w	r3, r3, #2
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d0eb      	beq.n	8012896 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80128be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d129      	bne.n	801291a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80128c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80128ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80128d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80128d6:	d10e      	bne.n	80128f6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80128d8:	4b4a      	ldr	r3, [pc, #296]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128da:	691b      	ldr	r3, [r3, #16]
 80128dc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80128e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80128e8:	091a      	lsrs	r2, r3, #4
 80128ea:	4b48      	ldr	r3, [pc, #288]	@ (8012a0c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80128ec:	4013      	ands	r3, r2
 80128ee:	4a45      	ldr	r2, [pc, #276]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128f0:	430b      	orrs	r3, r1
 80128f2:	6113      	str	r3, [r2, #16]
 80128f4:	e005      	b.n	8012902 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80128f6:	4b43      	ldr	r3, [pc, #268]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128f8:	691b      	ldr	r3, [r3, #16]
 80128fa:	4a42      	ldr	r2, [pc, #264]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012900:	6113      	str	r3, [r2, #16]
 8012902:	4b40      	ldr	r3, [pc, #256]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012904:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801290a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801290e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012912:	4a3c      	ldr	r2, [pc, #240]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012914:	430b      	orrs	r3, r1
 8012916:	6713      	str	r3, [r2, #112]	@ 0x70
 8012918:	e008      	b.n	801292c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801291a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801291e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8012922:	e003      	b.n	801292c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012928:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801292c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012934:	f002 0301 	and.w	r3, r2, #1
 8012938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801293c:	2300      	movs	r3, #0
 801293e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012942:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8012946:	460b      	mov	r3, r1
 8012948:	4313      	orrs	r3, r2
 801294a:	f000 808f 	beq.w	8012a6c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801294e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012952:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012954:	2b28      	cmp	r3, #40	@ 0x28
 8012956:	d871      	bhi.n	8012a3c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8012958:	a201      	add	r2, pc, #4	@ (adr r2, 8012960 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 801295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801295e:	bf00      	nop
 8012960:	08012a45 	.word	0x08012a45
 8012964:	08012a3d 	.word	0x08012a3d
 8012968:	08012a3d 	.word	0x08012a3d
 801296c:	08012a3d 	.word	0x08012a3d
 8012970:	08012a3d 	.word	0x08012a3d
 8012974:	08012a3d 	.word	0x08012a3d
 8012978:	08012a3d 	.word	0x08012a3d
 801297c:	08012a3d 	.word	0x08012a3d
 8012980:	08012a11 	.word	0x08012a11
 8012984:	08012a3d 	.word	0x08012a3d
 8012988:	08012a3d 	.word	0x08012a3d
 801298c:	08012a3d 	.word	0x08012a3d
 8012990:	08012a3d 	.word	0x08012a3d
 8012994:	08012a3d 	.word	0x08012a3d
 8012998:	08012a3d 	.word	0x08012a3d
 801299c:	08012a3d 	.word	0x08012a3d
 80129a0:	08012a27 	.word	0x08012a27
 80129a4:	08012a3d 	.word	0x08012a3d
 80129a8:	08012a3d 	.word	0x08012a3d
 80129ac:	08012a3d 	.word	0x08012a3d
 80129b0:	08012a3d 	.word	0x08012a3d
 80129b4:	08012a3d 	.word	0x08012a3d
 80129b8:	08012a3d 	.word	0x08012a3d
 80129bc:	08012a3d 	.word	0x08012a3d
 80129c0:	08012a45 	.word	0x08012a45
 80129c4:	08012a3d 	.word	0x08012a3d
 80129c8:	08012a3d 	.word	0x08012a3d
 80129cc:	08012a3d 	.word	0x08012a3d
 80129d0:	08012a3d 	.word	0x08012a3d
 80129d4:	08012a3d 	.word	0x08012a3d
 80129d8:	08012a3d 	.word	0x08012a3d
 80129dc:	08012a3d 	.word	0x08012a3d
 80129e0:	08012a45 	.word	0x08012a45
 80129e4:	08012a3d 	.word	0x08012a3d
 80129e8:	08012a3d 	.word	0x08012a3d
 80129ec:	08012a3d 	.word	0x08012a3d
 80129f0:	08012a3d 	.word	0x08012a3d
 80129f4:	08012a3d 	.word	0x08012a3d
 80129f8:	08012a3d 	.word	0x08012a3d
 80129fc:	08012a3d 	.word	0x08012a3d
 8012a00:	08012a45 	.word	0x08012a45
 8012a04:	58024400 	.word	0x58024400
 8012a08:	58024800 	.word	0x58024800
 8012a0c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a14:	3308      	adds	r3, #8
 8012a16:	2101      	movs	r1, #1
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f001 fdcb 	bl	80145b4 <RCCEx_PLL2_Config>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012a24:	e00f      	b.n	8012a46 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a2a:	3328      	adds	r3, #40	@ 0x28
 8012a2c:	2101      	movs	r1, #1
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f001 fe72 	bl	8014718 <RCCEx_PLL3_Config>
 8012a34:	4603      	mov	r3, r0
 8012a36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012a3a:	e004      	b.n	8012a46 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012a42:	e000      	b.n	8012a46 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8012a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012a46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d10a      	bne.n	8012a64 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8012a4e:	4bbf      	ldr	r3, [pc, #764]	@ (8012d4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a52:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8012a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a5c:	4abb      	ldr	r2, [pc, #748]	@ (8012d4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012a5e:	430b      	orrs	r3, r1
 8012a60:	6553      	str	r3, [r2, #84]	@ 0x54
 8012a62:	e003      	b.n	8012a6c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8012a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a74:	f002 0302 	and.w	r3, r2, #2
 8012a78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012a82:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8012a86:	460b      	mov	r3, r1
 8012a88:	4313      	orrs	r3, r2
 8012a8a:	d041      	beq.n	8012b10 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8012a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012a92:	2b05      	cmp	r3, #5
 8012a94:	d824      	bhi.n	8012ae0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8012a96:	a201      	add	r2, pc, #4	@ (adr r2, 8012a9c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8012a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a9c:	08012ae9 	.word	0x08012ae9
 8012aa0:	08012ab5 	.word	0x08012ab5
 8012aa4:	08012acb 	.word	0x08012acb
 8012aa8:	08012ae9 	.word	0x08012ae9
 8012aac:	08012ae9 	.word	0x08012ae9
 8012ab0:	08012ae9 	.word	0x08012ae9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ab8:	3308      	adds	r3, #8
 8012aba:	2101      	movs	r1, #1
 8012abc:	4618      	mov	r0, r3
 8012abe:	f001 fd79 	bl	80145b4 <RCCEx_PLL2_Config>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012ac8:	e00f      	b.n	8012aea <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ace:	3328      	adds	r3, #40	@ 0x28
 8012ad0:	2101      	movs	r1, #1
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f001 fe20 	bl	8014718 <RCCEx_PLL3_Config>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012ade:	e004      	b.n	8012aea <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012ae6:	e000      	b.n	8012aea <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8012ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012aea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d10a      	bne.n	8012b08 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8012af2:	4b96      	ldr	r3, [pc, #600]	@ (8012d4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012af6:	f023 0107 	bic.w	r1, r3, #7
 8012afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012b00:	4a92      	ldr	r2, [pc, #584]	@ (8012d4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012b02:	430b      	orrs	r3, r1
 8012b04:	6553      	str	r3, [r2, #84]	@ 0x54
 8012b06:	e003      	b.n	8012b10 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b18:	f002 0304 	and.w	r3, r2, #4
 8012b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012b20:	2300      	movs	r3, #0
 8012b22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012b26:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8012b2a:	460b      	mov	r3, r1
 8012b2c:	4313      	orrs	r3, r2
 8012b2e:	d044      	beq.n	8012bba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8012b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b38:	2b05      	cmp	r3, #5
 8012b3a:	d825      	bhi.n	8012b88 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8012b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8012b44 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8012b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b42:	bf00      	nop
 8012b44:	08012b91 	.word	0x08012b91
 8012b48:	08012b5d 	.word	0x08012b5d
 8012b4c:	08012b73 	.word	0x08012b73
 8012b50:	08012b91 	.word	0x08012b91
 8012b54:	08012b91 	.word	0x08012b91
 8012b58:	08012b91 	.word	0x08012b91
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b60:	3308      	adds	r3, #8
 8012b62:	2101      	movs	r1, #1
 8012b64:	4618      	mov	r0, r3
 8012b66:	f001 fd25 	bl	80145b4 <RCCEx_PLL2_Config>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012b70:	e00f      	b.n	8012b92 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b76:	3328      	adds	r3, #40	@ 0x28
 8012b78:	2101      	movs	r1, #1
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f001 fdcc 	bl	8014718 <RCCEx_PLL3_Config>
 8012b80:	4603      	mov	r3, r0
 8012b82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012b86:	e004      	b.n	8012b92 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012b88:	2301      	movs	r3, #1
 8012b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012b8e:	e000      	b.n	8012b92 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8012b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012b92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d10b      	bne.n	8012bb2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012b9a:	4b6c      	ldr	r3, [pc, #432]	@ (8012d4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b9e:	f023 0107 	bic.w	r1, r3, #7
 8012ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012baa:	4a68      	ldr	r2, [pc, #416]	@ (8012d4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012bac:	430b      	orrs	r3, r1
 8012bae:	6593      	str	r3, [r2, #88]	@ 0x58
 8012bb0:	e003      	b.n	8012bba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012bb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012bb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc2:	f002 0320 	and.w	r3, r2, #32
 8012bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012bca:	2300      	movs	r3, #0
 8012bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012bd0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8012bd4:	460b      	mov	r3, r1
 8012bd6:	4313      	orrs	r3, r2
 8012bd8:	d055      	beq.n	8012c86 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8012bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012be6:	d033      	beq.n	8012c50 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8012be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012bec:	d82c      	bhi.n	8012c48 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012bf2:	d02f      	beq.n	8012c54 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8012bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012bf8:	d826      	bhi.n	8012c48 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012bfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012bfe:	d02b      	beq.n	8012c58 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8012c00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012c04:	d820      	bhi.n	8012c48 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012c0a:	d012      	beq.n	8012c32 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8012c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012c10:	d81a      	bhi.n	8012c48 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d022      	beq.n	8012c5c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8012c16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012c1a:	d115      	bne.n	8012c48 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c20:	3308      	adds	r3, #8
 8012c22:	2100      	movs	r1, #0
 8012c24:	4618      	mov	r0, r3
 8012c26:	f001 fcc5 	bl	80145b4 <RCCEx_PLL2_Config>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012c30:	e015      	b.n	8012c5e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c36:	3328      	adds	r3, #40	@ 0x28
 8012c38:	2102      	movs	r1, #2
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f001 fd6c 	bl	8014718 <RCCEx_PLL3_Config>
 8012c40:	4603      	mov	r3, r0
 8012c42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012c46:	e00a      	b.n	8012c5e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012c48:	2301      	movs	r3, #1
 8012c4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012c4e:	e006      	b.n	8012c5e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012c50:	bf00      	nop
 8012c52:	e004      	b.n	8012c5e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012c54:	bf00      	nop
 8012c56:	e002      	b.n	8012c5e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012c58:	bf00      	nop
 8012c5a:	e000      	b.n	8012c5e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012c5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d10b      	bne.n	8012c7e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8012c66:	4b39      	ldr	r3, [pc, #228]	@ (8012d4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c6a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012c76:	4a35      	ldr	r2, [pc, #212]	@ (8012d4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012c78:	430b      	orrs	r3, r1
 8012c7a:	6553      	str	r3, [r2, #84]	@ 0x54
 8012c7c:	e003      	b.n	8012c86 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8012c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8012c92:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012c96:	2300      	movs	r3, #0
 8012c98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012c9c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8012ca0:	460b      	mov	r3, r1
 8012ca2:	4313      	orrs	r3, r2
 8012ca4:	d058      	beq.n	8012d58 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8012ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012cae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012cb2:	d033      	beq.n	8012d1c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8012cb4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012cb8:	d82c      	bhi.n	8012d14 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012cbe:	d02f      	beq.n	8012d20 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8012cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012cc4:	d826      	bhi.n	8012d14 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012cc6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012cca:	d02b      	beq.n	8012d24 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8012ccc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012cd0:	d820      	bhi.n	8012d14 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012cd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012cd6:	d012      	beq.n	8012cfe <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8012cd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012cdc:	d81a      	bhi.n	8012d14 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d022      	beq.n	8012d28 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8012ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012ce6:	d115      	bne.n	8012d14 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cec:	3308      	adds	r3, #8
 8012cee:	2100      	movs	r1, #0
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f001 fc5f 	bl	80145b4 <RCCEx_PLL2_Config>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012cfc:	e015      	b.n	8012d2a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d02:	3328      	adds	r3, #40	@ 0x28
 8012d04:	2102      	movs	r1, #2
 8012d06:	4618      	mov	r0, r3
 8012d08:	f001 fd06 	bl	8014718 <RCCEx_PLL3_Config>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012d12:	e00a      	b.n	8012d2a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012d14:	2301      	movs	r3, #1
 8012d16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012d1a:	e006      	b.n	8012d2a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012d1c:	bf00      	nop
 8012d1e:	e004      	b.n	8012d2a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012d20:	bf00      	nop
 8012d22:	e002      	b.n	8012d2a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012d24:	bf00      	nop
 8012d26:	e000      	b.n	8012d2a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012d2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d10e      	bne.n	8012d50 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8012d32:	4b06      	ldr	r3, [pc, #24]	@ (8012d4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d36:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8012d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012d42:	4a02      	ldr	r2, [pc, #8]	@ (8012d4c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012d44:	430b      	orrs	r3, r1
 8012d46:	6593      	str	r3, [r2, #88]	@ 0x58
 8012d48:	e006      	b.n	8012d58 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8012d4a:	bf00      	nop
 8012d4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8012d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d60:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8012d64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012d68:	2300      	movs	r3, #0
 8012d6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012d6e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8012d72:	460b      	mov	r3, r1
 8012d74:	4313      	orrs	r3, r2
 8012d76:	d055      	beq.n	8012e24 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8012d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012d80:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012d84:	d033      	beq.n	8012dee <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8012d86:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012d8a:	d82c      	bhi.n	8012de6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012d90:	d02f      	beq.n	8012df2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8012d92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012d96:	d826      	bhi.n	8012de6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012d98:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012d9c:	d02b      	beq.n	8012df6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8012d9e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012da2:	d820      	bhi.n	8012de6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012da4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012da8:	d012      	beq.n	8012dd0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8012daa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012dae:	d81a      	bhi.n	8012de6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d022      	beq.n	8012dfa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8012db4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012db8:	d115      	bne.n	8012de6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dbe:	3308      	adds	r3, #8
 8012dc0:	2100      	movs	r1, #0
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f001 fbf6 	bl	80145b4 <RCCEx_PLL2_Config>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012dce:	e015      	b.n	8012dfc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dd4:	3328      	adds	r3, #40	@ 0x28
 8012dd6:	2102      	movs	r1, #2
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f001 fc9d 	bl	8014718 <RCCEx_PLL3_Config>
 8012dde:	4603      	mov	r3, r0
 8012de0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012de4:	e00a      	b.n	8012dfc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012de6:	2301      	movs	r3, #1
 8012de8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012dec:	e006      	b.n	8012dfc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012dee:	bf00      	nop
 8012df0:	e004      	b.n	8012dfc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012df2:	bf00      	nop
 8012df4:	e002      	b.n	8012dfc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012df6:	bf00      	nop
 8012df8:	e000      	b.n	8012dfc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012dfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d10b      	bne.n	8012e1c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8012e04:	4ba0      	ldr	r3, [pc, #640]	@ (8013088 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e08:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8012e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012e14:	4a9c      	ldr	r2, [pc, #624]	@ (8013088 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e16:	430b      	orrs	r3, r1
 8012e18:	6593      	str	r3, [r2, #88]	@ 0x58
 8012e1a:	e003      	b.n	8012e24 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8012e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2c:	f002 0308 	and.w	r3, r2, #8
 8012e30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012e34:	2300      	movs	r3, #0
 8012e36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012e3a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8012e3e:	460b      	mov	r3, r1
 8012e40:	4313      	orrs	r3, r2
 8012e42:	d01e      	beq.n	8012e82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8012e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012e50:	d10c      	bne.n	8012e6c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e56:	3328      	adds	r3, #40	@ 0x28
 8012e58:	2102      	movs	r1, #2
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f001 fc5c 	bl	8014718 <RCCEx_PLL3_Config>
 8012e60:	4603      	mov	r3, r0
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d002      	beq.n	8012e6c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8012e66:	2301      	movs	r3, #1
 8012e68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8012e6c:	4b86      	ldr	r3, [pc, #536]	@ (8013088 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e70:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e7c:	4a82      	ldr	r2, [pc, #520]	@ (8013088 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e7e:	430b      	orrs	r3, r1
 8012e80:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8012e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e8a:	f002 0310 	and.w	r3, r2, #16
 8012e8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012e92:	2300      	movs	r3, #0
 8012e94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012e98:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8012e9c:	460b      	mov	r3, r1
 8012e9e:	4313      	orrs	r3, r2
 8012ea0:	d01e      	beq.n	8012ee0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8012ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012eae:	d10c      	bne.n	8012eca <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012eb4:	3328      	adds	r3, #40	@ 0x28
 8012eb6:	2102      	movs	r1, #2
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f001 fc2d 	bl	8014718 <RCCEx_PLL3_Config>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d002      	beq.n	8012eca <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8012ec4:	2301      	movs	r3, #1
 8012ec6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8012eca:	4b6f      	ldr	r3, [pc, #444]	@ (8013088 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ece:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012eda:	4a6b      	ldr	r2, [pc, #428]	@ (8013088 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012edc:	430b      	orrs	r3, r1
 8012ede:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8012eec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012eee:	2300      	movs	r3, #0
 8012ef0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012ef2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8012ef6:	460b      	mov	r3, r1
 8012ef8:	4313      	orrs	r3, r2
 8012efa:	d03e      	beq.n	8012f7a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8012efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012f04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012f08:	d022      	beq.n	8012f50 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8012f0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012f0e:	d81b      	bhi.n	8012f48 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d003      	beq.n	8012f1c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8012f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012f18:	d00b      	beq.n	8012f32 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8012f1a:	e015      	b.n	8012f48 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f20:	3308      	adds	r3, #8
 8012f22:	2100      	movs	r1, #0
 8012f24:	4618      	mov	r0, r3
 8012f26:	f001 fb45 	bl	80145b4 <RCCEx_PLL2_Config>
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012f30:	e00f      	b.n	8012f52 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f36:	3328      	adds	r3, #40	@ 0x28
 8012f38:	2102      	movs	r1, #2
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f001 fbec 	bl	8014718 <RCCEx_PLL3_Config>
 8012f40:	4603      	mov	r3, r0
 8012f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012f46:	e004      	b.n	8012f52 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012f48:	2301      	movs	r3, #1
 8012f4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012f4e:	e000      	b.n	8012f52 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8012f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012f52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d10b      	bne.n	8012f72 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8013088 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012f5e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8012f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012f6a:	4a47      	ldr	r2, [pc, #284]	@ (8013088 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f6c:	430b      	orrs	r3, r1
 8012f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8012f70:	e003      	b.n	8012f7a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f82:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8012f86:	673b      	str	r3, [r7, #112]	@ 0x70
 8012f88:	2300      	movs	r3, #0
 8012f8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8012f8c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8012f90:	460b      	mov	r3, r1
 8012f92:	4313      	orrs	r3, r2
 8012f94:	d03b      	beq.n	801300e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8012f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012f9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012fa2:	d01f      	beq.n	8012fe4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8012fa4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012fa8:	d818      	bhi.n	8012fdc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8012faa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012fae:	d003      	beq.n	8012fb8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8012fb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012fb4:	d007      	beq.n	8012fc6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8012fb6:	e011      	b.n	8012fdc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012fb8:	4b33      	ldr	r3, [pc, #204]	@ (8013088 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fbc:	4a32      	ldr	r2, [pc, #200]	@ (8013088 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012fbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8012fc4:	e00f      	b.n	8012fe6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fca:	3328      	adds	r3, #40	@ 0x28
 8012fcc:	2101      	movs	r1, #1
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f001 fba2 	bl	8014718 <RCCEx_PLL3_Config>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8012fda:	e004      	b.n	8012fe6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012fdc:	2301      	movs	r3, #1
 8012fde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012fe2:	e000      	b.n	8012fe6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8012fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012fe6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d10b      	bne.n	8013006 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012fee:	4b26      	ldr	r3, [pc, #152]	@ (8013088 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ff2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8012ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012ffe:	4a22      	ldr	r2, [pc, #136]	@ (8013088 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013000:	430b      	orrs	r3, r1
 8013002:	6553      	str	r3, [r2, #84]	@ 0x54
 8013004:	e003      	b.n	801300e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013006:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801300a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801300e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013016:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801301a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801301c:	2300      	movs	r3, #0
 801301e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013020:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8013024:	460b      	mov	r3, r1
 8013026:	4313      	orrs	r3, r2
 8013028:	d034      	beq.n	8013094 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801302a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801302e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013030:	2b00      	cmp	r3, #0
 8013032:	d003      	beq.n	801303c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8013034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013038:	d007      	beq.n	801304a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 801303a:	e011      	b.n	8013060 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801303c:	4b12      	ldr	r3, [pc, #72]	@ (8013088 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801303e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013040:	4a11      	ldr	r2, [pc, #68]	@ (8013088 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013046:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8013048:	e00e      	b.n	8013068 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801304a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801304e:	3308      	adds	r3, #8
 8013050:	2102      	movs	r1, #2
 8013052:	4618      	mov	r0, r3
 8013054:	f001 faae 	bl	80145b4 <RCCEx_PLL2_Config>
 8013058:	4603      	mov	r3, r0
 801305a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801305e:	e003      	b.n	8013068 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8013060:	2301      	movs	r3, #1
 8013062:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8013066:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801306c:	2b00      	cmp	r3, #0
 801306e:	d10d      	bne.n	801308c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8013070:	4b05      	ldr	r3, [pc, #20]	@ (8013088 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013074:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801307c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801307e:	4a02      	ldr	r2, [pc, #8]	@ (8013088 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013080:	430b      	orrs	r3, r1
 8013082:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8013084:	e006      	b.n	8013094 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8013086:	bf00      	nop
 8013088:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801308c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013090:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8013094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801309c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80130a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80130a2:	2300      	movs	r3, #0
 80130a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80130a6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80130aa:	460b      	mov	r3, r1
 80130ac:	4313      	orrs	r3, r2
 80130ae:	d00c      	beq.n	80130ca <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80130b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130b4:	3328      	adds	r3, #40	@ 0x28
 80130b6:	2102      	movs	r1, #2
 80130b8:	4618      	mov	r0, r3
 80130ba:	f001 fb2d 	bl	8014718 <RCCEx_PLL3_Config>
 80130be:	4603      	mov	r3, r0
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d002      	beq.n	80130ca <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80130c4:	2301      	movs	r3, #1
 80130c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80130ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130d2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80130d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80130d8:	2300      	movs	r3, #0
 80130da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80130dc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80130e0:	460b      	mov	r3, r1
 80130e2:	4313      	orrs	r3, r2
 80130e4:	d036      	beq.n	8013154 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80130e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80130ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80130f0:	d018      	beq.n	8013124 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80130f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80130f6:	d811      	bhi.n	801311c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80130f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80130fc:	d014      	beq.n	8013128 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80130fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013102:	d80b      	bhi.n	801311c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8013104:	2b00      	cmp	r3, #0
 8013106:	d011      	beq.n	801312c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8013108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801310c:	d106      	bne.n	801311c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801310e:	4bb7      	ldr	r3, [pc, #732]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013112:	4ab6      	ldr	r2, [pc, #728]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013118:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801311a:	e008      	b.n	801312e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801311c:	2301      	movs	r3, #1
 801311e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8013122:	e004      	b.n	801312e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8013124:	bf00      	nop
 8013126:	e002      	b.n	801312e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8013128:	bf00      	nop
 801312a:	e000      	b.n	801312e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801312c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801312e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013132:	2b00      	cmp	r3, #0
 8013134:	d10a      	bne.n	801314c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8013136:	4bad      	ldr	r3, [pc, #692]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801313a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801313e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013142:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013144:	4aa9      	ldr	r2, [pc, #676]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013146:	430b      	orrs	r3, r1
 8013148:	6553      	str	r3, [r2, #84]	@ 0x54
 801314a:	e003      	b.n	8013154 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801314c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013150:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8013154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801315c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8013160:	653b      	str	r3, [r7, #80]	@ 0x50
 8013162:	2300      	movs	r3, #0
 8013164:	657b      	str	r3, [r7, #84]	@ 0x54
 8013166:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801316a:	460b      	mov	r3, r1
 801316c:	4313      	orrs	r3, r2
 801316e:	d009      	beq.n	8013184 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8013170:	4b9e      	ldr	r3, [pc, #632]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013174:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801317c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801317e:	4a9b      	ldr	r2, [pc, #620]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013180:	430b      	orrs	r3, r1
 8013182:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8013184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801318c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8013190:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013192:	2300      	movs	r3, #0
 8013194:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013196:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801319a:	460b      	mov	r3, r1
 801319c:	4313      	orrs	r3, r2
 801319e:	d009      	beq.n	80131b4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80131a0:	4b92      	ldr	r3, [pc, #584]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80131a4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80131a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131ae:	4a8f      	ldr	r2, [pc, #572]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131b0:	430b      	orrs	r3, r1
 80131b2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80131b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131bc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80131c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80131c2:	2300      	movs	r3, #0
 80131c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80131c6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80131ca:	460b      	mov	r3, r1
 80131cc:	4313      	orrs	r3, r2
 80131ce:	d00e      	beq.n	80131ee <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80131d0:	4b86      	ldr	r3, [pc, #536]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131d2:	691b      	ldr	r3, [r3, #16]
 80131d4:	4a85      	ldr	r2, [pc, #532]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80131da:	6113      	str	r3, [r2, #16]
 80131dc:	4b83      	ldr	r3, [pc, #524]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131de:	6919      	ldr	r1, [r3, #16]
 80131e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80131e8:	4a80      	ldr	r2, [pc, #512]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131ea:	430b      	orrs	r3, r1
 80131ec:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80131ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131f6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80131fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80131fc:	2300      	movs	r3, #0
 80131fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013200:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8013204:	460b      	mov	r3, r1
 8013206:	4313      	orrs	r3, r2
 8013208:	d009      	beq.n	801321e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801320a:	4b78      	ldr	r3, [pc, #480]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801320c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801320e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8013212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013218:	4a74      	ldr	r2, [pc, #464]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801321a:	430b      	orrs	r3, r1
 801321c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801321e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013226:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801322a:	633b      	str	r3, [r7, #48]	@ 0x30
 801322c:	2300      	movs	r3, #0
 801322e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013230:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8013234:	460b      	mov	r3, r1
 8013236:	4313      	orrs	r3, r2
 8013238:	d00a      	beq.n	8013250 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801323a:	4b6c      	ldr	r3, [pc, #432]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801323c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801323e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8013242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801324a:	4a68      	ldr	r2, [pc, #416]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801324c:	430b      	orrs	r3, r1
 801324e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8013250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013258:	2100      	movs	r1, #0
 801325a:	62b9      	str	r1, [r7, #40]	@ 0x28
 801325c:	f003 0301 	and.w	r3, r3, #1
 8013260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013262:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8013266:	460b      	mov	r3, r1
 8013268:	4313      	orrs	r3, r2
 801326a:	d011      	beq.n	8013290 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801326c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013270:	3308      	adds	r3, #8
 8013272:	2100      	movs	r1, #0
 8013274:	4618      	mov	r0, r3
 8013276:	f001 f99d 	bl	80145b4 <RCCEx_PLL2_Config>
 801327a:	4603      	mov	r3, r0
 801327c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013280:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013284:	2b00      	cmp	r3, #0
 8013286:	d003      	beq.n	8013290 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013288:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801328c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8013290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013298:	2100      	movs	r1, #0
 801329a:	6239      	str	r1, [r7, #32]
 801329c:	f003 0302 	and.w	r3, r3, #2
 80132a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80132a2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80132a6:	460b      	mov	r3, r1
 80132a8:	4313      	orrs	r3, r2
 80132aa:	d011      	beq.n	80132d0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80132ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132b0:	3308      	adds	r3, #8
 80132b2:	2101      	movs	r1, #1
 80132b4:	4618      	mov	r0, r3
 80132b6:	f001 f97d 	bl	80145b4 <RCCEx_PLL2_Config>
 80132ba:	4603      	mov	r3, r0
 80132bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80132c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d003      	beq.n	80132d0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80132c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80132d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d8:	2100      	movs	r1, #0
 80132da:	61b9      	str	r1, [r7, #24]
 80132dc:	f003 0304 	and.w	r3, r3, #4
 80132e0:	61fb      	str	r3, [r7, #28]
 80132e2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80132e6:	460b      	mov	r3, r1
 80132e8:	4313      	orrs	r3, r2
 80132ea:	d011      	beq.n	8013310 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80132ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132f0:	3308      	adds	r3, #8
 80132f2:	2102      	movs	r1, #2
 80132f4:	4618      	mov	r0, r3
 80132f6:	f001 f95d 	bl	80145b4 <RCCEx_PLL2_Config>
 80132fa:	4603      	mov	r3, r0
 80132fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013300:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013304:	2b00      	cmp	r3, #0
 8013306:	d003      	beq.n	8013310 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013308:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801330c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8013310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013318:	2100      	movs	r1, #0
 801331a:	6139      	str	r1, [r7, #16]
 801331c:	f003 0308 	and.w	r3, r3, #8
 8013320:	617b      	str	r3, [r7, #20]
 8013322:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013326:	460b      	mov	r3, r1
 8013328:	4313      	orrs	r3, r2
 801332a:	d011      	beq.n	8013350 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801332c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013330:	3328      	adds	r3, #40	@ 0x28
 8013332:	2100      	movs	r1, #0
 8013334:	4618      	mov	r0, r3
 8013336:	f001 f9ef 	bl	8014718 <RCCEx_PLL3_Config>
 801333a:	4603      	mov	r3, r0
 801333c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8013340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013344:	2b00      	cmp	r3, #0
 8013346:	d003      	beq.n	8013350 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013348:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801334c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8013350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013358:	2100      	movs	r1, #0
 801335a:	60b9      	str	r1, [r7, #8]
 801335c:	f003 0310 	and.w	r3, r3, #16
 8013360:	60fb      	str	r3, [r7, #12]
 8013362:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8013366:	460b      	mov	r3, r1
 8013368:	4313      	orrs	r3, r2
 801336a:	d011      	beq.n	8013390 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801336c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013370:	3328      	adds	r3, #40	@ 0x28
 8013372:	2101      	movs	r1, #1
 8013374:	4618      	mov	r0, r3
 8013376:	f001 f9cf 	bl	8014718 <RCCEx_PLL3_Config>
 801337a:	4603      	mov	r3, r0
 801337c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013380:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013384:	2b00      	cmp	r3, #0
 8013386:	d003      	beq.n	8013390 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013388:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801338c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8013390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013398:	2100      	movs	r1, #0
 801339a:	6039      	str	r1, [r7, #0]
 801339c:	f003 0320 	and.w	r3, r3, #32
 80133a0:	607b      	str	r3, [r7, #4]
 80133a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80133a6:	460b      	mov	r3, r1
 80133a8:	4313      	orrs	r3, r2
 80133aa:	d011      	beq.n	80133d0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80133ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80133b0:	3328      	adds	r3, #40	@ 0x28
 80133b2:	2102      	movs	r1, #2
 80133b4:	4618      	mov	r0, r3
 80133b6:	f001 f9af 	bl	8014718 <RCCEx_PLL3_Config>
 80133ba:	4603      	mov	r3, r0
 80133bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80133c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d003      	beq.n	80133d0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80133c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80133cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80133d0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d101      	bne.n	80133dc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80133d8:	2300      	movs	r3, #0
 80133da:	e000      	b.n	80133de <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80133dc:	2301      	movs	r3, #1
}
 80133de:	4618      	mov	r0, r3
 80133e0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80133e4:	46bd      	mov	sp, r7
 80133e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80133ea:	bf00      	nop
 80133ec:	58024400 	.word	0x58024400

080133f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b090      	sub	sp, #64	@ 0x40
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80133fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133fe:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8013402:	430b      	orrs	r3, r1
 8013404:	f040 8094 	bne.w	8013530 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8013408:	4b9b      	ldr	r3, [pc, #620]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801340a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801340c:	f003 0307 	and.w	r3, r3, #7
 8013410:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8013412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013414:	2b04      	cmp	r3, #4
 8013416:	f200 8087 	bhi.w	8013528 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801341a:	a201      	add	r2, pc, #4	@ (adr r2, 8013420 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013420:	08013435 	.word	0x08013435
 8013424:	0801345d 	.word	0x0801345d
 8013428:	08013485 	.word	0x08013485
 801342c:	08013521 	.word	0x08013521
 8013430:	080134ad 	.word	0x080134ad
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013434:	4b90      	ldr	r3, [pc, #576]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801343c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013440:	d108      	bne.n	8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013446:	4618      	mov	r0, r3
 8013448:	f000 ff62 	bl	8014310 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801344c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801344e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013450:	f000 bc93 	b.w	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013454:	2300      	movs	r3, #0
 8013456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013458:	f000 bc8f 	b.w	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801345c:	4b86      	ldr	r3, [pc, #536]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013464:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013468:	d108      	bne.n	801347c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801346a:	f107 0318 	add.w	r3, r7, #24
 801346e:	4618      	mov	r0, r3
 8013470:	f000 fca6 	bl	8013dc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013474:	69bb      	ldr	r3, [r7, #24]
 8013476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013478:	f000 bc7f 	b.w	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801347c:	2300      	movs	r3, #0
 801347e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013480:	f000 bc7b 	b.w	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013484:	4b7c      	ldr	r3, [pc, #496]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801348c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013490:	d108      	bne.n	80134a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013492:	f107 030c 	add.w	r3, r7, #12
 8013496:	4618      	mov	r0, r3
 8013498:	f000 fde6 	bl	8014068 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80134a0:	f000 bc6b 	b.w	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80134a4:	2300      	movs	r3, #0
 80134a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134a8:	f000 bc67 	b.w	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80134ac:	4b72      	ldr	r3, [pc, #456]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80134b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80134b4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80134b6:	4b70      	ldr	r3, [pc, #448]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	f003 0304 	and.w	r3, r3, #4
 80134be:	2b04      	cmp	r3, #4
 80134c0:	d10c      	bne.n	80134dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80134c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d109      	bne.n	80134dc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80134c8:	4b6b      	ldr	r3, [pc, #428]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	08db      	lsrs	r3, r3, #3
 80134ce:	f003 0303 	and.w	r3, r3, #3
 80134d2:	4a6a      	ldr	r2, [pc, #424]	@ (801367c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80134d4:	fa22 f303 	lsr.w	r3, r2, r3
 80134d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134da:	e01f      	b.n	801351c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80134dc:	4b66      	ldr	r3, [pc, #408]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80134e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80134e8:	d106      	bne.n	80134f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80134ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80134f0:	d102      	bne.n	80134f8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80134f2:	4b63      	ldr	r3, [pc, #396]	@ (8013680 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80134f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134f6:	e011      	b.n	801351c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80134f8:	4b5f      	ldr	r3, [pc, #380]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013500:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013504:	d106      	bne.n	8013514 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8013506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013508:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801350c:	d102      	bne.n	8013514 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801350e:	4b5d      	ldr	r3, [pc, #372]	@ (8013684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013510:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013512:	e003      	b.n	801351c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013514:	2300      	movs	r3, #0
 8013516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013518:	f000 bc2f 	b.w	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801351c:	f000 bc2d 	b.w	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013520:	4b59      	ldr	r3, [pc, #356]	@ (8013688 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8013522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013524:	f000 bc29 	b.w	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013528:	2300      	movs	r3, #0
 801352a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801352c:	f000 bc25 	b.w	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8013530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013534:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8013538:	430b      	orrs	r3, r1
 801353a:	f040 80a7 	bne.w	801368c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801353e:	4b4e      	ldr	r3, [pc, #312]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013542:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8013546:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8013548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801354a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801354e:	d054      	beq.n	80135fa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8013550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013552:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013556:	f200 808b 	bhi.w	8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801355a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801355c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013560:	f000 8083 	beq.w	801366a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8013564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013566:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801356a:	f200 8081 	bhi.w	8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801356e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013570:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013574:	d02f      	beq.n	80135d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8013576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013578:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801357c:	d878      	bhi.n	8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801357e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013580:	2b00      	cmp	r3, #0
 8013582:	d004      	beq.n	801358e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8013584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013586:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801358a:	d012      	beq.n	80135b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 801358c:	e070      	b.n	8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801358e:	4b3a      	ldr	r3, [pc, #232]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013596:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801359a:	d107      	bne.n	80135ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801359c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80135a0:	4618      	mov	r0, r3
 80135a2:	f000 feb5 	bl	8014310 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80135a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80135aa:	e3e6      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80135ac:	2300      	movs	r3, #0
 80135ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135b0:	e3e3      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80135b2:	4b31      	ldr	r3, [pc, #196]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80135ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80135be:	d107      	bne.n	80135d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80135c0:	f107 0318 	add.w	r3, r7, #24
 80135c4:	4618      	mov	r0, r3
 80135c6:	f000 fbfb 	bl	8013dc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80135ca:	69bb      	ldr	r3, [r7, #24]
 80135cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80135ce:	e3d4      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80135d0:	2300      	movs	r3, #0
 80135d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135d4:	e3d1      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80135d6:	4b28      	ldr	r3, [pc, #160]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80135de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80135e2:	d107      	bne.n	80135f4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80135e4:	f107 030c 	add.w	r3, r7, #12
 80135e8:	4618      	mov	r0, r3
 80135ea:	f000 fd3d 	bl	8014068 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80135f2:	e3c2      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80135f4:	2300      	movs	r3, #0
 80135f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135f8:	e3bf      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80135fa:	4b1f      	ldr	r3, [pc, #124]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80135fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80135fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013602:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013604:	4b1c      	ldr	r3, [pc, #112]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	f003 0304 	and.w	r3, r3, #4
 801360c:	2b04      	cmp	r3, #4
 801360e:	d10c      	bne.n	801362a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8013610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013612:	2b00      	cmp	r3, #0
 8013614:	d109      	bne.n	801362a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013616:	4b18      	ldr	r3, [pc, #96]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	08db      	lsrs	r3, r3, #3
 801361c:	f003 0303 	and.w	r3, r3, #3
 8013620:	4a16      	ldr	r2, [pc, #88]	@ (801367c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8013622:	fa22 f303 	lsr.w	r3, r2, r3
 8013626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013628:	e01e      	b.n	8013668 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801362a:	4b13      	ldr	r3, [pc, #76]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013632:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013636:	d106      	bne.n	8013646 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8013638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801363a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801363e:	d102      	bne.n	8013646 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013640:	4b0f      	ldr	r3, [pc, #60]	@ (8013680 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8013642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013644:	e010      	b.n	8013668 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013646:	4b0c      	ldr	r3, [pc, #48]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801364e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013652:	d106      	bne.n	8013662 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8013654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013656:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801365a:	d102      	bne.n	8013662 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801365c:	4b09      	ldr	r3, [pc, #36]	@ (8013684 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801365e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013660:	e002      	b.n	8013668 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013662:	2300      	movs	r3, #0
 8013664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013666:	e388      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013668:	e387      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801366a:	4b07      	ldr	r3, [pc, #28]	@ (8013688 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801366c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801366e:	e384      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013670:	2300      	movs	r3, #0
 8013672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013674:	e381      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013676:	bf00      	nop
 8013678:	58024400 	.word	0x58024400
 801367c:	03d09000 	.word	0x03d09000
 8013680:	003d0900 	.word	0x003d0900
 8013684:	016e3600 	.word	0x016e3600
 8013688:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801368c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013690:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8013694:	430b      	orrs	r3, r1
 8013696:	f040 809c 	bne.w	80137d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801369a:	4b9e      	ldr	r3, [pc, #632]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801369c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801369e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80136a2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80136a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80136aa:	d054      	beq.n	8013756 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80136ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80136b2:	f200 808b 	bhi.w	80137cc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80136b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80136bc:	f000 8083 	beq.w	80137c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80136c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80136c6:	f200 8081 	bhi.w	80137cc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80136ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80136d0:	d02f      	beq.n	8013732 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80136d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80136d8:	d878      	bhi.n	80137cc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80136da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d004      	beq.n	80136ea <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80136e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80136e6:	d012      	beq.n	801370e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80136e8:	e070      	b.n	80137cc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80136ea:	4b8a      	ldr	r3, [pc, #552]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80136f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80136f6:	d107      	bne.n	8013708 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80136f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80136fc:	4618      	mov	r0, r3
 80136fe:	f000 fe07 	bl	8014310 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013706:	e338      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013708:	2300      	movs	r3, #0
 801370a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801370c:	e335      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801370e:	4b81      	ldr	r3, [pc, #516]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013716:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801371a:	d107      	bne.n	801372c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801371c:	f107 0318 	add.w	r3, r7, #24
 8013720:	4618      	mov	r0, r3
 8013722:	f000 fb4d 	bl	8013dc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013726:	69bb      	ldr	r3, [r7, #24]
 8013728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801372a:	e326      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801372c:	2300      	movs	r3, #0
 801372e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013730:	e323      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013732:	4b78      	ldr	r3, [pc, #480]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801373a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801373e:	d107      	bne.n	8013750 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013740:	f107 030c 	add.w	r3, r7, #12
 8013744:	4618      	mov	r0, r3
 8013746:	f000 fc8f 	bl	8014068 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801374e:	e314      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013750:	2300      	movs	r3, #0
 8013752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013754:	e311      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013756:	4b6f      	ldr	r3, [pc, #444]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801375a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801375e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013760:	4b6c      	ldr	r3, [pc, #432]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	f003 0304 	and.w	r3, r3, #4
 8013768:	2b04      	cmp	r3, #4
 801376a:	d10c      	bne.n	8013786 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 801376c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801376e:	2b00      	cmp	r3, #0
 8013770:	d109      	bne.n	8013786 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013772:	4b68      	ldr	r3, [pc, #416]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	08db      	lsrs	r3, r3, #3
 8013778:	f003 0303 	and.w	r3, r3, #3
 801377c:	4a66      	ldr	r2, [pc, #408]	@ (8013918 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801377e:	fa22 f303 	lsr.w	r3, r2, r3
 8013782:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013784:	e01e      	b.n	80137c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013786:	4b63      	ldr	r3, [pc, #396]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801378e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013792:	d106      	bne.n	80137a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8013794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013796:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801379a:	d102      	bne.n	80137a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801379c:	4b5f      	ldr	r3, [pc, #380]	@ (801391c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801379e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137a0:	e010      	b.n	80137c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80137a2:	4b5c      	ldr	r3, [pc, #368]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80137aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80137ae:	d106      	bne.n	80137be <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80137b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80137b6:	d102      	bne.n	80137be <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80137b8:	4b59      	ldr	r3, [pc, #356]	@ (8013920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80137ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137bc:	e002      	b.n	80137c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80137be:	2300      	movs	r3, #0
 80137c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80137c2:	e2da      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80137c4:	e2d9      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80137c6:	4b57      	ldr	r3, [pc, #348]	@ (8013924 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80137c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137ca:	e2d6      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80137cc:	2300      	movs	r3, #0
 80137ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137d0:	e2d3      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80137d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80137d6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80137da:	430b      	orrs	r3, r1
 80137dc:	f040 80a7 	bne.w	801392e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80137e0:	4b4c      	ldr	r3, [pc, #304]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80137e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80137e4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80137e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80137ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80137f0:	d055      	beq.n	801389e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80137f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80137f8:	f200 8096 	bhi.w	8013928 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80137fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013802:	f000 8084 	beq.w	801390e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8013806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013808:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801380c:	f200 808c 	bhi.w	8013928 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013816:	d030      	beq.n	801387a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8013818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801381a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801381e:	f200 8083 	bhi.w	8013928 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013824:	2b00      	cmp	r3, #0
 8013826:	d004      	beq.n	8013832 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8013828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801382a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801382e:	d012      	beq.n	8013856 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8013830:	e07a      	b.n	8013928 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013832:	4b38      	ldr	r3, [pc, #224]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801383a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801383e:	d107      	bne.n	8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013844:	4618      	mov	r0, r3
 8013846:	f000 fd63 	bl	8014310 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801384a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801384c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801384e:	e294      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013850:	2300      	movs	r3, #0
 8013852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013854:	e291      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013856:	4b2f      	ldr	r3, [pc, #188]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801385e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013862:	d107      	bne.n	8013874 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013864:	f107 0318 	add.w	r3, r7, #24
 8013868:	4618      	mov	r0, r3
 801386a:	f000 faa9 	bl	8013dc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801386e:	69bb      	ldr	r3, [r7, #24]
 8013870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013872:	e282      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013874:	2300      	movs	r3, #0
 8013876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013878:	e27f      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801387a:	4b26      	ldr	r3, [pc, #152]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013882:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013886:	d107      	bne.n	8013898 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013888:	f107 030c 	add.w	r3, r7, #12
 801388c:	4618      	mov	r0, r3
 801388e:	f000 fbeb 	bl	8014068 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013896:	e270      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013898:	2300      	movs	r3, #0
 801389a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801389c:	e26d      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801389e:	4b1d      	ldr	r3, [pc, #116]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80138a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80138a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80138a8:	4b1a      	ldr	r3, [pc, #104]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	f003 0304 	and.w	r3, r3, #4
 80138b0:	2b04      	cmp	r3, #4
 80138b2:	d10c      	bne.n	80138ce <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80138b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d109      	bne.n	80138ce <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80138ba:	4b16      	ldr	r3, [pc, #88]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	08db      	lsrs	r3, r3, #3
 80138c0:	f003 0303 	and.w	r3, r3, #3
 80138c4:	4a14      	ldr	r2, [pc, #80]	@ (8013918 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80138c6:	fa22 f303 	lsr.w	r3, r2, r3
 80138ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138cc:	e01e      	b.n	801390c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80138ce:	4b11      	ldr	r3, [pc, #68]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80138d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80138da:	d106      	bne.n	80138ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80138dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80138e2:	d102      	bne.n	80138ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80138e4:	4b0d      	ldr	r3, [pc, #52]	@ (801391c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80138e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138e8:	e010      	b.n	801390c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80138ea:	4b0a      	ldr	r3, [pc, #40]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80138f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80138f6:	d106      	bne.n	8013906 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80138f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80138fe:	d102      	bne.n	8013906 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013900:	4b07      	ldr	r3, [pc, #28]	@ (8013920 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013902:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013904:	e002      	b.n	801390c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013906:	2300      	movs	r3, #0
 8013908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801390a:	e236      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801390c:	e235      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801390e:	4b05      	ldr	r3, [pc, #20]	@ (8013924 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013912:	e232      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013914:	58024400 	.word	0x58024400
 8013918:	03d09000 	.word	0x03d09000
 801391c:	003d0900 	.word	0x003d0900
 8013920:	016e3600 	.word	0x016e3600
 8013924:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8013928:	2300      	movs	r3, #0
 801392a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801392c:	e225      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801392e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013932:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8013936:	430b      	orrs	r3, r1
 8013938:	f040 8085 	bne.w	8013a46 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801393c:	4b9c      	ldr	r3, [pc, #624]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801393e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013940:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8013944:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8013946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013948:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801394c:	d06b      	beq.n	8013a26 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 801394e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013950:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013954:	d874      	bhi.n	8013a40 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8013956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013958:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801395c:	d056      	beq.n	8013a0c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 801395e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013960:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013964:	d86c      	bhi.n	8013a40 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8013966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013968:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801396c:	d03b      	beq.n	80139e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 801396e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013970:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013974:	d864      	bhi.n	8013a40 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8013976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013978:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801397c:	d021      	beq.n	80139c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 801397e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013980:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013984:	d85c      	bhi.n	8013a40 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8013986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013988:	2b00      	cmp	r3, #0
 801398a:	d004      	beq.n	8013996 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 801398c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801398e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013992:	d004      	beq.n	801399e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8013994:	e054      	b.n	8013a40 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8013996:	f7fe fb5f 	bl	8012058 <HAL_RCC_GetPCLK1Freq>
 801399a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801399c:	e1ed      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801399e:	4b84      	ldr	r3, [pc, #528]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80139a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80139aa:	d107      	bne.n	80139bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80139ac:	f107 0318 	add.w	r3, r7, #24
 80139b0:	4618      	mov	r0, r3
 80139b2:	f000 fa05 	bl	8013dc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80139b6:	69fb      	ldr	r3, [r7, #28]
 80139b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139ba:	e1de      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139bc:	2300      	movs	r3, #0
 80139be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139c0:	e1db      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80139c2:	4b7b      	ldr	r3, [pc, #492]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80139ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80139ce:	d107      	bne.n	80139e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80139d0:	f107 030c 	add.w	r3, r7, #12
 80139d4:	4618      	mov	r0, r3
 80139d6:	f000 fb47 	bl	8014068 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80139da:	693b      	ldr	r3, [r7, #16]
 80139dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139de:	e1cc      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139e0:	2300      	movs	r3, #0
 80139e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139e4:	e1c9      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80139e6:	4b72      	ldr	r3, [pc, #456]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	f003 0304 	and.w	r3, r3, #4
 80139ee:	2b04      	cmp	r3, #4
 80139f0:	d109      	bne.n	8013a06 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80139f2:	4b6f      	ldr	r3, [pc, #444]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	08db      	lsrs	r3, r3, #3
 80139f8:	f003 0303 	and.w	r3, r3, #3
 80139fc:	4a6d      	ldr	r2, [pc, #436]	@ (8013bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80139fe:	fa22 f303 	lsr.w	r3, r2, r3
 8013a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a04:	e1b9      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a06:	2300      	movs	r3, #0
 8013a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a0a:	e1b6      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013a0c:	4b68      	ldr	r3, [pc, #416]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013a18:	d102      	bne.n	8013a20 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8013a1a:	4b67      	ldr	r3, [pc, #412]	@ (8013bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a1e:	e1ac      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a20:	2300      	movs	r3, #0
 8013a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a24:	e1a9      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013a26:	4b62      	ldr	r3, [pc, #392]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013a2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a32:	d102      	bne.n	8013a3a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8013a34:	4b61      	ldr	r3, [pc, #388]	@ (8013bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a38:	e19f      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a3e:	e19c      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013a40:	2300      	movs	r3, #0
 8013a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a44:	e199      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8013a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013a4a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8013a4e:	430b      	orrs	r3, r1
 8013a50:	d173      	bne.n	8013b3a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8013a52:	4b57      	ldr	r3, [pc, #348]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013a56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8013a5a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a62:	d02f      	beq.n	8013ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8013a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a6a:	d863      	bhi.n	8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8013a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d004      	beq.n	8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8013a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013a78:	d012      	beq.n	8013aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8013a7a:	e05b      	b.n	8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013a7c:	4b4c      	ldr	r3, [pc, #304]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013a84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013a88:	d107      	bne.n	8013a9a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013a8a:	f107 0318 	add.w	r3, r7, #24
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f000 f996 	bl	8013dc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013a94:	69bb      	ldr	r3, [r7, #24]
 8013a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a98:	e16f      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a9e:	e16c      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013aa0:	4b43      	ldr	r3, [pc, #268]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013aac:	d107      	bne.n	8013abe <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013aae:	f107 030c 	add.w	r3, r7, #12
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f000 fad8 	bl	8014068 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013abc:	e15d      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013abe:	2300      	movs	r3, #0
 8013ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ac2:	e15a      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013ac4:	4b3a      	ldr	r3, [pc, #232]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013ac8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013acc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013ace:	4b38      	ldr	r3, [pc, #224]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	f003 0304 	and.w	r3, r3, #4
 8013ad6:	2b04      	cmp	r3, #4
 8013ad8:	d10c      	bne.n	8013af4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8013ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d109      	bne.n	8013af4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013ae0:	4b33      	ldr	r3, [pc, #204]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	08db      	lsrs	r3, r3, #3
 8013ae6:	f003 0303 	and.w	r3, r3, #3
 8013aea:	4a32      	ldr	r2, [pc, #200]	@ (8013bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8013aec:	fa22 f303 	lsr.w	r3, r2, r3
 8013af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013af2:	e01e      	b.n	8013b32 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013af4:	4b2e      	ldr	r3, [pc, #184]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013afc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013b00:	d106      	bne.n	8013b10 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8013b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013b08:	d102      	bne.n	8013b10 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8013bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b0e:	e010      	b.n	8013b32 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013b10:	4b27      	ldr	r3, [pc, #156]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013b18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013b1c:	d106      	bne.n	8013b2c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8013b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013b24:	d102      	bne.n	8013b2c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013b26:	4b25      	ldr	r3, [pc, #148]	@ (8013bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b2a:	e002      	b.n	8013b32 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013b30:	e123      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013b32:	e122      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013b34:	2300      	movs	r3, #0
 8013b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b38:	e11f      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8013b3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b3e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8013b42:	430b      	orrs	r3, r1
 8013b44:	d13c      	bne.n	8013bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8013b46:	4b1a      	ldr	r3, [pc, #104]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013b4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013b4e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d004      	beq.n	8013b60 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8013b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013b5c:	d012      	beq.n	8013b84 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8013b5e:	e023      	b.n	8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013b60:	4b13      	ldr	r3, [pc, #76]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013b68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013b6c:	d107      	bne.n	8013b7e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013b72:	4618      	mov	r0, r3
 8013b74:	f000 fbcc 	bl	8014310 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013b7c:	e0fd      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013b7e:	2300      	movs	r3, #0
 8013b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b82:	e0fa      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013b84:	4b0a      	ldr	r3, [pc, #40]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013b8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013b90:	d107      	bne.n	8013ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013b92:	f107 0318 	add.w	r3, r7, #24
 8013b96:	4618      	mov	r0, r3
 8013b98:	f000 f912 	bl	8013dc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8013b9c:	6a3b      	ldr	r3, [r7, #32]
 8013b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013ba0:	e0eb      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ba6:	e0e8      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013bac:	e0e5      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013bae:	bf00      	nop
 8013bb0:	58024400 	.word	0x58024400
 8013bb4:	03d09000 	.word	0x03d09000
 8013bb8:	003d0900 	.word	0x003d0900
 8013bbc:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8013bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013bc4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8013bc8:	430b      	orrs	r3, r1
 8013bca:	f040 8085 	bne.w	8013cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8013bce:	4b6d      	ldr	r3, [pc, #436]	@ (8013d84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013bd2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8013bd6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013bde:	d06b      	beq.n	8013cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8013be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013be6:	d874      	bhi.n	8013cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013bee:	d056      	beq.n	8013c9e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8013bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013bf6:	d86c      	bhi.n	8013cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013bfe:	d03b      	beq.n	8013c78 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8013c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013c06:	d864      	bhi.n	8013cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c0e:	d021      	beq.n	8013c54 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8013c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c16:	d85c      	bhi.n	8013cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d004      	beq.n	8013c28 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8013c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013c24:	d004      	beq.n	8013c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8013c26:	e054      	b.n	8013cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8013c28:	f000 f8b4 	bl	8013d94 <HAL_RCCEx_GetD3PCLK1Freq>
 8013c2c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013c2e:	e0a4      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013c30:	4b54      	ldr	r3, [pc, #336]	@ (8013d84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013c38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013c3c:	d107      	bne.n	8013c4e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013c3e:	f107 0318 	add.w	r3, r7, #24
 8013c42:	4618      	mov	r0, r3
 8013c44:	f000 f8bc 	bl	8013dc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013c48:	69fb      	ldr	r3, [r7, #28]
 8013c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c4c:	e095      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c52:	e092      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013c54:	4b4b      	ldr	r3, [pc, #300]	@ (8013d84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013c5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c60:	d107      	bne.n	8013c72 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013c62:	f107 030c 	add.w	r3, r7, #12
 8013c66:	4618      	mov	r0, r3
 8013c68:	f000 f9fe 	bl	8014068 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013c6c:	693b      	ldr	r3, [r7, #16]
 8013c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c70:	e083      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c72:	2300      	movs	r3, #0
 8013c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c76:	e080      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013c78:	4b42      	ldr	r3, [pc, #264]	@ (8013d84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	f003 0304 	and.w	r3, r3, #4
 8013c80:	2b04      	cmp	r3, #4
 8013c82:	d109      	bne.n	8013c98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013c84:	4b3f      	ldr	r3, [pc, #252]	@ (8013d84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	08db      	lsrs	r3, r3, #3
 8013c8a:	f003 0303 	and.w	r3, r3, #3
 8013c8e:	4a3e      	ldr	r2, [pc, #248]	@ (8013d88 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8013c90:	fa22 f303 	lsr.w	r3, r2, r3
 8013c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c96:	e070      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c98:	2300      	movs	r3, #0
 8013c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c9c:	e06d      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013c9e:	4b39      	ldr	r3, [pc, #228]	@ (8013d84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013ca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013caa:	d102      	bne.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8013cac:	4b37      	ldr	r3, [pc, #220]	@ (8013d8c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8013cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013cb0:	e063      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cb6:	e060      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013cb8:	4b32      	ldr	r3, [pc, #200]	@ (8013d84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013cc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013cc4:	d102      	bne.n	8013ccc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8013cc6:	4b32      	ldr	r3, [pc, #200]	@ (8013d90 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013cca:	e056      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013ccc:	2300      	movs	r3, #0
 8013cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cd0:	e053      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cd6:	e050      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8013cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013cdc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8013ce0:	430b      	orrs	r3, r1
 8013ce2:	d148      	bne.n	8013d76 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8013ce4:	4b27      	ldr	r3, [pc, #156]	@ (8013d84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013ce8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013cec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013cf4:	d02a      	beq.n	8013d4c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8013cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013cfc:	d838      	bhi.n	8013d70 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8013cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d004      	beq.n	8013d0e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8013d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013d0a:	d00d      	beq.n	8013d28 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8013d0c:	e030      	b.n	8013d70 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8013d84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013d16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013d1a:	d102      	bne.n	8013d22 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8013d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8013d90 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013d20:	e02b      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013d22:	2300      	movs	r3, #0
 8013d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d26:	e028      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013d28:	4b16      	ldr	r3, [pc, #88]	@ (8013d84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013d30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013d34:	d107      	bne.n	8013d46 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f000 fae8 	bl	8014310 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013d44:	e019      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013d46:	2300      	movs	r3, #0
 8013d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d4a:	e016      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8013d84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013d54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013d58:	d107      	bne.n	8013d6a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013d5a:	f107 0318 	add.w	r3, r7, #24
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f000 f82e 	bl	8013dc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013d64:	69fb      	ldr	r3, [r7, #28]
 8013d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013d68:	e007      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d6e:	e004      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013d70:	2300      	movs	r3, #0
 8013d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d74:	e001      	b.n	8013d7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8013d76:	2300      	movs	r3, #0
 8013d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8013d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3740      	adds	r7, #64	@ 0x40
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}
 8013d84:	58024400 	.word	0x58024400
 8013d88:	03d09000 	.word	0x03d09000
 8013d8c:	003d0900 	.word	0x003d0900
 8013d90:	016e3600 	.word	0x016e3600

08013d94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013d98:	f7fe f92e 	bl	8011ff8 <HAL_RCC_GetHCLKFreq>
 8013d9c:	4602      	mov	r2, r0
 8013d9e:	4b06      	ldr	r3, [pc, #24]	@ (8013db8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013da0:	6a1b      	ldr	r3, [r3, #32]
 8013da2:	091b      	lsrs	r3, r3, #4
 8013da4:	f003 0307 	and.w	r3, r3, #7
 8013da8:	4904      	ldr	r1, [pc, #16]	@ (8013dbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013daa:	5ccb      	ldrb	r3, [r1, r3]
 8013dac:	f003 031f 	and.w	r3, r3, #31
 8013db0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013db4:	4618      	mov	r0, r3
 8013db6:	bd80      	pop	{r7, pc}
 8013db8:	58024400 	.word	0x58024400
 8013dbc:	0801ea64 	.word	0x0801ea64

08013dc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8013dc0:	b480      	push	{r7}
 8013dc2:	b089      	sub	sp, #36	@ 0x24
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013dc8:	4ba1      	ldr	r3, [pc, #644]	@ (8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013dcc:	f003 0303 	and.w	r3, r3, #3
 8013dd0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8013dd2:	4b9f      	ldr	r3, [pc, #636]	@ (8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013dd6:	0b1b      	lsrs	r3, r3, #12
 8013dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013ddc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013dde:	4b9c      	ldr	r3, [pc, #624]	@ (8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013de2:	091b      	lsrs	r3, r3, #4
 8013de4:	f003 0301 	and.w	r3, r3, #1
 8013de8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8013dea:	4b99      	ldr	r3, [pc, #612]	@ (8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013dee:	08db      	lsrs	r3, r3, #3
 8013df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013df4:	693a      	ldr	r2, [r7, #16]
 8013df6:	fb02 f303 	mul.w	r3, r2, r3
 8013dfa:	ee07 3a90 	vmov	s15, r3
 8013dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	f000 8111 	beq.w	8014030 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8013e0e:	69bb      	ldr	r3, [r7, #24]
 8013e10:	2b02      	cmp	r3, #2
 8013e12:	f000 8083 	beq.w	8013f1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013e16:	69bb      	ldr	r3, [r7, #24]
 8013e18:	2b02      	cmp	r3, #2
 8013e1a:	f200 80a1 	bhi.w	8013f60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013e1e:	69bb      	ldr	r3, [r7, #24]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d003      	beq.n	8013e2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013e24:	69bb      	ldr	r3, [r7, #24]
 8013e26:	2b01      	cmp	r3, #1
 8013e28:	d056      	beq.n	8013ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013e2a:	e099      	b.n	8013f60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013e2c:	4b88      	ldr	r3, [pc, #544]	@ (8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	f003 0320 	and.w	r3, r3, #32
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d02d      	beq.n	8013e94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013e38:	4b85      	ldr	r3, [pc, #532]	@ (8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	08db      	lsrs	r3, r3, #3
 8013e3e:	f003 0303 	and.w	r3, r3, #3
 8013e42:	4a84      	ldr	r2, [pc, #528]	@ (8014054 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013e44:	fa22 f303 	lsr.w	r3, r2, r3
 8013e48:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013e4a:	68bb      	ldr	r3, [r7, #8]
 8013e4c:	ee07 3a90 	vmov	s15, r3
 8013e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e54:	697b      	ldr	r3, [r7, #20]
 8013e56:	ee07 3a90 	vmov	s15, r3
 8013e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e62:	4b7b      	ldr	r3, [pc, #492]	@ (8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e6a:	ee07 3a90 	vmov	s15, r3
 8013e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8014058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013e92:	e087      	b.n	8013fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013e94:	697b      	ldr	r3, [r7, #20]
 8013e96:	ee07 3a90 	vmov	s15, r3
 8013e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e9e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801405c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ea6:	4b6a      	ldr	r3, [pc, #424]	@ (8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013eae:	ee07 3a90 	vmov	s15, r3
 8013eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8013eba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8014058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013ed6:	e065      	b.n	8013fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013ed8:	697b      	ldr	r3, [r7, #20]
 8013eda:	ee07 3a90 	vmov	s15, r3
 8013ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ee2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8014060 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013eea:	4b59      	ldr	r3, [pc, #356]	@ (8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ef2:	ee07 3a90 	vmov	s15, r3
 8013ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8013efe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8014058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013f1a:	e043      	b.n	8013fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013f1c:	697b      	ldr	r3, [r7, #20]
 8013f1e:	ee07 3a90 	vmov	s15, r3
 8013f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8014064 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f2e:	4b48      	ldr	r3, [pc, #288]	@ (8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f36:	ee07 3a90 	vmov	s15, r3
 8013f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8014058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013f5e:	e021      	b.n	8013fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013f60:	697b      	ldr	r3, [r7, #20]
 8013f62:	ee07 3a90 	vmov	s15, r3
 8013f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8014060 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f72:	4b37      	ldr	r3, [pc, #220]	@ (8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f7a:	ee07 3a90 	vmov	s15, r3
 8013f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8014058 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013fa2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8013fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013fa8:	0a5b      	lsrs	r3, r3, #9
 8013faa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013fae:	ee07 3a90 	vmov	s15, r3
 8013fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013fba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013fbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8013fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013fca:	ee17 2a90 	vmov	r2, s15
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8013fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013fd6:	0c1b      	lsrs	r3, r3, #16
 8013fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013fdc:	ee07 3a90 	vmov	s15, r3
 8013fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fe4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013fe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013fec:	edd7 6a07 	vldr	s13, [r7, #28]
 8013ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013ff8:	ee17 2a90 	vmov	r2, s15
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8014000:	4b13      	ldr	r3, [pc, #76]	@ (8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8014002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014004:	0e1b      	lsrs	r3, r3, #24
 8014006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801400a:	ee07 3a90 	vmov	s15, r3
 801400e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014012:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014016:	ee37 7a87 	vadd.f32	s14, s15, s14
 801401a:	edd7 6a07 	vldr	s13, [r7, #28]
 801401e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014026:	ee17 2a90 	vmov	r2, s15
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801402e:	e008      	b.n	8014042 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	2200      	movs	r2, #0
 8014034:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	2200      	movs	r2, #0
 801403a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	2200      	movs	r2, #0
 8014040:	609a      	str	r2, [r3, #8]
}
 8014042:	bf00      	nop
 8014044:	3724      	adds	r7, #36	@ 0x24
 8014046:	46bd      	mov	sp, r7
 8014048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404c:	4770      	bx	lr
 801404e:	bf00      	nop
 8014050:	58024400 	.word	0x58024400
 8014054:	03d09000 	.word	0x03d09000
 8014058:	46000000 	.word	0x46000000
 801405c:	4c742400 	.word	0x4c742400
 8014060:	4a742400 	.word	0x4a742400
 8014064:	4bb71b00 	.word	0x4bb71b00

08014068 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8014068:	b480      	push	{r7}
 801406a:	b089      	sub	sp, #36	@ 0x24
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014070:	4ba1      	ldr	r3, [pc, #644]	@ (80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014074:	f003 0303 	and.w	r3, r3, #3
 8014078:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801407a:	4b9f      	ldr	r3, [pc, #636]	@ (80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801407c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801407e:	0d1b      	lsrs	r3, r3, #20
 8014080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014084:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8014086:	4b9c      	ldr	r3, [pc, #624]	@ (80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801408a:	0a1b      	lsrs	r3, r3, #8
 801408c:	f003 0301 	and.w	r3, r3, #1
 8014090:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8014092:	4b99      	ldr	r3, [pc, #612]	@ (80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014096:	08db      	lsrs	r3, r3, #3
 8014098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801409c:	693a      	ldr	r2, [r7, #16]
 801409e:	fb02 f303 	mul.w	r3, r2, r3
 80140a2:	ee07 3a90 	vmov	s15, r3
 80140a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80140ae:	697b      	ldr	r3, [r7, #20]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	f000 8111 	beq.w	80142d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80140b6:	69bb      	ldr	r3, [r7, #24]
 80140b8:	2b02      	cmp	r3, #2
 80140ba:	f000 8083 	beq.w	80141c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80140be:	69bb      	ldr	r3, [r7, #24]
 80140c0:	2b02      	cmp	r3, #2
 80140c2:	f200 80a1 	bhi.w	8014208 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80140c6:	69bb      	ldr	r3, [r7, #24]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d003      	beq.n	80140d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80140cc:	69bb      	ldr	r3, [r7, #24]
 80140ce:	2b01      	cmp	r3, #1
 80140d0:	d056      	beq.n	8014180 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80140d2:	e099      	b.n	8014208 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80140d4:	4b88      	ldr	r3, [pc, #544]	@ (80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	f003 0320 	and.w	r3, r3, #32
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d02d      	beq.n	801413c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80140e0:	4b85      	ldr	r3, [pc, #532]	@ (80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	08db      	lsrs	r3, r3, #3
 80140e6:	f003 0303 	and.w	r3, r3, #3
 80140ea:	4a84      	ldr	r2, [pc, #528]	@ (80142fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80140ec:	fa22 f303 	lsr.w	r3, r2, r3
 80140f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80140f2:	68bb      	ldr	r3, [r7, #8]
 80140f4:	ee07 3a90 	vmov	s15, r3
 80140f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140fc:	697b      	ldr	r3, [r7, #20]
 80140fe:	ee07 3a90 	vmov	s15, r3
 8014102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801410a:	4b7b      	ldr	r3, [pc, #492]	@ (80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801410e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014112:	ee07 3a90 	vmov	s15, r3
 8014116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801411a:	ed97 6a03 	vldr	s12, [r7, #12]
 801411e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8014300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801412a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801412e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014136:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801413a:	e087      	b.n	801424c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801413c:	697b      	ldr	r3, [r7, #20]
 801413e:	ee07 3a90 	vmov	s15, r3
 8014142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014146:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8014304 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801414a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801414e:	4b6a      	ldr	r3, [pc, #424]	@ (80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014156:	ee07 3a90 	vmov	s15, r3
 801415a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801415e:	ed97 6a03 	vldr	s12, [r7, #12]
 8014162:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8014300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801416a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801416e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014176:	ee67 7a27 	vmul.f32	s15, s14, s15
 801417a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801417e:	e065      	b.n	801424c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014180:	697b      	ldr	r3, [r7, #20]
 8014182:	ee07 3a90 	vmov	s15, r3
 8014186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801418a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8014308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801418e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014192:	4b59      	ldr	r3, [pc, #356]	@ (80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801419a:	ee07 3a90 	vmov	s15, r3
 801419e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80141a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80141a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8014300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80141aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80141ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80141b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80141b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80141c2:	e043      	b.n	801424c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80141c4:	697b      	ldr	r3, [r7, #20]
 80141c6:	ee07 3a90 	vmov	s15, r3
 80141ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801430c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80141d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80141d6:	4b48      	ldr	r3, [pc, #288]	@ (80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80141d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141de:	ee07 3a90 	vmov	s15, r3
 80141e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80141e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80141ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8014300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80141ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80141f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80141f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80141fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014206:	e021      	b.n	801424c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	ee07 3a90 	vmov	s15, r3
 801420e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014212:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8014308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8014216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801421a:	4b37      	ldr	r3, [pc, #220]	@ (80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801421e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014222:	ee07 3a90 	vmov	s15, r3
 8014226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801422a:	ed97 6a03 	vldr	s12, [r7, #12]
 801422e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8014300 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801423a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801423e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801424a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801424c:	4b2a      	ldr	r3, [pc, #168]	@ (80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801424e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014250:	0a5b      	lsrs	r3, r3, #9
 8014252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014256:	ee07 3a90 	vmov	s15, r3
 801425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801425e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014262:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014266:	edd7 6a07 	vldr	s13, [r7, #28]
 801426a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801426e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014272:	ee17 2a90 	vmov	r2, s15
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801427a:	4b1f      	ldr	r3, [pc, #124]	@ (80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801427e:	0c1b      	lsrs	r3, r3, #16
 8014280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014284:	ee07 3a90 	vmov	s15, r3
 8014288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801428c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014290:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014294:	edd7 6a07 	vldr	s13, [r7, #28]
 8014298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801429c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80142a0:	ee17 2a90 	vmov	r2, s15
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80142a8:	4b13      	ldr	r3, [pc, #76]	@ (80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80142aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80142ac:	0e1b      	lsrs	r3, r3, #24
 80142ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80142b2:	ee07 3a90 	vmov	s15, r3
 80142b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80142ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80142be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80142c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80142c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80142ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80142ce:	ee17 2a90 	vmov	r2, s15
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80142d6:	e008      	b.n	80142ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2200      	movs	r2, #0
 80142dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	2200      	movs	r2, #0
 80142e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	2200      	movs	r2, #0
 80142e8:	609a      	str	r2, [r3, #8]
}
 80142ea:	bf00      	nop
 80142ec:	3724      	adds	r7, #36	@ 0x24
 80142ee:	46bd      	mov	sp, r7
 80142f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f4:	4770      	bx	lr
 80142f6:	bf00      	nop
 80142f8:	58024400 	.word	0x58024400
 80142fc:	03d09000 	.word	0x03d09000
 8014300:	46000000 	.word	0x46000000
 8014304:	4c742400 	.word	0x4c742400
 8014308:	4a742400 	.word	0x4a742400
 801430c:	4bb71b00 	.word	0x4bb71b00

08014310 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8014310:	b480      	push	{r7}
 8014312:	b089      	sub	sp, #36	@ 0x24
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014318:	4ba0      	ldr	r3, [pc, #640]	@ (801459c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801431a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801431c:	f003 0303 	and.w	r3, r3, #3
 8014320:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8014322:	4b9e      	ldr	r3, [pc, #632]	@ (801459c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014326:	091b      	lsrs	r3, r3, #4
 8014328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801432c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801432e:	4b9b      	ldr	r3, [pc, #620]	@ (801459c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014332:	f003 0301 	and.w	r3, r3, #1
 8014336:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8014338:	4b98      	ldr	r3, [pc, #608]	@ (801459c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801433a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801433c:	08db      	lsrs	r3, r3, #3
 801433e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014342:	693a      	ldr	r2, [r7, #16]
 8014344:	fb02 f303 	mul.w	r3, r2, r3
 8014348:	ee07 3a90 	vmov	s15, r3
 801434c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014350:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8014354:	697b      	ldr	r3, [r7, #20]
 8014356:	2b00      	cmp	r3, #0
 8014358:	f000 8111 	beq.w	801457e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801435c:	69bb      	ldr	r3, [r7, #24]
 801435e:	2b02      	cmp	r3, #2
 8014360:	f000 8083 	beq.w	801446a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8014364:	69bb      	ldr	r3, [r7, #24]
 8014366:	2b02      	cmp	r3, #2
 8014368:	f200 80a1 	bhi.w	80144ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801436c:	69bb      	ldr	r3, [r7, #24]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d003      	beq.n	801437a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8014372:	69bb      	ldr	r3, [r7, #24]
 8014374:	2b01      	cmp	r3, #1
 8014376:	d056      	beq.n	8014426 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8014378:	e099      	b.n	80144ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801437a:	4b88      	ldr	r3, [pc, #544]	@ (801459c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	f003 0320 	and.w	r3, r3, #32
 8014382:	2b00      	cmp	r3, #0
 8014384:	d02d      	beq.n	80143e2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8014386:	4b85      	ldr	r3, [pc, #532]	@ (801459c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	08db      	lsrs	r3, r3, #3
 801438c:	f003 0303 	and.w	r3, r3, #3
 8014390:	4a83      	ldr	r2, [pc, #524]	@ (80145a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8014392:	fa22 f303 	lsr.w	r3, r2, r3
 8014396:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	ee07 3a90 	vmov	s15, r3
 801439e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80143a2:	697b      	ldr	r3, [r7, #20]
 80143a4:	ee07 3a90 	vmov	s15, r3
 80143a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80143ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80143b0:	4b7a      	ldr	r3, [pc, #488]	@ (801459c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80143b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143b8:	ee07 3a90 	vmov	s15, r3
 80143bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80143c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80143c4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80145a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80143c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80143cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80143d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80143d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80143d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143dc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80143e0:	e087      	b.n	80144f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80143e2:	697b      	ldr	r3, [r7, #20]
 80143e4:	ee07 3a90 	vmov	s15, r3
 80143e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80143ec:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80145a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80143f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80143f4:	4b69      	ldr	r3, [pc, #420]	@ (801459c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80143f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143fc:	ee07 3a90 	vmov	s15, r3
 8014400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014404:	ed97 6a03 	vldr	s12, [r7, #12]
 8014408:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80145a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801440c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014410:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014414:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014418:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801441c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014420:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014424:	e065      	b.n	80144f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014426:	697b      	ldr	r3, [r7, #20]
 8014428:	ee07 3a90 	vmov	s15, r3
 801442c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014430:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80145ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8014434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014438:	4b58      	ldr	r3, [pc, #352]	@ (801459c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801443a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801443c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014440:	ee07 3a90 	vmov	s15, r3
 8014444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014448:	ed97 6a03 	vldr	s12, [r7, #12]
 801444c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80145a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014450:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014454:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014458:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801445c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014464:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014468:	e043      	b.n	80144f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801446a:	697b      	ldr	r3, [r7, #20]
 801446c:	ee07 3a90 	vmov	s15, r3
 8014470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014474:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80145b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8014478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801447c:	4b47      	ldr	r3, [pc, #284]	@ (801459c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801447e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014484:	ee07 3a90 	vmov	s15, r3
 8014488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801448c:	ed97 6a03 	vldr	s12, [r7, #12]
 8014490:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80145a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014494:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014498:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801449c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80144a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80144a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80144a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80144ac:	e021      	b.n	80144f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80144ae:	697b      	ldr	r3, [r7, #20]
 80144b0:	ee07 3a90 	vmov	s15, r3
 80144b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80144b8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80145a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80144bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80144c0:	4b36      	ldr	r3, [pc, #216]	@ (801459c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80144c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80144c8:	ee07 3a90 	vmov	s15, r3
 80144cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80144d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80144d4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80145a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80144d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80144dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80144e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80144e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80144e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80144ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80144f0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80144f2:	4b2a      	ldr	r3, [pc, #168]	@ (801459c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80144f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144f6:	0a5b      	lsrs	r3, r3, #9
 80144f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80144fc:	ee07 3a90 	vmov	s15, r3
 8014500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014504:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014508:	ee37 7a87 	vadd.f32	s14, s15, s14
 801450c:	edd7 6a07 	vldr	s13, [r7, #28]
 8014510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014518:	ee17 2a90 	vmov	r2, s15
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8014520:	4b1e      	ldr	r3, [pc, #120]	@ (801459c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014524:	0c1b      	lsrs	r3, r3, #16
 8014526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801452a:	ee07 3a90 	vmov	s15, r3
 801452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014532:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014536:	ee37 7a87 	vadd.f32	s14, s15, s14
 801453a:	edd7 6a07 	vldr	s13, [r7, #28]
 801453e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014546:	ee17 2a90 	vmov	r2, s15
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801454e:	4b13      	ldr	r3, [pc, #76]	@ (801459c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014552:	0e1b      	lsrs	r3, r3, #24
 8014554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014558:	ee07 3a90 	vmov	s15, r3
 801455c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014560:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014564:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014568:	edd7 6a07 	vldr	s13, [r7, #28]
 801456c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014574:	ee17 2a90 	vmov	r2, s15
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801457c:	e008      	b.n	8014590 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	2200      	movs	r2, #0
 8014582:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	2200      	movs	r2, #0
 8014588:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	2200      	movs	r2, #0
 801458e:	609a      	str	r2, [r3, #8]
}
 8014590:	bf00      	nop
 8014592:	3724      	adds	r7, #36	@ 0x24
 8014594:	46bd      	mov	sp, r7
 8014596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459a:	4770      	bx	lr
 801459c:	58024400 	.word	0x58024400
 80145a0:	03d09000 	.word	0x03d09000
 80145a4:	46000000 	.word	0x46000000
 80145a8:	4c742400 	.word	0x4c742400
 80145ac:	4a742400 	.word	0x4a742400
 80145b0:	4bb71b00 	.word	0x4bb71b00

080145b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b084      	sub	sp, #16
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
 80145bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80145be:	2300      	movs	r3, #0
 80145c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80145c2:	4b53      	ldr	r3, [pc, #332]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 80145c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145c6:	f003 0303 	and.w	r3, r3, #3
 80145ca:	2b03      	cmp	r3, #3
 80145cc:	d101      	bne.n	80145d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80145ce:	2301      	movs	r3, #1
 80145d0:	e099      	b.n	8014706 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80145d2:	4b4f      	ldr	r3, [pc, #316]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	4a4e      	ldr	r2, [pc, #312]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 80145d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80145dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80145de:	f7f4 ffcd 	bl	800957c <HAL_GetTick>
 80145e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80145e4:	e008      	b.n	80145f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80145e6:	f7f4 ffc9 	bl	800957c <HAL_GetTick>
 80145ea:	4602      	mov	r2, r0
 80145ec:	68bb      	ldr	r3, [r7, #8]
 80145ee:	1ad3      	subs	r3, r2, r3
 80145f0:	2b02      	cmp	r3, #2
 80145f2:	d901      	bls.n	80145f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80145f4:	2303      	movs	r3, #3
 80145f6:	e086      	b.n	8014706 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80145f8:	4b45      	ldr	r3, [pc, #276]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014600:	2b00      	cmp	r3, #0
 8014602:	d1f0      	bne.n	80145e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8014604:	4b42      	ldr	r3, [pc, #264]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 8014606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014608:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	031b      	lsls	r3, r3, #12
 8014612:	493f      	ldr	r1, [pc, #252]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 8014614:	4313      	orrs	r3, r2
 8014616:	628b      	str	r3, [r1, #40]	@ 0x28
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	685b      	ldr	r3, [r3, #4]
 801461c:	3b01      	subs	r3, #1
 801461e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	689b      	ldr	r3, [r3, #8]
 8014626:	3b01      	subs	r3, #1
 8014628:	025b      	lsls	r3, r3, #9
 801462a:	b29b      	uxth	r3, r3
 801462c:	431a      	orrs	r2, r3
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	68db      	ldr	r3, [r3, #12]
 8014632:	3b01      	subs	r3, #1
 8014634:	041b      	lsls	r3, r3, #16
 8014636:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801463a:	431a      	orrs	r2, r3
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	691b      	ldr	r3, [r3, #16]
 8014640:	3b01      	subs	r3, #1
 8014642:	061b      	lsls	r3, r3, #24
 8014644:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014648:	4931      	ldr	r1, [pc, #196]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 801464a:	4313      	orrs	r3, r2
 801464c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801464e:	4b30      	ldr	r3, [pc, #192]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 8014650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014652:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	695b      	ldr	r3, [r3, #20]
 801465a:	492d      	ldr	r1, [pc, #180]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 801465c:	4313      	orrs	r3, r2
 801465e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8014660:	4b2b      	ldr	r3, [pc, #172]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 8014662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014664:	f023 0220 	bic.w	r2, r3, #32
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	699b      	ldr	r3, [r3, #24]
 801466c:	4928      	ldr	r1, [pc, #160]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 801466e:	4313      	orrs	r3, r2
 8014670:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8014672:	4b27      	ldr	r3, [pc, #156]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 8014674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014676:	4a26      	ldr	r2, [pc, #152]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 8014678:	f023 0310 	bic.w	r3, r3, #16
 801467c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801467e:	4b24      	ldr	r3, [pc, #144]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 8014680:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014682:	4b24      	ldr	r3, [pc, #144]	@ (8014714 <RCCEx_PLL2_Config+0x160>)
 8014684:	4013      	ands	r3, r2
 8014686:	687a      	ldr	r2, [r7, #4]
 8014688:	69d2      	ldr	r2, [r2, #28]
 801468a:	00d2      	lsls	r2, r2, #3
 801468c:	4920      	ldr	r1, [pc, #128]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 801468e:	4313      	orrs	r3, r2
 8014690:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8014692:	4b1f      	ldr	r3, [pc, #124]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 8014694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014696:	4a1e      	ldr	r2, [pc, #120]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 8014698:	f043 0310 	orr.w	r3, r3, #16
 801469c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d106      	bne.n	80146b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80146a4:	4b1a      	ldr	r3, [pc, #104]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 80146a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146a8:	4a19      	ldr	r2, [pc, #100]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 80146aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80146ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80146b0:	e00f      	b.n	80146d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	2b01      	cmp	r3, #1
 80146b6:	d106      	bne.n	80146c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80146b8:	4b15      	ldr	r3, [pc, #84]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 80146ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146bc:	4a14      	ldr	r2, [pc, #80]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 80146be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80146c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80146c4:	e005      	b.n	80146d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80146c6:	4b12      	ldr	r3, [pc, #72]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 80146c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146ca:	4a11      	ldr	r2, [pc, #68]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 80146cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80146d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80146d2:	4b0f      	ldr	r3, [pc, #60]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	4a0e      	ldr	r2, [pc, #56]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 80146d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80146dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80146de:	f7f4 ff4d 	bl	800957c <HAL_GetTick>
 80146e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80146e4:	e008      	b.n	80146f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80146e6:	f7f4 ff49 	bl	800957c <HAL_GetTick>
 80146ea:	4602      	mov	r2, r0
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	1ad3      	subs	r3, r2, r3
 80146f0:	2b02      	cmp	r3, #2
 80146f2:	d901      	bls.n	80146f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80146f4:	2303      	movs	r3, #3
 80146f6:	e006      	b.n	8014706 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80146f8:	4b05      	ldr	r3, [pc, #20]	@ (8014710 <RCCEx_PLL2_Config+0x15c>)
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014700:	2b00      	cmp	r3, #0
 8014702:	d0f0      	beq.n	80146e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8014704:	7bfb      	ldrb	r3, [r7, #15]
}
 8014706:	4618      	mov	r0, r3
 8014708:	3710      	adds	r7, #16
 801470a:	46bd      	mov	sp, r7
 801470c:	bd80      	pop	{r7, pc}
 801470e:	bf00      	nop
 8014710:	58024400 	.word	0x58024400
 8014714:	ffff0007 	.word	0xffff0007

08014718 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b084      	sub	sp, #16
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
 8014720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014722:	2300      	movs	r3, #0
 8014724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8014726:	4b53      	ldr	r3, [pc, #332]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 8014728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801472a:	f003 0303 	and.w	r3, r3, #3
 801472e:	2b03      	cmp	r3, #3
 8014730:	d101      	bne.n	8014736 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8014732:	2301      	movs	r3, #1
 8014734:	e099      	b.n	801486a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8014736:	4b4f      	ldr	r3, [pc, #316]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	4a4e      	ldr	r2, [pc, #312]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 801473c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014742:	f7f4 ff1b 	bl	800957c <HAL_GetTick>
 8014746:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014748:	e008      	b.n	801475c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801474a:	f7f4 ff17 	bl	800957c <HAL_GetTick>
 801474e:	4602      	mov	r2, r0
 8014750:	68bb      	ldr	r3, [r7, #8]
 8014752:	1ad3      	subs	r3, r2, r3
 8014754:	2b02      	cmp	r3, #2
 8014756:	d901      	bls.n	801475c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014758:	2303      	movs	r3, #3
 801475a:	e086      	b.n	801486a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801475c:	4b45      	ldr	r3, [pc, #276]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014764:	2b00      	cmp	r3, #0
 8014766:	d1f0      	bne.n	801474a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8014768:	4b42      	ldr	r3, [pc, #264]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 801476a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801476c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	051b      	lsls	r3, r3, #20
 8014776:	493f      	ldr	r1, [pc, #252]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 8014778:	4313      	orrs	r3, r2
 801477a:	628b      	str	r3, [r1, #40]	@ 0x28
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	685b      	ldr	r3, [r3, #4]
 8014780:	3b01      	subs	r3, #1
 8014782:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	689b      	ldr	r3, [r3, #8]
 801478a:	3b01      	subs	r3, #1
 801478c:	025b      	lsls	r3, r3, #9
 801478e:	b29b      	uxth	r3, r3
 8014790:	431a      	orrs	r2, r3
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	68db      	ldr	r3, [r3, #12]
 8014796:	3b01      	subs	r3, #1
 8014798:	041b      	lsls	r3, r3, #16
 801479a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801479e:	431a      	orrs	r2, r3
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	691b      	ldr	r3, [r3, #16]
 80147a4:	3b01      	subs	r3, #1
 80147a6:	061b      	lsls	r3, r3, #24
 80147a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80147ac:	4931      	ldr	r1, [pc, #196]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 80147ae:	4313      	orrs	r3, r2
 80147b0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80147b2:	4b30      	ldr	r3, [pc, #192]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 80147b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	695b      	ldr	r3, [r3, #20]
 80147be:	492d      	ldr	r1, [pc, #180]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 80147c0:	4313      	orrs	r3, r2
 80147c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80147c4:	4b2b      	ldr	r3, [pc, #172]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 80147c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147c8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	699b      	ldr	r3, [r3, #24]
 80147d0:	4928      	ldr	r1, [pc, #160]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 80147d2:	4313      	orrs	r3, r2
 80147d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80147d6:	4b27      	ldr	r3, [pc, #156]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 80147d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147da:	4a26      	ldr	r2, [pc, #152]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 80147dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80147e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80147e2:	4b24      	ldr	r3, [pc, #144]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 80147e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80147e6:	4b24      	ldr	r3, [pc, #144]	@ (8014878 <RCCEx_PLL3_Config+0x160>)
 80147e8:	4013      	ands	r3, r2
 80147ea:	687a      	ldr	r2, [r7, #4]
 80147ec:	69d2      	ldr	r2, [r2, #28]
 80147ee:	00d2      	lsls	r2, r2, #3
 80147f0:	4920      	ldr	r1, [pc, #128]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 80147f2:	4313      	orrs	r3, r2
 80147f4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80147f6:	4b1f      	ldr	r3, [pc, #124]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 80147f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147fa:	4a1e      	ldr	r2, [pc, #120]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 80147fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014800:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d106      	bne.n	8014816 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8014808:	4b1a      	ldr	r3, [pc, #104]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 801480a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801480c:	4a19      	ldr	r2, [pc, #100]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 801480e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8014812:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014814:	e00f      	b.n	8014836 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	2b01      	cmp	r3, #1
 801481a:	d106      	bne.n	801482a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801481c:	4b15      	ldr	r3, [pc, #84]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 801481e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014820:	4a14      	ldr	r2, [pc, #80]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 8014822:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014826:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014828:	e005      	b.n	8014836 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801482a:	4b12      	ldr	r3, [pc, #72]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 801482c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801482e:	4a11      	ldr	r2, [pc, #68]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 8014830:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014834:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8014836:	4b0f      	ldr	r3, [pc, #60]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	4a0e      	ldr	r2, [pc, #56]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 801483c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014842:	f7f4 fe9b 	bl	800957c <HAL_GetTick>
 8014846:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014848:	e008      	b.n	801485c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801484a:	f7f4 fe97 	bl	800957c <HAL_GetTick>
 801484e:	4602      	mov	r2, r0
 8014850:	68bb      	ldr	r3, [r7, #8]
 8014852:	1ad3      	subs	r3, r2, r3
 8014854:	2b02      	cmp	r3, #2
 8014856:	d901      	bls.n	801485c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014858:	2303      	movs	r3, #3
 801485a:	e006      	b.n	801486a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801485c:	4b05      	ldr	r3, [pc, #20]	@ (8014874 <RCCEx_PLL3_Config+0x15c>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014864:	2b00      	cmp	r3, #0
 8014866:	d0f0      	beq.n	801484a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8014868:	7bfb      	ldrb	r3, [r7, #15]
}
 801486a:	4618      	mov	r0, r3
 801486c:	3710      	adds	r7, #16
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}
 8014872:	bf00      	nop
 8014874:	58024400 	.word	0x58024400
 8014878:	ffff0007 	.word	0xffff0007

0801487c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b084      	sub	sp, #16
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d101      	bne.n	801488e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801488a:	2301      	movs	r3, #1
 801488c:	e10f      	b.n	8014aae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	2200      	movs	r2, #0
 8014892:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	4a87      	ldr	r2, [pc, #540]	@ (8014ab8 <HAL_SPI_Init+0x23c>)
 801489a:	4293      	cmp	r3, r2
 801489c:	d00f      	beq.n	80148be <HAL_SPI_Init+0x42>
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	4a86      	ldr	r2, [pc, #536]	@ (8014abc <HAL_SPI_Init+0x240>)
 80148a4:	4293      	cmp	r3, r2
 80148a6:	d00a      	beq.n	80148be <HAL_SPI_Init+0x42>
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	4a84      	ldr	r2, [pc, #528]	@ (8014ac0 <HAL_SPI_Init+0x244>)
 80148ae:	4293      	cmp	r3, r2
 80148b0:	d005      	beq.n	80148be <HAL_SPI_Init+0x42>
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	68db      	ldr	r3, [r3, #12]
 80148b6:	2b0f      	cmp	r3, #15
 80148b8:	d901      	bls.n	80148be <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80148ba:	2301      	movs	r3, #1
 80148bc:	e0f7      	b.n	8014aae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f001 fd22 	bl	8016308 <SPI_GetPacketSize>
 80148c4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	4a7b      	ldr	r2, [pc, #492]	@ (8014ab8 <HAL_SPI_Init+0x23c>)
 80148cc:	4293      	cmp	r3, r2
 80148ce:	d00c      	beq.n	80148ea <HAL_SPI_Init+0x6e>
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	4a79      	ldr	r2, [pc, #484]	@ (8014abc <HAL_SPI_Init+0x240>)
 80148d6:	4293      	cmp	r3, r2
 80148d8:	d007      	beq.n	80148ea <HAL_SPI_Init+0x6e>
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	4a78      	ldr	r2, [pc, #480]	@ (8014ac0 <HAL_SPI_Init+0x244>)
 80148e0:	4293      	cmp	r3, r2
 80148e2:	d002      	beq.n	80148ea <HAL_SPI_Init+0x6e>
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	2b08      	cmp	r3, #8
 80148e8:	d811      	bhi.n	801490e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80148ee:	4a72      	ldr	r2, [pc, #456]	@ (8014ab8 <HAL_SPI_Init+0x23c>)
 80148f0:	4293      	cmp	r3, r2
 80148f2:	d009      	beq.n	8014908 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	4a70      	ldr	r2, [pc, #448]	@ (8014abc <HAL_SPI_Init+0x240>)
 80148fa:	4293      	cmp	r3, r2
 80148fc:	d004      	beq.n	8014908 <HAL_SPI_Init+0x8c>
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	4a6f      	ldr	r2, [pc, #444]	@ (8014ac0 <HAL_SPI_Init+0x244>)
 8014904:	4293      	cmp	r3, r2
 8014906:	d104      	bne.n	8014912 <HAL_SPI_Init+0x96>
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	2b10      	cmp	r3, #16
 801490c:	d901      	bls.n	8014912 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801490e:	2301      	movs	r3, #1
 8014910:	e0cd      	b.n	8014aae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014918:	b2db      	uxtb	r3, r3
 801491a:	2b00      	cmp	r3, #0
 801491c:	d106      	bne.n	801492c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	2200      	movs	r2, #0
 8014922:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8014926:	6878      	ldr	r0, [r7, #4]
 8014928:	f7f3 fb7c 	bl	8008024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	2202      	movs	r2, #2
 8014930:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	681a      	ldr	r2, [r3, #0]
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	f022 0201 	bic.w	r2, r2, #1
 8014942:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	689b      	ldr	r3, [r3, #8]
 801494a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801494e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	699b      	ldr	r3, [r3, #24]
 8014954:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014958:	d119      	bne.n	801498e <HAL_SPI_Init+0x112>
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	685b      	ldr	r3, [r3, #4]
 801495e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014962:	d103      	bne.n	801496c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014968:	2b00      	cmp	r3, #0
 801496a:	d008      	beq.n	801497e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014970:	2b00      	cmp	r3, #0
 8014972:	d10c      	bne.n	801498e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014978:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801497c:	d107      	bne.n	801498e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	681a      	ldr	r2, [r3, #0]
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801498c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	685b      	ldr	r3, [r3, #4]
 8014992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014996:	2b00      	cmp	r3, #0
 8014998:	d00f      	beq.n	80149ba <HAL_SPI_Init+0x13e>
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	68db      	ldr	r3, [r3, #12]
 801499e:	2b06      	cmp	r3, #6
 80149a0:	d90b      	bls.n	80149ba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	430a      	orrs	r2, r1
 80149b6:	601a      	str	r2, [r3, #0]
 80149b8:	e007      	b.n	80149ca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	681a      	ldr	r2, [r3, #0]
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80149c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	69da      	ldr	r2, [r3, #28]
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80149d2:	431a      	orrs	r2, r3
 80149d4:	68bb      	ldr	r3, [r7, #8]
 80149d6:	431a      	orrs	r2, r3
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80149dc:	ea42 0103 	orr.w	r1, r2, r3
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	68da      	ldr	r2, [r3, #12]
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	430a      	orrs	r2, r1
 80149ea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149f4:	431a      	orrs	r2, r3
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80149fa:	431a      	orrs	r2, r3
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	699b      	ldr	r3, [r3, #24]
 8014a00:	431a      	orrs	r2, r3
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	691b      	ldr	r3, [r3, #16]
 8014a06:	431a      	orrs	r2, r3
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	695b      	ldr	r3, [r3, #20]
 8014a0c:	431a      	orrs	r2, r3
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	6a1b      	ldr	r3, [r3, #32]
 8014a12:	431a      	orrs	r2, r3
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	685b      	ldr	r3, [r3, #4]
 8014a18:	431a      	orrs	r2, r3
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014a1e:	431a      	orrs	r2, r3
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	689b      	ldr	r3, [r3, #8]
 8014a24:	431a      	orrs	r2, r3
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014a2a:	ea42 0103 	orr.w	r1, r2, r3
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	430a      	orrs	r2, r1
 8014a38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	685b      	ldr	r3, [r3, #4]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d113      	bne.n	8014a6a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	689b      	ldr	r3, [r3, #8]
 8014a48:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014a54:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	689b      	ldr	r3, [r3, #8]
 8014a5c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8014a68:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	f022 0201 	bic.w	r2, r2, #1
 8014a78:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	685b      	ldr	r3, [r3, #4]
 8014a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d00a      	beq.n	8014a9c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	68db      	ldr	r3, [r3, #12]
 8014a8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	430a      	orrs	r2, r1
 8014a9a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	2201      	movs	r2, #1
 8014aa8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8014aac:	2300      	movs	r3, #0
}
 8014aae:	4618      	mov	r0, r3
 8014ab0:	3710      	adds	r7, #16
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}
 8014ab6:	bf00      	nop
 8014ab8:	40013000 	.word	0x40013000
 8014abc:	40003800 	.word	0x40003800
 8014ac0:	40003c00 	.word	0x40003c00

08014ac4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b088      	sub	sp, #32
 8014ac8:	af02      	add	r7, sp, #8
 8014aca:	60f8      	str	r0, [r7, #12]
 8014acc:	60b9      	str	r1, [r7, #8]
 8014ace:	603b      	str	r3, [r7, #0]
 8014ad0:	4613      	mov	r3, r2
 8014ad2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	3320      	adds	r3, #32
 8014ada:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014adc:	f7f4 fd4e 	bl	800957c <HAL_GetTick>
 8014ae0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014ae8:	b2db      	uxtb	r3, r3
 8014aea:	2b01      	cmp	r3, #1
 8014aec:	d001      	beq.n	8014af2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8014aee:	2302      	movs	r3, #2
 8014af0:	e1d1      	b.n	8014e96 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d002      	beq.n	8014afe <HAL_SPI_Transmit+0x3a>
 8014af8:	88fb      	ldrh	r3, [r7, #6]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d101      	bne.n	8014b02 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8014afe:	2301      	movs	r3, #1
 8014b00:	e1c9      	b.n	8014e96 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014b08:	2b01      	cmp	r3, #1
 8014b0a:	d101      	bne.n	8014b10 <HAL_SPI_Transmit+0x4c>
 8014b0c:	2302      	movs	r3, #2
 8014b0e:	e1c2      	b.n	8014e96 <HAL_SPI_Transmit+0x3d2>
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	2201      	movs	r2, #1
 8014b14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	2203      	movs	r2, #3
 8014b1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	2200      	movs	r2, #0
 8014b24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	68ba      	ldr	r2, [r7, #8]
 8014b2c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	88fa      	ldrh	r2, [r7, #6]
 8014b32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	88fa      	ldrh	r2, [r7, #6]
 8014b3a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	2200      	movs	r2, #0
 8014b42:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	2200      	movs	r2, #0
 8014b48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	2200      	movs	r2, #0
 8014b50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	2200      	movs	r2, #0
 8014b58:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	689b      	ldr	r3, [r3, #8]
 8014b64:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014b68:	d108      	bne.n	8014b7c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	681a      	ldr	r2, [r3, #0]
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014b78:	601a      	str	r2, [r3, #0]
 8014b7a:	e009      	b.n	8014b90 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	68db      	ldr	r3, [r3, #12]
 8014b82:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014b8e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	685a      	ldr	r2, [r3, #4]
 8014b96:	4b96      	ldr	r3, [pc, #600]	@ (8014df0 <HAL_SPI_Transmit+0x32c>)
 8014b98:	4013      	ands	r3, r2
 8014b9a:	88f9      	ldrh	r1, [r7, #6]
 8014b9c:	68fa      	ldr	r2, [r7, #12]
 8014b9e:	6812      	ldr	r2, [r2, #0]
 8014ba0:	430b      	orrs	r3, r1
 8014ba2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	681a      	ldr	r2, [r3, #0]
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	f042 0201 	orr.w	r2, r2, #1
 8014bb2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	685b      	ldr	r3, [r3, #4]
 8014bb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014bbc:	d107      	bne.n	8014bce <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	681a      	ldr	r2, [r3, #0]
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014bcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	68db      	ldr	r3, [r3, #12]
 8014bd2:	2b0f      	cmp	r3, #15
 8014bd4:	d947      	bls.n	8014c66 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014bd6:	e03f      	b.n	8014c58 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	695b      	ldr	r3, [r3, #20]
 8014bde:	f003 0302 	and.w	r3, r3, #2
 8014be2:	2b02      	cmp	r3, #2
 8014be4:	d114      	bne.n	8014c10 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	6812      	ldr	r2, [r2, #0]
 8014bf0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014bf6:	1d1a      	adds	r2, r3, #4
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c02:	b29b      	uxth	r3, r3
 8014c04:	3b01      	subs	r3, #1
 8014c06:	b29a      	uxth	r2, r3
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014c0e:	e023      	b.n	8014c58 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014c10:	f7f4 fcb4 	bl	800957c <HAL_GetTick>
 8014c14:	4602      	mov	r2, r0
 8014c16:	693b      	ldr	r3, [r7, #16]
 8014c18:	1ad3      	subs	r3, r2, r3
 8014c1a:	683a      	ldr	r2, [r7, #0]
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d803      	bhi.n	8014c28 <HAL_SPI_Transmit+0x164>
 8014c20:	683b      	ldr	r3, [r7, #0]
 8014c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c26:	d102      	bne.n	8014c2e <HAL_SPI_Transmit+0x16a>
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d114      	bne.n	8014c58 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014c2e:	68f8      	ldr	r0, [r7, #12]
 8014c30:	f001 fa9c 	bl	801616c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014c3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	2201      	movs	r2, #1
 8014c48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	2200      	movs	r2, #0
 8014c50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014c54:	2303      	movs	r3, #3
 8014c56:	e11e      	b.n	8014e96 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c5e:	b29b      	uxth	r3, r3
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d1b9      	bne.n	8014bd8 <HAL_SPI_Transmit+0x114>
 8014c64:	e0f1      	b.n	8014e4a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	68db      	ldr	r3, [r3, #12]
 8014c6a:	2b07      	cmp	r3, #7
 8014c6c:	f240 80e6 	bls.w	8014e3c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014c70:	e05d      	b.n	8014d2e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	695b      	ldr	r3, [r3, #20]
 8014c78:	f003 0302 	and.w	r3, r3, #2
 8014c7c:	2b02      	cmp	r3, #2
 8014c7e:	d132      	bne.n	8014ce6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c86:	b29b      	uxth	r3, r3
 8014c88:	2b01      	cmp	r3, #1
 8014c8a:	d918      	bls.n	8014cbe <HAL_SPI_Transmit+0x1fa>
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d014      	beq.n	8014cbe <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	6812      	ldr	r2, [r2, #0]
 8014c9e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014ca4:	1d1a      	adds	r2, r3, #4
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014cb0:	b29b      	uxth	r3, r3
 8014cb2:	3b02      	subs	r3, #2
 8014cb4:	b29a      	uxth	r2, r3
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014cbc:	e037      	b.n	8014d2e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014cc2:	881a      	ldrh	r2, [r3, #0]
 8014cc4:	697b      	ldr	r3, [r7, #20]
 8014cc6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014ccc:	1c9a      	adds	r2, r3, #2
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014cd8:	b29b      	uxth	r3, r3
 8014cda:	3b01      	subs	r3, #1
 8014cdc:	b29a      	uxth	r2, r3
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014ce4:	e023      	b.n	8014d2e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014ce6:	f7f4 fc49 	bl	800957c <HAL_GetTick>
 8014cea:	4602      	mov	r2, r0
 8014cec:	693b      	ldr	r3, [r7, #16]
 8014cee:	1ad3      	subs	r3, r2, r3
 8014cf0:	683a      	ldr	r2, [r7, #0]
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d803      	bhi.n	8014cfe <HAL_SPI_Transmit+0x23a>
 8014cf6:	683b      	ldr	r3, [r7, #0]
 8014cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cfc:	d102      	bne.n	8014d04 <HAL_SPI_Transmit+0x240>
 8014cfe:	683b      	ldr	r3, [r7, #0]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d114      	bne.n	8014d2e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014d04:	68f8      	ldr	r0, [r7, #12]
 8014d06:	f001 fa31 	bl	801616c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014d10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	2201      	movs	r2, #1
 8014d1e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	2200      	movs	r2, #0
 8014d26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014d2a:	2303      	movs	r3, #3
 8014d2c:	e0b3      	b.n	8014e96 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d34:	b29b      	uxth	r3, r3
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d19b      	bne.n	8014c72 <HAL_SPI_Transmit+0x1ae>
 8014d3a:	e086      	b.n	8014e4a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	695b      	ldr	r3, [r3, #20]
 8014d42:	f003 0302 	and.w	r3, r3, #2
 8014d46:	2b02      	cmp	r3, #2
 8014d48:	d154      	bne.n	8014df4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d50:	b29b      	uxth	r3, r3
 8014d52:	2b03      	cmp	r3, #3
 8014d54:	d918      	bls.n	8014d88 <HAL_SPI_Transmit+0x2c4>
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014d5a:	2b40      	cmp	r3, #64	@ 0x40
 8014d5c:	d914      	bls.n	8014d88 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	6812      	ldr	r2, [r2, #0]
 8014d68:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d6e:	1d1a      	adds	r2, r3, #4
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d7a:	b29b      	uxth	r3, r3
 8014d7c:	3b04      	subs	r3, #4
 8014d7e:	b29a      	uxth	r2, r3
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014d86:	e059      	b.n	8014e3c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d8e:	b29b      	uxth	r3, r3
 8014d90:	2b01      	cmp	r3, #1
 8014d92:	d917      	bls.n	8014dc4 <HAL_SPI_Transmit+0x300>
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d013      	beq.n	8014dc4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014da0:	881a      	ldrh	r2, [r3, #0]
 8014da2:	697b      	ldr	r3, [r7, #20]
 8014da4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014daa:	1c9a      	adds	r2, r3, #2
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014db6:	b29b      	uxth	r3, r3
 8014db8:	3b02      	subs	r3, #2
 8014dba:	b29a      	uxth	r2, r3
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014dc2:	e03b      	b.n	8014e3c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	3320      	adds	r3, #32
 8014dce:	7812      	ldrb	r2, [r2, #0]
 8014dd0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014dd6:	1c5a      	adds	r2, r3, #1
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014de2:	b29b      	uxth	r3, r3
 8014de4:	3b01      	subs	r3, #1
 8014de6:	b29a      	uxth	r2, r3
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014dee:	e025      	b.n	8014e3c <HAL_SPI_Transmit+0x378>
 8014df0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014df4:	f7f4 fbc2 	bl	800957c <HAL_GetTick>
 8014df8:	4602      	mov	r2, r0
 8014dfa:	693b      	ldr	r3, [r7, #16]
 8014dfc:	1ad3      	subs	r3, r2, r3
 8014dfe:	683a      	ldr	r2, [r7, #0]
 8014e00:	429a      	cmp	r2, r3
 8014e02:	d803      	bhi.n	8014e0c <HAL_SPI_Transmit+0x348>
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e0a:	d102      	bne.n	8014e12 <HAL_SPI_Transmit+0x34e>
 8014e0c:	683b      	ldr	r3, [r7, #0]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d114      	bne.n	8014e3c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014e12:	68f8      	ldr	r0, [r7, #12]
 8014e14:	f001 f9aa 	bl	801616c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	2201      	movs	r2, #1
 8014e2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	2200      	movs	r2, #0
 8014e34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014e38:	2303      	movs	r3, #3
 8014e3a:	e02c      	b.n	8014e96 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014e42:	b29b      	uxth	r3, r3
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	f47f af79 	bne.w	8014d3c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	9300      	str	r3, [sp, #0]
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	2200      	movs	r2, #0
 8014e52:	2108      	movs	r1, #8
 8014e54:	68f8      	ldr	r0, [r7, #12]
 8014e56:	f001 fa29 	bl	80162ac <SPI_WaitOnFlagUntilTimeout>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d007      	beq.n	8014e70 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e66:	f043 0220 	orr.w	r2, r3, #32
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014e70:	68f8      	ldr	r0, [r7, #12]
 8014e72:	f001 f97b 	bl	801616c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	2201      	movs	r2, #1
 8014e7a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	2200      	movs	r2, #0
 8014e82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d001      	beq.n	8014e94 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8014e90:	2301      	movs	r3, #1
 8014e92:	e000      	b.n	8014e96 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8014e94:	2300      	movs	r3, #0
  }
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3718      	adds	r7, #24
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}
 8014e9e:	bf00      	nop

08014ea0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b088      	sub	sp, #32
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	60f8      	str	r0, [r7, #12]
 8014ea8:	60b9      	str	r1, [r7, #8]
 8014eaa:	603b      	str	r3, [r7, #0]
 8014eac:	4613      	mov	r3, r2
 8014eae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014eb4:	095b      	lsrs	r3, r3, #5
 8014eb6:	b29b      	uxth	r3, r3
 8014eb8:	3301      	adds	r3, #1
 8014eba:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	3330      	adds	r3, #48	@ 0x30
 8014ec2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014ec4:	f7f4 fb5a 	bl	800957c <HAL_GetTick>
 8014ec8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014ed0:	b2db      	uxtb	r3, r3
 8014ed2:	2b01      	cmp	r3, #1
 8014ed4:	d001      	beq.n	8014eda <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8014ed6:	2302      	movs	r3, #2
 8014ed8:	e250      	b.n	801537c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014eda:	68bb      	ldr	r3, [r7, #8]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d002      	beq.n	8014ee6 <HAL_SPI_Receive+0x46>
 8014ee0:	88fb      	ldrh	r3, [r7, #6]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d101      	bne.n	8014eea <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8014ee6:	2301      	movs	r3, #1
 8014ee8:	e248      	b.n	801537c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014ef0:	2b01      	cmp	r3, #1
 8014ef2:	d101      	bne.n	8014ef8 <HAL_SPI_Receive+0x58>
 8014ef4:	2302      	movs	r3, #2
 8014ef6:	e241      	b.n	801537c <HAL_SPI_Receive+0x4dc>
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	2201      	movs	r2, #1
 8014efc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	2204      	movs	r2, #4
 8014f04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	68ba      	ldr	r2, [r7, #8]
 8014f14:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	88fa      	ldrh	r2, [r7, #6]
 8014f1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	88fa      	ldrh	r2, [r7, #6]
 8014f22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	2200      	movs	r2, #0
 8014f30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	2200      	movs	r2, #0
 8014f38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	2200      	movs	r2, #0
 8014f40:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	2200      	movs	r2, #0
 8014f46:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	689b      	ldr	r3, [r3, #8]
 8014f4c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014f50:	d108      	bne.n	8014f64 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	681a      	ldr	r2, [r3, #0]
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014f60:	601a      	str	r2, [r3, #0]
 8014f62:	e009      	b.n	8014f78 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	68db      	ldr	r3, [r3, #12]
 8014f6a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014f76:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	685a      	ldr	r2, [r3, #4]
 8014f7e:	4b95      	ldr	r3, [pc, #596]	@ (80151d4 <HAL_SPI_Receive+0x334>)
 8014f80:	4013      	ands	r3, r2
 8014f82:	88f9      	ldrh	r1, [r7, #6]
 8014f84:	68fa      	ldr	r2, [r7, #12]
 8014f86:	6812      	ldr	r2, [r2, #0]
 8014f88:	430b      	orrs	r3, r1
 8014f8a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	681a      	ldr	r2, [r3, #0]
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	f042 0201 	orr.w	r2, r2, #1
 8014f9a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	685b      	ldr	r3, [r3, #4]
 8014fa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014fa4:	d107      	bne.n	8014fb6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	681a      	ldr	r2, [r3, #0]
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014fb4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	68db      	ldr	r3, [r3, #12]
 8014fba:	2b0f      	cmp	r3, #15
 8014fbc:	d96c      	bls.n	8015098 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014fbe:	e064      	b.n	801508a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	695b      	ldr	r3, [r3, #20]
 8014fc6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	695b      	ldr	r3, [r3, #20]
 8014fce:	f003 0301 	and.w	r3, r3, #1
 8014fd2:	2b01      	cmp	r3, #1
 8014fd4:	d114      	bne.n	8015000 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	681a      	ldr	r2, [r3, #0]
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014fde:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014fe0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014fe6:	1d1a      	adds	r2, r3, #4
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	3b01      	subs	r3, #1
 8014ff6:	b29a      	uxth	r2, r3
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014ffe:	e044      	b.n	801508a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015006:	b29b      	uxth	r3, r3
 8015008:	8bfa      	ldrh	r2, [r7, #30]
 801500a:	429a      	cmp	r2, r3
 801500c:	d919      	bls.n	8015042 <HAL_SPI_Receive+0x1a2>
 801500e:	693b      	ldr	r3, [r7, #16]
 8015010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015014:	2b00      	cmp	r3, #0
 8015016:	d014      	beq.n	8015042 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	681a      	ldr	r2, [r3, #0]
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015020:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015022:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015028:	1d1a      	adds	r2, r3, #4
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015034:	b29b      	uxth	r3, r3
 8015036:	3b01      	subs	r3, #1
 8015038:	b29a      	uxth	r2, r3
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015040:	e023      	b.n	801508a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015042:	f7f4 fa9b 	bl	800957c <HAL_GetTick>
 8015046:	4602      	mov	r2, r0
 8015048:	697b      	ldr	r3, [r7, #20]
 801504a:	1ad3      	subs	r3, r2, r3
 801504c:	683a      	ldr	r2, [r7, #0]
 801504e:	429a      	cmp	r2, r3
 8015050:	d803      	bhi.n	801505a <HAL_SPI_Receive+0x1ba>
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015058:	d102      	bne.n	8015060 <HAL_SPI_Receive+0x1c0>
 801505a:	683b      	ldr	r3, [r7, #0]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d114      	bne.n	801508a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8015060:	68f8      	ldr	r0, [r7, #12]
 8015062:	f001 f883 	bl	801616c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801506c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	2201      	movs	r2, #1
 801507a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	2200      	movs	r2, #0
 8015082:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8015086:	2303      	movs	r3, #3
 8015088:	e178      	b.n	801537c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015090:	b29b      	uxth	r3, r3
 8015092:	2b00      	cmp	r3, #0
 8015094:	d194      	bne.n	8014fc0 <HAL_SPI_Receive+0x120>
 8015096:	e15e      	b.n	8015356 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	68db      	ldr	r3, [r3, #12]
 801509c:	2b07      	cmp	r3, #7
 801509e:	f240 8153 	bls.w	8015348 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80150a2:	e08f      	b.n	80151c4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	695b      	ldr	r3, [r3, #20]
 80150aa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	695b      	ldr	r3, [r3, #20]
 80150b2:	f003 0301 	and.w	r3, r3, #1
 80150b6:	2b01      	cmp	r3, #1
 80150b8:	d114      	bne.n	80150e4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150be:	69ba      	ldr	r2, [r7, #24]
 80150c0:	8812      	ldrh	r2, [r2, #0]
 80150c2:	b292      	uxth	r2, r2
 80150c4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150ca:	1c9a      	adds	r2, r3, #2
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150d6:	b29b      	uxth	r3, r3
 80150d8:	3b01      	subs	r3, #1
 80150da:	b29a      	uxth	r2, r3
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80150e2:	e06f      	b.n	80151c4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150ea:	b29b      	uxth	r3, r3
 80150ec:	8bfa      	ldrh	r2, [r7, #30]
 80150ee:	429a      	cmp	r2, r3
 80150f0:	d924      	bls.n	801513c <HAL_SPI_Receive+0x29c>
 80150f2:	693b      	ldr	r3, [r7, #16]
 80150f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d01f      	beq.n	801513c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015100:	69ba      	ldr	r2, [r7, #24]
 8015102:	8812      	ldrh	r2, [r2, #0]
 8015104:	b292      	uxth	r2, r2
 8015106:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801510c:	1c9a      	adds	r2, r3, #2
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015116:	69ba      	ldr	r2, [r7, #24]
 8015118:	8812      	ldrh	r2, [r2, #0]
 801511a:	b292      	uxth	r2, r2
 801511c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015122:	1c9a      	adds	r2, r3, #2
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801512e:	b29b      	uxth	r3, r3
 8015130:	3b02      	subs	r3, #2
 8015132:	b29a      	uxth	r2, r3
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801513a:	e043      	b.n	80151c4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015142:	b29b      	uxth	r3, r3
 8015144:	2b01      	cmp	r3, #1
 8015146:	d119      	bne.n	801517c <HAL_SPI_Receive+0x2dc>
 8015148:	693b      	ldr	r3, [r7, #16]
 801514a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801514e:	2b00      	cmp	r3, #0
 8015150:	d014      	beq.n	801517c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015156:	69ba      	ldr	r2, [r7, #24]
 8015158:	8812      	ldrh	r2, [r2, #0]
 801515a:	b292      	uxth	r2, r2
 801515c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015162:	1c9a      	adds	r2, r3, #2
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801516e:	b29b      	uxth	r3, r3
 8015170:	3b01      	subs	r3, #1
 8015172:	b29a      	uxth	r2, r3
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801517a:	e023      	b.n	80151c4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801517c:	f7f4 f9fe 	bl	800957c <HAL_GetTick>
 8015180:	4602      	mov	r2, r0
 8015182:	697b      	ldr	r3, [r7, #20]
 8015184:	1ad3      	subs	r3, r2, r3
 8015186:	683a      	ldr	r2, [r7, #0]
 8015188:	429a      	cmp	r2, r3
 801518a:	d803      	bhi.n	8015194 <HAL_SPI_Receive+0x2f4>
 801518c:	683b      	ldr	r3, [r7, #0]
 801518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015192:	d102      	bne.n	801519a <HAL_SPI_Receive+0x2fa>
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d114      	bne.n	80151c4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801519a:	68f8      	ldr	r0, [r7, #12]
 801519c:	f000 ffe6 	bl	801616c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80151a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	2201      	movs	r2, #1
 80151b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	2200      	movs	r2, #0
 80151bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80151c0:	2303      	movs	r3, #3
 80151c2:	e0db      	b.n	801537c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80151ca:	b29b      	uxth	r3, r3
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	f47f af69 	bne.w	80150a4 <HAL_SPI_Receive+0x204>
 80151d2:	e0c0      	b.n	8015356 <HAL_SPI_Receive+0x4b6>
 80151d4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	695b      	ldr	r3, [r3, #20]
 80151de:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	695b      	ldr	r3, [r3, #20]
 80151e6:	f003 0301 	and.w	r3, r3, #1
 80151ea:	2b01      	cmp	r3, #1
 80151ec:	d117      	bne.n	801521e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151fa:	7812      	ldrb	r2, [r2, #0]
 80151fc:	b2d2      	uxtb	r2, r2
 80151fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015204:	1c5a      	adds	r2, r3, #1
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015210:	b29b      	uxth	r3, r3
 8015212:	3b01      	subs	r3, #1
 8015214:	b29a      	uxth	r2, r3
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801521c:	e094      	b.n	8015348 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015224:	b29b      	uxth	r3, r3
 8015226:	8bfa      	ldrh	r2, [r7, #30]
 8015228:	429a      	cmp	r2, r3
 801522a:	d946      	bls.n	80152ba <HAL_SPI_Receive+0x41a>
 801522c:	693b      	ldr	r3, [r7, #16]
 801522e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015232:	2b00      	cmp	r3, #0
 8015234:	d041      	beq.n	80152ba <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015242:	7812      	ldrb	r2, [r2, #0]
 8015244:	b2d2      	uxtb	r2, r2
 8015246:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801524c:	1c5a      	adds	r2, r3, #1
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801525e:	7812      	ldrb	r2, [r2, #0]
 8015260:	b2d2      	uxtb	r2, r2
 8015262:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015268:	1c5a      	adds	r2, r3, #1
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801527a:	7812      	ldrb	r2, [r2, #0]
 801527c:	b2d2      	uxtb	r2, r2
 801527e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015284:	1c5a      	adds	r2, r3, #1
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015296:	7812      	ldrb	r2, [r2, #0]
 8015298:	b2d2      	uxtb	r2, r2
 801529a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152a0:	1c5a      	adds	r2, r3, #1
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152ac:	b29b      	uxth	r3, r3
 80152ae:	3b04      	subs	r3, #4
 80152b0:	b29a      	uxth	r2, r3
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80152b8:	e046      	b.n	8015348 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152c0:	b29b      	uxth	r3, r3
 80152c2:	2b03      	cmp	r3, #3
 80152c4:	d81c      	bhi.n	8015300 <HAL_SPI_Receive+0x460>
 80152c6:	693b      	ldr	r3, [r7, #16]
 80152c8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d017      	beq.n	8015300 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152dc:	7812      	ldrb	r2, [r2, #0]
 80152de:	b2d2      	uxtb	r2, r2
 80152e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152e6:	1c5a      	adds	r2, r3, #1
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152f2:	b29b      	uxth	r3, r3
 80152f4:	3b01      	subs	r3, #1
 80152f6:	b29a      	uxth	r2, r3
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80152fe:	e023      	b.n	8015348 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015300:	f7f4 f93c 	bl	800957c <HAL_GetTick>
 8015304:	4602      	mov	r2, r0
 8015306:	697b      	ldr	r3, [r7, #20]
 8015308:	1ad3      	subs	r3, r2, r3
 801530a:	683a      	ldr	r2, [r7, #0]
 801530c:	429a      	cmp	r2, r3
 801530e:	d803      	bhi.n	8015318 <HAL_SPI_Receive+0x478>
 8015310:	683b      	ldr	r3, [r7, #0]
 8015312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015316:	d102      	bne.n	801531e <HAL_SPI_Receive+0x47e>
 8015318:	683b      	ldr	r3, [r7, #0]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d114      	bne.n	8015348 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801531e:	68f8      	ldr	r0, [r7, #12]
 8015320:	f000 ff24 	bl	801616c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801532a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	2201      	movs	r2, #1
 8015338:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	2200      	movs	r2, #0
 8015340:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8015344:	2303      	movs	r3, #3
 8015346:	e019      	b.n	801537c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801534e:	b29b      	uxth	r3, r3
 8015350:	2b00      	cmp	r3, #0
 8015352:	f47f af41 	bne.w	80151d8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8015356:	68f8      	ldr	r0, [r7, #12]
 8015358:	f000 ff08 	bl	801616c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	2201      	movs	r2, #1
 8015360:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	2200      	movs	r2, #0
 8015368:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015372:	2b00      	cmp	r3, #0
 8015374:	d001      	beq.n	801537a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8015376:	2301      	movs	r3, #1
 8015378:	e000      	b.n	801537c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 801537a:	2300      	movs	r3, #0
  }
}
 801537c:	4618      	mov	r0, r3
 801537e:	3720      	adds	r7, #32
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}

08015384 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b08e      	sub	sp, #56	@ 0x38
 8015388:	af02      	add	r7, sp, #8
 801538a:	60f8      	str	r0, [r7, #12]
 801538c:	60b9      	str	r1, [r7, #8]
 801538e:	607a      	str	r2, [r7, #4]
 8015390:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	3320      	adds	r3, #32
 8015398:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	3330      	adds	r3, #48	@ 0x30
 80153a0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80153a6:	095b      	lsrs	r3, r3, #5
 80153a8:	b29b      	uxth	r3, r3
 80153aa:	3301      	adds	r3, #1
 80153ac:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80153ae:	f7f4 f8e5 	bl	800957c <HAL_GetTick>
 80153b2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80153b4:	887b      	ldrh	r3, [r7, #2]
 80153b6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80153b8:	887b      	ldrh	r3, [r7, #2]
 80153ba:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80153c2:	b2db      	uxtb	r3, r3
 80153c4:	2b01      	cmp	r3, #1
 80153c6:	d001      	beq.n	80153cc <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80153c8:	2302      	movs	r3, #2
 80153ca:	e310      	b.n	80159ee <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80153cc:	68bb      	ldr	r3, [r7, #8]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d005      	beq.n	80153de <HAL_SPI_TransmitReceive+0x5a>
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d002      	beq.n	80153de <HAL_SPI_TransmitReceive+0x5a>
 80153d8:	887b      	ldrh	r3, [r7, #2]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d101      	bne.n	80153e2 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80153de:	2301      	movs	r3, #1
 80153e0:	e305      	b.n	80159ee <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80153e8:	2b01      	cmp	r3, #1
 80153ea:	d101      	bne.n	80153f0 <HAL_SPI_TransmitReceive+0x6c>
 80153ec:	2302      	movs	r3, #2
 80153ee:	e2fe      	b.n	80159ee <HAL_SPI_TransmitReceive+0x66a>
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	2201      	movs	r2, #1
 80153f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	2205      	movs	r2, #5
 80153fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	2200      	movs	r2, #0
 8015404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	687a      	ldr	r2, [r7, #4]
 801540c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	887a      	ldrh	r2, [r7, #2]
 8015412:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	887a      	ldrh	r2, [r7, #2]
 801541a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	68ba      	ldr	r2, [r7, #8]
 8015422:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	887a      	ldrh	r2, [r7, #2]
 8015428:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	887a      	ldrh	r2, [r7, #2]
 8015430:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	2200      	movs	r2, #0
 8015438:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	2200      	movs	r2, #0
 801543e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	68da      	ldr	r2, [r3, #12]
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 801544e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	4a70      	ldr	r2, [pc, #448]	@ (8015618 <HAL_SPI_TransmitReceive+0x294>)
 8015456:	4293      	cmp	r3, r2
 8015458:	d009      	beq.n	801546e <HAL_SPI_TransmitReceive+0xea>
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	4a6f      	ldr	r2, [pc, #444]	@ (801561c <HAL_SPI_TransmitReceive+0x298>)
 8015460:	4293      	cmp	r3, r2
 8015462:	d004      	beq.n	801546e <HAL_SPI_TransmitReceive+0xea>
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	4a6d      	ldr	r2, [pc, #436]	@ (8015620 <HAL_SPI_TransmitReceive+0x29c>)
 801546a:	4293      	cmp	r3, r2
 801546c:	d102      	bne.n	8015474 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 801546e:	2310      	movs	r3, #16
 8015470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015472:	e001      	b.n	8015478 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8015474:	2308      	movs	r3, #8
 8015476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	685a      	ldr	r2, [r3, #4]
 801547e:	4b69      	ldr	r3, [pc, #420]	@ (8015624 <HAL_SPI_TransmitReceive+0x2a0>)
 8015480:	4013      	ands	r3, r2
 8015482:	8879      	ldrh	r1, [r7, #2]
 8015484:	68fa      	ldr	r2, [r7, #12]
 8015486:	6812      	ldr	r2, [r2, #0]
 8015488:	430b      	orrs	r3, r1
 801548a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	681a      	ldr	r2, [r3, #0]
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	f042 0201 	orr.w	r2, r2, #1
 801549a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	685b      	ldr	r3, [r3, #4]
 80154a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80154a4:	d107      	bne.n	80154b6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	681a      	ldr	r2, [r3, #0]
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80154b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	68db      	ldr	r3, [r3, #12]
 80154ba:	2b0f      	cmp	r3, #15
 80154bc:	f240 80a2 	bls.w	8015604 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80154c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154c2:	089b      	lsrs	r3, r3, #2
 80154c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80154c6:	e094      	b.n	80155f2 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	695b      	ldr	r3, [r3, #20]
 80154ce:	f003 0302 	and.w	r3, r3, #2
 80154d2:	2b02      	cmp	r3, #2
 80154d4:	d120      	bne.n	8015518 <HAL_SPI_TransmitReceive+0x194>
 80154d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d01d      	beq.n	8015518 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80154dc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80154de:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80154e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154e2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80154e4:	429a      	cmp	r2, r3
 80154e6:	d217      	bcs.n	8015518 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	6812      	ldr	r2, [r2, #0]
 80154f2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80154f8:	1d1a      	adds	r2, r3, #4
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015504:	b29b      	uxth	r3, r3
 8015506:	3b01      	subs	r3, #1
 8015508:	b29a      	uxth	r2, r3
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015516:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	695b      	ldr	r3, [r3, #20]
 801551e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015520:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015522:	2b00      	cmp	r3, #0
 8015524:	d065      	beq.n	80155f2 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	695b      	ldr	r3, [r3, #20]
 801552c:	f003 0301 	and.w	r3, r3, #1
 8015530:	2b01      	cmp	r3, #1
 8015532:	d118      	bne.n	8015566 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	681a      	ldr	r2, [r3, #0]
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801553c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801553e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015544:	1d1a      	adds	r2, r3, #4
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015550:	b29b      	uxth	r3, r3
 8015552:	3b01      	subs	r3, #1
 8015554:	b29a      	uxth	r2, r3
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015562:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015564:	e045      	b.n	80155f2 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015566:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015568:	8bfb      	ldrh	r3, [r7, #30]
 801556a:	429a      	cmp	r2, r3
 801556c:	d21d      	bcs.n	80155aa <HAL_SPI_TransmitReceive+0x226>
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015574:	2b00      	cmp	r3, #0
 8015576:	d018      	beq.n	80155aa <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	681a      	ldr	r2, [r3, #0]
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015580:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015582:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015588:	1d1a      	adds	r2, r3, #4
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015594:	b29b      	uxth	r3, r3
 8015596:	3b01      	subs	r3, #1
 8015598:	b29a      	uxth	r2, r3
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80155a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80155a8:	e023      	b.n	80155f2 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80155aa:	f7f3 ffe7 	bl	800957c <HAL_GetTick>
 80155ae:	4602      	mov	r2, r0
 80155b0:	69bb      	ldr	r3, [r7, #24]
 80155b2:	1ad3      	subs	r3, r2, r3
 80155b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80155b6:	429a      	cmp	r2, r3
 80155b8:	d803      	bhi.n	80155c2 <HAL_SPI_TransmitReceive+0x23e>
 80155ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155c0:	d102      	bne.n	80155c8 <HAL_SPI_TransmitReceive+0x244>
 80155c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d114      	bne.n	80155f2 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80155c8:	68f8      	ldr	r0, [r7, #12]
 80155ca:	f000 fdcf 	bl	801616c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80155d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	2201      	movs	r2, #1
 80155e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	2200      	movs	r2, #0
 80155ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80155ee:	2303      	movs	r3, #3
 80155f0:	e1fd      	b.n	80159ee <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80155f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	f47f af67 	bne.w	80154c8 <HAL_SPI_TransmitReceive+0x144>
 80155fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	f47f af63 	bne.w	80154c8 <HAL_SPI_TransmitReceive+0x144>
 8015602:	e1ce      	b.n	80159a2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	68db      	ldr	r3, [r3, #12]
 8015608:	2b07      	cmp	r3, #7
 801560a:	f240 81c2 	bls.w	8015992 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 801560e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015610:	085b      	lsrs	r3, r3, #1
 8015612:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015614:	e0c9      	b.n	80157aa <HAL_SPI_TransmitReceive+0x426>
 8015616:	bf00      	nop
 8015618:	40013000 	.word	0x40013000
 801561c:	40003800 	.word	0x40003800
 8015620:	40003c00 	.word	0x40003c00
 8015624:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	695b      	ldr	r3, [r3, #20]
 801562e:	f003 0302 	and.w	r3, r3, #2
 8015632:	2b02      	cmp	r3, #2
 8015634:	d11f      	bne.n	8015676 <HAL_SPI_TransmitReceive+0x2f2>
 8015636:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015638:	2b00      	cmp	r3, #0
 801563a:	d01c      	beq.n	8015676 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 801563c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801563e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015642:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015644:	429a      	cmp	r2, r3
 8015646:	d216      	bcs.n	8015676 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801564c:	881a      	ldrh	r2, [r3, #0]
 801564e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015650:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015656:	1c9a      	adds	r2, r3, #2
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015662:	b29b      	uxth	r3, r3
 8015664:	3b01      	subs	r3, #1
 8015666:	b29a      	uxth	r2, r3
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015674:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	695b      	ldr	r3, [r3, #20]
 801567c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 801567e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015680:	2b00      	cmp	r3, #0
 8015682:	f000 8092 	beq.w	80157aa <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	695b      	ldr	r3, [r3, #20]
 801568c:	f003 0301 	and.w	r3, r3, #1
 8015690:	2b01      	cmp	r3, #1
 8015692:	d118      	bne.n	80156c6 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015698:	6a3a      	ldr	r2, [r7, #32]
 801569a:	8812      	ldrh	r2, [r2, #0]
 801569c:	b292      	uxth	r2, r2
 801569e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156a4:	1c9a      	adds	r2, r3, #2
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80156b0:	b29b      	uxth	r3, r3
 80156b2:	3b01      	subs	r3, #1
 80156b4:	b29a      	uxth	r2, r3
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80156c2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80156c4:	e071      	b.n	80157aa <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80156c6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80156c8:	8bfb      	ldrh	r3, [r7, #30]
 80156ca:	429a      	cmp	r2, r3
 80156cc:	d228      	bcs.n	8015720 <HAL_SPI_TransmitReceive+0x39c>
 80156ce:	697b      	ldr	r3, [r7, #20]
 80156d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d023      	beq.n	8015720 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156dc:	6a3a      	ldr	r2, [r7, #32]
 80156de:	8812      	ldrh	r2, [r2, #0]
 80156e0:	b292      	uxth	r2, r2
 80156e2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156e8:	1c9a      	adds	r2, r3, #2
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156f2:	6a3a      	ldr	r2, [r7, #32]
 80156f4:	8812      	ldrh	r2, [r2, #0]
 80156f6:	b292      	uxth	r2, r2
 80156f8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156fe:	1c9a      	adds	r2, r3, #2
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801570a:	b29b      	uxth	r3, r3
 801570c:	3b02      	subs	r3, #2
 801570e:	b29a      	uxth	r2, r3
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801571c:	853b      	strh	r3, [r7, #40]	@ 0x28
 801571e:	e044      	b.n	80157aa <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8015720:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015722:	2b01      	cmp	r3, #1
 8015724:	d11d      	bne.n	8015762 <HAL_SPI_TransmitReceive+0x3de>
 8015726:	697b      	ldr	r3, [r7, #20]
 8015728:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801572c:	2b00      	cmp	r3, #0
 801572e:	d018      	beq.n	8015762 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015734:	6a3a      	ldr	r2, [r7, #32]
 8015736:	8812      	ldrh	r2, [r2, #0]
 8015738:	b292      	uxth	r2, r2
 801573a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015740:	1c9a      	adds	r2, r3, #2
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801574c:	b29b      	uxth	r3, r3
 801574e:	3b01      	subs	r3, #1
 8015750:	b29a      	uxth	r2, r3
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801575e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015760:	e023      	b.n	80157aa <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015762:	f7f3 ff0b 	bl	800957c <HAL_GetTick>
 8015766:	4602      	mov	r2, r0
 8015768:	69bb      	ldr	r3, [r7, #24]
 801576a:	1ad3      	subs	r3, r2, r3
 801576c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801576e:	429a      	cmp	r2, r3
 8015770:	d803      	bhi.n	801577a <HAL_SPI_TransmitReceive+0x3f6>
 8015772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015778:	d102      	bne.n	8015780 <HAL_SPI_TransmitReceive+0x3fc>
 801577a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801577c:	2b00      	cmp	r3, #0
 801577e:	d114      	bne.n	80157aa <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015780:	68f8      	ldr	r0, [r7, #12]
 8015782:	f000 fcf3 	bl	801616c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801578c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	2201      	movs	r2, #1
 801579a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	2200      	movs	r2, #0
 80157a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80157a6:	2303      	movs	r3, #3
 80157a8:	e121      	b.n	80159ee <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80157aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	f47f af3b 	bne.w	8015628 <HAL_SPI_TransmitReceive+0x2a4>
 80157b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	f47f af37 	bne.w	8015628 <HAL_SPI_TransmitReceive+0x2a4>
 80157ba:	e0f2      	b.n	80159a2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	695b      	ldr	r3, [r3, #20]
 80157c2:	f003 0302 	and.w	r3, r3, #2
 80157c6:	2b02      	cmp	r3, #2
 80157c8:	d121      	bne.n	801580e <HAL_SPI_TransmitReceive+0x48a>
 80157ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d01e      	beq.n	801580e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80157d0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80157d2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80157d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157d6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80157d8:	429a      	cmp	r2, r3
 80157da:	d218      	bcs.n	801580e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	3320      	adds	r3, #32
 80157e6:	7812      	ldrb	r2, [r2, #0]
 80157e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80157ee:	1c5a      	adds	r2, r3, #1
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80157fa:	b29b      	uxth	r3, r3
 80157fc:	3b01      	subs	r3, #1
 80157fe:	b29a      	uxth	r2, r3
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801580c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	695b      	ldr	r3, [r3, #20]
 8015814:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015816:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015818:	2b00      	cmp	r3, #0
 801581a:	f000 80ba 	beq.w	8015992 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	695b      	ldr	r3, [r3, #20]
 8015824:	f003 0301 	and.w	r3, r3, #1
 8015828:	2b01      	cmp	r3, #1
 801582a:	d11b      	bne.n	8015864 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015838:	7812      	ldrb	r2, [r2, #0]
 801583a:	b2d2      	uxtb	r2, r2
 801583c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015842:	1c5a      	adds	r2, r3, #1
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801584e:	b29b      	uxth	r3, r3
 8015850:	3b01      	subs	r3, #1
 8015852:	b29a      	uxth	r2, r3
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015860:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015862:	e096      	b.n	8015992 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015864:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015866:	8bfb      	ldrh	r3, [r7, #30]
 8015868:	429a      	cmp	r2, r3
 801586a:	d24a      	bcs.n	8015902 <HAL_SPI_TransmitReceive+0x57e>
 801586c:	697b      	ldr	r3, [r7, #20]
 801586e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015872:	2b00      	cmp	r3, #0
 8015874:	d045      	beq.n	8015902 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015882:	7812      	ldrb	r2, [r2, #0]
 8015884:	b2d2      	uxtb	r2, r2
 8015886:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801588c:	1c5a      	adds	r2, r3, #1
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801589e:	7812      	ldrb	r2, [r2, #0]
 80158a0:	b2d2      	uxtb	r2, r2
 80158a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158a8:	1c5a      	adds	r2, r3, #1
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158ba:	7812      	ldrb	r2, [r2, #0]
 80158bc:	b2d2      	uxtb	r2, r2
 80158be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158c4:	1c5a      	adds	r2, r3, #1
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158d6:	7812      	ldrb	r2, [r2, #0]
 80158d8:	b2d2      	uxtb	r2, r2
 80158da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158e0:	1c5a      	adds	r2, r3, #1
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80158ec:	b29b      	uxth	r3, r3
 80158ee:	3b04      	subs	r3, #4
 80158f0:	b29a      	uxth	r2, r3
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80158fe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015900:	e047      	b.n	8015992 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8015902:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015904:	2b03      	cmp	r3, #3
 8015906:	d820      	bhi.n	801594a <HAL_SPI_TransmitReceive+0x5c6>
 8015908:	697b      	ldr	r3, [r7, #20]
 801590a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 801590e:	2b00      	cmp	r3, #0
 8015910:	d01b      	beq.n	801594a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801591e:	7812      	ldrb	r2, [r2, #0]
 8015920:	b2d2      	uxtb	r2, r2
 8015922:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015928:	1c5a      	adds	r2, r3, #1
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015934:	b29b      	uxth	r3, r3
 8015936:	3b01      	subs	r3, #1
 8015938:	b29a      	uxth	r2, r3
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015946:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015948:	e023      	b.n	8015992 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801594a:	f7f3 fe17 	bl	800957c <HAL_GetTick>
 801594e:	4602      	mov	r2, r0
 8015950:	69bb      	ldr	r3, [r7, #24]
 8015952:	1ad3      	subs	r3, r2, r3
 8015954:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015956:	429a      	cmp	r2, r3
 8015958:	d803      	bhi.n	8015962 <HAL_SPI_TransmitReceive+0x5de>
 801595a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015960:	d102      	bne.n	8015968 <HAL_SPI_TransmitReceive+0x5e4>
 8015962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015964:	2b00      	cmp	r3, #0
 8015966:	d114      	bne.n	8015992 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015968:	68f8      	ldr	r0, [r7, #12]
 801596a:	f000 fbff 	bl	801616c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015974:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	2201      	movs	r2, #1
 8015982:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	2200      	movs	r2, #0
 801598a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 801598e:	2303      	movs	r3, #3
 8015990:	e02d      	b.n	80159ee <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015992:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015994:	2b00      	cmp	r3, #0
 8015996:	f47f af11 	bne.w	80157bc <HAL_SPI_TransmitReceive+0x438>
 801599a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801599c:	2b00      	cmp	r3, #0
 801599e:	f47f af0d 	bne.w	80157bc <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80159a2:	69bb      	ldr	r3, [r7, #24]
 80159a4:	9300      	str	r3, [sp, #0]
 80159a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159a8:	2200      	movs	r2, #0
 80159aa:	2108      	movs	r1, #8
 80159ac:	68f8      	ldr	r0, [r7, #12]
 80159ae:	f000 fc7d 	bl	80162ac <SPI_WaitOnFlagUntilTimeout>
 80159b2:	4603      	mov	r3, r0
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d007      	beq.n	80159c8 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80159be:	f043 0220 	orr.w	r2, r3, #32
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80159c8:	68f8      	ldr	r0, [r7, #12]
 80159ca:	f000 fbcf 	bl	801616c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	2201      	movs	r2, #1
 80159d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	2200      	movs	r2, #0
 80159da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d001      	beq.n	80159ec <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 80159e8:	2301      	movs	r3, #1
 80159ea:	e000      	b.n	80159ee <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 80159ec:	2300      	movs	r3, #0
  }
}
 80159ee:	4618      	mov	r0, r3
 80159f0:	3730      	adds	r7, #48	@ 0x30
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bd80      	pop	{r7, pc}
 80159f6:	bf00      	nop

080159f8 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b084      	sub	sp, #16
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	60f8      	str	r0, [r7, #12]
 8015a00:	60b9      	str	r1, [r7, #8]
 8015a02:	4613      	mov	r3, r2
 8015a04:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015a0c:	b2db      	uxtb	r3, r3
 8015a0e:	2b01      	cmp	r3, #1
 8015a10:	d001      	beq.n	8015a16 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8015a12:	2302      	movs	r3, #2
 8015a14:	e126      	b.n	8015c64 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8015a16:	68bb      	ldr	r3, [r7, #8]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d002      	beq.n	8015a22 <HAL_SPI_Transmit_DMA+0x2a>
 8015a1c:	88fb      	ldrh	r3, [r7, #6]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d101      	bne.n	8015a26 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8015a22:	2301      	movs	r3, #1
 8015a24:	e11e      	b.n	8015c64 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015a2c:	2b01      	cmp	r3, #1
 8015a2e:	d101      	bne.n	8015a34 <HAL_SPI_Transmit_DMA+0x3c>
 8015a30:	2302      	movs	r3, #2
 8015a32:	e117      	b.n	8015c64 <HAL_SPI_Transmit_DMA+0x26c>
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	2201      	movs	r2, #1
 8015a38:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	2203      	movs	r2, #3
 8015a40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	2200      	movs	r2, #0
 8015a48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	68ba      	ldr	r2, [r7, #8]
 8015a50:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	88fa      	ldrh	r2, [r7, #6]
 8015a56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	88fa      	ldrh	r2, [r7, #6]
 8015a5e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	2200      	movs	r2, #0
 8015a66:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	2200      	movs	r2, #0
 8015a72:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	2200      	movs	r2, #0
 8015a78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	2200      	movs	r2, #0
 8015a80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	689b      	ldr	r3, [r3, #8]
 8015a88:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8015a8c:	d108      	bne.n	8015aa0 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	681a      	ldr	r2, [r3, #0]
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015a9c:	601a      	str	r2, [r3, #0]
 8015a9e:	e009      	b.n	8015ab4 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	68db      	ldr	r3, [r3, #12]
 8015aa6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8015ab2:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	68db      	ldr	r3, [r3, #12]
 8015ab8:	2b0f      	cmp	r3, #15
 8015aba:	d905      	bls.n	8015ac8 <HAL_SPI_Transmit_DMA+0xd0>
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ac0:	699b      	ldr	r3, [r3, #24]
 8015ac2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015ac6:	d10f      	bne.n	8015ae8 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015acc:	2b07      	cmp	r3, #7
 8015ace:	d911      	bls.n	8015af4 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ad4:	699b      	ldr	r3, [r3, #24]
 8015ad6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015ada:	d00b      	beq.n	8015af4 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ae0:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015ae2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015ae6:	d005      	beq.n	8015af4 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	2200      	movs	r2, #0
 8015aec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8015af0:	2301      	movs	r3, #1
 8015af2:	e0b7      	b.n	8015c64 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	68db      	ldr	r3, [r3, #12]
 8015af8:	2b07      	cmp	r3, #7
 8015afa:	d820      	bhi.n	8015b3e <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b00:	699b      	ldr	r3, [r3, #24]
 8015b02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015b06:	d109      	bne.n	8015b1c <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015b0e:	b29b      	uxth	r3, r3
 8015b10:	3301      	adds	r3, #1
 8015b12:	105b      	asrs	r3, r3, #1
 8015b14:	b29a      	uxth	r2, r3
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b20:	699b      	ldr	r3, [r3, #24]
 8015b22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015b26:	d11e      	bne.n	8015b66 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015b2e:	b29b      	uxth	r3, r3
 8015b30:	3303      	adds	r3, #3
 8015b32:	109b      	asrs	r3, r3, #2
 8015b34:	b29a      	uxth	r2, r3
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015b3c:	e013      	b.n	8015b66 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	68db      	ldr	r3, [r3, #12]
 8015b42:	2b0f      	cmp	r3, #15
 8015b44:	d80f      	bhi.n	8015b66 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b4a:	699b      	ldr	r3, [r3, #24]
 8015b4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015b50:	d109      	bne.n	8015b66 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015b58:	b29b      	uxth	r3, r3
 8015b5a:	3301      	adds	r3, #1
 8015b5c:	105b      	asrs	r3, r3, #1
 8015b5e:	b29a      	uxth	r2, r3
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b6a:	4a40      	ldr	r2, [pc, #256]	@ (8015c6c <HAL_SPI_Transmit_DMA+0x274>)
 8015b6c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b72:	4a3f      	ldr	r2, [pc, #252]	@ (8015c70 <HAL_SPI_Transmit_DMA+0x278>)
 8015b74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b7a:	4a3e      	ldr	r2, [pc, #248]	@ (8015c74 <HAL_SPI_Transmit_DMA+0x27c>)
 8015b7c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b82:	2200      	movs	r2, #0
 8015b84:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	689a      	ldr	r2, [r3, #8]
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015b94:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015b9e:	4619      	mov	r1, r3
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	3320      	adds	r3, #32
 8015ba6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015bae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015bb0:	f7f6 f972 	bl	800be98 <HAL_DMA_Start_IT>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d011      	beq.n	8015bde <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015bc0:	f043 0210 	orr.w	r2, r3, #16
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	2201      	movs	r2, #1
 8015bce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	2200      	movs	r2, #0
 8015bd6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8015bda:	2301      	movs	r3, #1
 8015bdc:	e042      	b.n	8015c64 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015be2:	69db      	ldr	r3, [r3, #28]
 8015be4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015be8:	d108      	bne.n	8015bfc <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	6859      	ldr	r1, [r3, #4]
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	681a      	ldr	r2, [r3, #0]
 8015bf4:	4b20      	ldr	r3, [pc, #128]	@ (8015c78 <HAL_SPI_Transmit_DMA+0x280>)
 8015bf6:	400b      	ands	r3, r1
 8015bf8:	6053      	str	r3, [r2, #4]
 8015bfa:	e009      	b.n	8015c10 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	685a      	ldr	r2, [r3, #4]
 8015c02:	4b1d      	ldr	r3, [pc, #116]	@ (8015c78 <HAL_SPI_Transmit_DMA+0x280>)
 8015c04:	4013      	ands	r3, r2
 8015c06:	88f9      	ldrh	r1, [r7, #6]
 8015c08:	68fa      	ldr	r2, [r7, #12]
 8015c0a:	6812      	ldr	r2, [r2, #0]
 8015c0c:	430b      	orrs	r3, r1
 8015c0e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	689a      	ldr	r2, [r3, #8]
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015c1e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	691a      	ldr	r2, [r3, #16]
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8015c2e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	681a      	ldr	r2, [r3, #0]
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	f042 0201 	orr.w	r2, r2, #1
 8015c3e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	685b      	ldr	r3, [r3, #4]
 8015c44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015c48:	d107      	bne.n	8015c5a <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	681a      	ldr	r2, [r3, #0]
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015c58:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8015c62:	2300      	movs	r3, #0
}
 8015c64:	4618      	mov	r0, r3
 8015c66:	3710      	adds	r7, #16
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	bd80      	pop	{r7, pc}
 8015c6c:	080160d7 	.word	0x080160d7
 8015c70:	08016091 	.word	0x08016091
 8015c74:	080160f3 	.word	0x080160f3
 8015c78:	ffff0000 	.word	0xffff0000

08015c7c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b08a      	sub	sp, #40	@ 0x28
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	691b      	ldr	r3, [r3, #16]
 8015c8a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	695b      	ldr	r3, [r3, #20]
 8015c92:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8015c94:	6a3a      	ldr	r2, [r7, #32]
 8015c96:	69fb      	ldr	r3, [r7, #28]
 8015c98:	4013      	ands	r3, r2
 8015c9a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	689b      	ldr	r3, [r3, #8]
 8015ca2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015cae:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	3330      	adds	r3, #48	@ 0x30
 8015cb6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8015cb8:	69fb      	ldr	r3, [r7, #28]
 8015cba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d010      	beq.n	8015ce4 <HAL_SPI_IRQHandler+0x68>
 8015cc2:	6a3b      	ldr	r3, [r7, #32]
 8015cc4:	f003 0308 	and.w	r3, r3, #8
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d00b      	beq.n	8015ce4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	699a      	ldr	r2, [r3, #24]
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015cda:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8015cdc:	6878      	ldr	r0, [r7, #4]
 8015cde:	f000 f9cd 	bl	801607c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8015ce2:	e192      	b.n	801600a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015ce4:	69bb      	ldr	r3, [r7, #24]
 8015ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d113      	bne.n	8015d16 <HAL_SPI_IRQHandler+0x9a>
 8015cee:	69bb      	ldr	r3, [r7, #24]
 8015cf0:	f003 0320 	and.w	r3, r3, #32
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d10e      	bne.n	8015d16 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8015cf8:	69bb      	ldr	r3, [r7, #24]
 8015cfa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d009      	beq.n	8015d16 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d06:	6878      	ldr	r0, [r7, #4]
 8015d08:	4798      	blx	r3
    hspi->RxISR(hspi);
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d0e:	6878      	ldr	r0, [r7, #4]
 8015d10:	4798      	blx	r3
    handled = 1UL;
 8015d12:	2301      	movs	r3, #1
 8015d14:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015d16:	69bb      	ldr	r3, [r7, #24]
 8015d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d10f      	bne.n	8015d40 <HAL_SPI_IRQHandler+0xc4>
 8015d20:	69bb      	ldr	r3, [r7, #24]
 8015d22:	f003 0301 	and.w	r3, r3, #1
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d00a      	beq.n	8015d40 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015d2a:	69bb      	ldr	r3, [r7, #24]
 8015d2c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d105      	bne.n	8015d40 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d38:	6878      	ldr	r0, [r7, #4]
 8015d3a:	4798      	blx	r3
    handled = 1UL;
 8015d3c:	2301      	movs	r3, #1
 8015d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015d40:	69bb      	ldr	r3, [r7, #24]
 8015d42:	f003 0320 	and.w	r3, r3, #32
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d10f      	bne.n	8015d6a <HAL_SPI_IRQHandler+0xee>
 8015d4a:	69bb      	ldr	r3, [r7, #24]
 8015d4c:	f003 0302 	and.w	r3, r3, #2
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d00a      	beq.n	8015d6a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015d54:	69bb      	ldr	r3, [r7, #24]
 8015d56:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d105      	bne.n	8015d6a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d62:	6878      	ldr	r0, [r7, #4]
 8015d64:	4798      	blx	r3
    handled = 1UL;
 8015d66:	2301      	movs	r3, #1
 8015d68:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8015d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	f040 8147 	bne.w	8016000 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8015d72:	69bb      	ldr	r3, [r7, #24]
 8015d74:	f003 0308 	and.w	r3, r3, #8
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	f000 808b 	beq.w	8015e94 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	699a      	ldr	r2, [r3, #24]
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	f042 0208 	orr.w	r2, r2, #8
 8015d8c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	699a      	ldr	r2, [r3, #24]
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	f042 0210 	orr.w	r2, r2, #16
 8015d9c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	699a      	ldr	r2, [r3, #24]
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015dac:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	691a      	ldr	r2, [r3, #16]
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	f022 0208 	bic.w	r2, r2, #8
 8015dbc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	689b      	ldr	r3, [r3, #8]
 8015dc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d13d      	bne.n	8015e48 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8015dcc:	e036      	b.n	8015e3c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	68db      	ldr	r3, [r3, #12]
 8015dd2:	2b0f      	cmp	r3, #15
 8015dd4:	d90b      	bls.n	8015dee <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	681a      	ldr	r2, [r3, #0]
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015dde:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015de0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015de6:	1d1a      	adds	r2, r3, #4
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	665a      	str	r2, [r3, #100]	@ 0x64
 8015dec:	e01d      	b.n	8015e2a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	68db      	ldr	r3, [r3, #12]
 8015df2:	2b07      	cmp	r3, #7
 8015df4:	d90b      	bls.n	8015e0e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015dfa:	68fa      	ldr	r2, [r7, #12]
 8015dfc:	8812      	ldrh	r2, [r2, #0]
 8015dfe:	b292      	uxth	r2, r2
 8015e00:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015e06:	1c9a      	adds	r2, r3, #2
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	665a      	str	r2, [r3, #100]	@ 0x64
 8015e0c:	e00d      	b.n	8015e2a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015e1a:	7812      	ldrb	r2, [r2, #0]
 8015e1c:	b2d2      	uxtb	r2, r2
 8015e1e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015e24:	1c5a      	adds	r2, r3, #1
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015e30:	b29b      	uxth	r3, r3
 8015e32:	3b01      	subs	r3, #1
 8015e34:	b29a      	uxth	r2, r3
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015e42:	b29b      	uxth	r3, r3
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d1c2      	bne.n	8015dce <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8015e48:	6878      	ldr	r0, [r7, #4]
 8015e4a:	f000 f98f 	bl	801616c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	2201      	movs	r2, #1
 8015e52:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d003      	beq.n	8015e68 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8015e60:	6878      	ldr	r0, [r7, #4]
 8015e62:	f000 f901 	bl	8016068 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8015e66:	e0d0      	b.n	801600a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8015e68:	7cfb      	ldrb	r3, [r7, #19]
 8015e6a:	2b05      	cmp	r3, #5
 8015e6c:	d103      	bne.n	8015e76 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8015e6e:	6878      	ldr	r0, [r7, #4]
 8015e70:	f000 f8e6 	bl	8016040 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8015e74:	e0c6      	b.n	8016004 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8015e76:	7cfb      	ldrb	r3, [r7, #19]
 8015e78:	2b04      	cmp	r3, #4
 8015e7a:	d103      	bne.n	8015e84 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8015e7c:	6878      	ldr	r0, [r7, #4]
 8015e7e:	f000 f8d5 	bl	801602c <HAL_SPI_RxCpltCallback>
    return;
 8015e82:	e0bf      	b.n	8016004 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8015e84:	7cfb      	ldrb	r3, [r7, #19]
 8015e86:	2b03      	cmp	r3, #3
 8015e88:	f040 80bc 	bne.w	8016004 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8015e8c:	6878      	ldr	r0, [r7, #4]
 8015e8e:	f000 f8c3 	bl	8016018 <HAL_SPI_TxCpltCallback>
    return;
 8015e92:	e0b7      	b.n	8016004 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8015e94:	69bb      	ldr	r3, [r7, #24]
 8015e96:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	f000 80b5 	beq.w	801600a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8015ea0:	69bb      	ldr	r3, [r7, #24]
 8015ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d00f      	beq.n	8015eca <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015eb0:	f043 0204 	orr.w	r2, r3, #4
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	699a      	ldr	r2, [r3, #24]
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015ec8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8015eca:	69bb      	ldr	r3, [r7, #24]
 8015ecc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d00f      	beq.n	8015ef4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015eda:	f043 0201 	orr.w	r2, r3, #1
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	699a      	ldr	r2, [r3, #24]
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015ef2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8015ef4:	69bb      	ldr	r3, [r7, #24]
 8015ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d00f      	beq.n	8015f1e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f04:	f043 0208 	orr.w	r2, r3, #8
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	699a      	ldr	r2, [r3, #24]
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015f1c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8015f1e:	69bb      	ldr	r3, [r7, #24]
 8015f20:	f003 0320 	and.w	r3, r3, #32
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d00f      	beq.n	8015f48 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f2e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	699a      	ldr	r2, [r3, #24]
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	f042 0220 	orr.w	r2, r2, #32
 8015f46:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d05a      	beq.n	8016008 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	681a      	ldr	r2, [r3, #0]
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	f022 0201 	bic.w	r2, r2, #1
 8015f60:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	6919      	ldr	r1, [r3, #16]
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681a      	ldr	r2, [r3, #0]
 8015f6c:	4b28      	ldr	r3, [pc, #160]	@ (8016010 <HAL_SPI_IRQHandler+0x394>)
 8015f6e:	400b      	ands	r3, r1
 8015f70:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015f72:	697b      	ldr	r3, [r7, #20]
 8015f74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015f78:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8015f7c:	d138      	bne.n	8015ff0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	689a      	ldr	r2, [r3, #8]
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015f8c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d013      	beq.n	8015fbe <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8016014 <HAL_SPI_IRQHandler+0x398>)
 8015f9c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f7f6 fd00 	bl	800c9a8 <HAL_DMA_Abort_IT>
 8015fa8:	4603      	mov	r3, r0
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d007      	beq.n	8015fbe <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015fb4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d020      	beq.n	8016008 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015fca:	4a12      	ldr	r2, [pc, #72]	@ (8016014 <HAL_SPI_IRQHandler+0x398>)
 8015fcc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f7f6 fce8 	bl	800c9a8 <HAL_DMA_Abort_IT>
 8015fd8:	4603      	mov	r3, r0
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d014      	beq.n	8016008 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015fe4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8015fee:	e00b      	b.n	8016008 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	2201      	movs	r2, #1
 8015ff4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8015ff8:	6878      	ldr	r0, [r7, #4]
 8015ffa:	f000 f835 	bl	8016068 <HAL_SPI_ErrorCallback>
    return;
 8015ffe:	e003      	b.n	8016008 <HAL_SPI_IRQHandler+0x38c>
    return;
 8016000:	bf00      	nop
 8016002:	e002      	b.n	801600a <HAL_SPI_IRQHandler+0x38e>
    return;
 8016004:	bf00      	nop
 8016006:	e000      	b.n	801600a <HAL_SPI_IRQHandler+0x38e>
    return;
 8016008:	bf00      	nop
  }
}
 801600a:	3728      	adds	r7, #40	@ 0x28
 801600c:	46bd      	mov	sp, r7
 801600e:	bd80      	pop	{r7, pc}
 8016010:	fffffc94 	.word	0xfffffc94
 8016014:	08016139 	.word	0x08016139

08016018 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016018:	b480      	push	{r7}
 801601a:	b083      	sub	sp, #12
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8016020:	bf00      	nop
 8016022:	370c      	adds	r7, #12
 8016024:	46bd      	mov	sp, r7
 8016026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801602a:	4770      	bx	lr

0801602c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801602c:	b480      	push	{r7}
 801602e:	b083      	sub	sp, #12
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8016034:	bf00      	nop
 8016036:	370c      	adds	r7, #12
 8016038:	46bd      	mov	sp, r7
 801603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603e:	4770      	bx	lr

08016040 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016040:	b480      	push	{r7}
 8016042:	b083      	sub	sp, #12
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8016048:	bf00      	nop
 801604a:	370c      	adds	r7, #12
 801604c:	46bd      	mov	sp, r7
 801604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016052:	4770      	bx	lr

08016054 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016054:	b480      	push	{r7}
 8016056:	b083      	sub	sp, #12
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 801605c:	bf00      	nop
 801605e:	370c      	adds	r7, #12
 8016060:	46bd      	mov	sp, r7
 8016062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016066:	4770      	bx	lr

08016068 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016068:	b480      	push	{r7}
 801606a:	b083      	sub	sp, #12
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8016070:	bf00      	nop
 8016072:	370c      	adds	r7, #12
 8016074:	46bd      	mov	sp, r7
 8016076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607a:	4770      	bx	lr

0801607c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801607c:	b480      	push	{r7}
 801607e:	b083      	sub	sp, #12
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8016084:	bf00      	nop
 8016086:	370c      	adds	r7, #12
 8016088:	46bd      	mov	sp, r7
 801608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608e:	4770      	bx	lr

08016090 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b084      	sub	sp, #16
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801609c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80160a4:	b2db      	uxtb	r3, r3
 80160a6:	2b07      	cmp	r3, #7
 80160a8:	d011      	beq.n	80160ce <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80160ae:	69db      	ldr	r3, [r3, #28]
 80160b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80160b4:	d103      	bne.n	80160be <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80160b6:	68f8      	ldr	r0, [r7, #12]
 80160b8:	f7ff ffae 	bl	8016018 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80160bc:	e007      	b.n	80160ce <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	691a      	ldr	r2, [r3, #16]
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	f042 0208 	orr.w	r2, r2, #8
 80160cc:	611a      	str	r2, [r3, #16]
}
 80160ce:	bf00      	nop
 80160d0:	3710      	adds	r7, #16
 80160d2:	46bd      	mov	sp, r7
 80160d4:	bd80      	pop	{r7, pc}

080160d6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 80160d6:	b580      	push	{r7, lr}
 80160d8:	b084      	sub	sp, #16
 80160da:	af00      	add	r7, sp, #0
 80160dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160e2:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80160e4:	68f8      	ldr	r0, [r7, #12]
 80160e6:	f7ff ffb5 	bl	8016054 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80160ea:	bf00      	nop
 80160ec:	3710      	adds	r7, #16
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd80      	pop	{r7, pc}

080160f2 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80160f2:	b580      	push	{r7, lr}
 80160f4:	b084      	sub	sp, #16
 80160f6:	af00      	add	r7, sp, #0
 80160f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160fe:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8016100:	6878      	ldr	r0, [r7, #4]
 8016102:	f7f7 fdcf 	bl	800dca4 <HAL_DMA_GetError>
 8016106:	4603      	mov	r3, r0
 8016108:	2b02      	cmp	r3, #2
 801610a:	d011      	beq.n	8016130 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 801610c:	68f8      	ldr	r0, [r7, #12]
 801610e:	f000 f82d 	bl	801616c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016118:	f043 0210 	orr.w	r2, r3, #16
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	2201      	movs	r2, #1
 8016126:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 801612a:	68f8      	ldr	r0, [r7, #12]
 801612c:	f7ff ff9c 	bl	8016068 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8016130:	bf00      	nop
 8016132:	3710      	adds	r7, #16
 8016134:	46bd      	mov	sp, r7
 8016136:	bd80      	pop	{r7, pc}

08016138 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b084      	sub	sp, #16
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016144:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	2200      	movs	r2, #0
 801614a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	2200      	movs	r2, #0
 8016152:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	2201      	movs	r2, #1
 801615a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801615e:	68f8      	ldr	r0, [r7, #12]
 8016160:	f7ff ff82 	bl	8016068 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8016164:	bf00      	nop
 8016166:	3710      	adds	r7, #16
 8016168:	46bd      	mov	sp, r7
 801616a:	bd80      	pop	{r7, pc}

0801616c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801616c:	b480      	push	{r7}
 801616e:	b085      	sub	sp, #20
 8016170:	af00      	add	r7, sp, #0
 8016172:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	695b      	ldr	r3, [r3, #20]
 801617a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	699a      	ldr	r2, [r3, #24]
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	f042 0208 	orr.w	r2, r2, #8
 801618a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	699a      	ldr	r2, [r3, #24]
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	f042 0210 	orr.w	r2, r2, #16
 801619a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	681a      	ldr	r2, [r3, #0]
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	f022 0201 	bic.w	r2, r2, #1
 80161aa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	6919      	ldr	r1, [r3, #16]
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	681a      	ldr	r2, [r3, #0]
 80161b6:	4b3c      	ldr	r3, [pc, #240]	@ (80162a8 <SPI_CloseTransfer+0x13c>)
 80161b8:	400b      	ands	r3, r1
 80161ba:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	689a      	ldr	r2, [r3, #8]
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80161ca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80161d2:	b2db      	uxtb	r3, r3
 80161d4:	2b04      	cmp	r3, #4
 80161d6:	d014      	beq.n	8016202 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	f003 0320 	and.w	r3, r3, #32
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d00f      	beq.n	8016202 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80161e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	699a      	ldr	r2, [r3, #24]
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	f042 0220 	orr.w	r2, r2, #32
 8016200:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8016208:	b2db      	uxtb	r3, r3
 801620a:	2b03      	cmp	r3, #3
 801620c:	d014      	beq.n	8016238 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016214:	2b00      	cmp	r3, #0
 8016216:	d00f      	beq.n	8016238 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801621e:	f043 0204 	orr.w	r2, r3, #4
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	699a      	ldr	r2, [r3, #24]
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016236:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801623e:	2b00      	cmp	r3, #0
 8016240:	d00f      	beq.n	8016262 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016248:	f043 0201 	orr.w	r2, r3, #1
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	699a      	ldr	r2, [r3, #24]
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016260:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016268:	2b00      	cmp	r3, #0
 801626a:	d00f      	beq.n	801628c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016272:	f043 0208 	orr.w	r2, r3, #8
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	699a      	ldr	r2, [r3, #24]
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801628a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	2200      	movs	r2, #0
 8016290:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	2200      	movs	r2, #0
 8016298:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 801629c:	bf00      	nop
 801629e:	3714      	adds	r7, #20
 80162a0:	46bd      	mov	sp, r7
 80162a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a6:	4770      	bx	lr
 80162a8:	fffffc90 	.word	0xfffffc90

080162ac <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b084      	sub	sp, #16
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	60f8      	str	r0, [r7, #12]
 80162b4:	60b9      	str	r1, [r7, #8]
 80162b6:	603b      	str	r3, [r7, #0]
 80162b8:	4613      	mov	r3, r2
 80162ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80162bc:	e010      	b.n	80162e0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80162be:	f7f3 f95d 	bl	800957c <HAL_GetTick>
 80162c2:	4602      	mov	r2, r0
 80162c4:	69bb      	ldr	r3, [r7, #24]
 80162c6:	1ad3      	subs	r3, r2, r3
 80162c8:	683a      	ldr	r2, [r7, #0]
 80162ca:	429a      	cmp	r2, r3
 80162cc:	d803      	bhi.n	80162d6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80162ce:	683b      	ldr	r3, [r7, #0]
 80162d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162d4:	d102      	bne.n	80162dc <SPI_WaitOnFlagUntilTimeout+0x30>
 80162d6:	683b      	ldr	r3, [r7, #0]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d101      	bne.n	80162e0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80162dc:	2303      	movs	r3, #3
 80162de:	e00f      	b.n	8016300 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	695a      	ldr	r2, [r3, #20]
 80162e6:	68bb      	ldr	r3, [r7, #8]
 80162e8:	4013      	ands	r3, r2
 80162ea:	68ba      	ldr	r2, [r7, #8]
 80162ec:	429a      	cmp	r2, r3
 80162ee:	bf0c      	ite	eq
 80162f0:	2301      	moveq	r3, #1
 80162f2:	2300      	movne	r3, #0
 80162f4:	b2db      	uxtb	r3, r3
 80162f6:	461a      	mov	r2, r3
 80162f8:	79fb      	ldrb	r3, [r7, #7]
 80162fa:	429a      	cmp	r2, r3
 80162fc:	d0df      	beq.n	80162be <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80162fe:	2300      	movs	r3, #0
}
 8016300:	4618      	mov	r0, r3
 8016302:	3710      	adds	r7, #16
 8016304:	46bd      	mov	sp, r7
 8016306:	bd80      	pop	{r7, pc}

08016308 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8016308:	b480      	push	{r7}
 801630a:	b085      	sub	sp, #20
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016314:	095b      	lsrs	r3, r3, #5
 8016316:	3301      	adds	r3, #1
 8016318:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	68db      	ldr	r3, [r3, #12]
 801631e:	3301      	adds	r3, #1
 8016320:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	3307      	adds	r3, #7
 8016326:	08db      	lsrs	r3, r3, #3
 8016328:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801632a:	68bb      	ldr	r3, [r7, #8]
 801632c:	68fa      	ldr	r2, [r7, #12]
 801632e:	fb02 f303 	mul.w	r3, r2, r3
}
 8016332:	4618      	mov	r0, r3
 8016334:	3714      	adds	r7, #20
 8016336:	46bd      	mov	sp, r7
 8016338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801633c:	4770      	bx	lr

0801633e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801633e:	b580      	push	{r7, lr}
 8016340:	b082      	sub	sp, #8
 8016342:	af00      	add	r7, sp, #0
 8016344:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d101      	bne.n	8016350 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801634c:	2301      	movs	r3, #1
 801634e:	e049      	b.n	80163e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016356:	b2db      	uxtb	r3, r3
 8016358:	2b00      	cmp	r3, #0
 801635a:	d106      	bne.n	801636a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	2200      	movs	r2, #0
 8016360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016364:	6878      	ldr	r0, [r7, #4]
 8016366:	f7f2 ff13 	bl	8009190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	2202      	movs	r2, #2
 801636e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	681a      	ldr	r2, [r3, #0]
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	3304      	adds	r3, #4
 801637a:	4619      	mov	r1, r3
 801637c:	4610      	mov	r0, r2
 801637e:	f000 fedb 	bl	8017138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2201      	movs	r2, #1
 8016386:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	2201      	movs	r2, #1
 801638e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	2201      	movs	r2, #1
 8016396:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	2201      	movs	r2, #1
 801639e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	2201      	movs	r2, #1
 80163a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	2201      	movs	r2, #1
 80163ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	2201      	movs	r2, #1
 80163b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	2201      	movs	r2, #1
 80163be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	2201      	movs	r2, #1
 80163c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	2201      	movs	r2, #1
 80163ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	2201      	movs	r2, #1
 80163d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	2201      	movs	r2, #1
 80163de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80163e2:	2300      	movs	r3, #0
}
 80163e4:	4618      	mov	r0, r3
 80163e6:	3708      	adds	r7, #8
 80163e8:	46bd      	mov	sp, r7
 80163ea:	bd80      	pop	{r7, pc}

080163ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80163ec:	b480      	push	{r7}
 80163ee:	b085      	sub	sp, #20
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80163fa:	b2db      	uxtb	r3, r3
 80163fc:	2b01      	cmp	r3, #1
 80163fe:	d001      	beq.n	8016404 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8016400:	2301      	movs	r3, #1
 8016402:	e056      	b.n	80164b2 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	2202      	movs	r2, #2
 8016408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	4a2b      	ldr	r2, [pc, #172]	@ (80164c0 <HAL_TIM_Base_Start+0xd4>)
 8016412:	4293      	cmp	r3, r2
 8016414:	d02c      	beq.n	8016470 <HAL_TIM_Base_Start+0x84>
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801641e:	d027      	beq.n	8016470 <HAL_TIM_Base_Start+0x84>
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	4a27      	ldr	r2, [pc, #156]	@ (80164c4 <HAL_TIM_Base_Start+0xd8>)
 8016426:	4293      	cmp	r3, r2
 8016428:	d022      	beq.n	8016470 <HAL_TIM_Base_Start+0x84>
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	4a26      	ldr	r2, [pc, #152]	@ (80164c8 <HAL_TIM_Base_Start+0xdc>)
 8016430:	4293      	cmp	r3, r2
 8016432:	d01d      	beq.n	8016470 <HAL_TIM_Base_Start+0x84>
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	4a24      	ldr	r2, [pc, #144]	@ (80164cc <HAL_TIM_Base_Start+0xe0>)
 801643a:	4293      	cmp	r3, r2
 801643c:	d018      	beq.n	8016470 <HAL_TIM_Base_Start+0x84>
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	4a23      	ldr	r2, [pc, #140]	@ (80164d0 <HAL_TIM_Base_Start+0xe4>)
 8016444:	4293      	cmp	r3, r2
 8016446:	d013      	beq.n	8016470 <HAL_TIM_Base_Start+0x84>
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	4a21      	ldr	r2, [pc, #132]	@ (80164d4 <HAL_TIM_Base_Start+0xe8>)
 801644e:	4293      	cmp	r3, r2
 8016450:	d00e      	beq.n	8016470 <HAL_TIM_Base_Start+0x84>
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	4a20      	ldr	r2, [pc, #128]	@ (80164d8 <HAL_TIM_Base_Start+0xec>)
 8016458:	4293      	cmp	r3, r2
 801645a:	d009      	beq.n	8016470 <HAL_TIM_Base_Start+0x84>
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	4a1e      	ldr	r2, [pc, #120]	@ (80164dc <HAL_TIM_Base_Start+0xf0>)
 8016462:	4293      	cmp	r3, r2
 8016464:	d004      	beq.n	8016470 <HAL_TIM_Base_Start+0x84>
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	4a1d      	ldr	r2, [pc, #116]	@ (80164e0 <HAL_TIM_Base_Start+0xf4>)
 801646c:	4293      	cmp	r3, r2
 801646e:	d115      	bne.n	801649c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	689a      	ldr	r2, [r3, #8]
 8016476:	4b1b      	ldr	r3, [pc, #108]	@ (80164e4 <HAL_TIM_Base_Start+0xf8>)
 8016478:	4013      	ands	r3, r2
 801647a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	2b06      	cmp	r3, #6
 8016480:	d015      	beq.n	80164ae <HAL_TIM_Base_Start+0xc2>
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016488:	d011      	beq.n	80164ae <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	681a      	ldr	r2, [r3, #0]
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	f042 0201 	orr.w	r2, r2, #1
 8016498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801649a:	e008      	b.n	80164ae <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	681a      	ldr	r2, [r3, #0]
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	f042 0201 	orr.w	r2, r2, #1
 80164aa:	601a      	str	r2, [r3, #0]
 80164ac:	e000      	b.n	80164b0 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80164ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80164b0:	2300      	movs	r3, #0
}
 80164b2:	4618      	mov	r0, r3
 80164b4:	3714      	adds	r7, #20
 80164b6:	46bd      	mov	sp, r7
 80164b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164bc:	4770      	bx	lr
 80164be:	bf00      	nop
 80164c0:	40010000 	.word	0x40010000
 80164c4:	40000400 	.word	0x40000400
 80164c8:	40000800 	.word	0x40000800
 80164cc:	40000c00 	.word	0x40000c00
 80164d0:	40010400 	.word	0x40010400
 80164d4:	40001800 	.word	0x40001800
 80164d8:	40014000 	.word	0x40014000
 80164dc:	4000e000 	.word	0x4000e000
 80164e0:	4000e400 	.word	0x4000e400
 80164e4:	00010007 	.word	0x00010007

080164e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80164e8:	b480      	push	{r7}
 80164ea:	b085      	sub	sp, #20
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80164f6:	b2db      	uxtb	r3, r3
 80164f8:	2b01      	cmp	r3, #1
 80164fa:	d001      	beq.n	8016500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80164fc:	2301      	movs	r3, #1
 80164fe:	e05e      	b.n	80165be <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	2202      	movs	r2, #2
 8016504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	68da      	ldr	r2, [r3, #12]
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	f042 0201 	orr.w	r2, r2, #1
 8016516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	4a2b      	ldr	r2, [pc, #172]	@ (80165cc <HAL_TIM_Base_Start_IT+0xe4>)
 801651e:	4293      	cmp	r3, r2
 8016520:	d02c      	beq.n	801657c <HAL_TIM_Base_Start_IT+0x94>
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801652a:	d027      	beq.n	801657c <HAL_TIM_Base_Start_IT+0x94>
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	4a27      	ldr	r2, [pc, #156]	@ (80165d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8016532:	4293      	cmp	r3, r2
 8016534:	d022      	beq.n	801657c <HAL_TIM_Base_Start_IT+0x94>
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	4a26      	ldr	r2, [pc, #152]	@ (80165d4 <HAL_TIM_Base_Start_IT+0xec>)
 801653c:	4293      	cmp	r3, r2
 801653e:	d01d      	beq.n	801657c <HAL_TIM_Base_Start_IT+0x94>
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	4a24      	ldr	r2, [pc, #144]	@ (80165d8 <HAL_TIM_Base_Start_IT+0xf0>)
 8016546:	4293      	cmp	r3, r2
 8016548:	d018      	beq.n	801657c <HAL_TIM_Base_Start_IT+0x94>
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	4a23      	ldr	r2, [pc, #140]	@ (80165dc <HAL_TIM_Base_Start_IT+0xf4>)
 8016550:	4293      	cmp	r3, r2
 8016552:	d013      	beq.n	801657c <HAL_TIM_Base_Start_IT+0x94>
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	4a21      	ldr	r2, [pc, #132]	@ (80165e0 <HAL_TIM_Base_Start_IT+0xf8>)
 801655a:	4293      	cmp	r3, r2
 801655c:	d00e      	beq.n	801657c <HAL_TIM_Base_Start_IT+0x94>
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	4a20      	ldr	r2, [pc, #128]	@ (80165e4 <HAL_TIM_Base_Start_IT+0xfc>)
 8016564:	4293      	cmp	r3, r2
 8016566:	d009      	beq.n	801657c <HAL_TIM_Base_Start_IT+0x94>
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	4a1e      	ldr	r2, [pc, #120]	@ (80165e8 <HAL_TIM_Base_Start_IT+0x100>)
 801656e:	4293      	cmp	r3, r2
 8016570:	d004      	beq.n	801657c <HAL_TIM_Base_Start_IT+0x94>
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	4a1d      	ldr	r2, [pc, #116]	@ (80165ec <HAL_TIM_Base_Start_IT+0x104>)
 8016578:	4293      	cmp	r3, r2
 801657a:	d115      	bne.n	80165a8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	689a      	ldr	r2, [r3, #8]
 8016582:	4b1b      	ldr	r3, [pc, #108]	@ (80165f0 <HAL_TIM_Base_Start_IT+0x108>)
 8016584:	4013      	ands	r3, r2
 8016586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	2b06      	cmp	r3, #6
 801658c:	d015      	beq.n	80165ba <HAL_TIM_Base_Start_IT+0xd2>
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016594:	d011      	beq.n	80165ba <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	681a      	ldr	r2, [r3, #0]
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	f042 0201 	orr.w	r2, r2, #1
 80165a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80165a6:	e008      	b.n	80165ba <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	681a      	ldr	r2, [r3, #0]
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	f042 0201 	orr.w	r2, r2, #1
 80165b6:	601a      	str	r2, [r3, #0]
 80165b8:	e000      	b.n	80165bc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80165ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80165bc:	2300      	movs	r3, #0
}
 80165be:	4618      	mov	r0, r3
 80165c0:	3714      	adds	r7, #20
 80165c2:	46bd      	mov	sp, r7
 80165c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c8:	4770      	bx	lr
 80165ca:	bf00      	nop
 80165cc:	40010000 	.word	0x40010000
 80165d0:	40000400 	.word	0x40000400
 80165d4:	40000800 	.word	0x40000800
 80165d8:	40000c00 	.word	0x40000c00
 80165dc:	40010400 	.word	0x40010400
 80165e0:	40001800 	.word	0x40001800
 80165e4:	40014000 	.word	0x40014000
 80165e8:	4000e000 	.word	0x4000e000
 80165ec:	4000e400 	.word	0x4000e400
 80165f0:	00010007 	.word	0x00010007

080165f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b082      	sub	sp, #8
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d101      	bne.n	8016606 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8016602:	2301      	movs	r3, #1
 8016604:	e049      	b.n	801669a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801660c:	b2db      	uxtb	r3, r3
 801660e:	2b00      	cmp	r3, #0
 8016610:	d106      	bne.n	8016620 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	2200      	movs	r2, #0
 8016616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801661a:	6878      	ldr	r0, [r7, #4]
 801661c:	f7f2 fd2e 	bl	800907c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	2202      	movs	r2, #2
 8016624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	681a      	ldr	r2, [r3, #0]
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	3304      	adds	r3, #4
 8016630:	4619      	mov	r1, r3
 8016632:	4610      	mov	r0, r2
 8016634:	f000 fd80 	bl	8017138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	2201      	movs	r2, #1
 801663c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	2201      	movs	r2, #1
 8016644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	2201      	movs	r2, #1
 801664c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	2201      	movs	r2, #1
 8016654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2201      	movs	r2, #1
 801665c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2201      	movs	r2, #1
 8016664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	2201      	movs	r2, #1
 801666c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	2201      	movs	r2, #1
 8016674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	2201      	movs	r2, #1
 801667c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	2201      	movs	r2, #1
 8016684:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	2201      	movs	r2, #1
 801668c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	2201      	movs	r2, #1
 8016694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016698:	2300      	movs	r3, #0
}
 801669a:	4618      	mov	r0, r3
 801669c:	3708      	adds	r7, #8
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}
	...

080166a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b084      	sub	sp, #16
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
 80166ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80166ae:	683b      	ldr	r3, [r7, #0]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d109      	bne.n	80166c8 <HAL_TIM_PWM_Start+0x24>
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80166ba:	b2db      	uxtb	r3, r3
 80166bc:	2b01      	cmp	r3, #1
 80166be:	bf14      	ite	ne
 80166c0:	2301      	movne	r3, #1
 80166c2:	2300      	moveq	r3, #0
 80166c4:	b2db      	uxtb	r3, r3
 80166c6:	e03c      	b.n	8016742 <HAL_TIM_PWM_Start+0x9e>
 80166c8:	683b      	ldr	r3, [r7, #0]
 80166ca:	2b04      	cmp	r3, #4
 80166cc:	d109      	bne.n	80166e2 <HAL_TIM_PWM_Start+0x3e>
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80166d4:	b2db      	uxtb	r3, r3
 80166d6:	2b01      	cmp	r3, #1
 80166d8:	bf14      	ite	ne
 80166da:	2301      	movne	r3, #1
 80166dc:	2300      	moveq	r3, #0
 80166de:	b2db      	uxtb	r3, r3
 80166e0:	e02f      	b.n	8016742 <HAL_TIM_PWM_Start+0x9e>
 80166e2:	683b      	ldr	r3, [r7, #0]
 80166e4:	2b08      	cmp	r3, #8
 80166e6:	d109      	bne.n	80166fc <HAL_TIM_PWM_Start+0x58>
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80166ee:	b2db      	uxtb	r3, r3
 80166f0:	2b01      	cmp	r3, #1
 80166f2:	bf14      	ite	ne
 80166f4:	2301      	movne	r3, #1
 80166f6:	2300      	moveq	r3, #0
 80166f8:	b2db      	uxtb	r3, r3
 80166fa:	e022      	b.n	8016742 <HAL_TIM_PWM_Start+0x9e>
 80166fc:	683b      	ldr	r3, [r7, #0]
 80166fe:	2b0c      	cmp	r3, #12
 8016700:	d109      	bne.n	8016716 <HAL_TIM_PWM_Start+0x72>
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016708:	b2db      	uxtb	r3, r3
 801670a:	2b01      	cmp	r3, #1
 801670c:	bf14      	ite	ne
 801670e:	2301      	movne	r3, #1
 8016710:	2300      	moveq	r3, #0
 8016712:	b2db      	uxtb	r3, r3
 8016714:	e015      	b.n	8016742 <HAL_TIM_PWM_Start+0x9e>
 8016716:	683b      	ldr	r3, [r7, #0]
 8016718:	2b10      	cmp	r3, #16
 801671a:	d109      	bne.n	8016730 <HAL_TIM_PWM_Start+0x8c>
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016722:	b2db      	uxtb	r3, r3
 8016724:	2b01      	cmp	r3, #1
 8016726:	bf14      	ite	ne
 8016728:	2301      	movne	r3, #1
 801672a:	2300      	moveq	r3, #0
 801672c:	b2db      	uxtb	r3, r3
 801672e:	e008      	b.n	8016742 <HAL_TIM_PWM_Start+0x9e>
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016736:	b2db      	uxtb	r3, r3
 8016738:	2b01      	cmp	r3, #1
 801673a:	bf14      	ite	ne
 801673c:	2301      	movne	r3, #1
 801673e:	2300      	moveq	r3, #0
 8016740:	b2db      	uxtb	r3, r3
 8016742:	2b00      	cmp	r3, #0
 8016744:	d001      	beq.n	801674a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8016746:	2301      	movs	r3, #1
 8016748:	e0ab      	b.n	80168a2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801674a:	683b      	ldr	r3, [r7, #0]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d104      	bne.n	801675a <HAL_TIM_PWM_Start+0xb6>
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	2202      	movs	r2, #2
 8016754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016758:	e023      	b.n	80167a2 <HAL_TIM_PWM_Start+0xfe>
 801675a:	683b      	ldr	r3, [r7, #0]
 801675c:	2b04      	cmp	r3, #4
 801675e:	d104      	bne.n	801676a <HAL_TIM_PWM_Start+0xc6>
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	2202      	movs	r2, #2
 8016764:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016768:	e01b      	b.n	80167a2 <HAL_TIM_PWM_Start+0xfe>
 801676a:	683b      	ldr	r3, [r7, #0]
 801676c:	2b08      	cmp	r3, #8
 801676e:	d104      	bne.n	801677a <HAL_TIM_PWM_Start+0xd6>
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	2202      	movs	r2, #2
 8016774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016778:	e013      	b.n	80167a2 <HAL_TIM_PWM_Start+0xfe>
 801677a:	683b      	ldr	r3, [r7, #0]
 801677c:	2b0c      	cmp	r3, #12
 801677e:	d104      	bne.n	801678a <HAL_TIM_PWM_Start+0xe6>
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	2202      	movs	r2, #2
 8016784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016788:	e00b      	b.n	80167a2 <HAL_TIM_PWM_Start+0xfe>
 801678a:	683b      	ldr	r3, [r7, #0]
 801678c:	2b10      	cmp	r3, #16
 801678e:	d104      	bne.n	801679a <HAL_TIM_PWM_Start+0xf6>
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	2202      	movs	r2, #2
 8016794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016798:	e003      	b.n	80167a2 <HAL_TIM_PWM_Start+0xfe>
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	2202      	movs	r2, #2
 801679e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	2201      	movs	r2, #1
 80167a8:	6839      	ldr	r1, [r7, #0]
 80167aa:	4618      	mov	r0, r3
 80167ac:	f001 fa1a 	bl	8017be4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	4a3d      	ldr	r2, [pc, #244]	@ (80168ac <HAL_TIM_PWM_Start+0x208>)
 80167b6:	4293      	cmp	r3, r2
 80167b8:	d013      	beq.n	80167e2 <HAL_TIM_PWM_Start+0x13e>
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	4a3c      	ldr	r2, [pc, #240]	@ (80168b0 <HAL_TIM_PWM_Start+0x20c>)
 80167c0:	4293      	cmp	r3, r2
 80167c2:	d00e      	beq.n	80167e2 <HAL_TIM_PWM_Start+0x13e>
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	4a3a      	ldr	r2, [pc, #232]	@ (80168b4 <HAL_TIM_PWM_Start+0x210>)
 80167ca:	4293      	cmp	r3, r2
 80167cc:	d009      	beq.n	80167e2 <HAL_TIM_PWM_Start+0x13e>
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	4a39      	ldr	r2, [pc, #228]	@ (80168b8 <HAL_TIM_PWM_Start+0x214>)
 80167d4:	4293      	cmp	r3, r2
 80167d6:	d004      	beq.n	80167e2 <HAL_TIM_PWM_Start+0x13e>
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	4a37      	ldr	r2, [pc, #220]	@ (80168bc <HAL_TIM_PWM_Start+0x218>)
 80167de:	4293      	cmp	r3, r2
 80167e0:	d101      	bne.n	80167e6 <HAL_TIM_PWM_Start+0x142>
 80167e2:	2301      	movs	r3, #1
 80167e4:	e000      	b.n	80167e8 <HAL_TIM_PWM_Start+0x144>
 80167e6:	2300      	movs	r3, #0
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d007      	beq.n	80167fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80167fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	4a2a      	ldr	r2, [pc, #168]	@ (80168ac <HAL_TIM_PWM_Start+0x208>)
 8016802:	4293      	cmp	r3, r2
 8016804:	d02c      	beq.n	8016860 <HAL_TIM_PWM_Start+0x1bc>
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801680e:	d027      	beq.n	8016860 <HAL_TIM_PWM_Start+0x1bc>
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	4a2a      	ldr	r2, [pc, #168]	@ (80168c0 <HAL_TIM_PWM_Start+0x21c>)
 8016816:	4293      	cmp	r3, r2
 8016818:	d022      	beq.n	8016860 <HAL_TIM_PWM_Start+0x1bc>
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	4a29      	ldr	r2, [pc, #164]	@ (80168c4 <HAL_TIM_PWM_Start+0x220>)
 8016820:	4293      	cmp	r3, r2
 8016822:	d01d      	beq.n	8016860 <HAL_TIM_PWM_Start+0x1bc>
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	4a27      	ldr	r2, [pc, #156]	@ (80168c8 <HAL_TIM_PWM_Start+0x224>)
 801682a:	4293      	cmp	r3, r2
 801682c:	d018      	beq.n	8016860 <HAL_TIM_PWM_Start+0x1bc>
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	4a1f      	ldr	r2, [pc, #124]	@ (80168b0 <HAL_TIM_PWM_Start+0x20c>)
 8016834:	4293      	cmp	r3, r2
 8016836:	d013      	beq.n	8016860 <HAL_TIM_PWM_Start+0x1bc>
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	4a23      	ldr	r2, [pc, #140]	@ (80168cc <HAL_TIM_PWM_Start+0x228>)
 801683e:	4293      	cmp	r3, r2
 8016840:	d00e      	beq.n	8016860 <HAL_TIM_PWM_Start+0x1bc>
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	4a1b      	ldr	r2, [pc, #108]	@ (80168b4 <HAL_TIM_PWM_Start+0x210>)
 8016848:	4293      	cmp	r3, r2
 801684a:	d009      	beq.n	8016860 <HAL_TIM_PWM_Start+0x1bc>
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	4a1f      	ldr	r2, [pc, #124]	@ (80168d0 <HAL_TIM_PWM_Start+0x22c>)
 8016852:	4293      	cmp	r3, r2
 8016854:	d004      	beq.n	8016860 <HAL_TIM_PWM_Start+0x1bc>
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	4a1e      	ldr	r2, [pc, #120]	@ (80168d4 <HAL_TIM_PWM_Start+0x230>)
 801685c:	4293      	cmp	r3, r2
 801685e:	d115      	bne.n	801688c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	689a      	ldr	r2, [r3, #8]
 8016866:	4b1c      	ldr	r3, [pc, #112]	@ (80168d8 <HAL_TIM_PWM_Start+0x234>)
 8016868:	4013      	ands	r3, r2
 801686a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	2b06      	cmp	r3, #6
 8016870:	d015      	beq.n	801689e <HAL_TIM_PWM_Start+0x1fa>
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016878:	d011      	beq.n	801689e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	681a      	ldr	r2, [r3, #0]
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	f042 0201 	orr.w	r2, r2, #1
 8016888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801688a:	e008      	b.n	801689e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	681a      	ldr	r2, [r3, #0]
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	f042 0201 	orr.w	r2, r2, #1
 801689a:	601a      	str	r2, [r3, #0]
 801689c:	e000      	b.n	80168a0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801689e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80168a0:	2300      	movs	r3, #0
}
 80168a2:	4618      	mov	r0, r3
 80168a4:	3710      	adds	r7, #16
 80168a6:	46bd      	mov	sp, r7
 80168a8:	bd80      	pop	{r7, pc}
 80168aa:	bf00      	nop
 80168ac:	40010000 	.word	0x40010000
 80168b0:	40010400 	.word	0x40010400
 80168b4:	40014000 	.word	0x40014000
 80168b8:	40014400 	.word	0x40014400
 80168bc:	40014800 	.word	0x40014800
 80168c0:	40000400 	.word	0x40000400
 80168c4:	40000800 	.word	0x40000800
 80168c8:	40000c00 	.word	0x40000c00
 80168cc:	40001800 	.word	0x40001800
 80168d0:	4000e000 	.word	0x4000e000
 80168d4:	4000e400 	.word	0x4000e400
 80168d8:	00010007 	.word	0x00010007

080168dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b082      	sub	sp, #8
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d101      	bne.n	80168ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80168ea:	2301      	movs	r3, #1
 80168ec:	e049      	b.n	8016982 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80168f4:	b2db      	uxtb	r3, r3
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d106      	bne.n	8016908 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	2200      	movs	r2, #0
 80168fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8016902:	6878      	ldr	r0, [r7, #4]
 8016904:	f7f2 fbf4 	bl	80090f0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	2202      	movs	r2, #2
 801690c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	681a      	ldr	r2, [r3, #0]
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	3304      	adds	r3, #4
 8016918:	4619      	mov	r1, r3
 801691a:	4610      	mov	r0, r2
 801691c:	f000 fc0c 	bl	8017138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2201      	movs	r2, #1
 8016924:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	2201      	movs	r2, #1
 801692c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	2201      	movs	r2, #1
 8016934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	2201      	movs	r2, #1
 801693c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2201      	movs	r2, #1
 8016944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2201      	movs	r2, #1
 801694c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	2201      	movs	r2, #1
 8016954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	2201      	movs	r2, #1
 801695c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	2201      	movs	r2, #1
 8016964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	2201      	movs	r2, #1
 801696c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	2201      	movs	r2, #1
 8016974:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2201      	movs	r2, #1
 801697c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016980:	2300      	movs	r3, #0
}
 8016982:	4618      	mov	r0, r3
 8016984:	3708      	adds	r7, #8
 8016986:	46bd      	mov	sp, r7
 8016988:	bd80      	pop	{r7, pc}

0801698a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801698a:	b580      	push	{r7, lr}
 801698c:	b084      	sub	sp, #16
 801698e:	af00      	add	r7, sp, #0
 8016990:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	68db      	ldr	r3, [r3, #12]
 8016998:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	691b      	ldr	r3, [r3, #16]
 80169a0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80169a2:	68bb      	ldr	r3, [r7, #8]
 80169a4:	f003 0302 	and.w	r3, r3, #2
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d020      	beq.n	80169ee <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	f003 0302 	and.w	r3, r3, #2
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d01b      	beq.n	80169ee <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	f06f 0202 	mvn.w	r2, #2
 80169be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	2201      	movs	r2, #1
 80169c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	699b      	ldr	r3, [r3, #24]
 80169cc:	f003 0303 	and.w	r3, r3, #3
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d003      	beq.n	80169dc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80169d4:	6878      	ldr	r0, [r7, #4]
 80169d6:	f000 fb91 	bl	80170fc <HAL_TIM_IC_CaptureCallback>
 80169da:	e005      	b.n	80169e8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80169dc:	6878      	ldr	r0, [r7, #4]
 80169de:	f000 fb83 	bl	80170e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80169e2:	6878      	ldr	r0, [r7, #4]
 80169e4:	f000 fb94 	bl	8017110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	2200      	movs	r2, #0
 80169ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80169ee:	68bb      	ldr	r3, [r7, #8]
 80169f0:	f003 0304 	and.w	r3, r3, #4
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d020      	beq.n	8016a3a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	f003 0304 	and.w	r3, r3, #4
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d01b      	beq.n	8016a3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	f06f 0204 	mvn.w	r2, #4
 8016a0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	2202      	movs	r2, #2
 8016a10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	699b      	ldr	r3, [r3, #24]
 8016a18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d003      	beq.n	8016a28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016a20:	6878      	ldr	r0, [r7, #4]
 8016a22:	f000 fb6b 	bl	80170fc <HAL_TIM_IC_CaptureCallback>
 8016a26:	e005      	b.n	8016a34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016a28:	6878      	ldr	r0, [r7, #4]
 8016a2a:	f000 fb5d 	bl	80170e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f000 fb6e 	bl	8017110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	2200      	movs	r2, #0
 8016a38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8016a3a:	68bb      	ldr	r3, [r7, #8]
 8016a3c:	f003 0308 	and.w	r3, r3, #8
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d020      	beq.n	8016a86 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	f003 0308 	and.w	r3, r3, #8
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d01b      	beq.n	8016a86 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	f06f 0208 	mvn.w	r2, #8
 8016a56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	2204      	movs	r2, #4
 8016a5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	69db      	ldr	r3, [r3, #28]
 8016a64:	f003 0303 	and.w	r3, r3, #3
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d003      	beq.n	8016a74 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016a6c:	6878      	ldr	r0, [r7, #4]
 8016a6e:	f000 fb45 	bl	80170fc <HAL_TIM_IC_CaptureCallback>
 8016a72:	e005      	b.n	8016a80 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016a74:	6878      	ldr	r0, [r7, #4]
 8016a76:	f000 fb37 	bl	80170e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016a7a:	6878      	ldr	r0, [r7, #4]
 8016a7c:	f000 fb48 	bl	8017110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	2200      	movs	r2, #0
 8016a84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8016a86:	68bb      	ldr	r3, [r7, #8]
 8016a88:	f003 0310 	and.w	r3, r3, #16
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d020      	beq.n	8016ad2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	f003 0310 	and.w	r3, r3, #16
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d01b      	beq.n	8016ad2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	f06f 0210 	mvn.w	r2, #16
 8016aa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	2208      	movs	r2, #8
 8016aa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	69db      	ldr	r3, [r3, #28]
 8016ab0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d003      	beq.n	8016ac0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016ab8:	6878      	ldr	r0, [r7, #4]
 8016aba:	f000 fb1f 	bl	80170fc <HAL_TIM_IC_CaptureCallback>
 8016abe:	e005      	b.n	8016acc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016ac0:	6878      	ldr	r0, [r7, #4]
 8016ac2:	f000 fb11 	bl	80170e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016ac6:	6878      	ldr	r0, [r7, #4]
 8016ac8:	f000 fb22 	bl	8017110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	2200      	movs	r2, #0
 8016ad0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8016ad2:	68bb      	ldr	r3, [r7, #8]
 8016ad4:	f003 0301 	and.w	r3, r3, #1
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d00c      	beq.n	8016af6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	f003 0301 	and.w	r3, r3, #1
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d007      	beq.n	8016af6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	f06f 0201 	mvn.w	r2, #1
 8016aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016af0:	6878      	ldr	r0, [r7, #4]
 8016af2:	f7ef facd 	bl	8006090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016af6:	68bb      	ldr	r3, [r7, #8]
 8016af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d104      	bne.n	8016b0a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8016b00:	68bb      	ldr	r3, [r7, #8]
 8016b02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d00c      	beq.n	8016b24 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d007      	beq.n	8016b24 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8016b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016b1e:	6878      	ldr	r0, [r7, #4]
 8016b20:	f001 f9b8 	bl	8017e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8016b24:	68bb      	ldr	r3, [r7, #8]
 8016b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d00c      	beq.n	8016b48 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d007      	beq.n	8016b48 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8016b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016b42:	6878      	ldr	r0, [r7, #4]
 8016b44:	f001 f9b0 	bl	8017ea8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8016b48:	68bb      	ldr	r3, [r7, #8]
 8016b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d00c      	beq.n	8016b6c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d007      	beq.n	8016b6c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8016b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016b66:	6878      	ldr	r0, [r7, #4]
 8016b68:	f000 fadc 	bl	8017124 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8016b6c:	68bb      	ldr	r3, [r7, #8]
 8016b6e:	f003 0320 	and.w	r3, r3, #32
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d00c      	beq.n	8016b90 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	f003 0320 	and.w	r3, r3, #32
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d007      	beq.n	8016b90 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	f06f 0220 	mvn.w	r2, #32
 8016b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016b8a:	6878      	ldr	r0, [r7, #4]
 8016b8c:	f001 f978 	bl	8017e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016b90:	bf00      	nop
 8016b92:	3710      	adds	r7, #16
 8016b94:	46bd      	mov	sp, r7
 8016b96:	bd80      	pop	{r7, pc}

08016b98 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8016b98:	b580      	push	{r7, lr}
 8016b9a:	b086      	sub	sp, #24
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	60f8      	str	r0, [r7, #12]
 8016ba0:	60b9      	str	r1, [r7, #8]
 8016ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016ba4:	2300      	movs	r3, #0
 8016ba6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016bae:	2b01      	cmp	r3, #1
 8016bb0:	d101      	bne.n	8016bb6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8016bb2:	2302      	movs	r3, #2
 8016bb4:	e088      	b.n	8016cc8 <HAL_TIM_IC_ConfigChannel+0x130>
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	2201      	movs	r2, #1
 8016bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d11b      	bne.n	8016bfc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016bc8:	68bb      	ldr	r3, [r7, #8]
 8016bca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016bcc:	68bb      	ldr	r3, [r7, #8]
 8016bce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016bd0:	68bb      	ldr	r3, [r7, #8]
 8016bd2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8016bd4:	f000 fe32 	bl	801783c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	699a      	ldr	r2, [r3, #24]
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	f022 020c 	bic.w	r2, r2, #12
 8016be6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	6999      	ldr	r1, [r3, #24]
 8016bee:	68bb      	ldr	r3, [r7, #8]
 8016bf0:	689a      	ldr	r2, [r3, #8]
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	430a      	orrs	r2, r1
 8016bf8:	619a      	str	r2, [r3, #24]
 8016bfa:	e060      	b.n	8016cbe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	2b04      	cmp	r3, #4
 8016c00:	d11c      	bne.n	8016c3c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016c06:	68bb      	ldr	r3, [r7, #8]
 8016c08:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016c0a:	68bb      	ldr	r3, [r7, #8]
 8016c0c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016c0e:	68bb      	ldr	r3, [r7, #8]
 8016c10:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8016c12:	f000 fec2 	bl	801799a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	699a      	ldr	r2, [r3, #24]
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016c24:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	6999      	ldr	r1, [r3, #24]
 8016c2c:	68bb      	ldr	r3, [r7, #8]
 8016c2e:	689b      	ldr	r3, [r3, #8]
 8016c30:	021a      	lsls	r2, r3, #8
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	430a      	orrs	r2, r1
 8016c38:	619a      	str	r2, [r3, #24]
 8016c3a:	e040      	b.n	8016cbe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	2b08      	cmp	r3, #8
 8016c40:	d11b      	bne.n	8016c7a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016c46:	68bb      	ldr	r3, [r7, #8]
 8016c48:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016c4a:	68bb      	ldr	r3, [r7, #8]
 8016c4c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016c4e:	68bb      	ldr	r3, [r7, #8]
 8016c50:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8016c52:	f000 ff0f 	bl	8017a74 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	69da      	ldr	r2, [r3, #28]
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	f022 020c 	bic.w	r2, r2, #12
 8016c64:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	69d9      	ldr	r1, [r3, #28]
 8016c6c:	68bb      	ldr	r3, [r7, #8]
 8016c6e:	689a      	ldr	r2, [r3, #8]
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	430a      	orrs	r2, r1
 8016c76:	61da      	str	r2, [r3, #28]
 8016c78:	e021      	b.n	8016cbe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	2b0c      	cmp	r3, #12
 8016c7e:	d11c      	bne.n	8016cba <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016c84:	68bb      	ldr	r3, [r7, #8]
 8016c86:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016c88:	68bb      	ldr	r3, [r7, #8]
 8016c8a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016c8c:	68bb      	ldr	r3, [r7, #8]
 8016c8e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8016c90:	f000 ff2c 	bl	8017aec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	69da      	ldr	r2, [r3, #28]
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016ca2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	69d9      	ldr	r1, [r3, #28]
 8016caa:	68bb      	ldr	r3, [r7, #8]
 8016cac:	689b      	ldr	r3, [r3, #8]
 8016cae:	021a      	lsls	r2, r3, #8
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	430a      	orrs	r2, r1
 8016cb6:	61da      	str	r2, [r3, #28]
 8016cb8:	e001      	b.n	8016cbe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8016cba:	2301      	movs	r3, #1
 8016cbc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016cc8:	4618      	mov	r0, r3
 8016cca:	3718      	adds	r7, #24
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	bd80      	pop	{r7, pc}

08016cd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b086      	sub	sp, #24
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	60f8      	str	r0, [r7, #12]
 8016cd8:	60b9      	str	r1, [r7, #8]
 8016cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016cdc:	2300      	movs	r3, #0
 8016cde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016ce6:	2b01      	cmp	r3, #1
 8016ce8:	d101      	bne.n	8016cee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8016cea:	2302      	movs	r3, #2
 8016cec:	e0ff      	b.n	8016eee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	2201      	movs	r2, #1
 8016cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	2b14      	cmp	r3, #20
 8016cfa:	f200 80f0 	bhi.w	8016ede <HAL_TIM_PWM_ConfigChannel+0x20e>
 8016cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8016d04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8016d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d04:	08016d59 	.word	0x08016d59
 8016d08:	08016edf 	.word	0x08016edf
 8016d0c:	08016edf 	.word	0x08016edf
 8016d10:	08016edf 	.word	0x08016edf
 8016d14:	08016d99 	.word	0x08016d99
 8016d18:	08016edf 	.word	0x08016edf
 8016d1c:	08016edf 	.word	0x08016edf
 8016d20:	08016edf 	.word	0x08016edf
 8016d24:	08016ddb 	.word	0x08016ddb
 8016d28:	08016edf 	.word	0x08016edf
 8016d2c:	08016edf 	.word	0x08016edf
 8016d30:	08016edf 	.word	0x08016edf
 8016d34:	08016e1b 	.word	0x08016e1b
 8016d38:	08016edf 	.word	0x08016edf
 8016d3c:	08016edf 	.word	0x08016edf
 8016d40:	08016edf 	.word	0x08016edf
 8016d44:	08016e5d 	.word	0x08016e5d
 8016d48:	08016edf 	.word	0x08016edf
 8016d4c:	08016edf 	.word	0x08016edf
 8016d50:	08016edf 	.word	0x08016edf
 8016d54:	08016e9d 	.word	0x08016e9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	68b9      	ldr	r1, [r7, #8]
 8016d5e:	4618      	mov	r0, r3
 8016d60:	f000 fa96 	bl	8017290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	699a      	ldr	r2, [r3, #24]
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	f042 0208 	orr.w	r2, r2, #8
 8016d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	699a      	ldr	r2, [r3, #24]
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	f022 0204 	bic.w	r2, r2, #4
 8016d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	6999      	ldr	r1, [r3, #24]
 8016d8a:	68bb      	ldr	r3, [r7, #8]
 8016d8c:	691a      	ldr	r2, [r3, #16]
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	430a      	orrs	r2, r1
 8016d94:	619a      	str	r2, [r3, #24]
      break;
 8016d96:	e0a5      	b.n	8016ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	68b9      	ldr	r1, [r7, #8]
 8016d9e:	4618      	mov	r0, r3
 8016da0:	f000 fb06 	bl	80173b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	699a      	ldr	r2, [r3, #24]
 8016daa:	68fb      	ldr	r3, [r7, #12]
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	699a      	ldr	r2, [r3, #24]
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	6999      	ldr	r1, [r3, #24]
 8016dca:	68bb      	ldr	r3, [r7, #8]
 8016dcc:	691b      	ldr	r3, [r3, #16]
 8016dce:	021a      	lsls	r2, r3, #8
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	430a      	orrs	r2, r1
 8016dd6:	619a      	str	r2, [r3, #24]
      break;
 8016dd8:	e084      	b.n	8016ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	68b9      	ldr	r1, [r7, #8]
 8016de0:	4618      	mov	r0, r3
 8016de2:	f000 fb6f 	bl	80174c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	69da      	ldr	r2, [r3, #28]
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	f042 0208 	orr.w	r2, r2, #8
 8016df4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	69da      	ldr	r2, [r3, #28]
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	f022 0204 	bic.w	r2, r2, #4
 8016e04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	69d9      	ldr	r1, [r3, #28]
 8016e0c:	68bb      	ldr	r3, [r7, #8]
 8016e0e:	691a      	ldr	r2, [r3, #16]
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	430a      	orrs	r2, r1
 8016e16:	61da      	str	r2, [r3, #28]
      break;
 8016e18:	e064      	b.n	8016ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	68b9      	ldr	r1, [r7, #8]
 8016e20:	4618      	mov	r0, r3
 8016e22:	f000 fbd7 	bl	80175d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	69da      	ldr	r2, [r3, #28]
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	69da      	ldr	r2, [r3, #28]
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	69d9      	ldr	r1, [r3, #28]
 8016e4c:	68bb      	ldr	r3, [r7, #8]
 8016e4e:	691b      	ldr	r3, [r3, #16]
 8016e50:	021a      	lsls	r2, r3, #8
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	430a      	orrs	r2, r1
 8016e58:	61da      	str	r2, [r3, #28]
      break;
 8016e5a:	e043      	b.n	8016ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	68b9      	ldr	r1, [r7, #8]
 8016e62:	4618      	mov	r0, r3
 8016e64:	f000 fc20 	bl	80176a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	f042 0208 	orr.w	r2, r2, #8
 8016e76:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	f022 0204 	bic.w	r2, r2, #4
 8016e86:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016e8e:	68bb      	ldr	r3, [r7, #8]
 8016e90:	691a      	ldr	r2, [r3, #16]
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	430a      	orrs	r2, r1
 8016e98:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016e9a:	e023      	b.n	8016ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	68b9      	ldr	r1, [r7, #8]
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	f000 fc64 	bl	8017770 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016eb6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016ec6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016ece:	68bb      	ldr	r3, [r7, #8]
 8016ed0:	691b      	ldr	r3, [r3, #16]
 8016ed2:	021a      	lsls	r2, r3, #8
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	430a      	orrs	r2, r1
 8016eda:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016edc:	e002      	b.n	8016ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8016ede:	2301      	movs	r3, #1
 8016ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8016ee2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8016eee:	4618      	mov	r0, r3
 8016ef0:	3718      	adds	r7, #24
 8016ef2:	46bd      	mov	sp, r7
 8016ef4:	bd80      	pop	{r7, pc}
 8016ef6:	bf00      	nop

08016ef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	b084      	sub	sp, #16
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	6078      	str	r0, [r7, #4]
 8016f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016f02:	2300      	movs	r3, #0
 8016f04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016f0c:	2b01      	cmp	r3, #1
 8016f0e:	d101      	bne.n	8016f14 <HAL_TIM_ConfigClockSource+0x1c>
 8016f10:	2302      	movs	r3, #2
 8016f12:	e0dc      	b.n	80170ce <HAL_TIM_ConfigClockSource+0x1d6>
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	2201      	movs	r2, #1
 8016f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	2202      	movs	r2, #2
 8016f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	689b      	ldr	r3, [r3, #8]
 8016f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016f2c:	68ba      	ldr	r2, [r7, #8]
 8016f2e:	4b6a      	ldr	r3, [pc, #424]	@ (80170d8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8016f30:	4013      	ands	r3, r2
 8016f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016f34:	68bb      	ldr	r3, [r7, #8]
 8016f36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016f3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	68ba      	ldr	r2, [r7, #8]
 8016f42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016f44:	683b      	ldr	r3, [r7, #0]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	4a64      	ldr	r2, [pc, #400]	@ (80170dc <HAL_TIM_ConfigClockSource+0x1e4>)
 8016f4a:	4293      	cmp	r3, r2
 8016f4c:	f000 80a9 	beq.w	80170a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8016f50:	4a62      	ldr	r2, [pc, #392]	@ (80170dc <HAL_TIM_ConfigClockSource+0x1e4>)
 8016f52:	4293      	cmp	r3, r2
 8016f54:	f200 80ae 	bhi.w	80170b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8016f58:	4a61      	ldr	r2, [pc, #388]	@ (80170e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016f5a:	4293      	cmp	r3, r2
 8016f5c:	f000 80a1 	beq.w	80170a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8016f60:	4a5f      	ldr	r2, [pc, #380]	@ (80170e0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016f62:	4293      	cmp	r3, r2
 8016f64:	f200 80a6 	bhi.w	80170b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8016f68:	4a5e      	ldr	r2, [pc, #376]	@ (80170e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8016f6a:	4293      	cmp	r3, r2
 8016f6c:	f000 8099 	beq.w	80170a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8016f70:	4a5c      	ldr	r2, [pc, #368]	@ (80170e4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8016f72:	4293      	cmp	r3, r2
 8016f74:	f200 809e 	bhi.w	80170b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8016f78:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016f7c:	f000 8091 	beq.w	80170a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8016f80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016f84:	f200 8096 	bhi.w	80170b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8016f88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016f8c:	f000 8089 	beq.w	80170a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8016f90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016f94:	f200 808e 	bhi.w	80170b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8016f98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016f9c:	d03e      	beq.n	801701c <HAL_TIM_ConfigClockSource+0x124>
 8016f9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016fa2:	f200 8087 	bhi.w	80170b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8016fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016faa:	f000 8086 	beq.w	80170ba <HAL_TIM_ConfigClockSource+0x1c2>
 8016fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016fb2:	d87f      	bhi.n	80170b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8016fb4:	2b70      	cmp	r3, #112	@ 0x70
 8016fb6:	d01a      	beq.n	8016fee <HAL_TIM_ConfigClockSource+0xf6>
 8016fb8:	2b70      	cmp	r3, #112	@ 0x70
 8016fba:	d87b      	bhi.n	80170b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8016fbc:	2b60      	cmp	r3, #96	@ 0x60
 8016fbe:	d050      	beq.n	8017062 <HAL_TIM_ConfigClockSource+0x16a>
 8016fc0:	2b60      	cmp	r3, #96	@ 0x60
 8016fc2:	d877      	bhi.n	80170b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8016fc4:	2b50      	cmp	r3, #80	@ 0x50
 8016fc6:	d03c      	beq.n	8017042 <HAL_TIM_ConfigClockSource+0x14a>
 8016fc8:	2b50      	cmp	r3, #80	@ 0x50
 8016fca:	d873      	bhi.n	80170b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8016fcc:	2b40      	cmp	r3, #64	@ 0x40
 8016fce:	d058      	beq.n	8017082 <HAL_TIM_ConfigClockSource+0x18a>
 8016fd0:	2b40      	cmp	r3, #64	@ 0x40
 8016fd2:	d86f      	bhi.n	80170b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8016fd4:	2b30      	cmp	r3, #48	@ 0x30
 8016fd6:	d064      	beq.n	80170a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8016fd8:	2b30      	cmp	r3, #48	@ 0x30
 8016fda:	d86b      	bhi.n	80170b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8016fdc:	2b20      	cmp	r3, #32
 8016fde:	d060      	beq.n	80170a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8016fe0:	2b20      	cmp	r3, #32
 8016fe2:	d867      	bhi.n	80170b4 <HAL_TIM_ConfigClockSource+0x1bc>
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d05c      	beq.n	80170a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8016fe8:	2b10      	cmp	r3, #16
 8016fea:	d05a      	beq.n	80170a2 <HAL_TIM_ConfigClockSource+0x1aa>
 8016fec:	e062      	b.n	80170b4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016ff2:	683b      	ldr	r3, [r7, #0]
 8016ff4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016ff6:	683b      	ldr	r3, [r7, #0]
 8016ff8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016ffa:	683b      	ldr	r3, [r7, #0]
 8016ffc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016ffe:	f000 fdd1 	bl	8017ba4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	689b      	ldr	r3, [r3, #8]
 8017008:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801700a:	68bb      	ldr	r3, [r7, #8]
 801700c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8017010:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	68ba      	ldr	r2, [r7, #8]
 8017018:	609a      	str	r2, [r3, #8]
      break;
 801701a:	e04f      	b.n	80170bc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8017020:	683b      	ldr	r3, [r7, #0]
 8017022:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8017024:	683b      	ldr	r3, [r7, #0]
 8017026:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8017028:	683b      	ldr	r3, [r7, #0]
 801702a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801702c:	f000 fdba 	bl	8017ba4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	689a      	ldr	r2, [r3, #8]
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801703e:	609a      	str	r2, [r3, #8]
      break;
 8017040:	e03c      	b.n	80170bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8017046:	683b      	ldr	r3, [r7, #0]
 8017048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801704a:	683b      	ldr	r3, [r7, #0]
 801704c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801704e:	461a      	mov	r2, r3
 8017050:	f000 fc74 	bl	801793c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	2150      	movs	r1, #80	@ 0x50
 801705a:	4618      	mov	r0, r3
 801705c:	f000 fd84 	bl	8017b68 <TIM_ITRx_SetConfig>
      break;
 8017060:	e02c      	b.n	80170bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8017066:	683b      	ldr	r3, [r7, #0]
 8017068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801706a:	683b      	ldr	r3, [r7, #0]
 801706c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801706e:	461a      	mov	r2, r3
 8017070:	f000 fcd0 	bl	8017a14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	2160      	movs	r1, #96	@ 0x60
 801707a:	4618      	mov	r0, r3
 801707c:	f000 fd74 	bl	8017b68 <TIM_ITRx_SetConfig>
      break;
 8017080:	e01c      	b.n	80170bc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8017086:	683b      	ldr	r3, [r7, #0]
 8017088:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801708a:	683b      	ldr	r3, [r7, #0]
 801708c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801708e:	461a      	mov	r2, r3
 8017090:	f000 fc54 	bl	801793c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	2140      	movs	r1, #64	@ 0x40
 801709a:	4618      	mov	r0, r3
 801709c:	f000 fd64 	bl	8017b68 <TIM_ITRx_SetConfig>
      break;
 80170a0:	e00c      	b.n	80170bc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	681a      	ldr	r2, [r3, #0]
 80170a6:	683b      	ldr	r3, [r7, #0]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	4619      	mov	r1, r3
 80170ac:	4610      	mov	r0, r2
 80170ae:	f000 fd5b 	bl	8017b68 <TIM_ITRx_SetConfig>
      break;
 80170b2:	e003      	b.n	80170bc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80170b4:	2301      	movs	r3, #1
 80170b6:	73fb      	strb	r3, [r7, #15]
      break;
 80170b8:	e000      	b.n	80170bc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80170ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	2201      	movs	r2, #1
 80170c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	2200      	movs	r2, #0
 80170c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80170cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80170ce:	4618      	mov	r0, r3
 80170d0:	3710      	adds	r7, #16
 80170d2:	46bd      	mov	sp, r7
 80170d4:	bd80      	pop	{r7, pc}
 80170d6:	bf00      	nop
 80170d8:	ffceff88 	.word	0xffceff88
 80170dc:	00100040 	.word	0x00100040
 80170e0:	00100030 	.word	0x00100030
 80170e4:	00100020 	.word	0x00100020

080170e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80170e8:	b480      	push	{r7}
 80170ea:	b083      	sub	sp, #12
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80170f0:	bf00      	nop
 80170f2:	370c      	adds	r7, #12
 80170f4:	46bd      	mov	sp, r7
 80170f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170fa:	4770      	bx	lr

080170fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80170fc:	b480      	push	{r7}
 80170fe:	b083      	sub	sp, #12
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8017104:	bf00      	nop
 8017106:	370c      	adds	r7, #12
 8017108:	46bd      	mov	sp, r7
 801710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801710e:	4770      	bx	lr

08017110 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8017110:	b480      	push	{r7}
 8017112:	b083      	sub	sp, #12
 8017114:	af00      	add	r7, sp, #0
 8017116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017118:	bf00      	nop
 801711a:	370c      	adds	r7, #12
 801711c:	46bd      	mov	sp, r7
 801711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017122:	4770      	bx	lr

08017124 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8017124:	b480      	push	{r7}
 8017126:	b083      	sub	sp, #12
 8017128:	af00      	add	r7, sp, #0
 801712a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801712c:	bf00      	nop
 801712e:	370c      	adds	r7, #12
 8017130:	46bd      	mov	sp, r7
 8017132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017136:	4770      	bx	lr

08017138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8017138:	b480      	push	{r7}
 801713a:	b085      	sub	sp, #20
 801713c:	af00      	add	r7, sp, #0
 801713e:	6078      	str	r0, [r7, #4]
 8017140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	4a47      	ldr	r2, [pc, #284]	@ (8017268 <TIM_Base_SetConfig+0x130>)
 801714c:	4293      	cmp	r3, r2
 801714e:	d013      	beq.n	8017178 <TIM_Base_SetConfig+0x40>
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017156:	d00f      	beq.n	8017178 <TIM_Base_SetConfig+0x40>
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	4a44      	ldr	r2, [pc, #272]	@ (801726c <TIM_Base_SetConfig+0x134>)
 801715c:	4293      	cmp	r3, r2
 801715e:	d00b      	beq.n	8017178 <TIM_Base_SetConfig+0x40>
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	4a43      	ldr	r2, [pc, #268]	@ (8017270 <TIM_Base_SetConfig+0x138>)
 8017164:	4293      	cmp	r3, r2
 8017166:	d007      	beq.n	8017178 <TIM_Base_SetConfig+0x40>
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	4a42      	ldr	r2, [pc, #264]	@ (8017274 <TIM_Base_SetConfig+0x13c>)
 801716c:	4293      	cmp	r3, r2
 801716e:	d003      	beq.n	8017178 <TIM_Base_SetConfig+0x40>
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	4a41      	ldr	r2, [pc, #260]	@ (8017278 <TIM_Base_SetConfig+0x140>)
 8017174:	4293      	cmp	r3, r2
 8017176:	d108      	bne.n	801718a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801717e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017180:	683b      	ldr	r3, [r7, #0]
 8017182:	685b      	ldr	r3, [r3, #4]
 8017184:	68fa      	ldr	r2, [r7, #12]
 8017186:	4313      	orrs	r3, r2
 8017188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	4a36      	ldr	r2, [pc, #216]	@ (8017268 <TIM_Base_SetConfig+0x130>)
 801718e:	4293      	cmp	r3, r2
 8017190:	d027      	beq.n	80171e2 <TIM_Base_SetConfig+0xaa>
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017198:	d023      	beq.n	80171e2 <TIM_Base_SetConfig+0xaa>
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	4a33      	ldr	r2, [pc, #204]	@ (801726c <TIM_Base_SetConfig+0x134>)
 801719e:	4293      	cmp	r3, r2
 80171a0:	d01f      	beq.n	80171e2 <TIM_Base_SetConfig+0xaa>
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	4a32      	ldr	r2, [pc, #200]	@ (8017270 <TIM_Base_SetConfig+0x138>)
 80171a6:	4293      	cmp	r3, r2
 80171a8:	d01b      	beq.n	80171e2 <TIM_Base_SetConfig+0xaa>
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	4a31      	ldr	r2, [pc, #196]	@ (8017274 <TIM_Base_SetConfig+0x13c>)
 80171ae:	4293      	cmp	r3, r2
 80171b0:	d017      	beq.n	80171e2 <TIM_Base_SetConfig+0xaa>
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	4a30      	ldr	r2, [pc, #192]	@ (8017278 <TIM_Base_SetConfig+0x140>)
 80171b6:	4293      	cmp	r3, r2
 80171b8:	d013      	beq.n	80171e2 <TIM_Base_SetConfig+0xaa>
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	4a2f      	ldr	r2, [pc, #188]	@ (801727c <TIM_Base_SetConfig+0x144>)
 80171be:	4293      	cmp	r3, r2
 80171c0:	d00f      	beq.n	80171e2 <TIM_Base_SetConfig+0xaa>
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	4a2e      	ldr	r2, [pc, #184]	@ (8017280 <TIM_Base_SetConfig+0x148>)
 80171c6:	4293      	cmp	r3, r2
 80171c8:	d00b      	beq.n	80171e2 <TIM_Base_SetConfig+0xaa>
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	4a2d      	ldr	r2, [pc, #180]	@ (8017284 <TIM_Base_SetConfig+0x14c>)
 80171ce:	4293      	cmp	r3, r2
 80171d0:	d007      	beq.n	80171e2 <TIM_Base_SetConfig+0xaa>
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	4a2c      	ldr	r2, [pc, #176]	@ (8017288 <TIM_Base_SetConfig+0x150>)
 80171d6:	4293      	cmp	r3, r2
 80171d8:	d003      	beq.n	80171e2 <TIM_Base_SetConfig+0xaa>
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	4a2b      	ldr	r2, [pc, #172]	@ (801728c <TIM_Base_SetConfig+0x154>)
 80171de:	4293      	cmp	r3, r2
 80171e0:	d108      	bne.n	80171f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80171e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80171ea:	683b      	ldr	r3, [r7, #0]
 80171ec:	68db      	ldr	r3, [r3, #12]
 80171ee:	68fa      	ldr	r2, [r7, #12]
 80171f0:	4313      	orrs	r3, r2
 80171f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80171fa:	683b      	ldr	r3, [r7, #0]
 80171fc:	695b      	ldr	r3, [r3, #20]
 80171fe:	4313      	orrs	r3, r2
 8017200:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	689a      	ldr	r2, [r3, #8]
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801720a:	683b      	ldr	r3, [r7, #0]
 801720c:	681a      	ldr	r2, [r3, #0]
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	4a14      	ldr	r2, [pc, #80]	@ (8017268 <TIM_Base_SetConfig+0x130>)
 8017216:	4293      	cmp	r3, r2
 8017218:	d00f      	beq.n	801723a <TIM_Base_SetConfig+0x102>
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	4a16      	ldr	r2, [pc, #88]	@ (8017278 <TIM_Base_SetConfig+0x140>)
 801721e:	4293      	cmp	r3, r2
 8017220:	d00b      	beq.n	801723a <TIM_Base_SetConfig+0x102>
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	4a15      	ldr	r2, [pc, #84]	@ (801727c <TIM_Base_SetConfig+0x144>)
 8017226:	4293      	cmp	r3, r2
 8017228:	d007      	beq.n	801723a <TIM_Base_SetConfig+0x102>
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	4a14      	ldr	r2, [pc, #80]	@ (8017280 <TIM_Base_SetConfig+0x148>)
 801722e:	4293      	cmp	r3, r2
 8017230:	d003      	beq.n	801723a <TIM_Base_SetConfig+0x102>
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	4a13      	ldr	r2, [pc, #76]	@ (8017284 <TIM_Base_SetConfig+0x14c>)
 8017236:	4293      	cmp	r3, r2
 8017238:	d103      	bne.n	8017242 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801723a:	683b      	ldr	r3, [r7, #0]
 801723c:	691a      	ldr	r2, [r3, #16]
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	f043 0204 	orr.w	r2, r3, #4
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	2201      	movs	r2, #1
 8017252:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	68fa      	ldr	r2, [r7, #12]
 8017258:	601a      	str	r2, [r3, #0]
}
 801725a:	bf00      	nop
 801725c:	3714      	adds	r7, #20
 801725e:	46bd      	mov	sp, r7
 8017260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017264:	4770      	bx	lr
 8017266:	bf00      	nop
 8017268:	40010000 	.word	0x40010000
 801726c:	40000400 	.word	0x40000400
 8017270:	40000800 	.word	0x40000800
 8017274:	40000c00 	.word	0x40000c00
 8017278:	40010400 	.word	0x40010400
 801727c:	40014000 	.word	0x40014000
 8017280:	40014400 	.word	0x40014400
 8017284:	40014800 	.word	0x40014800
 8017288:	4000e000 	.word	0x4000e000
 801728c:	4000e400 	.word	0x4000e400

08017290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017290:	b480      	push	{r7}
 8017292:	b087      	sub	sp, #28
 8017294:	af00      	add	r7, sp, #0
 8017296:	6078      	str	r0, [r7, #4]
 8017298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	6a1b      	ldr	r3, [r3, #32]
 801729e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	6a1b      	ldr	r3, [r3, #32]
 80172a4:	f023 0201 	bic.w	r2, r3, #1
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	685b      	ldr	r3, [r3, #4]
 80172b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	699b      	ldr	r3, [r3, #24]
 80172b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80172b8:	68fa      	ldr	r2, [r7, #12]
 80172ba:	4b37      	ldr	r3, [pc, #220]	@ (8017398 <TIM_OC1_SetConfig+0x108>)
 80172bc:	4013      	ands	r3, r2
 80172be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	f023 0303 	bic.w	r3, r3, #3
 80172c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80172c8:	683b      	ldr	r3, [r7, #0]
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	68fa      	ldr	r2, [r7, #12]
 80172ce:	4313      	orrs	r3, r2
 80172d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80172d2:	697b      	ldr	r3, [r7, #20]
 80172d4:	f023 0302 	bic.w	r3, r3, #2
 80172d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80172da:	683b      	ldr	r3, [r7, #0]
 80172dc:	689b      	ldr	r3, [r3, #8]
 80172de:	697a      	ldr	r2, [r7, #20]
 80172e0:	4313      	orrs	r3, r2
 80172e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	4a2d      	ldr	r2, [pc, #180]	@ (801739c <TIM_OC1_SetConfig+0x10c>)
 80172e8:	4293      	cmp	r3, r2
 80172ea:	d00f      	beq.n	801730c <TIM_OC1_SetConfig+0x7c>
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	4a2c      	ldr	r2, [pc, #176]	@ (80173a0 <TIM_OC1_SetConfig+0x110>)
 80172f0:	4293      	cmp	r3, r2
 80172f2:	d00b      	beq.n	801730c <TIM_OC1_SetConfig+0x7c>
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	4a2b      	ldr	r2, [pc, #172]	@ (80173a4 <TIM_OC1_SetConfig+0x114>)
 80172f8:	4293      	cmp	r3, r2
 80172fa:	d007      	beq.n	801730c <TIM_OC1_SetConfig+0x7c>
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	4a2a      	ldr	r2, [pc, #168]	@ (80173a8 <TIM_OC1_SetConfig+0x118>)
 8017300:	4293      	cmp	r3, r2
 8017302:	d003      	beq.n	801730c <TIM_OC1_SetConfig+0x7c>
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	4a29      	ldr	r2, [pc, #164]	@ (80173ac <TIM_OC1_SetConfig+0x11c>)
 8017308:	4293      	cmp	r3, r2
 801730a:	d10c      	bne.n	8017326 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801730c:	697b      	ldr	r3, [r7, #20]
 801730e:	f023 0308 	bic.w	r3, r3, #8
 8017312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8017314:	683b      	ldr	r3, [r7, #0]
 8017316:	68db      	ldr	r3, [r3, #12]
 8017318:	697a      	ldr	r2, [r7, #20]
 801731a:	4313      	orrs	r3, r2
 801731c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801731e:	697b      	ldr	r3, [r7, #20]
 8017320:	f023 0304 	bic.w	r3, r3, #4
 8017324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	4a1c      	ldr	r2, [pc, #112]	@ (801739c <TIM_OC1_SetConfig+0x10c>)
 801732a:	4293      	cmp	r3, r2
 801732c:	d00f      	beq.n	801734e <TIM_OC1_SetConfig+0xbe>
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	4a1b      	ldr	r2, [pc, #108]	@ (80173a0 <TIM_OC1_SetConfig+0x110>)
 8017332:	4293      	cmp	r3, r2
 8017334:	d00b      	beq.n	801734e <TIM_OC1_SetConfig+0xbe>
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	4a1a      	ldr	r2, [pc, #104]	@ (80173a4 <TIM_OC1_SetConfig+0x114>)
 801733a:	4293      	cmp	r3, r2
 801733c:	d007      	beq.n	801734e <TIM_OC1_SetConfig+0xbe>
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	4a19      	ldr	r2, [pc, #100]	@ (80173a8 <TIM_OC1_SetConfig+0x118>)
 8017342:	4293      	cmp	r3, r2
 8017344:	d003      	beq.n	801734e <TIM_OC1_SetConfig+0xbe>
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	4a18      	ldr	r2, [pc, #96]	@ (80173ac <TIM_OC1_SetConfig+0x11c>)
 801734a:	4293      	cmp	r3, r2
 801734c:	d111      	bne.n	8017372 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801734e:	693b      	ldr	r3, [r7, #16]
 8017350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8017356:	693b      	ldr	r3, [r7, #16]
 8017358:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801735c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801735e:	683b      	ldr	r3, [r7, #0]
 8017360:	695b      	ldr	r3, [r3, #20]
 8017362:	693a      	ldr	r2, [r7, #16]
 8017364:	4313      	orrs	r3, r2
 8017366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8017368:	683b      	ldr	r3, [r7, #0]
 801736a:	699b      	ldr	r3, [r3, #24]
 801736c:	693a      	ldr	r2, [r7, #16]
 801736e:	4313      	orrs	r3, r2
 8017370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	693a      	ldr	r2, [r7, #16]
 8017376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	68fa      	ldr	r2, [r7, #12]
 801737c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801737e:	683b      	ldr	r3, [r7, #0]
 8017380:	685a      	ldr	r2, [r3, #4]
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	697a      	ldr	r2, [r7, #20]
 801738a:	621a      	str	r2, [r3, #32]
}
 801738c:	bf00      	nop
 801738e:	371c      	adds	r7, #28
 8017390:	46bd      	mov	sp, r7
 8017392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017396:	4770      	bx	lr
 8017398:	fffeff8f 	.word	0xfffeff8f
 801739c:	40010000 	.word	0x40010000
 80173a0:	40010400 	.word	0x40010400
 80173a4:	40014000 	.word	0x40014000
 80173a8:	40014400 	.word	0x40014400
 80173ac:	40014800 	.word	0x40014800

080173b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80173b0:	b480      	push	{r7}
 80173b2:	b087      	sub	sp, #28
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
 80173b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	6a1b      	ldr	r3, [r3, #32]
 80173be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	6a1b      	ldr	r3, [r3, #32]
 80173c4:	f023 0210 	bic.w	r2, r3, #16
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	685b      	ldr	r3, [r3, #4]
 80173d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	699b      	ldr	r3, [r3, #24]
 80173d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80173d8:	68fa      	ldr	r2, [r7, #12]
 80173da:	4b34      	ldr	r3, [pc, #208]	@ (80174ac <TIM_OC2_SetConfig+0xfc>)
 80173dc:	4013      	ands	r3, r2
 80173de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80173e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80173e8:	683b      	ldr	r3, [r7, #0]
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	021b      	lsls	r3, r3, #8
 80173ee:	68fa      	ldr	r2, [r7, #12]
 80173f0:	4313      	orrs	r3, r2
 80173f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80173f4:	697b      	ldr	r3, [r7, #20]
 80173f6:	f023 0320 	bic.w	r3, r3, #32
 80173fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80173fc:	683b      	ldr	r3, [r7, #0]
 80173fe:	689b      	ldr	r3, [r3, #8]
 8017400:	011b      	lsls	r3, r3, #4
 8017402:	697a      	ldr	r2, [r7, #20]
 8017404:	4313      	orrs	r3, r2
 8017406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	4a29      	ldr	r2, [pc, #164]	@ (80174b0 <TIM_OC2_SetConfig+0x100>)
 801740c:	4293      	cmp	r3, r2
 801740e:	d003      	beq.n	8017418 <TIM_OC2_SetConfig+0x68>
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	4a28      	ldr	r2, [pc, #160]	@ (80174b4 <TIM_OC2_SetConfig+0x104>)
 8017414:	4293      	cmp	r3, r2
 8017416:	d10d      	bne.n	8017434 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8017418:	697b      	ldr	r3, [r7, #20]
 801741a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801741e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8017420:	683b      	ldr	r3, [r7, #0]
 8017422:	68db      	ldr	r3, [r3, #12]
 8017424:	011b      	lsls	r3, r3, #4
 8017426:	697a      	ldr	r2, [r7, #20]
 8017428:	4313      	orrs	r3, r2
 801742a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801742c:	697b      	ldr	r3, [r7, #20]
 801742e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017432:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	4a1e      	ldr	r2, [pc, #120]	@ (80174b0 <TIM_OC2_SetConfig+0x100>)
 8017438:	4293      	cmp	r3, r2
 801743a:	d00f      	beq.n	801745c <TIM_OC2_SetConfig+0xac>
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	4a1d      	ldr	r2, [pc, #116]	@ (80174b4 <TIM_OC2_SetConfig+0x104>)
 8017440:	4293      	cmp	r3, r2
 8017442:	d00b      	beq.n	801745c <TIM_OC2_SetConfig+0xac>
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	4a1c      	ldr	r2, [pc, #112]	@ (80174b8 <TIM_OC2_SetConfig+0x108>)
 8017448:	4293      	cmp	r3, r2
 801744a:	d007      	beq.n	801745c <TIM_OC2_SetConfig+0xac>
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	4a1b      	ldr	r2, [pc, #108]	@ (80174bc <TIM_OC2_SetConfig+0x10c>)
 8017450:	4293      	cmp	r3, r2
 8017452:	d003      	beq.n	801745c <TIM_OC2_SetConfig+0xac>
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	4a1a      	ldr	r2, [pc, #104]	@ (80174c0 <TIM_OC2_SetConfig+0x110>)
 8017458:	4293      	cmp	r3, r2
 801745a:	d113      	bne.n	8017484 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801745c:	693b      	ldr	r3, [r7, #16]
 801745e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8017462:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8017464:	693b      	ldr	r3, [r7, #16]
 8017466:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801746a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801746c:	683b      	ldr	r3, [r7, #0]
 801746e:	695b      	ldr	r3, [r3, #20]
 8017470:	009b      	lsls	r3, r3, #2
 8017472:	693a      	ldr	r2, [r7, #16]
 8017474:	4313      	orrs	r3, r2
 8017476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8017478:	683b      	ldr	r3, [r7, #0]
 801747a:	699b      	ldr	r3, [r3, #24]
 801747c:	009b      	lsls	r3, r3, #2
 801747e:	693a      	ldr	r2, [r7, #16]
 8017480:	4313      	orrs	r3, r2
 8017482:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	693a      	ldr	r2, [r7, #16]
 8017488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	68fa      	ldr	r2, [r7, #12]
 801748e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8017490:	683b      	ldr	r3, [r7, #0]
 8017492:	685a      	ldr	r2, [r3, #4]
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	697a      	ldr	r2, [r7, #20]
 801749c:	621a      	str	r2, [r3, #32]
}
 801749e:	bf00      	nop
 80174a0:	371c      	adds	r7, #28
 80174a2:	46bd      	mov	sp, r7
 80174a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a8:	4770      	bx	lr
 80174aa:	bf00      	nop
 80174ac:	feff8fff 	.word	0xfeff8fff
 80174b0:	40010000 	.word	0x40010000
 80174b4:	40010400 	.word	0x40010400
 80174b8:	40014000 	.word	0x40014000
 80174bc:	40014400 	.word	0x40014400
 80174c0:	40014800 	.word	0x40014800

080174c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80174c4:	b480      	push	{r7}
 80174c6:	b087      	sub	sp, #28
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]
 80174cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	6a1b      	ldr	r3, [r3, #32]
 80174d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	6a1b      	ldr	r3, [r3, #32]
 80174d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	685b      	ldr	r3, [r3, #4]
 80174e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	69db      	ldr	r3, [r3, #28]
 80174ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80174ec:	68fa      	ldr	r2, [r7, #12]
 80174ee:	4b33      	ldr	r3, [pc, #204]	@ (80175bc <TIM_OC3_SetConfig+0xf8>)
 80174f0:	4013      	ands	r3, r2
 80174f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	f023 0303 	bic.w	r3, r3, #3
 80174fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80174fc:	683b      	ldr	r3, [r7, #0]
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	68fa      	ldr	r2, [r7, #12]
 8017502:	4313      	orrs	r3, r2
 8017504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8017506:	697b      	ldr	r3, [r7, #20]
 8017508:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801750c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801750e:	683b      	ldr	r3, [r7, #0]
 8017510:	689b      	ldr	r3, [r3, #8]
 8017512:	021b      	lsls	r3, r3, #8
 8017514:	697a      	ldr	r2, [r7, #20]
 8017516:	4313      	orrs	r3, r2
 8017518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	4a28      	ldr	r2, [pc, #160]	@ (80175c0 <TIM_OC3_SetConfig+0xfc>)
 801751e:	4293      	cmp	r3, r2
 8017520:	d003      	beq.n	801752a <TIM_OC3_SetConfig+0x66>
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	4a27      	ldr	r2, [pc, #156]	@ (80175c4 <TIM_OC3_SetConfig+0x100>)
 8017526:	4293      	cmp	r3, r2
 8017528:	d10d      	bne.n	8017546 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801752a:	697b      	ldr	r3, [r7, #20]
 801752c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8017532:	683b      	ldr	r3, [r7, #0]
 8017534:	68db      	ldr	r3, [r3, #12]
 8017536:	021b      	lsls	r3, r3, #8
 8017538:	697a      	ldr	r2, [r7, #20]
 801753a:	4313      	orrs	r3, r2
 801753c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801753e:	697b      	ldr	r3, [r7, #20]
 8017540:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8017544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	4a1d      	ldr	r2, [pc, #116]	@ (80175c0 <TIM_OC3_SetConfig+0xfc>)
 801754a:	4293      	cmp	r3, r2
 801754c:	d00f      	beq.n	801756e <TIM_OC3_SetConfig+0xaa>
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	4a1c      	ldr	r2, [pc, #112]	@ (80175c4 <TIM_OC3_SetConfig+0x100>)
 8017552:	4293      	cmp	r3, r2
 8017554:	d00b      	beq.n	801756e <TIM_OC3_SetConfig+0xaa>
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	4a1b      	ldr	r2, [pc, #108]	@ (80175c8 <TIM_OC3_SetConfig+0x104>)
 801755a:	4293      	cmp	r3, r2
 801755c:	d007      	beq.n	801756e <TIM_OC3_SetConfig+0xaa>
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	4a1a      	ldr	r2, [pc, #104]	@ (80175cc <TIM_OC3_SetConfig+0x108>)
 8017562:	4293      	cmp	r3, r2
 8017564:	d003      	beq.n	801756e <TIM_OC3_SetConfig+0xaa>
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	4a19      	ldr	r2, [pc, #100]	@ (80175d0 <TIM_OC3_SetConfig+0x10c>)
 801756a:	4293      	cmp	r3, r2
 801756c:	d113      	bne.n	8017596 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801756e:	693b      	ldr	r3, [r7, #16]
 8017570:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8017576:	693b      	ldr	r3, [r7, #16]
 8017578:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801757c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801757e:	683b      	ldr	r3, [r7, #0]
 8017580:	695b      	ldr	r3, [r3, #20]
 8017582:	011b      	lsls	r3, r3, #4
 8017584:	693a      	ldr	r2, [r7, #16]
 8017586:	4313      	orrs	r3, r2
 8017588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801758a:	683b      	ldr	r3, [r7, #0]
 801758c:	699b      	ldr	r3, [r3, #24]
 801758e:	011b      	lsls	r3, r3, #4
 8017590:	693a      	ldr	r2, [r7, #16]
 8017592:	4313      	orrs	r3, r2
 8017594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	693a      	ldr	r2, [r7, #16]
 801759a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	68fa      	ldr	r2, [r7, #12]
 80175a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80175a2:	683b      	ldr	r3, [r7, #0]
 80175a4:	685a      	ldr	r2, [r3, #4]
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	697a      	ldr	r2, [r7, #20]
 80175ae:	621a      	str	r2, [r3, #32]
}
 80175b0:	bf00      	nop
 80175b2:	371c      	adds	r7, #28
 80175b4:	46bd      	mov	sp, r7
 80175b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ba:	4770      	bx	lr
 80175bc:	fffeff8f 	.word	0xfffeff8f
 80175c0:	40010000 	.word	0x40010000
 80175c4:	40010400 	.word	0x40010400
 80175c8:	40014000 	.word	0x40014000
 80175cc:	40014400 	.word	0x40014400
 80175d0:	40014800 	.word	0x40014800

080175d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80175d4:	b480      	push	{r7}
 80175d6:	b087      	sub	sp, #28
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
 80175dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	6a1b      	ldr	r3, [r3, #32]
 80175e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	6a1b      	ldr	r3, [r3, #32]
 80175e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	685b      	ldr	r3, [r3, #4]
 80175f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	69db      	ldr	r3, [r3, #28]
 80175fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80175fc:	68fa      	ldr	r2, [r7, #12]
 80175fe:	4b24      	ldr	r3, [pc, #144]	@ (8017690 <TIM_OC4_SetConfig+0xbc>)
 8017600:	4013      	ands	r3, r2
 8017602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801760a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801760c:	683b      	ldr	r3, [r7, #0]
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	021b      	lsls	r3, r3, #8
 8017612:	68fa      	ldr	r2, [r7, #12]
 8017614:	4313      	orrs	r3, r2
 8017616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017618:	693b      	ldr	r3, [r7, #16]
 801761a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801761e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017620:	683b      	ldr	r3, [r7, #0]
 8017622:	689b      	ldr	r3, [r3, #8]
 8017624:	031b      	lsls	r3, r3, #12
 8017626:	693a      	ldr	r2, [r7, #16]
 8017628:	4313      	orrs	r3, r2
 801762a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	4a19      	ldr	r2, [pc, #100]	@ (8017694 <TIM_OC4_SetConfig+0xc0>)
 8017630:	4293      	cmp	r3, r2
 8017632:	d00f      	beq.n	8017654 <TIM_OC4_SetConfig+0x80>
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	4a18      	ldr	r2, [pc, #96]	@ (8017698 <TIM_OC4_SetConfig+0xc4>)
 8017638:	4293      	cmp	r3, r2
 801763a:	d00b      	beq.n	8017654 <TIM_OC4_SetConfig+0x80>
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	4a17      	ldr	r2, [pc, #92]	@ (801769c <TIM_OC4_SetConfig+0xc8>)
 8017640:	4293      	cmp	r3, r2
 8017642:	d007      	beq.n	8017654 <TIM_OC4_SetConfig+0x80>
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	4a16      	ldr	r2, [pc, #88]	@ (80176a0 <TIM_OC4_SetConfig+0xcc>)
 8017648:	4293      	cmp	r3, r2
 801764a:	d003      	beq.n	8017654 <TIM_OC4_SetConfig+0x80>
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	4a15      	ldr	r2, [pc, #84]	@ (80176a4 <TIM_OC4_SetConfig+0xd0>)
 8017650:	4293      	cmp	r3, r2
 8017652:	d109      	bne.n	8017668 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8017654:	697b      	ldr	r3, [r7, #20]
 8017656:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801765a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801765c:	683b      	ldr	r3, [r7, #0]
 801765e:	695b      	ldr	r3, [r3, #20]
 8017660:	019b      	lsls	r3, r3, #6
 8017662:	697a      	ldr	r2, [r7, #20]
 8017664:	4313      	orrs	r3, r2
 8017666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	697a      	ldr	r2, [r7, #20]
 801766c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	68fa      	ldr	r2, [r7, #12]
 8017672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8017674:	683b      	ldr	r3, [r7, #0]
 8017676:	685a      	ldr	r2, [r3, #4]
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	693a      	ldr	r2, [r7, #16]
 8017680:	621a      	str	r2, [r3, #32]
}
 8017682:	bf00      	nop
 8017684:	371c      	adds	r7, #28
 8017686:	46bd      	mov	sp, r7
 8017688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801768c:	4770      	bx	lr
 801768e:	bf00      	nop
 8017690:	feff8fff 	.word	0xfeff8fff
 8017694:	40010000 	.word	0x40010000
 8017698:	40010400 	.word	0x40010400
 801769c:	40014000 	.word	0x40014000
 80176a0:	40014400 	.word	0x40014400
 80176a4:	40014800 	.word	0x40014800

080176a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80176a8:	b480      	push	{r7}
 80176aa:	b087      	sub	sp, #28
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
 80176b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	6a1b      	ldr	r3, [r3, #32]
 80176b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	6a1b      	ldr	r3, [r3, #32]
 80176bc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	685b      	ldr	r3, [r3, #4]
 80176c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80176ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80176d0:	68fa      	ldr	r2, [r7, #12]
 80176d2:	4b21      	ldr	r3, [pc, #132]	@ (8017758 <TIM_OC5_SetConfig+0xb0>)
 80176d4:	4013      	ands	r3, r2
 80176d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80176d8:	683b      	ldr	r3, [r7, #0]
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	68fa      	ldr	r2, [r7, #12]
 80176de:	4313      	orrs	r3, r2
 80176e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80176e2:	693b      	ldr	r3, [r7, #16]
 80176e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80176e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80176ea:	683b      	ldr	r3, [r7, #0]
 80176ec:	689b      	ldr	r3, [r3, #8]
 80176ee:	041b      	lsls	r3, r3, #16
 80176f0:	693a      	ldr	r2, [r7, #16]
 80176f2:	4313      	orrs	r3, r2
 80176f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	4a18      	ldr	r2, [pc, #96]	@ (801775c <TIM_OC5_SetConfig+0xb4>)
 80176fa:	4293      	cmp	r3, r2
 80176fc:	d00f      	beq.n	801771e <TIM_OC5_SetConfig+0x76>
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	4a17      	ldr	r2, [pc, #92]	@ (8017760 <TIM_OC5_SetConfig+0xb8>)
 8017702:	4293      	cmp	r3, r2
 8017704:	d00b      	beq.n	801771e <TIM_OC5_SetConfig+0x76>
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	4a16      	ldr	r2, [pc, #88]	@ (8017764 <TIM_OC5_SetConfig+0xbc>)
 801770a:	4293      	cmp	r3, r2
 801770c:	d007      	beq.n	801771e <TIM_OC5_SetConfig+0x76>
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	4a15      	ldr	r2, [pc, #84]	@ (8017768 <TIM_OC5_SetConfig+0xc0>)
 8017712:	4293      	cmp	r3, r2
 8017714:	d003      	beq.n	801771e <TIM_OC5_SetConfig+0x76>
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	4a14      	ldr	r2, [pc, #80]	@ (801776c <TIM_OC5_SetConfig+0xc4>)
 801771a:	4293      	cmp	r3, r2
 801771c:	d109      	bne.n	8017732 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801771e:	697b      	ldr	r3, [r7, #20]
 8017720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8017724:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8017726:	683b      	ldr	r3, [r7, #0]
 8017728:	695b      	ldr	r3, [r3, #20]
 801772a:	021b      	lsls	r3, r3, #8
 801772c:	697a      	ldr	r2, [r7, #20]
 801772e:	4313      	orrs	r3, r2
 8017730:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	697a      	ldr	r2, [r7, #20]
 8017736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	68fa      	ldr	r2, [r7, #12]
 801773c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801773e:	683b      	ldr	r3, [r7, #0]
 8017740:	685a      	ldr	r2, [r3, #4]
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	693a      	ldr	r2, [r7, #16]
 801774a:	621a      	str	r2, [r3, #32]
}
 801774c:	bf00      	nop
 801774e:	371c      	adds	r7, #28
 8017750:	46bd      	mov	sp, r7
 8017752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017756:	4770      	bx	lr
 8017758:	fffeff8f 	.word	0xfffeff8f
 801775c:	40010000 	.word	0x40010000
 8017760:	40010400 	.word	0x40010400
 8017764:	40014000 	.word	0x40014000
 8017768:	40014400 	.word	0x40014400
 801776c:	40014800 	.word	0x40014800

08017770 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017770:	b480      	push	{r7}
 8017772:	b087      	sub	sp, #28
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
 8017778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	6a1b      	ldr	r3, [r3, #32]
 801777e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	6a1b      	ldr	r3, [r3, #32]
 8017784:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	685b      	ldr	r3, [r3, #4]
 8017790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8017798:	68fa      	ldr	r2, [r7, #12]
 801779a:	4b22      	ldr	r3, [pc, #136]	@ (8017824 <TIM_OC6_SetConfig+0xb4>)
 801779c:	4013      	ands	r3, r2
 801779e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80177a0:	683b      	ldr	r3, [r7, #0]
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	021b      	lsls	r3, r3, #8
 80177a6:	68fa      	ldr	r2, [r7, #12]
 80177a8:	4313      	orrs	r3, r2
 80177aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80177ac:	693b      	ldr	r3, [r7, #16]
 80177ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80177b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80177b4:	683b      	ldr	r3, [r7, #0]
 80177b6:	689b      	ldr	r3, [r3, #8]
 80177b8:	051b      	lsls	r3, r3, #20
 80177ba:	693a      	ldr	r2, [r7, #16]
 80177bc:	4313      	orrs	r3, r2
 80177be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	4a19      	ldr	r2, [pc, #100]	@ (8017828 <TIM_OC6_SetConfig+0xb8>)
 80177c4:	4293      	cmp	r3, r2
 80177c6:	d00f      	beq.n	80177e8 <TIM_OC6_SetConfig+0x78>
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	4a18      	ldr	r2, [pc, #96]	@ (801782c <TIM_OC6_SetConfig+0xbc>)
 80177cc:	4293      	cmp	r3, r2
 80177ce:	d00b      	beq.n	80177e8 <TIM_OC6_SetConfig+0x78>
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	4a17      	ldr	r2, [pc, #92]	@ (8017830 <TIM_OC6_SetConfig+0xc0>)
 80177d4:	4293      	cmp	r3, r2
 80177d6:	d007      	beq.n	80177e8 <TIM_OC6_SetConfig+0x78>
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	4a16      	ldr	r2, [pc, #88]	@ (8017834 <TIM_OC6_SetConfig+0xc4>)
 80177dc:	4293      	cmp	r3, r2
 80177de:	d003      	beq.n	80177e8 <TIM_OC6_SetConfig+0x78>
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	4a15      	ldr	r2, [pc, #84]	@ (8017838 <TIM_OC6_SetConfig+0xc8>)
 80177e4:	4293      	cmp	r3, r2
 80177e6:	d109      	bne.n	80177fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80177e8:	697b      	ldr	r3, [r7, #20]
 80177ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80177ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80177f0:	683b      	ldr	r3, [r7, #0]
 80177f2:	695b      	ldr	r3, [r3, #20]
 80177f4:	029b      	lsls	r3, r3, #10
 80177f6:	697a      	ldr	r2, [r7, #20]
 80177f8:	4313      	orrs	r3, r2
 80177fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	697a      	ldr	r2, [r7, #20]
 8017800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	68fa      	ldr	r2, [r7, #12]
 8017806:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8017808:	683b      	ldr	r3, [r7, #0]
 801780a:	685a      	ldr	r2, [r3, #4]
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	693a      	ldr	r2, [r7, #16]
 8017814:	621a      	str	r2, [r3, #32]
}
 8017816:	bf00      	nop
 8017818:	371c      	adds	r7, #28
 801781a:	46bd      	mov	sp, r7
 801781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017820:	4770      	bx	lr
 8017822:	bf00      	nop
 8017824:	feff8fff 	.word	0xfeff8fff
 8017828:	40010000 	.word	0x40010000
 801782c:	40010400 	.word	0x40010400
 8017830:	40014000 	.word	0x40014000
 8017834:	40014400 	.word	0x40014400
 8017838:	40014800 	.word	0x40014800

0801783c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801783c:	b480      	push	{r7}
 801783e:	b087      	sub	sp, #28
 8017840:	af00      	add	r7, sp, #0
 8017842:	60f8      	str	r0, [r7, #12]
 8017844:	60b9      	str	r1, [r7, #8]
 8017846:	607a      	str	r2, [r7, #4]
 8017848:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	6a1b      	ldr	r3, [r3, #32]
 801784e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	6a1b      	ldr	r3, [r3, #32]
 8017854:	f023 0201 	bic.w	r2, r3, #1
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	699b      	ldr	r3, [r3, #24]
 8017860:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	4a2c      	ldr	r2, [pc, #176]	@ (8017918 <TIM_TI1_SetConfig+0xdc>)
 8017866:	4293      	cmp	r3, r2
 8017868:	d023      	beq.n	80178b2 <TIM_TI1_SetConfig+0x76>
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017870:	d01f      	beq.n	80178b2 <TIM_TI1_SetConfig+0x76>
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	4a29      	ldr	r2, [pc, #164]	@ (801791c <TIM_TI1_SetConfig+0xe0>)
 8017876:	4293      	cmp	r3, r2
 8017878:	d01b      	beq.n	80178b2 <TIM_TI1_SetConfig+0x76>
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	4a28      	ldr	r2, [pc, #160]	@ (8017920 <TIM_TI1_SetConfig+0xe4>)
 801787e:	4293      	cmp	r3, r2
 8017880:	d017      	beq.n	80178b2 <TIM_TI1_SetConfig+0x76>
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	4a27      	ldr	r2, [pc, #156]	@ (8017924 <TIM_TI1_SetConfig+0xe8>)
 8017886:	4293      	cmp	r3, r2
 8017888:	d013      	beq.n	80178b2 <TIM_TI1_SetConfig+0x76>
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	4a26      	ldr	r2, [pc, #152]	@ (8017928 <TIM_TI1_SetConfig+0xec>)
 801788e:	4293      	cmp	r3, r2
 8017890:	d00f      	beq.n	80178b2 <TIM_TI1_SetConfig+0x76>
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	4a25      	ldr	r2, [pc, #148]	@ (801792c <TIM_TI1_SetConfig+0xf0>)
 8017896:	4293      	cmp	r3, r2
 8017898:	d00b      	beq.n	80178b2 <TIM_TI1_SetConfig+0x76>
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	4a24      	ldr	r2, [pc, #144]	@ (8017930 <TIM_TI1_SetConfig+0xf4>)
 801789e:	4293      	cmp	r3, r2
 80178a0:	d007      	beq.n	80178b2 <TIM_TI1_SetConfig+0x76>
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	4a23      	ldr	r2, [pc, #140]	@ (8017934 <TIM_TI1_SetConfig+0xf8>)
 80178a6:	4293      	cmp	r3, r2
 80178a8:	d003      	beq.n	80178b2 <TIM_TI1_SetConfig+0x76>
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	4a22      	ldr	r2, [pc, #136]	@ (8017938 <TIM_TI1_SetConfig+0xfc>)
 80178ae:	4293      	cmp	r3, r2
 80178b0:	d101      	bne.n	80178b6 <TIM_TI1_SetConfig+0x7a>
 80178b2:	2301      	movs	r3, #1
 80178b4:	e000      	b.n	80178b8 <TIM_TI1_SetConfig+0x7c>
 80178b6:	2300      	movs	r3, #0
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d008      	beq.n	80178ce <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80178bc:	697b      	ldr	r3, [r7, #20]
 80178be:	f023 0303 	bic.w	r3, r3, #3
 80178c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80178c4:	697a      	ldr	r2, [r7, #20]
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	4313      	orrs	r3, r2
 80178ca:	617b      	str	r3, [r7, #20]
 80178cc:	e003      	b.n	80178d6 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80178ce:	697b      	ldr	r3, [r7, #20]
 80178d0:	f043 0301 	orr.w	r3, r3, #1
 80178d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80178d6:	697b      	ldr	r3, [r7, #20]
 80178d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80178dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80178de:	683b      	ldr	r3, [r7, #0]
 80178e0:	011b      	lsls	r3, r3, #4
 80178e2:	b2db      	uxtb	r3, r3
 80178e4:	697a      	ldr	r2, [r7, #20]
 80178e6:	4313      	orrs	r3, r2
 80178e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80178ea:	693b      	ldr	r3, [r7, #16]
 80178ec:	f023 030a 	bic.w	r3, r3, #10
 80178f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80178f2:	68bb      	ldr	r3, [r7, #8]
 80178f4:	f003 030a 	and.w	r3, r3, #10
 80178f8:	693a      	ldr	r2, [r7, #16]
 80178fa:	4313      	orrs	r3, r2
 80178fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	697a      	ldr	r2, [r7, #20]
 8017902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	693a      	ldr	r2, [r7, #16]
 8017908:	621a      	str	r2, [r3, #32]
}
 801790a:	bf00      	nop
 801790c:	371c      	adds	r7, #28
 801790e:	46bd      	mov	sp, r7
 8017910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017914:	4770      	bx	lr
 8017916:	bf00      	nop
 8017918:	40010000 	.word	0x40010000
 801791c:	40000400 	.word	0x40000400
 8017920:	40000800 	.word	0x40000800
 8017924:	40000c00 	.word	0x40000c00
 8017928:	40010400 	.word	0x40010400
 801792c:	40001800 	.word	0x40001800
 8017930:	40014000 	.word	0x40014000
 8017934:	4000e000 	.word	0x4000e000
 8017938:	4000e400 	.word	0x4000e400

0801793c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801793c:	b480      	push	{r7}
 801793e:	b087      	sub	sp, #28
 8017940:	af00      	add	r7, sp, #0
 8017942:	60f8      	str	r0, [r7, #12]
 8017944:	60b9      	str	r1, [r7, #8]
 8017946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	6a1b      	ldr	r3, [r3, #32]
 801794c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	6a1b      	ldr	r3, [r3, #32]
 8017952:	f023 0201 	bic.w	r2, r3, #1
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	699b      	ldr	r3, [r3, #24]
 801795e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017960:	693b      	ldr	r3, [r7, #16]
 8017962:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	011b      	lsls	r3, r3, #4
 801796c:	693a      	ldr	r2, [r7, #16]
 801796e:	4313      	orrs	r3, r2
 8017970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8017972:	697b      	ldr	r3, [r7, #20]
 8017974:	f023 030a 	bic.w	r3, r3, #10
 8017978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801797a:	697a      	ldr	r2, [r7, #20]
 801797c:	68bb      	ldr	r3, [r7, #8]
 801797e:	4313      	orrs	r3, r2
 8017980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	693a      	ldr	r2, [r7, #16]
 8017986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	697a      	ldr	r2, [r7, #20]
 801798c:	621a      	str	r2, [r3, #32]
}
 801798e:	bf00      	nop
 8017990:	371c      	adds	r7, #28
 8017992:	46bd      	mov	sp, r7
 8017994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017998:	4770      	bx	lr

0801799a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801799a:	b480      	push	{r7}
 801799c:	b087      	sub	sp, #28
 801799e:	af00      	add	r7, sp, #0
 80179a0:	60f8      	str	r0, [r7, #12]
 80179a2:	60b9      	str	r1, [r7, #8]
 80179a4:	607a      	str	r2, [r7, #4]
 80179a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	6a1b      	ldr	r3, [r3, #32]
 80179ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	6a1b      	ldr	r3, [r3, #32]
 80179b2:	f023 0210 	bic.w	r2, r3, #16
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	699b      	ldr	r3, [r3, #24]
 80179be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80179c0:	693b      	ldr	r3, [r7, #16]
 80179c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80179c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	021b      	lsls	r3, r3, #8
 80179cc:	693a      	ldr	r2, [r7, #16]
 80179ce:	4313      	orrs	r3, r2
 80179d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80179d2:	693b      	ldr	r3, [r7, #16]
 80179d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80179d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80179da:	683b      	ldr	r3, [r7, #0]
 80179dc:	031b      	lsls	r3, r3, #12
 80179de:	b29b      	uxth	r3, r3
 80179e0:	693a      	ldr	r2, [r7, #16]
 80179e2:	4313      	orrs	r3, r2
 80179e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80179e6:	697b      	ldr	r3, [r7, #20]
 80179e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80179ec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80179ee:	68bb      	ldr	r3, [r7, #8]
 80179f0:	011b      	lsls	r3, r3, #4
 80179f2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80179f6:	697a      	ldr	r2, [r7, #20]
 80179f8:	4313      	orrs	r3, r2
 80179fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	693a      	ldr	r2, [r7, #16]
 8017a00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	697a      	ldr	r2, [r7, #20]
 8017a06:	621a      	str	r2, [r3, #32]
}
 8017a08:	bf00      	nop
 8017a0a:	371c      	adds	r7, #28
 8017a0c:	46bd      	mov	sp, r7
 8017a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a12:	4770      	bx	lr

08017a14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017a14:	b480      	push	{r7}
 8017a16:	b087      	sub	sp, #28
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	60f8      	str	r0, [r7, #12]
 8017a1c:	60b9      	str	r1, [r7, #8]
 8017a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	6a1b      	ldr	r3, [r3, #32]
 8017a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	6a1b      	ldr	r3, [r3, #32]
 8017a2a:	f023 0210 	bic.w	r2, r3, #16
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	699b      	ldr	r3, [r3, #24]
 8017a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017a38:	693b      	ldr	r3, [r7, #16]
 8017a3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	031b      	lsls	r3, r3, #12
 8017a44:	693a      	ldr	r2, [r7, #16]
 8017a46:	4313      	orrs	r3, r2
 8017a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017a4a:	697b      	ldr	r3, [r7, #20]
 8017a4c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017a50:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8017a52:	68bb      	ldr	r3, [r7, #8]
 8017a54:	011b      	lsls	r3, r3, #4
 8017a56:	697a      	ldr	r2, [r7, #20]
 8017a58:	4313      	orrs	r3, r2
 8017a5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	693a      	ldr	r2, [r7, #16]
 8017a60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	697a      	ldr	r2, [r7, #20]
 8017a66:	621a      	str	r2, [r3, #32]
}
 8017a68:	bf00      	nop
 8017a6a:	371c      	adds	r7, #28
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a72:	4770      	bx	lr

08017a74 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017a74:	b480      	push	{r7}
 8017a76:	b087      	sub	sp, #28
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	60f8      	str	r0, [r7, #12]
 8017a7c:	60b9      	str	r1, [r7, #8]
 8017a7e:	607a      	str	r2, [r7, #4]
 8017a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	6a1b      	ldr	r3, [r3, #32]
 8017a86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	6a1b      	ldr	r3, [r3, #32]
 8017a8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	69db      	ldr	r3, [r3, #28]
 8017a98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8017a9a:	693b      	ldr	r3, [r7, #16]
 8017a9c:	f023 0303 	bic.w	r3, r3, #3
 8017aa0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8017aa2:	693a      	ldr	r2, [r7, #16]
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	4313      	orrs	r3, r2
 8017aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8017aaa:	693b      	ldr	r3, [r7, #16]
 8017aac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017ab0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8017ab2:	683b      	ldr	r3, [r7, #0]
 8017ab4:	011b      	lsls	r3, r3, #4
 8017ab6:	b2db      	uxtb	r3, r3
 8017ab8:	693a      	ldr	r2, [r7, #16]
 8017aba:	4313      	orrs	r3, r2
 8017abc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8017abe:	697b      	ldr	r3, [r7, #20]
 8017ac0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8017ac4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8017ac6:	68bb      	ldr	r3, [r7, #8]
 8017ac8:	021b      	lsls	r3, r3, #8
 8017aca:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8017ace:	697a      	ldr	r2, [r7, #20]
 8017ad0:	4313      	orrs	r3, r2
 8017ad2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	693a      	ldr	r2, [r7, #16]
 8017ad8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	697a      	ldr	r2, [r7, #20]
 8017ade:	621a      	str	r2, [r3, #32]
}
 8017ae0:	bf00      	nop
 8017ae2:	371c      	adds	r7, #28
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aea:	4770      	bx	lr

08017aec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017aec:	b480      	push	{r7}
 8017aee:	b087      	sub	sp, #28
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	60f8      	str	r0, [r7, #12]
 8017af4:	60b9      	str	r1, [r7, #8]
 8017af6:	607a      	str	r2, [r7, #4]
 8017af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	6a1b      	ldr	r3, [r3, #32]
 8017afe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	6a1b      	ldr	r3, [r3, #32]
 8017b04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	69db      	ldr	r3, [r3, #28]
 8017b10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8017b12:	693b      	ldr	r3, [r7, #16]
 8017b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017b18:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	021b      	lsls	r3, r3, #8
 8017b1e:	693a      	ldr	r2, [r7, #16]
 8017b20:	4313      	orrs	r3, r2
 8017b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8017b24:	693b      	ldr	r3, [r7, #16]
 8017b26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017b2a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8017b2c:	683b      	ldr	r3, [r7, #0]
 8017b2e:	031b      	lsls	r3, r3, #12
 8017b30:	b29b      	uxth	r3, r3
 8017b32:	693a      	ldr	r2, [r7, #16]
 8017b34:	4313      	orrs	r3, r2
 8017b36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8017b38:	697b      	ldr	r3, [r7, #20]
 8017b3a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8017b3e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8017b40:	68bb      	ldr	r3, [r7, #8]
 8017b42:	031b      	lsls	r3, r3, #12
 8017b44:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8017b48:	697a      	ldr	r2, [r7, #20]
 8017b4a:	4313      	orrs	r3, r2
 8017b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	693a      	ldr	r2, [r7, #16]
 8017b52:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	697a      	ldr	r2, [r7, #20]
 8017b58:	621a      	str	r2, [r3, #32]
}
 8017b5a:	bf00      	nop
 8017b5c:	371c      	adds	r7, #28
 8017b5e:	46bd      	mov	sp, r7
 8017b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b64:	4770      	bx	lr
	...

08017b68 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017b68:	b480      	push	{r7}
 8017b6a:	b085      	sub	sp, #20
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	6078      	str	r0, [r7, #4]
 8017b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	689b      	ldr	r3, [r3, #8]
 8017b76:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017b78:	68fa      	ldr	r2, [r7, #12]
 8017b7a:	4b09      	ldr	r3, [pc, #36]	@ (8017ba0 <TIM_ITRx_SetConfig+0x38>)
 8017b7c:	4013      	ands	r3, r2
 8017b7e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017b80:	683a      	ldr	r2, [r7, #0]
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	4313      	orrs	r3, r2
 8017b86:	f043 0307 	orr.w	r3, r3, #7
 8017b8a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	68fa      	ldr	r2, [r7, #12]
 8017b90:	609a      	str	r2, [r3, #8]
}
 8017b92:	bf00      	nop
 8017b94:	3714      	adds	r7, #20
 8017b96:	46bd      	mov	sp, r7
 8017b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b9c:	4770      	bx	lr
 8017b9e:	bf00      	nop
 8017ba0:	ffcfff8f 	.word	0xffcfff8f

08017ba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017ba4:	b480      	push	{r7}
 8017ba6:	b087      	sub	sp, #28
 8017ba8:	af00      	add	r7, sp, #0
 8017baa:	60f8      	str	r0, [r7, #12]
 8017bac:	60b9      	str	r1, [r7, #8]
 8017bae:	607a      	str	r2, [r7, #4]
 8017bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	689b      	ldr	r3, [r3, #8]
 8017bb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017bb8:	697b      	ldr	r3, [r7, #20]
 8017bba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017bbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017bc0:	683b      	ldr	r3, [r7, #0]
 8017bc2:	021a      	lsls	r2, r3, #8
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	431a      	orrs	r2, r3
 8017bc8:	68bb      	ldr	r3, [r7, #8]
 8017bca:	4313      	orrs	r3, r2
 8017bcc:	697a      	ldr	r2, [r7, #20]
 8017bce:	4313      	orrs	r3, r2
 8017bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017bd2:	68fb      	ldr	r3, [r7, #12]
 8017bd4:	697a      	ldr	r2, [r7, #20]
 8017bd6:	609a      	str	r2, [r3, #8]
}
 8017bd8:	bf00      	nop
 8017bda:	371c      	adds	r7, #28
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be2:	4770      	bx	lr

08017be4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8017be4:	b480      	push	{r7}
 8017be6:	b087      	sub	sp, #28
 8017be8:	af00      	add	r7, sp, #0
 8017bea:	60f8      	str	r0, [r7, #12]
 8017bec:	60b9      	str	r1, [r7, #8]
 8017bee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017bf0:	68bb      	ldr	r3, [r7, #8]
 8017bf2:	f003 031f 	and.w	r3, r3, #31
 8017bf6:	2201      	movs	r2, #1
 8017bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8017bfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	6a1a      	ldr	r2, [r3, #32]
 8017c02:	697b      	ldr	r3, [r7, #20]
 8017c04:	43db      	mvns	r3, r3
 8017c06:	401a      	ands	r2, r3
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	6a1a      	ldr	r2, [r3, #32]
 8017c10:	68bb      	ldr	r3, [r7, #8]
 8017c12:	f003 031f 	and.w	r3, r3, #31
 8017c16:	6879      	ldr	r1, [r7, #4]
 8017c18:	fa01 f303 	lsl.w	r3, r1, r3
 8017c1c:	431a      	orrs	r2, r3
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	621a      	str	r2, [r3, #32]
}
 8017c22:	bf00      	nop
 8017c24:	371c      	adds	r7, #28
 8017c26:	46bd      	mov	sp, r7
 8017c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c2c:	4770      	bx	lr
	...

08017c30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017c30:	b480      	push	{r7}
 8017c32:	b085      	sub	sp, #20
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	6078      	str	r0, [r7, #4]
 8017c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017c40:	2b01      	cmp	r3, #1
 8017c42:	d101      	bne.n	8017c48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017c44:	2302      	movs	r3, #2
 8017c46:	e077      	b.n	8017d38 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	2201      	movs	r2, #1
 8017c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	2202      	movs	r2, #2
 8017c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	685b      	ldr	r3, [r3, #4]
 8017c5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	689b      	ldr	r3, [r3, #8]
 8017c66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	4a35      	ldr	r2, [pc, #212]	@ (8017d44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017c6e:	4293      	cmp	r3, r2
 8017c70:	d004      	beq.n	8017c7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	4a34      	ldr	r2, [pc, #208]	@ (8017d48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017c78:	4293      	cmp	r3, r2
 8017c7a:	d108      	bne.n	8017c8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8017c82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8017c84:	683b      	ldr	r3, [r7, #0]
 8017c86:	685b      	ldr	r3, [r3, #4]
 8017c88:	68fa      	ldr	r2, [r7, #12]
 8017c8a:	4313      	orrs	r3, r2
 8017c8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017c94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017c96:	683b      	ldr	r3, [r7, #0]
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	68fa      	ldr	r2, [r7, #12]
 8017c9c:	4313      	orrs	r3, r2
 8017c9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	68fa      	ldr	r2, [r7, #12]
 8017ca6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	4a25      	ldr	r2, [pc, #148]	@ (8017d44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017cae:	4293      	cmp	r3, r2
 8017cb0:	d02c      	beq.n	8017d0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017cba:	d027      	beq.n	8017d0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	4a22      	ldr	r2, [pc, #136]	@ (8017d4c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8017cc2:	4293      	cmp	r3, r2
 8017cc4:	d022      	beq.n	8017d0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	4a21      	ldr	r2, [pc, #132]	@ (8017d50 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8017ccc:	4293      	cmp	r3, r2
 8017cce:	d01d      	beq.n	8017d0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8017d54 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8017cd6:	4293      	cmp	r3, r2
 8017cd8:	d018      	beq.n	8017d0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	4a1a      	ldr	r2, [pc, #104]	@ (8017d48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017ce0:	4293      	cmp	r3, r2
 8017ce2:	d013      	beq.n	8017d0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8017d58 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8017cea:	4293      	cmp	r3, r2
 8017cec:	d00e      	beq.n	8017d0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8017d5c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8017cf4:	4293      	cmp	r3, r2
 8017cf6:	d009      	beq.n	8017d0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	4a18      	ldr	r2, [pc, #96]	@ (8017d60 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8017cfe:	4293      	cmp	r3, r2
 8017d00:	d004      	beq.n	8017d0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	4a17      	ldr	r2, [pc, #92]	@ (8017d64 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8017d08:	4293      	cmp	r3, r2
 8017d0a:	d10c      	bne.n	8017d26 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017d0c:	68bb      	ldr	r3, [r7, #8]
 8017d0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017d12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017d14:	683b      	ldr	r3, [r7, #0]
 8017d16:	689b      	ldr	r3, [r3, #8]
 8017d18:	68ba      	ldr	r2, [r7, #8]
 8017d1a:	4313      	orrs	r3, r2
 8017d1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	68ba      	ldr	r2, [r7, #8]
 8017d24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	2201      	movs	r2, #1
 8017d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	2200      	movs	r2, #0
 8017d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017d36:	2300      	movs	r3, #0
}
 8017d38:	4618      	mov	r0, r3
 8017d3a:	3714      	adds	r7, #20
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d42:	4770      	bx	lr
 8017d44:	40010000 	.word	0x40010000
 8017d48:	40010400 	.word	0x40010400
 8017d4c:	40000400 	.word	0x40000400
 8017d50:	40000800 	.word	0x40000800
 8017d54:	40000c00 	.word	0x40000c00
 8017d58:	40001800 	.word	0x40001800
 8017d5c:	40014000 	.word	0x40014000
 8017d60:	4000e000 	.word	0x4000e000
 8017d64:	4000e400 	.word	0x4000e400

08017d68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017d68:	b480      	push	{r7}
 8017d6a:	b085      	sub	sp, #20
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	6078      	str	r0, [r7, #4]
 8017d70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8017d72:	2300      	movs	r3, #0
 8017d74:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017d7c:	2b01      	cmp	r3, #1
 8017d7e:	d101      	bne.n	8017d84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017d80:	2302      	movs	r3, #2
 8017d82:	e073      	b.n	8017e6c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	2201      	movs	r2, #1
 8017d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8017d92:	683b      	ldr	r3, [r7, #0]
 8017d94:	68db      	ldr	r3, [r3, #12]
 8017d96:	4313      	orrs	r3, r2
 8017d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017da0:	683b      	ldr	r3, [r7, #0]
 8017da2:	689b      	ldr	r3, [r3, #8]
 8017da4:	4313      	orrs	r3, r2
 8017da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8017dae:	683b      	ldr	r3, [r7, #0]
 8017db0:	685b      	ldr	r3, [r3, #4]
 8017db2:	4313      	orrs	r3, r2
 8017db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8017dbc:	683b      	ldr	r3, [r7, #0]
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	4313      	orrs	r3, r2
 8017dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017dca:	683b      	ldr	r3, [r7, #0]
 8017dcc:	691b      	ldr	r3, [r3, #16]
 8017dce:	4313      	orrs	r3, r2
 8017dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8017dd8:	683b      	ldr	r3, [r7, #0]
 8017dda:	695b      	ldr	r3, [r3, #20]
 8017ddc:	4313      	orrs	r3, r2
 8017dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8017de6:	683b      	ldr	r3, [r7, #0]
 8017de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017dea:	4313      	orrs	r3, r2
 8017dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8017df4:	683b      	ldr	r3, [r7, #0]
 8017df6:	699b      	ldr	r3, [r3, #24]
 8017df8:	041b      	lsls	r3, r3, #16
 8017dfa:	4313      	orrs	r3, r2
 8017dfc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8017e04:	683b      	ldr	r3, [r7, #0]
 8017e06:	69db      	ldr	r3, [r3, #28]
 8017e08:	4313      	orrs	r3, r2
 8017e0a:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	4a19      	ldr	r2, [pc, #100]	@ (8017e78 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8017e12:	4293      	cmp	r3, r2
 8017e14:	d004      	beq.n	8017e20 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	4a18      	ldr	r2, [pc, #96]	@ (8017e7c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8017e1c:	4293      	cmp	r3, r2
 8017e1e:	d11c      	bne.n	8017e5a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8017e26:	683b      	ldr	r3, [r7, #0]
 8017e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e2a:	051b      	lsls	r3, r3, #20
 8017e2c:	4313      	orrs	r3, r2
 8017e2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8017e36:	683b      	ldr	r3, [r7, #0]
 8017e38:	6a1b      	ldr	r3, [r3, #32]
 8017e3a:	4313      	orrs	r3, r2
 8017e3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8017e44:	683b      	ldr	r3, [r7, #0]
 8017e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e48:	4313      	orrs	r3, r2
 8017e4a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8017e52:	683b      	ldr	r3, [r7, #0]
 8017e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e56:	4313      	orrs	r3, r2
 8017e58:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	68fa      	ldr	r2, [r7, #12]
 8017e60:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	2200      	movs	r2, #0
 8017e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017e6a:	2300      	movs	r3, #0
}
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	3714      	adds	r7, #20
 8017e70:	46bd      	mov	sp, r7
 8017e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e76:	4770      	bx	lr
 8017e78:	40010000 	.word	0x40010000
 8017e7c:	40010400 	.word	0x40010400

08017e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017e80:	b480      	push	{r7}
 8017e82:	b083      	sub	sp, #12
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017e88:	bf00      	nop
 8017e8a:	370c      	adds	r7, #12
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e92:	4770      	bx	lr

08017e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017e94:	b480      	push	{r7}
 8017e96:	b083      	sub	sp, #12
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017e9c:	bf00      	nop
 8017e9e:	370c      	adds	r7, #12
 8017ea0:	46bd      	mov	sp, r7
 8017ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ea6:	4770      	bx	lr

08017ea8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017ea8:	b480      	push	{r7}
 8017eaa:	b083      	sub	sp, #12
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017eb0:	bf00      	nop
 8017eb2:	370c      	adds	r7, #12
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eba:	4770      	bx	lr

08017ebc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017ebc:	b580      	push	{r7, lr}
 8017ebe:	b082      	sub	sp, #8
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d101      	bne.n	8017ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017eca:	2301      	movs	r3, #1
 8017ecc:	e042      	b.n	8017f54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d106      	bne.n	8017ee6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	2200      	movs	r2, #0
 8017edc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017ee0:	6878      	ldr	r0, [r7, #4]
 8017ee2:	f7f1 fa29 	bl	8009338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	2224      	movs	r2, #36	@ 0x24
 8017eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	681a      	ldr	r2, [r3, #0]
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	f022 0201 	bic.w	r2, r2, #1
 8017efc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d002      	beq.n	8017f0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8017f06:	6878      	ldr	r0, [r7, #4]
 8017f08:	f001 fbf8 	bl	80196fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017f0c:	6878      	ldr	r0, [r7, #4]
 8017f0e:	f000 fd89 	bl	8018a24 <UART_SetConfig>
 8017f12:	4603      	mov	r3, r0
 8017f14:	2b01      	cmp	r3, #1
 8017f16:	d101      	bne.n	8017f1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8017f18:	2301      	movs	r3, #1
 8017f1a:	e01b      	b.n	8017f54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	685a      	ldr	r2, [r3, #4]
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017f2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	689a      	ldr	r2, [r3, #8]
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017f3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	681a      	ldr	r2, [r3, #0]
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	f042 0201 	orr.w	r2, r2, #1
 8017f4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017f4c:	6878      	ldr	r0, [r7, #4]
 8017f4e:	f001 fc77 	bl	8019840 <UART_CheckIdleState>
 8017f52:	4603      	mov	r3, r0
}
 8017f54:	4618      	mov	r0, r3
 8017f56:	3708      	adds	r7, #8
 8017f58:	46bd      	mov	sp, r7
 8017f5a:	bd80      	pop	{r7, pc}

08017f5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017f5c:	b580      	push	{r7, lr}
 8017f5e:	b08a      	sub	sp, #40	@ 0x28
 8017f60:	af02      	add	r7, sp, #8
 8017f62:	60f8      	str	r0, [r7, #12]
 8017f64:	60b9      	str	r1, [r7, #8]
 8017f66:	603b      	str	r3, [r7, #0]
 8017f68:	4613      	mov	r3, r2
 8017f6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017f72:	2b20      	cmp	r3, #32
 8017f74:	d17b      	bne.n	801806e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8017f76:	68bb      	ldr	r3, [r7, #8]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d002      	beq.n	8017f82 <HAL_UART_Transmit+0x26>
 8017f7c:	88fb      	ldrh	r3, [r7, #6]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d101      	bne.n	8017f86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8017f82:	2301      	movs	r3, #1
 8017f84:	e074      	b.n	8018070 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	2200      	movs	r2, #0
 8017f8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	2221      	movs	r2, #33	@ 0x21
 8017f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017f96:	f7f1 faf1 	bl	800957c <HAL_GetTick>
 8017f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	88fa      	ldrh	r2, [r7, #6]
 8017fa0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	88fa      	ldrh	r2, [r7, #6]
 8017fa8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	689b      	ldr	r3, [r3, #8]
 8017fb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017fb4:	d108      	bne.n	8017fc8 <HAL_UART_Transmit+0x6c>
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	691b      	ldr	r3, [r3, #16]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d104      	bne.n	8017fc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017fc2:	68bb      	ldr	r3, [r7, #8]
 8017fc4:	61bb      	str	r3, [r7, #24]
 8017fc6:	e003      	b.n	8017fd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8017fc8:	68bb      	ldr	r3, [r7, #8]
 8017fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017fcc:	2300      	movs	r3, #0
 8017fce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017fd0:	e030      	b.n	8018034 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017fd2:	683b      	ldr	r3, [r7, #0]
 8017fd4:	9300      	str	r3, [sp, #0]
 8017fd6:	697b      	ldr	r3, [r7, #20]
 8017fd8:	2200      	movs	r2, #0
 8017fda:	2180      	movs	r1, #128	@ 0x80
 8017fdc:	68f8      	ldr	r0, [r7, #12]
 8017fde:	f001 fcd9 	bl	8019994 <UART_WaitOnFlagUntilTimeout>
 8017fe2:	4603      	mov	r3, r0
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d005      	beq.n	8017ff4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	2220      	movs	r2, #32
 8017fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8017ff0:	2303      	movs	r3, #3
 8017ff2:	e03d      	b.n	8018070 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8017ff4:	69fb      	ldr	r3, [r7, #28]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d10b      	bne.n	8018012 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017ffa:	69bb      	ldr	r3, [r7, #24]
 8017ffc:	881b      	ldrh	r3, [r3, #0]
 8017ffe:	461a      	mov	r2, r3
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018008:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801800a:	69bb      	ldr	r3, [r7, #24]
 801800c:	3302      	adds	r3, #2
 801800e:	61bb      	str	r3, [r7, #24]
 8018010:	e007      	b.n	8018022 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8018012:	69fb      	ldr	r3, [r7, #28]
 8018014:	781a      	ldrb	r2, [r3, #0]
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801801c:	69fb      	ldr	r3, [r7, #28]
 801801e:	3301      	adds	r3, #1
 8018020:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018028:	b29b      	uxth	r3, r3
 801802a:	3b01      	subs	r3, #1
 801802c:	b29a      	uxth	r2, r3
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801803a:	b29b      	uxth	r3, r3
 801803c:	2b00      	cmp	r3, #0
 801803e:	d1c8      	bne.n	8017fd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8018040:	683b      	ldr	r3, [r7, #0]
 8018042:	9300      	str	r3, [sp, #0]
 8018044:	697b      	ldr	r3, [r7, #20]
 8018046:	2200      	movs	r2, #0
 8018048:	2140      	movs	r1, #64	@ 0x40
 801804a:	68f8      	ldr	r0, [r7, #12]
 801804c:	f001 fca2 	bl	8019994 <UART_WaitOnFlagUntilTimeout>
 8018050:	4603      	mov	r3, r0
 8018052:	2b00      	cmp	r3, #0
 8018054:	d005      	beq.n	8018062 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	2220      	movs	r2, #32
 801805a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801805e:	2303      	movs	r3, #3
 8018060:	e006      	b.n	8018070 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8018062:	68fb      	ldr	r3, [r7, #12]
 8018064:	2220      	movs	r2, #32
 8018066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801806a:	2300      	movs	r3, #0
 801806c:	e000      	b.n	8018070 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801806e:	2302      	movs	r3, #2
  }
}
 8018070:	4618      	mov	r0, r3
 8018072:	3720      	adds	r7, #32
 8018074:	46bd      	mov	sp, r7
 8018076:	bd80      	pop	{r7, pc}

08018078 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8018078:	b480      	push	{r7}
 801807a:	b091      	sub	sp, #68	@ 0x44
 801807c:	af00      	add	r7, sp, #0
 801807e:	60f8      	str	r0, [r7, #12]
 8018080:	60b9      	str	r1, [r7, #8]
 8018082:	4613      	mov	r3, r2
 8018084:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018086:	68fb      	ldr	r3, [r7, #12]
 8018088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801808c:	2b20      	cmp	r3, #32
 801808e:	d178      	bne.n	8018182 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8018090:	68bb      	ldr	r3, [r7, #8]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d002      	beq.n	801809c <HAL_UART_Transmit_IT+0x24>
 8018096:	88fb      	ldrh	r3, [r7, #6]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d101      	bne.n	80180a0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 801809c:	2301      	movs	r3, #1
 801809e:	e071      	b.n	8018184 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	68ba      	ldr	r2, [r7, #8]
 80180a4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	88fa      	ldrh	r2, [r7, #6]
 80180aa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	88fa      	ldrh	r2, [r7, #6]
 80180b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	2200      	movs	r2, #0
 80180ba:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80180bc:	68fb      	ldr	r3, [r7, #12]
 80180be:	2200      	movs	r2, #0
 80180c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	2221      	movs	r2, #33	@ 0x21
 80180c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80180cc:	68fb      	ldr	r3, [r7, #12]
 80180ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80180d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80180d4:	d12a      	bne.n	801812c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	689b      	ldr	r3, [r3, #8]
 80180da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80180de:	d107      	bne.n	80180f0 <HAL_UART_Transmit_IT+0x78>
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	691b      	ldr	r3, [r3, #16]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d103      	bne.n	80180f0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	4a29      	ldr	r2, [pc, #164]	@ (8018190 <HAL_UART_Transmit_IT+0x118>)
 80180ec:	679a      	str	r2, [r3, #120]	@ 0x78
 80180ee:	e002      	b.n	80180f6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	4a28      	ldr	r2, [pc, #160]	@ (8018194 <HAL_UART_Transmit_IT+0x11c>)
 80180f4:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	3308      	adds	r3, #8
 80180fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018100:	e853 3f00 	ldrex	r3, [r3]
 8018104:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8018106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018108:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801810c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	3308      	adds	r3, #8
 8018114:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018116:	637a      	str	r2, [r7, #52]	@ 0x34
 8018118:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801811a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801811c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801811e:	e841 2300 	strex	r3, r2, [r1]
 8018122:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8018124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018126:	2b00      	cmp	r3, #0
 8018128:	d1e5      	bne.n	80180f6 <HAL_UART_Transmit_IT+0x7e>
 801812a:	e028      	b.n	801817e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	689b      	ldr	r3, [r3, #8]
 8018130:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018134:	d107      	bne.n	8018146 <HAL_UART_Transmit_IT+0xce>
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	691b      	ldr	r3, [r3, #16]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d103      	bne.n	8018146 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	4a15      	ldr	r2, [pc, #84]	@ (8018198 <HAL_UART_Transmit_IT+0x120>)
 8018142:	679a      	str	r2, [r3, #120]	@ 0x78
 8018144:	e002      	b.n	801814c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	4a14      	ldr	r2, [pc, #80]	@ (801819c <HAL_UART_Transmit_IT+0x124>)
 801814a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018152:	697b      	ldr	r3, [r7, #20]
 8018154:	e853 3f00 	ldrex	r3, [r3]
 8018158:	613b      	str	r3, [r7, #16]
   return(result);
 801815a:	693b      	ldr	r3, [r7, #16]
 801815c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018160:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	461a      	mov	r2, r3
 8018168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801816a:	623b      	str	r3, [r7, #32]
 801816c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801816e:	69f9      	ldr	r1, [r7, #28]
 8018170:	6a3a      	ldr	r2, [r7, #32]
 8018172:	e841 2300 	strex	r3, r2, [r1]
 8018176:	61bb      	str	r3, [r7, #24]
   return(result);
 8018178:	69bb      	ldr	r3, [r7, #24]
 801817a:	2b00      	cmp	r3, #0
 801817c:	d1e6      	bne.n	801814c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 801817e:	2300      	movs	r3, #0
 8018180:	e000      	b.n	8018184 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8018182:	2302      	movs	r3, #2
  }
}
 8018184:	4618      	mov	r0, r3
 8018186:	3744      	adds	r7, #68	@ 0x44
 8018188:	46bd      	mov	sp, r7
 801818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818e:	4770      	bx	lr
 8018190:	08019fff 	.word	0x08019fff
 8018194:	08019f1f 	.word	0x08019f1f
 8018198:	08019e5d 	.word	0x08019e5d
 801819c:	08019da5 	.word	0x08019da5

080181a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80181a0:	b580      	push	{r7, lr}
 80181a2:	b08a      	sub	sp, #40	@ 0x28
 80181a4:	af00      	add	r7, sp, #0
 80181a6:	60f8      	str	r0, [r7, #12]
 80181a8:	60b9      	str	r1, [r7, #8]
 80181aa:	4613      	mov	r3, r2
 80181ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80181b4:	2b20      	cmp	r3, #32
 80181b6:	d137      	bne.n	8018228 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80181b8:	68bb      	ldr	r3, [r7, #8]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d002      	beq.n	80181c4 <HAL_UART_Receive_IT+0x24>
 80181be:	88fb      	ldrh	r3, [r7, #6]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d101      	bne.n	80181c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80181c4:	2301      	movs	r3, #1
 80181c6:	e030      	b.n	801822a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	2200      	movs	r2, #0
 80181cc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	4a18      	ldr	r2, [pc, #96]	@ (8018234 <HAL_UART_Receive_IT+0x94>)
 80181d4:	4293      	cmp	r3, r2
 80181d6:	d01f      	beq.n	8018218 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80181d8:	68fb      	ldr	r3, [r7, #12]
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	685b      	ldr	r3, [r3, #4]
 80181de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d018      	beq.n	8018218 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80181ec:	697b      	ldr	r3, [r7, #20]
 80181ee:	e853 3f00 	ldrex	r3, [r3]
 80181f2:	613b      	str	r3, [r7, #16]
   return(result);
 80181f4:	693b      	ldr	r3, [r7, #16]
 80181f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80181fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	461a      	mov	r2, r3
 8018202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018204:	623b      	str	r3, [r7, #32]
 8018206:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018208:	69f9      	ldr	r1, [r7, #28]
 801820a:	6a3a      	ldr	r2, [r7, #32]
 801820c:	e841 2300 	strex	r3, r2, [r1]
 8018210:	61bb      	str	r3, [r7, #24]
   return(result);
 8018212:	69bb      	ldr	r3, [r7, #24]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d1e6      	bne.n	80181e6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8018218:	88fb      	ldrh	r3, [r7, #6]
 801821a:	461a      	mov	r2, r3
 801821c:	68b9      	ldr	r1, [r7, #8]
 801821e:	68f8      	ldr	r0, [r7, #12]
 8018220:	f001 fc26 	bl	8019a70 <UART_Start_Receive_IT>
 8018224:	4603      	mov	r3, r0
 8018226:	e000      	b.n	801822a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018228:	2302      	movs	r3, #2
  }
}
 801822a:	4618      	mov	r0, r3
 801822c:	3728      	adds	r7, #40	@ 0x28
 801822e:	46bd      	mov	sp, r7
 8018230:	bd80      	pop	{r7, pc}
 8018232:	bf00      	nop
 8018234:	58000c00 	.word	0x58000c00

08018238 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8018238:	b580      	push	{r7, lr}
 801823a:	b0ba      	sub	sp, #232	@ 0xe8
 801823c:	af00      	add	r7, sp, #0
 801823e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	69db      	ldr	r3, [r3, #28]
 8018246:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	689b      	ldr	r3, [r3, #8]
 801825a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801825e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8018262:	f640 030f 	movw	r3, #2063	@ 0x80f
 8018266:	4013      	ands	r3, r2
 8018268:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 801826c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8018270:	2b00      	cmp	r3, #0
 8018272:	d11b      	bne.n	80182ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8018274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018278:	f003 0320 	and.w	r3, r3, #32
 801827c:	2b00      	cmp	r3, #0
 801827e:	d015      	beq.n	80182ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8018280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018284:	f003 0320 	and.w	r3, r3, #32
 8018288:	2b00      	cmp	r3, #0
 801828a:	d105      	bne.n	8018298 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801828c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018294:	2b00      	cmp	r3, #0
 8018296:	d009      	beq.n	80182ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801829c:	2b00      	cmp	r3, #0
 801829e:	f000 8393 	beq.w	80189c8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80182a6:	6878      	ldr	r0, [r7, #4]
 80182a8:	4798      	blx	r3
      }
      return;
 80182aa:	e38d      	b.n	80189c8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80182ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	f000 8123 	beq.w	80184fc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80182b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80182ba:	4b8d      	ldr	r3, [pc, #564]	@ (80184f0 <HAL_UART_IRQHandler+0x2b8>)
 80182bc:	4013      	ands	r3, r2
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d106      	bne.n	80182d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80182c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80182c6:	4b8b      	ldr	r3, [pc, #556]	@ (80184f4 <HAL_UART_IRQHandler+0x2bc>)
 80182c8:	4013      	ands	r3, r2
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	f000 8116 	beq.w	80184fc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80182d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80182d4:	f003 0301 	and.w	r3, r3, #1
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d011      	beq.n	8018300 <HAL_UART_IRQHandler+0xc8>
 80182dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80182e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d00b      	beq.n	8018300 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	2201      	movs	r2, #1
 80182ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80182f6:	f043 0201 	orr.w	r2, r3, #1
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018304:	f003 0302 	and.w	r3, r3, #2
 8018308:	2b00      	cmp	r3, #0
 801830a:	d011      	beq.n	8018330 <HAL_UART_IRQHandler+0xf8>
 801830c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018310:	f003 0301 	and.w	r3, r3, #1
 8018314:	2b00      	cmp	r3, #0
 8018316:	d00b      	beq.n	8018330 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	2202      	movs	r2, #2
 801831e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018326:	f043 0204 	orr.w	r2, r3, #4
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018334:	f003 0304 	and.w	r3, r3, #4
 8018338:	2b00      	cmp	r3, #0
 801833a:	d011      	beq.n	8018360 <HAL_UART_IRQHandler+0x128>
 801833c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018340:	f003 0301 	and.w	r3, r3, #1
 8018344:	2b00      	cmp	r3, #0
 8018346:	d00b      	beq.n	8018360 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	2204      	movs	r2, #4
 801834e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018356:	f043 0202 	orr.w	r2, r3, #2
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8018360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018364:	f003 0308 	and.w	r3, r3, #8
 8018368:	2b00      	cmp	r3, #0
 801836a:	d017      	beq.n	801839c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801836c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018370:	f003 0320 	and.w	r3, r3, #32
 8018374:	2b00      	cmp	r3, #0
 8018376:	d105      	bne.n	8018384 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8018378:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801837c:	4b5c      	ldr	r3, [pc, #368]	@ (80184f0 <HAL_UART_IRQHandler+0x2b8>)
 801837e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018380:	2b00      	cmp	r3, #0
 8018382:	d00b      	beq.n	801839c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	2208      	movs	r2, #8
 801838a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018392:	f043 0208 	orr.w	r2, r3, #8
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801839c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80183a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d012      	beq.n	80183ce <HAL_UART_IRQHandler+0x196>
 80183a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80183ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d00c      	beq.n	80183ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80183bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80183c4:	f043 0220 	orr.w	r2, r3, #32
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	f000 82f9 	beq.w	80189cc <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80183da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80183de:	f003 0320 	and.w	r3, r3, #32
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d013      	beq.n	801840e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80183e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80183ea:	f003 0320 	and.w	r3, r3, #32
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d105      	bne.n	80183fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80183f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80183f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d007      	beq.n	801840e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018402:	2b00      	cmp	r3, #0
 8018404:	d003      	beq.n	801840e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801840a:	6878      	ldr	r0, [r7, #4]
 801840c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018414:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	689b      	ldr	r3, [r3, #8]
 801841e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018422:	2b40      	cmp	r3, #64	@ 0x40
 8018424:	d005      	beq.n	8018432 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8018426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801842a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801842e:	2b00      	cmp	r3, #0
 8018430:	d054      	beq.n	80184dc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8018432:	6878      	ldr	r0, [r7, #4]
 8018434:	f001 fc3e 	bl	8019cb4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	689b      	ldr	r3, [r3, #8]
 801843e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018442:	2b40      	cmp	r3, #64	@ 0x40
 8018444:	d146      	bne.n	80184d4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	3308      	adds	r3, #8
 801844c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018450:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8018454:	e853 3f00 	ldrex	r3, [r3]
 8018458:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801845c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8018460:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018464:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	3308      	adds	r3, #8
 801846e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8018472:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8018476:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801847a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801847e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8018482:	e841 2300 	strex	r3, r2, [r1]
 8018486:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801848a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801848e:	2b00      	cmp	r3, #0
 8018490:	d1d9      	bne.n	8018446 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018498:	2b00      	cmp	r3, #0
 801849a:	d017      	beq.n	80184cc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184a2:	4a15      	ldr	r2, [pc, #84]	@ (80184f8 <HAL_UART_IRQHandler+0x2c0>)
 80184a4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184ac:	4618      	mov	r0, r3
 80184ae:	f7f4 fa7b 	bl	800c9a8 <HAL_DMA_Abort_IT>
 80184b2:	4603      	mov	r3, r0
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d019      	beq.n	80184ec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80184c0:	687a      	ldr	r2, [r7, #4]
 80184c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80184c6:	4610      	mov	r0, r2
 80184c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184ca:	e00f      	b.n	80184ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80184cc:	6878      	ldr	r0, [r7, #4]
 80184ce:	f000 fa93 	bl	80189f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184d2:	e00b      	b.n	80184ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80184d4:	6878      	ldr	r0, [r7, #4]
 80184d6:	f000 fa8f 	bl	80189f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184da:	e007      	b.n	80184ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80184dc:	6878      	ldr	r0, [r7, #4]
 80184de:	f000 fa8b 	bl	80189f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	2200      	movs	r2, #0
 80184e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80184ea:	e26f      	b.n	80189cc <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184ec:	bf00      	nop
    return;
 80184ee:	e26d      	b.n	80189cc <HAL_UART_IRQHandler+0x794>
 80184f0:	10000001 	.word	0x10000001
 80184f4:	04000120 	.word	0x04000120
 80184f8:	08019d81 	.word	0x08019d81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018500:	2b01      	cmp	r3, #1
 8018502:	f040 8203 	bne.w	801890c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8018506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801850a:	f003 0310 	and.w	r3, r3, #16
 801850e:	2b00      	cmp	r3, #0
 8018510:	f000 81fc 	beq.w	801890c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8018514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018518:	f003 0310 	and.w	r3, r3, #16
 801851c:	2b00      	cmp	r3, #0
 801851e:	f000 81f5 	beq.w	801890c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	2210      	movs	r2, #16
 8018528:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	689b      	ldr	r3, [r3, #8]
 8018530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018534:	2b40      	cmp	r3, #64	@ 0x40
 8018536:	f040 816d 	bne.w	8018814 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	4aa4      	ldr	r2, [pc, #656]	@ (80187d4 <HAL_UART_IRQHandler+0x59c>)
 8018544:	4293      	cmp	r3, r2
 8018546:	d068      	beq.n	801861a <HAL_UART_IRQHandler+0x3e2>
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	4aa1      	ldr	r2, [pc, #644]	@ (80187d8 <HAL_UART_IRQHandler+0x5a0>)
 8018552:	4293      	cmp	r3, r2
 8018554:	d061      	beq.n	801861a <HAL_UART_IRQHandler+0x3e2>
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	4a9f      	ldr	r2, [pc, #636]	@ (80187dc <HAL_UART_IRQHandler+0x5a4>)
 8018560:	4293      	cmp	r3, r2
 8018562:	d05a      	beq.n	801861a <HAL_UART_IRQHandler+0x3e2>
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	4a9c      	ldr	r2, [pc, #624]	@ (80187e0 <HAL_UART_IRQHandler+0x5a8>)
 801856e:	4293      	cmp	r3, r2
 8018570:	d053      	beq.n	801861a <HAL_UART_IRQHandler+0x3e2>
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	4a9a      	ldr	r2, [pc, #616]	@ (80187e4 <HAL_UART_IRQHandler+0x5ac>)
 801857c:	4293      	cmp	r3, r2
 801857e:	d04c      	beq.n	801861a <HAL_UART_IRQHandler+0x3e2>
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	4a97      	ldr	r2, [pc, #604]	@ (80187e8 <HAL_UART_IRQHandler+0x5b0>)
 801858a:	4293      	cmp	r3, r2
 801858c:	d045      	beq.n	801861a <HAL_UART_IRQHandler+0x3e2>
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	4a95      	ldr	r2, [pc, #596]	@ (80187ec <HAL_UART_IRQHandler+0x5b4>)
 8018598:	4293      	cmp	r3, r2
 801859a:	d03e      	beq.n	801861a <HAL_UART_IRQHandler+0x3e2>
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	4a92      	ldr	r2, [pc, #584]	@ (80187f0 <HAL_UART_IRQHandler+0x5b8>)
 80185a6:	4293      	cmp	r3, r2
 80185a8:	d037      	beq.n	801861a <HAL_UART_IRQHandler+0x3e2>
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	4a90      	ldr	r2, [pc, #576]	@ (80187f4 <HAL_UART_IRQHandler+0x5bc>)
 80185b4:	4293      	cmp	r3, r2
 80185b6:	d030      	beq.n	801861a <HAL_UART_IRQHandler+0x3e2>
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	4a8d      	ldr	r2, [pc, #564]	@ (80187f8 <HAL_UART_IRQHandler+0x5c0>)
 80185c2:	4293      	cmp	r3, r2
 80185c4:	d029      	beq.n	801861a <HAL_UART_IRQHandler+0x3e2>
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	4a8b      	ldr	r2, [pc, #556]	@ (80187fc <HAL_UART_IRQHandler+0x5c4>)
 80185d0:	4293      	cmp	r3, r2
 80185d2:	d022      	beq.n	801861a <HAL_UART_IRQHandler+0x3e2>
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	4a88      	ldr	r2, [pc, #544]	@ (8018800 <HAL_UART_IRQHandler+0x5c8>)
 80185de:	4293      	cmp	r3, r2
 80185e0:	d01b      	beq.n	801861a <HAL_UART_IRQHandler+0x3e2>
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	4a86      	ldr	r2, [pc, #536]	@ (8018804 <HAL_UART_IRQHandler+0x5cc>)
 80185ec:	4293      	cmp	r3, r2
 80185ee:	d014      	beq.n	801861a <HAL_UART_IRQHandler+0x3e2>
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	4a83      	ldr	r2, [pc, #524]	@ (8018808 <HAL_UART_IRQHandler+0x5d0>)
 80185fa:	4293      	cmp	r3, r2
 80185fc:	d00d      	beq.n	801861a <HAL_UART_IRQHandler+0x3e2>
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	4a81      	ldr	r2, [pc, #516]	@ (801880c <HAL_UART_IRQHandler+0x5d4>)
 8018608:	4293      	cmp	r3, r2
 801860a:	d006      	beq.n	801861a <HAL_UART_IRQHandler+0x3e2>
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	4a7e      	ldr	r2, [pc, #504]	@ (8018810 <HAL_UART_IRQHandler+0x5d8>)
 8018616:	4293      	cmp	r3, r2
 8018618:	d106      	bne.n	8018628 <HAL_UART_IRQHandler+0x3f0>
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	685b      	ldr	r3, [r3, #4]
 8018624:	b29b      	uxth	r3, r3
 8018626:	e005      	b.n	8018634 <HAL_UART_IRQHandler+0x3fc>
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	685b      	ldr	r3, [r3, #4]
 8018632:	b29b      	uxth	r3, r3
 8018634:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8018638:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801863c:	2b00      	cmp	r3, #0
 801863e:	f000 80ad 	beq.w	801879c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018648:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801864c:	429a      	cmp	r2, r3
 801864e:	f080 80a5 	bcs.w	801879c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018658:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018662:	69db      	ldr	r3, [r3, #28]
 8018664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018668:	f000 8087 	beq.w	801877a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018674:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8018678:	e853 3f00 	ldrex	r3, [r3]
 801867c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8018680:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8018684:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018688:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	461a      	mov	r2, r3
 8018692:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8018696:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801869a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801869e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80186a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80186a6:	e841 2300 	strex	r3, r2, [r1]
 80186aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80186ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d1da      	bne.n	801866c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	3308      	adds	r3, #8
 80186bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80186c0:	e853 3f00 	ldrex	r3, [r3]
 80186c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80186c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80186c8:	f023 0301 	bic.w	r3, r3, #1
 80186cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	3308      	adds	r3, #8
 80186d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80186da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80186de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80186e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80186e6:	e841 2300 	strex	r3, r2, [r1]
 80186ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80186ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d1e1      	bne.n	80186b6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	3308      	adds	r3, #8
 80186f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80186fc:	e853 3f00 	ldrex	r3, [r3]
 8018700:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8018702:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018708:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	3308      	adds	r3, #8
 8018712:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8018716:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8018718:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801871a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801871c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801871e:	e841 2300 	strex	r3, r2, [r1]
 8018722:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8018724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018726:	2b00      	cmp	r3, #0
 8018728:	d1e3      	bne.n	80186f2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	2220      	movs	r2, #32
 801872e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	2200      	movs	r2, #0
 8018736:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801873e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018740:	e853 3f00 	ldrex	r3, [r3]
 8018744:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8018746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018748:	f023 0310 	bic.w	r3, r3, #16
 801874c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	461a      	mov	r2, r3
 8018756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801875a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801875c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801875e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018760:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018762:	e841 2300 	strex	r3, r2, [r1]
 8018766:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8018768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801876a:	2b00      	cmp	r3, #0
 801876c:	d1e4      	bne.n	8018738 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018774:	4618      	mov	r0, r3
 8018776:	f7f3 fdf9 	bl	800c36c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	2202      	movs	r2, #2
 801877e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801878c:	b29b      	uxth	r3, r3
 801878e:	1ad3      	subs	r3, r2, r3
 8018790:	b29b      	uxth	r3, r3
 8018792:	4619      	mov	r1, r3
 8018794:	6878      	ldr	r0, [r7, #4]
 8018796:	f000 f939 	bl	8018a0c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801879a:	e119      	b.n	80189d0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80187a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80187a6:	429a      	cmp	r2, r3
 80187a8:	f040 8112 	bne.w	80189d0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80187b2:	69db      	ldr	r3, [r3, #28]
 80187b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80187b8:	f040 810a 	bne.w	80189d0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	2202      	movs	r2, #2
 80187c0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80187c8:	4619      	mov	r1, r3
 80187ca:	6878      	ldr	r0, [r7, #4]
 80187cc:	f000 f91e 	bl	8018a0c <HAL_UARTEx_RxEventCallback>
      return;
 80187d0:	e0fe      	b.n	80189d0 <HAL_UART_IRQHandler+0x798>
 80187d2:	bf00      	nop
 80187d4:	40020010 	.word	0x40020010
 80187d8:	40020028 	.word	0x40020028
 80187dc:	40020040 	.word	0x40020040
 80187e0:	40020058 	.word	0x40020058
 80187e4:	40020070 	.word	0x40020070
 80187e8:	40020088 	.word	0x40020088
 80187ec:	400200a0 	.word	0x400200a0
 80187f0:	400200b8 	.word	0x400200b8
 80187f4:	40020410 	.word	0x40020410
 80187f8:	40020428 	.word	0x40020428
 80187fc:	40020440 	.word	0x40020440
 8018800:	40020458 	.word	0x40020458
 8018804:	40020470 	.word	0x40020470
 8018808:	40020488 	.word	0x40020488
 801880c:	400204a0 	.word	0x400204a0
 8018810:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018820:	b29b      	uxth	r3, r3
 8018822:	1ad3      	subs	r3, r2, r3
 8018824:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801882e:	b29b      	uxth	r3, r3
 8018830:	2b00      	cmp	r3, #0
 8018832:	f000 80cf 	beq.w	80189d4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8018836:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801883a:	2b00      	cmp	r3, #0
 801883c:	f000 80ca 	beq.w	80189d4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018848:	e853 3f00 	ldrex	r3, [r3]
 801884c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801884e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018850:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8018854:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	461a      	mov	r2, r3
 801885e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8018862:	647b      	str	r3, [r7, #68]	@ 0x44
 8018864:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018866:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018868:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801886a:	e841 2300 	strex	r3, r2, [r1]
 801886e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8018870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018872:	2b00      	cmp	r3, #0
 8018874:	d1e4      	bne.n	8018840 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	3308      	adds	r3, #8
 801887c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801887e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018880:	e853 3f00 	ldrex	r3, [r3]
 8018884:	623b      	str	r3, [r7, #32]
   return(result);
 8018886:	6a3a      	ldr	r2, [r7, #32]
 8018888:	4b55      	ldr	r3, [pc, #340]	@ (80189e0 <HAL_UART_IRQHandler+0x7a8>)
 801888a:	4013      	ands	r3, r2
 801888c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	3308      	adds	r3, #8
 8018896:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801889a:	633a      	str	r2, [r7, #48]	@ 0x30
 801889c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801889e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80188a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80188a2:	e841 2300 	strex	r3, r2, [r1]
 80188a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80188a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d1e3      	bne.n	8018876 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	2220      	movs	r2, #32
 80188b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	2200      	movs	r2, #0
 80188ba:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	2200      	movs	r2, #0
 80188c0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80188c8:	693b      	ldr	r3, [r7, #16]
 80188ca:	e853 3f00 	ldrex	r3, [r3]
 80188ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	f023 0310 	bic.w	r3, r3, #16
 80188d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	461a      	mov	r2, r3
 80188e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80188e4:	61fb      	str	r3, [r7, #28]
 80188e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80188e8:	69b9      	ldr	r1, [r7, #24]
 80188ea:	69fa      	ldr	r2, [r7, #28]
 80188ec:	e841 2300 	strex	r3, r2, [r1]
 80188f0:	617b      	str	r3, [r7, #20]
   return(result);
 80188f2:	697b      	ldr	r3, [r7, #20]
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d1e4      	bne.n	80188c2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	2202      	movs	r2, #2
 80188fc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80188fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8018902:	4619      	mov	r1, r3
 8018904:	6878      	ldr	r0, [r7, #4]
 8018906:	f000 f881 	bl	8018a0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801890a:	e063      	b.n	80189d4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801890c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018910:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8018914:	2b00      	cmp	r3, #0
 8018916:	d00e      	beq.n	8018936 <HAL_UART_IRQHandler+0x6fe>
 8018918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801891c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018920:	2b00      	cmp	r3, #0
 8018922:	d008      	beq.n	8018936 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801892c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801892e:	6878      	ldr	r0, [r7, #4]
 8018930:	f002 f926 	bl	801ab80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018934:	e051      	b.n	80189da <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8018936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801893a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801893e:	2b00      	cmp	r3, #0
 8018940:	d014      	beq.n	801896c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8018942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801894a:	2b00      	cmp	r3, #0
 801894c:	d105      	bne.n	801895a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801894e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018952:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018956:	2b00      	cmp	r3, #0
 8018958:	d008      	beq.n	801896c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801895e:	2b00      	cmp	r3, #0
 8018960:	d03a      	beq.n	80189d8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018966:	6878      	ldr	r0, [r7, #4]
 8018968:	4798      	blx	r3
    }
    return;
 801896a:	e035      	b.n	80189d8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801896c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018974:	2b00      	cmp	r3, #0
 8018976:	d009      	beq.n	801898c <HAL_UART_IRQHandler+0x754>
 8018978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801897c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018980:	2b00      	cmp	r3, #0
 8018982:	d003      	beq.n	801898c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8018984:	6878      	ldr	r0, [r7, #4]
 8018986:	f001 fbaf 	bl	801a0e8 <UART_EndTransmit_IT>
    return;
 801898a:	e026      	b.n	80189da <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801898c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018990:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018994:	2b00      	cmp	r3, #0
 8018996:	d009      	beq.n	80189ac <HAL_UART_IRQHandler+0x774>
 8018998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801899c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d003      	beq.n	80189ac <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80189a4:	6878      	ldr	r0, [r7, #4]
 80189a6:	f002 f8ff 	bl	801aba8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80189aa:	e016      	b.n	80189da <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80189ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80189b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d010      	beq.n	80189da <HAL_UART_IRQHandler+0x7a2>
 80189b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80189bc:	2b00      	cmp	r3, #0
 80189be:	da0c      	bge.n	80189da <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80189c0:	6878      	ldr	r0, [r7, #4]
 80189c2:	f002 f8e7 	bl	801ab94 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80189c6:	e008      	b.n	80189da <HAL_UART_IRQHandler+0x7a2>
      return;
 80189c8:	bf00      	nop
 80189ca:	e006      	b.n	80189da <HAL_UART_IRQHandler+0x7a2>
    return;
 80189cc:	bf00      	nop
 80189ce:	e004      	b.n	80189da <HAL_UART_IRQHandler+0x7a2>
      return;
 80189d0:	bf00      	nop
 80189d2:	e002      	b.n	80189da <HAL_UART_IRQHandler+0x7a2>
      return;
 80189d4:	bf00      	nop
 80189d6:	e000      	b.n	80189da <HAL_UART_IRQHandler+0x7a2>
    return;
 80189d8:	bf00      	nop
  }
}
 80189da:	37e8      	adds	r7, #232	@ 0xe8
 80189dc:	46bd      	mov	sp, r7
 80189de:	bd80      	pop	{r7, pc}
 80189e0:	effffffe 	.word	0xeffffffe

080189e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80189e4:	b480      	push	{r7}
 80189e6:	b083      	sub	sp, #12
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80189ec:	bf00      	nop
 80189ee:	370c      	adds	r7, #12
 80189f0:	46bd      	mov	sp, r7
 80189f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189f6:	4770      	bx	lr

080189f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80189f8:	b480      	push	{r7}
 80189fa:	b083      	sub	sp, #12
 80189fc:	af00      	add	r7, sp, #0
 80189fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8018a00:	bf00      	nop
 8018a02:	370c      	adds	r7, #12
 8018a04:	46bd      	mov	sp, r7
 8018a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a0a:	4770      	bx	lr

08018a0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8018a0c:	b480      	push	{r7}
 8018a0e:	b083      	sub	sp, #12
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	6078      	str	r0, [r7, #4]
 8018a14:	460b      	mov	r3, r1
 8018a16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8018a18:	bf00      	nop
 8018a1a:	370c      	adds	r7, #12
 8018a1c:	46bd      	mov	sp, r7
 8018a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a22:	4770      	bx	lr

08018a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018a28:	b092      	sub	sp, #72	@ 0x48
 8018a2a:	af00      	add	r7, sp, #0
 8018a2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018a2e:	2300      	movs	r3, #0
 8018a30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018a34:	697b      	ldr	r3, [r7, #20]
 8018a36:	689a      	ldr	r2, [r3, #8]
 8018a38:	697b      	ldr	r3, [r7, #20]
 8018a3a:	691b      	ldr	r3, [r3, #16]
 8018a3c:	431a      	orrs	r2, r3
 8018a3e:	697b      	ldr	r3, [r7, #20]
 8018a40:	695b      	ldr	r3, [r3, #20]
 8018a42:	431a      	orrs	r2, r3
 8018a44:	697b      	ldr	r3, [r7, #20]
 8018a46:	69db      	ldr	r3, [r3, #28]
 8018a48:	4313      	orrs	r3, r2
 8018a4a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018a4c:	697b      	ldr	r3, [r7, #20]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	681a      	ldr	r2, [r3, #0]
 8018a52:	4bbe      	ldr	r3, [pc, #760]	@ (8018d4c <UART_SetConfig+0x328>)
 8018a54:	4013      	ands	r3, r2
 8018a56:	697a      	ldr	r2, [r7, #20]
 8018a58:	6812      	ldr	r2, [r2, #0]
 8018a5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018a5c:	430b      	orrs	r3, r1
 8018a5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018a60:	697b      	ldr	r3, [r7, #20]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	685b      	ldr	r3, [r3, #4]
 8018a66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8018a6a:	697b      	ldr	r3, [r7, #20]
 8018a6c:	68da      	ldr	r2, [r3, #12]
 8018a6e:	697b      	ldr	r3, [r7, #20]
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	430a      	orrs	r2, r1
 8018a74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018a76:	697b      	ldr	r3, [r7, #20]
 8018a78:	699b      	ldr	r3, [r3, #24]
 8018a7a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018a7c:	697b      	ldr	r3, [r7, #20]
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	4ab3      	ldr	r2, [pc, #716]	@ (8018d50 <UART_SetConfig+0x32c>)
 8018a82:	4293      	cmp	r3, r2
 8018a84:	d004      	beq.n	8018a90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018a86:	697b      	ldr	r3, [r7, #20]
 8018a88:	6a1b      	ldr	r3, [r3, #32]
 8018a8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018a8c:	4313      	orrs	r3, r2
 8018a8e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018a90:	697b      	ldr	r3, [r7, #20]
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	689a      	ldr	r2, [r3, #8]
 8018a96:	4baf      	ldr	r3, [pc, #700]	@ (8018d54 <UART_SetConfig+0x330>)
 8018a98:	4013      	ands	r3, r2
 8018a9a:	697a      	ldr	r2, [r7, #20]
 8018a9c:	6812      	ldr	r2, [r2, #0]
 8018a9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018aa0:	430b      	orrs	r3, r1
 8018aa2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018aa4:	697b      	ldr	r3, [r7, #20]
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018aaa:	f023 010f 	bic.w	r1, r3, #15
 8018aae:	697b      	ldr	r3, [r7, #20]
 8018ab0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018ab2:	697b      	ldr	r3, [r7, #20]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	430a      	orrs	r2, r1
 8018ab8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018aba:	697b      	ldr	r3, [r7, #20]
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	4aa6      	ldr	r2, [pc, #664]	@ (8018d58 <UART_SetConfig+0x334>)
 8018ac0:	4293      	cmp	r3, r2
 8018ac2:	d177      	bne.n	8018bb4 <UART_SetConfig+0x190>
 8018ac4:	4ba5      	ldr	r3, [pc, #660]	@ (8018d5c <UART_SetConfig+0x338>)
 8018ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ac8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018acc:	2b28      	cmp	r3, #40	@ 0x28
 8018ace:	d86d      	bhi.n	8018bac <UART_SetConfig+0x188>
 8018ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8018ad8 <UART_SetConfig+0xb4>)
 8018ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ad6:	bf00      	nop
 8018ad8:	08018b7d 	.word	0x08018b7d
 8018adc:	08018bad 	.word	0x08018bad
 8018ae0:	08018bad 	.word	0x08018bad
 8018ae4:	08018bad 	.word	0x08018bad
 8018ae8:	08018bad 	.word	0x08018bad
 8018aec:	08018bad 	.word	0x08018bad
 8018af0:	08018bad 	.word	0x08018bad
 8018af4:	08018bad 	.word	0x08018bad
 8018af8:	08018b85 	.word	0x08018b85
 8018afc:	08018bad 	.word	0x08018bad
 8018b00:	08018bad 	.word	0x08018bad
 8018b04:	08018bad 	.word	0x08018bad
 8018b08:	08018bad 	.word	0x08018bad
 8018b0c:	08018bad 	.word	0x08018bad
 8018b10:	08018bad 	.word	0x08018bad
 8018b14:	08018bad 	.word	0x08018bad
 8018b18:	08018b8d 	.word	0x08018b8d
 8018b1c:	08018bad 	.word	0x08018bad
 8018b20:	08018bad 	.word	0x08018bad
 8018b24:	08018bad 	.word	0x08018bad
 8018b28:	08018bad 	.word	0x08018bad
 8018b2c:	08018bad 	.word	0x08018bad
 8018b30:	08018bad 	.word	0x08018bad
 8018b34:	08018bad 	.word	0x08018bad
 8018b38:	08018b95 	.word	0x08018b95
 8018b3c:	08018bad 	.word	0x08018bad
 8018b40:	08018bad 	.word	0x08018bad
 8018b44:	08018bad 	.word	0x08018bad
 8018b48:	08018bad 	.word	0x08018bad
 8018b4c:	08018bad 	.word	0x08018bad
 8018b50:	08018bad 	.word	0x08018bad
 8018b54:	08018bad 	.word	0x08018bad
 8018b58:	08018b9d 	.word	0x08018b9d
 8018b5c:	08018bad 	.word	0x08018bad
 8018b60:	08018bad 	.word	0x08018bad
 8018b64:	08018bad 	.word	0x08018bad
 8018b68:	08018bad 	.word	0x08018bad
 8018b6c:	08018bad 	.word	0x08018bad
 8018b70:	08018bad 	.word	0x08018bad
 8018b74:	08018bad 	.word	0x08018bad
 8018b78:	08018ba5 	.word	0x08018ba5
 8018b7c:	2301      	movs	r3, #1
 8018b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b82:	e326      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018b84:	2304      	movs	r3, #4
 8018b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b8a:	e322      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018b8c:	2308      	movs	r3, #8
 8018b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b92:	e31e      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018b94:	2310      	movs	r3, #16
 8018b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b9a:	e31a      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018b9c:	2320      	movs	r3, #32
 8018b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ba2:	e316      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018ba4:	2340      	movs	r3, #64	@ 0x40
 8018ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018baa:	e312      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018bac:	2380      	movs	r3, #128	@ 0x80
 8018bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bb2:	e30e      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018bb4:	697b      	ldr	r3, [r7, #20]
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	4a69      	ldr	r2, [pc, #420]	@ (8018d60 <UART_SetConfig+0x33c>)
 8018bba:	4293      	cmp	r3, r2
 8018bbc:	d130      	bne.n	8018c20 <UART_SetConfig+0x1fc>
 8018bbe:	4b67      	ldr	r3, [pc, #412]	@ (8018d5c <UART_SetConfig+0x338>)
 8018bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018bc2:	f003 0307 	and.w	r3, r3, #7
 8018bc6:	2b05      	cmp	r3, #5
 8018bc8:	d826      	bhi.n	8018c18 <UART_SetConfig+0x1f4>
 8018bca:	a201      	add	r2, pc, #4	@ (adr r2, 8018bd0 <UART_SetConfig+0x1ac>)
 8018bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bd0:	08018be9 	.word	0x08018be9
 8018bd4:	08018bf1 	.word	0x08018bf1
 8018bd8:	08018bf9 	.word	0x08018bf9
 8018bdc:	08018c01 	.word	0x08018c01
 8018be0:	08018c09 	.word	0x08018c09
 8018be4:	08018c11 	.word	0x08018c11
 8018be8:	2300      	movs	r3, #0
 8018bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bee:	e2f0      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018bf0:	2304      	movs	r3, #4
 8018bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bf6:	e2ec      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018bf8:	2308      	movs	r3, #8
 8018bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bfe:	e2e8      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018c00:	2310      	movs	r3, #16
 8018c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c06:	e2e4      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018c08:	2320      	movs	r3, #32
 8018c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c0e:	e2e0      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018c10:	2340      	movs	r3, #64	@ 0x40
 8018c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c16:	e2dc      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018c18:	2380      	movs	r3, #128	@ 0x80
 8018c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c1e:	e2d8      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018c20:	697b      	ldr	r3, [r7, #20]
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	4a4f      	ldr	r2, [pc, #316]	@ (8018d64 <UART_SetConfig+0x340>)
 8018c26:	4293      	cmp	r3, r2
 8018c28:	d130      	bne.n	8018c8c <UART_SetConfig+0x268>
 8018c2a:	4b4c      	ldr	r3, [pc, #304]	@ (8018d5c <UART_SetConfig+0x338>)
 8018c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c2e:	f003 0307 	and.w	r3, r3, #7
 8018c32:	2b05      	cmp	r3, #5
 8018c34:	d826      	bhi.n	8018c84 <UART_SetConfig+0x260>
 8018c36:	a201      	add	r2, pc, #4	@ (adr r2, 8018c3c <UART_SetConfig+0x218>)
 8018c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c3c:	08018c55 	.word	0x08018c55
 8018c40:	08018c5d 	.word	0x08018c5d
 8018c44:	08018c65 	.word	0x08018c65
 8018c48:	08018c6d 	.word	0x08018c6d
 8018c4c:	08018c75 	.word	0x08018c75
 8018c50:	08018c7d 	.word	0x08018c7d
 8018c54:	2300      	movs	r3, #0
 8018c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c5a:	e2ba      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018c5c:	2304      	movs	r3, #4
 8018c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c62:	e2b6      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018c64:	2308      	movs	r3, #8
 8018c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c6a:	e2b2      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018c6c:	2310      	movs	r3, #16
 8018c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c72:	e2ae      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018c74:	2320      	movs	r3, #32
 8018c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c7a:	e2aa      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018c7c:	2340      	movs	r3, #64	@ 0x40
 8018c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c82:	e2a6      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018c84:	2380      	movs	r3, #128	@ 0x80
 8018c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c8a:	e2a2      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018c8c:	697b      	ldr	r3, [r7, #20]
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	4a35      	ldr	r2, [pc, #212]	@ (8018d68 <UART_SetConfig+0x344>)
 8018c92:	4293      	cmp	r3, r2
 8018c94:	d130      	bne.n	8018cf8 <UART_SetConfig+0x2d4>
 8018c96:	4b31      	ldr	r3, [pc, #196]	@ (8018d5c <UART_SetConfig+0x338>)
 8018c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c9a:	f003 0307 	and.w	r3, r3, #7
 8018c9e:	2b05      	cmp	r3, #5
 8018ca0:	d826      	bhi.n	8018cf0 <UART_SetConfig+0x2cc>
 8018ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8018ca8 <UART_SetConfig+0x284>)
 8018ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ca8:	08018cc1 	.word	0x08018cc1
 8018cac:	08018cc9 	.word	0x08018cc9
 8018cb0:	08018cd1 	.word	0x08018cd1
 8018cb4:	08018cd9 	.word	0x08018cd9
 8018cb8:	08018ce1 	.word	0x08018ce1
 8018cbc:	08018ce9 	.word	0x08018ce9
 8018cc0:	2300      	movs	r3, #0
 8018cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cc6:	e284      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018cc8:	2304      	movs	r3, #4
 8018cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cce:	e280      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018cd0:	2308      	movs	r3, #8
 8018cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cd6:	e27c      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018cd8:	2310      	movs	r3, #16
 8018cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cde:	e278      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018ce0:	2320      	movs	r3, #32
 8018ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ce6:	e274      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018ce8:	2340      	movs	r3, #64	@ 0x40
 8018cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cee:	e270      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018cf0:	2380      	movs	r3, #128	@ 0x80
 8018cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cf6:	e26c      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018cf8:	697b      	ldr	r3, [r7, #20]
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8018d6c <UART_SetConfig+0x348>)
 8018cfe:	4293      	cmp	r3, r2
 8018d00:	d142      	bne.n	8018d88 <UART_SetConfig+0x364>
 8018d02:	4b16      	ldr	r3, [pc, #88]	@ (8018d5c <UART_SetConfig+0x338>)
 8018d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018d06:	f003 0307 	and.w	r3, r3, #7
 8018d0a:	2b05      	cmp	r3, #5
 8018d0c:	d838      	bhi.n	8018d80 <UART_SetConfig+0x35c>
 8018d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8018d14 <UART_SetConfig+0x2f0>)
 8018d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d14:	08018d2d 	.word	0x08018d2d
 8018d18:	08018d35 	.word	0x08018d35
 8018d1c:	08018d3d 	.word	0x08018d3d
 8018d20:	08018d45 	.word	0x08018d45
 8018d24:	08018d71 	.word	0x08018d71
 8018d28:	08018d79 	.word	0x08018d79
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d32:	e24e      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018d34:	2304      	movs	r3, #4
 8018d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d3a:	e24a      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018d3c:	2308      	movs	r3, #8
 8018d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d42:	e246      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018d44:	2310      	movs	r3, #16
 8018d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d4a:	e242      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018d4c:	cfff69f3 	.word	0xcfff69f3
 8018d50:	58000c00 	.word	0x58000c00
 8018d54:	11fff4ff 	.word	0x11fff4ff
 8018d58:	40011000 	.word	0x40011000
 8018d5c:	58024400 	.word	0x58024400
 8018d60:	40004400 	.word	0x40004400
 8018d64:	40004800 	.word	0x40004800
 8018d68:	40004c00 	.word	0x40004c00
 8018d6c:	40005000 	.word	0x40005000
 8018d70:	2320      	movs	r3, #32
 8018d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d76:	e22c      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018d78:	2340      	movs	r3, #64	@ 0x40
 8018d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d7e:	e228      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018d80:	2380      	movs	r3, #128	@ 0x80
 8018d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d86:	e224      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018d88:	697b      	ldr	r3, [r7, #20]
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	4ab1      	ldr	r2, [pc, #708]	@ (8019054 <UART_SetConfig+0x630>)
 8018d8e:	4293      	cmp	r3, r2
 8018d90:	d176      	bne.n	8018e80 <UART_SetConfig+0x45c>
 8018d92:	4bb1      	ldr	r3, [pc, #708]	@ (8019058 <UART_SetConfig+0x634>)
 8018d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018d96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018d9a:	2b28      	cmp	r3, #40	@ 0x28
 8018d9c:	d86c      	bhi.n	8018e78 <UART_SetConfig+0x454>
 8018d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8018da4 <UART_SetConfig+0x380>)
 8018da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018da4:	08018e49 	.word	0x08018e49
 8018da8:	08018e79 	.word	0x08018e79
 8018dac:	08018e79 	.word	0x08018e79
 8018db0:	08018e79 	.word	0x08018e79
 8018db4:	08018e79 	.word	0x08018e79
 8018db8:	08018e79 	.word	0x08018e79
 8018dbc:	08018e79 	.word	0x08018e79
 8018dc0:	08018e79 	.word	0x08018e79
 8018dc4:	08018e51 	.word	0x08018e51
 8018dc8:	08018e79 	.word	0x08018e79
 8018dcc:	08018e79 	.word	0x08018e79
 8018dd0:	08018e79 	.word	0x08018e79
 8018dd4:	08018e79 	.word	0x08018e79
 8018dd8:	08018e79 	.word	0x08018e79
 8018ddc:	08018e79 	.word	0x08018e79
 8018de0:	08018e79 	.word	0x08018e79
 8018de4:	08018e59 	.word	0x08018e59
 8018de8:	08018e79 	.word	0x08018e79
 8018dec:	08018e79 	.word	0x08018e79
 8018df0:	08018e79 	.word	0x08018e79
 8018df4:	08018e79 	.word	0x08018e79
 8018df8:	08018e79 	.word	0x08018e79
 8018dfc:	08018e79 	.word	0x08018e79
 8018e00:	08018e79 	.word	0x08018e79
 8018e04:	08018e61 	.word	0x08018e61
 8018e08:	08018e79 	.word	0x08018e79
 8018e0c:	08018e79 	.word	0x08018e79
 8018e10:	08018e79 	.word	0x08018e79
 8018e14:	08018e79 	.word	0x08018e79
 8018e18:	08018e79 	.word	0x08018e79
 8018e1c:	08018e79 	.word	0x08018e79
 8018e20:	08018e79 	.word	0x08018e79
 8018e24:	08018e69 	.word	0x08018e69
 8018e28:	08018e79 	.word	0x08018e79
 8018e2c:	08018e79 	.word	0x08018e79
 8018e30:	08018e79 	.word	0x08018e79
 8018e34:	08018e79 	.word	0x08018e79
 8018e38:	08018e79 	.word	0x08018e79
 8018e3c:	08018e79 	.word	0x08018e79
 8018e40:	08018e79 	.word	0x08018e79
 8018e44:	08018e71 	.word	0x08018e71
 8018e48:	2301      	movs	r3, #1
 8018e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e4e:	e1c0      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018e50:	2304      	movs	r3, #4
 8018e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e56:	e1bc      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018e58:	2308      	movs	r3, #8
 8018e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e5e:	e1b8      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018e60:	2310      	movs	r3, #16
 8018e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e66:	e1b4      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018e68:	2320      	movs	r3, #32
 8018e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e6e:	e1b0      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018e70:	2340      	movs	r3, #64	@ 0x40
 8018e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e76:	e1ac      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018e78:	2380      	movs	r3, #128	@ 0x80
 8018e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e7e:	e1a8      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018e80:	697b      	ldr	r3, [r7, #20]
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	4a75      	ldr	r2, [pc, #468]	@ (801905c <UART_SetConfig+0x638>)
 8018e86:	4293      	cmp	r3, r2
 8018e88:	d130      	bne.n	8018eec <UART_SetConfig+0x4c8>
 8018e8a:	4b73      	ldr	r3, [pc, #460]	@ (8019058 <UART_SetConfig+0x634>)
 8018e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018e8e:	f003 0307 	and.w	r3, r3, #7
 8018e92:	2b05      	cmp	r3, #5
 8018e94:	d826      	bhi.n	8018ee4 <UART_SetConfig+0x4c0>
 8018e96:	a201      	add	r2, pc, #4	@ (adr r2, 8018e9c <UART_SetConfig+0x478>)
 8018e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e9c:	08018eb5 	.word	0x08018eb5
 8018ea0:	08018ebd 	.word	0x08018ebd
 8018ea4:	08018ec5 	.word	0x08018ec5
 8018ea8:	08018ecd 	.word	0x08018ecd
 8018eac:	08018ed5 	.word	0x08018ed5
 8018eb0:	08018edd 	.word	0x08018edd
 8018eb4:	2300      	movs	r3, #0
 8018eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eba:	e18a      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018ebc:	2304      	movs	r3, #4
 8018ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ec2:	e186      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018ec4:	2308      	movs	r3, #8
 8018ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eca:	e182      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018ecc:	2310      	movs	r3, #16
 8018ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ed2:	e17e      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018ed4:	2320      	movs	r3, #32
 8018ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eda:	e17a      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018edc:	2340      	movs	r3, #64	@ 0x40
 8018ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ee2:	e176      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018ee4:	2380      	movs	r3, #128	@ 0x80
 8018ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eea:	e172      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018eec:	697b      	ldr	r3, [r7, #20]
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	4a5b      	ldr	r2, [pc, #364]	@ (8019060 <UART_SetConfig+0x63c>)
 8018ef2:	4293      	cmp	r3, r2
 8018ef4:	d130      	bne.n	8018f58 <UART_SetConfig+0x534>
 8018ef6:	4b58      	ldr	r3, [pc, #352]	@ (8019058 <UART_SetConfig+0x634>)
 8018ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018efa:	f003 0307 	and.w	r3, r3, #7
 8018efe:	2b05      	cmp	r3, #5
 8018f00:	d826      	bhi.n	8018f50 <UART_SetConfig+0x52c>
 8018f02:	a201      	add	r2, pc, #4	@ (adr r2, 8018f08 <UART_SetConfig+0x4e4>)
 8018f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f08:	08018f21 	.word	0x08018f21
 8018f0c:	08018f29 	.word	0x08018f29
 8018f10:	08018f31 	.word	0x08018f31
 8018f14:	08018f39 	.word	0x08018f39
 8018f18:	08018f41 	.word	0x08018f41
 8018f1c:	08018f49 	.word	0x08018f49
 8018f20:	2300      	movs	r3, #0
 8018f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f26:	e154      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018f28:	2304      	movs	r3, #4
 8018f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f2e:	e150      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018f30:	2308      	movs	r3, #8
 8018f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f36:	e14c      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018f38:	2310      	movs	r3, #16
 8018f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f3e:	e148      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018f40:	2320      	movs	r3, #32
 8018f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f46:	e144      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018f48:	2340      	movs	r3, #64	@ 0x40
 8018f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f4e:	e140      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018f50:	2380      	movs	r3, #128	@ 0x80
 8018f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f56:	e13c      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8018f58:	697b      	ldr	r3, [r7, #20]
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	4a41      	ldr	r2, [pc, #260]	@ (8019064 <UART_SetConfig+0x640>)
 8018f5e:	4293      	cmp	r3, r2
 8018f60:	f040 8082 	bne.w	8019068 <UART_SetConfig+0x644>
 8018f64:	4b3c      	ldr	r3, [pc, #240]	@ (8019058 <UART_SetConfig+0x634>)
 8018f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018f68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018f6c:	2b28      	cmp	r3, #40	@ 0x28
 8018f6e:	d86d      	bhi.n	801904c <UART_SetConfig+0x628>
 8018f70:	a201      	add	r2, pc, #4	@ (adr r2, 8018f78 <UART_SetConfig+0x554>)
 8018f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f76:	bf00      	nop
 8018f78:	0801901d 	.word	0x0801901d
 8018f7c:	0801904d 	.word	0x0801904d
 8018f80:	0801904d 	.word	0x0801904d
 8018f84:	0801904d 	.word	0x0801904d
 8018f88:	0801904d 	.word	0x0801904d
 8018f8c:	0801904d 	.word	0x0801904d
 8018f90:	0801904d 	.word	0x0801904d
 8018f94:	0801904d 	.word	0x0801904d
 8018f98:	08019025 	.word	0x08019025
 8018f9c:	0801904d 	.word	0x0801904d
 8018fa0:	0801904d 	.word	0x0801904d
 8018fa4:	0801904d 	.word	0x0801904d
 8018fa8:	0801904d 	.word	0x0801904d
 8018fac:	0801904d 	.word	0x0801904d
 8018fb0:	0801904d 	.word	0x0801904d
 8018fb4:	0801904d 	.word	0x0801904d
 8018fb8:	0801902d 	.word	0x0801902d
 8018fbc:	0801904d 	.word	0x0801904d
 8018fc0:	0801904d 	.word	0x0801904d
 8018fc4:	0801904d 	.word	0x0801904d
 8018fc8:	0801904d 	.word	0x0801904d
 8018fcc:	0801904d 	.word	0x0801904d
 8018fd0:	0801904d 	.word	0x0801904d
 8018fd4:	0801904d 	.word	0x0801904d
 8018fd8:	08019035 	.word	0x08019035
 8018fdc:	0801904d 	.word	0x0801904d
 8018fe0:	0801904d 	.word	0x0801904d
 8018fe4:	0801904d 	.word	0x0801904d
 8018fe8:	0801904d 	.word	0x0801904d
 8018fec:	0801904d 	.word	0x0801904d
 8018ff0:	0801904d 	.word	0x0801904d
 8018ff4:	0801904d 	.word	0x0801904d
 8018ff8:	0801903d 	.word	0x0801903d
 8018ffc:	0801904d 	.word	0x0801904d
 8019000:	0801904d 	.word	0x0801904d
 8019004:	0801904d 	.word	0x0801904d
 8019008:	0801904d 	.word	0x0801904d
 801900c:	0801904d 	.word	0x0801904d
 8019010:	0801904d 	.word	0x0801904d
 8019014:	0801904d 	.word	0x0801904d
 8019018:	08019045 	.word	0x08019045
 801901c:	2301      	movs	r3, #1
 801901e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019022:	e0d6      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8019024:	2304      	movs	r3, #4
 8019026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801902a:	e0d2      	b.n	80191d2 <UART_SetConfig+0x7ae>
 801902c:	2308      	movs	r3, #8
 801902e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019032:	e0ce      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8019034:	2310      	movs	r3, #16
 8019036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801903a:	e0ca      	b.n	80191d2 <UART_SetConfig+0x7ae>
 801903c:	2320      	movs	r3, #32
 801903e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019042:	e0c6      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8019044:	2340      	movs	r3, #64	@ 0x40
 8019046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801904a:	e0c2      	b.n	80191d2 <UART_SetConfig+0x7ae>
 801904c:	2380      	movs	r3, #128	@ 0x80
 801904e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019052:	e0be      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8019054:	40011400 	.word	0x40011400
 8019058:	58024400 	.word	0x58024400
 801905c:	40007800 	.word	0x40007800
 8019060:	40007c00 	.word	0x40007c00
 8019064:	40011800 	.word	0x40011800
 8019068:	697b      	ldr	r3, [r7, #20]
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	4aad      	ldr	r2, [pc, #692]	@ (8019324 <UART_SetConfig+0x900>)
 801906e:	4293      	cmp	r3, r2
 8019070:	d176      	bne.n	8019160 <UART_SetConfig+0x73c>
 8019072:	4bad      	ldr	r3, [pc, #692]	@ (8019328 <UART_SetConfig+0x904>)
 8019074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019076:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801907a:	2b28      	cmp	r3, #40	@ 0x28
 801907c:	d86c      	bhi.n	8019158 <UART_SetConfig+0x734>
 801907e:	a201      	add	r2, pc, #4	@ (adr r2, 8019084 <UART_SetConfig+0x660>)
 8019080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019084:	08019129 	.word	0x08019129
 8019088:	08019159 	.word	0x08019159
 801908c:	08019159 	.word	0x08019159
 8019090:	08019159 	.word	0x08019159
 8019094:	08019159 	.word	0x08019159
 8019098:	08019159 	.word	0x08019159
 801909c:	08019159 	.word	0x08019159
 80190a0:	08019159 	.word	0x08019159
 80190a4:	08019131 	.word	0x08019131
 80190a8:	08019159 	.word	0x08019159
 80190ac:	08019159 	.word	0x08019159
 80190b0:	08019159 	.word	0x08019159
 80190b4:	08019159 	.word	0x08019159
 80190b8:	08019159 	.word	0x08019159
 80190bc:	08019159 	.word	0x08019159
 80190c0:	08019159 	.word	0x08019159
 80190c4:	08019139 	.word	0x08019139
 80190c8:	08019159 	.word	0x08019159
 80190cc:	08019159 	.word	0x08019159
 80190d0:	08019159 	.word	0x08019159
 80190d4:	08019159 	.word	0x08019159
 80190d8:	08019159 	.word	0x08019159
 80190dc:	08019159 	.word	0x08019159
 80190e0:	08019159 	.word	0x08019159
 80190e4:	08019141 	.word	0x08019141
 80190e8:	08019159 	.word	0x08019159
 80190ec:	08019159 	.word	0x08019159
 80190f0:	08019159 	.word	0x08019159
 80190f4:	08019159 	.word	0x08019159
 80190f8:	08019159 	.word	0x08019159
 80190fc:	08019159 	.word	0x08019159
 8019100:	08019159 	.word	0x08019159
 8019104:	08019149 	.word	0x08019149
 8019108:	08019159 	.word	0x08019159
 801910c:	08019159 	.word	0x08019159
 8019110:	08019159 	.word	0x08019159
 8019114:	08019159 	.word	0x08019159
 8019118:	08019159 	.word	0x08019159
 801911c:	08019159 	.word	0x08019159
 8019120:	08019159 	.word	0x08019159
 8019124:	08019151 	.word	0x08019151
 8019128:	2301      	movs	r3, #1
 801912a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801912e:	e050      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8019130:	2304      	movs	r3, #4
 8019132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019136:	e04c      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8019138:	2308      	movs	r3, #8
 801913a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801913e:	e048      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8019140:	2310      	movs	r3, #16
 8019142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019146:	e044      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8019148:	2320      	movs	r3, #32
 801914a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801914e:	e040      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8019150:	2340      	movs	r3, #64	@ 0x40
 8019152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019156:	e03c      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8019158:	2380      	movs	r3, #128	@ 0x80
 801915a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801915e:	e038      	b.n	80191d2 <UART_SetConfig+0x7ae>
 8019160:	697b      	ldr	r3, [r7, #20]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	4a71      	ldr	r2, [pc, #452]	@ (801932c <UART_SetConfig+0x908>)
 8019166:	4293      	cmp	r3, r2
 8019168:	d130      	bne.n	80191cc <UART_SetConfig+0x7a8>
 801916a:	4b6f      	ldr	r3, [pc, #444]	@ (8019328 <UART_SetConfig+0x904>)
 801916c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801916e:	f003 0307 	and.w	r3, r3, #7
 8019172:	2b05      	cmp	r3, #5
 8019174:	d826      	bhi.n	80191c4 <UART_SetConfig+0x7a0>
 8019176:	a201      	add	r2, pc, #4	@ (adr r2, 801917c <UART_SetConfig+0x758>)
 8019178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801917c:	08019195 	.word	0x08019195
 8019180:	0801919d 	.word	0x0801919d
 8019184:	080191a5 	.word	0x080191a5
 8019188:	080191ad 	.word	0x080191ad
 801918c:	080191b5 	.word	0x080191b5
 8019190:	080191bd 	.word	0x080191bd
 8019194:	2302      	movs	r3, #2
 8019196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801919a:	e01a      	b.n	80191d2 <UART_SetConfig+0x7ae>
 801919c:	2304      	movs	r3, #4
 801919e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191a2:	e016      	b.n	80191d2 <UART_SetConfig+0x7ae>
 80191a4:	2308      	movs	r3, #8
 80191a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191aa:	e012      	b.n	80191d2 <UART_SetConfig+0x7ae>
 80191ac:	2310      	movs	r3, #16
 80191ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191b2:	e00e      	b.n	80191d2 <UART_SetConfig+0x7ae>
 80191b4:	2320      	movs	r3, #32
 80191b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191ba:	e00a      	b.n	80191d2 <UART_SetConfig+0x7ae>
 80191bc:	2340      	movs	r3, #64	@ 0x40
 80191be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191c2:	e006      	b.n	80191d2 <UART_SetConfig+0x7ae>
 80191c4:	2380      	movs	r3, #128	@ 0x80
 80191c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191ca:	e002      	b.n	80191d2 <UART_SetConfig+0x7ae>
 80191cc:	2380      	movs	r3, #128	@ 0x80
 80191ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80191d2:	697b      	ldr	r3, [r7, #20]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	4a55      	ldr	r2, [pc, #340]	@ (801932c <UART_SetConfig+0x908>)
 80191d8:	4293      	cmp	r3, r2
 80191da:	f040 80f8 	bne.w	80193ce <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80191de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80191e2:	2b20      	cmp	r3, #32
 80191e4:	dc46      	bgt.n	8019274 <UART_SetConfig+0x850>
 80191e6:	2b02      	cmp	r3, #2
 80191e8:	db75      	blt.n	80192d6 <UART_SetConfig+0x8b2>
 80191ea:	3b02      	subs	r3, #2
 80191ec:	2b1e      	cmp	r3, #30
 80191ee:	d872      	bhi.n	80192d6 <UART_SetConfig+0x8b2>
 80191f0:	a201      	add	r2, pc, #4	@ (adr r2, 80191f8 <UART_SetConfig+0x7d4>)
 80191f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191f6:	bf00      	nop
 80191f8:	0801927b 	.word	0x0801927b
 80191fc:	080192d7 	.word	0x080192d7
 8019200:	08019283 	.word	0x08019283
 8019204:	080192d7 	.word	0x080192d7
 8019208:	080192d7 	.word	0x080192d7
 801920c:	080192d7 	.word	0x080192d7
 8019210:	08019293 	.word	0x08019293
 8019214:	080192d7 	.word	0x080192d7
 8019218:	080192d7 	.word	0x080192d7
 801921c:	080192d7 	.word	0x080192d7
 8019220:	080192d7 	.word	0x080192d7
 8019224:	080192d7 	.word	0x080192d7
 8019228:	080192d7 	.word	0x080192d7
 801922c:	080192d7 	.word	0x080192d7
 8019230:	080192a3 	.word	0x080192a3
 8019234:	080192d7 	.word	0x080192d7
 8019238:	080192d7 	.word	0x080192d7
 801923c:	080192d7 	.word	0x080192d7
 8019240:	080192d7 	.word	0x080192d7
 8019244:	080192d7 	.word	0x080192d7
 8019248:	080192d7 	.word	0x080192d7
 801924c:	080192d7 	.word	0x080192d7
 8019250:	080192d7 	.word	0x080192d7
 8019254:	080192d7 	.word	0x080192d7
 8019258:	080192d7 	.word	0x080192d7
 801925c:	080192d7 	.word	0x080192d7
 8019260:	080192d7 	.word	0x080192d7
 8019264:	080192d7 	.word	0x080192d7
 8019268:	080192d7 	.word	0x080192d7
 801926c:	080192d7 	.word	0x080192d7
 8019270:	080192c9 	.word	0x080192c9
 8019274:	2b40      	cmp	r3, #64	@ 0x40
 8019276:	d02a      	beq.n	80192ce <UART_SetConfig+0x8aa>
 8019278:	e02d      	b.n	80192d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801927a:	f7fa fd8b 	bl	8013d94 <HAL_RCCEx_GetD3PCLK1Freq>
 801927e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019280:	e02f      	b.n	80192e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019282:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019286:	4618      	mov	r0, r3
 8019288:	f7fa fd9a 	bl	8013dc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801928c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801928e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019290:	e027      	b.n	80192e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019292:	f107 0318 	add.w	r3, r7, #24
 8019296:	4618      	mov	r0, r3
 8019298:	f7fa fee6 	bl	8014068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801929c:	69fb      	ldr	r3, [r7, #28]
 801929e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192a0:	e01f      	b.n	80192e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80192a2:	4b21      	ldr	r3, [pc, #132]	@ (8019328 <UART_SetConfig+0x904>)
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	f003 0320 	and.w	r3, r3, #32
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d009      	beq.n	80192c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80192ae:	4b1e      	ldr	r3, [pc, #120]	@ (8019328 <UART_SetConfig+0x904>)
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	08db      	lsrs	r3, r3, #3
 80192b4:	f003 0303 	and.w	r3, r3, #3
 80192b8:	4a1d      	ldr	r2, [pc, #116]	@ (8019330 <UART_SetConfig+0x90c>)
 80192ba:	fa22 f303 	lsr.w	r3, r2, r3
 80192be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80192c0:	e00f      	b.n	80192e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80192c2:	4b1b      	ldr	r3, [pc, #108]	@ (8019330 <UART_SetConfig+0x90c>)
 80192c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192c6:	e00c      	b.n	80192e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80192c8:	4b1a      	ldr	r3, [pc, #104]	@ (8019334 <UART_SetConfig+0x910>)
 80192ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192cc:	e009      	b.n	80192e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80192ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80192d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192d4:	e005      	b.n	80192e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80192d6:	2300      	movs	r3, #0
 80192d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80192da:	2301      	movs	r3, #1
 80192dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80192e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80192e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	f000 81ee 	beq.w	80196c6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80192ea:	697b      	ldr	r3, [r7, #20]
 80192ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192ee:	4a12      	ldr	r2, [pc, #72]	@ (8019338 <UART_SetConfig+0x914>)
 80192f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80192f4:	461a      	mov	r2, r3
 80192f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80192fc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80192fe:	697b      	ldr	r3, [r7, #20]
 8019300:	685a      	ldr	r2, [r3, #4]
 8019302:	4613      	mov	r3, r2
 8019304:	005b      	lsls	r3, r3, #1
 8019306:	4413      	add	r3, r2
 8019308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801930a:	429a      	cmp	r2, r3
 801930c:	d305      	bcc.n	801931a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801930e:	697b      	ldr	r3, [r7, #20]
 8019310:	685b      	ldr	r3, [r3, #4]
 8019312:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019316:	429a      	cmp	r2, r3
 8019318:	d910      	bls.n	801933c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801931a:	2301      	movs	r3, #1
 801931c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019320:	e1d1      	b.n	80196c6 <UART_SetConfig+0xca2>
 8019322:	bf00      	nop
 8019324:	40011c00 	.word	0x40011c00
 8019328:	58024400 	.word	0x58024400
 801932c:	58000c00 	.word	0x58000c00
 8019330:	03d09000 	.word	0x03d09000
 8019334:	003d0900 	.word	0x003d0900
 8019338:	0801ea7c 	.word	0x0801ea7c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801933c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801933e:	2200      	movs	r2, #0
 8019340:	60bb      	str	r3, [r7, #8]
 8019342:	60fa      	str	r2, [r7, #12]
 8019344:	697b      	ldr	r3, [r7, #20]
 8019346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019348:	4ac0      	ldr	r2, [pc, #768]	@ (801964c <UART_SetConfig+0xc28>)
 801934a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801934e:	b29b      	uxth	r3, r3
 8019350:	2200      	movs	r2, #0
 8019352:	603b      	str	r3, [r7, #0]
 8019354:	607a      	str	r2, [r7, #4]
 8019356:	e9d7 2300 	ldrd	r2, r3, [r7]
 801935a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801935e:	f7e7 f827 	bl	80003b0 <__aeabi_uldivmod>
 8019362:	4602      	mov	r2, r0
 8019364:	460b      	mov	r3, r1
 8019366:	4610      	mov	r0, r2
 8019368:	4619      	mov	r1, r3
 801936a:	f04f 0200 	mov.w	r2, #0
 801936e:	f04f 0300 	mov.w	r3, #0
 8019372:	020b      	lsls	r3, r1, #8
 8019374:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8019378:	0202      	lsls	r2, r0, #8
 801937a:	6979      	ldr	r1, [r7, #20]
 801937c:	6849      	ldr	r1, [r1, #4]
 801937e:	0849      	lsrs	r1, r1, #1
 8019380:	2000      	movs	r0, #0
 8019382:	460c      	mov	r4, r1
 8019384:	4605      	mov	r5, r0
 8019386:	eb12 0804 	adds.w	r8, r2, r4
 801938a:	eb43 0905 	adc.w	r9, r3, r5
 801938e:	697b      	ldr	r3, [r7, #20]
 8019390:	685b      	ldr	r3, [r3, #4]
 8019392:	2200      	movs	r2, #0
 8019394:	469a      	mov	sl, r3
 8019396:	4693      	mov	fp, r2
 8019398:	4652      	mov	r2, sl
 801939a:	465b      	mov	r3, fp
 801939c:	4640      	mov	r0, r8
 801939e:	4649      	mov	r1, r9
 80193a0:	f7e7 f806 	bl	80003b0 <__aeabi_uldivmod>
 80193a4:	4602      	mov	r2, r0
 80193a6:	460b      	mov	r3, r1
 80193a8:	4613      	mov	r3, r2
 80193aa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80193ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80193b2:	d308      	bcc.n	80193c6 <UART_SetConfig+0x9a2>
 80193b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80193ba:	d204      	bcs.n	80193c6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80193bc:	697b      	ldr	r3, [r7, #20]
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80193c2:	60da      	str	r2, [r3, #12]
 80193c4:	e17f      	b.n	80196c6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80193c6:	2301      	movs	r3, #1
 80193c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80193cc:	e17b      	b.n	80196c6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80193ce:	697b      	ldr	r3, [r7, #20]
 80193d0:	69db      	ldr	r3, [r3, #28]
 80193d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80193d6:	f040 80bd 	bne.w	8019554 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80193da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80193de:	2b20      	cmp	r3, #32
 80193e0:	dc48      	bgt.n	8019474 <UART_SetConfig+0xa50>
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	db7b      	blt.n	80194de <UART_SetConfig+0xaba>
 80193e6:	2b20      	cmp	r3, #32
 80193e8:	d879      	bhi.n	80194de <UART_SetConfig+0xaba>
 80193ea:	a201      	add	r2, pc, #4	@ (adr r2, 80193f0 <UART_SetConfig+0x9cc>)
 80193ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193f0:	0801947b 	.word	0x0801947b
 80193f4:	08019483 	.word	0x08019483
 80193f8:	080194df 	.word	0x080194df
 80193fc:	080194df 	.word	0x080194df
 8019400:	0801948b 	.word	0x0801948b
 8019404:	080194df 	.word	0x080194df
 8019408:	080194df 	.word	0x080194df
 801940c:	080194df 	.word	0x080194df
 8019410:	0801949b 	.word	0x0801949b
 8019414:	080194df 	.word	0x080194df
 8019418:	080194df 	.word	0x080194df
 801941c:	080194df 	.word	0x080194df
 8019420:	080194df 	.word	0x080194df
 8019424:	080194df 	.word	0x080194df
 8019428:	080194df 	.word	0x080194df
 801942c:	080194df 	.word	0x080194df
 8019430:	080194ab 	.word	0x080194ab
 8019434:	080194df 	.word	0x080194df
 8019438:	080194df 	.word	0x080194df
 801943c:	080194df 	.word	0x080194df
 8019440:	080194df 	.word	0x080194df
 8019444:	080194df 	.word	0x080194df
 8019448:	080194df 	.word	0x080194df
 801944c:	080194df 	.word	0x080194df
 8019450:	080194df 	.word	0x080194df
 8019454:	080194df 	.word	0x080194df
 8019458:	080194df 	.word	0x080194df
 801945c:	080194df 	.word	0x080194df
 8019460:	080194df 	.word	0x080194df
 8019464:	080194df 	.word	0x080194df
 8019468:	080194df 	.word	0x080194df
 801946c:	080194df 	.word	0x080194df
 8019470:	080194d1 	.word	0x080194d1
 8019474:	2b40      	cmp	r3, #64	@ 0x40
 8019476:	d02e      	beq.n	80194d6 <UART_SetConfig+0xab2>
 8019478:	e031      	b.n	80194de <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801947a:	f7f8 fded 	bl	8012058 <HAL_RCC_GetPCLK1Freq>
 801947e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019480:	e033      	b.n	80194ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019482:	f7f8 fdff 	bl	8012084 <HAL_RCC_GetPCLK2Freq>
 8019486:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019488:	e02f      	b.n	80194ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801948a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801948e:	4618      	mov	r0, r3
 8019490:	f7fa fc96 	bl	8013dc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8019494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019498:	e027      	b.n	80194ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801949a:	f107 0318 	add.w	r3, r7, #24
 801949e:	4618      	mov	r0, r3
 80194a0:	f7fa fde2 	bl	8014068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80194a4:	69fb      	ldr	r3, [r7, #28]
 80194a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194a8:	e01f      	b.n	80194ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80194aa:	4b69      	ldr	r3, [pc, #420]	@ (8019650 <UART_SetConfig+0xc2c>)
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	f003 0320 	and.w	r3, r3, #32
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d009      	beq.n	80194ca <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80194b6:	4b66      	ldr	r3, [pc, #408]	@ (8019650 <UART_SetConfig+0xc2c>)
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	08db      	lsrs	r3, r3, #3
 80194bc:	f003 0303 	and.w	r3, r3, #3
 80194c0:	4a64      	ldr	r2, [pc, #400]	@ (8019654 <UART_SetConfig+0xc30>)
 80194c2:	fa22 f303 	lsr.w	r3, r2, r3
 80194c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80194c8:	e00f      	b.n	80194ea <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80194ca:	4b62      	ldr	r3, [pc, #392]	@ (8019654 <UART_SetConfig+0xc30>)
 80194cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194ce:	e00c      	b.n	80194ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80194d0:	4b61      	ldr	r3, [pc, #388]	@ (8019658 <UART_SetConfig+0xc34>)
 80194d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194d4:	e009      	b.n	80194ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80194d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80194da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194dc:	e005      	b.n	80194ea <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80194de:	2300      	movs	r3, #0
 80194e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80194e2:	2301      	movs	r3, #1
 80194e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80194e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80194ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	f000 80ea 	beq.w	80196c6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80194f2:	697b      	ldr	r3, [r7, #20]
 80194f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80194f6:	4a55      	ldr	r2, [pc, #340]	@ (801964c <UART_SetConfig+0xc28>)
 80194f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80194fc:	461a      	mov	r2, r3
 80194fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019500:	fbb3 f3f2 	udiv	r3, r3, r2
 8019504:	005a      	lsls	r2, r3, #1
 8019506:	697b      	ldr	r3, [r7, #20]
 8019508:	685b      	ldr	r3, [r3, #4]
 801950a:	085b      	lsrs	r3, r3, #1
 801950c:	441a      	add	r2, r3
 801950e:	697b      	ldr	r3, [r7, #20]
 8019510:	685b      	ldr	r3, [r3, #4]
 8019512:	fbb2 f3f3 	udiv	r3, r2, r3
 8019516:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801951a:	2b0f      	cmp	r3, #15
 801951c:	d916      	bls.n	801954c <UART_SetConfig+0xb28>
 801951e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019524:	d212      	bcs.n	801954c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8019526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019528:	b29b      	uxth	r3, r3
 801952a:	f023 030f 	bic.w	r3, r3, #15
 801952e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019532:	085b      	lsrs	r3, r3, #1
 8019534:	b29b      	uxth	r3, r3
 8019536:	f003 0307 	and.w	r3, r3, #7
 801953a:	b29a      	uxth	r2, r3
 801953c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801953e:	4313      	orrs	r3, r2
 8019540:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8019542:	697b      	ldr	r3, [r7, #20]
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019548:	60da      	str	r2, [r3, #12]
 801954a:	e0bc      	b.n	80196c6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801954c:	2301      	movs	r3, #1
 801954e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019552:	e0b8      	b.n	80196c6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8019554:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019558:	2b20      	cmp	r3, #32
 801955a:	dc4b      	bgt.n	80195f4 <UART_SetConfig+0xbd0>
 801955c:	2b00      	cmp	r3, #0
 801955e:	f2c0 8087 	blt.w	8019670 <UART_SetConfig+0xc4c>
 8019562:	2b20      	cmp	r3, #32
 8019564:	f200 8084 	bhi.w	8019670 <UART_SetConfig+0xc4c>
 8019568:	a201      	add	r2, pc, #4	@ (adr r2, 8019570 <UART_SetConfig+0xb4c>)
 801956a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801956e:	bf00      	nop
 8019570:	080195fb 	.word	0x080195fb
 8019574:	08019603 	.word	0x08019603
 8019578:	08019671 	.word	0x08019671
 801957c:	08019671 	.word	0x08019671
 8019580:	0801960b 	.word	0x0801960b
 8019584:	08019671 	.word	0x08019671
 8019588:	08019671 	.word	0x08019671
 801958c:	08019671 	.word	0x08019671
 8019590:	0801961b 	.word	0x0801961b
 8019594:	08019671 	.word	0x08019671
 8019598:	08019671 	.word	0x08019671
 801959c:	08019671 	.word	0x08019671
 80195a0:	08019671 	.word	0x08019671
 80195a4:	08019671 	.word	0x08019671
 80195a8:	08019671 	.word	0x08019671
 80195ac:	08019671 	.word	0x08019671
 80195b0:	0801962b 	.word	0x0801962b
 80195b4:	08019671 	.word	0x08019671
 80195b8:	08019671 	.word	0x08019671
 80195bc:	08019671 	.word	0x08019671
 80195c0:	08019671 	.word	0x08019671
 80195c4:	08019671 	.word	0x08019671
 80195c8:	08019671 	.word	0x08019671
 80195cc:	08019671 	.word	0x08019671
 80195d0:	08019671 	.word	0x08019671
 80195d4:	08019671 	.word	0x08019671
 80195d8:	08019671 	.word	0x08019671
 80195dc:	08019671 	.word	0x08019671
 80195e0:	08019671 	.word	0x08019671
 80195e4:	08019671 	.word	0x08019671
 80195e8:	08019671 	.word	0x08019671
 80195ec:	08019671 	.word	0x08019671
 80195f0:	08019663 	.word	0x08019663
 80195f4:	2b40      	cmp	r3, #64	@ 0x40
 80195f6:	d037      	beq.n	8019668 <UART_SetConfig+0xc44>
 80195f8:	e03a      	b.n	8019670 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80195fa:	f7f8 fd2d 	bl	8012058 <HAL_RCC_GetPCLK1Freq>
 80195fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019600:	e03c      	b.n	801967c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019602:	f7f8 fd3f 	bl	8012084 <HAL_RCC_GetPCLK2Freq>
 8019606:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019608:	e038      	b.n	801967c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801960a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801960e:	4618      	mov	r0, r3
 8019610:	f7fa fbd6 	bl	8013dc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8019614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019618:	e030      	b.n	801967c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801961a:	f107 0318 	add.w	r3, r7, #24
 801961e:	4618      	mov	r0, r3
 8019620:	f7fa fd22 	bl	8014068 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8019624:	69fb      	ldr	r3, [r7, #28]
 8019626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019628:	e028      	b.n	801967c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801962a:	4b09      	ldr	r3, [pc, #36]	@ (8019650 <UART_SetConfig+0xc2c>)
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	f003 0320 	and.w	r3, r3, #32
 8019632:	2b00      	cmp	r3, #0
 8019634:	d012      	beq.n	801965c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8019636:	4b06      	ldr	r3, [pc, #24]	@ (8019650 <UART_SetConfig+0xc2c>)
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	08db      	lsrs	r3, r3, #3
 801963c:	f003 0303 	and.w	r3, r3, #3
 8019640:	4a04      	ldr	r2, [pc, #16]	@ (8019654 <UART_SetConfig+0xc30>)
 8019642:	fa22 f303 	lsr.w	r3, r2, r3
 8019646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019648:	e018      	b.n	801967c <UART_SetConfig+0xc58>
 801964a:	bf00      	nop
 801964c:	0801ea7c 	.word	0x0801ea7c
 8019650:	58024400 	.word	0x58024400
 8019654:	03d09000 	.word	0x03d09000
 8019658:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801965c:	4b24      	ldr	r3, [pc, #144]	@ (80196f0 <UART_SetConfig+0xccc>)
 801965e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019660:	e00c      	b.n	801967c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8019662:	4b24      	ldr	r3, [pc, #144]	@ (80196f4 <UART_SetConfig+0xcd0>)
 8019664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019666:	e009      	b.n	801967c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019668:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801966c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801966e:	e005      	b.n	801967c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8019670:	2300      	movs	r3, #0
 8019672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8019674:	2301      	movs	r3, #1
 8019676:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801967a:	bf00      	nop
    }

    if (pclk != 0U)
 801967c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801967e:	2b00      	cmp	r3, #0
 8019680:	d021      	beq.n	80196c6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019682:	697b      	ldr	r3, [r7, #20]
 8019684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019686:	4a1c      	ldr	r2, [pc, #112]	@ (80196f8 <UART_SetConfig+0xcd4>)
 8019688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801968c:	461a      	mov	r2, r3
 801968e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019690:	fbb3 f2f2 	udiv	r2, r3, r2
 8019694:	697b      	ldr	r3, [r7, #20]
 8019696:	685b      	ldr	r3, [r3, #4]
 8019698:	085b      	lsrs	r3, r3, #1
 801969a:	441a      	add	r2, r3
 801969c:	697b      	ldr	r3, [r7, #20]
 801969e:	685b      	ldr	r3, [r3, #4]
 80196a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80196a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80196a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196a8:	2b0f      	cmp	r3, #15
 80196aa:	d909      	bls.n	80196c0 <UART_SetConfig+0xc9c>
 80196ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80196b2:	d205      	bcs.n	80196c0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80196b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196b6:	b29a      	uxth	r2, r3
 80196b8:	697b      	ldr	r3, [r7, #20]
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	60da      	str	r2, [r3, #12]
 80196be:	e002      	b.n	80196c6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80196c0:	2301      	movs	r3, #1
 80196c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80196c6:	697b      	ldr	r3, [r7, #20]
 80196c8:	2201      	movs	r2, #1
 80196ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80196ce:	697b      	ldr	r3, [r7, #20]
 80196d0:	2201      	movs	r2, #1
 80196d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80196d6:	697b      	ldr	r3, [r7, #20]
 80196d8:	2200      	movs	r2, #0
 80196da:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80196dc:	697b      	ldr	r3, [r7, #20]
 80196de:	2200      	movs	r2, #0
 80196e0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80196e2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80196e6:	4618      	mov	r0, r3
 80196e8:	3748      	adds	r7, #72	@ 0x48
 80196ea:	46bd      	mov	sp, r7
 80196ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80196f0:	03d09000 	.word	0x03d09000
 80196f4:	003d0900 	.word	0x003d0900
 80196f8:	0801ea7c 	.word	0x0801ea7c

080196fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80196fc:	b480      	push	{r7}
 80196fe:	b083      	sub	sp, #12
 8019700:	af00      	add	r7, sp, #0
 8019702:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019708:	f003 0308 	and.w	r3, r3, #8
 801970c:	2b00      	cmp	r3, #0
 801970e:	d00a      	beq.n	8019726 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	685b      	ldr	r3, [r3, #4]
 8019716:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	430a      	orrs	r2, r1
 8019724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801972a:	f003 0301 	and.w	r3, r3, #1
 801972e:	2b00      	cmp	r3, #0
 8019730:	d00a      	beq.n	8019748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	685b      	ldr	r3, [r3, #4]
 8019738:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	430a      	orrs	r2, r1
 8019746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801974c:	f003 0302 	and.w	r3, r3, #2
 8019750:	2b00      	cmp	r3, #0
 8019752:	d00a      	beq.n	801976a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	685b      	ldr	r3, [r3, #4]
 801975a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	430a      	orrs	r2, r1
 8019768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801976e:	f003 0304 	and.w	r3, r3, #4
 8019772:	2b00      	cmp	r3, #0
 8019774:	d00a      	beq.n	801978c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	681b      	ldr	r3, [r3, #0]
 801977a:	685b      	ldr	r3, [r3, #4]
 801977c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	430a      	orrs	r2, r1
 801978a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019790:	f003 0310 	and.w	r3, r3, #16
 8019794:	2b00      	cmp	r3, #0
 8019796:	d00a      	beq.n	80197ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	689b      	ldr	r3, [r3, #8]
 801979e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	430a      	orrs	r2, r1
 80197ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80197b2:	f003 0320 	and.w	r3, r3, #32
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d00a      	beq.n	80197d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	681b      	ldr	r3, [r3, #0]
 80197be:	689b      	ldr	r3, [r3, #8]
 80197c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	430a      	orrs	r2, r1
 80197ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80197d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d01a      	beq.n	8019812 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	685b      	ldr	r3, [r3, #4]
 80197e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	430a      	orrs	r2, r1
 80197f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80197f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80197fa:	d10a      	bne.n	8019812 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	685b      	ldr	r3, [r3, #4]
 8019802:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	681b      	ldr	r3, [r3, #0]
 801980e:	430a      	orrs	r2, r1
 8019810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801981a:	2b00      	cmp	r3, #0
 801981c:	d00a      	beq.n	8019834 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	685b      	ldr	r3, [r3, #4]
 8019824:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	430a      	orrs	r2, r1
 8019832:	605a      	str	r2, [r3, #4]
  }
}
 8019834:	bf00      	nop
 8019836:	370c      	adds	r7, #12
 8019838:	46bd      	mov	sp, r7
 801983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801983e:	4770      	bx	lr

08019840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019840:	b580      	push	{r7, lr}
 8019842:	b098      	sub	sp, #96	@ 0x60
 8019844:	af02      	add	r7, sp, #8
 8019846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	2200      	movs	r2, #0
 801984c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019850:	f7ef fe94 	bl	800957c <HAL_GetTick>
 8019854:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	f003 0308 	and.w	r3, r3, #8
 8019860:	2b08      	cmp	r3, #8
 8019862:	d12f      	bne.n	80198c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019864:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019868:	9300      	str	r3, [sp, #0]
 801986a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801986c:	2200      	movs	r2, #0
 801986e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8019872:	6878      	ldr	r0, [r7, #4]
 8019874:	f000 f88e 	bl	8019994 <UART_WaitOnFlagUntilTimeout>
 8019878:	4603      	mov	r3, r0
 801987a:	2b00      	cmp	r3, #0
 801987c:	d022      	beq.n	80198c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019886:	e853 3f00 	ldrex	r3, [r3]
 801988a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801988c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801988e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019892:	653b      	str	r3, [r7, #80]	@ 0x50
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	461a      	mov	r2, r3
 801989a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801989c:	647b      	str	r3, [r7, #68]	@ 0x44
 801989e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80198a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80198a4:	e841 2300 	strex	r3, r2, [r1]
 80198a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80198aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d1e6      	bne.n	801987e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	2220      	movs	r2, #32
 80198b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	2200      	movs	r2, #0
 80198bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80198c0:	2303      	movs	r3, #3
 80198c2:	e063      	b.n	801998c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	f003 0304 	and.w	r3, r3, #4
 80198ce:	2b04      	cmp	r3, #4
 80198d0:	d149      	bne.n	8019966 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80198d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80198d6:	9300      	str	r3, [sp, #0]
 80198d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80198da:	2200      	movs	r2, #0
 80198dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80198e0:	6878      	ldr	r0, [r7, #4]
 80198e2:	f000 f857 	bl	8019994 <UART_WaitOnFlagUntilTimeout>
 80198e6:	4603      	mov	r3, r0
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d03c      	beq.n	8019966 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80198f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198f4:	e853 3f00 	ldrex	r3, [r3]
 80198f8:	623b      	str	r3, [r7, #32]
   return(result);
 80198fa:	6a3b      	ldr	r3, [r7, #32]
 80198fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019900:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	461a      	mov	r2, r3
 8019908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801990a:	633b      	str	r3, [r7, #48]	@ 0x30
 801990c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801990e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019912:	e841 2300 	strex	r3, r2, [r1]
 8019916:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801991a:	2b00      	cmp	r3, #0
 801991c:	d1e6      	bne.n	80198ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	3308      	adds	r3, #8
 8019924:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019926:	693b      	ldr	r3, [r7, #16]
 8019928:	e853 3f00 	ldrex	r3, [r3]
 801992c:	60fb      	str	r3, [r7, #12]
   return(result);
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	f023 0301 	bic.w	r3, r3, #1
 8019934:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	681b      	ldr	r3, [r3, #0]
 801993a:	3308      	adds	r3, #8
 801993c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801993e:	61fa      	str	r2, [r7, #28]
 8019940:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019942:	69b9      	ldr	r1, [r7, #24]
 8019944:	69fa      	ldr	r2, [r7, #28]
 8019946:	e841 2300 	strex	r3, r2, [r1]
 801994a:	617b      	str	r3, [r7, #20]
   return(result);
 801994c:	697b      	ldr	r3, [r7, #20]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d1e5      	bne.n	801991e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	2220      	movs	r2, #32
 8019956:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	2200      	movs	r2, #0
 801995e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019962:	2303      	movs	r3, #3
 8019964:	e012      	b.n	801998c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	2220      	movs	r2, #32
 801996a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	2220      	movs	r2, #32
 8019972:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	2200      	movs	r2, #0
 801997a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	2200      	movs	r2, #0
 8019980:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	2200      	movs	r2, #0
 8019986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801998a:	2300      	movs	r3, #0
}
 801998c:	4618      	mov	r0, r3
 801998e:	3758      	adds	r7, #88	@ 0x58
 8019990:	46bd      	mov	sp, r7
 8019992:	bd80      	pop	{r7, pc}

08019994 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8019994:	b580      	push	{r7, lr}
 8019996:	b084      	sub	sp, #16
 8019998:	af00      	add	r7, sp, #0
 801999a:	60f8      	str	r0, [r7, #12]
 801999c:	60b9      	str	r1, [r7, #8]
 801999e:	603b      	str	r3, [r7, #0]
 80199a0:	4613      	mov	r3, r2
 80199a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80199a4:	e04f      	b.n	8019a46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80199a6:	69bb      	ldr	r3, [r7, #24]
 80199a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80199ac:	d04b      	beq.n	8019a46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80199ae:	f7ef fde5 	bl	800957c <HAL_GetTick>
 80199b2:	4602      	mov	r2, r0
 80199b4:	683b      	ldr	r3, [r7, #0]
 80199b6:	1ad3      	subs	r3, r2, r3
 80199b8:	69ba      	ldr	r2, [r7, #24]
 80199ba:	429a      	cmp	r2, r3
 80199bc:	d302      	bcc.n	80199c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80199be:	69bb      	ldr	r3, [r7, #24]
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d101      	bne.n	80199c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80199c4:	2303      	movs	r3, #3
 80199c6:	e04e      	b.n	8019a66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80199c8:	68fb      	ldr	r3, [r7, #12]
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	f003 0304 	and.w	r3, r3, #4
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d037      	beq.n	8019a46 <UART_WaitOnFlagUntilTimeout+0xb2>
 80199d6:	68bb      	ldr	r3, [r7, #8]
 80199d8:	2b80      	cmp	r3, #128	@ 0x80
 80199da:	d034      	beq.n	8019a46 <UART_WaitOnFlagUntilTimeout+0xb2>
 80199dc:	68bb      	ldr	r3, [r7, #8]
 80199de:	2b40      	cmp	r3, #64	@ 0x40
 80199e0:	d031      	beq.n	8019a46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	69db      	ldr	r3, [r3, #28]
 80199e8:	f003 0308 	and.w	r3, r3, #8
 80199ec:	2b08      	cmp	r3, #8
 80199ee:	d110      	bne.n	8019a12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	2208      	movs	r2, #8
 80199f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80199f8:	68f8      	ldr	r0, [r7, #12]
 80199fa:	f000 f95b 	bl	8019cb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	2208      	movs	r2, #8
 8019a02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019a06:	68fb      	ldr	r3, [r7, #12]
 8019a08:	2200      	movs	r2, #0
 8019a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8019a0e:	2301      	movs	r3, #1
 8019a10:	e029      	b.n	8019a66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	69db      	ldr	r3, [r3, #28]
 8019a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019a1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019a20:	d111      	bne.n	8019a46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019a2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019a2c:	68f8      	ldr	r0, [r7, #12]
 8019a2e:	f000 f941 	bl	8019cb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	2220      	movs	r2, #32
 8019a36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	2200      	movs	r2, #0
 8019a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8019a42:	2303      	movs	r3, #3
 8019a44:	e00f      	b.n	8019a66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019a46:	68fb      	ldr	r3, [r7, #12]
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	69da      	ldr	r2, [r3, #28]
 8019a4c:	68bb      	ldr	r3, [r7, #8]
 8019a4e:	4013      	ands	r3, r2
 8019a50:	68ba      	ldr	r2, [r7, #8]
 8019a52:	429a      	cmp	r2, r3
 8019a54:	bf0c      	ite	eq
 8019a56:	2301      	moveq	r3, #1
 8019a58:	2300      	movne	r3, #0
 8019a5a:	b2db      	uxtb	r3, r3
 8019a5c:	461a      	mov	r2, r3
 8019a5e:	79fb      	ldrb	r3, [r7, #7]
 8019a60:	429a      	cmp	r2, r3
 8019a62:	d0a0      	beq.n	80199a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8019a64:	2300      	movs	r3, #0
}
 8019a66:	4618      	mov	r0, r3
 8019a68:	3710      	adds	r7, #16
 8019a6a:	46bd      	mov	sp, r7
 8019a6c:	bd80      	pop	{r7, pc}
	...

08019a70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019a70:	b480      	push	{r7}
 8019a72:	b0a3      	sub	sp, #140	@ 0x8c
 8019a74:	af00      	add	r7, sp, #0
 8019a76:	60f8      	str	r0, [r7, #12]
 8019a78:	60b9      	str	r1, [r7, #8]
 8019a7a:	4613      	mov	r3, r2
 8019a7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8019a7e:	68fb      	ldr	r3, [r7, #12]
 8019a80:	68ba      	ldr	r2, [r7, #8]
 8019a82:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	88fa      	ldrh	r2, [r7, #6]
 8019a88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	88fa      	ldrh	r2, [r7, #6]
 8019a90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	2200      	movs	r2, #0
 8019a98:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	689b      	ldr	r3, [r3, #8]
 8019a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019aa2:	d10e      	bne.n	8019ac2 <UART_Start_Receive_IT+0x52>
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	691b      	ldr	r3, [r3, #16]
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d105      	bne.n	8019ab8 <UART_Start_Receive_IT+0x48>
 8019aac:	68fb      	ldr	r3, [r7, #12]
 8019aae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8019ab2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019ab6:	e02d      	b.n	8019b14 <UART_Start_Receive_IT+0xa4>
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	22ff      	movs	r2, #255	@ 0xff
 8019abc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019ac0:	e028      	b.n	8019b14 <UART_Start_Receive_IT+0xa4>
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	689b      	ldr	r3, [r3, #8]
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d10d      	bne.n	8019ae6 <UART_Start_Receive_IT+0x76>
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	691b      	ldr	r3, [r3, #16]
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d104      	bne.n	8019adc <UART_Start_Receive_IT+0x6c>
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	22ff      	movs	r2, #255	@ 0xff
 8019ad6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019ada:	e01b      	b.n	8019b14 <UART_Start_Receive_IT+0xa4>
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	227f      	movs	r2, #127	@ 0x7f
 8019ae0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019ae4:	e016      	b.n	8019b14 <UART_Start_Receive_IT+0xa4>
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	689b      	ldr	r3, [r3, #8]
 8019aea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019aee:	d10d      	bne.n	8019b0c <UART_Start_Receive_IT+0x9c>
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	691b      	ldr	r3, [r3, #16]
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d104      	bne.n	8019b02 <UART_Start_Receive_IT+0x92>
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	227f      	movs	r2, #127	@ 0x7f
 8019afc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019b00:	e008      	b.n	8019b14 <UART_Start_Receive_IT+0xa4>
 8019b02:	68fb      	ldr	r3, [r7, #12]
 8019b04:	223f      	movs	r2, #63	@ 0x3f
 8019b06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019b0a:	e003      	b.n	8019b14 <UART_Start_Receive_IT+0xa4>
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	2200      	movs	r2, #0
 8019b10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019b14:	68fb      	ldr	r3, [r7, #12]
 8019b16:	2200      	movs	r2, #0
 8019b18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8019b1c:	68fb      	ldr	r3, [r7, #12]
 8019b1e:	2222      	movs	r2, #34	@ 0x22
 8019b20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	3308      	adds	r3, #8
 8019b2a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019b2e:	e853 3f00 	ldrex	r3, [r3]
 8019b32:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8019b34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019b36:	f043 0301 	orr.w	r3, r3, #1
 8019b3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	3308      	adds	r3, #8
 8019b44:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019b48:	673a      	str	r2, [r7, #112]	@ 0x70
 8019b4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b4c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8019b4e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019b50:	e841 2300 	strex	r3, r2, [r1]
 8019b54:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8019b56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d1e3      	bne.n	8019b24 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019b64:	d14f      	bne.n	8019c06 <UART_Start_Receive_IT+0x196>
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019b6c:	88fa      	ldrh	r2, [r7, #6]
 8019b6e:	429a      	cmp	r2, r3
 8019b70:	d349      	bcc.n	8019c06 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	689b      	ldr	r3, [r3, #8]
 8019b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019b7a:	d107      	bne.n	8019b8c <UART_Start_Receive_IT+0x11c>
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	691b      	ldr	r3, [r3, #16]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d103      	bne.n	8019b8c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8019b84:	68fb      	ldr	r3, [r7, #12]
 8019b86:	4a47      	ldr	r2, [pc, #284]	@ (8019ca4 <UART_Start_Receive_IT+0x234>)
 8019b88:	675a      	str	r2, [r3, #116]	@ 0x74
 8019b8a:	e002      	b.n	8019b92 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8019b8c:	68fb      	ldr	r3, [r7, #12]
 8019b8e:	4a46      	ldr	r2, [pc, #280]	@ (8019ca8 <UART_Start_Receive_IT+0x238>)
 8019b90:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	691b      	ldr	r3, [r3, #16]
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d01a      	beq.n	8019bd0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019b9a:	68fb      	ldr	r3, [r7, #12]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019ba2:	e853 3f00 	ldrex	r3, [r3]
 8019ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019bae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	461a      	mov	r2, r3
 8019bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019bbe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019bc0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019bc2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019bc4:	e841 2300 	strex	r3, r2, [r1]
 8019bc8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8019bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d1e4      	bne.n	8019b9a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	3308      	adds	r3, #8
 8019bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019bda:	e853 3f00 	ldrex	r3, [r3]
 8019bde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8019be6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019be8:	68fb      	ldr	r3, [r7, #12]
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	3308      	adds	r3, #8
 8019bee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019bf0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8019bf2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019bf4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019bf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019bf8:	e841 2300 	strex	r3, r2, [r1]
 8019bfc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8019bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d1e5      	bne.n	8019bd0 <UART_Start_Receive_IT+0x160>
 8019c04:	e046      	b.n	8019c94 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	689b      	ldr	r3, [r3, #8]
 8019c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019c0e:	d107      	bne.n	8019c20 <UART_Start_Receive_IT+0x1b0>
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	691b      	ldr	r3, [r3, #16]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d103      	bne.n	8019c20 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8019c18:	68fb      	ldr	r3, [r7, #12]
 8019c1a:	4a24      	ldr	r2, [pc, #144]	@ (8019cac <UART_Start_Receive_IT+0x23c>)
 8019c1c:	675a      	str	r2, [r3, #116]	@ 0x74
 8019c1e:	e002      	b.n	8019c26 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	4a23      	ldr	r2, [pc, #140]	@ (8019cb0 <UART_Start_Receive_IT+0x240>)
 8019c24:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	691b      	ldr	r3, [r3, #16]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d019      	beq.n	8019c62 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c36:	e853 3f00 	ldrex	r3, [r3]
 8019c3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c3e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8019c42:	677b      	str	r3, [r7, #116]	@ 0x74
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	461a      	mov	r2, r3
 8019c4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8019c4e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019c52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019c54:	e841 2300 	strex	r3, r2, [r1]
 8019c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8019c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d1e6      	bne.n	8019c2e <UART_Start_Receive_IT+0x1be>
 8019c60:	e018      	b.n	8019c94 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c68:	697b      	ldr	r3, [r7, #20]
 8019c6a:	e853 3f00 	ldrex	r3, [r3]
 8019c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8019c70:	693b      	ldr	r3, [r7, #16]
 8019c72:	f043 0320 	orr.w	r3, r3, #32
 8019c76:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	461a      	mov	r2, r3
 8019c7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019c80:	623b      	str	r3, [r7, #32]
 8019c82:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c84:	69f9      	ldr	r1, [r7, #28]
 8019c86:	6a3a      	ldr	r2, [r7, #32]
 8019c88:	e841 2300 	strex	r3, r2, [r1]
 8019c8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8019c8e:	69bb      	ldr	r3, [r7, #24]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d1e6      	bne.n	8019c62 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8019c94:	2300      	movs	r3, #0
}
 8019c96:	4618      	mov	r0, r3
 8019c98:	378c      	adds	r7, #140	@ 0x8c
 8019c9a:	46bd      	mov	sp, r7
 8019c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ca0:	4770      	bx	lr
 8019ca2:	bf00      	nop
 8019ca4:	0801a815 	.word	0x0801a815
 8019ca8:	0801a4b1 	.word	0x0801a4b1
 8019cac:	0801a2f9 	.word	0x0801a2f9
 8019cb0:	0801a141 	.word	0x0801a141

08019cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019cb4:	b480      	push	{r7}
 8019cb6:	b095      	sub	sp, #84	@ 0x54
 8019cb8:	af00      	add	r7, sp, #0
 8019cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019cc4:	e853 3f00 	ldrex	r3, [r3]
 8019cc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ccc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	681b      	ldr	r3, [r3, #0]
 8019cd6:	461a      	mov	r2, r3
 8019cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019cda:	643b      	str	r3, [r7, #64]	@ 0x40
 8019cdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019cde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019ce0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019ce2:	e841 2300 	strex	r3, r2, [r1]
 8019ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d1e6      	bne.n	8019cbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	3308      	adds	r3, #8
 8019cf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019cf6:	6a3b      	ldr	r3, [r7, #32]
 8019cf8:	e853 3f00 	ldrex	r3, [r3]
 8019cfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8019cfe:	69fa      	ldr	r2, [r7, #28]
 8019d00:	4b1e      	ldr	r3, [pc, #120]	@ (8019d7c <UART_EndRxTransfer+0xc8>)
 8019d02:	4013      	ands	r3, r2
 8019d04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	3308      	adds	r3, #8
 8019d0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019d10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019d16:	e841 2300 	strex	r3, r2, [r1]
 8019d1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d1e5      	bne.n	8019cee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019d26:	2b01      	cmp	r3, #1
 8019d28:	d118      	bne.n	8019d5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d30:	68fb      	ldr	r3, [r7, #12]
 8019d32:	e853 3f00 	ldrex	r3, [r3]
 8019d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8019d38:	68bb      	ldr	r3, [r7, #8]
 8019d3a:	f023 0310 	bic.w	r3, r3, #16
 8019d3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	681b      	ldr	r3, [r3, #0]
 8019d44:	461a      	mov	r2, r3
 8019d46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d48:	61bb      	str	r3, [r7, #24]
 8019d4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d4c:	6979      	ldr	r1, [r7, #20]
 8019d4e:	69ba      	ldr	r2, [r7, #24]
 8019d50:	e841 2300 	strex	r3, r2, [r1]
 8019d54:	613b      	str	r3, [r7, #16]
   return(result);
 8019d56:	693b      	ldr	r3, [r7, #16]
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d1e6      	bne.n	8019d2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	2220      	movs	r2, #32
 8019d60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	2200      	movs	r2, #0
 8019d68:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	2200      	movs	r2, #0
 8019d6e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019d70:	bf00      	nop
 8019d72:	3754      	adds	r7, #84	@ 0x54
 8019d74:	46bd      	mov	sp, r7
 8019d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d7a:	4770      	bx	lr
 8019d7c:	effffffe 	.word	0xeffffffe

08019d80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019d80:	b580      	push	{r7, lr}
 8019d82:	b084      	sub	sp, #16
 8019d84:	af00      	add	r7, sp, #0
 8019d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019d8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	2200      	movs	r2, #0
 8019d92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8019d96:	68f8      	ldr	r0, [r7, #12]
 8019d98:	f7fe fe2e 	bl	80189f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019d9c:	bf00      	nop
 8019d9e:	3710      	adds	r7, #16
 8019da0:	46bd      	mov	sp, r7
 8019da2:	bd80      	pop	{r7, pc}

08019da4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019da4:	b480      	push	{r7}
 8019da6:	b08f      	sub	sp, #60	@ 0x3c
 8019da8:	af00      	add	r7, sp, #0
 8019daa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019db2:	2b21      	cmp	r3, #33	@ 0x21
 8019db4:	d14c      	bne.n	8019e50 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019dbc:	b29b      	uxth	r3, r3
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d132      	bne.n	8019e28 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019dc8:	6a3b      	ldr	r3, [r7, #32]
 8019dca:	e853 3f00 	ldrex	r3, [r3]
 8019dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8019dd0:	69fb      	ldr	r3, [r7, #28]
 8019dd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	461a      	mov	r2, r3
 8019dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019de2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019de4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019de8:	e841 2300 	strex	r3, r2, [r1]
 8019dec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d1e6      	bne.n	8019dc2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	e853 3f00 	ldrex	r3, [r3]
 8019e00:	60bb      	str	r3, [r7, #8]
   return(result);
 8019e02:	68bb      	ldr	r3, [r7, #8]
 8019e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	461a      	mov	r2, r3
 8019e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019e12:	61bb      	str	r3, [r7, #24]
 8019e14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e16:	6979      	ldr	r1, [r7, #20]
 8019e18:	69ba      	ldr	r2, [r7, #24]
 8019e1a:	e841 2300 	strex	r3, r2, [r1]
 8019e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8019e20:	693b      	ldr	r3, [r7, #16]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d1e6      	bne.n	8019df4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8019e26:	e013      	b.n	8019e50 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e2c:	781a      	ldrb	r2, [r3, #0]
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e38:	1c5a      	adds	r2, r3, #1
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019e44:	b29b      	uxth	r3, r3
 8019e46:	3b01      	subs	r3, #1
 8019e48:	b29a      	uxth	r2, r3
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019e50:	bf00      	nop
 8019e52:	373c      	adds	r7, #60	@ 0x3c
 8019e54:	46bd      	mov	sp, r7
 8019e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e5a:	4770      	bx	lr

08019e5c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019e5c:	b480      	push	{r7}
 8019e5e:	b091      	sub	sp, #68	@ 0x44
 8019e60:	af00      	add	r7, sp, #0
 8019e62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019e6a:	2b21      	cmp	r3, #33	@ 0x21
 8019e6c:	d151      	bne.n	8019f12 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019e74:	b29b      	uxth	r3, r3
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d132      	bne.n	8019ee0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e82:	e853 3f00 	ldrex	r3, [r3]
 8019e86:	623b      	str	r3, [r7, #32]
   return(result);
 8019e88:	6a3b      	ldr	r3, [r7, #32]
 8019e8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	461a      	mov	r2, r3
 8019e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e98:	633b      	str	r3, [r7, #48]	@ 0x30
 8019e9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019ea0:	e841 2300 	strex	r3, r2, [r1]
 8019ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d1e6      	bne.n	8019e7a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	681b      	ldr	r3, [r3, #0]
 8019eb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019eb2:	693b      	ldr	r3, [r7, #16]
 8019eb4:	e853 3f00 	ldrex	r3, [r3]
 8019eb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8019eba:	68fb      	ldr	r3, [r7, #12]
 8019ebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	461a      	mov	r2, r3
 8019ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019eca:	61fb      	str	r3, [r7, #28]
 8019ecc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ece:	69b9      	ldr	r1, [r7, #24]
 8019ed0:	69fa      	ldr	r2, [r7, #28]
 8019ed2:	e841 2300 	strex	r3, r2, [r1]
 8019ed6:	617b      	str	r3, [r7, #20]
   return(result);
 8019ed8:	697b      	ldr	r3, [r7, #20]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d1e6      	bne.n	8019eac <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8019ede:	e018      	b.n	8019f12 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019ee8:	881b      	ldrh	r3, [r3, #0]
 8019eea:	461a      	mov	r2, r3
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019ef4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019efa:	1c9a      	adds	r2, r3, #2
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019f06:	b29b      	uxth	r3, r3
 8019f08:	3b01      	subs	r3, #1
 8019f0a:	b29a      	uxth	r2, r3
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019f12:	bf00      	nop
 8019f14:	3744      	adds	r7, #68	@ 0x44
 8019f16:	46bd      	mov	sp, r7
 8019f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f1c:	4770      	bx	lr

08019f1e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019f1e:	b480      	push	{r7}
 8019f20:	b091      	sub	sp, #68	@ 0x44
 8019f22:	af00      	add	r7, sp, #0
 8019f24:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019f2c:	2b21      	cmp	r3, #33	@ 0x21
 8019f2e:	d160      	bne.n	8019ff2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019f36:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019f38:	e057      	b.n	8019fea <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019f40:	b29b      	uxth	r3, r3
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d133      	bne.n	8019fae <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	3308      	adds	r3, #8
 8019f4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f50:	e853 3f00 	ldrex	r3, [r3]
 8019f54:	623b      	str	r3, [r7, #32]
   return(result);
 8019f56:	6a3b      	ldr	r3, [r7, #32]
 8019f58:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	3308      	adds	r3, #8
 8019f64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019f66:	633a      	str	r2, [r7, #48]	@ 0x30
 8019f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019f6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019f6e:	e841 2300 	strex	r3, r2, [r1]
 8019f72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d1e5      	bne.n	8019f46 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f80:	693b      	ldr	r3, [r7, #16]
 8019f82:	e853 3f00 	ldrex	r3, [r3]
 8019f86:	60fb      	str	r3, [r7, #12]
   return(result);
 8019f88:	68fb      	ldr	r3, [r7, #12]
 8019f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	461a      	mov	r2, r3
 8019f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019f98:	61fb      	str	r3, [r7, #28]
 8019f9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f9c:	69b9      	ldr	r1, [r7, #24]
 8019f9e:	69fa      	ldr	r2, [r7, #28]
 8019fa0:	e841 2300 	strex	r3, r2, [r1]
 8019fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8019fa6:	697b      	ldr	r3, [r7, #20]
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d1e6      	bne.n	8019f7a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019fac:	e021      	b.n	8019ff2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	69db      	ldr	r3, [r3, #28]
 8019fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d013      	beq.n	8019fe4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019fc0:	781a      	ldrb	r2, [r3, #0]
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019fcc:	1c5a      	adds	r2, r3, #1
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019fd8:	b29b      	uxth	r3, r3
 8019fda:	3b01      	subs	r3, #1
 8019fdc:	b29a      	uxth	r2, r3
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019fe4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019fe6:	3b01      	subs	r3, #1
 8019fe8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019fea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d1a4      	bne.n	8019f3a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019ff0:	e7ff      	b.n	8019ff2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8019ff2:	bf00      	nop
 8019ff4:	3744      	adds	r7, #68	@ 0x44
 8019ff6:	46bd      	mov	sp, r7
 8019ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ffc:	4770      	bx	lr

08019ffe <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019ffe:	b480      	push	{r7}
 801a000:	b091      	sub	sp, #68	@ 0x44
 801a002:	af00      	add	r7, sp, #0
 801a004:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a00c:	2b21      	cmp	r3, #33	@ 0x21
 801a00e:	d165      	bne.n	801a0dc <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801a016:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a018:	e05c      	b.n	801a0d4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a020:	b29b      	uxth	r3, r3
 801a022:	2b00      	cmp	r3, #0
 801a024:	d133      	bne.n	801a08e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	3308      	adds	r3, #8
 801a02c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a02e:	6a3b      	ldr	r3, [r7, #32]
 801a030:	e853 3f00 	ldrex	r3, [r3]
 801a034:	61fb      	str	r3, [r7, #28]
   return(result);
 801a036:	69fb      	ldr	r3, [r7, #28]
 801a038:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801a03c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	3308      	adds	r3, #8
 801a044:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a046:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a048:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a04a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a04c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a04e:	e841 2300 	strex	r3, r2, [r1]
 801a052:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a056:	2b00      	cmp	r3, #0
 801a058:	d1e5      	bne.n	801a026 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a060:	68fb      	ldr	r3, [r7, #12]
 801a062:	e853 3f00 	ldrex	r3, [r3]
 801a066:	60bb      	str	r3, [r7, #8]
   return(result);
 801a068:	68bb      	ldr	r3, [r7, #8]
 801a06a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a06e:	633b      	str	r3, [r7, #48]	@ 0x30
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	461a      	mov	r2, r3
 801a076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a078:	61bb      	str	r3, [r7, #24]
 801a07a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a07c:	6979      	ldr	r1, [r7, #20]
 801a07e:	69ba      	ldr	r2, [r7, #24]
 801a080:	e841 2300 	strex	r3, r2, [r1]
 801a084:	613b      	str	r3, [r7, #16]
   return(result);
 801a086:	693b      	ldr	r3, [r7, #16]
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d1e6      	bne.n	801a05a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801a08c:	e026      	b.n	801a0dc <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	69db      	ldr	r3, [r3, #28]
 801a094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a098:	2b00      	cmp	r3, #0
 801a09a:	d018      	beq.n	801a0ce <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a0a0:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801a0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a0a4:	881b      	ldrh	r3, [r3, #0]
 801a0a6:	461a      	mov	r2, r3
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	681b      	ldr	r3, [r3, #0]
 801a0ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801a0b0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a0b6:	1c9a      	adds	r2, r3, #2
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a0c2:	b29b      	uxth	r3, r3
 801a0c4:	3b01      	subs	r3, #1
 801a0c6:	b29a      	uxth	r2, r3
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801a0ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a0d0:	3b01      	subs	r3, #1
 801a0d2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a0d4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d19f      	bne.n	801a01a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801a0da:	e7ff      	b.n	801a0dc <UART_TxISR_16BIT_FIFOEN+0xde>
 801a0dc:	bf00      	nop
 801a0de:	3744      	adds	r7, #68	@ 0x44
 801a0e0:	46bd      	mov	sp, r7
 801a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e6:	4770      	bx	lr

0801a0e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a0e8:	b580      	push	{r7, lr}
 801a0ea:	b088      	sub	sp, #32
 801a0ec:	af00      	add	r7, sp, #0
 801a0ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a0f6:	68fb      	ldr	r3, [r7, #12]
 801a0f8:	e853 3f00 	ldrex	r3, [r3]
 801a0fc:	60bb      	str	r3, [r7, #8]
   return(result);
 801a0fe:	68bb      	ldr	r3, [r7, #8]
 801a100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a104:	61fb      	str	r3, [r7, #28]
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	461a      	mov	r2, r3
 801a10c:	69fb      	ldr	r3, [r7, #28]
 801a10e:	61bb      	str	r3, [r7, #24]
 801a110:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a112:	6979      	ldr	r1, [r7, #20]
 801a114:	69ba      	ldr	r2, [r7, #24]
 801a116:	e841 2300 	strex	r3, r2, [r1]
 801a11a:	613b      	str	r3, [r7, #16]
   return(result);
 801a11c:	693b      	ldr	r3, [r7, #16]
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d1e6      	bne.n	801a0f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	2220      	movs	r2, #32
 801a126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	2200      	movs	r2, #0
 801a12e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801a130:	6878      	ldr	r0, [r7, #4]
 801a132:	f7fe fc57 	bl	80189e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a136:	bf00      	nop
 801a138:	3720      	adds	r7, #32
 801a13a:	46bd      	mov	sp, r7
 801a13c:	bd80      	pop	{r7, pc}
	...

0801a140 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801a140:	b580      	push	{r7, lr}
 801a142:	b09c      	sub	sp, #112	@ 0x70
 801a144:	af00      	add	r7, sp, #0
 801a146:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a14e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a158:	2b22      	cmp	r3, #34	@ 0x22
 801a15a:	f040 80be 	bne.w	801a2da <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a164:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a168:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801a16c:	b2d9      	uxtb	r1, r3
 801a16e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a172:	b2da      	uxtb	r2, r3
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a178:	400a      	ands	r2, r1
 801a17a:	b2d2      	uxtb	r2, r2
 801a17c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a182:	1c5a      	adds	r2, r3, #1
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a18e:	b29b      	uxth	r3, r3
 801a190:	3b01      	subs	r3, #1
 801a192:	b29a      	uxth	r2, r3
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a1a0:	b29b      	uxth	r3, r3
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	f040 80a1 	bne.w	801a2ea <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a1b0:	e853 3f00 	ldrex	r3, [r3]
 801a1b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a1b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a1b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a1bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	461a      	mov	r2, r3
 801a1c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a1c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a1c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a1cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a1ce:	e841 2300 	strex	r3, r2, [r1]
 801a1d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a1d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d1e6      	bne.n	801a1a8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	3308      	adds	r3, #8
 801a1e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1e4:	e853 3f00 	ldrex	r3, [r3]
 801a1e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a1ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a1ec:	f023 0301 	bic.w	r3, r3, #1
 801a1f0:	667b      	str	r3, [r7, #100]	@ 0x64
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	3308      	adds	r3, #8
 801a1f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801a1fa:	647a      	str	r2, [r7, #68]	@ 0x44
 801a1fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a200:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a202:	e841 2300 	strex	r3, r2, [r1]
 801a206:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d1e5      	bne.n	801a1da <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	2220      	movs	r2, #32
 801a212:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	2200      	movs	r2, #0
 801a21a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	2200      	movs	r2, #0
 801a220:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	4a33      	ldr	r2, [pc, #204]	@ (801a2f4 <UART_RxISR_8BIT+0x1b4>)
 801a228:	4293      	cmp	r3, r2
 801a22a:	d01f      	beq.n	801a26c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	681b      	ldr	r3, [r3, #0]
 801a230:	685b      	ldr	r3, [r3, #4]
 801a232:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a236:	2b00      	cmp	r3, #0
 801a238:	d018      	beq.n	801a26c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a242:	e853 3f00 	ldrex	r3, [r3]
 801a246:	623b      	str	r3, [r7, #32]
   return(result);
 801a248:	6a3b      	ldr	r3, [r7, #32]
 801a24a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a24e:	663b      	str	r3, [r7, #96]	@ 0x60
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	461a      	mov	r2, r3
 801a256:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a258:	633b      	str	r3, [r7, #48]	@ 0x30
 801a25a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a25c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a25e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a260:	e841 2300 	strex	r3, r2, [r1]
 801a264:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d1e6      	bne.n	801a23a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a270:	2b01      	cmp	r3, #1
 801a272:	d12e      	bne.n	801a2d2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	2200      	movs	r2, #0
 801a278:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a280:	693b      	ldr	r3, [r7, #16]
 801a282:	e853 3f00 	ldrex	r3, [r3]
 801a286:	60fb      	str	r3, [r7, #12]
   return(result);
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	f023 0310 	bic.w	r3, r3, #16
 801a28e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	461a      	mov	r2, r3
 801a296:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a298:	61fb      	str	r3, [r7, #28]
 801a29a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a29c:	69b9      	ldr	r1, [r7, #24]
 801a29e:	69fa      	ldr	r2, [r7, #28]
 801a2a0:	e841 2300 	strex	r3, r2, [r1]
 801a2a4:	617b      	str	r3, [r7, #20]
   return(result);
 801a2a6:	697b      	ldr	r3, [r7, #20]
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d1e6      	bne.n	801a27a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	69db      	ldr	r3, [r3, #28]
 801a2b2:	f003 0310 	and.w	r3, r3, #16
 801a2b6:	2b10      	cmp	r3, #16
 801a2b8:	d103      	bne.n	801a2c2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	2210      	movs	r2, #16
 801a2c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a2c8:	4619      	mov	r1, r3
 801a2ca:	6878      	ldr	r0, [r7, #4]
 801a2cc:	f7fe fb9e 	bl	8018a0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a2d0:	e00b      	b.n	801a2ea <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a2d2:	6878      	ldr	r0, [r7, #4]
 801a2d4:	f7ec f986 	bl	80065e4 <HAL_UART_RxCpltCallback>
}
 801a2d8:	e007      	b.n	801a2ea <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	699a      	ldr	r2, [r3, #24]
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	f042 0208 	orr.w	r2, r2, #8
 801a2e8:	619a      	str	r2, [r3, #24]
}
 801a2ea:	bf00      	nop
 801a2ec:	3770      	adds	r7, #112	@ 0x70
 801a2ee:	46bd      	mov	sp, r7
 801a2f0:	bd80      	pop	{r7, pc}
 801a2f2:	bf00      	nop
 801a2f4:	58000c00 	.word	0x58000c00

0801a2f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801a2f8:	b580      	push	{r7, lr}
 801a2fa:	b09c      	sub	sp, #112	@ 0x70
 801a2fc:	af00      	add	r7, sp, #0
 801a2fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a306:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a310:	2b22      	cmp	r3, #34	@ 0x22
 801a312:	f040 80be 	bne.w	801a492 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a31c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a324:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801a326:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801a32a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a32e:	4013      	ands	r3, r2
 801a330:	b29a      	uxth	r2, r3
 801a332:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a334:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a33a:	1c9a      	adds	r2, r3, #2
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a346:	b29b      	uxth	r3, r3
 801a348:	3b01      	subs	r3, #1
 801a34a:	b29a      	uxth	r2, r3
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a358:	b29b      	uxth	r3, r3
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	f040 80a1 	bne.w	801a4a2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a368:	e853 3f00 	ldrex	r3, [r3]
 801a36c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a36e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a370:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a374:	667b      	str	r3, [r7, #100]	@ 0x64
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	461a      	mov	r2, r3
 801a37c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a37e:	657b      	str	r3, [r7, #84]	@ 0x54
 801a380:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a382:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a384:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a386:	e841 2300 	strex	r3, r2, [r1]
 801a38a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a38c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d1e6      	bne.n	801a360 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	3308      	adds	r3, #8
 801a398:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a39a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a39c:	e853 3f00 	ldrex	r3, [r3]
 801a3a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3a4:	f023 0301 	bic.w	r3, r3, #1
 801a3a8:	663b      	str	r3, [r7, #96]	@ 0x60
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	3308      	adds	r3, #8
 801a3b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a3b2:	643a      	str	r2, [r7, #64]	@ 0x40
 801a3b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a3b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a3b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a3ba:	e841 2300 	strex	r3, r2, [r1]
 801a3be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	d1e5      	bne.n	801a392 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	2220      	movs	r2, #32
 801a3ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	2200      	movs	r2, #0
 801a3d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	2200      	movs	r2, #0
 801a3d8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	4a33      	ldr	r2, [pc, #204]	@ (801a4ac <UART_RxISR_16BIT+0x1b4>)
 801a3e0:	4293      	cmp	r3, r2
 801a3e2:	d01f      	beq.n	801a424 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	685b      	ldr	r3, [r3, #4]
 801a3ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d018      	beq.n	801a424 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a3f8:	6a3b      	ldr	r3, [r7, #32]
 801a3fa:	e853 3f00 	ldrex	r3, [r3]
 801a3fe:	61fb      	str	r3, [r7, #28]
   return(result);
 801a400:	69fb      	ldr	r3, [r7, #28]
 801a402:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a406:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	461a      	mov	r2, r3
 801a40e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a412:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a414:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a418:	e841 2300 	strex	r3, r2, [r1]
 801a41c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a420:	2b00      	cmp	r3, #0
 801a422:	d1e6      	bne.n	801a3f2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a428:	2b01      	cmp	r3, #1
 801a42a:	d12e      	bne.n	801a48a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	2200      	movs	r2, #0
 801a430:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	681b      	ldr	r3, [r3, #0]
 801a436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a438:	68fb      	ldr	r3, [r7, #12]
 801a43a:	e853 3f00 	ldrex	r3, [r3]
 801a43e:	60bb      	str	r3, [r7, #8]
   return(result);
 801a440:	68bb      	ldr	r3, [r7, #8]
 801a442:	f023 0310 	bic.w	r3, r3, #16
 801a446:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	461a      	mov	r2, r3
 801a44e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a450:	61bb      	str	r3, [r7, #24]
 801a452:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a454:	6979      	ldr	r1, [r7, #20]
 801a456:	69ba      	ldr	r2, [r7, #24]
 801a458:	e841 2300 	strex	r3, r2, [r1]
 801a45c:	613b      	str	r3, [r7, #16]
   return(result);
 801a45e:	693b      	ldr	r3, [r7, #16]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d1e6      	bne.n	801a432 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	69db      	ldr	r3, [r3, #28]
 801a46a:	f003 0310 	and.w	r3, r3, #16
 801a46e:	2b10      	cmp	r3, #16
 801a470:	d103      	bne.n	801a47a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	2210      	movs	r2, #16
 801a478:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a480:	4619      	mov	r1, r3
 801a482:	6878      	ldr	r0, [r7, #4]
 801a484:	f7fe fac2 	bl	8018a0c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a488:	e00b      	b.n	801a4a2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a48a:	6878      	ldr	r0, [r7, #4]
 801a48c:	f7ec f8aa 	bl	80065e4 <HAL_UART_RxCpltCallback>
}
 801a490:	e007      	b.n	801a4a2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	681b      	ldr	r3, [r3, #0]
 801a496:	699a      	ldr	r2, [r3, #24]
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	f042 0208 	orr.w	r2, r2, #8
 801a4a0:	619a      	str	r2, [r3, #24]
}
 801a4a2:	bf00      	nop
 801a4a4:	3770      	adds	r7, #112	@ 0x70
 801a4a6:	46bd      	mov	sp, r7
 801a4a8:	bd80      	pop	{r7, pc}
 801a4aa:	bf00      	nop
 801a4ac:	58000c00 	.word	0x58000c00

0801a4b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a4b0:	b580      	push	{r7, lr}
 801a4b2:	b0ac      	sub	sp, #176	@ 0xb0
 801a4b4:	af00      	add	r7, sp, #0
 801a4b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a4be:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	69db      	ldr	r3, [r3, #28]
 801a4c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	689b      	ldr	r3, [r3, #8]
 801a4dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a4e6:	2b22      	cmp	r3, #34	@ 0x22
 801a4e8:	f040 8181 	bne.w	801a7ee <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a4f2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a4f6:	e124      	b.n	801a742 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a4fe:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a502:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801a506:	b2d9      	uxtb	r1, r3
 801a508:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801a50c:	b2da      	uxtb	r2, r3
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a512:	400a      	ands	r2, r1
 801a514:	b2d2      	uxtb	r2, r2
 801a516:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a51c:	1c5a      	adds	r2, r3, #1
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a528:	b29b      	uxth	r3, r3
 801a52a:	3b01      	subs	r3, #1
 801a52c:	b29a      	uxth	r2, r3
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	69db      	ldr	r3, [r3, #28]
 801a53a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a53e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a542:	f003 0307 	and.w	r3, r3, #7
 801a546:	2b00      	cmp	r3, #0
 801a548:	d053      	beq.n	801a5f2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a54a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a54e:	f003 0301 	and.w	r3, r3, #1
 801a552:	2b00      	cmp	r3, #0
 801a554:	d011      	beq.n	801a57a <UART_RxISR_8BIT_FIFOEN+0xca>
 801a556:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a55a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a55e:	2b00      	cmp	r3, #0
 801a560:	d00b      	beq.n	801a57a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	2201      	movs	r2, #1
 801a568:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a570:	f043 0201 	orr.w	r2, r3, #1
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a57a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a57e:	f003 0302 	and.w	r3, r3, #2
 801a582:	2b00      	cmp	r3, #0
 801a584:	d011      	beq.n	801a5aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 801a586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a58a:	f003 0301 	and.w	r3, r3, #1
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d00b      	beq.n	801a5aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	2202      	movs	r2, #2
 801a598:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a5a0:	f043 0204 	orr.w	r2, r3, #4
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a5aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a5ae:	f003 0304 	and.w	r3, r3, #4
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d011      	beq.n	801a5da <UART_RxISR_8BIT_FIFOEN+0x12a>
 801a5b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a5ba:	f003 0301 	and.w	r3, r3, #1
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d00b      	beq.n	801a5da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	2204      	movs	r2, #4
 801a5c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a5d0:	f043 0202 	orr.w	r2, r3, #2
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d006      	beq.n	801a5f2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a5e4:	6878      	ldr	r0, [r7, #4]
 801a5e6:	f7fe fa07 	bl	80189f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	2200      	movs	r2, #0
 801a5ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a5f8:	b29b      	uxth	r3, r3
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	f040 80a1 	bne.w	801a742 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a606:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a608:	e853 3f00 	ldrex	r3, [r3]
 801a60c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801a60e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a614:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	461a      	mov	r2, r3
 801a61e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a622:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a624:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a626:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801a628:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a62a:	e841 2300 	strex	r3, r2, [r1]
 801a62e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801a630:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a632:	2b00      	cmp	r3, #0
 801a634:	d1e4      	bne.n	801a600 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	3308      	adds	r3, #8
 801a63c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a63e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a640:	e853 3f00 	ldrex	r3, [r3]
 801a644:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801a646:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a648:	4b6f      	ldr	r3, [pc, #444]	@ (801a808 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801a64a:	4013      	ands	r3, r2
 801a64c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	3308      	adds	r3, #8
 801a656:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a65a:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a65c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a65e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801a660:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a662:	e841 2300 	strex	r3, r2, [r1]
 801a666:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801a668:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d1e3      	bne.n	801a636 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	2220      	movs	r2, #32
 801a672:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	2200      	movs	r2, #0
 801a67a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	2200      	movs	r2, #0
 801a680:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	4a61      	ldr	r2, [pc, #388]	@ (801a80c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801a688:	4293      	cmp	r3, r2
 801a68a:	d021      	beq.n	801a6d0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	685b      	ldr	r3, [r3, #4]
 801a692:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a696:	2b00      	cmp	r3, #0
 801a698:	d01a      	beq.n	801a6d0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a6a2:	e853 3f00 	ldrex	r3, [r3]
 801a6a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a6a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a6aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a6ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	461a      	mov	r2, r3
 801a6b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a6bc:	657b      	str	r3, [r7, #84]	@ 0x54
 801a6be:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a6c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a6c4:	e841 2300 	strex	r3, r2, [r1]
 801a6c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a6ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d1e4      	bne.n	801a69a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6d4:	2b01      	cmp	r3, #1
 801a6d6:	d130      	bne.n	801a73a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	2200      	movs	r2, #0
 801a6dc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	681b      	ldr	r3, [r3, #0]
 801a6e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a6e6:	e853 3f00 	ldrex	r3, [r3]
 801a6ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6ee:	f023 0310 	bic.w	r3, r3, #16
 801a6f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	461a      	mov	r2, r3
 801a6fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a700:	643b      	str	r3, [r7, #64]	@ 0x40
 801a702:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a704:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a706:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a708:	e841 2300 	strex	r3, r2, [r1]
 801a70c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a710:	2b00      	cmp	r3, #0
 801a712:	d1e4      	bne.n	801a6de <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	69db      	ldr	r3, [r3, #28]
 801a71a:	f003 0310 	and.w	r3, r3, #16
 801a71e:	2b10      	cmp	r3, #16
 801a720:	d103      	bne.n	801a72a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	2210      	movs	r2, #16
 801a728:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a730:	4619      	mov	r1, r3
 801a732:	6878      	ldr	r0, [r7, #4]
 801a734:	f7fe f96a 	bl	8018a0c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a738:	e00e      	b.n	801a758 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 801a73a:	6878      	ldr	r0, [r7, #4]
 801a73c:	f7eb ff52 	bl	80065e4 <HAL_UART_RxCpltCallback>
        break;
 801a740:	e00a      	b.n	801a758 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a742:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801a746:	2b00      	cmp	r3, #0
 801a748:	d006      	beq.n	801a758 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 801a74a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a74e:	f003 0320 	and.w	r3, r3, #32
 801a752:	2b00      	cmp	r3, #0
 801a754:	f47f aed0 	bne.w	801a4f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a75e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a762:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801a766:	2b00      	cmp	r3, #0
 801a768:	d049      	beq.n	801a7fe <UART_RxISR_8BIT_FIFOEN+0x34e>
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a770:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801a774:	429a      	cmp	r2, r3
 801a776:	d242      	bcs.n	801a7fe <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	3308      	adds	r3, #8
 801a77e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a780:	6a3b      	ldr	r3, [r7, #32]
 801a782:	e853 3f00 	ldrex	r3, [r3]
 801a786:	61fb      	str	r3, [r7, #28]
   return(result);
 801a788:	69fb      	ldr	r3, [r7, #28]
 801a78a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a78e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	3308      	adds	r3, #8
 801a798:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a79c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a79e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a7a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a7a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a7a4:	e841 2300 	strex	r3, r2, [r1]
 801a7a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d1e3      	bne.n	801a778 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	4a17      	ldr	r2, [pc, #92]	@ (801a810 <UART_RxISR_8BIT_FIFOEN+0x360>)
 801a7b4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	e853 3f00 	ldrex	r3, [r3]
 801a7c2:	60bb      	str	r3, [r7, #8]
   return(result);
 801a7c4:	68bb      	ldr	r3, [r7, #8]
 801a7c6:	f043 0320 	orr.w	r3, r3, #32
 801a7ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	461a      	mov	r2, r3
 801a7d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a7d8:	61bb      	str	r3, [r7, #24]
 801a7da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a7dc:	6979      	ldr	r1, [r7, #20]
 801a7de:	69ba      	ldr	r2, [r7, #24]
 801a7e0:	e841 2300 	strex	r3, r2, [r1]
 801a7e4:	613b      	str	r3, [r7, #16]
   return(result);
 801a7e6:	693b      	ldr	r3, [r7, #16]
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d1e4      	bne.n	801a7b6 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a7ec:	e007      	b.n	801a7fe <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	699a      	ldr	r2, [r3, #24]
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	f042 0208 	orr.w	r2, r2, #8
 801a7fc:	619a      	str	r2, [r3, #24]
}
 801a7fe:	bf00      	nop
 801a800:	37b0      	adds	r7, #176	@ 0xb0
 801a802:	46bd      	mov	sp, r7
 801a804:	bd80      	pop	{r7, pc}
 801a806:	bf00      	nop
 801a808:	effffffe 	.word	0xeffffffe
 801a80c:	58000c00 	.word	0x58000c00
 801a810:	0801a141 	.word	0x0801a141

0801a814 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a814:	b580      	push	{r7, lr}
 801a816:	b0ae      	sub	sp, #184	@ 0xb8
 801a818:	af00      	add	r7, sp, #0
 801a81a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a822:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	69db      	ldr	r3, [r3, #28]
 801a82c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	689b      	ldr	r3, [r3, #8]
 801a840:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a84a:	2b22      	cmp	r3, #34	@ 0x22
 801a84c:	f040 8185 	bne.w	801ab5a <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a856:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a85a:	e128      	b.n	801aaae <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a862:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a86a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801a86e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801a872:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a876:	4013      	ands	r3, r2
 801a878:	b29a      	uxth	r2, r3
 801a87a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a87e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a884:	1c9a      	adds	r2, r3, #2
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a890:	b29b      	uxth	r3, r3
 801a892:	3b01      	subs	r3, #1
 801a894:	b29a      	uxth	r2, r3
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	681b      	ldr	r3, [r3, #0]
 801a8a0:	69db      	ldr	r3, [r3, #28]
 801a8a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a8a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a8aa:	f003 0307 	and.w	r3, r3, #7
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d053      	beq.n	801a95a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a8b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a8b6:	f003 0301 	and.w	r3, r3, #1
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d011      	beq.n	801a8e2 <UART_RxISR_16BIT_FIFOEN+0xce>
 801a8be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a8c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d00b      	beq.n	801a8e2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	2201      	movs	r2, #1
 801a8d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a8d8:	f043 0201 	orr.w	r2, r3, #1
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a8e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a8e6:	f003 0302 	and.w	r3, r3, #2
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d011      	beq.n	801a912 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801a8ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a8f2:	f003 0301 	and.w	r3, r3, #1
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	d00b      	beq.n	801a912 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	681b      	ldr	r3, [r3, #0]
 801a8fe:	2202      	movs	r2, #2
 801a900:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a908:	f043 0204 	orr.w	r2, r3, #4
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a912:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a916:	f003 0304 	and.w	r3, r3, #4
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	d011      	beq.n	801a942 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a91e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a922:	f003 0301 	and.w	r3, r3, #1
 801a926:	2b00      	cmp	r3, #0
 801a928:	d00b      	beq.n	801a942 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	2204      	movs	r2, #4
 801a930:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a938:	f043 0202 	orr.w	r2, r3, #2
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d006      	beq.n	801a95a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a94c:	6878      	ldr	r0, [r7, #4]
 801a94e:	f7fe f853 	bl	80189f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	2200      	movs	r2, #0
 801a956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a960:	b29b      	uxth	r3, r3
 801a962:	2b00      	cmp	r3, #0
 801a964:	f040 80a3 	bne.w	801aaae <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a96e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a970:	e853 3f00 	ldrex	r3, [r3]
 801a974:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801a976:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a97c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	461a      	mov	r2, r3
 801a986:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a98a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a98e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a990:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a992:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a996:	e841 2300 	strex	r3, r2, [r1]
 801a99a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a99c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	d1e2      	bne.n	801a968 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	3308      	adds	r3, #8
 801a9a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a9aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a9ac:	e853 3f00 	ldrex	r3, [r3]
 801a9b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a9b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a9b4:	4b6f      	ldr	r3, [pc, #444]	@ (801ab74 <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a9b6:	4013      	ands	r3, r2
 801a9b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	681b      	ldr	r3, [r3, #0]
 801a9c0:	3308      	adds	r3, #8
 801a9c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a9c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a9c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a9cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a9ce:	e841 2300 	strex	r3, r2, [r1]
 801a9d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a9d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d1e3      	bne.n	801a9a2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	2220      	movs	r2, #32
 801a9de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	2200      	movs	r2, #0
 801a9e6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	2200      	movs	r2, #0
 801a9ec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	4a61      	ldr	r2, [pc, #388]	@ (801ab78 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801a9f4:	4293      	cmp	r3, r2
 801a9f6:	d021      	beq.n	801aa3c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	685b      	ldr	r3, [r3, #4]
 801a9fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d01a      	beq.n	801aa3c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aa0e:	e853 3f00 	ldrex	r3, [r3]
 801aa12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801aa14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aa16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801aa1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	461a      	mov	r2, r3
 801aa24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801aa28:	65bb      	str	r3, [r7, #88]	@ 0x58
 801aa2a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801aa2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aa30:	e841 2300 	strex	r3, r2, [r1]
 801aa34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801aa36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	d1e4      	bne.n	801aa06 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aa40:	2b01      	cmp	r3, #1
 801aa42:	d130      	bne.n	801aaa6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	2200      	movs	r2, #0
 801aa48:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa52:	e853 3f00 	ldrex	r3, [r3]
 801aa56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801aa58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa5a:	f023 0310 	bic.w	r3, r3, #16
 801aa5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	681b      	ldr	r3, [r3, #0]
 801aa66:	461a      	mov	r2, r3
 801aa68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801aa6c:	647b      	str	r3, [r7, #68]	@ 0x44
 801aa6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801aa72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801aa74:	e841 2300 	strex	r3, r2, [r1]
 801aa78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801aa7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d1e4      	bne.n	801aa4a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	69db      	ldr	r3, [r3, #28]
 801aa86:	f003 0310 	and.w	r3, r3, #16
 801aa8a:	2b10      	cmp	r3, #16
 801aa8c:	d103      	bne.n	801aa96 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	2210      	movs	r2, #16
 801aa94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801aa9c:	4619      	mov	r1, r3
 801aa9e:	6878      	ldr	r0, [r7, #4]
 801aaa0:	f7fd ffb4 	bl	8018a0c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801aaa4:	e00e      	b.n	801aac4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 801aaa6:	6878      	ldr	r0, [r7, #4]
 801aaa8:	f7eb fd9c 	bl	80065e4 <HAL_UART_RxCpltCallback>
        break;
 801aaac:	e00a      	b.n	801aac4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801aaae:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	d006      	beq.n	801aac4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 801aab6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801aaba:	f003 0320 	and.w	r3, r3, #32
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	f47f aecc 	bne.w	801a85c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801aaca:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801aace:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801aad2:	2b00      	cmp	r3, #0
 801aad4:	d049      	beq.n	801ab6a <UART_RxISR_16BIT_FIFOEN+0x356>
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801aadc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801aae0:	429a      	cmp	r2, r3
 801aae2:	d242      	bcs.n	801ab6a <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	3308      	adds	r3, #8
 801aaea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aaec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aaee:	e853 3f00 	ldrex	r3, [r3]
 801aaf2:	623b      	str	r3, [r7, #32]
   return(result);
 801aaf4:	6a3b      	ldr	r3, [r7, #32]
 801aaf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801aafa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	3308      	adds	r3, #8
 801ab04:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801ab08:	633a      	str	r2, [r7, #48]	@ 0x30
 801ab0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ab0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ab10:	e841 2300 	strex	r3, r2, [r1]
 801ab14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801ab16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d1e3      	bne.n	801aae4 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	4a17      	ldr	r2, [pc, #92]	@ (801ab7c <UART_RxISR_16BIT_FIFOEN+0x368>)
 801ab20:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ab28:	693b      	ldr	r3, [r7, #16]
 801ab2a:	e853 3f00 	ldrex	r3, [r3]
 801ab2e:	60fb      	str	r3, [r7, #12]
   return(result);
 801ab30:	68fb      	ldr	r3, [r7, #12]
 801ab32:	f043 0320 	orr.w	r3, r3, #32
 801ab36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	461a      	mov	r2, r3
 801ab40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801ab44:	61fb      	str	r3, [r7, #28]
 801ab46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab48:	69b9      	ldr	r1, [r7, #24]
 801ab4a:	69fa      	ldr	r2, [r7, #28]
 801ab4c:	e841 2300 	strex	r3, r2, [r1]
 801ab50:	617b      	str	r3, [r7, #20]
   return(result);
 801ab52:	697b      	ldr	r3, [r7, #20]
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d1e4      	bne.n	801ab22 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801ab58:	e007      	b.n	801ab6a <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	699a      	ldr	r2, [r3, #24]
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	f042 0208 	orr.w	r2, r2, #8
 801ab68:	619a      	str	r2, [r3, #24]
}
 801ab6a:	bf00      	nop
 801ab6c:	37b8      	adds	r7, #184	@ 0xb8
 801ab6e:	46bd      	mov	sp, r7
 801ab70:	bd80      	pop	{r7, pc}
 801ab72:	bf00      	nop
 801ab74:	effffffe 	.word	0xeffffffe
 801ab78:	58000c00 	.word	0x58000c00
 801ab7c:	0801a2f9 	.word	0x0801a2f9

0801ab80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801ab80:	b480      	push	{r7}
 801ab82:	b083      	sub	sp, #12
 801ab84:	af00      	add	r7, sp, #0
 801ab86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801ab88:	bf00      	nop
 801ab8a:	370c      	adds	r7, #12
 801ab8c:	46bd      	mov	sp, r7
 801ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab92:	4770      	bx	lr

0801ab94 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801ab94:	b480      	push	{r7}
 801ab96:	b083      	sub	sp, #12
 801ab98:	af00      	add	r7, sp, #0
 801ab9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801ab9c:	bf00      	nop
 801ab9e:	370c      	adds	r7, #12
 801aba0:	46bd      	mov	sp, r7
 801aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aba6:	4770      	bx	lr

0801aba8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801aba8:	b480      	push	{r7}
 801abaa:	b083      	sub	sp, #12
 801abac:	af00      	add	r7, sp, #0
 801abae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801abb0:	bf00      	nop
 801abb2:	370c      	adds	r7, #12
 801abb4:	46bd      	mov	sp, r7
 801abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abba:	4770      	bx	lr

0801abbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801abbc:	b480      	push	{r7}
 801abbe:	b085      	sub	sp, #20
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801abca:	2b01      	cmp	r3, #1
 801abcc:	d101      	bne.n	801abd2 <HAL_UARTEx_DisableFifoMode+0x16>
 801abce:	2302      	movs	r3, #2
 801abd0:	e027      	b.n	801ac22 <HAL_UARTEx_DisableFifoMode+0x66>
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	2201      	movs	r2, #1
 801abd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	2224      	movs	r2, #36	@ 0x24
 801abde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	681a      	ldr	r2, [r3, #0]
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	f022 0201 	bic.w	r2, r2, #1
 801abf8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801ac00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	2200      	movs	r2, #0
 801ac06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	68fa      	ldr	r2, [r7, #12]
 801ac0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	2220      	movs	r2, #32
 801ac14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	2200      	movs	r2, #0
 801ac1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ac20:	2300      	movs	r3, #0
}
 801ac22:	4618      	mov	r0, r3
 801ac24:	3714      	adds	r7, #20
 801ac26:	46bd      	mov	sp, r7
 801ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac2c:	4770      	bx	lr

0801ac2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ac2e:	b580      	push	{r7, lr}
 801ac30:	b084      	sub	sp, #16
 801ac32:	af00      	add	r7, sp, #0
 801ac34:	6078      	str	r0, [r7, #4]
 801ac36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801ac3e:	2b01      	cmp	r3, #1
 801ac40:	d101      	bne.n	801ac46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801ac42:	2302      	movs	r3, #2
 801ac44:	e02d      	b.n	801aca2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	2201      	movs	r2, #1
 801ac4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	2224      	movs	r2, #36	@ 0x24
 801ac52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	681a      	ldr	r2, [r3, #0]
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	f022 0201 	bic.w	r2, r2, #1
 801ac6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	689b      	ldr	r3, [r3, #8]
 801ac74:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	683a      	ldr	r2, [r7, #0]
 801ac7e:	430a      	orrs	r2, r1
 801ac80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ac82:	6878      	ldr	r0, [r7, #4]
 801ac84:	f000 f850 	bl	801ad28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	681b      	ldr	r3, [r3, #0]
 801ac8c:	68fa      	ldr	r2, [r7, #12]
 801ac8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	2220      	movs	r2, #32
 801ac94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	2200      	movs	r2, #0
 801ac9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801aca0:	2300      	movs	r3, #0
}
 801aca2:	4618      	mov	r0, r3
 801aca4:	3710      	adds	r7, #16
 801aca6:	46bd      	mov	sp, r7
 801aca8:	bd80      	pop	{r7, pc}

0801acaa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801acaa:	b580      	push	{r7, lr}
 801acac:	b084      	sub	sp, #16
 801acae:	af00      	add	r7, sp, #0
 801acb0:	6078      	str	r0, [r7, #4]
 801acb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801acba:	2b01      	cmp	r3, #1
 801acbc:	d101      	bne.n	801acc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801acbe:	2302      	movs	r3, #2
 801acc0:	e02d      	b.n	801ad1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	2201      	movs	r2, #1
 801acc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	2224      	movs	r2, #36	@ 0x24
 801acce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	681a      	ldr	r2, [r3, #0]
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	f022 0201 	bic.w	r2, r2, #1
 801ace8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	689b      	ldr	r3, [r3, #8]
 801acf0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	681b      	ldr	r3, [r3, #0]
 801acf8:	683a      	ldr	r2, [r7, #0]
 801acfa:	430a      	orrs	r2, r1
 801acfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801acfe:	6878      	ldr	r0, [r7, #4]
 801ad00:	f000 f812 	bl	801ad28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	68fa      	ldr	r2, [r7, #12]
 801ad0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	2220      	movs	r2, #32
 801ad10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	2200      	movs	r2, #0
 801ad18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ad1c:	2300      	movs	r3, #0
}
 801ad1e:	4618      	mov	r0, r3
 801ad20:	3710      	adds	r7, #16
 801ad22:	46bd      	mov	sp, r7
 801ad24:	bd80      	pop	{r7, pc}
	...

0801ad28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801ad28:	b480      	push	{r7}
 801ad2a:	b085      	sub	sp, #20
 801ad2c:	af00      	add	r7, sp, #0
 801ad2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	d108      	bne.n	801ad4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	2201      	movs	r2, #1
 801ad3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	2201      	movs	r2, #1
 801ad44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801ad48:	e031      	b.n	801adae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801ad4a:	2310      	movs	r3, #16
 801ad4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801ad4e:	2310      	movs	r3, #16
 801ad50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	689b      	ldr	r3, [r3, #8]
 801ad58:	0e5b      	lsrs	r3, r3, #25
 801ad5a:	b2db      	uxtb	r3, r3
 801ad5c:	f003 0307 	and.w	r3, r3, #7
 801ad60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	689b      	ldr	r3, [r3, #8]
 801ad68:	0f5b      	lsrs	r3, r3, #29
 801ad6a:	b2db      	uxtb	r3, r3
 801ad6c:	f003 0307 	and.w	r3, r3, #7
 801ad70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ad72:	7bbb      	ldrb	r3, [r7, #14]
 801ad74:	7b3a      	ldrb	r2, [r7, #12]
 801ad76:	4911      	ldr	r1, [pc, #68]	@ (801adbc <UARTEx_SetNbDataToProcess+0x94>)
 801ad78:	5c8a      	ldrb	r2, [r1, r2]
 801ad7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801ad7e:	7b3a      	ldrb	r2, [r7, #12]
 801ad80:	490f      	ldr	r1, [pc, #60]	@ (801adc0 <UARTEx_SetNbDataToProcess+0x98>)
 801ad82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ad84:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad88:	b29a      	uxth	r2, r3
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ad90:	7bfb      	ldrb	r3, [r7, #15]
 801ad92:	7b7a      	ldrb	r2, [r7, #13]
 801ad94:	4909      	ldr	r1, [pc, #36]	@ (801adbc <UARTEx_SetNbDataToProcess+0x94>)
 801ad96:	5c8a      	ldrb	r2, [r1, r2]
 801ad98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801ad9c:	7b7a      	ldrb	r2, [r7, #13]
 801ad9e:	4908      	ldr	r1, [pc, #32]	@ (801adc0 <UARTEx_SetNbDataToProcess+0x98>)
 801ada0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ada2:	fb93 f3f2 	sdiv	r3, r3, r2
 801ada6:	b29a      	uxth	r2, r3
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801adae:	bf00      	nop
 801adb0:	3714      	adds	r7, #20
 801adb2:	46bd      	mov	sp, r7
 801adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adb8:	4770      	bx	lr
 801adba:	bf00      	nop
 801adbc:	0801ea94 	.word	0x0801ea94
 801adc0:	0801ea9c 	.word	0x0801ea9c

0801adc4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801adc4:	b580      	push	{r7, lr}
 801adc6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801adc8:	4904      	ldr	r1, [pc, #16]	@ (801addc <MX_FATFS_Init+0x18>)
 801adca:	4805      	ldr	r0, [pc, #20]	@ (801ade0 <MX_FATFS_Init+0x1c>)
 801adcc:	f003 f8d8 	bl	801df80 <FATFS_LinkDriver>
 801add0:	4603      	mov	r3, r0
 801add2:	461a      	mov	r2, r3
 801add4:	4b03      	ldr	r3, [pc, #12]	@ (801ade4 <MX_FATFS_Init+0x20>)
 801add6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801add8:	bf00      	nop
 801adda:	bd80      	pop	{r7, pc}
 801addc:	2400054c 	.word	0x2400054c
 801ade0:	24000014 	.word	0x24000014
 801ade4:	24000548 	.word	0x24000548

0801ade8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801ade8:	b480      	push	{r7}
 801adea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801adec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801adee:	4618      	mov	r0, r3
 801adf0:	46bd      	mov	sp, r7
 801adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adf6:	4770      	bx	lr

0801adf8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801adf8:	b580      	push	{r7, lr}
 801adfa:	b082      	sub	sp, #8
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	4603      	mov	r3, r0
 801ae00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801ae02:	79fb      	ldrb	r3, [r7, #7]
 801ae04:	4618      	mov	r0, r3
 801ae06:	f7e9 fb7d 	bl	8004504 <SD_disk_initialize>
 801ae0a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801ae0c:	4618      	mov	r0, r3
 801ae0e:	3708      	adds	r7, #8
 801ae10:	46bd      	mov	sp, r7
 801ae12:	bd80      	pop	{r7, pc}

0801ae14 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801ae14:	b580      	push	{r7, lr}
 801ae16:	b082      	sub	sp, #8
 801ae18:	af00      	add	r7, sp, #0
 801ae1a:	4603      	mov	r3, r0
 801ae1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801ae1e:	79fb      	ldrb	r3, [r7, #7]
 801ae20:	4618      	mov	r0, r3
 801ae22:	f7e9 fc5b 	bl	80046dc <SD_disk_status>
 801ae26:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801ae28:	4618      	mov	r0, r3
 801ae2a:	3708      	adds	r7, #8
 801ae2c:	46bd      	mov	sp, r7
 801ae2e:	bd80      	pop	{r7, pc}

0801ae30 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801ae30:	b580      	push	{r7, lr}
 801ae32:	b084      	sub	sp, #16
 801ae34:	af00      	add	r7, sp, #0
 801ae36:	60b9      	str	r1, [r7, #8]
 801ae38:	607a      	str	r2, [r7, #4]
 801ae3a:	603b      	str	r3, [r7, #0]
 801ae3c:	4603      	mov	r3, r0
 801ae3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801ae40:	7bf8      	ldrb	r0, [r7, #15]
 801ae42:	683b      	ldr	r3, [r7, #0]
 801ae44:	687a      	ldr	r2, [r7, #4]
 801ae46:	68b9      	ldr	r1, [r7, #8]
 801ae48:	f7e9 fc5e 	bl	8004708 <SD_disk_read>
 801ae4c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801ae4e:	4618      	mov	r0, r3
 801ae50:	3710      	adds	r7, #16
 801ae52:	46bd      	mov	sp, r7
 801ae54:	bd80      	pop	{r7, pc}

0801ae56 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801ae56:	b580      	push	{r7, lr}
 801ae58:	b084      	sub	sp, #16
 801ae5a:	af00      	add	r7, sp, #0
 801ae5c:	60b9      	str	r1, [r7, #8]
 801ae5e:	607a      	str	r2, [r7, #4]
 801ae60:	603b      	str	r3, [r7, #0]
 801ae62:	4603      	mov	r3, r0
 801ae64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801ae66:	7bf8      	ldrb	r0, [r7, #15]
 801ae68:	683b      	ldr	r3, [r7, #0]
 801ae6a:	687a      	ldr	r2, [r7, #4]
 801ae6c:	68b9      	ldr	r1, [r7, #8]
 801ae6e:	f7e9 fcb5 	bl	80047dc <SD_disk_write>
 801ae72:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801ae74:	4618      	mov	r0, r3
 801ae76:	3710      	adds	r7, #16
 801ae78:	46bd      	mov	sp, r7
 801ae7a:	bd80      	pop	{r7, pc}

0801ae7c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801ae7c:	b580      	push	{r7, lr}
 801ae7e:	b082      	sub	sp, #8
 801ae80:	af00      	add	r7, sp, #0
 801ae82:	4603      	mov	r3, r0
 801ae84:	603a      	str	r2, [r7, #0]
 801ae86:	71fb      	strb	r3, [r7, #7]
 801ae88:	460b      	mov	r3, r1
 801ae8a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801ae8c:	79b9      	ldrb	r1, [r7, #6]
 801ae8e:	79fb      	ldrb	r3, [r7, #7]
 801ae90:	683a      	ldr	r2, [r7, #0]
 801ae92:	4618      	mov	r0, r3
 801ae94:	f7e9 fd26 	bl	80048e4 <SD_disk_ioctl>
 801ae98:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	3708      	adds	r7, #8
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	bd80      	pop	{r7, pc}
	...

0801aea4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801aea4:	b580      	push	{r7, lr}
 801aea6:	b084      	sub	sp, #16
 801aea8:	af00      	add	r7, sp, #0
 801aeaa:	4603      	mov	r3, r0
 801aeac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801aeae:	79fb      	ldrb	r3, [r7, #7]
 801aeb0:	4a08      	ldr	r2, [pc, #32]	@ (801aed4 <disk_status+0x30>)
 801aeb2:	009b      	lsls	r3, r3, #2
 801aeb4:	4413      	add	r3, r2
 801aeb6:	685b      	ldr	r3, [r3, #4]
 801aeb8:	685b      	ldr	r3, [r3, #4]
 801aeba:	79fa      	ldrb	r2, [r7, #7]
 801aebc:	4905      	ldr	r1, [pc, #20]	@ (801aed4 <disk_status+0x30>)
 801aebe:	440a      	add	r2, r1
 801aec0:	7a12      	ldrb	r2, [r2, #8]
 801aec2:	4610      	mov	r0, r2
 801aec4:	4798      	blx	r3
 801aec6:	4603      	mov	r3, r0
 801aec8:	73fb      	strb	r3, [r7, #15]
  return stat;
 801aeca:	7bfb      	ldrb	r3, [r7, #15]
}
 801aecc:	4618      	mov	r0, r3
 801aece:	3710      	adds	r7, #16
 801aed0:	46bd      	mov	sp, r7
 801aed2:	bd80      	pop	{r7, pc}
 801aed4:	24000768 	.word	0x24000768

0801aed8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801aed8:	b580      	push	{r7, lr}
 801aeda:	b084      	sub	sp, #16
 801aedc:	af00      	add	r7, sp, #0
 801aede:	4603      	mov	r3, r0
 801aee0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801aee2:	2300      	movs	r3, #0
 801aee4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801aee6:	79fb      	ldrb	r3, [r7, #7]
 801aee8:	4a0e      	ldr	r2, [pc, #56]	@ (801af24 <disk_initialize+0x4c>)
 801aeea:	5cd3      	ldrb	r3, [r2, r3]
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d114      	bne.n	801af1a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801aef0:	79fb      	ldrb	r3, [r7, #7]
 801aef2:	4a0c      	ldr	r2, [pc, #48]	@ (801af24 <disk_initialize+0x4c>)
 801aef4:	009b      	lsls	r3, r3, #2
 801aef6:	4413      	add	r3, r2
 801aef8:	685b      	ldr	r3, [r3, #4]
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	79fa      	ldrb	r2, [r7, #7]
 801aefe:	4909      	ldr	r1, [pc, #36]	@ (801af24 <disk_initialize+0x4c>)
 801af00:	440a      	add	r2, r1
 801af02:	7a12      	ldrb	r2, [r2, #8]
 801af04:	4610      	mov	r0, r2
 801af06:	4798      	blx	r3
 801af08:	4603      	mov	r3, r0
 801af0a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801af0c:	7bfb      	ldrb	r3, [r7, #15]
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d103      	bne.n	801af1a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801af12:	79fb      	ldrb	r3, [r7, #7]
 801af14:	4a03      	ldr	r2, [pc, #12]	@ (801af24 <disk_initialize+0x4c>)
 801af16:	2101      	movs	r1, #1
 801af18:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801af1a:	7bfb      	ldrb	r3, [r7, #15]
}
 801af1c:	4618      	mov	r0, r3
 801af1e:	3710      	adds	r7, #16
 801af20:	46bd      	mov	sp, r7
 801af22:	bd80      	pop	{r7, pc}
 801af24:	24000768 	.word	0x24000768

0801af28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801af28:	b590      	push	{r4, r7, lr}
 801af2a:	b087      	sub	sp, #28
 801af2c:	af00      	add	r7, sp, #0
 801af2e:	60b9      	str	r1, [r7, #8]
 801af30:	607a      	str	r2, [r7, #4]
 801af32:	603b      	str	r3, [r7, #0]
 801af34:	4603      	mov	r3, r0
 801af36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801af38:	7bfb      	ldrb	r3, [r7, #15]
 801af3a:	4a0a      	ldr	r2, [pc, #40]	@ (801af64 <disk_read+0x3c>)
 801af3c:	009b      	lsls	r3, r3, #2
 801af3e:	4413      	add	r3, r2
 801af40:	685b      	ldr	r3, [r3, #4]
 801af42:	689c      	ldr	r4, [r3, #8]
 801af44:	7bfb      	ldrb	r3, [r7, #15]
 801af46:	4a07      	ldr	r2, [pc, #28]	@ (801af64 <disk_read+0x3c>)
 801af48:	4413      	add	r3, r2
 801af4a:	7a18      	ldrb	r0, [r3, #8]
 801af4c:	683b      	ldr	r3, [r7, #0]
 801af4e:	687a      	ldr	r2, [r7, #4]
 801af50:	68b9      	ldr	r1, [r7, #8]
 801af52:	47a0      	blx	r4
 801af54:	4603      	mov	r3, r0
 801af56:	75fb      	strb	r3, [r7, #23]
  return res;
 801af58:	7dfb      	ldrb	r3, [r7, #23]
}
 801af5a:	4618      	mov	r0, r3
 801af5c:	371c      	adds	r7, #28
 801af5e:	46bd      	mov	sp, r7
 801af60:	bd90      	pop	{r4, r7, pc}
 801af62:	bf00      	nop
 801af64:	24000768 	.word	0x24000768

0801af68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801af68:	b590      	push	{r4, r7, lr}
 801af6a:	b087      	sub	sp, #28
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	60b9      	str	r1, [r7, #8]
 801af70:	607a      	str	r2, [r7, #4]
 801af72:	603b      	str	r3, [r7, #0]
 801af74:	4603      	mov	r3, r0
 801af76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801af78:	7bfb      	ldrb	r3, [r7, #15]
 801af7a:	4a0a      	ldr	r2, [pc, #40]	@ (801afa4 <disk_write+0x3c>)
 801af7c:	009b      	lsls	r3, r3, #2
 801af7e:	4413      	add	r3, r2
 801af80:	685b      	ldr	r3, [r3, #4]
 801af82:	68dc      	ldr	r4, [r3, #12]
 801af84:	7bfb      	ldrb	r3, [r7, #15]
 801af86:	4a07      	ldr	r2, [pc, #28]	@ (801afa4 <disk_write+0x3c>)
 801af88:	4413      	add	r3, r2
 801af8a:	7a18      	ldrb	r0, [r3, #8]
 801af8c:	683b      	ldr	r3, [r7, #0]
 801af8e:	687a      	ldr	r2, [r7, #4]
 801af90:	68b9      	ldr	r1, [r7, #8]
 801af92:	47a0      	blx	r4
 801af94:	4603      	mov	r3, r0
 801af96:	75fb      	strb	r3, [r7, #23]
  return res;
 801af98:	7dfb      	ldrb	r3, [r7, #23]
}
 801af9a:	4618      	mov	r0, r3
 801af9c:	371c      	adds	r7, #28
 801af9e:	46bd      	mov	sp, r7
 801afa0:	bd90      	pop	{r4, r7, pc}
 801afa2:	bf00      	nop
 801afa4:	24000768 	.word	0x24000768

0801afa8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801afa8:	b580      	push	{r7, lr}
 801afaa:	b084      	sub	sp, #16
 801afac:	af00      	add	r7, sp, #0
 801afae:	4603      	mov	r3, r0
 801afb0:	603a      	str	r2, [r7, #0]
 801afb2:	71fb      	strb	r3, [r7, #7]
 801afb4:	460b      	mov	r3, r1
 801afb6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801afb8:	79fb      	ldrb	r3, [r7, #7]
 801afba:	4a09      	ldr	r2, [pc, #36]	@ (801afe0 <disk_ioctl+0x38>)
 801afbc:	009b      	lsls	r3, r3, #2
 801afbe:	4413      	add	r3, r2
 801afc0:	685b      	ldr	r3, [r3, #4]
 801afc2:	691b      	ldr	r3, [r3, #16]
 801afc4:	79fa      	ldrb	r2, [r7, #7]
 801afc6:	4906      	ldr	r1, [pc, #24]	@ (801afe0 <disk_ioctl+0x38>)
 801afc8:	440a      	add	r2, r1
 801afca:	7a10      	ldrb	r0, [r2, #8]
 801afcc:	79b9      	ldrb	r1, [r7, #6]
 801afce:	683a      	ldr	r2, [r7, #0]
 801afd0:	4798      	blx	r3
 801afd2:	4603      	mov	r3, r0
 801afd4:	73fb      	strb	r3, [r7, #15]
  return res;
 801afd6:	7bfb      	ldrb	r3, [r7, #15]
}
 801afd8:	4618      	mov	r0, r3
 801afda:	3710      	adds	r7, #16
 801afdc:	46bd      	mov	sp, r7
 801afde:	bd80      	pop	{r7, pc}
 801afe0:	24000768 	.word	0x24000768

0801afe4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801afe4:	b480      	push	{r7}
 801afe6:	b085      	sub	sp, #20
 801afe8:	af00      	add	r7, sp, #0
 801afea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	3301      	adds	r3, #1
 801aff0:	781b      	ldrb	r3, [r3, #0]
 801aff2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801aff4:	89fb      	ldrh	r3, [r7, #14]
 801aff6:	021b      	lsls	r3, r3, #8
 801aff8:	b21a      	sxth	r2, r3
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	781b      	ldrb	r3, [r3, #0]
 801affe:	b21b      	sxth	r3, r3
 801b000:	4313      	orrs	r3, r2
 801b002:	b21b      	sxth	r3, r3
 801b004:	81fb      	strh	r3, [r7, #14]
	return rv;
 801b006:	89fb      	ldrh	r3, [r7, #14]
}
 801b008:	4618      	mov	r0, r3
 801b00a:	3714      	adds	r7, #20
 801b00c:	46bd      	mov	sp, r7
 801b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b012:	4770      	bx	lr

0801b014 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801b014:	b480      	push	{r7}
 801b016:	b085      	sub	sp, #20
 801b018:	af00      	add	r7, sp, #0
 801b01a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	3303      	adds	r3, #3
 801b020:	781b      	ldrb	r3, [r3, #0]
 801b022:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801b024:	68fb      	ldr	r3, [r7, #12]
 801b026:	021b      	lsls	r3, r3, #8
 801b028:	687a      	ldr	r2, [r7, #4]
 801b02a:	3202      	adds	r2, #2
 801b02c:	7812      	ldrb	r2, [r2, #0]
 801b02e:	4313      	orrs	r3, r2
 801b030:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801b032:	68fb      	ldr	r3, [r7, #12]
 801b034:	021b      	lsls	r3, r3, #8
 801b036:	687a      	ldr	r2, [r7, #4]
 801b038:	3201      	adds	r2, #1
 801b03a:	7812      	ldrb	r2, [r2, #0]
 801b03c:	4313      	orrs	r3, r2
 801b03e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	021b      	lsls	r3, r3, #8
 801b044:	687a      	ldr	r2, [r7, #4]
 801b046:	7812      	ldrb	r2, [r2, #0]
 801b048:	4313      	orrs	r3, r2
 801b04a:	60fb      	str	r3, [r7, #12]
	return rv;
 801b04c:	68fb      	ldr	r3, [r7, #12]
}
 801b04e:	4618      	mov	r0, r3
 801b050:	3714      	adds	r7, #20
 801b052:	46bd      	mov	sp, r7
 801b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b058:	4770      	bx	lr

0801b05a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801b05a:	b480      	push	{r7}
 801b05c:	b083      	sub	sp, #12
 801b05e:	af00      	add	r7, sp, #0
 801b060:	6078      	str	r0, [r7, #4]
 801b062:	460b      	mov	r3, r1
 801b064:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	1c5a      	adds	r2, r3, #1
 801b06a:	607a      	str	r2, [r7, #4]
 801b06c:	887a      	ldrh	r2, [r7, #2]
 801b06e:	b2d2      	uxtb	r2, r2
 801b070:	701a      	strb	r2, [r3, #0]
 801b072:	887b      	ldrh	r3, [r7, #2]
 801b074:	0a1b      	lsrs	r3, r3, #8
 801b076:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	1c5a      	adds	r2, r3, #1
 801b07c:	607a      	str	r2, [r7, #4]
 801b07e:	887a      	ldrh	r2, [r7, #2]
 801b080:	b2d2      	uxtb	r2, r2
 801b082:	701a      	strb	r2, [r3, #0]
}
 801b084:	bf00      	nop
 801b086:	370c      	adds	r7, #12
 801b088:	46bd      	mov	sp, r7
 801b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b08e:	4770      	bx	lr

0801b090 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801b090:	b480      	push	{r7}
 801b092:	b083      	sub	sp, #12
 801b094:	af00      	add	r7, sp, #0
 801b096:	6078      	str	r0, [r7, #4]
 801b098:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	1c5a      	adds	r2, r3, #1
 801b09e:	607a      	str	r2, [r7, #4]
 801b0a0:	683a      	ldr	r2, [r7, #0]
 801b0a2:	b2d2      	uxtb	r2, r2
 801b0a4:	701a      	strb	r2, [r3, #0]
 801b0a6:	683b      	ldr	r3, [r7, #0]
 801b0a8:	0a1b      	lsrs	r3, r3, #8
 801b0aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	1c5a      	adds	r2, r3, #1
 801b0b0:	607a      	str	r2, [r7, #4]
 801b0b2:	683a      	ldr	r2, [r7, #0]
 801b0b4:	b2d2      	uxtb	r2, r2
 801b0b6:	701a      	strb	r2, [r3, #0]
 801b0b8:	683b      	ldr	r3, [r7, #0]
 801b0ba:	0a1b      	lsrs	r3, r3, #8
 801b0bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	1c5a      	adds	r2, r3, #1
 801b0c2:	607a      	str	r2, [r7, #4]
 801b0c4:	683a      	ldr	r2, [r7, #0]
 801b0c6:	b2d2      	uxtb	r2, r2
 801b0c8:	701a      	strb	r2, [r3, #0]
 801b0ca:	683b      	ldr	r3, [r7, #0]
 801b0cc:	0a1b      	lsrs	r3, r3, #8
 801b0ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	1c5a      	adds	r2, r3, #1
 801b0d4:	607a      	str	r2, [r7, #4]
 801b0d6:	683a      	ldr	r2, [r7, #0]
 801b0d8:	b2d2      	uxtb	r2, r2
 801b0da:	701a      	strb	r2, [r3, #0]
}
 801b0dc:	bf00      	nop
 801b0de:	370c      	adds	r7, #12
 801b0e0:	46bd      	mov	sp, r7
 801b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0e6:	4770      	bx	lr

0801b0e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801b0e8:	b480      	push	{r7}
 801b0ea:	b087      	sub	sp, #28
 801b0ec:	af00      	add	r7, sp, #0
 801b0ee:	60f8      	str	r0, [r7, #12]
 801b0f0:	60b9      	str	r1, [r7, #8]
 801b0f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b0f4:	68fb      	ldr	r3, [r7, #12]
 801b0f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801b0f8:	68bb      	ldr	r3, [r7, #8]
 801b0fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d00d      	beq.n	801b11e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801b102:	693a      	ldr	r2, [r7, #16]
 801b104:	1c53      	adds	r3, r2, #1
 801b106:	613b      	str	r3, [r7, #16]
 801b108:	697b      	ldr	r3, [r7, #20]
 801b10a:	1c59      	adds	r1, r3, #1
 801b10c:	6179      	str	r1, [r7, #20]
 801b10e:	7812      	ldrb	r2, [r2, #0]
 801b110:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	3b01      	subs	r3, #1
 801b116:	607b      	str	r3, [r7, #4]
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d1f1      	bne.n	801b102 <mem_cpy+0x1a>
	}
}
 801b11e:	bf00      	nop
 801b120:	371c      	adds	r7, #28
 801b122:	46bd      	mov	sp, r7
 801b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b128:	4770      	bx	lr

0801b12a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801b12a:	b480      	push	{r7}
 801b12c:	b087      	sub	sp, #28
 801b12e:	af00      	add	r7, sp, #0
 801b130:	60f8      	str	r0, [r7, #12]
 801b132:	60b9      	str	r1, [r7, #8]
 801b134:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b136:	68fb      	ldr	r3, [r7, #12]
 801b138:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801b13a:	697b      	ldr	r3, [r7, #20]
 801b13c:	1c5a      	adds	r2, r3, #1
 801b13e:	617a      	str	r2, [r7, #20]
 801b140:	68ba      	ldr	r2, [r7, #8]
 801b142:	b2d2      	uxtb	r2, r2
 801b144:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	3b01      	subs	r3, #1
 801b14a:	607b      	str	r3, [r7, #4]
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d1f3      	bne.n	801b13a <mem_set+0x10>
}
 801b152:	bf00      	nop
 801b154:	bf00      	nop
 801b156:	371c      	adds	r7, #28
 801b158:	46bd      	mov	sp, r7
 801b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b15e:	4770      	bx	lr

0801b160 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801b160:	b480      	push	{r7}
 801b162:	b089      	sub	sp, #36	@ 0x24
 801b164:	af00      	add	r7, sp, #0
 801b166:	60f8      	str	r0, [r7, #12]
 801b168:	60b9      	str	r1, [r7, #8]
 801b16a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801b16c:	68fb      	ldr	r3, [r7, #12]
 801b16e:	61fb      	str	r3, [r7, #28]
 801b170:	68bb      	ldr	r3, [r7, #8]
 801b172:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801b174:	2300      	movs	r3, #0
 801b176:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801b178:	69fb      	ldr	r3, [r7, #28]
 801b17a:	1c5a      	adds	r2, r3, #1
 801b17c:	61fa      	str	r2, [r7, #28]
 801b17e:	781b      	ldrb	r3, [r3, #0]
 801b180:	4619      	mov	r1, r3
 801b182:	69bb      	ldr	r3, [r7, #24]
 801b184:	1c5a      	adds	r2, r3, #1
 801b186:	61ba      	str	r2, [r7, #24]
 801b188:	781b      	ldrb	r3, [r3, #0]
 801b18a:	1acb      	subs	r3, r1, r3
 801b18c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	3b01      	subs	r3, #1
 801b192:	607b      	str	r3, [r7, #4]
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	2b00      	cmp	r3, #0
 801b198:	d002      	beq.n	801b1a0 <mem_cmp+0x40>
 801b19a:	697b      	ldr	r3, [r7, #20]
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	d0eb      	beq.n	801b178 <mem_cmp+0x18>

	return r;
 801b1a0:	697b      	ldr	r3, [r7, #20]
}
 801b1a2:	4618      	mov	r0, r3
 801b1a4:	3724      	adds	r7, #36	@ 0x24
 801b1a6:	46bd      	mov	sp, r7
 801b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ac:	4770      	bx	lr

0801b1ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801b1ae:	b480      	push	{r7}
 801b1b0:	b083      	sub	sp, #12
 801b1b2:	af00      	add	r7, sp, #0
 801b1b4:	6078      	str	r0, [r7, #4]
 801b1b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801b1b8:	e002      	b.n	801b1c0 <chk_chr+0x12>
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	3301      	adds	r3, #1
 801b1be:	607b      	str	r3, [r7, #4]
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	781b      	ldrb	r3, [r3, #0]
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d005      	beq.n	801b1d4 <chk_chr+0x26>
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	781b      	ldrb	r3, [r3, #0]
 801b1cc:	461a      	mov	r2, r3
 801b1ce:	683b      	ldr	r3, [r7, #0]
 801b1d0:	4293      	cmp	r3, r2
 801b1d2:	d1f2      	bne.n	801b1ba <chk_chr+0xc>
	return *str;
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	781b      	ldrb	r3, [r3, #0]
}
 801b1d8:	4618      	mov	r0, r3
 801b1da:	370c      	adds	r7, #12
 801b1dc:	46bd      	mov	sp, r7
 801b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1e2:	4770      	bx	lr

0801b1e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b1e4:	b480      	push	{r7}
 801b1e6:	b085      	sub	sp, #20
 801b1e8:	af00      	add	r7, sp, #0
 801b1ea:	6078      	str	r0, [r7, #4]
 801b1ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b1ee:	2300      	movs	r3, #0
 801b1f0:	60bb      	str	r3, [r7, #8]
 801b1f2:	68bb      	ldr	r3, [r7, #8]
 801b1f4:	60fb      	str	r3, [r7, #12]
 801b1f6:	e029      	b.n	801b24c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801b1f8:	4a27      	ldr	r2, [pc, #156]	@ (801b298 <chk_lock+0xb4>)
 801b1fa:	68fb      	ldr	r3, [r7, #12]
 801b1fc:	011b      	lsls	r3, r3, #4
 801b1fe:	4413      	add	r3, r2
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	2b00      	cmp	r3, #0
 801b204:	d01d      	beq.n	801b242 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b206:	4a24      	ldr	r2, [pc, #144]	@ (801b298 <chk_lock+0xb4>)
 801b208:	68fb      	ldr	r3, [r7, #12]
 801b20a:	011b      	lsls	r3, r3, #4
 801b20c:	4413      	add	r3, r2
 801b20e:	681a      	ldr	r2, [r3, #0]
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	429a      	cmp	r2, r3
 801b216:	d116      	bne.n	801b246 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801b218:	4a1f      	ldr	r2, [pc, #124]	@ (801b298 <chk_lock+0xb4>)
 801b21a:	68fb      	ldr	r3, [r7, #12]
 801b21c:	011b      	lsls	r3, r3, #4
 801b21e:	4413      	add	r3, r2
 801b220:	3304      	adds	r3, #4
 801b222:	681a      	ldr	r2, [r3, #0]
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b228:	429a      	cmp	r2, r3
 801b22a:	d10c      	bne.n	801b246 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b22c:	4a1a      	ldr	r2, [pc, #104]	@ (801b298 <chk_lock+0xb4>)
 801b22e:	68fb      	ldr	r3, [r7, #12]
 801b230:	011b      	lsls	r3, r3, #4
 801b232:	4413      	add	r3, r2
 801b234:	3308      	adds	r3, #8
 801b236:	681a      	ldr	r2, [r3, #0]
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801b23c:	429a      	cmp	r2, r3
 801b23e:	d102      	bne.n	801b246 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b240:	e007      	b.n	801b252 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801b242:	2301      	movs	r3, #1
 801b244:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	3301      	adds	r3, #1
 801b24a:	60fb      	str	r3, [r7, #12]
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d0d2      	beq.n	801b1f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	2b01      	cmp	r3, #1
 801b256:	d109      	bne.n	801b26c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801b258:	68bb      	ldr	r3, [r7, #8]
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d102      	bne.n	801b264 <chk_lock+0x80>
 801b25e:	683b      	ldr	r3, [r7, #0]
 801b260:	2b02      	cmp	r3, #2
 801b262:	d101      	bne.n	801b268 <chk_lock+0x84>
 801b264:	2300      	movs	r3, #0
 801b266:	e010      	b.n	801b28a <chk_lock+0xa6>
 801b268:	2312      	movs	r3, #18
 801b26a:	e00e      	b.n	801b28a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801b26c:	683b      	ldr	r3, [r7, #0]
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d108      	bne.n	801b284 <chk_lock+0xa0>
 801b272:	4a09      	ldr	r2, [pc, #36]	@ (801b298 <chk_lock+0xb4>)
 801b274:	68fb      	ldr	r3, [r7, #12]
 801b276:	011b      	lsls	r3, r3, #4
 801b278:	4413      	add	r3, r2
 801b27a:	330c      	adds	r3, #12
 801b27c:	881b      	ldrh	r3, [r3, #0]
 801b27e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b282:	d101      	bne.n	801b288 <chk_lock+0xa4>
 801b284:	2310      	movs	r3, #16
 801b286:	e000      	b.n	801b28a <chk_lock+0xa6>
 801b288:	2300      	movs	r3, #0
}
 801b28a:	4618      	mov	r0, r3
 801b28c:	3714      	adds	r7, #20
 801b28e:	46bd      	mov	sp, r7
 801b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b294:	4770      	bx	lr
 801b296:	bf00      	nop
 801b298:	24000558 	.word	0x24000558

0801b29c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801b29c:	b480      	push	{r7}
 801b29e:	b083      	sub	sp, #12
 801b2a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b2a2:	2300      	movs	r3, #0
 801b2a4:	607b      	str	r3, [r7, #4]
 801b2a6:	e002      	b.n	801b2ae <enq_lock+0x12>
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	3301      	adds	r3, #1
 801b2ac:	607b      	str	r3, [r7, #4]
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d106      	bne.n	801b2c2 <enq_lock+0x26>
 801b2b4:	4a09      	ldr	r2, [pc, #36]	@ (801b2dc <enq_lock+0x40>)
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	011b      	lsls	r3, r3, #4
 801b2ba:	4413      	add	r3, r2
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d1f2      	bne.n	801b2a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	2b01      	cmp	r3, #1
 801b2c6:	bf14      	ite	ne
 801b2c8:	2301      	movne	r3, #1
 801b2ca:	2300      	moveq	r3, #0
 801b2cc:	b2db      	uxtb	r3, r3
}
 801b2ce:	4618      	mov	r0, r3
 801b2d0:	370c      	adds	r7, #12
 801b2d2:	46bd      	mov	sp, r7
 801b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2d8:	4770      	bx	lr
 801b2da:	bf00      	nop
 801b2dc:	24000558 	.word	0x24000558

0801b2e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b2e0:	b480      	push	{r7}
 801b2e2:	b085      	sub	sp, #20
 801b2e4:	af00      	add	r7, sp, #0
 801b2e6:	6078      	str	r0, [r7, #4]
 801b2e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b2ea:	2300      	movs	r3, #0
 801b2ec:	60fb      	str	r3, [r7, #12]
 801b2ee:	e01f      	b.n	801b330 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801b2f0:	4a41      	ldr	r2, [pc, #260]	@ (801b3f8 <inc_lock+0x118>)
 801b2f2:	68fb      	ldr	r3, [r7, #12]
 801b2f4:	011b      	lsls	r3, r3, #4
 801b2f6:	4413      	add	r3, r2
 801b2f8:	681a      	ldr	r2, [r3, #0]
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	429a      	cmp	r2, r3
 801b300:	d113      	bne.n	801b32a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801b302:	4a3d      	ldr	r2, [pc, #244]	@ (801b3f8 <inc_lock+0x118>)
 801b304:	68fb      	ldr	r3, [r7, #12]
 801b306:	011b      	lsls	r3, r3, #4
 801b308:	4413      	add	r3, r2
 801b30a:	3304      	adds	r3, #4
 801b30c:	681a      	ldr	r2, [r3, #0]
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801b312:	429a      	cmp	r2, r3
 801b314:	d109      	bne.n	801b32a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801b316:	4a38      	ldr	r2, [pc, #224]	@ (801b3f8 <inc_lock+0x118>)
 801b318:	68fb      	ldr	r3, [r7, #12]
 801b31a:	011b      	lsls	r3, r3, #4
 801b31c:	4413      	add	r3, r2
 801b31e:	3308      	adds	r3, #8
 801b320:	681a      	ldr	r2, [r3, #0]
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801b326:	429a      	cmp	r2, r3
 801b328:	d006      	beq.n	801b338 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b32a:	68fb      	ldr	r3, [r7, #12]
 801b32c:	3301      	adds	r3, #1
 801b32e:	60fb      	str	r3, [r7, #12]
 801b330:	68fb      	ldr	r3, [r7, #12]
 801b332:	2b00      	cmp	r3, #0
 801b334:	d0dc      	beq.n	801b2f0 <inc_lock+0x10>
 801b336:	e000      	b.n	801b33a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801b338:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801b33a:	68fb      	ldr	r3, [r7, #12]
 801b33c:	2b01      	cmp	r3, #1
 801b33e:	d132      	bne.n	801b3a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b340:	2300      	movs	r3, #0
 801b342:	60fb      	str	r3, [r7, #12]
 801b344:	e002      	b.n	801b34c <inc_lock+0x6c>
 801b346:	68fb      	ldr	r3, [r7, #12]
 801b348:	3301      	adds	r3, #1
 801b34a:	60fb      	str	r3, [r7, #12]
 801b34c:	68fb      	ldr	r3, [r7, #12]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d106      	bne.n	801b360 <inc_lock+0x80>
 801b352:	4a29      	ldr	r2, [pc, #164]	@ (801b3f8 <inc_lock+0x118>)
 801b354:	68fb      	ldr	r3, [r7, #12]
 801b356:	011b      	lsls	r3, r3, #4
 801b358:	4413      	add	r3, r2
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d1f2      	bne.n	801b346 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801b360:	68fb      	ldr	r3, [r7, #12]
 801b362:	2b01      	cmp	r3, #1
 801b364:	d101      	bne.n	801b36a <inc_lock+0x8a>
 801b366:	2300      	movs	r3, #0
 801b368:	e040      	b.n	801b3ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	681a      	ldr	r2, [r3, #0]
 801b36e:	4922      	ldr	r1, [pc, #136]	@ (801b3f8 <inc_lock+0x118>)
 801b370:	68fb      	ldr	r3, [r7, #12]
 801b372:	011b      	lsls	r3, r3, #4
 801b374:	440b      	add	r3, r1
 801b376:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	689a      	ldr	r2, [r3, #8]
 801b37c:	491e      	ldr	r1, [pc, #120]	@ (801b3f8 <inc_lock+0x118>)
 801b37e:	68fb      	ldr	r3, [r7, #12]
 801b380:	011b      	lsls	r3, r3, #4
 801b382:	440b      	add	r3, r1
 801b384:	3304      	adds	r3, #4
 801b386:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	695a      	ldr	r2, [r3, #20]
 801b38c:	491a      	ldr	r1, [pc, #104]	@ (801b3f8 <inc_lock+0x118>)
 801b38e:	68fb      	ldr	r3, [r7, #12]
 801b390:	011b      	lsls	r3, r3, #4
 801b392:	440b      	add	r3, r1
 801b394:	3308      	adds	r3, #8
 801b396:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801b398:	4a17      	ldr	r2, [pc, #92]	@ (801b3f8 <inc_lock+0x118>)
 801b39a:	68fb      	ldr	r3, [r7, #12]
 801b39c:	011b      	lsls	r3, r3, #4
 801b39e:	4413      	add	r3, r2
 801b3a0:	330c      	adds	r3, #12
 801b3a2:	2200      	movs	r2, #0
 801b3a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801b3a6:	683b      	ldr	r3, [r7, #0]
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d009      	beq.n	801b3c0 <inc_lock+0xe0>
 801b3ac:	4a12      	ldr	r2, [pc, #72]	@ (801b3f8 <inc_lock+0x118>)
 801b3ae:	68fb      	ldr	r3, [r7, #12]
 801b3b0:	011b      	lsls	r3, r3, #4
 801b3b2:	4413      	add	r3, r2
 801b3b4:	330c      	adds	r3, #12
 801b3b6:	881b      	ldrh	r3, [r3, #0]
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d001      	beq.n	801b3c0 <inc_lock+0xe0>
 801b3bc:	2300      	movs	r3, #0
 801b3be:	e015      	b.n	801b3ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801b3c0:	683b      	ldr	r3, [r7, #0]
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d108      	bne.n	801b3d8 <inc_lock+0xf8>
 801b3c6:	4a0c      	ldr	r2, [pc, #48]	@ (801b3f8 <inc_lock+0x118>)
 801b3c8:	68fb      	ldr	r3, [r7, #12]
 801b3ca:	011b      	lsls	r3, r3, #4
 801b3cc:	4413      	add	r3, r2
 801b3ce:	330c      	adds	r3, #12
 801b3d0:	881b      	ldrh	r3, [r3, #0]
 801b3d2:	3301      	adds	r3, #1
 801b3d4:	b29a      	uxth	r2, r3
 801b3d6:	e001      	b.n	801b3dc <inc_lock+0xfc>
 801b3d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b3dc:	4906      	ldr	r1, [pc, #24]	@ (801b3f8 <inc_lock+0x118>)
 801b3de:	68fb      	ldr	r3, [r7, #12]
 801b3e0:	011b      	lsls	r3, r3, #4
 801b3e2:	440b      	add	r3, r1
 801b3e4:	330c      	adds	r3, #12
 801b3e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801b3e8:	68fb      	ldr	r3, [r7, #12]
 801b3ea:	3301      	adds	r3, #1
}
 801b3ec:	4618      	mov	r0, r3
 801b3ee:	3714      	adds	r7, #20
 801b3f0:	46bd      	mov	sp, r7
 801b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3f6:	4770      	bx	lr
 801b3f8:	24000558 	.word	0x24000558

0801b3fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801b3fc:	b480      	push	{r7}
 801b3fe:	b085      	sub	sp, #20
 801b400:	af00      	add	r7, sp, #0
 801b402:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	3b01      	subs	r3, #1
 801b408:	607b      	str	r3, [r7, #4]
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	d125      	bne.n	801b45c <dec_lock+0x60>
		n = Files[i].ctr;
 801b410:	4a17      	ldr	r2, [pc, #92]	@ (801b470 <dec_lock+0x74>)
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	011b      	lsls	r3, r3, #4
 801b416:	4413      	add	r3, r2
 801b418:	330c      	adds	r3, #12
 801b41a:	881b      	ldrh	r3, [r3, #0]
 801b41c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801b41e:	89fb      	ldrh	r3, [r7, #14]
 801b420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b424:	d101      	bne.n	801b42a <dec_lock+0x2e>
 801b426:	2300      	movs	r3, #0
 801b428:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801b42a:	89fb      	ldrh	r3, [r7, #14]
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d002      	beq.n	801b436 <dec_lock+0x3a>
 801b430:	89fb      	ldrh	r3, [r7, #14]
 801b432:	3b01      	subs	r3, #1
 801b434:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801b436:	4a0e      	ldr	r2, [pc, #56]	@ (801b470 <dec_lock+0x74>)
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	011b      	lsls	r3, r3, #4
 801b43c:	4413      	add	r3, r2
 801b43e:	330c      	adds	r3, #12
 801b440:	89fa      	ldrh	r2, [r7, #14]
 801b442:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801b444:	89fb      	ldrh	r3, [r7, #14]
 801b446:	2b00      	cmp	r3, #0
 801b448:	d105      	bne.n	801b456 <dec_lock+0x5a>
 801b44a:	4a09      	ldr	r2, [pc, #36]	@ (801b470 <dec_lock+0x74>)
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	011b      	lsls	r3, r3, #4
 801b450:	4413      	add	r3, r2
 801b452:	2200      	movs	r2, #0
 801b454:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801b456:	2300      	movs	r3, #0
 801b458:	737b      	strb	r3, [r7, #13]
 801b45a:	e001      	b.n	801b460 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801b45c:	2302      	movs	r3, #2
 801b45e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801b460:	7b7b      	ldrb	r3, [r7, #13]
}
 801b462:	4618      	mov	r0, r3
 801b464:	3714      	adds	r7, #20
 801b466:	46bd      	mov	sp, r7
 801b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b46c:	4770      	bx	lr
 801b46e:	bf00      	nop
 801b470:	24000558 	.word	0x24000558

0801b474 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801b474:	b480      	push	{r7}
 801b476:	b085      	sub	sp, #20
 801b478:	af00      	add	r7, sp, #0
 801b47a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801b47c:	2300      	movs	r3, #0
 801b47e:	60fb      	str	r3, [r7, #12]
 801b480:	e010      	b.n	801b4a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801b482:	4a0d      	ldr	r2, [pc, #52]	@ (801b4b8 <clear_lock+0x44>)
 801b484:	68fb      	ldr	r3, [r7, #12]
 801b486:	011b      	lsls	r3, r3, #4
 801b488:	4413      	add	r3, r2
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	687a      	ldr	r2, [r7, #4]
 801b48e:	429a      	cmp	r2, r3
 801b490:	d105      	bne.n	801b49e <clear_lock+0x2a>
 801b492:	4a09      	ldr	r2, [pc, #36]	@ (801b4b8 <clear_lock+0x44>)
 801b494:	68fb      	ldr	r3, [r7, #12]
 801b496:	011b      	lsls	r3, r3, #4
 801b498:	4413      	add	r3, r2
 801b49a:	2200      	movs	r2, #0
 801b49c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801b49e:	68fb      	ldr	r3, [r7, #12]
 801b4a0:	3301      	adds	r3, #1
 801b4a2:	60fb      	str	r3, [r7, #12]
 801b4a4:	68fb      	ldr	r3, [r7, #12]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d0eb      	beq.n	801b482 <clear_lock+0xe>
	}
}
 801b4aa:	bf00      	nop
 801b4ac:	bf00      	nop
 801b4ae:	3714      	adds	r7, #20
 801b4b0:	46bd      	mov	sp, r7
 801b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4b6:	4770      	bx	lr
 801b4b8:	24000558 	.word	0x24000558

0801b4bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801b4bc:	b580      	push	{r7, lr}
 801b4be:	b086      	sub	sp, #24
 801b4c0:	af00      	add	r7, sp, #0
 801b4c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801b4c4:	2300      	movs	r3, #0
 801b4c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	78db      	ldrb	r3, [r3, #3]
 801b4cc:	2b00      	cmp	r3, #0
 801b4ce:	d034      	beq.n	801b53a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b4d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	7858      	ldrb	r0, [r3, #1]
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b4e0:	2301      	movs	r3, #1
 801b4e2:	697a      	ldr	r2, [r7, #20]
 801b4e4:	f7ff fd40 	bl	801af68 <disk_write>
 801b4e8:	4603      	mov	r3, r0
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d002      	beq.n	801b4f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 801b4ee:	2301      	movs	r3, #1
 801b4f0:	73fb      	strb	r3, [r7, #15]
 801b4f2:	e022      	b.n	801b53a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	2200      	movs	r2, #0
 801b4f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b4fe:	697a      	ldr	r2, [r7, #20]
 801b500:	1ad2      	subs	r2, r2, r3
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	6a1b      	ldr	r3, [r3, #32]
 801b506:	429a      	cmp	r2, r3
 801b508:	d217      	bcs.n	801b53a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	789b      	ldrb	r3, [r3, #2]
 801b50e:	613b      	str	r3, [r7, #16]
 801b510:	e010      	b.n	801b534 <sync_window+0x78>
					wsect += fs->fsize;
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	6a1b      	ldr	r3, [r3, #32]
 801b516:	697a      	ldr	r2, [r7, #20]
 801b518:	4413      	add	r3, r2
 801b51a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	7858      	ldrb	r0, [r3, #1]
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b526:	2301      	movs	r3, #1
 801b528:	697a      	ldr	r2, [r7, #20]
 801b52a:	f7ff fd1d 	bl	801af68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b52e:	693b      	ldr	r3, [r7, #16]
 801b530:	3b01      	subs	r3, #1
 801b532:	613b      	str	r3, [r7, #16]
 801b534:	693b      	ldr	r3, [r7, #16]
 801b536:	2b01      	cmp	r3, #1
 801b538:	d8eb      	bhi.n	801b512 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801b53a:	7bfb      	ldrb	r3, [r7, #15]
}
 801b53c:	4618      	mov	r0, r3
 801b53e:	3718      	adds	r7, #24
 801b540:	46bd      	mov	sp, r7
 801b542:	bd80      	pop	{r7, pc}

0801b544 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801b544:	b580      	push	{r7, lr}
 801b546:	b084      	sub	sp, #16
 801b548:	af00      	add	r7, sp, #0
 801b54a:	6078      	str	r0, [r7, #4]
 801b54c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801b54e:	2300      	movs	r3, #0
 801b550:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b556:	683a      	ldr	r2, [r7, #0]
 801b558:	429a      	cmp	r2, r3
 801b55a:	d01b      	beq.n	801b594 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801b55c:	6878      	ldr	r0, [r7, #4]
 801b55e:	f7ff ffad 	bl	801b4bc <sync_window>
 801b562:	4603      	mov	r3, r0
 801b564:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801b566:	7bfb      	ldrb	r3, [r7, #15]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d113      	bne.n	801b594 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	7858      	ldrb	r0, [r3, #1]
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b576:	2301      	movs	r3, #1
 801b578:	683a      	ldr	r2, [r7, #0]
 801b57a:	f7ff fcd5 	bl	801af28 <disk_read>
 801b57e:	4603      	mov	r3, r0
 801b580:	2b00      	cmp	r3, #0
 801b582:	d004      	beq.n	801b58e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801b584:	f04f 33ff 	mov.w	r3, #4294967295
 801b588:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801b58a:	2301      	movs	r3, #1
 801b58c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801b58e:	687b      	ldr	r3, [r7, #4]
 801b590:	683a      	ldr	r2, [r7, #0]
 801b592:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801b594:	7bfb      	ldrb	r3, [r7, #15]
}
 801b596:	4618      	mov	r0, r3
 801b598:	3710      	adds	r7, #16
 801b59a:	46bd      	mov	sp, r7
 801b59c:	bd80      	pop	{r7, pc}
	...

0801b5a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801b5a0:	b580      	push	{r7, lr}
 801b5a2:	b084      	sub	sp, #16
 801b5a4:	af00      	add	r7, sp, #0
 801b5a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801b5a8:	6878      	ldr	r0, [r7, #4]
 801b5aa:	f7ff ff87 	bl	801b4bc <sync_window>
 801b5ae:	4603      	mov	r3, r0
 801b5b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b5b2:	7bfb      	ldrb	r3, [r7, #15]
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d159      	bne.n	801b66c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	781b      	ldrb	r3, [r3, #0]
 801b5bc:	2b03      	cmp	r3, #3
 801b5be:	d149      	bne.n	801b654 <sync_fs+0xb4>
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	791b      	ldrb	r3, [r3, #4]
 801b5c4:	2b01      	cmp	r3, #1
 801b5c6:	d145      	bne.n	801b654 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	899b      	ldrh	r3, [r3, #12]
 801b5d2:	461a      	mov	r2, r3
 801b5d4:	2100      	movs	r1, #0
 801b5d6:	f7ff fda8 	bl	801b12a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	3338      	adds	r3, #56	@ 0x38
 801b5de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b5e2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801b5e6:	4618      	mov	r0, r3
 801b5e8:	f7ff fd37 	bl	801b05a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	3338      	adds	r3, #56	@ 0x38
 801b5f0:	4921      	ldr	r1, [pc, #132]	@ (801b678 <sync_fs+0xd8>)
 801b5f2:	4618      	mov	r0, r3
 801b5f4:	f7ff fd4c 	bl	801b090 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	3338      	adds	r3, #56	@ 0x38
 801b5fc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b600:	491e      	ldr	r1, [pc, #120]	@ (801b67c <sync_fs+0xdc>)
 801b602:	4618      	mov	r0, r3
 801b604:	f7ff fd44 	bl	801b090 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	3338      	adds	r3, #56	@ 0x38
 801b60c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	699b      	ldr	r3, [r3, #24]
 801b614:	4619      	mov	r1, r3
 801b616:	4610      	mov	r0, r2
 801b618:	f7ff fd3a 	bl	801b090 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	3338      	adds	r3, #56	@ 0x38
 801b620:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	695b      	ldr	r3, [r3, #20]
 801b628:	4619      	mov	r1, r3
 801b62a:	4610      	mov	r0, r2
 801b62c:	f7ff fd30 	bl	801b090 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b634:	1c5a      	adds	r2, r3, #1
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	7858      	ldrb	r0, [r3, #1]
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b648:	2301      	movs	r3, #1
 801b64a:	f7ff fc8d 	bl	801af68 <disk_write>
			fs->fsi_flag = 0;
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	2200      	movs	r2, #0
 801b652:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	785b      	ldrb	r3, [r3, #1]
 801b658:	2200      	movs	r2, #0
 801b65a:	2100      	movs	r1, #0
 801b65c:	4618      	mov	r0, r3
 801b65e:	f7ff fca3 	bl	801afa8 <disk_ioctl>
 801b662:	4603      	mov	r3, r0
 801b664:	2b00      	cmp	r3, #0
 801b666:	d001      	beq.n	801b66c <sync_fs+0xcc>
 801b668:	2301      	movs	r3, #1
 801b66a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b66c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b66e:	4618      	mov	r0, r3
 801b670:	3710      	adds	r7, #16
 801b672:	46bd      	mov	sp, r7
 801b674:	bd80      	pop	{r7, pc}
 801b676:	bf00      	nop
 801b678:	41615252 	.word	0x41615252
 801b67c:	61417272 	.word	0x61417272

0801b680 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b680:	b480      	push	{r7}
 801b682:	b083      	sub	sp, #12
 801b684:	af00      	add	r7, sp, #0
 801b686:	6078      	str	r0, [r7, #4]
 801b688:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b68a:	683b      	ldr	r3, [r7, #0]
 801b68c:	3b02      	subs	r3, #2
 801b68e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	69db      	ldr	r3, [r3, #28]
 801b694:	3b02      	subs	r3, #2
 801b696:	683a      	ldr	r2, [r7, #0]
 801b698:	429a      	cmp	r2, r3
 801b69a:	d301      	bcc.n	801b6a0 <clust2sect+0x20>
 801b69c:	2300      	movs	r3, #0
 801b69e:	e008      	b.n	801b6b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	895b      	ldrh	r3, [r3, #10]
 801b6a4:	461a      	mov	r2, r3
 801b6a6:	683b      	ldr	r3, [r7, #0]
 801b6a8:	fb03 f202 	mul.w	r2, r3, r2
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b6b0:	4413      	add	r3, r2
}
 801b6b2:	4618      	mov	r0, r3
 801b6b4:	370c      	adds	r7, #12
 801b6b6:	46bd      	mov	sp, r7
 801b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6bc:	4770      	bx	lr

0801b6be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b6be:	b580      	push	{r7, lr}
 801b6c0:	b086      	sub	sp, #24
 801b6c2:	af00      	add	r7, sp, #0
 801b6c4:	6078      	str	r0, [r7, #4]
 801b6c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b6ce:	683b      	ldr	r3, [r7, #0]
 801b6d0:	2b01      	cmp	r3, #1
 801b6d2:	d904      	bls.n	801b6de <get_fat+0x20>
 801b6d4:	693b      	ldr	r3, [r7, #16]
 801b6d6:	69db      	ldr	r3, [r3, #28]
 801b6d8:	683a      	ldr	r2, [r7, #0]
 801b6da:	429a      	cmp	r2, r3
 801b6dc:	d302      	bcc.n	801b6e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 801b6de:	2301      	movs	r3, #1
 801b6e0:	617b      	str	r3, [r7, #20]
 801b6e2:	e0ba      	b.n	801b85a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b6e4:	f04f 33ff 	mov.w	r3, #4294967295
 801b6e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b6ea:	693b      	ldr	r3, [r7, #16]
 801b6ec:	781b      	ldrb	r3, [r3, #0]
 801b6ee:	2b03      	cmp	r3, #3
 801b6f0:	f000 8082 	beq.w	801b7f8 <get_fat+0x13a>
 801b6f4:	2b03      	cmp	r3, #3
 801b6f6:	f300 80a6 	bgt.w	801b846 <get_fat+0x188>
 801b6fa:	2b01      	cmp	r3, #1
 801b6fc:	d002      	beq.n	801b704 <get_fat+0x46>
 801b6fe:	2b02      	cmp	r3, #2
 801b700:	d055      	beq.n	801b7ae <get_fat+0xf0>
 801b702:	e0a0      	b.n	801b846 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b704:	683b      	ldr	r3, [r7, #0]
 801b706:	60fb      	str	r3, [r7, #12]
 801b708:	68fb      	ldr	r3, [r7, #12]
 801b70a:	085b      	lsrs	r3, r3, #1
 801b70c:	68fa      	ldr	r2, [r7, #12]
 801b70e:	4413      	add	r3, r2
 801b710:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b712:	693b      	ldr	r3, [r7, #16]
 801b714:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b716:	693b      	ldr	r3, [r7, #16]
 801b718:	899b      	ldrh	r3, [r3, #12]
 801b71a:	4619      	mov	r1, r3
 801b71c:	68fb      	ldr	r3, [r7, #12]
 801b71e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b722:	4413      	add	r3, r2
 801b724:	4619      	mov	r1, r3
 801b726:	6938      	ldr	r0, [r7, #16]
 801b728:	f7ff ff0c 	bl	801b544 <move_window>
 801b72c:	4603      	mov	r3, r0
 801b72e:	2b00      	cmp	r3, #0
 801b730:	f040 808c 	bne.w	801b84c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801b734:	68fb      	ldr	r3, [r7, #12]
 801b736:	1c5a      	adds	r2, r3, #1
 801b738:	60fa      	str	r2, [r7, #12]
 801b73a:	693a      	ldr	r2, [r7, #16]
 801b73c:	8992      	ldrh	r2, [r2, #12]
 801b73e:	fbb3 f1f2 	udiv	r1, r3, r2
 801b742:	fb01 f202 	mul.w	r2, r1, r2
 801b746:	1a9b      	subs	r3, r3, r2
 801b748:	693a      	ldr	r2, [r7, #16]
 801b74a:	4413      	add	r3, r2
 801b74c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b750:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b752:	693b      	ldr	r3, [r7, #16]
 801b754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b756:	693b      	ldr	r3, [r7, #16]
 801b758:	899b      	ldrh	r3, [r3, #12]
 801b75a:	4619      	mov	r1, r3
 801b75c:	68fb      	ldr	r3, [r7, #12]
 801b75e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b762:	4413      	add	r3, r2
 801b764:	4619      	mov	r1, r3
 801b766:	6938      	ldr	r0, [r7, #16]
 801b768:	f7ff feec 	bl	801b544 <move_window>
 801b76c:	4603      	mov	r3, r0
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d16e      	bne.n	801b850 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b772:	693b      	ldr	r3, [r7, #16]
 801b774:	899b      	ldrh	r3, [r3, #12]
 801b776:	461a      	mov	r2, r3
 801b778:	68fb      	ldr	r3, [r7, #12]
 801b77a:	fbb3 f1f2 	udiv	r1, r3, r2
 801b77e:	fb01 f202 	mul.w	r2, r1, r2
 801b782:	1a9b      	subs	r3, r3, r2
 801b784:	693a      	ldr	r2, [r7, #16]
 801b786:	4413      	add	r3, r2
 801b788:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b78c:	021b      	lsls	r3, r3, #8
 801b78e:	68ba      	ldr	r2, [r7, #8]
 801b790:	4313      	orrs	r3, r2
 801b792:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b794:	683b      	ldr	r3, [r7, #0]
 801b796:	f003 0301 	and.w	r3, r3, #1
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d002      	beq.n	801b7a4 <get_fat+0xe6>
 801b79e:	68bb      	ldr	r3, [r7, #8]
 801b7a0:	091b      	lsrs	r3, r3, #4
 801b7a2:	e002      	b.n	801b7aa <get_fat+0xec>
 801b7a4:	68bb      	ldr	r3, [r7, #8]
 801b7a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b7aa:	617b      	str	r3, [r7, #20]
			break;
 801b7ac:	e055      	b.n	801b85a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b7ae:	693b      	ldr	r3, [r7, #16]
 801b7b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b7b2:	693b      	ldr	r3, [r7, #16]
 801b7b4:	899b      	ldrh	r3, [r3, #12]
 801b7b6:	085b      	lsrs	r3, r3, #1
 801b7b8:	b29b      	uxth	r3, r3
 801b7ba:	4619      	mov	r1, r3
 801b7bc:	683b      	ldr	r3, [r7, #0]
 801b7be:	fbb3 f3f1 	udiv	r3, r3, r1
 801b7c2:	4413      	add	r3, r2
 801b7c4:	4619      	mov	r1, r3
 801b7c6:	6938      	ldr	r0, [r7, #16]
 801b7c8:	f7ff febc 	bl	801b544 <move_window>
 801b7cc:	4603      	mov	r3, r0
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d140      	bne.n	801b854 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b7d2:	693b      	ldr	r3, [r7, #16]
 801b7d4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b7d8:	683b      	ldr	r3, [r7, #0]
 801b7da:	005b      	lsls	r3, r3, #1
 801b7dc:	693a      	ldr	r2, [r7, #16]
 801b7de:	8992      	ldrh	r2, [r2, #12]
 801b7e0:	fbb3 f0f2 	udiv	r0, r3, r2
 801b7e4:	fb00 f202 	mul.w	r2, r0, r2
 801b7e8:	1a9b      	subs	r3, r3, r2
 801b7ea:	440b      	add	r3, r1
 801b7ec:	4618      	mov	r0, r3
 801b7ee:	f7ff fbf9 	bl	801afe4 <ld_word>
 801b7f2:	4603      	mov	r3, r0
 801b7f4:	617b      	str	r3, [r7, #20]
			break;
 801b7f6:	e030      	b.n	801b85a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b7f8:	693b      	ldr	r3, [r7, #16]
 801b7fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b7fc:	693b      	ldr	r3, [r7, #16]
 801b7fe:	899b      	ldrh	r3, [r3, #12]
 801b800:	089b      	lsrs	r3, r3, #2
 801b802:	b29b      	uxth	r3, r3
 801b804:	4619      	mov	r1, r3
 801b806:	683b      	ldr	r3, [r7, #0]
 801b808:	fbb3 f3f1 	udiv	r3, r3, r1
 801b80c:	4413      	add	r3, r2
 801b80e:	4619      	mov	r1, r3
 801b810:	6938      	ldr	r0, [r7, #16]
 801b812:	f7ff fe97 	bl	801b544 <move_window>
 801b816:	4603      	mov	r3, r0
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d11d      	bne.n	801b858 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b81c:	693b      	ldr	r3, [r7, #16]
 801b81e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b822:	683b      	ldr	r3, [r7, #0]
 801b824:	009b      	lsls	r3, r3, #2
 801b826:	693a      	ldr	r2, [r7, #16]
 801b828:	8992      	ldrh	r2, [r2, #12]
 801b82a:	fbb3 f0f2 	udiv	r0, r3, r2
 801b82e:	fb00 f202 	mul.w	r2, r0, r2
 801b832:	1a9b      	subs	r3, r3, r2
 801b834:	440b      	add	r3, r1
 801b836:	4618      	mov	r0, r3
 801b838:	f7ff fbec 	bl	801b014 <ld_dword>
 801b83c:	4603      	mov	r3, r0
 801b83e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801b842:	617b      	str	r3, [r7, #20]
			break;
 801b844:	e009      	b.n	801b85a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b846:	2301      	movs	r3, #1
 801b848:	617b      	str	r3, [r7, #20]
 801b84a:	e006      	b.n	801b85a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b84c:	bf00      	nop
 801b84e:	e004      	b.n	801b85a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b850:	bf00      	nop
 801b852:	e002      	b.n	801b85a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b854:	bf00      	nop
 801b856:	e000      	b.n	801b85a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b858:	bf00      	nop
		}
	}

	return val;
 801b85a:	697b      	ldr	r3, [r7, #20]
}
 801b85c:	4618      	mov	r0, r3
 801b85e:	3718      	adds	r7, #24
 801b860:	46bd      	mov	sp, r7
 801b862:	bd80      	pop	{r7, pc}

0801b864 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b864:	b590      	push	{r4, r7, lr}
 801b866:	b089      	sub	sp, #36	@ 0x24
 801b868:	af00      	add	r7, sp, #0
 801b86a:	60f8      	str	r0, [r7, #12]
 801b86c:	60b9      	str	r1, [r7, #8]
 801b86e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801b870:	2302      	movs	r3, #2
 801b872:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801b874:	68bb      	ldr	r3, [r7, #8]
 801b876:	2b01      	cmp	r3, #1
 801b878:	f240 8109 	bls.w	801ba8e <put_fat+0x22a>
 801b87c:	68fb      	ldr	r3, [r7, #12]
 801b87e:	69db      	ldr	r3, [r3, #28]
 801b880:	68ba      	ldr	r2, [r7, #8]
 801b882:	429a      	cmp	r2, r3
 801b884:	f080 8103 	bcs.w	801ba8e <put_fat+0x22a>
		switch (fs->fs_type) {
 801b888:	68fb      	ldr	r3, [r7, #12]
 801b88a:	781b      	ldrb	r3, [r3, #0]
 801b88c:	2b03      	cmp	r3, #3
 801b88e:	f000 80b6 	beq.w	801b9fe <put_fat+0x19a>
 801b892:	2b03      	cmp	r3, #3
 801b894:	f300 80fb 	bgt.w	801ba8e <put_fat+0x22a>
 801b898:	2b01      	cmp	r3, #1
 801b89a:	d003      	beq.n	801b8a4 <put_fat+0x40>
 801b89c:	2b02      	cmp	r3, #2
 801b89e:	f000 8083 	beq.w	801b9a8 <put_fat+0x144>
 801b8a2:	e0f4      	b.n	801ba8e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b8a4:	68bb      	ldr	r3, [r7, #8]
 801b8a6:	61bb      	str	r3, [r7, #24]
 801b8a8:	69bb      	ldr	r3, [r7, #24]
 801b8aa:	085b      	lsrs	r3, r3, #1
 801b8ac:	69ba      	ldr	r2, [r7, #24]
 801b8ae:	4413      	add	r3, r2
 801b8b0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b8b2:	68fb      	ldr	r3, [r7, #12]
 801b8b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b8b6:	68fb      	ldr	r3, [r7, #12]
 801b8b8:	899b      	ldrh	r3, [r3, #12]
 801b8ba:	4619      	mov	r1, r3
 801b8bc:	69bb      	ldr	r3, [r7, #24]
 801b8be:	fbb3 f3f1 	udiv	r3, r3, r1
 801b8c2:	4413      	add	r3, r2
 801b8c4:	4619      	mov	r1, r3
 801b8c6:	68f8      	ldr	r0, [r7, #12]
 801b8c8:	f7ff fe3c 	bl	801b544 <move_window>
 801b8cc:	4603      	mov	r3, r0
 801b8ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b8d0:	7ffb      	ldrb	r3, [r7, #31]
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	f040 80d4 	bne.w	801ba80 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801b8d8:	68fb      	ldr	r3, [r7, #12]
 801b8da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b8de:	69bb      	ldr	r3, [r7, #24]
 801b8e0:	1c5a      	adds	r2, r3, #1
 801b8e2:	61ba      	str	r2, [r7, #24]
 801b8e4:	68fa      	ldr	r2, [r7, #12]
 801b8e6:	8992      	ldrh	r2, [r2, #12]
 801b8e8:	fbb3 f0f2 	udiv	r0, r3, r2
 801b8ec:	fb00 f202 	mul.w	r2, r0, r2
 801b8f0:	1a9b      	subs	r3, r3, r2
 801b8f2:	440b      	add	r3, r1
 801b8f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b8f6:	68bb      	ldr	r3, [r7, #8]
 801b8f8:	f003 0301 	and.w	r3, r3, #1
 801b8fc:	2b00      	cmp	r3, #0
 801b8fe:	d00d      	beq.n	801b91c <put_fat+0xb8>
 801b900:	697b      	ldr	r3, [r7, #20]
 801b902:	781b      	ldrb	r3, [r3, #0]
 801b904:	b25b      	sxtb	r3, r3
 801b906:	f003 030f 	and.w	r3, r3, #15
 801b90a:	b25a      	sxtb	r2, r3
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	b2db      	uxtb	r3, r3
 801b910:	011b      	lsls	r3, r3, #4
 801b912:	b25b      	sxtb	r3, r3
 801b914:	4313      	orrs	r3, r2
 801b916:	b25b      	sxtb	r3, r3
 801b918:	b2db      	uxtb	r3, r3
 801b91a:	e001      	b.n	801b920 <put_fat+0xbc>
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	b2db      	uxtb	r3, r3
 801b920:	697a      	ldr	r2, [r7, #20]
 801b922:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b924:	68fb      	ldr	r3, [r7, #12]
 801b926:	2201      	movs	r2, #1
 801b928:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b92a:	68fb      	ldr	r3, [r7, #12]
 801b92c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b92e:	68fb      	ldr	r3, [r7, #12]
 801b930:	899b      	ldrh	r3, [r3, #12]
 801b932:	4619      	mov	r1, r3
 801b934:	69bb      	ldr	r3, [r7, #24]
 801b936:	fbb3 f3f1 	udiv	r3, r3, r1
 801b93a:	4413      	add	r3, r2
 801b93c:	4619      	mov	r1, r3
 801b93e:	68f8      	ldr	r0, [r7, #12]
 801b940:	f7ff fe00 	bl	801b544 <move_window>
 801b944:	4603      	mov	r3, r0
 801b946:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b948:	7ffb      	ldrb	r3, [r7, #31]
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	f040 809a 	bne.w	801ba84 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801b950:	68fb      	ldr	r3, [r7, #12]
 801b952:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b956:	68fb      	ldr	r3, [r7, #12]
 801b958:	899b      	ldrh	r3, [r3, #12]
 801b95a:	461a      	mov	r2, r3
 801b95c:	69bb      	ldr	r3, [r7, #24]
 801b95e:	fbb3 f0f2 	udiv	r0, r3, r2
 801b962:	fb00 f202 	mul.w	r2, r0, r2
 801b966:	1a9b      	subs	r3, r3, r2
 801b968:	440b      	add	r3, r1
 801b96a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b96c:	68bb      	ldr	r3, [r7, #8]
 801b96e:	f003 0301 	and.w	r3, r3, #1
 801b972:	2b00      	cmp	r3, #0
 801b974:	d003      	beq.n	801b97e <put_fat+0x11a>
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	091b      	lsrs	r3, r3, #4
 801b97a:	b2db      	uxtb	r3, r3
 801b97c:	e00e      	b.n	801b99c <put_fat+0x138>
 801b97e:	697b      	ldr	r3, [r7, #20]
 801b980:	781b      	ldrb	r3, [r3, #0]
 801b982:	b25b      	sxtb	r3, r3
 801b984:	f023 030f 	bic.w	r3, r3, #15
 801b988:	b25a      	sxtb	r2, r3
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	0a1b      	lsrs	r3, r3, #8
 801b98e:	b25b      	sxtb	r3, r3
 801b990:	f003 030f 	and.w	r3, r3, #15
 801b994:	b25b      	sxtb	r3, r3
 801b996:	4313      	orrs	r3, r2
 801b998:	b25b      	sxtb	r3, r3
 801b99a:	b2db      	uxtb	r3, r3
 801b99c:	697a      	ldr	r2, [r7, #20]
 801b99e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	2201      	movs	r2, #1
 801b9a4:	70da      	strb	r2, [r3, #3]
			break;
 801b9a6:	e072      	b.n	801ba8e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b9ac:	68fb      	ldr	r3, [r7, #12]
 801b9ae:	899b      	ldrh	r3, [r3, #12]
 801b9b0:	085b      	lsrs	r3, r3, #1
 801b9b2:	b29b      	uxth	r3, r3
 801b9b4:	4619      	mov	r1, r3
 801b9b6:	68bb      	ldr	r3, [r7, #8]
 801b9b8:	fbb3 f3f1 	udiv	r3, r3, r1
 801b9bc:	4413      	add	r3, r2
 801b9be:	4619      	mov	r1, r3
 801b9c0:	68f8      	ldr	r0, [r7, #12]
 801b9c2:	f7ff fdbf 	bl	801b544 <move_window>
 801b9c6:	4603      	mov	r3, r0
 801b9c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b9ca:	7ffb      	ldrb	r3, [r7, #31]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d15b      	bne.n	801ba88 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b9d0:	68fb      	ldr	r3, [r7, #12]
 801b9d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b9d6:	68bb      	ldr	r3, [r7, #8]
 801b9d8:	005b      	lsls	r3, r3, #1
 801b9da:	68fa      	ldr	r2, [r7, #12]
 801b9dc:	8992      	ldrh	r2, [r2, #12]
 801b9de:	fbb3 f0f2 	udiv	r0, r3, r2
 801b9e2:	fb00 f202 	mul.w	r2, r0, r2
 801b9e6:	1a9b      	subs	r3, r3, r2
 801b9e8:	440b      	add	r3, r1
 801b9ea:	687a      	ldr	r2, [r7, #4]
 801b9ec:	b292      	uxth	r2, r2
 801b9ee:	4611      	mov	r1, r2
 801b9f0:	4618      	mov	r0, r3
 801b9f2:	f7ff fb32 	bl	801b05a <st_word>
			fs->wflag = 1;
 801b9f6:	68fb      	ldr	r3, [r7, #12]
 801b9f8:	2201      	movs	r2, #1
 801b9fa:	70da      	strb	r2, [r3, #3]
			break;
 801b9fc:	e047      	b.n	801ba8e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b9fe:	68fb      	ldr	r3, [r7, #12]
 801ba00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ba02:	68fb      	ldr	r3, [r7, #12]
 801ba04:	899b      	ldrh	r3, [r3, #12]
 801ba06:	089b      	lsrs	r3, r3, #2
 801ba08:	b29b      	uxth	r3, r3
 801ba0a:	4619      	mov	r1, r3
 801ba0c:	68bb      	ldr	r3, [r7, #8]
 801ba0e:	fbb3 f3f1 	udiv	r3, r3, r1
 801ba12:	4413      	add	r3, r2
 801ba14:	4619      	mov	r1, r3
 801ba16:	68f8      	ldr	r0, [r7, #12]
 801ba18:	f7ff fd94 	bl	801b544 <move_window>
 801ba1c:	4603      	mov	r3, r0
 801ba1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801ba20:	7ffb      	ldrb	r3, [r7, #31]
 801ba22:	2b00      	cmp	r3, #0
 801ba24:	d132      	bne.n	801ba8c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801ba2c:	68fb      	ldr	r3, [r7, #12]
 801ba2e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ba32:	68bb      	ldr	r3, [r7, #8]
 801ba34:	009b      	lsls	r3, r3, #2
 801ba36:	68fa      	ldr	r2, [r7, #12]
 801ba38:	8992      	ldrh	r2, [r2, #12]
 801ba3a:	fbb3 f0f2 	udiv	r0, r3, r2
 801ba3e:	fb00 f202 	mul.w	r2, r0, r2
 801ba42:	1a9b      	subs	r3, r3, r2
 801ba44:	440b      	add	r3, r1
 801ba46:	4618      	mov	r0, r3
 801ba48:	f7ff fae4 	bl	801b014 <ld_dword>
 801ba4c:	4603      	mov	r3, r0
 801ba4e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801ba52:	4323      	orrs	r3, r4
 801ba54:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801ba56:	68fb      	ldr	r3, [r7, #12]
 801ba58:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ba5c:	68bb      	ldr	r3, [r7, #8]
 801ba5e:	009b      	lsls	r3, r3, #2
 801ba60:	68fa      	ldr	r2, [r7, #12]
 801ba62:	8992      	ldrh	r2, [r2, #12]
 801ba64:	fbb3 f0f2 	udiv	r0, r3, r2
 801ba68:	fb00 f202 	mul.w	r2, r0, r2
 801ba6c:	1a9b      	subs	r3, r3, r2
 801ba6e:	440b      	add	r3, r1
 801ba70:	6879      	ldr	r1, [r7, #4]
 801ba72:	4618      	mov	r0, r3
 801ba74:	f7ff fb0c 	bl	801b090 <st_dword>
			fs->wflag = 1;
 801ba78:	68fb      	ldr	r3, [r7, #12]
 801ba7a:	2201      	movs	r2, #1
 801ba7c:	70da      	strb	r2, [r3, #3]
			break;
 801ba7e:	e006      	b.n	801ba8e <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba80:	bf00      	nop
 801ba82:	e004      	b.n	801ba8e <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba84:	bf00      	nop
 801ba86:	e002      	b.n	801ba8e <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba88:	bf00      	nop
 801ba8a:	e000      	b.n	801ba8e <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba8c:	bf00      	nop
		}
	}
	return res;
 801ba8e:	7ffb      	ldrb	r3, [r7, #31]
}
 801ba90:	4618      	mov	r0, r3
 801ba92:	3724      	adds	r7, #36	@ 0x24
 801ba94:	46bd      	mov	sp, r7
 801ba96:	bd90      	pop	{r4, r7, pc}

0801ba98 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801ba98:	b580      	push	{r7, lr}
 801ba9a:	b088      	sub	sp, #32
 801ba9c:	af00      	add	r7, sp, #0
 801ba9e:	60f8      	str	r0, [r7, #12]
 801baa0:	60b9      	str	r1, [r7, #8]
 801baa2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801baa4:	2300      	movs	r3, #0
 801baa6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801baa8:	68fb      	ldr	r3, [r7, #12]
 801baaa:	681b      	ldr	r3, [r3, #0]
 801baac:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801baae:	68bb      	ldr	r3, [r7, #8]
 801bab0:	2b01      	cmp	r3, #1
 801bab2:	d904      	bls.n	801babe <remove_chain+0x26>
 801bab4:	69bb      	ldr	r3, [r7, #24]
 801bab6:	69db      	ldr	r3, [r3, #28]
 801bab8:	68ba      	ldr	r2, [r7, #8]
 801baba:	429a      	cmp	r2, r3
 801babc:	d301      	bcc.n	801bac2 <remove_chain+0x2a>
 801babe:	2302      	movs	r3, #2
 801bac0:	e04b      	b.n	801bb5a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d00c      	beq.n	801bae2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801bac8:	f04f 32ff 	mov.w	r2, #4294967295
 801bacc:	6879      	ldr	r1, [r7, #4]
 801bace:	69b8      	ldr	r0, [r7, #24]
 801bad0:	f7ff fec8 	bl	801b864 <put_fat>
 801bad4:	4603      	mov	r3, r0
 801bad6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801bad8:	7ffb      	ldrb	r3, [r7, #31]
 801bada:	2b00      	cmp	r3, #0
 801badc:	d001      	beq.n	801bae2 <remove_chain+0x4a>
 801bade:	7ffb      	ldrb	r3, [r7, #31]
 801bae0:	e03b      	b.n	801bb5a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801bae2:	68b9      	ldr	r1, [r7, #8]
 801bae4:	68f8      	ldr	r0, [r7, #12]
 801bae6:	f7ff fdea 	bl	801b6be <get_fat>
 801baea:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801baec:	697b      	ldr	r3, [r7, #20]
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d031      	beq.n	801bb56 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801baf2:	697b      	ldr	r3, [r7, #20]
 801baf4:	2b01      	cmp	r3, #1
 801baf6:	d101      	bne.n	801bafc <remove_chain+0x64>
 801baf8:	2302      	movs	r3, #2
 801bafa:	e02e      	b.n	801bb5a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801bafc:	697b      	ldr	r3, [r7, #20]
 801bafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb02:	d101      	bne.n	801bb08 <remove_chain+0x70>
 801bb04:	2301      	movs	r3, #1
 801bb06:	e028      	b.n	801bb5a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801bb08:	2200      	movs	r2, #0
 801bb0a:	68b9      	ldr	r1, [r7, #8]
 801bb0c:	69b8      	ldr	r0, [r7, #24]
 801bb0e:	f7ff fea9 	bl	801b864 <put_fat>
 801bb12:	4603      	mov	r3, r0
 801bb14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801bb16:	7ffb      	ldrb	r3, [r7, #31]
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d001      	beq.n	801bb20 <remove_chain+0x88>
 801bb1c:	7ffb      	ldrb	r3, [r7, #31]
 801bb1e:	e01c      	b.n	801bb5a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801bb20:	69bb      	ldr	r3, [r7, #24]
 801bb22:	699a      	ldr	r2, [r3, #24]
 801bb24:	69bb      	ldr	r3, [r7, #24]
 801bb26:	69db      	ldr	r3, [r3, #28]
 801bb28:	3b02      	subs	r3, #2
 801bb2a:	429a      	cmp	r2, r3
 801bb2c:	d20b      	bcs.n	801bb46 <remove_chain+0xae>
			fs->free_clst++;
 801bb2e:	69bb      	ldr	r3, [r7, #24]
 801bb30:	699b      	ldr	r3, [r3, #24]
 801bb32:	1c5a      	adds	r2, r3, #1
 801bb34:	69bb      	ldr	r3, [r7, #24]
 801bb36:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801bb38:	69bb      	ldr	r3, [r7, #24]
 801bb3a:	791b      	ldrb	r3, [r3, #4]
 801bb3c:	f043 0301 	orr.w	r3, r3, #1
 801bb40:	b2da      	uxtb	r2, r3
 801bb42:	69bb      	ldr	r3, [r7, #24]
 801bb44:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801bb46:	697b      	ldr	r3, [r7, #20]
 801bb48:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801bb4a:	69bb      	ldr	r3, [r7, #24]
 801bb4c:	69db      	ldr	r3, [r3, #28]
 801bb4e:	68ba      	ldr	r2, [r7, #8]
 801bb50:	429a      	cmp	r2, r3
 801bb52:	d3c6      	bcc.n	801bae2 <remove_chain+0x4a>
 801bb54:	e000      	b.n	801bb58 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801bb56:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801bb58:	2300      	movs	r3, #0
}
 801bb5a:	4618      	mov	r0, r3
 801bb5c:	3720      	adds	r7, #32
 801bb5e:	46bd      	mov	sp, r7
 801bb60:	bd80      	pop	{r7, pc}

0801bb62 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801bb62:	b580      	push	{r7, lr}
 801bb64:	b088      	sub	sp, #32
 801bb66:	af00      	add	r7, sp, #0
 801bb68:	6078      	str	r0, [r7, #4]
 801bb6a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	681b      	ldr	r3, [r3, #0]
 801bb70:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801bb72:	683b      	ldr	r3, [r7, #0]
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d10d      	bne.n	801bb94 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801bb78:	693b      	ldr	r3, [r7, #16]
 801bb7a:	695b      	ldr	r3, [r3, #20]
 801bb7c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801bb7e:	69bb      	ldr	r3, [r7, #24]
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d004      	beq.n	801bb8e <create_chain+0x2c>
 801bb84:	693b      	ldr	r3, [r7, #16]
 801bb86:	69db      	ldr	r3, [r3, #28]
 801bb88:	69ba      	ldr	r2, [r7, #24]
 801bb8a:	429a      	cmp	r2, r3
 801bb8c:	d31b      	bcc.n	801bbc6 <create_chain+0x64>
 801bb8e:	2301      	movs	r3, #1
 801bb90:	61bb      	str	r3, [r7, #24]
 801bb92:	e018      	b.n	801bbc6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801bb94:	6839      	ldr	r1, [r7, #0]
 801bb96:	6878      	ldr	r0, [r7, #4]
 801bb98:	f7ff fd91 	bl	801b6be <get_fat>
 801bb9c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801bb9e:	68fb      	ldr	r3, [r7, #12]
 801bba0:	2b01      	cmp	r3, #1
 801bba2:	d801      	bhi.n	801bba8 <create_chain+0x46>
 801bba4:	2301      	movs	r3, #1
 801bba6:	e070      	b.n	801bc8a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801bba8:	68fb      	ldr	r3, [r7, #12]
 801bbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bbae:	d101      	bne.n	801bbb4 <create_chain+0x52>
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	e06a      	b.n	801bc8a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801bbb4:	693b      	ldr	r3, [r7, #16]
 801bbb6:	69db      	ldr	r3, [r3, #28]
 801bbb8:	68fa      	ldr	r2, [r7, #12]
 801bbba:	429a      	cmp	r2, r3
 801bbbc:	d201      	bcs.n	801bbc2 <create_chain+0x60>
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	e063      	b.n	801bc8a <create_chain+0x128>
		scl = clst;
 801bbc2:	683b      	ldr	r3, [r7, #0]
 801bbc4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801bbc6:	69bb      	ldr	r3, [r7, #24]
 801bbc8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801bbca:	69fb      	ldr	r3, [r7, #28]
 801bbcc:	3301      	adds	r3, #1
 801bbce:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801bbd0:	693b      	ldr	r3, [r7, #16]
 801bbd2:	69db      	ldr	r3, [r3, #28]
 801bbd4:	69fa      	ldr	r2, [r7, #28]
 801bbd6:	429a      	cmp	r2, r3
 801bbd8:	d307      	bcc.n	801bbea <create_chain+0x88>
				ncl = 2;
 801bbda:	2302      	movs	r3, #2
 801bbdc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801bbde:	69fa      	ldr	r2, [r7, #28]
 801bbe0:	69bb      	ldr	r3, [r7, #24]
 801bbe2:	429a      	cmp	r2, r3
 801bbe4:	d901      	bls.n	801bbea <create_chain+0x88>
 801bbe6:	2300      	movs	r3, #0
 801bbe8:	e04f      	b.n	801bc8a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801bbea:	69f9      	ldr	r1, [r7, #28]
 801bbec:	6878      	ldr	r0, [r7, #4]
 801bbee:	f7ff fd66 	bl	801b6be <get_fat>
 801bbf2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801bbf4:	68fb      	ldr	r3, [r7, #12]
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d00e      	beq.n	801bc18 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	2b01      	cmp	r3, #1
 801bbfe:	d003      	beq.n	801bc08 <create_chain+0xa6>
 801bc00:	68fb      	ldr	r3, [r7, #12]
 801bc02:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bc06:	d101      	bne.n	801bc0c <create_chain+0xaa>
 801bc08:	68fb      	ldr	r3, [r7, #12]
 801bc0a:	e03e      	b.n	801bc8a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801bc0c:	69fa      	ldr	r2, [r7, #28]
 801bc0e:	69bb      	ldr	r3, [r7, #24]
 801bc10:	429a      	cmp	r2, r3
 801bc12:	d1da      	bne.n	801bbca <create_chain+0x68>
 801bc14:	2300      	movs	r3, #0
 801bc16:	e038      	b.n	801bc8a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801bc18:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801bc1a:	f04f 32ff 	mov.w	r2, #4294967295
 801bc1e:	69f9      	ldr	r1, [r7, #28]
 801bc20:	6938      	ldr	r0, [r7, #16]
 801bc22:	f7ff fe1f 	bl	801b864 <put_fat>
 801bc26:	4603      	mov	r3, r0
 801bc28:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801bc2a:	7dfb      	ldrb	r3, [r7, #23]
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	d109      	bne.n	801bc44 <create_chain+0xe2>
 801bc30:	683b      	ldr	r3, [r7, #0]
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d006      	beq.n	801bc44 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801bc36:	69fa      	ldr	r2, [r7, #28]
 801bc38:	6839      	ldr	r1, [r7, #0]
 801bc3a:	6938      	ldr	r0, [r7, #16]
 801bc3c:	f7ff fe12 	bl	801b864 <put_fat>
 801bc40:	4603      	mov	r3, r0
 801bc42:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801bc44:	7dfb      	ldrb	r3, [r7, #23]
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d116      	bne.n	801bc78 <create_chain+0x116>
		fs->last_clst = ncl;
 801bc4a:	693b      	ldr	r3, [r7, #16]
 801bc4c:	69fa      	ldr	r2, [r7, #28]
 801bc4e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801bc50:	693b      	ldr	r3, [r7, #16]
 801bc52:	699a      	ldr	r2, [r3, #24]
 801bc54:	693b      	ldr	r3, [r7, #16]
 801bc56:	69db      	ldr	r3, [r3, #28]
 801bc58:	3b02      	subs	r3, #2
 801bc5a:	429a      	cmp	r2, r3
 801bc5c:	d804      	bhi.n	801bc68 <create_chain+0x106>
 801bc5e:	693b      	ldr	r3, [r7, #16]
 801bc60:	699b      	ldr	r3, [r3, #24]
 801bc62:	1e5a      	subs	r2, r3, #1
 801bc64:	693b      	ldr	r3, [r7, #16]
 801bc66:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801bc68:	693b      	ldr	r3, [r7, #16]
 801bc6a:	791b      	ldrb	r3, [r3, #4]
 801bc6c:	f043 0301 	orr.w	r3, r3, #1
 801bc70:	b2da      	uxtb	r2, r3
 801bc72:	693b      	ldr	r3, [r7, #16]
 801bc74:	711a      	strb	r2, [r3, #4]
 801bc76:	e007      	b.n	801bc88 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801bc78:	7dfb      	ldrb	r3, [r7, #23]
 801bc7a:	2b01      	cmp	r3, #1
 801bc7c:	d102      	bne.n	801bc84 <create_chain+0x122>
 801bc7e:	f04f 33ff 	mov.w	r3, #4294967295
 801bc82:	e000      	b.n	801bc86 <create_chain+0x124>
 801bc84:	2301      	movs	r3, #1
 801bc86:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801bc88:	69fb      	ldr	r3, [r7, #28]
}
 801bc8a:	4618      	mov	r0, r3
 801bc8c:	3720      	adds	r7, #32
 801bc8e:	46bd      	mov	sp, r7
 801bc90:	bd80      	pop	{r7, pc}

0801bc92 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801bc92:	b480      	push	{r7}
 801bc94:	b087      	sub	sp, #28
 801bc96:	af00      	add	r7, sp, #0
 801bc98:	6078      	str	r0, [r7, #4]
 801bc9a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	681b      	ldr	r3, [r3, #0]
 801bca0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bca6:	3304      	adds	r3, #4
 801bca8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801bcaa:	68fb      	ldr	r3, [r7, #12]
 801bcac:	899b      	ldrh	r3, [r3, #12]
 801bcae:	461a      	mov	r2, r3
 801bcb0:	683b      	ldr	r3, [r7, #0]
 801bcb2:	fbb3 f3f2 	udiv	r3, r3, r2
 801bcb6:	68fa      	ldr	r2, [r7, #12]
 801bcb8:	8952      	ldrh	r2, [r2, #10]
 801bcba:	fbb3 f3f2 	udiv	r3, r3, r2
 801bcbe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801bcc0:	693b      	ldr	r3, [r7, #16]
 801bcc2:	1d1a      	adds	r2, r3, #4
 801bcc4:	613a      	str	r2, [r7, #16]
 801bcc6:	681b      	ldr	r3, [r3, #0]
 801bcc8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801bcca:	68bb      	ldr	r3, [r7, #8]
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d101      	bne.n	801bcd4 <clmt_clust+0x42>
 801bcd0:	2300      	movs	r3, #0
 801bcd2:	e010      	b.n	801bcf6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801bcd4:	697a      	ldr	r2, [r7, #20]
 801bcd6:	68bb      	ldr	r3, [r7, #8]
 801bcd8:	429a      	cmp	r2, r3
 801bcda:	d307      	bcc.n	801bcec <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801bcdc:	697a      	ldr	r2, [r7, #20]
 801bcde:	68bb      	ldr	r3, [r7, #8]
 801bce0:	1ad3      	subs	r3, r2, r3
 801bce2:	617b      	str	r3, [r7, #20]
 801bce4:	693b      	ldr	r3, [r7, #16]
 801bce6:	3304      	adds	r3, #4
 801bce8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801bcea:	e7e9      	b.n	801bcc0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801bcec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801bcee:	693b      	ldr	r3, [r7, #16]
 801bcf0:	681a      	ldr	r2, [r3, #0]
 801bcf2:	697b      	ldr	r3, [r7, #20]
 801bcf4:	4413      	add	r3, r2
}
 801bcf6:	4618      	mov	r0, r3
 801bcf8:	371c      	adds	r7, #28
 801bcfa:	46bd      	mov	sp, r7
 801bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd00:	4770      	bx	lr

0801bd02 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801bd02:	b580      	push	{r7, lr}
 801bd04:	b086      	sub	sp, #24
 801bd06:	af00      	add	r7, sp, #0
 801bd08:	6078      	str	r0, [r7, #4]
 801bd0a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	681b      	ldr	r3, [r3, #0]
 801bd10:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801bd12:	683b      	ldr	r3, [r7, #0]
 801bd14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801bd18:	d204      	bcs.n	801bd24 <dir_sdi+0x22>
 801bd1a:	683b      	ldr	r3, [r7, #0]
 801bd1c:	f003 031f 	and.w	r3, r3, #31
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d001      	beq.n	801bd28 <dir_sdi+0x26>
		return FR_INT_ERR;
 801bd24:	2302      	movs	r3, #2
 801bd26:	e071      	b.n	801be0c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	683a      	ldr	r2, [r7, #0]
 801bd2c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	689b      	ldr	r3, [r3, #8]
 801bd32:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801bd34:	697b      	ldr	r3, [r7, #20]
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d106      	bne.n	801bd48 <dir_sdi+0x46>
 801bd3a:	693b      	ldr	r3, [r7, #16]
 801bd3c:	781b      	ldrb	r3, [r3, #0]
 801bd3e:	2b02      	cmp	r3, #2
 801bd40:	d902      	bls.n	801bd48 <dir_sdi+0x46>
		clst = fs->dirbase;
 801bd42:	693b      	ldr	r3, [r7, #16]
 801bd44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd46:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801bd48:	697b      	ldr	r3, [r7, #20]
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d10c      	bne.n	801bd68 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801bd4e:	683b      	ldr	r3, [r7, #0]
 801bd50:	095b      	lsrs	r3, r3, #5
 801bd52:	693a      	ldr	r2, [r7, #16]
 801bd54:	8912      	ldrh	r2, [r2, #8]
 801bd56:	4293      	cmp	r3, r2
 801bd58:	d301      	bcc.n	801bd5e <dir_sdi+0x5c>
 801bd5a:	2302      	movs	r3, #2
 801bd5c:	e056      	b.n	801be0c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801bd5e:	693b      	ldr	r3, [r7, #16]
 801bd60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	61da      	str	r2, [r3, #28]
 801bd66:	e02d      	b.n	801bdc4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801bd68:	693b      	ldr	r3, [r7, #16]
 801bd6a:	895b      	ldrh	r3, [r3, #10]
 801bd6c:	461a      	mov	r2, r3
 801bd6e:	693b      	ldr	r3, [r7, #16]
 801bd70:	899b      	ldrh	r3, [r3, #12]
 801bd72:	fb02 f303 	mul.w	r3, r2, r3
 801bd76:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bd78:	e019      	b.n	801bdae <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	6979      	ldr	r1, [r7, #20]
 801bd7e:	4618      	mov	r0, r3
 801bd80:	f7ff fc9d 	bl	801b6be <get_fat>
 801bd84:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801bd86:	697b      	ldr	r3, [r7, #20]
 801bd88:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd8c:	d101      	bne.n	801bd92 <dir_sdi+0x90>
 801bd8e:	2301      	movs	r3, #1
 801bd90:	e03c      	b.n	801be0c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801bd92:	697b      	ldr	r3, [r7, #20]
 801bd94:	2b01      	cmp	r3, #1
 801bd96:	d904      	bls.n	801bda2 <dir_sdi+0xa0>
 801bd98:	693b      	ldr	r3, [r7, #16]
 801bd9a:	69db      	ldr	r3, [r3, #28]
 801bd9c:	697a      	ldr	r2, [r7, #20]
 801bd9e:	429a      	cmp	r2, r3
 801bda0:	d301      	bcc.n	801bda6 <dir_sdi+0xa4>
 801bda2:	2302      	movs	r3, #2
 801bda4:	e032      	b.n	801be0c <dir_sdi+0x10a>
			ofs -= csz;
 801bda6:	683a      	ldr	r2, [r7, #0]
 801bda8:	68fb      	ldr	r3, [r7, #12]
 801bdaa:	1ad3      	subs	r3, r2, r3
 801bdac:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bdae:	683a      	ldr	r2, [r7, #0]
 801bdb0:	68fb      	ldr	r3, [r7, #12]
 801bdb2:	429a      	cmp	r2, r3
 801bdb4:	d2e1      	bcs.n	801bd7a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801bdb6:	6979      	ldr	r1, [r7, #20]
 801bdb8:	6938      	ldr	r0, [r7, #16]
 801bdba:	f7ff fc61 	bl	801b680 <clust2sect>
 801bdbe:	4602      	mov	r2, r0
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	697a      	ldr	r2, [r7, #20]
 801bdc8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	69db      	ldr	r3, [r3, #28]
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d101      	bne.n	801bdd6 <dir_sdi+0xd4>
 801bdd2:	2302      	movs	r3, #2
 801bdd4:	e01a      	b.n	801be0c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	69da      	ldr	r2, [r3, #28]
 801bdda:	693b      	ldr	r3, [r7, #16]
 801bddc:	899b      	ldrh	r3, [r3, #12]
 801bdde:	4619      	mov	r1, r3
 801bde0:	683b      	ldr	r3, [r7, #0]
 801bde2:	fbb3 f3f1 	udiv	r3, r3, r1
 801bde6:	441a      	add	r2, r3
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801bdec:	693b      	ldr	r3, [r7, #16]
 801bdee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bdf2:	693b      	ldr	r3, [r7, #16]
 801bdf4:	899b      	ldrh	r3, [r3, #12]
 801bdf6:	461a      	mov	r2, r3
 801bdf8:	683b      	ldr	r3, [r7, #0]
 801bdfa:	fbb3 f0f2 	udiv	r0, r3, r2
 801bdfe:	fb00 f202 	mul.w	r2, r0, r2
 801be02:	1a9b      	subs	r3, r3, r2
 801be04:	18ca      	adds	r2, r1, r3
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801be0a:	2300      	movs	r3, #0
}
 801be0c:	4618      	mov	r0, r3
 801be0e:	3718      	adds	r7, #24
 801be10:	46bd      	mov	sp, r7
 801be12:	bd80      	pop	{r7, pc}

0801be14 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801be14:	b580      	push	{r7, lr}
 801be16:	b086      	sub	sp, #24
 801be18:	af00      	add	r7, sp, #0
 801be1a:	6078      	str	r0, [r7, #4]
 801be1c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	681b      	ldr	r3, [r3, #0]
 801be22:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	695b      	ldr	r3, [r3, #20]
 801be28:	3320      	adds	r3, #32
 801be2a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	69db      	ldr	r3, [r3, #28]
 801be30:	2b00      	cmp	r3, #0
 801be32:	d003      	beq.n	801be3c <dir_next+0x28>
 801be34:	68bb      	ldr	r3, [r7, #8]
 801be36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801be3a:	d301      	bcc.n	801be40 <dir_next+0x2c>
 801be3c:	2304      	movs	r3, #4
 801be3e:	e0bb      	b.n	801bfb8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801be40:	68fb      	ldr	r3, [r7, #12]
 801be42:	899b      	ldrh	r3, [r3, #12]
 801be44:	461a      	mov	r2, r3
 801be46:	68bb      	ldr	r3, [r7, #8]
 801be48:	fbb3 f1f2 	udiv	r1, r3, r2
 801be4c:	fb01 f202 	mul.w	r2, r1, r2
 801be50:	1a9b      	subs	r3, r3, r2
 801be52:	2b00      	cmp	r3, #0
 801be54:	f040 809d 	bne.w	801bf92 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	69db      	ldr	r3, [r3, #28]
 801be5c:	1c5a      	adds	r2, r3, #1
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	699b      	ldr	r3, [r3, #24]
 801be66:	2b00      	cmp	r3, #0
 801be68:	d10b      	bne.n	801be82 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801be6a:	68bb      	ldr	r3, [r7, #8]
 801be6c:	095b      	lsrs	r3, r3, #5
 801be6e:	68fa      	ldr	r2, [r7, #12]
 801be70:	8912      	ldrh	r2, [r2, #8]
 801be72:	4293      	cmp	r3, r2
 801be74:	f0c0 808d 	bcc.w	801bf92 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	2200      	movs	r2, #0
 801be7c:	61da      	str	r2, [r3, #28]
 801be7e:	2304      	movs	r3, #4
 801be80:	e09a      	b.n	801bfb8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801be82:	68fb      	ldr	r3, [r7, #12]
 801be84:	899b      	ldrh	r3, [r3, #12]
 801be86:	461a      	mov	r2, r3
 801be88:	68bb      	ldr	r3, [r7, #8]
 801be8a:	fbb3 f3f2 	udiv	r3, r3, r2
 801be8e:	68fa      	ldr	r2, [r7, #12]
 801be90:	8952      	ldrh	r2, [r2, #10]
 801be92:	3a01      	subs	r2, #1
 801be94:	4013      	ands	r3, r2
 801be96:	2b00      	cmp	r3, #0
 801be98:	d17b      	bne.n	801bf92 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801be9a:	687a      	ldr	r2, [r7, #4]
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	699b      	ldr	r3, [r3, #24]
 801bea0:	4619      	mov	r1, r3
 801bea2:	4610      	mov	r0, r2
 801bea4:	f7ff fc0b 	bl	801b6be <get_fat>
 801bea8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801beaa:	697b      	ldr	r3, [r7, #20]
 801beac:	2b01      	cmp	r3, #1
 801beae:	d801      	bhi.n	801beb4 <dir_next+0xa0>
 801beb0:	2302      	movs	r3, #2
 801beb2:	e081      	b.n	801bfb8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801beb4:	697b      	ldr	r3, [r7, #20]
 801beb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801beba:	d101      	bne.n	801bec0 <dir_next+0xac>
 801bebc:	2301      	movs	r3, #1
 801bebe:	e07b      	b.n	801bfb8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801bec0:	68fb      	ldr	r3, [r7, #12]
 801bec2:	69db      	ldr	r3, [r3, #28]
 801bec4:	697a      	ldr	r2, [r7, #20]
 801bec6:	429a      	cmp	r2, r3
 801bec8:	d359      	bcc.n	801bf7e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801beca:	683b      	ldr	r3, [r7, #0]
 801becc:	2b00      	cmp	r3, #0
 801bece:	d104      	bne.n	801beda <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	2200      	movs	r2, #0
 801bed4:	61da      	str	r2, [r3, #28]
 801bed6:	2304      	movs	r3, #4
 801bed8:	e06e      	b.n	801bfb8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801beda:	687a      	ldr	r2, [r7, #4]
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	699b      	ldr	r3, [r3, #24]
 801bee0:	4619      	mov	r1, r3
 801bee2:	4610      	mov	r0, r2
 801bee4:	f7ff fe3d 	bl	801bb62 <create_chain>
 801bee8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801beea:	697b      	ldr	r3, [r7, #20]
 801beec:	2b00      	cmp	r3, #0
 801beee:	d101      	bne.n	801bef4 <dir_next+0xe0>
 801bef0:	2307      	movs	r3, #7
 801bef2:	e061      	b.n	801bfb8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801bef4:	697b      	ldr	r3, [r7, #20]
 801bef6:	2b01      	cmp	r3, #1
 801bef8:	d101      	bne.n	801befe <dir_next+0xea>
 801befa:	2302      	movs	r3, #2
 801befc:	e05c      	b.n	801bfb8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801befe:	697b      	ldr	r3, [r7, #20]
 801bf00:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf04:	d101      	bne.n	801bf0a <dir_next+0xf6>
 801bf06:	2301      	movs	r3, #1
 801bf08:	e056      	b.n	801bfb8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801bf0a:	68f8      	ldr	r0, [r7, #12]
 801bf0c:	f7ff fad6 	bl	801b4bc <sync_window>
 801bf10:	4603      	mov	r3, r0
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	d001      	beq.n	801bf1a <dir_next+0x106>
 801bf16:	2301      	movs	r3, #1
 801bf18:	e04e      	b.n	801bfb8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801bf1a:	68fb      	ldr	r3, [r7, #12]
 801bf1c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801bf20:	68fb      	ldr	r3, [r7, #12]
 801bf22:	899b      	ldrh	r3, [r3, #12]
 801bf24:	461a      	mov	r2, r3
 801bf26:	2100      	movs	r1, #0
 801bf28:	f7ff f8ff 	bl	801b12a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	613b      	str	r3, [r7, #16]
 801bf30:	6979      	ldr	r1, [r7, #20]
 801bf32:	68f8      	ldr	r0, [r7, #12]
 801bf34:	f7ff fba4 	bl	801b680 <clust2sect>
 801bf38:	4602      	mov	r2, r0
 801bf3a:	68fb      	ldr	r3, [r7, #12]
 801bf3c:	635a      	str	r2, [r3, #52]	@ 0x34
 801bf3e:	e012      	b.n	801bf66 <dir_next+0x152>
						fs->wflag = 1;
 801bf40:	68fb      	ldr	r3, [r7, #12]
 801bf42:	2201      	movs	r2, #1
 801bf44:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801bf46:	68f8      	ldr	r0, [r7, #12]
 801bf48:	f7ff fab8 	bl	801b4bc <sync_window>
 801bf4c:	4603      	mov	r3, r0
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d001      	beq.n	801bf56 <dir_next+0x142>
 801bf52:	2301      	movs	r3, #1
 801bf54:	e030      	b.n	801bfb8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bf56:	693b      	ldr	r3, [r7, #16]
 801bf58:	3301      	adds	r3, #1
 801bf5a:	613b      	str	r3, [r7, #16]
 801bf5c:	68fb      	ldr	r3, [r7, #12]
 801bf5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bf60:	1c5a      	adds	r2, r3, #1
 801bf62:	68fb      	ldr	r3, [r7, #12]
 801bf64:	635a      	str	r2, [r3, #52]	@ 0x34
 801bf66:	68fb      	ldr	r3, [r7, #12]
 801bf68:	895b      	ldrh	r3, [r3, #10]
 801bf6a:	461a      	mov	r2, r3
 801bf6c:	693b      	ldr	r3, [r7, #16]
 801bf6e:	4293      	cmp	r3, r2
 801bf70:	d3e6      	bcc.n	801bf40 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801bf72:	68fb      	ldr	r3, [r7, #12]
 801bf74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bf76:	693b      	ldr	r3, [r7, #16]
 801bf78:	1ad2      	subs	r2, r2, r3
 801bf7a:	68fb      	ldr	r3, [r7, #12]
 801bf7c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	697a      	ldr	r2, [r7, #20]
 801bf82:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801bf84:	6979      	ldr	r1, [r7, #20]
 801bf86:	68f8      	ldr	r0, [r7, #12]
 801bf88:	f7ff fb7a 	bl	801b680 <clust2sect>
 801bf8c:	4602      	mov	r2, r0
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	68ba      	ldr	r2, [r7, #8]
 801bf96:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801bf98:	68fb      	ldr	r3, [r7, #12]
 801bf9a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bf9e:	68fb      	ldr	r3, [r7, #12]
 801bfa0:	899b      	ldrh	r3, [r3, #12]
 801bfa2:	461a      	mov	r2, r3
 801bfa4:	68bb      	ldr	r3, [r7, #8]
 801bfa6:	fbb3 f0f2 	udiv	r0, r3, r2
 801bfaa:	fb00 f202 	mul.w	r2, r0, r2
 801bfae:	1a9b      	subs	r3, r3, r2
 801bfb0:	18ca      	adds	r2, r1, r3
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bfb6:	2300      	movs	r3, #0
}
 801bfb8:	4618      	mov	r0, r3
 801bfba:	3718      	adds	r7, #24
 801bfbc:	46bd      	mov	sp, r7
 801bfbe:	bd80      	pop	{r7, pc}

0801bfc0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801bfc0:	b580      	push	{r7, lr}
 801bfc2:	b086      	sub	sp, #24
 801bfc4:	af00      	add	r7, sp, #0
 801bfc6:	6078      	str	r0, [r7, #4]
 801bfc8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801bfd0:	2100      	movs	r1, #0
 801bfd2:	6878      	ldr	r0, [r7, #4]
 801bfd4:	f7ff fe95 	bl	801bd02 <dir_sdi>
 801bfd8:	4603      	mov	r3, r0
 801bfda:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bfdc:	7dfb      	ldrb	r3, [r7, #23]
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	d12b      	bne.n	801c03a <dir_alloc+0x7a>
		n = 0;
 801bfe2:	2300      	movs	r3, #0
 801bfe4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	69db      	ldr	r3, [r3, #28]
 801bfea:	4619      	mov	r1, r3
 801bfec:	68f8      	ldr	r0, [r7, #12]
 801bfee:	f7ff faa9 	bl	801b544 <move_window>
 801bff2:	4603      	mov	r3, r0
 801bff4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801bff6:	7dfb      	ldrb	r3, [r7, #23]
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d11d      	bne.n	801c038 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	6a1b      	ldr	r3, [r3, #32]
 801c000:	781b      	ldrb	r3, [r3, #0]
 801c002:	2be5      	cmp	r3, #229	@ 0xe5
 801c004:	d004      	beq.n	801c010 <dir_alloc+0x50>
 801c006:	687b      	ldr	r3, [r7, #4]
 801c008:	6a1b      	ldr	r3, [r3, #32]
 801c00a:	781b      	ldrb	r3, [r3, #0]
 801c00c:	2b00      	cmp	r3, #0
 801c00e:	d107      	bne.n	801c020 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801c010:	693b      	ldr	r3, [r7, #16]
 801c012:	3301      	adds	r3, #1
 801c014:	613b      	str	r3, [r7, #16]
 801c016:	693a      	ldr	r2, [r7, #16]
 801c018:	683b      	ldr	r3, [r7, #0]
 801c01a:	429a      	cmp	r2, r3
 801c01c:	d102      	bne.n	801c024 <dir_alloc+0x64>
 801c01e:	e00c      	b.n	801c03a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801c020:	2300      	movs	r3, #0
 801c022:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801c024:	2101      	movs	r1, #1
 801c026:	6878      	ldr	r0, [r7, #4]
 801c028:	f7ff fef4 	bl	801be14 <dir_next>
 801c02c:	4603      	mov	r3, r0
 801c02e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801c030:	7dfb      	ldrb	r3, [r7, #23]
 801c032:	2b00      	cmp	r3, #0
 801c034:	d0d7      	beq.n	801bfe6 <dir_alloc+0x26>
 801c036:	e000      	b.n	801c03a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801c038:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801c03a:	7dfb      	ldrb	r3, [r7, #23]
 801c03c:	2b04      	cmp	r3, #4
 801c03e:	d101      	bne.n	801c044 <dir_alloc+0x84>
 801c040:	2307      	movs	r3, #7
 801c042:	75fb      	strb	r3, [r7, #23]
	return res;
 801c044:	7dfb      	ldrb	r3, [r7, #23]
}
 801c046:	4618      	mov	r0, r3
 801c048:	3718      	adds	r7, #24
 801c04a:	46bd      	mov	sp, r7
 801c04c:	bd80      	pop	{r7, pc}

0801c04e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801c04e:	b580      	push	{r7, lr}
 801c050:	b084      	sub	sp, #16
 801c052:	af00      	add	r7, sp, #0
 801c054:	6078      	str	r0, [r7, #4]
 801c056:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801c058:	683b      	ldr	r3, [r7, #0]
 801c05a:	331a      	adds	r3, #26
 801c05c:	4618      	mov	r0, r3
 801c05e:	f7fe ffc1 	bl	801afe4 <ld_word>
 801c062:	4603      	mov	r3, r0
 801c064:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	781b      	ldrb	r3, [r3, #0]
 801c06a:	2b03      	cmp	r3, #3
 801c06c:	d109      	bne.n	801c082 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801c06e:	683b      	ldr	r3, [r7, #0]
 801c070:	3314      	adds	r3, #20
 801c072:	4618      	mov	r0, r3
 801c074:	f7fe ffb6 	bl	801afe4 <ld_word>
 801c078:	4603      	mov	r3, r0
 801c07a:	041b      	lsls	r3, r3, #16
 801c07c:	68fa      	ldr	r2, [r7, #12]
 801c07e:	4313      	orrs	r3, r2
 801c080:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801c082:	68fb      	ldr	r3, [r7, #12]
}
 801c084:	4618      	mov	r0, r3
 801c086:	3710      	adds	r7, #16
 801c088:	46bd      	mov	sp, r7
 801c08a:	bd80      	pop	{r7, pc}

0801c08c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801c08c:	b580      	push	{r7, lr}
 801c08e:	b084      	sub	sp, #16
 801c090:	af00      	add	r7, sp, #0
 801c092:	60f8      	str	r0, [r7, #12]
 801c094:	60b9      	str	r1, [r7, #8]
 801c096:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801c098:	68bb      	ldr	r3, [r7, #8]
 801c09a:	331a      	adds	r3, #26
 801c09c:	687a      	ldr	r2, [r7, #4]
 801c09e:	b292      	uxth	r2, r2
 801c0a0:	4611      	mov	r1, r2
 801c0a2:	4618      	mov	r0, r3
 801c0a4:	f7fe ffd9 	bl	801b05a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801c0a8:	68fb      	ldr	r3, [r7, #12]
 801c0aa:	781b      	ldrb	r3, [r3, #0]
 801c0ac:	2b03      	cmp	r3, #3
 801c0ae:	d109      	bne.n	801c0c4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801c0b0:	68bb      	ldr	r3, [r7, #8]
 801c0b2:	f103 0214 	add.w	r2, r3, #20
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	0c1b      	lsrs	r3, r3, #16
 801c0ba:	b29b      	uxth	r3, r3
 801c0bc:	4619      	mov	r1, r3
 801c0be:	4610      	mov	r0, r2
 801c0c0:	f7fe ffcb 	bl	801b05a <st_word>
	}
}
 801c0c4:	bf00      	nop
 801c0c6:	3710      	adds	r7, #16
 801c0c8:	46bd      	mov	sp, r7
 801c0ca:	bd80      	pop	{r7, pc}

0801c0cc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801c0cc:	b590      	push	{r4, r7, lr}
 801c0ce:	b087      	sub	sp, #28
 801c0d0:	af00      	add	r7, sp, #0
 801c0d2:	6078      	str	r0, [r7, #4]
 801c0d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801c0d6:	683b      	ldr	r3, [r7, #0]
 801c0d8:	331a      	adds	r3, #26
 801c0da:	4618      	mov	r0, r3
 801c0dc:	f7fe ff82 	bl	801afe4 <ld_word>
 801c0e0:	4603      	mov	r3, r0
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	d001      	beq.n	801c0ea <cmp_lfn+0x1e>
 801c0e6:	2300      	movs	r3, #0
 801c0e8:	e059      	b.n	801c19e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801c0ea:	683b      	ldr	r3, [r7, #0]
 801c0ec:	781b      	ldrb	r3, [r3, #0]
 801c0ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c0f2:	1e5a      	subs	r2, r3, #1
 801c0f4:	4613      	mov	r3, r2
 801c0f6:	005b      	lsls	r3, r3, #1
 801c0f8:	4413      	add	r3, r2
 801c0fa:	009b      	lsls	r3, r3, #2
 801c0fc:	4413      	add	r3, r2
 801c0fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c100:	2301      	movs	r3, #1
 801c102:	81fb      	strh	r3, [r7, #14]
 801c104:	2300      	movs	r3, #0
 801c106:	613b      	str	r3, [r7, #16]
 801c108:	e033      	b.n	801c172 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c10a:	4a27      	ldr	r2, [pc, #156]	@ (801c1a8 <cmp_lfn+0xdc>)
 801c10c:	693b      	ldr	r3, [r7, #16]
 801c10e:	4413      	add	r3, r2
 801c110:	781b      	ldrb	r3, [r3, #0]
 801c112:	461a      	mov	r2, r3
 801c114:	683b      	ldr	r3, [r7, #0]
 801c116:	4413      	add	r3, r2
 801c118:	4618      	mov	r0, r3
 801c11a:	f7fe ff63 	bl	801afe4 <ld_word>
 801c11e:	4603      	mov	r3, r0
 801c120:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c122:	89fb      	ldrh	r3, [r7, #14]
 801c124:	2b00      	cmp	r3, #0
 801c126:	d01a      	beq.n	801c15e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801c128:	697b      	ldr	r3, [r7, #20]
 801c12a:	2bfe      	cmp	r3, #254	@ 0xfe
 801c12c:	d812      	bhi.n	801c154 <cmp_lfn+0x88>
 801c12e:	89bb      	ldrh	r3, [r7, #12]
 801c130:	4618      	mov	r0, r3
 801c132:	f001 ff71 	bl	801e018 <ff_wtoupper>
 801c136:	4603      	mov	r3, r0
 801c138:	461c      	mov	r4, r3
 801c13a:	697b      	ldr	r3, [r7, #20]
 801c13c:	1c5a      	adds	r2, r3, #1
 801c13e:	617a      	str	r2, [r7, #20]
 801c140:	005b      	lsls	r3, r3, #1
 801c142:	687a      	ldr	r2, [r7, #4]
 801c144:	4413      	add	r3, r2
 801c146:	881b      	ldrh	r3, [r3, #0]
 801c148:	4618      	mov	r0, r3
 801c14a:	f001 ff65 	bl	801e018 <ff_wtoupper>
 801c14e:	4603      	mov	r3, r0
 801c150:	429c      	cmp	r4, r3
 801c152:	d001      	beq.n	801c158 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801c154:	2300      	movs	r3, #0
 801c156:	e022      	b.n	801c19e <cmp_lfn+0xd2>
			}
			wc = uc;
 801c158:	89bb      	ldrh	r3, [r7, #12]
 801c15a:	81fb      	strh	r3, [r7, #14]
 801c15c:	e006      	b.n	801c16c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c15e:	89bb      	ldrh	r3, [r7, #12]
 801c160:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c164:	4293      	cmp	r3, r2
 801c166:	d001      	beq.n	801c16c <cmp_lfn+0xa0>
 801c168:	2300      	movs	r3, #0
 801c16a:	e018      	b.n	801c19e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c16c:	693b      	ldr	r3, [r7, #16]
 801c16e:	3301      	adds	r3, #1
 801c170:	613b      	str	r3, [r7, #16]
 801c172:	693b      	ldr	r3, [r7, #16]
 801c174:	2b0c      	cmp	r3, #12
 801c176:	d9c8      	bls.n	801c10a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801c178:	683b      	ldr	r3, [r7, #0]
 801c17a:	781b      	ldrb	r3, [r3, #0]
 801c17c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c180:	2b00      	cmp	r3, #0
 801c182:	d00b      	beq.n	801c19c <cmp_lfn+0xd0>
 801c184:	89fb      	ldrh	r3, [r7, #14]
 801c186:	2b00      	cmp	r3, #0
 801c188:	d008      	beq.n	801c19c <cmp_lfn+0xd0>
 801c18a:	697b      	ldr	r3, [r7, #20]
 801c18c:	005b      	lsls	r3, r3, #1
 801c18e:	687a      	ldr	r2, [r7, #4]
 801c190:	4413      	add	r3, r2
 801c192:	881b      	ldrh	r3, [r3, #0]
 801c194:	2b00      	cmp	r3, #0
 801c196:	d001      	beq.n	801c19c <cmp_lfn+0xd0>
 801c198:	2300      	movs	r3, #0
 801c19a:	e000      	b.n	801c19e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801c19c:	2301      	movs	r3, #1
}
 801c19e:	4618      	mov	r0, r3
 801c1a0:	371c      	adds	r7, #28
 801c1a2:	46bd      	mov	sp, r7
 801c1a4:	bd90      	pop	{r4, r7, pc}
 801c1a6:	bf00      	nop
 801c1a8:	0801eb24 	.word	0x0801eb24

0801c1ac <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801c1ac:	b580      	push	{r7, lr}
 801c1ae:	b086      	sub	sp, #24
 801c1b0:	af00      	add	r7, sp, #0
 801c1b2:	6078      	str	r0, [r7, #4]
 801c1b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801c1b6:	683b      	ldr	r3, [r7, #0]
 801c1b8:	331a      	adds	r3, #26
 801c1ba:	4618      	mov	r0, r3
 801c1bc:	f7fe ff12 	bl	801afe4 <ld_word>
 801c1c0:	4603      	mov	r3, r0
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d001      	beq.n	801c1ca <pick_lfn+0x1e>
 801c1c6:	2300      	movs	r3, #0
 801c1c8:	e04d      	b.n	801c266 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801c1ca:	683b      	ldr	r3, [r7, #0]
 801c1cc:	781b      	ldrb	r3, [r3, #0]
 801c1ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c1d2:	1e5a      	subs	r2, r3, #1
 801c1d4:	4613      	mov	r3, r2
 801c1d6:	005b      	lsls	r3, r3, #1
 801c1d8:	4413      	add	r3, r2
 801c1da:	009b      	lsls	r3, r3, #2
 801c1dc:	4413      	add	r3, r2
 801c1de:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c1e0:	2301      	movs	r3, #1
 801c1e2:	81fb      	strh	r3, [r7, #14]
 801c1e4:	2300      	movs	r3, #0
 801c1e6:	613b      	str	r3, [r7, #16]
 801c1e8:	e028      	b.n	801c23c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c1ea:	4a21      	ldr	r2, [pc, #132]	@ (801c270 <pick_lfn+0xc4>)
 801c1ec:	693b      	ldr	r3, [r7, #16]
 801c1ee:	4413      	add	r3, r2
 801c1f0:	781b      	ldrb	r3, [r3, #0]
 801c1f2:	461a      	mov	r2, r3
 801c1f4:	683b      	ldr	r3, [r7, #0]
 801c1f6:	4413      	add	r3, r2
 801c1f8:	4618      	mov	r0, r3
 801c1fa:	f7fe fef3 	bl	801afe4 <ld_word>
 801c1fe:	4603      	mov	r3, r0
 801c200:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c202:	89fb      	ldrh	r3, [r7, #14]
 801c204:	2b00      	cmp	r3, #0
 801c206:	d00f      	beq.n	801c228 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801c208:	697b      	ldr	r3, [r7, #20]
 801c20a:	2bfe      	cmp	r3, #254	@ 0xfe
 801c20c:	d901      	bls.n	801c212 <pick_lfn+0x66>
 801c20e:	2300      	movs	r3, #0
 801c210:	e029      	b.n	801c266 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801c212:	89bb      	ldrh	r3, [r7, #12]
 801c214:	81fb      	strh	r3, [r7, #14]
 801c216:	697b      	ldr	r3, [r7, #20]
 801c218:	1c5a      	adds	r2, r3, #1
 801c21a:	617a      	str	r2, [r7, #20]
 801c21c:	005b      	lsls	r3, r3, #1
 801c21e:	687a      	ldr	r2, [r7, #4]
 801c220:	4413      	add	r3, r2
 801c222:	89fa      	ldrh	r2, [r7, #14]
 801c224:	801a      	strh	r2, [r3, #0]
 801c226:	e006      	b.n	801c236 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c228:	89bb      	ldrh	r3, [r7, #12]
 801c22a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c22e:	4293      	cmp	r3, r2
 801c230:	d001      	beq.n	801c236 <pick_lfn+0x8a>
 801c232:	2300      	movs	r3, #0
 801c234:	e017      	b.n	801c266 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c236:	693b      	ldr	r3, [r7, #16]
 801c238:	3301      	adds	r3, #1
 801c23a:	613b      	str	r3, [r7, #16]
 801c23c:	693b      	ldr	r3, [r7, #16]
 801c23e:	2b0c      	cmp	r3, #12
 801c240:	d9d3      	bls.n	801c1ea <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801c242:	683b      	ldr	r3, [r7, #0]
 801c244:	781b      	ldrb	r3, [r3, #0]
 801c246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	d00a      	beq.n	801c264 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801c24e:	697b      	ldr	r3, [r7, #20]
 801c250:	2bfe      	cmp	r3, #254	@ 0xfe
 801c252:	d901      	bls.n	801c258 <pick_lfn+0xac>
 801c254:	2300      	movs	r3, #0
 801c256:	e006      	b.n	801c266 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801c258:	697b      	ldr	r3, [r7, #20]
 801c25a:	005b      	lsls	r3, r3, #1
 801c25c:	687a      	ldr	r2, [r7, #4]
 801c25e:	4413      	add	r3, r2
 801c260:	2200      	movs	r2, #0
 801c262:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801c264:	2301      	movs	r3, #1
}
 801c266:	4618      	mov	r0, r3
 801c268:	3718      	adds	r7, #24
 801c26a:	46bd      	mov	sp, r7
 801c26c:	bd80      	pop	{r7, pc}
 801c26e:	bf00      	nop
 801c270:	0801eb24 	.word	0x0801eb24

0801c274 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801c274:	b580      	push	{r7, lr}
 801c276:	b088      	sub	sp, #32
 801c278:	af00      	add	r7, sp, #0
 801c27a:	60f8      	str	r0, [r7, #12]
 801c27c:	60b9      	str	r1, [r7, #8]
 801c27e:	4611      	mov	r1, r2
 801c280:	461a      	mov	r2, r3
 801c282:	460b      	mov	r3, r1
 801c284:	71fb      	strb	r3, [r7, #7]
 801c286:	4613      	mov	r3, r2
 801c288:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801c28a:	68bb      	ldr	r3, [r7, #8]
 801c28c:	330d      	adds	r3, #13
 801c28e:	79ba      	ldrb	r2, [r7, #6]
 801c290:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801c292:	68bb      	ldr	r3, [r7, #8]
 801c294:	330b      	adds	r3, #11
 801c296:	220f      	movs	r2, #15
 801c298:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801c29a:	68bb      	ldr	r3, [r7, #8]
 801c29c:	330c      	adds	r3, #12
 801c29e:	2200      	movs	r2, #0
 801c2a0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801c2a2:	68bb      	ldr	r3, [r7, #8]
 801c2a4:	331a      	adds	r3, #26
 801c2a6:	2100      	movs	r1, #0
 801c2a8:	4618      	mov	r0, r3
 801c2aa:	f7fe fed6 	bl	801b05a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801c2ae:	79fb      	ldrb	r3, [r7, #7]
 801c2b0:	1e5a      	subs	r2, r3, #1
 801c2b2:	4613      	mov	r3, r2
 801c2b4:	005b      	lsls	r3, r3, #1
 801c2b6:	4413      	add	r3, r2
 801c2b8:	009b      	lsls	r3, r3, #2
 801c2ba:	4413      	add	r3, r2
 801c2bc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801c2be:	2300      	movs	r3, #0
 801c2c0:	82fb      	strh	r3, [r7, #22]
 801c2c2:	2300      	movs	r3, #0
 801c2c4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801c2c6:	8afb      	ldrh	r3, [r7, #22]
 801c2c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c2cc:	4293      	cmp	r3, r2
 801c2ce:	d007      	beq.n	801c2e0 <put_lfn+0x6c>
 801c2d0:	69fb      	ldr	r3, [r7, #28]
 801c2d2:	1c5a      	adds	r2, r3, #1
 801c2d4:	61fa      	str	r2, [r7, #28]
 801c2d6:	005b      	lsls	r3, r3, #1
 801c2d8:	68fa      	ldr	r2, [r7, #12]
 801c2da:	4413      	add	r3, r2
 801c2dc:	881b      	ldrh	r3, [r3, #0]
 801c2de:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801c2e0:	4a17      	ldr	r2, [pc, #92]	@ (801c340 <put_lfn+0xcc>)
 801c2e2:	69bb      	ldr	r3, [r7, #24]
 801c2e4:	4413      	add	r3, r2
 801c2e6:	781b      	ldrb	r3, [r3, #0]
 801c2e8:	461a      	mov	r2, r3
 801c2ea:	68bb      	ldr	r3, [r7, #8]
 801c2ec:	4413      	add	r3, r2
 801c2ee:	8afa      	ldrh	r2, [r7, #22]
 801c2f0:	4611      	mov	r1, r2
 801c2f2:	4618      	mov	r0, r3
 801c2f4:	f7fe feb1 	bl	801b05a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801c2f8:	8afb      	ldrh	r3, [r7, #22]
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	d102      	bne.n	801c304 <put_lfn+0x90>
 801c2fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c302:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801c304:	69bb      	ldr	r3, [r7, #24]
 801c306:	3301      	adds	r3, #1
 801c308:	61bb      	str	r3, [r7, #24]
 801c30a:	69bb      	ldr	r3, [r7, #24]
 801c30c:	2b0c      	cmp	r3, #12
 801c30e:	d9da      	bls.n	801c2c6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801c310:	8afb      	ldrh	r3, [r7, #22]
 801c312:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c316:	4293      	cmp	r3, r2
 801c318:	d006      	beq.n	801c328 <put_lfn+0xb4>
 801c31a:	69fb      	ldr	r3, [r7, #28]
 801c31c:	005b      	lsls	r3, r3, #1
 801c31e:	68fa      	ldr	r2, [r7, #12]
 801c320:	4413      	add	r3, r2
 801c322:	881b      	ldrh	r3, [r3, #0]
 801c324:	2b00      	cmp	r3, #0
 801c326:	d103      	bne.n	801c330 <put_lfn+0xbc>
 801c328:	79fb      	ldrb	r3, [r7, #7]
 801c32a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c32e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801c330:	68bb      	ldr	r3, [r7, #8]
 801c332:	79fa      	ldrb	r2, [r7, #7]
 801c334:	701a      	strb	r2, [r3, #0]
}
 801c336:	bf00      	nop
 801c338:	3720      	adds	r7, #32
 801c33a:	46bd      	mov	sp, r7
 801c33c:	bd80      	pop	{r7, pc}
 801c33e:	bf00      	nop
 801c340:	0801eb24 	.word	0x0801eb24

0801c344 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801c344:	b580      	push	{r7, lr}
 801c346:	b08c      	sub	sp, #48	@ 0x30
 801c348:	af00      	add	r7, sp, #0
 801c34a:	60f8      	str	r0, [r7, #12]
 801c34c:	60b9      	str	r1, [r7, #8]
 801c34e:	607a      	str	r2, [r7, #4]
 801c350:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801c352:	220b      	movs	r2, #11
 801c354:	68b9      	ldr	r1, [r7, #8]
 801c356:	68f8      	ldr	r0, [r7, #12]
 801c358:	f7fe fec6 	bl	801b0e8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801c35c:	683b      	ldr	r3, [r7, #0]
 801c35e:	2b05      	cmp	r3, #5
 801c360:	d929      	bls.n	801c3b6 <gen_numname+0x72>
		sr = seq;
 801c362:	683b      	ldr	r3, [r7, #0]
 801c364:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801c366:	e020      	b.n	801c3aa <gen_numname+0x66>
			wc = *lfn++;
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	1c9a      	adds	r2, r3, #2
 801c36c:	607a      	str	r2, [r7, #4]
 801c36e:	881b      	ldrh	r3, [r3, #0]
 801c370:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801c372:	2300      	movs	r3, #0
 801c374:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c376:	e015      	b.n	801c3a4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801c378:	69fb      	ldr	r3, [r7, #28]
 801c37a:	005a      	lsls	r2, r3, #1
 801c37c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c37e:	f003 0301 	and.w	r3, r3, #1
 801c382:	4413      	add	r3, r2
 801c384:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801c386:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c388:	085b      	lsrs	r3, r3, #1
 801c38a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801c38c:	69fb      	ldr	r3, [r7, #28]
 801c38e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c392:	2b00      	cmp	r3, #0
 801c394:	d003      	beq.n	801c39e <gen_numname+0x5a>
 801c396:	69fa      	ldr	r2, [r7, #28]
 801c398:	4b30      	ldr	r3, [pc, #192]	@ (801c45c <gen_numname+0x118>)
 801c39a:	4053      	eors	r3, r2
 801c39c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801c39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3a0:	3301      	adds	r3, #1
 801c3a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3a6:	2b0f      	cmp	r3, #15
 801c3a8:	d9e6      	bls.n	801c378 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	881b      	ldrh	r3, [r3, #0]
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	d1da      	bne.n	801c368 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801c3b2:	69fb      	ldr	r3, [r7, #28]
 801c3b4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801c3b6:	2307      	movs	r3, #7
 801c3b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801c3ba:	683b      	ldr	r3, [r7, #0]
 801c3bc:	b2db      	uxtb	r3, r3
 801c3be:	f003 030f 	and.w	r3, r3, #15
 801c3c2:	b2db      	uxtb	r3, r3
 801c3c4:	3330      	adds	r3, #48	@ 0x30
 801c3c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801c3ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c3ce:	2b39      	cmp	r3, #57	@ 0x39
 801c3d0:	d904      	bls.n	801c3dc <gen_numname+0x98>
 801c3d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c3d6:	3307      	adds	r3, #7
 801c3d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801c3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3de:	1e5a      	subs	r2, r3, #1
 801c3e0:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c3e2:	3330      	adds	r3, #48	@ 0x30
 801c3e4:	443b      	add	r3, r7
 801c3e6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801c3ea:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801c3ee:	683b      	ldr	r3, [r7, #0]
 801c3f0:	091b      	lsrs	r3, r3, #4
 801c3f2:	603b      	str	r3, [r7, #0]
	} while (seq);
 801c3f4:	683b      	ldr	r3, [r7, #0]
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d1df      	bne.n	801c3ba <gen_numname+0x76>
	ns[i] = '~';
 801c3fa:	f107 0214 	add.w	r2, r7, #20
 801c3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c400:	4413      	add	r3, r2
 801c402:	227e      	movs	r2, #126	@ 0x7e
 801c404:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801c406:	2300      	movs	r3, #0
 801c408:	627b      	str	r3, [r7, #36]	@ 0x24
 801c40a:	e002      	b.n	801c412 <gen_numname+0xce>
 801c40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c40e:	3301      	adds	r3, #1
 801c410:	627b      	str	r3, [r7, #36]	@ 0x24
 801c412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c416:	429a      	cmp	r2, r3
 801c418:	d205      	bcs.n	801c426 <gen_numname+0xe2>
 801c41a:	68fa      	ldr	r2, [r7, #12]
 801c41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c41e:	4413      	add	r3, r2
 801c420:	781b      	ldrb	r3, [r3, #0]
 801c422:	2b20      	cmp	r3, #32
 801c424:	d1f2      	bne.n	801c40c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801c426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c428:	2b07      	cmp	r3, #7
 801c42a:	d807      	bhi.n	801c43c <gen_numname+0xf8>
 801c42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c42e:	1c5a      	adds	r2, r3, #1
 801c430:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c432:	3330      	adds	r3, #48	@ 0x30
 801c434:	443b      	add	r3, r7
 801c436:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801c43a:	e000      	b.n	801c43e <gen_numname+0xfa>
 801c43c:	2120      	movs	r1, #32
 801c43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c440:	1c5a      	adds	r2, r3, #1
 801c442:	627a      	str	r2, [r7, #36]	@ 0x24
 801c444:	68fa      	ldr	r2, [r7, #12]
 801c446:	4413      	add	r3, r2
 801c448:	460a      	mov	r2, r1
 801c44a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801c44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c44e:	2b07      	cmp	r3, #7
 801c450:	d9e9      	bls.n	801c426 <gen_numname+0xe2>
}
 801c452:	bf00      	nop
 801c454:	bf00      	nop
 801c456:	3730      	adds	r7, #48	@ 0x30
 801c458:	46bd      	mov	sp, r7
 801c45a:	bd80      	pop	{r7, pc}
 801c45c:	00011021 	.word	0x00011021

0801c460 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801c460:	b480      	push	{r7}
 801c462:	b085      	sub	sp, #20
 801c464:	af00      	add	r7, sp, #0
 801c466:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801c468:	2300      	movs	r3, #0
 801c46a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801c46c:	230b      	movs	r3, #11
 801c46e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801c470:	7bfb      	ldrb	r3, [r7, #15]
 801c472:	b2da      	uxtb	r2, r3
 801c474:	0852      	lsrs	r2, r2, #1
 801c476:	01db      	lsls	r3, r3, #7
 801c478:	4313      	orrs	r3, r2
 801c47a:	b2da      	uxtb	r2, r3
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	1c59      	adds	r1, r3, #1
 801c480:	6079      	str	r1, [r7, #4]
 801c482:	781b      	ldrb	r3, [r3, #0]
 801c484:	4413      	add	r3, r2
 801c486:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801c488:	68bb      	ldr	r3, [r7, #8]
 801c48a:	3b01      	subs	r3, #1
 801c48c:	60bb      	str	r3, [r7, #8]
 801c48e:	68bb      	ldr	r3, [r7, #8]
 801c490:	2b00      	cmp	r3, #0
 801c492:	d1ed      	bne.n	801c470 <sum_sfn+0x10>
	return sum;
 801c494:	7bfb      	ldrb	r3, [r7, #15]
}
 801c496:	4618      	mov	r0, r3
 801c498:	3714      	adds	r7, #20
 801c49a:	46bd      	mov	sp, r7
 801c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4a0:	4770      	bx	lr

0801c4a2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801c4a2:	b580      	push	{r7, lr}
 801c4a4:	b086      	sub	sp, #24
 801c4a6:	af00      	add	r7, sp, #0
 801c4a8:	6078      	str	r0, [r7, #4]
 801c4aa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801c4ac:	2304      	movs	r3, #4
 801c4ae:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	681b      	ldr	r3, [r3, #0]
 801c4b4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801c4b6:	23ff      	movs	r3, #255	@ 0xff
 801c4b8:	757b      	strb	r3, [r7, #21]
 801c4ba:	23ff      	movs	r3, #255	@ 0xff
 801c4bc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801c4be:	e081      	b.n	801c5c4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	69db      	ldr	r3, [r3, #28]
 801c4c4:	4619      	mov	r1, r3
 801c4c6:	6938      	ldr	r0, [r7, #16]
 801c4c8:	f7ff f83c 	bl	801b544 <move_window>
 801c4cc:	4603      	mov	r3, r0
 801c4ce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c4d0:	7dfb      	ldrb	r3, [r7, #23]
 801c4d2:	2b00      	cmp	r3, #0
 801c4d4:	d17c      	bne.n	801c5d0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	6a1b      	ldr	r3, [r3, #32]
 801c4da:	781b      	ldrb	r3, [r3, #0]
 801c4dc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801c4de:	7dbb      	ldrb	r3, [r7, #22]
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	d102      	bne.n	801c4ea <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801c4e4:	2304      	movs	r3, #4
 801c4e6:	75fb      	strb	r3, [r7, #23]
 801c4e8:	e077      	b.n	801c5da <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	6a1b      	ldr	r3, [r3, #32]
 801c4ee:	330b      	adds	r3, #11
 801c4f0:	781b      	ldrb	r3, [r3, #0]
 801c4f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c4f6:	73fb      	strb	r3, [r7, #15]
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	7bfa      	ldrb	r2, [r7, #15]
 801c4fc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801c4fe:	7dbb      	ldrb	r3, [r7, #22]
 801c500:	2be5      	cmp	r3, #229	@ 0xe5
 801c502:	d00e      	beq.n	801c522 <dir_read+0x80>
 801c504:	7dbb      	ldrb	r3, [r7, #22]
 801c506:	2b2e      	cmp	r3, #46	@ 0x2e
 801c508:	d00b      	beq.n	801c522 <dir_read+0x80>
 801c50a:	7bfb      	ldrb	r3, [r7, #15]
 801c50c:	f023 0320 	bic.w	r3, r3, #32
 801c510:	2b08      	cmp	r3, #8
 801c512:	bf0c      	ite	eq
 801c514:	2301      	moveq	r3, #1
 801c516:	2300      	movne	r3, #0
 801c518:	b2db      	uxtb	r3, r3
 801c51a:	461a      	mov	r2, r3
 801c51c:	683b      	ldr	r3, [r7, #0]
 801c51e:	4293      	cmp	r3, r2
 801c520:	d002      	beq.n	801c528 <dir_read+0x86>
				ord = 0xFF;
 801c522:	23ff      	movs	r3, #255	@ 0xff
 801c524:	757b      	strb	r3, [r7, #21]
 801c526:	e044      	b.n	801c5b2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801c528:	7bfb      	ldrb	r3, [r7, #15]
 801c52a:	2b0f      	cmp	r3, #15
 801c52c:	d12f      	bne.n	801c58e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801c52e:	7dbb      	ldrb	r3, [r7, #22]
 801c530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c534:	2b00      	cmp	r3, #0
 801c536:	d00d      	beq.n	801c554 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	6a1b      	ldr	r3, [r3, #32]
 801c53c:	7b5b      	ldrb	r3, [r3, #13]
 801c53e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801c540:	7dbb      	ldrb	r3, [r7, #22]
 801c542:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c546:	75bb      	strb	r3, [r7, #22]
 801c548:	7dbb      	ldrb	r3, [r7, #22]
 801c54a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	695a      	ldr	r2, [r3, #20]
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c554:	7dba      	ldrb	r2, [r7, #22]
 801c556:	7d7b      	ldrb	r3, [r7, #21]
 801c558:	429a      	cmp	r2, r3
 801c55a:	d115      	bne.n	801c588 <dir_read+0xe6>
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	6a1b      	ldr	r3, [r3, #32]
 801c560:	330d      	adds	r3, #13
 801c562:	781b      	ldrb	r3, [r3, #0]
 801c564:	7d3a      	ldrb	r2, [r7, #20]
 801c566:	429a      	cmp	r2, r3
 801c568:	d10e      	bne.n	801c588 <dir_read+0xe6>
 801c56a:	693b      	ldr	r3, [r7, #16]
 801c56c:	691a      	ldr	r2, [r3, #16]
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	6a1b      	ldr	r3, [r3, #32]
 801c572:	4619      	mov	r1, r3
 801c574:	4610      	mov	r0, r2
 801c576:	f7ff fe19 	bl	801c1ac <pick_lfn>
 801c57a:	4603      	mov	r3, r0
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d003      	beq.n	801c588 <dir_read+0xe6>
 801c580:	7d7b      	ldrb	r3, [r7, #21]
 801c582:	3b01      	subs	r3, #1
 801c584:	b2db      	uxtb	r3, r3
 801c586:	e000      	b.n	801c58a <dir_read+0xe8>
 801c588:	23ff      	movs	r3, #255	@ 0xff
 801c58a:	757b      	strb	r3, [r7, #21]
 801c58c:	e011      	b.n	801c5b2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801c58e:	7d7b      	ldrb	r3, [r7, #21]
 801c590:	2b00      	cmp	r3, #0
 801c592:	d109      	bne.n	801c5a8 <dir_read+0x106>
 801c594:	687b      	ldr	r3, [r7, #4]
 801c596:	6a1b      	ldr	r3, [r3, #32]
 801c598:	4618      	mov	r0, r3
 801c59a:	f7ff ff61 	bl	801c460 <sum_sfn>
 801c59e:	4603      	mov	r3, r0
 801c5a0:	461a      	mov	r2, r3
 801c5a2:	7d3b      	ldrb	r3, [r7, #20]
 801c5a4:	4293      	cmp	r3, r2
 801c5a6:	d015      	beq.n	801c5d4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	f04f 32ff 	mov.w	r2, #4294967295
 801c5ae:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801c5b0:	e010      	b.n	801c5d4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801c5b2:	2100      	movs	r1, #0
 801c5b4:	6878      	ldr	r0, [r7, #4]
 801c5b6:	f7ff fc2d 	bl	801be14 <dir_next>
 801c5ba:	4603      	mov	r3, r0
 801c5bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c5be:	7dfb      	ldrb	r3, [r7, #23]
 801c5c0:	2b00      	cmp	r3, #0
 801c5c2:	d109      	bne.n	801c5d8 <dir_read+0x136>
	while (dp->sect) {
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	69db      	ldr	r3, [r3, #28]
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	f47f af79 	bne.w	801c4c0 <dir_read+0x1e>
 801c5ce:	e004      	b.n	801c5da <dir_read+0x138>
		if (res != FR_OK) break;
 801c5d0:	bf00      	nop
 801c5d2:	e002      	b.n	801c5da <dir_read+0x138>
					break;
 801c5d4:	bf00      	nop
 801c5d6:	e000      	b.n	801c5da <dir_read+0x138>
		if (res != FR_OK) break;
 801c5d8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801c5da:	7dfb      	ldrb	r3, [r7, #23]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d002      	beq.n	801c5e6 <dir_read+0x144>
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	2200      	movs	r2, #0
 801c5e4:	61da      	str	r2, [r3, #28]
	return res;
 801c5e6:	7dfb      	ldrb	r3, [r7, #23]
}
 801c5e8:	4618      	mov	r0, r3
 801c5ea:	3718      	adds	r7, #24
 801c5ec:	46bd      	mov	sp, r7
 801c5ee:	bd80      	pop	{r7, pc}

0801c5f0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801c5f0:	b580      	push	{r7, lr}
 801c5f2:	b086      	sub	sp, #24
 801c5f4:	af00      	add	r7, sp, #0
 801c5f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801c5fe:	2100      	movs	r1, #0
 801c600:	6878      	ldr	r0, [r7, #4]
 801c602:	f7ff fb7e 	bl	801bd02 <dir_sdi>
 801c606:	4603      	mov	r3, r0
 801c608:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801c60a:	7dfb      	ldrb	r3, [r7, #23]
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	d001      	beq.n	801c614 <dir_find+0x24>
 801c610:	7dfb      	ldrb	r3, [r7, #23]
 801c612:	e0a9      	b.n	801c768 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c614:	23ff      	movs	r3, #255	@ 0xff
 801c616:	753b      	strb	r3, [r7, #20]
 801c618:	7d3b      	ldrb	r3, [r7, #20]
 801c61a:	757b      	strb	r3, [r7, #21]
 801c61c:	687b      	ldr	r3, [r7, #4]
 801c61e:	f04f 32ff 	mov.w	r2, #4294967295
 801c622:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	69db      	ldr	r3, [r3, #28]
 801c628:	4619      	mov	r1, r3
 801c62a:	6938      	ldr	r0, [r7, #16]
 801c62c:	f7fe ff8a 	bl	801b544 <move_window>
 801c630:	4603      	mov	r3, r0
 801c632:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c634:	7dfb      	ldrb	r3, [r7, #23]
 801c636:	2b00      	cmp	r3, #0
 801c638:	f040 8090 	bne.w	801c75c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	6a1b      	ldr	r3, [r3, #32]
 801c640:	781b      	ldrb	r3, [r3, #0]
 801c642:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c644:	7dbb      	ldrb	r3, [r7, #22]
 801c646:	2b00      	cmp	r3, #0
 801c648:	d102      	bne.n	801c650 <dir_find+0x60>
 801c64a:	2304      	movs	r3, #4
 801c64c:	75fb      	strb	r3, [r7, #23]
 801c64e:	e08a      	b.n	801c766 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	6a1b      	ldr	r3, [r3, #32]
 801c654:	330b      	adds	r3, #11
 801c656:	781b      	ldrb	r3, [r3, #0]
 801c658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c65c:	73fb      	strb	r3, [r7, #15]
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	7bfa      	ldrb	r2, [r7, #15]
 801c662:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c664:	7dbb      	ldrb	r3, [r7, #22]
 801c666:	2be5      	cmp	r3, #229	@ 0xe5
 801c668:	d007      	beq.n	801c67a <dir_find+0x8a>
 801c66a:	7bfb      	ldrb	r3, [r7, #15]
 801c66c:	f003 0308 	and.w	r3, r3, #8
 801c670:	2b00      	cmp	r3, #0
 801c672:	d009      	beq.n	801c688 <dir_find+0x98>
 801c674:	7bfb      	ldrb	r3, [r7, #15]
 801c676:	2b0f      	cmp	r3, #15
 801c678:	d006      	beq.n	801c688 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c67a:	23ff      	movs	r3, #255	@ 0xff
 801c67c:	757b      	strb	r3, [r7, #21]
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	f04f 32ff 	mov.w	r2, #4294967295
 801c684:	631a      	str	r2, [r3, #48]	@ 0x30
 801c686:	e05e      	b.n	801c746 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801c688:	7bfb      	ldrb	r3, [r7, #15]
 801c68a:	2b0f      	cmp	r3, #15
 801c68c:	d136      	bne.n	801c6fc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d154      	bne.n	801c746 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801c69c:	7dbb      	ldrb	r3, [r7, #22]
 801c69e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	d00d      	beq.n	801c6c2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	6a1b      	ldr	r3, [r3, #32]
 801c6aa:	7b5b      	ldrb	r3, [r3, #13]
 801c6ac:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801c6ae:	7dbb      	ldrb	r3, [r7, #22]
 801c6b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c6b4:	75bb      	strb	r3, [r7, #22]
 801c6b6:	7dbb      	ldrb	r3, [r7, #22]
 801c6b8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	695a      	ldr	r2, [r3, #20]
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c6c2:	7dba      	ldrb	r2, [r7, #22]
 801c6c4:	7d7b      	ldrb	r3, [r7, #21]
 801c6c6:	429a      	cmp	r2, r3
 801c6c8:	d115      	bne.n	801c6f6 <dir_find+0x106>
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	6a1b      	ldr	r3, [r3, #32]
 801c6ce:	330d      	adds	r3, #13
 801c6d0:	781b      	ldrb	r3, [r3, #0]
 801c6d2:	7d3a      	ldrb	r2, [r7, #20]
 801c6d4:	429a      	cmp	r2, r3
 801c6d6:	d10e      	bne.n	801c6f6 <dir_find+0x106>
 801c6d8:	693b      	ldr	r3, [r7, #16]
 801c6da:	691a      	ldr	r2, [r3, #16]
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	6a1b      	ldr	r3, [r3, #32]
 801c6e0:	4619      	mov	r1, r3
 801c6e2:	4610      	mov	r0, r2
 801c6e4:	f7ff fcf2 	bl	801c0cc <cmp_lfn>
 801c6e8:	4603      	mov	r3, r0
 801c6ea:	2b00      	cmp	r3, #0
 801c6ec:	d003      	beq.n	801c6f6 <dir_find+0x106>
 801c6ee:	7d7b      	ldrb	r3, [r7, #21]
 801c6f0:	3b01      	subs	r3, #1
 801c6f2:	b2db      	uxtb	r3, r3
 801c6f4:	e000      	b.n	801c6f8 <dir_find+0x108>
 801c6f6:	23ff      	movs	r3, #255	@ 0xff
 801c6f8:	757b      	strb	r3, [r7, #21]
 801c6fa:	e024      	b.n	801c746 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c6fc:	7d7b      	ldrb	r3, [r7, #21]
 801c6fe:	2b00      	cmp	r3, #0
 801c700:	d109      	bne.n	801c716 <dir_find+0x126>
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	6a1b      	ldr	r3, [r3, #32]
 801c706:	4618      	mov	r0, r3
 801c708:	f7ff feaa 	bl	801c460 <sum_sfn>
 801c70c:	4603      	mov	r3, r0
 801c70e:	461a      	mov	r2, r3
 801c710:	7d3b      	ldrb	r3, [r7, #20]
 801c712:	4293      	cmp	r3, r2
 801c714:	d024      	beq.n	801c760 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c71c:	f003 0301 	and.w	r3, r3, #1
 801c720:	2b00      	cmp	r3, #0
 801c722:	d10a      	bne.n	801c73a <dir_find+0x14a>
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	6a18      	ldr	r0, [r3, #32]
 801c728:	687b      	ldr	r3, [r7, #4]
 801c72a:	3324      	adds	r3, #36	@ 0x24
 801c72c:	220b      	movs	r2, #11
 801c72e:	4619      	mov	r1, r3
 801c730:	f7fe fd16 	bl	801b160 <mem_cmp>
 801c734:	4603      	mov	r3, r0
 801c736:	2b00      	cmp	r3, #0
 801c738:	d014      	beq.n	801c764 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c73a:	23ff      	movs	r3, #255	@ 0xff
 801c73c:	757b      	strb	r3, [r7, #21]
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	f04f 32ff 	mov.w	r2, #4294967295
 801c744:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801c746:	2100      	movs	r1, #0
 801c748:	6878      	ldr	r0, [r7, #4]
 801c74a:	f7ff fb63 	bl	801be14 <dir_next>
 801c74e:	4603      	mov	r3, r0
 801c750:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801c752:	7dfb      	ldrb	r3, [r7, #23]
 801c754:	2b00      	cmp	r3, #0
 801c756:	f43f af65 	beq.w	801c624 <dir_find+0x34>
 801c75a:	e004      	b.n	801c766 <dir_find+0x176>
		if (res != FR_OK) break;
 801c75c:	bf00      	nop
 801c75e:	e002      	b.n	801c766 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c760:	bf00      	nop
 801c762:	e000      	b.n	801c766 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c764:	bf00      	nop

	return res;
 801c766:	7dfb      	ldrb	r3, [r7, #23]
}
 801c768:	4618      	mov	r0, r3
 801c76a:	3718      	adds	r7, #24
 801c76c:	46bd      	mov	sp, r7
 801c76e:	bd80      	pop	{r7, pc}

0801c770 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801c770:	b580      	push	{r7, lr}
 801c772:	b08c      	sub	sp, #48	@ 0x30
 801c774:	af00      	add	r7, sp, #0
 801c776:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	681b      	ldr	r3, [r3, #0]
 801c77c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801c77e:	687b      	ldr	r3, [r7, #4]
 801c780:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c784:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801c788:	2b00      	cmp	r3, #0
 801c78a:	d001      	beq.n	801c790 <dir_register+0x20>
 801c78c:	2306      	movs	r3, #6
 801c78e:	e0e0      	b.n	801c952 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801c790:	2300      	movs	r3, #0
 801c792:	627b      	str	r3, [r7, #36]	@ 0x24
 801c794:	e002      	b.n	801c79c <dir_register+0x2c>
 801c796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c798:	3301      	adds	r3, #1
 801c79a:	627b      	str	r3, [r7, #36]	@ 0x24
 801c79c:	69fb      	ldr	r3, [r7, #28]
 801c79e:	691a      	ldr	r2, [r3, #16]
 801c7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7a2:	005b      	lsls	r3, r3, #1
 801c7a4:	4413      	add	r3, r2
 801c7a6:	881b      	ldrh	r3, [r3, #0]
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d1f4      	bne.n	801c796 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801c7b2:	f107 030c 	add.w	r3, r7, #12
 801c7b6:	220c      	movs	r2, #12
 801c7b8:	4618      	mov	r0, r3
 801c7ba:	f7fe fc95 	bl	801b0e8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801c7be:	7dfb      	ldrb	r3, [r7, #23]
 801c7c0:	f003 0301 	and.w	r3, r3, #1
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	d032      	beq.n	801c82e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	2240      	movs	r2, #64	@ 0x40
 801c7cc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801c7d0:	2301      	movs	r3, #1
 801c7d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c7d4:	e016      	b.n	801c804 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801c7dc:	69fb      	ldr	r3, [r7, #28]
 801c7de:	691a      	ldr	r2, [r3, #16]
 801c7e0:	f107 010c 	add.w	r1, r7, #12
 801c7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7e6:	f7ff fdad 	bl	801c344 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801c7ea:	6878      	ldr	r0, [r7, #4]
 801c7ec:	f7ff ff00 	bl	801c5f0 <dir_find>
 801c7f0:	4603      	mov	r3, r0
 801c7f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801c7f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d106      	bne.n	801c80c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801c7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c800:	3301      	adds	r3, #1
 801c802:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c806:	2b63      	cmp	r3, #99	@ 0x63
 801c808:	d9e5      	bls.n	801c7d6 <dir_register+0x66>
 801c80a:	e000      	b.n	801c80e <dir_register+0x9e>
			if (res != FR_OK) break;
 801c80c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801c80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c810:	2b64      	cmp	r3, #100	@ 0x64
 801c812:	d101      	bne.n	801c818 <dir_register+0xa8>
 801c814:	2307      	movs	r3, #7
 801c816:	e09c      	b.n	801c952 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801c818:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c81c:	2b04      	cmp	r3, #4
 801c81e:	d002      	beq.n	801c826 <dir_register+0xb6>
 801c820:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c824:	e095      	b.n	801c952 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801c826:	7dfa      	ldrb	r2, [r7, #23]
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801c82e:	7dfb      	ldrb	r3, [r7, #23]
 801c830:	f003 0302 	and.w	r3, r3, #2
 801c834:	2b00      	cmp	r3, #0
 801c836:	d007      	beq.n	801c848 <dir_register+0xd8>
 801c838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c83a:	330c      	adds	r3, #12
 801c83c:	4a47      	ldr	r2, [pc, #284]	@ (801c95c <dir_register+0x1ec>)
 801c83e:	fba2 2303 	umull	r2, r3, r2, r3
 801c842:	089b      	lsrs	r3, r3, #2
 801c844:	3301      	adds	r3, #1
 801c846:	e000      	b.n	801c84a <dir_register+0xda>
 801c848:	2301      	movs	r3, #1
 801c84a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801c84c:	6a39      	ldr	r1, [r7, #32]
 801c84e:	6878      	ldr	r0, [r7, #4]
 801c850:	f7ff fbb6 	bl	801bfc0 <dir_alloc>
 801c854:	4603      	mov	r3, r0
 801c856:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801c85a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d148      	bne.n	801c8f4 <dir_register+0x184>
 801c862:	6a3b      	ldr	r3, [r7, #32]
 801c864:	3b01      	subs	r3, #1
 801c866:	623b      	str	r3, [r7, #32]
 801c868:	6a3b      	ldr	r3, [r7, #32]
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	d042      	beq.n	801c8f4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	695a      	ldr	r2, [r3, #20]
 801c872:	6a3b      	ldr	r3, [r7, #32]
 801c874:	015b      	lsls	r3, r3, #5
 801c876:	1ad3      	subs	r3, r2, r3
 801c878:	4619      	mov	r1, r3
 801c87a:	6878      	ldr	r0, [r7, #4]
 801c87c:	f7ff fa41 	bl	801bd02 <dir_sdi>
 801c880:	4603      	mov	r3, r0
 801c882:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c886:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c88a:	2b00      	cmp	r3, #0
 801c88c:	d132      	bne.n	801c8f4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	3324      	adds	r3, #36	@ 0x24
 801c892:	4618      	mov	r0, r3
 801c894:	f7ff fde4 	bl	801c460 <sum_sfn>
 801c898:	4603      	mov	r3, r0
 801c89a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801c89c:	687b      	ldr	r3, [r7, #4]
 801c89e:	69db      	ldr	r3, [r3, #28]
 801c8a0:	4619      	mov	r1, r3
 801c8a2:	69f8      	ldr	r0, [r7, #28]
 801c8a4:	f7fe fe4e 	bl	801b544 <move_window>
 801c8a8:	4603      	mov	r3, r0
 801c8aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801c8ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c8b2:	2b00      	cmp	r3, #0
 801c8b4:	d11d      	bne.n	801c8f2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801c8b6:	69fb      	ldr	r3, [r7, #28]
 801c8b8:	6918      	ldr	r0, [r3, #16]
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	6a19      	ldr	r1, [r3, #32]
 801c8be:	6a3b      	ldr	r3, [r7, #32]
 801c8c0:	b2da      	uxtb	r2, r3
 801c8c2:	7efb      	ldrb	r3, [r7, #27]
 801c8c4:	f7ff fcd6 	bl	801c274 <put_lfn>
				fs->wflag = 1;
 801c8c8:	69fb      	ldr	r3, [r7, #28]
 801c8ca:	2201      	movs	r2, #1
 801c8cc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801c8ce:	2100      	movs	r1, #0
 801c8d0:	6878      	ldr	r0, [r7, #4]
 801c8d2:	f7ff fa9f 	bl	801be14 <dir_next>
 801c8d6:	4603      	mov	r3, r0
 801c8d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801c8dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d107      	bne.n	801c8f4 <dir_register+0x184>
 801c8e4:	6a3b      	ldr	r3, [r7, #32]
 801c8e6:	3b01      	subs	r3, #1
 801c8e8:	623b      	str	r3, [r7, #32]
 801c8ea:	6a3b      	ldr	r3, [r7, #32]
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d1d5      	bne.n	801c89c <dir_register+0x12c>
 801c8f0:	e000      	b.n	801c8f4 <dir_register+0x184>
				if (res != FR_OK) break;
 801c8f2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c8f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c8f8:	2b00      	cmp	r3, #0
 801c8fa:	d128      	bne.n	801c94e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	69db      	ldr	r3, [r3, #28]
 801c900:	4619      	mov	r1, r3
 801c902:	69f8      	ldr	r0, [r7, #28]
 801c904:	f7fe fe1e 	bl	801b544 <move_window>
 801c908:	4603      	mov	r3, r0
 801c90a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c90e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c912:	2b00      	cmp	r3, #0
 801c914:	d11b      	bne.n	801c94e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	6a1b      	ldr	r3, [r3, #32]
 801c91a:	2220      	movs	r2, #32
 801c91c:	2100      	movs	r1, #0
 801c91e:	4618      	mov	r0, r3
 801c920:	f7fe fc03 	bl	801b12a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	6a18      	ldr	r0, [r3, #32]
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	3324      	adds	r3, #36	@ 0x24
 801c92c:	220b      	movs	r2, #11
 801c92e:	4619      	mov	r1, r3
 801c930:	f7fe fbda 	bl	801b0e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	6a1b      	ldr	r3, [r3, #32]
 801c93e:	330c      	adds	r3, #12
 801c940:	f002 0218 	and.w	r2, r2, #24
 801c944:	b2d2      	uxtb	r2, r2
 801c946:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801c948:	69fb      	ldr	r3, [r7, #28]
 801c94a:	2201      	movs	r2, #1
 801c94c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c94e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801c952:	4618      	mov	r0, r3
 801c954:	3730      	adds	r7, #48	@ 0x30
 801c956:	46bd      	mov	sp, r7
 801c958:	bd80      	pop	{r7, pc}
 801c95a:	bf00      	nop
 801c95c:	4ec4ec4f 	.word	0x4ec4ec4f

0801c960 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c960:	b580      	push	{r7, lr}
 801c962:	b086      	sub	sp, #24
 801c964:	af00      	add	r7, sp, #0
 801c966:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	695b      	ldr	r3, [r3, #20]
 801c972:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c978:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c97c:	d007      	beq.n	801c98e <dir_remove+0x2e>
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c982:	4619      	mov	r1, r3
 801c984:	6878      	ldr	r0, [r7, #4]
 801c986:	f7ff f9bc 	bl	801bd02 <dir_sdi>
 801c98a:	4603      	mov	r3, r0
 801c98c:	e000      	b.n	801c990 <dir_remove+0x30>
 801c98e:	2300      	movs	r3, #0
 801c990:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c992:	7dfb      	ldrb	r3, [r7, #23]
 801c994:	2b00      	cmp	r3, #0
 801c996:	d128      	bne.n	801c9ea <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	69db      	ldr	r3, [r3, #28]
 801c99c:	4619      	mov	r1, r3
 801c99e:	6938      	ldr	r0, [r7, #16]
 801c9a0:	f7fe fdd0 	bl	801b544 <move_window>
 801c9a4:	4603      	mov	r3, r0
 801c9a6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c9a8:	7dfb      	ldrb	r3, [r7, #23]
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d115      	bne.n	801c9da <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801c9ae:	687b      	ldr	r3, [r7, #4]
 801c9b0:	6a1b      	ldr	r3, [r3, #32]
 801c9b2:	22e5      	movs	r2, #229	@ 0xe5
 801c9b4:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801c9b6:	693b      	ldr	r3, [r7, #16]
 801c9b8:	2201      	movs	r2, #1
 801c9ba:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	695b      	ldr	r3, [r3, #20]
 801c9c0:	68fa      	ldr	r2, [r7, #12]
 801c9c2:	429a      	cmp	r2, r3
 801c9c4:	d90b      	bls.n	801c9de <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801c9c6:	2100      	movs	r1, #0
 801c9c8:	6878      	ldr	r0, [r7, #4]
 801c9ca:	f7ff fa23 	bl	801be14 <dir_next>
 801c9ce:	4603      	mov	r3, r0
 801c9d0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801c9d2:	7dfb      	ldrb	r3, [r7, #23]
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	d0df      	beq.n	801c998 <dir_remove+0x38>
 801c9d8:	e002      	b.n	801c9e0 <dir_remove+0x80>
			if (res != FR_OK) break;
 801c9da:	bf00      	nop
 801c9dc:	e000      	b.n	801c9e0 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c9de:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c9e0:	7dfb      	ldrb	r3, [r7, #23]
 801c9e2:	2b04      	cmp	r3, #4
 801c9e4:	d101      	bne.n	801c9ea <dir_remove+0x8a>
 801c9e6:	2302      	movs	r3, #2
 801c9e8:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801c9ea:	7dfb      	ldrb	r3, [r7, #23]
}
 801c9ec:	4618      	mov	r0, r3
 801c9ee:	3718      	adds	r7, #24
 801c9f0:	46bd      	mov	sp, r7
 801c9f2:	bd80      	pop	{r7, pc}

0801c9f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c9f4:	b580      	push	{r7, lr}
 801c9f6:	b08a      	sub	sp, #40	@ 0x28
 801c9f8:	af00      	add	r7, sp, #0
 801c9fa:	6078      	str	r0, [r7, #4]
 801c9fc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801c9fe:	683b      	ldr	r3, [r7, #0]
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	613b      	str	r3, [r7, #16]
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	681b      	ldr	r3, [r3, #0]
 801ca08:	691b      	ldr	r3, [r3, #16]
 801ca0a:	60fb      	str	r3, [r7, #12]
 801ca0c:	2300      	movs	r3, #0
 801ca0e:	617b      	str	r3, [r7, #20]
 801ca10:	697b      	ldr	r3, [r7, #20]
 801ca12:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801ca14:	69bb      	ldr	r3, [r7, #24]
 801ca16:	1c5a      	adds	r2, r3, #1
 801ca18:	61ba      	str	r2, [r7, #24]
 801ca1a:	693a      	ldr	r2, [r7, #16]
 801ca1c:	4413      	add	r3, r2
 801ca1e:	781b      	ldrb	r3, [r3, #0]
 801ca20:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801ca22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca24:	2b1f      	cmp	r3, #31
 801ca26:	d940      	bls.n	801caaa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801ca28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca2a:	2b2f      	cmp	r3, #47	@ 0x2f
 801ca2c:	d006      	beq.n	801ca3c <create_name+0x48>
 801ca2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca30:	2b5c      	cmp	r3, #92	@ 0x5c
 801ca32:	d110      	bne.n	801ca56 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801ca34:	e002      	b.n	801ca3c <create_name+0x48>
 801ca36:	69bb      	ldr	r3, [r7, #24]
 801ca38:	3301      	adds	r3, #1
 801ca3a:	61bb      	str	r3, [r7, #24]
 801ca3c:	693a      	ldr	r2, [r7, #16]
 801ca3e:	69bb      	ldr	r3, [r7, #24]
 801ca40:	4413      	add	r3, r2
 801ca42:	781b      	ldrb	r3, [r3, #0]
 801ca44:	2b2f      	cmp	r3, #47	@ 0x2f
 801ca46:	d0f6      	beq.n	801ca36 <create_name+0x42>
 801ca48:	693a      	ldr	r2, [r7, #16]
 801ca4a:	69bb      	ldr	r3, [r7, #24]
 801ca4c:	4413      	add	r3, r2
 801ca4e:	781b      	ldrb	r3, [r3, #0]
 801ca50:	2b5c      	cmp	r3, #92	@ 0x5c
 801ca52:	d0f0      	beq.n	801ca36 <create_name+0x42>
			break;
 801ca54:	e02a      	b.n	801caac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801ca56:	697b      	ldr	r3, [r7, #20]
 801ca58:	2bfe      	cmp	r3, #254	@ 0xfe
 801ca5a:	d901      	bls.n	801ca60 <create_name+0x6c>
 801ca5c:	2306      	movs	r3, #6
 801ca5e:	e17d      	b.n	801cd5c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801ca60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca62:	b2db      	uxtb	r3, r3
 801ca64:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801ca66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca68:	2101      	movs	r1, #1
 801ca6a:	4618      	mov	r0, r3
 801ca6c:	f001 fa98 	bl	801dfa0 <ff_convert>
 801ca70:	4603      	mov	r3, r0
 801ca72:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801ca74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	d101      	bne.n	801ca7e <create_name+0x8a>
 801ca7a:	2306      	movs	r3, #6
 801ca7c:	e16e      	b.n	801cd5c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801ca7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca80:	2b7f      	cmp	r3, #127	@ 0x7f
 801ca82:	d809      	bhi.n	801ca98 <create_name+0xa4>
 801ca84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca86:	4619      	mov	r1, r3
 801ca88:	488d      	ldr	r0, [pc, #564]	@ (801ccc0 <create_name+0x2cc>)
 801ca8a:	f7fe fb90 	bl	801b1ae <chk_chr>
 801ca8e:	4603      	mov	r3, r0
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	d001      	beq.n	801ca98 <create_name+0xa4>
 801ca94:	2306      	movs	r3, #6
 801ca96:	e161      	b.n	801cd5c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801ca98:	697b      	ldr	r3, [r7, #20]
 801ca9a:	1c5a      	adds	r2, r3, #1
 801ca9c:	617a      	str	r2, [r7, #20]
 801ca9e:	005b      	lsls	r3, r3, #1
 801caa0:	68fa      	ldr	r2, [r7, #12]
 801caa2:	4413      	add	r3, r2
 801caa4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801caa6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801caa8:	e7b4      	b.n	801ca14 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801caaa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801caac:	693a      	ldr	r2, [r7, #16]
 801caae:	69bb      	ldr	r3, [r7, #24]
 801cab0:	441a      	add	r2, r3
 801cab2:	683b      	ldr	r3, [r7, #0]
 801cab4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801cab6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cab8:	2b1f      	cmp	r3, #31
 801caba:	d801      	bhi.n	801cac0 <create_name+0xcc>
 801cabc:	2304      	movs	r3, #4
 801cabe:	e000      	b.n	801cac2 <create_name+0xce>
 801cac0:	2300      	movs	r3, #0
 801cac2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801cac6:	e011      	b.n	801caec <create_name+0xf8>
		w = lfn[di - 1];
 801cac8:	697a      	ldr	r2, [r7, #20]
 801caca:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801cace:	4413      	add	r3, r2
 801cad0:	005b      	lsls	r3, r3, #1
 801cad2:	68fa      	ldr	r2, [r7, #12]
 801cad4:	4413      	add	r3, r2
 801cad6:	881b      	ldrh	r3, [r3, #0]
 801cad8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801cada:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cadc:	2b20      	cmp	r3, #32
 801cade:	d002      	beq.n	801cae6 <create_name+0xf2>
 801cae0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cae2:	2b2e      	cmp	r3, #46	@ 0x2e
 801cae4:	d106      	bne.n	801caf4 <create_name+0x100>
		di--;
 801cae6:	697b      	ldr	r3, [r7, #20]
 801cae8:	3b01      	subs	r3, #1
 801caea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801caec:	697b      	ldr	r3, [r7, #20]
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d1ea      	bne.n	801cac8 <create_name+0xd4>
 801caf2:	e000      	b.n	801caf6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801caf4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801caf6:	697b      	ldr	r3, [r7, #20]
 801caf8:	005b      	lsls	r3, r3, #1
 801cafa:	68fa      	ldr	r2, [r7, #12]
 801cafc:	4413      	add	r3, r2
 801cafe:	2200      	movs	r2, #0
 801cb00:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801cb02:	697b      	ldr	r3, [r7, #20]
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	d101      	bne.n	801cb0c <create_name+0x118>
 801cb08:	2306      	movs	r3, #6
 801cb0a:	e127      	b.n	801cd5c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801cb0c:	687b      	ldr	r3, [r7, #4]
 801cb0e:	3324      	adds	r3, #36	@ 0x24
 801cb10:	220b      	movs	r2, #11
 801cb12:	2120      	movs	r1, #32
 801cb14:	4618      	mov	r0, r3
 801cb16:	f7fe fb08 	bl	801b12a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801cb1a:	2300      	movs	r3, #0
 801cb1c:	61bb      	str	r3, [r7, #24]
 801cb1e:	e002      	b.n	801cb26 <create_name+0x132>
 801cb20:	69bb      	ldr	r3, [r7, #24]
 801cb22:	3301      	adds	r3, #1
 801cb24:	61bb      	str	r3, [r7, #24]
 801cb26:	69bb      	ldr	r3, [r7, #24]
 801cb28:	005b      	lsls	r3, r3, #1
 801cb2a:	68fa      	ldr	r2, [r7, #12]
 801cb2c:	4413      	add	r3, r2
 801cb2e:	881b      	ldrh	r3, [r3, #0]
 801cb30:	2b20      	cmp	r3, #32
 801cb32:	d0f5      	beq.n	801cb20 <create_name+0x12c>
 801cb34:	69bb      	ldr	r3, [r7, #24]
 801cb36:	005b      	lsls	r3, r3, #1
 801cb38:	68fa      	ldr	r2, [r7, #12]
 801cb3a:	4413      	add	r3, r2
 801cb3c:	881b      	ldrh	r3, [r3, #0]
 801cb3e:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb40:	d0ee      	beq.n	801cb20 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801cb42:	69bb      	ldr	r3, [r7, #24]
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	d009      	beq.n	801cb5c <create_name+0x168>
 801cb48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb4c:	f043 0303 	orr.w	r3, r3, #3
 801cb50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801cb54:	e002      	b.n	801cb5c <create_name+0x168>
 801cb56:	697b      	ldr	r3, [r7, #20]
 801cb58:	3b01      	subs	r3, #1
 801cb5a:	617b      	str	r3, [r7, #20]
 801cb5c:	697b      	ldr	r3, [r7, #20]
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	d009      	beq.n	801cb76 <create_name+0x182>
 801cb62:	697a      	ldr	r2, [r7, #20]
 801cb64:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801cb68:	4413      	add	r3, r2
 801cb6a:	005b      	lsls	r3, r3, #1
 801cb6c:	68fa      	ldr	r2, [r7, #12]
 801cb6e:	4413      	add	r3, r2
 801cb70:	881b      	ldrh	r3, [r3, #0]
 801cb72:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb74:	d1ef      	bne.n	801cb56 <create_name+0x162>

	i = b = 0; ni = 8;
 801cb76:	2300      	movs	r3, #0
 801cb78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cb7c:	2300      	movs	r3, #0
 801cb7e:	623b      	str	r3, [r7, #32]
 801cb80:	2308      	movs	r3, #8
 801cb82:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801cb84:	69bb      	ldr	r3, [r7, #24]
 801cb86:	1c5a      	adds	r2, r3, #1
 801cb88:	61ba      	str	r2, [r7, #24]
 801cb8a:	005b      	lsls	r3, r3, #1
 801cb8c:	68fa      	ldr	r2, [r7, #12]
 801cb8e:	4413      	add	r3, r2
 801cb90:	881b      	ldrh	r3, [r3, #0]
 801cb92:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801cb94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	f000 8090 	beq.w	801ccbc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801cb9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb9e:	2b20      	cmp	r3, #32
 801cba0:	d006      	beq.n	801cbb0 <create_name+0x1bc>
 801cba2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cba4:	2b2e      	cmp	r3, #46	@ 0x2e
 801cba6:	d10a      	bne.n	801cbbe <create_name+0x1ca>
 801cba8:	69ba      	ldr	r2, [r7, #24]
 801cbaa:	697b      	ldr	r3, [r7, #20]
 801cbac:	429a      	cmp	r2, r3
 801cbae:	d006      	beq.n	801cbbe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801cbb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbb4:	f043 0303 	orr.w	r3, r3, #3
 801cbb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cbbc:	e07d      	b.n	801ccba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801cbbe:	6a3a      	ldr	r2, [r7, #32]
 801cbc0:	69fb      	ldr	r3, [r7, #28]
 801cbc2:	429a      	cmp	r2, r3
 801cbc4:	d203      	bcs.n	801cbce <create_name+0x1da>
 801cbc6:	69ba      	ldr	r2, [r7, #24]
 801cbc8:	697b      	ldr	r3, [r7, #20]
 801cbca:	429a      	cmp	r2, r3
 801cbcc:	d123      	bne.n	801cc16 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801cbce:	69fb      	ldr	r3, [r7, #28]
 801cbd0:	2b0b      	cmp	r3, #11
 801cbd2:	d106      	bne.n	801cbe2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801cbd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbd8:	f043 0303 	orr.w	r3, r3, #3
 801cbdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cbe0:	e075      	b.n	801ccce <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801cbe2:	69ba      	ldr	r2, [r7, #24]
 801cbe4:	697b      	ldr	r3, [r7, #20]
 801cbe6:	429a      	cmp	r2, r3
 801cbe8:	d005      	beq.n	801cbf6 <create_name+0x202>
 801cbea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbee:	f043 0303 	orr.w	r3, r3, #3
 801cbf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801cbf6:	69ba      	ldr	r2, [r7, #24]
 801cbf8:	697b      	ldr	r3, [r7, #20]
 801cbfa:	429a      	cmp	r2, r3
 801cbfc:	d866      	bhi.n	801cccc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801cbfe:	697b      	ldr	r3, [r7, #20]
 801cc00:	61bb      	str	r3, [r7, #24]
 801cc02:	2308      	movs	r3, #8
 801cc04:	623b      	str	r3, [r7, #32]
 801cc06:	230b      	movs	r3, #11
 801cc08:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801cc0a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc0e:	009b      	lsls	r3, r3, #2
 801cc10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cc14:	e051      	b.n	801ccba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801cc16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc18:	2b7f      	cmp	r3, #127	@ 0x7f
 801cc1a:	d914      	bls.n	801cc46 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801cc1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc1e:	2100      	movs	r1, #0
 801cc20:	4618      	mov	r0, r3
 801cc22:	f001 f9bd 	bl	801dfa0 <ff_convert>
 801cc26:	4603      	mov	r3, r0
 801cc28:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801cc2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d004      	beq.n	801cc3a <create_name+0x246>
 801cc30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc32:	3b80      	subs	r3, #128	@ 0x80
 801cc34:	4a23      	ldr	r2, [pc, #140]	@ (801ccc4 <create_name+0x2d0>)
 801cc36:	5cd3      	ldrb	r3, [r2, r3]
 801cc38:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801cc3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc3e:	f043 0302 	orr.w	r3, r3, #2
 801cc42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801cc46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc48:	2b00      	cmp	r3, #0
 801cc4a:	d007      	beq.n	801cc5c <create_name+0x268>
 801cc4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc4e:	4619      	mov	r1, r3
 801cc50:	481d      	ldr	r0, [pc, #116]	@ (801ccc8 <create_name+0x2d4>)
 801cc52:	f7fe faac 	bl	801b1ae <chk_chr>
 801cc56:	4603      	mov	r3, r0
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	d008      	beq.n	801cc6e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801cc5c:	235f      	movs	r3, #95	@ 0x5f
 801cc5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801cc60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc64:	f043 0303 	orr.w	r3, r3, #3
 801cc68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cc6c:	e01b      	b.n	801cca6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801cc6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc70:	2b40      	cmp	r3, #64	@ 0x40
 801cc72:	d909      	bls.n	801cc88 <create_name+0x294>
 801cc74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc76:	2b5a      	cmp	r3, #90	@ 0x5a
 801cc78:	d806      	bhi.n	801cc88 <create_name+0x294>
					b |= 2;
 801cc7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc7e:	f043 0302 	orr.w	r3, r3, #2
 801cc82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cc86:	e00e      	b.n	801cca6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801cc88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc8a:	2b60      	cmp	r3, #96	@ 0x60
 801cc8c:	d90b      	bls.n	801cca6 <create_name+0x2b2>
 801cc8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc90:	2b7a      	cmp	r3, #122	@ 0x7a
 801cc92:	d808      	bhi.n	801cca6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801cc94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc98:	f043 0301 	orr.w	r3, r3, #1
 801cc9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cca0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cca2:	3b20      	subs	r3, #32
 801cca4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801cca6:	6a3b      	ldr	r3, [r7, #32]
 801cca8:	1c5a      	adds	r2, r3, #1
 801ccaa:	623a      	str	r2, [r7, #32]
 801ccac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ccae:	b2d1      	uxtb	r1, r2
 801ccb0:	687a      	ldr	r2, [r7, #4]
 801ccb2:	4413      	add	r3, r2
 801ccb4:	460a      	mov	r2, r1
 801ccb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801ccba:	e763      	b.n	801cb84 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801ccbc:	bf00      	nop
 801ccbe:	e006      	b.n	801ccce <create_name+0x2da>
 801ccc0:	0801ea0c 	.word	0x0801ea0c
 801ccc4:	0801eaa4 	.word	0x0801eaa4
 801ccc8:	0801ea18 	.word	0x0801ea18
			if (si > di) break;			/* No extension */
 801cccc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801ccd4:	2be5      	cmp	r3, #229	@ 0xe5
 801ccd6:	d103      	bne.n	801cce0 <create_name+0x2ec>
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	2205      	movs	r2, #5
 801ccdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801cce0:	69fb      	ldr	r3, [r7, #28]
 801cce2:	2b08      	cmp	r3, #8
 801cce4:	d104      	bne.n	801ccf0 <create_name+0x2fc>
 801cce6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ccea:	009b      	lsls	r3, r3, #2
 801ccec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801ccf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ccf4:	f003 030c 	and.w	r3, r3, #12
 801ccf8:	2b0c      	cmp	r3, #12
 801ccfa:	d005      	beq.n	801cd08 <create_name+0x314>
 801ccfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd00:	f003 0303 	and.w	r3, r3, #3
 801cd04:	2b03      	cmp	r3, #3
 801cd06:	d105      	bne.n	801cd14 <create_name+0x320>
 801cd08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd0c:	f043 0302 	orr.w	r3, r3, #2
 801cd10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801cd14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd18:	f003 0302 	and.w	r3, r3, #2
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d117      	bne.n	801cd50 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801cd20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd24:	f003 0303 	and.w	r3, r3, #3
 801cd28:	2b01      	cmp	r3, #1
 801cd2a:	d105      	bne.n	801cd38 <create_name+0x344>
 801cd2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd30:	f043 0310 	orr.w	r3, r3, #16
 801cd34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801cd38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd3c:	f003 030c 	and.w	r3, r3, #12
 801cd40:	2b04      	cmp	r3, #4
 801cd42:	d105      	bne.n	801cd50 <create_name+0x35c>
 801cd44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd48:	f043 0308 	orr.w	r3, r3, #8
 801cd4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801cd50:	687b      	ldr	r3, [r7, #4]
 801cd52:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801cd56:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801cd5a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801cd5c:	4618      	mov	r0, r3
 801cd5e:	3728      	adds	r7, #40	@ 0x28
 801cd60:	46bd      	mov	sp, r7
 801cd62:	bd80      	pop	{r7, pc}

0801cd64 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801cd64:	b580      	push	{r7, lr}
 801cd66:	b086      	sub	sp, #24
 801cd68:	af00      	add	r7, sp, #0
 801cd6a:	6078      	str	r0, [r7, #4]
 801cd6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801cd6e:	687b      	ldr	r3, [r7, #4]
 801cd70:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801cd72:	693b      	ldr	r3, [r7, #16]
 801cd74:	681b      	ldr	r3, [r3, #0]
 801cd76:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801cd78:	e002      	b.n	801cd80 <follow_path+0x1c>
 801cd7a:	683b      	ldr	r3, [r7, #0]
 801cd7c:	3301      	adds	r3, #1
 801cd7e:	603b      	str	r3, [r7, #0]
 801cd80:	683b      	ldr	r3, [r7, #0]
 801cd82:	781b      	ldrb	r3, [r3, #0]
 801cd84:	2b2f      	cmp	r3, #47	@ 0x2f
 801cd86:	d0f8      	beq.n	801cd7a <follow_path+0x16>
 801cd88:	683b      	ldr	r3, [r7, #0]
 801cd8a:	781b      	ldrb	r3, [r3, #0]
 801cd8c:	2b5c      	cmp	r3, #92	@ 0x5c
 801cd8e:	d0f4      	beq.n	801cd7a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801cd90:	693b      	ldr	r3, [r7, #16]
 801cd92:	2200      	movs	r2, #0
 801cd94:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801cd96:	683b      	ldr	r3, [r7, #0]
 801cd98:	781b      	ldrb	r3, [r3, #0]
 801cd9a:	2b1f      	cmp	r3, #31
 801cd9c:	d80a      	bhi.n	801cdb4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	2280      	movs	r2, #128	@ 0x80
 801cda2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801cda6:	2100      	movs	r1, #0
 801cda8:	6878      	ldr	r0, [r7, #4]
 801cdaa:	f7fe ffaa 	bl	801bd02 <dir_sdi>
 801cdae:	4603      	mov	r3, r0
 801cdb0:	75fb      	strb	r3, [r7, #23]
 801cdb2:	e048      	b.n	801ce46 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801cdb4:	463b      	mov	r3, r7
 801cdb6:	4619      	mov	r1, r3
 801cdb8:	6878      	ldr	r0, [r7, #4]
 801cdba:	f7ff fe1b 	bl	801c9f4 <create_name>
 801cdbe:	4603      	mov	r3, r0
 801cdc0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801cdc2:	7dfb      	ldrb	r3, [r7, #23]
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d139      	bne.n	801ce3c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801cdc8:	6878      	ldr	r0, [r7, #4]
 801cdca:	f7ff fc11 	bl	801c5f0 <dir_find>
 801cdce:	4603      	mov	r3, r0
 801cdd0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801cdd2:	687b      	ldr	r3, [r7, #4]
 801cdd4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801cdd8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801cdda:	7dfb      	ldrb	r3, [r7, #23]
 801cddc:	2b00      	cmp	r3, #0
 801cdde:	d00a      	beq.n	801cdf6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801cde0:	7dfb      	ldrb	r3, [r7, #23]
 801cde2:	2b04      	cmp	r3, #4
 801cde4:	d12c      	bne.n	801ce40 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801cde6:	7afb      	ldrb	r3, [r7, #11]
 801cde8:	f003 0304 	and.w	r3, r3, #4
 801cdec:	2b00      	cmp	r3, #0
 801cdee:	d127      	bne.n	801ce40 <follow_path+0xdc>
 801cdf0:	2305      	movs	r3, #5
 801cdf2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801cdf4:	e024      	b.n	801ce40 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801cdf6:	7afb      	ldrb	r3, [r7, #11]
 801cdf8:	f003 0304 	and.w	r3, r3, #4
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d121      	bne.n	801ce44 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801ce00:	693b      	ldr	r3, [r7, #16]
 801ce02:	799b      	ldrb	r3, [r3, #6]
 801ce04:	f003 0310 	and.w	r3, r3, #16
 801ce08:	2b00      	cmp	r3, #0
 801ce0a:	d102      	bne.n	801ce12 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801ce0c:	2305      	movs	r3, #5
 801ce0e:	75fb      	strb	r3, [r7, #23]
 801ce10:	e019      	b.n	801ce46 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801ce12:	68fb      	ldr	r3, [r7, #12]
 801ce14:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	695b      	ldr	r3, [r3, #20]
 801ce1c:	68fa      	ldr	r2, [r7, #12]
 801ce1e:	8992      	ldrh	r2, [r2, #12]
 801ce20:	fbb3 f0f2 	udiv	r0, r3, r2
 801ce24:	fb00 f202 	mul.w	r2, r0, r2
 801ce28:	1a9b      	subs	r3, r3, r2
 801ce2a:	440b      	add	r3, r1
 801ce2c:	4619      	mov	r1, r3
 801ce2e:	68f8      	ldr	r0, [r7, #12]
 801ce30:	f7ff f90d 	bl	801c04e <ld_clust>
 801ce34:	4602      	mov	r2, r0
 801ce36:	693b      	ldr	r3, [r7, #16]
 801ce38:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801ce3a:	e7bb      	b.n	801cdb4 <follow_path+0x50>
			if (res != FR_OK) break;
 801ce3c:	bf00      	nop
 801ce3e:	e002      	b.n	801ce46 <follow_path+0xe2>
				break;
 801ce40:	bf00      	nop
 801ce42:	e000      	b.n	801ce46 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801ce44:	bf00      	nop
			}
		}
	}

	return res;
 801ce46:	7dfb      	ldrb	r3, [r7, #23]
}
 801ce48:	4618      	mov	r0, r3
 801ce4a:	3718      	adds	r7, #24
 801ce4c:	46bd      	mov	sp, r7
 801ce4e:	bd80      	pop	{r7, pc}

0801ce50 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801ce50:	b480      	push	{r7}
 801ce52:	b087      	sub	sp, #28
 801ce54:	af00      	add	r7, sp, #0
 801ce56:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801ce58:	f04f 33ff 	mov.w	r3, #4294967295
 801ce5c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	681b      	ldr	r3, [r3, #0]
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	d031      	beq.n	801ceca <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	681b      	ldr	r3, [r3, #0]
 801ce6a:	617b      	str	r3, [r7, #20]
 801ce6c:	e002      	b.n	801ce74 <get_ldnumber+0x24>
 801ce6e:	697b      	ldr	r3, [r7, #20]
 801ce70:	3301      	adds	r3, #1
 801ce72:	617b      	str	r3, [r7, #20]
 801ce74:	697b      	ldr	r3, [r7, #20]
 801ce76:	781b      	ldrb	r3, [r3, #0]
 801ce78:	2b1f      	cmp	r3, #31
 801ce7a:	d903      	bls.n	801ce84 <get_ldnumber+0x34>
 801ce7c:	697b      	ldr	r3, [r7, #20]
 801ce7e:	781b      	ldrb	r3, [r3, #0]
 801ce80:	2b3a      	cmp	r3, #58	@ 0x3a
 801ce82:	d1f4      	bne.n	801ce6e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801ce84:	697b      	ldr	r3, [r7, #20]
 801ce86:	781b      	ldrb	r3, [r3, #0]
 801ce88:	2b3a      	cmp	r3, #58	@ 0x3a
 801ce8a:	d11c      	bne.n	801cec6 <get_ldnumber+0x76>
			tp = *path;
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	681b      	ldr	r3, [r3, #0]
 801ce90:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801ce92:	68fb      	ldr	r3, [r7, #12]
 801ce94:	1c5a      	adds	r2, r3, #1
 801ce96:	60fa      	str	r2, [r7, #12]
 801ce98:	781b      	ldrb	r3, [r3, #0]
 801ce9a:	3b30      	subs	r3, #48	@ 0x30
 801ce9c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801ce9e:	68bb      	ldr	r3, [r7, #8]
 801cea0:	2b09      	cmp	r3, #9
 801cea2:	d80e      	bhi.n	801cec2 <get_ldnumber+0x72>
 801cea4:	68fa      	ldr	r2, [r7, #12]
 801cea6:	697b      	ldr	r3, [r7, #20]
 801cea8:	429a      	cmp	r2, r3
 801ceaa:	d10a      	bne.n	801cec2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801ceac:	68bb      	ldr	r3, [r7, #8]
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	d107      	bne.n	801cec2 <get_ldnumber+0x72>
					vol = (int)i;
 801ceb2:	68bb      	ldr	r3, [r7, #8]
 801ceb4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801ceb6:	697b      	ldr	r3, [r7, #20]
 801ceb8:	3301      	adds	r3, #1
 801ceba:	617b      	str	r3, [r7, #20]
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	697a      	ldr	r2, [r7, #20]
 801cec0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801cec2:	693b      	ldr	r3, [r7, #16]
 801cec4:	e002      	b.n	801cecc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801cec6:	2300      	movs	r3, #0
 801cec8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801ceca:	693b      	ldr	r3, [r7, #16]
}
 801cecc:	4618      	mov	r0, r3
 801cece:	371c      	adds	r7, #28
 801ced0:	46bd      	mov	sp, r7
 801ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ced6:	4770      	bx	lr

0801ced8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801ced8:	b580      	push	{r7, lr}
 801ceda:	b082      	sub	sp, #8
 801cedc:	af00      	add	r7, sp, #0
 801cede:	6078      	str	r0, [r7, #4]
 801cee0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	2200      	movs	r2, #0
 801cee6:	70da      	strb	r2, [r3, #3]
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	f04f 32ff 	mov.w	r2, #4294967295
 801ceee:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801cef0:	6839      	ldr	r1, [r7, #0]
 801cef2:	6878      	ldr	r0, [r7, #4]
 801cef4:	f7fe fb26 	bl	801b544 <move_window>
 801cef8:	4603      	mov	r3, r0
 801cefa:	2b00      	cmp	r3, #0
 801cefc:	d001      	beq.n	801cf02 <check_fs+0x2a>
 801cefe:	2304      	movs	r3, #4
 801cf00:	e038      	b.n	801cf74 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801cf02:	687b      	ldr	r3, [r7, #4]
 801cf04:	3338      	adds	r3, #56	@ 0x38
 801cf06:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801cf0a:	4618      	mov	r0, r3
 801cf0c:	f7fe f86a 	bl	801afe4 <ld_word>
 801cf10:	4603      	mov	r3, r0
 801cf12:	461a      	mov	r2, r3
 801cf14:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801cf18:	429a      	cmp	r2, r3
 801cf1a:	d001      	beq.n	801cf20 <check_fs+0x48>
 801cf1c:	2303      	movs	r3, #3
 801cf1e:	e029      	b.n	801cf74 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cf26:	2be9      	cmp	r3, #233	@ 0xe9
 801cf28:	d009      	beq.n	801cf3e <check_fs+0x66>
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cf30:	2beb      	cmp	r3, #235	@ 0xeb
 801cf32:	d11e      	bne.n	801cf72 <check_fs+0x9a>
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801cf3a:	2b90      	cmp	r3, #144	@ 0x90
 801cf3c:	d119      	bne.n	801cf72 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801cf3e:	687b      	ldr	r3, [r7, #4]
 801cf40:	3338      	adds	r3, #56	@ 0x38
 801cf42:	3336      	adds	r3, #54	@ 0x36
 801cf44:	4618      	mov	r0, r3
 801cf46:	f7fe f865 	bl	801b014 <ld_dword>
 801cf4a:	4603      	mov	r3, r0
 801cf4c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801cf50:	4a0a      	ldr	r2, [pc, #40]	@ (801cf7c <check_fs+0xa4>)
 801cf52:	4293      	cmp	r3, r2
 801cf54:	d101      	bne.n	801cf5a <check_fs+0x82>
 801cf56:	2300      	movs	r3, #0
 801cf58:	e00c      	b.n	801cf74 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801cf5a:	687b      	ldr	r3, [r7, #4]
 801cf5c:	3338      	adds	r3, #56	@ 0x38
 801cf5e:	3352      	adds	r3, #82	@ 0x52
 801cf60:	4618      	mov	r0, r3
 801cf62:	f7fe f857 	bl	801b014 <ld_dword>
 801cf66:	4603      	mov	r3, r0
 801cf68:	4a05      	ldr	r2, [pc, #20]	@ (801cf80 <check_fs+0xa8>)
 801cf6a:	4293      	cmp	r3, r2
 801cf6c:	d101      	bne.n	801cf72 <check_fs+0x9a>
 801cf6e:	2300      	movs	r3, #0
 801cf70:	e000      	b.n	801cf74 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801cf72:	2302      	movs	r3, #2
}
 801cf74:	4618      	mov	r0, r3
 801cf76:	3708      	adds	r7, #8
 801cf78:	46bd      	mov	sp, r7
 801cf7a:	bd80      	pop	{r7, pc}
 801cf7c:	00544146 	.word	0x00544146
 801cf80:	33544146 	.word	0x33544146

0801cf84 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801cf84:	b580      	push	{r7, lr}
 801cf86:	b096      	sub	sp, #88	@ 0x58
 801cf88:	af00      	add	r7, sp, #0
 801cf8a:	60f8      	str	r0, [r7, #12]
 801cf8c:	60b9      	str	r1, [r7, #8]
 801cf8e:	4613      	mov	r3, r2
 801cf90:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801cf92:	68bb      	ldr	r3, [r7, #8]
 801cf94:	2200      	movs	r2, #0
 801cf96:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801cf98:	68f8      	ldr	r0, [r7, #12]
 801cf9a:	f7ff ff59 	bl	801ce50 <get_ldnumber>
 801cf9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801cfa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	da01      	bge.n	801cfaa <find_volume+0x26>
 801cfa6:	230b      	movs	r3, #11
 801cfa8:	e265      	b.n	801d476 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801cfaa:	4a9f      	ldr	r2, [pc, #636]	@ (801d228 <find_volume+0x2a4>)
 801cfac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cfae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cfb2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801cfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfb6:	2b00      	cmp	r3, #0
 801cfb8:	d101      	bne.n	801cfbe <find_volume+0x3a>
 801cfba:	230c      	movs	r3, #12
 801cfbc:	e25b      	b.n	801d476 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801cfbe:	68bb      	ldr	r3, [r7, #8]
 801cfc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cfc2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801cfc4:	79fb      	ldrb	r3, [r7, #7]
 801cfc6:	f023 0301 	bic.w	r3, r3, #1
 801cfca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801cfcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfce:	781b      	ldrb	r3, [r3, #0]
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	d01a      	beq.n	801d00a <find_volume+0x86>
		stat = disk_status(fs->drv);
 801cfd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfd6:	785b      	ldrb	r3, [r3, #1]
 801cfd8:	4618      	mov	r0, r3
 801cfda:	f7fd ff63 	bl	801aea4 <disk_status>
 801cfde:	4603      	mov	r3, r0
 801cfe0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801cfe4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cfe8:	f003 0301 	and.w	r3, r3, #1
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	d10c      	bne.n	801d00a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801cff0:	79fb      	ldrb	r3, [r7, #7]
 801cff2:	2b00      	cmp	r3, #0
 801cff4:	d007      	beq.n	801d006 <find_volume+0x82>
 801cff6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cffa:	f003 0304 	and.w	r3, r3, #4
 801cffe:	2b00      	cmp	r3, #0
 801d000:	d001      	beq.n	801d006 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801d002:	230a      	movs	r3, #10
 801d004:	e237      	b.n	801d476 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801d006:	2300      	movs	r3, #0
 801d008:	e235      	b.n	801d476 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801d00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d00c:	2200      	movs	r2, #0
 801d00e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801d010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d012:	b2da      	uxtb	r2, r3
 801d014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d016:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801d018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d01a:	785b      	ldrb	r3, [r3, #1]
 801d01c:	4618      	mov	r0, r3
 801d01e:	f7fd ff5b 	bl	801aed8 <disk_initialize>
 801d022:	4603      	mov	r3, r0
 801d024:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801d028:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d02c:	f003 0301 	and.w	r3, r3, #1
 801d030:	2b00      	cmp	r3, #0
 801d032:	d001      	beq.n	801d038 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801d034:	2303      	movs	r3, #3
 801d036:	e21e      	b.n	801d476 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801d038:	79fb      	ldrb	r3, [r7, #7]
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	d007      	beq.n	801d04e <find_volume+0xca>
 801d03e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d042:	f003 0304 	and.w	r3, r3, #4
 801d046:	2b00      	cmp	r3, #0
 801d048:	d001      	beq.n	801d04e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801d04a:	230a      	movs	r3, #10
 801d04c:	e213      	b.n	801d476 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801d04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d050:	7858      	ldrb	r0, [r3, #1]
 801d052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d054:	330c      	adds	r3, #12
 801d056:	461a      	mov	r2, r3
 801d058:	2102      	movs	r1, #2
 801d05a:	f7fd ffa5 	bl	801afa8 <disk_ioctl>
 801d05e:	4603      	mov	r3, r0
 801d060:	2b00      	cmp	r3, #0
 801d062:	d001      	beq.n	801d068 <find_volume+0xe4>
 801d064:	2301      	movs	r3, #1
 801d066:	e206      	b.n	801d476 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801d068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d06a:	899b      	ldrh	r3, [r3, #12]
 801d06c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d070:	d80d      	bhi.n	801d08e <find_volume+0x10a>
 801d072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d074:	899b      	ldrh	r3, [r3, #12]
 801d076:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d07a:	d308      	bcc.n	801d08e <find_volume+0x10a>
 801d07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d07e:	899b      	ldrh	r3, [r3, #12]
 801d080:	461a      	mov	r2, r3
 801d082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d084:	899b      	ldrh	r3, [r3, #12]
 801d086:	3b01      	subs	r3, #1
 801d088:	4013      	ands	r3, r2
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	d001      	beq.n	801d092 <find_volume+0x10e>
 801d08e:	2301      	movs	r3, #1
 801d090:	e1f1      	b.n	801d476 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801d092:	2300      	movs	r3, #0
 801d094:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801d096:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d098:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d09a:	f7ff ff1d 	bl	801ced8 <check_fs>
 801d09e:	4603      	mov	r3, r0
 801d0a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801d0a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d0a8:	2b02      	cmp	r3, #2
 801d0aa:	d149      	bne.n	801d140 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d0ac:	2300      	movs	r3, #0
 801d0ae:	643b      	str	r3, [r7, #64]	@ 0x40
 801d0b0:	e01e      	b.n	801d0f0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801d0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0b4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801d0b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0ba:	011b      	lsls	r3, r3, #4
 801d0bc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801d0c0:	4413      	add	r3, r2
 801d0c2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801d0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0c6:	3304      	adds	r3, #4
 801d0c8:	781b      	ldrb	r3, [r3, #0]
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	d006      	beq.n	801d0dc <find_volume+0x158>
 801d0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0d0:	3308      	adds	r3, #8
 801d0d2:	4618      	mov	r0, r3
 801d0d4:	f7fd ff9e 	bl	801b014 <ld_dword>
 801d0d8:	4602      	mov	r2, r0
 801d0da:	e000      	b.n	801d0de <find_volume+0x15a>
 801d0dc:	2200      	movs	r2, #0
 801d0de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0e0:	009b      	lsls	r3, r3, #2
 801d0e2:	3358      	adds	r3, #88	@ 0x58
 801d0e4:	443b      	add	r3, r7
 801d0e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d0ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0ec:	3301      	adds	r3, #1
 801d0ee:	643b      	str	r3, [r7, #64]	@ 0x40
 801d0f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0f2:	2b03      	cmp	r3, #3
 801d0f4:	d9dd      	bls.n	801d0b2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801d0f6:	2300      	movs	r3, #0
 801d0f8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801d0fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	d002      	beq.n	801d106 <find_volume+0x182>
 801d100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d102:	3b01      	subs	r3, #1
 801d104:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801d106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d108:	009b      	lsls	r3, r3, #2
 801d10a:	3358      	adds	r3, #88	@ 0x58
 801d10c:	443b      	add	r3, r7
 801d10e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801d112:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801d114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d116:	2b00      	cmp	r3, #0
 801d118:	d005      	beq.n	801d126 <find_volume+0x1a2>
 801d11a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d11c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d11e:	f7ff fedb 	bl	801ced8 <check_fs>
 801d122:	4603      	mov	r3, r0
 801d124:	e000      	b.n	801d128 <find_volume+0x1a4>
 801d126:	2303      	movs	r3, #3
 801d128:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801d12c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d130:	2b01      	cmp	r3, #1
 801d132:	d905      	bls.n	801d140 <find_volume+0x1bc>
 801d134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d136:	3301      	adds	r3, #1
 801d138:	643b      	str	r3, [r7, #64]	@ 0x40
 801d13a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d13c:	2b03      	cmp	r3, #3
 801d13e:	d9e2      	bls.n	801d106 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801d140:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d144:	2b04      	cmp	r3, #4
 801d146:	d101      	bne.n	801d14c <find_volume+0x1c8>
 801d148:	2301      	movs	r3, #1
 801d14a:	e194      	b.n	801d476 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801d14c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d150:	2b01      	cmp	r3, #1
 801d152:	d901      	bls.n	801d158 <find_volume+0x1d4>
 801d154:	230d      	movs	r3, #13
 801d156:	e18e      	b.n	801d476 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801d158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d15a:	3338      	adds	r3, #56	@ 0x38
 801d15c:	330b      	adds	r3, #11
 801d15e:	4618      	mov	r0, r3
 801d160:	f7fd ff40 	bl	801afe4 <ld_word>
 801d164:	4603      	mov	r3, r0
 801d166:	461a      	mov	r2, r3
 801d168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d16a:	899b      	ldrh	r3, [r3, #12]
 801d16c:	429a      	cmp	r2, r3
 801d16e:	d001      	beq.n	801d174 <find_volume+0x1f0>
 801d170:	230d      	movs	r3, #13
 801d172:	e180      	b.n	801d476 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801d174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d176:	3338      	adds	r3, #56	@ 0x38
 801d178:	3316      	adds	r3, #22
 801d17a:	4618      	mov	r0, r3
 801d17c:	f7fd ff32 	bl	801afe4 <ld_word>
 801d180:	4603      	mov	r3, r0
 801d182:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801d184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d186:	2b00      	cmp	r3, #0
 801d188:	d106      	bne.n	801d198 <find_volume+0x214>
 801d18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d18c:	3338      	adds	r3, #56	@ 0x38
 801d18e:	3324      	adds	r3, #36	@ 0x24
 801d190:	4618      	mov	r0, r3
 801d192:	f7fd ff3f 	bl	801b014 <ld_dword>
 801d196:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801d198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d19a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d19c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801d19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1a0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801d1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801d1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1aa:	789b      	ldrb	r3, [r3, #2]
 801d1ac:	2b01      	cmp	r3, #1
 801d1ae:	d005      	beq.n	801d1bc <find_volume+0x238>
 801d1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1b2:	789b      	ldrb	r3, [r3, #2]
 801d1b4:	2b02      	cmp	r3, #2
 801d1b6:	d001      	beq.n	801d1bc <find_volume+0x238>
 801d1b8:	230d      	movs	r3, #13
 801d1ba:	e15c      	b.n	801d476 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801d1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1be:	789b      	ldrb	r3, [r3, #2]
 801d1c0:	461a      	mov	r2, r3
 801d1c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d1c4:	fb02 f303 	mul.w	r3, r2, r3
 801d1c8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801d1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801d1d0:	461a      	mov	r2, r3
 801d1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801d1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1d8:	895b      	ldrh	r3, [r3, #10]
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d008      	beq.n	801d1f0 <find_volume+0x26c>
 801d1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1e0:	895b      	ldrh	r3, [r3, #10]
 801d1e2:	461a      	mov	r2, r3
 801d1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1e6:	895b      	ldrh	r3, [r3, #10]
 801d1e8:	3b01      	subs	r3, #1
 801d1ea:	4013      	ands	r3, r2
 801d1ec:	2b00      	cmp	r3, #0
 801d1ee:	d001      	beq.n	801d1f4 <find_volume+0x270>
 801d1f0:	230d      	movs	r3, #13
 801d1f2:	e140      	b.n	801d476 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801d1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1f6:	3338      	adds	r3, #56	@ 0x38
 801d1f8:	3311      	adds	r3, #17
 801d1fa:	4618      	mov	r0, r3
 801d1fc:	f7fd fef2 	bl	801afe4 <ld_word>
 801d200:	4603      	mov	r3, r0
 801d202:	461a      	mov	r2, r3
 801d204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d206:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801d208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d20a:	891b      	ldrh	r3, [r3, #8]
 801d20c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d20e:	8992      	ldrh	r2, [r2, #12]
 801d210:	0952      	lsrs	r2, r2, #5
 801d212:	b292      	uxth	r2, r2
 801d214:	fbb3 f1f2 	udiv	r1, r3, r2
 801d218:	fb01 f202 	mul.w	r2, r1, r2
 801d21c:	1a9b      	subs	r3, r3, r2
 801d21e:	b29b      	uxth	r3, r3
 801d220:	2b00      	cmp	r3, #0
 801d222:	d003      	beq.n	801d22c <find_volume+0x2a8>
 801d224:	230d      	movs	r3, #13
 801d226:	e126      	b.n	801d476 <find_volume+0x4f2>
 801d228:	24000550 	.word	0x24000550

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801d22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d22e:	3338      	adds	r3, #56	@ 0x38
 801d230:	3313      	adds	r3, #19
 801d232:	4618      	mov	r0, r3
 801d234:	f7fd fed6 	bl	801afe4 <ld_word>
 801d238:	4603      	mov	r3, r0
 801d23a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801d23c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d106      	bne.n	801d250 <find_volume+0x2cc>
 801d242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d244:	3338      	adds	r3, #56	@ 0x38
 801d246:	3320      	adds	r3, #32
 801d248:	4618      	mov	r0, r3
 801d24a:	f7fd fee3 	bl	801b014 <ld_dword>
 801d24e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801d250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d252:	3338      	adds	r3, #56	@ 0x38
 801d254:	330e      	adds	r3, #14
 801d256:	4618      	mov	r0, r3
 801d258:	f7fd fec4 	bl	801afe4 <ld_word>
 801d25c:	4603      	mov	r3, r0
 801d25e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801d260:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d262:	2b00      	cmp	r3, #0
 801d264:	d101      	bne.n	801d26a <find_volume+0x2e6>
 801d266:	230d      	movs	r3, #13
 801d268:	e105      	b.n	801d476 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801d26a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d26c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d26e:	4413      	add	r3, r2
 801d270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d272:	8911      	ldrh	r1, [r2, #8]
 801d274:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d276:	8992      	ldrh	r2, [r2, #12]
 801d278:	0952      	lsrs	r2, r2, #5
 801d27a:	b292      	uxth	r2, r2
 801d27c:	fbb1 f2f2 	udiv	r2, r1, r2
 801d280:	b292      	uxth	r2, r2
 801d282:	4413      	add	r3, r2
 801d284:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801d286:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d28a:	429a      	cmp	r2, r3
 801d28c:	d201      	bcs.n	801d292 <find_volume+0x30e>
 801d28e:	230d      	movs	r3, #13
 801d290:	e0f1      	b.n	801d476 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801d292:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d296:	1ad3      	subs	r3, r2, r3
 801d298:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d29a:	8952      	ldrh	r2, [r2, #10]
 801d29c:	fbb3 f3f2 	udiv	r3, r3, r2
 801d2a0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801d2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2a4:	2b00      	cmp	r3, #0
 801d2a6:	d101      	bne.n	801d2ac <find_volume+0x328>
 801d2a8:	230d      	movs	r3, #13
 801d2aa:	e0e4      	b.n	801d476 <find_volume+0x4f2>
		fmt = FS_FAT32;
 801d2ac:	2303      	movs	r3, #3
 801d2ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801d2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2b4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801d2b8:	4293      	cmp	r3, r2
 801d2ba:	d802      	bhi.n	801d2c2 <find_volume+0x33e>
 801d2bc:	2302      	movs	r3, #2
 801d2be:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801d2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2c4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801d2c8:	4293      	cmp	r3, r2
 801d2ca:	d802      	bhi.n	801d2d2 <find_volume+0x34e>
 801d2cc:	2301      	movs	r3, #1
 801d2ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801d2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2d4:	1c9a      	adds	r2, r3, #2
 801d2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2d8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801d2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d2de:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801d2e0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d2e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d2e4:	441a      	add	r2, r3
 801d2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2e8:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801d2ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d2ee:	441a      	add	r2, r3
 801d2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2f2:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801d2f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d2f8:	2b03      	cmp	r3, #3
 801d2fa:	d11e      	bne.n	801d33a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801d2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2fe:	3338      	adds	r3, #56	@ 0x38
 801d300:	332a      	adds	r3, #42	@ 0x2a
 801d302:	4618      	mov	r0, r3
 801d304:	f7fd fe6e 	bl	801afe4 <ld_word>
 801d308:	4603      	mov	r3, r0
 801d30a:	2b00      	cmp	r3, #0
 801d30c:	d001      	beq.n	801d312 <find_volume+0x38e>
 801d30e:	230d      	movs	r3, #13
 801d310:	e0b1      	b.n	801d476 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801d312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d314:	891b      	ldrh	r3, [r3, #8]
 801d316:	2b00      	cmp	r3, #0
 801d318:	d001      	beq.n	801d31e <find_volume+0x39a>
 801d31a:	230d      	movs	r3, #13
 801d31c:	e0ab      	b.n	801d476 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801d31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d320:	3338      	adds	r3, #56	@ 0x38
 801d322:	332c      	adds	r3, #44	@ 0x2c
 801d324:	4618      	mov	r0, r3
 801d326:	f7fd fe75 	bl	801b014 <ld_dword>
 801d32a:	4602      	mov	r2, r0
 801d32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d32e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801d330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d332:	69db      	ldr	r3, [r3, #28]
 801d334:	009b      	lsls	r3, r3, #2
 801d336:	647b      	str	r3, [r7, #68]	@ 0x44
 801d338:	e01f      	b.n	801d37a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801d33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d33c:	891b      	ldrh	r3, [r3, #8]
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d101      	bne.n	801d346 <find_volume+0x3c2>
 801d342:	230d      	movs	r3, #13
 801d344:	e097      	b.n	801d476 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801d346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d348:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d34a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d34c:	441a      	add	r2, r3
 801d34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d350:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801d352:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d356:	2b02      	cmp	r3, #2
 801d358:	d103      	bne.n	801d362 <find_volume+0x3de>
 801d35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d35c:	69db      	ldr	r3, [r3, #28]
 801d35e:	005b      	lsls	r3, r3, #1
 801d360:	e00a      	b.n	801d378 <find_volume+0x3f4>
 801d362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d364:	69da      	ldr	r2, [r3, #28]
 801d366:	4613      	mov	r3, r2
 801d368:	005b      	lsls	r3, r3, #1
 801d36a:	4413      	add	r3, r2
 801d36c:	085a      	lsrs	r2, r3, #1
 801d36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d370:	69db      	ldr	r3, [r3, #28]
 801d372:	f003 0301 	and.w	r3, r3, #1
 801d376:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801d378:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801d37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d37c:	6a1a      	ldr	r2, [r3, #32]
 801d37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d380:	899b      	ldrh	r3, [r3, #12]
 801d382:	4619      	mov	r1, r3
 801d384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d386:	440b      	add	r3, r1
 801d388:	3b01      	subs	r3, #1
 801d38a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d38c:	8989      	ldrh	r1, [r1, #12]
 801d38e:	fbb3 f3f1 	udiv	r3, r3, r1
 801d392:	429a      	cmp	r2, r3
 801d394:	d201      	bcs.n	801d39a <find_volume+0x416>
 801d396:	230d      	movs	r3, #13
 801d398:	e06d      	b.n	801d476 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801d39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d39c:	f04f 32ff 	mov.w	r2, #4294967295
 801d3a0:	619a      	str	r2, [r3, #24]
 801d3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3a4:	699a      	ldr	r2, [r3, #24]
 801d3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3a8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801d3aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3ac:	2280      	movs	r2, #128	@ 0x80
 801d3ae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801d3b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d3b4:	2b03      	cmp	r3, #3
 801d3b6:	d149      	bne.n	801d44c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801d3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3ba:	3338      	adds	r3, #56	@ 0x38
 801d3bc:	3330      	adds	r3, #48	@ 0x30
 801d3be:	4618      	mov	r0, r3
 801d3c0:	f7fd fe10 	bl	801afe4 <ld_word>
 801d3c4:	4603      	mov	r3, r0
 801d3c6:	2b01      	cmp	r3, #1
 801d3c8:	d140      	bne.n	801d44c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801d3ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d3cc:	3301      	adds	r3, #1
 801d3ce:	4619      	mov	r1, r3
 801d3d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d3d2:	f7fe f8b7 	bl	801b544 <move_window>
 801d3d6:	4603      	mov	r3, r0
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	d137      	bne.n	801d44c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801d3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3de:	2200      	movs	r2, #0
 801d3e0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801d3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3e4:	3338      	adds	r3, #56	@ 0x38
 801d3e6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801d3ea:	4618      	mov	r0, r3
 801d3ec:	f7fd fdfa 	bl	801afe4 <ld_word>
 801d3f0:	4603      	mov	r3, r0
 801d3f2:	461a      	mov	r2, r3
 801d3f4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801d3f8:	429a      	cmp	r2, r3
 801d3fa:	d127      	bne.n	801d44c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801d3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3fe:	3338      	adds	r3, #56	@ 0x38
 801d400:	4618      	mov	r0, r3
 801d402:	f7fd fe07 	bl	801b014 <ld_dword>
 801d406:	4603      	mov	r3, r0
 801d408:	4a1d      	ldr	r2, [pc, #116]	@ (801d480 <find_volume+0x4fc>)
 801d40a:	4293      	cmp	r3, r2
 801d40c:	d11e      	bne.n	801d44c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801d40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d410:	3338      	adds	r3, #56	@ 0x38
 801d412:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801d416:	4618      	mov	r0, r3
 801d418:	f7fd fdfc 	bl	801b014 <ld_dword>
 801d41c:	4603      	mov	r3, r0
 801d41e:	4a19      	ldr	r2, [pc, #100]	@ (801d484 <find_volume+0x500>)
 801d420:	4293      	cmp	r3, r2
 801d422:	d113      	bne.n	801d44c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801d424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d426:	3338      	adds	r3, #56	@ 0x38
 801d428:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801d42c:	4618      	mov	r0, r3
 801d42e:	f7fd fdf1 	bl	801b014 <ld_dword>
 801d432:	4602      	mov	r2, r0
 801d434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d436:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801d438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d43a:	3338      	adds	r3, #56	@ 0x38
 801d43c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801d440:	4618      	mov	r0, r3
 801d442:	f7fd fde7 	bl	801b014 <ld_dword>
 801d446:	4602      	mov	r2, r0
 801d448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d44a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801d44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d44e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801d452:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801d454:	4b0c      	ldr	r3, [pc, #48]	@ (801d488 <find_volume+0x504>)
 801d456:	881b      	ldrh	r3, [r3, #0]
 801d458:	3301      	adds	r3, #1
 801d45a:	b29a      	uxth	r2, r3
 801d45c:	4b0a      	ldr	r3, [pc, #40]	@ (801d488 <find_volume+0x504>)
 801d45e:	801a      	strh	r2, [r3, #0]
 801d460:	4b09      	ldr	r3, [pc, #36]	@ (801d488 <find_volume+0x504>)
 801d462:	881a      	ldrh	r2, [r3, #0]
 801d464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d466:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801d468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d46a:	4a08      	ldr	r2, [pc, #32]	@ (801d48c <find_volume+0x508>)
 801d46c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801d46e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d470:	f7fe f800 	bl	801b474 <clear_lock>
#endif
	return FR_OK;
 801d474:	2300      	movs	r3, #0
}
 801d476:	4618      	mov	r0, r3
 801d478:	3758      	adds	r7, #88	@ 0x58
 801d47a:	46bd      	mov	sp, r7
 801d47c:	bd80      	pop	{r7, pc}
 801d47e:	bf00      	nop
 801d480:	41615252 	.word	0x41615252
 801d484:	61417272 	.word	0x61417272
 801d488:	24000554 	.word	0x24000554
 801d48c:	24000568 	.word	0x24000568

0801d490 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801d490:	b580      	push	{r7, lr}
 801d492:	b084      	sub	sp, #16
 801d494:	af00      	add	r7, sp, #0
 801d496:	6078      	str	r0, [r7, #4]
 801d498:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801d49a:	2309      	movs	r3, #9
 801d49c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d01c      	beq.n	801d4de <validate+0x4e>
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	2b00      	cmp	r3, #0
 801d4aa:	d018      	beq.n	801d4de <validate+0x4e>
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	681b      	ldr	r3, [r3, #0]
 801d4b0:	781b      	ldrb	r3, [r3, #0]
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	d013      	beq.n	801d4de <validate+0x4e>
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	889a      	ldrh	r2, [r3, #4]
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	681b      	ldr	r3, [r3, #0]
 801d4be:	88db      	ldrh	r3, [r3, #6]
 801d4c0:	429a      	cmp	r2, r3
 801d4c2:	d10c      	bne.n	801d4de <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	681b      	ldr	r3, [r3, #0]
 801d4c8:	785b      	ldrb	r3, [r3, #1]
 801d4ca:	4618      	mov	r0, r3
 801d4cc:	f7fd fcea 	bl	801aea4 <disk_status>
 801d4d0:	4603      	mov	r3, r0
 801d4d2:	f003 0301 	and.w	r3, r3, #1
 801d4d6:	2b00      	cmp	r3, #0
 801d4d8:	d101      	bne.n	801d4de <validate+0x4e>
			res = FR_OK;
 801d4da:	2300      	movs	r3, #0
 801d4dc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801d4de:	7bfb      	ldrb	r3, [r7, #15]
 801d4e0:	2b00      	cmp	r3, #0
 801d4e2:	d102      	bne.n	801d4ea <validate+0x5a>
 801d4e4:	687b      	ldr	r3, [r7, #4]
 801d4e6:	681b      	ldr	r3, [r3, #0]
 801d4e8:	e000      	b.n	801d4ec <validate+0x5c>
 801d4ea:	2300      	movs	r3, #0
 801d4ec:	683a      	ldr	r2, [r7, #0]
 801d4ee:	6013      	str	r3, [r2, #0]
	return res;
 801d4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 801d4f2:	4618      	mov	r0, r3
 801d4f4:	3710      	adds	r7, #16
 801d4f6:	46bd      	mov	sp, r7
 801d4f8:	bd80      	pop	{r7, pc}
	...

0801d4fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801d4fc:	b580      	push	{r7, lr}
 801d4fe:	b088      	sub	sp, #32
 801d500:	af00      	add	r7, sp, #0
 801d502:	60f8      	str	r0, [r7, #12]
 801d504:	60b9      	str	r1, [r7, #8]
 801d506:	4613      	mov	r3, r2
 801d508:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801d50a:	68bb      	ldr	r3, [r7, #8]
 801d50c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801d50e:	f107 0310 	add.w	r3, r7, #16
 801d512:	4618      	mov	r0, r3
 801d514:	f7ff fc9c 	bl	801ce50 <get_ldnumber>
 801d518:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801d51a:	69fb      	ldr	r3, [r7, #28]
 801d51c:	2b00      	cmp	r3, #0
 801d51e:	da01      	bge.n	801d524 <f_mount+0x28>
 801d520:	230b      	movs	r3, #11
 801d522:	e02b      	b.n	801d57c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801d524:	4a17      	ldr	r2, [pc, #92]	@ (801d584 <f_mount+0x88>)
 801d526:	69fb      	ldr	r3, [r7, #28]
 801d528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d52c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801d52e:	69bb      	ldr	r3, [r7, #24]
 801d530:	2b00      	cmp	r3, #0
 801d532:	d005      	beq.n	801d540 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801d534:	69b8      	ldr	r0, [r7, #24]
 801d536:	f7fd ff9d 	bl	801b474 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801d53a:	69bb      	ldr	r3, [r7, #24]
 801d53c:	2200      	movs	r2, #0
 801d53e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801d540:	68fb      	ldr	r3, [r7, #12]
 801d542:	2b00      	cmp	r3, #0
 801d544:	d002      	beq.n	801d54c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801d546:	68fb      	ldr	r3, [r7, #12]
 801d548:	2200      	movs	r2, #0
 801d54a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801d54c:	68fa      	ldr	r2, [r7, #12]
 801d54e:	490d      	ldr	r1, [pc, #52]	@ (801d584 <f_mount+0x88>)
 801d550:	69fb      	ldr	r3, [r7, #28]
 801d552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801d556:	68fb      	ldr	r3, [r7, #12]
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d002      	beq.n	801d562 <f_mount+0x66>
 801d55c:	79fb      	ldrb	r3, [r7, #7]
 801d55e:	2b01      	cmp	r3, #1
 801d560:	d001      	beq.n	801d566 <f_mount+0x6a>
 801d562:	2300      	movs	r3, #0
 801d564:	e00a      	b.n	801d57c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801d566:	f107 010c 	add.w	r1, r7, #12
 801d56a:	f107 0308 	add.w	r3, r7, #8
 801d56e:	2200      	movs	r2, #0
 801d570:	4618      	mov	r0, r3
 801d572:	f7ff fd07 	bl	801cf84 <find_volume>
 801d576:	4603      	mov	r3, r0
 801d578:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801d57a:	7dfb      	ldrb	r3, [r7, #23]
}
 801d57c:	4618      	mov	r0, r3
 801d57e:	3720      	adds	r7, #32
 801d580:	46bd      	mov	sp, r7
 801d582:	bd80      	pop	{r7, pc}
 801d584:	24000550 	.word	0x24000550

0801d588 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801d588:	b580      	push	{r7, lr}
 801d58a:	b09a      	sub	sp, #104	@ 0x68
 801d58c:	af00      	add	r7, sp, #0
 801d58e:	60f8      	str	r0, [r7, #12]
 801d590:	60b9      	str	r1, [r7, #8]
 801d592:	4613      	mov	r3, r2
 801d594:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801d596:	68fb      	ldr	r3, [r7, #12]
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d101      	bne.n	801d5a0 <f_open+0x18>
 801d59c:	2309      	movs	r3, #9
 801d59e:	e1b7      	b.n	801d910 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801d5a0:	79fb      	ldrb	r3, [r7, #7]
 801d5a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d5a6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801d5a8:	79fa      	ldrb	r2, [r7, #7]
 801d5aa:	f107 0114 	add.w	r1, r7, #20
 801d5ae:	f107 0308 	add.w	r3, r7, #8
 801d5b2:	4618      	mov	r0, r3
 801d5b4:	f7ff fce6 	bl	801cf84 <find_volume>
 801d5b8:	4603      	mov	r3, r0
 801d5ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801d5be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	f040 819b 	bne.w	801d8fe <f_open+0x376>
		dj.obj.fs = fs;
 801d5c8:	697b      	ldr	r3, [r7, #20]
 801d5ca:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d5cc:	68ba      	ldr	r2, [r7, #8]
 801d5ce:	f107 0318 	add.w	r3, r7, #24
 801d5d2:	4611      	mov	r1, r2
 801d5d4:	4618      	mov	r0, r3
 801d5d6:	f7ff fbc5 	bl	801cd64 <follow_path>
 801d5da:	4603      	mov	r3, r0
 801d5dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801d5e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d5e4:	2b00      	cmp	r3, #0
 801d5e6:	d118      	bne.n	801d61a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801d5e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801d5ec:	b25b      	sxtb	r3, r3
 801d5ee:	2b00      	cmp	r3, #0
 801d5f0:	da03      	bge.n	801d5fa <f_open+0x72>
				res = FR_INVALID_NAME;
 801d5f2:	2306      	movs	r3, #6
 801d5f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d5f8:	e00f      	b.n	801d61a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d5fa:	79fb      	ldrb	r3, [r7, #7]
 801d5fc:	2b01      	cmp	r3, #1
 801d5fe:	bf8c      	ite	hi
 801d600:	2301      	movhi	r3, #1
 801d602:	2300      	movls	r3, #0
 801d604:	b2db      	uxtb	r3, r3
 801d606:	461a      	mov	r2, r3
 801d608:	f107 0318 	add.w	r3, r7, #24
 801d60c:	4611      	mov	r1, r2
 801d60e:	4618      	mov	r0, r3
 801d610:	f7fd fde8 	bl	801b1e4 <chk_lock>
 801d614:	4603      	mov	r3, r0
 801d616:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801d61a:	79fb      	ldrb	r3, [r7, #7]
 801d61c:	f003 031c 	and.w	r3, r3, #28
 801d620:	2b00      	cmp	r3, #0
 801d622:	d07f      	beq.n	801d724 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801d624:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d628:	2b00      	cmp	r3, #0
 801d62a:	d017      	beq.n	801d65c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801d62c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d630:	2b04      	cmp	r3, #4
 801d632:	d10e      	bne.n	801d652 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801d634:	f7fd fe32 	bl	801b29c <enq_lock>
 801d638:	4603      	mov	r3, r0
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	d006      	beq.n	801d64c <f_open+0xc4>
 801d63e:	f107 0318 	add.w	r3, r7, #24
 801d642:	4618      	mov	r0, r3
 801d644:	f7ff f894 	bl	801c770 <dir_register>
 801d648:	4603      	mov	r3, r0
 801d64a:	e000      	b.n	801d64e <f_open+0xc6>
 801d64c:	2312      	movs	r3, #18
 801d64e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801d652:	79fb      	ldrb	r3, [r7, #7]
 801d654:	f043 0308 	orr.w	r3, r3, #8
 801d658:	71fb      	strb	r3, [r7, #7]
 801d65a:	e010      	b.n	801d67e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801d65c:	7fbb      	ldrb	r3, [r7, #30]
 801d65e:	f003 0311 	and.w	r3, r3, #17
 801d662:	2b00      	cmp	r3, #0
 801d664:	d003      	beq.n	801d66e <f_open+0xe6>
					res = FR_DENIED;
 801d666:	2307      	movs	r3, #7
 801d668:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d66c:	e007      	b.n	801d67e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801d66e:	79fb      	ldrb	r3, [r7, #7]
 801d670:	f003 0304 	and.w	r3, r3, #4
 801d674:	2b00      	cmp	r3, #0
 801d676:	d002      	beq.n	801d67e <f_open+0xf6>
 801d678:	2308      	movs	r3, #8
 801d67a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801d67e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d682:	2b00      	cmp	r3, #0
 801d684:	d168      	bne.n	801d758 <f_open+0x1d0>
 801d686:	79fb      	ldrb	r3, [r7, #7]
 801d688:	f003 0308 	and.w	r3, r3, #8
 801d68c:	2b00      	cmp	r3, #0
 801d68e:	d063      	beq.n	801d758 <f_open+0x1d0>
				dw = GET_FATTIME();
 801d690:	f7fd fbaa 	bl	801ade8 <get_fattime>
 801d694:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801d696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d698:	330e      	adds	r3, #14
 801d69a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d69c:	4618      	mov	r0, r3
 801d69e:	f7fd fcf7 	bl	801b090 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801d6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6a4:	3316      	adds	r3, #22
 801d6a6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d6a8:	4618      	mov	r0, r3
 801d6aa:	f7fd fcf1 	bl	801b090 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801d6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6b0:	330b      	adds	r3, #11
 801d6b2:	2220      	movs	r2, #32
 801d6b4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801d6b6:	697b      	ldr	r3, [r7, #20]
 801d6b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d6ba:	4611      	mov	r1, r2
 801d6bc:	4618      	mov	r0, r3
 801d6be:	f7fe fcc6 	bl	801c04e <ld_clust>
 801d6c2:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801d6c4:	697b      	ldr	r3, [r7, #20]
 801d6c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d6c8:	2200      	movs	r2, #0
 801d6ca:	4618      	mov	r0, r3
 801d6cc:	f7fe fcde 	bl	801c08c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801d6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6d2:	331c      	adds	r3, #28
 801d6d4:	2100      	movs	r1, #0
 801d6d6:	4618      	mov	r0, r3
 801d6d8:	f7fd fcda 	bl	801b090 <st_dword>
					fs->wflag = 1;
 801d6dc:	697b      	ldr	r3, [r7, #20]
 801d6de:	2201      	movs	r2, #1
 801d6e0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801d6e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	d037      	beq.n	801d758 <f_open+0x1d0>
						dw = fs->winsect;
 801d6e8:	697b      	ldr	r3, [r7, #20]
 801d6ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d6ec:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801d6ee:	f107 0318 	add.w	r3, r7, #24
 801d6f2:	2200      	movs	r2, #0
 801d6f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d6f6:	4618      	mov	r0, r3
 801d6f8:	f7fe f9ce 	bl	801ba98 <remove_chain>
 801d6fc:	4603      	mov	r3, r0
 801d6fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801d702:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d706:	2b00      	cmp	r3, #0
 801d708:	d126      	bne.n	801d758 <f_open+0x1d0>
							res = move_window(fs, dw);
 801d70a:	697b      	ldr	r3, [r7, #20]
 801d70c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d70e:	4618      	mov	r0, r3
 801d710:	f7fd ff18 	bl	801b544 <move_window>
 801d714:	4603      	mov	r3, r0
 801d716:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801d71a:	697b      	ldr	r3, [r7, #20]
 801d71c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d71e:	3a01      	subs	r2, #1
 801d720:	615a      	str	r2, [r3, #20]
 801d722:	e019      	b.n	801d758 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801d724:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d115      	bne.n	801d758 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801d72c:	7fbb      	ldrb	r3, [r7, #30]
 801d72e:	f003 0310 	and.w	r3, r3, #16
 801d732:	2b00      	cmp	r3, #0
 801d734:	d003      	beq.n	801d73e <f_open+0x1b6>
					res = FR_NO_FILE;
 801d736:	2304      	movs	r3, #4
 801d738:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d73c:	e00c      	b.n	801d758 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801d73e:	79fb      	ldrb	r3, [r7, #7]
 801d740:	f003 0302 	and.w	r3, r3, #2
 801d744:	2b00      	cmp	r3, #0
 801d746:	d007      	beq.n	801d758 <f_open+0x1d0>
 801d748:	7fbb      	ldrb	r3, [r7, #30]
 801d74a:	f003 0301 	and.w	r3, r3, #1
 801d74e:	2b00      	cmp	r3, #0
 801d750:	d002      	beq.n	801d758 <f_open+0x1d0>
						res = FR_DENIED;
 801d752:	2307      	movs	r3, #7
 801d754:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801d758:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d75c:	2b00      	cmp	r3, #0
 801d75e:	d126      	bne.n	801d7ae <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801d760:	79fb      	ldrb	r3, [r7, #7]
 801d762:	f003 0308 	and.w	r3, r3, #8
 801d766:	2b00      	cmp	r3, #0
 801d768:	d003      	beq.n	801d772 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801d76a:	79fb      	ldrb	r3, [r7, #7]
 801d76c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d770:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801d772:	697b      	ldr	r3, [r7, #20]
 801d774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801d77a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d77c:	68fb      	ldr	r3, [r7, #12]
 801d77e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d780:	79fb      	ldrb	r3, [r7, #7]
 801d782:	2b01      	cmp	r3, #1
 801d784:	bf8c      	ite	hi
 801d786:	2301      	movhi	r3, #1
 801d788:	2300      	movls	r3, #0
 801d78a:	b2db      	uxtb	r3, r3
 801d78c:	461a      	mov	r2, r3
 801d78e:	f107 0318 	add.w	r3, r7, #24
 801d792:	4611      	mov	r1, r2
 801d794:	4618      	mov	r0, r3
 801d796:	f7fd fda3 	bl	801b2e0 <inc_lock>
 801d79a:	4602      	mov	r2, r0
 801d79c:	68fb      	ldr	r3, [r7, #12]
 801d79e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801d7a0:	68fb      	ldr	r3, [r7, #12]
 801d7a2:	691b      	ldr	r3, [r3, #16]
 801d7a4:	2b00      	cmp	r3, #0
 801d7a6:	d102      	bne.n	801d7ae <f_open+0x226>
 801d7a8:	2302      	movs	r3, #2
 801d7aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801d7ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d7b2:	2b00      	cmp	r3, #0
 801d7b4:	f040 80a3 	bne.w	801d8fe <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801d7b8:	697b      	ldr	r3, [r7, #20]
 801d7ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d7bc:	4611      	mov	r1, r2
 801d7be:	4618      	mov	r0, r3
 801d7c0:	f7fe fc45 	bl	801c04e <ld_clust>
 801d7c4:	4602      	mov	r2, r0
 801d7c6:	68fb      	ldr	r3, [r7, #12]
 801d7c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801d7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d7cc:	331c      	adds	r3, #28
 801d7ce:	4618      	mov	r0, r3
 801d7d0:	f7fd fc20 	bl	801b014 <ld_dword>
 801d7d4:	4602      	mov	r2, r0
 801d7d6:	68fb      	ldr	r3, [r7, #12]
 801d7d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801d7da:	68fb      	ldr	r3, [r7, #12]
 801d7dc:	2200      	movs	r2, #0
 801d7de:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801d7e0:	697a      	ldr	r2, [r7, #20]
 801d7e2:	68fb      	ldr	r3, [r7, #12]
 801d7e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801d7e6:	697b      	ldr	r3, [r7, #20]
 801d7e8:	88da      	ldrh	r2, [r3, #6]
 801d7ea:	68fb      	ldr	r3, [r7, #12]
 801d7ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801d7ee:	68fb      	ldr	r3, [r7, #12]
 801d7f0:	79fa      	ldrb	r2, [r7, #7]
 801d7f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801d7f4:	68fb      	ldr	r3, [r7, #12]
 801d7f6:	2200      	movs	r2, #0
 801d7f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801d7fa:	68fb      	ldr	r3, [r7, #12]
 801d7fc:	2200      	movs	r2, #0
 801d7fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801d800:	68fb      	ldr	r3, [r7, #12]
 801d802:	2200      	movs	r2, #0
 801d804:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	3330      	adds	r3, #48	@ 0x30
 801d80a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801d80e:	2100      	movs	r1, #0
 801d810:	4618      	mov	r0, r3
 801d812:	f7fd fc8a 	bl	801b12a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801d816:	79fb      	ldrb	r3, [r7, #7]
 801d818:	f003 0320 	and.w	r3, r3, #32
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	d06e      	beq.n	801d8fe <f_open+0x376>
 801d820:	68fb      	ldr	r3, [r7, #12]
 801d822:	68db      	ldr	r3, [r3, #12]
 801d824:	2b00      	cmp	r3, #0
 801d826:	d06a      	beq.n	801d8fe <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801d828:	68fb      	ldr	r3, [r7, #12]
 801d82a:	68da      	ldr	r2, [r3, #12]
 801d82c:	68fb      	ldr	r3, [r7, #12]
 801d82e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801d830:	697b      	ldr	r3, [r7, #20]
 801d832:	895b      	ldrh	r3, [r3, #10]
 801d834:	461a      	mov	r2, r3
 801d836:	697b      	ldr	r3, [r7, #20]
 801d838:	899b      	ldrh	r3, [r3, #12]
 801d83a:	fb02 f303 	mul.w	r3, r2, r3
 801d83e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801d840:	68fb      	ldr	r3, [r7, #12]
 801d842:	689b      	ldr	r3, [r3, #8]
 801d844:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d846:	68fb      	ldr	r3, [r7, #12]
 801d848:	68db      	ldr	r3, [r3, #12]
 801d84a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d84c:	e016      	b.n	801d87c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801d84e:	68fb      	ldr	r3, [r7, #12]
 801d850:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d852:	4618      	mov	r0, r3
 801d854:	f7fd ff33 	bl	801b6be <get_fat>
 801d858:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801d85a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d85c:	2b01      	cmp	r3, #1
 801d85e:	d802      	bhi.n	801d866 <f_open+0x2de>
 801d860:	2302      	movs	r3, #2
 801d862:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801d866:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d868:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d86c:	d102      	bne.n	801d874 <f_open+0x2ec>
 801d86e:	2301      	movs	r3, #1
 801d870:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d874:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d878:	1ad3      	subs	r3, r2, r3
 801d87a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d87c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d880:	2b00      	cmp	r3, #0
 801d882:	d103      	bne.n	801d88c <f_open+0x304>
 801d884:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d888:	429a      	cmp	r2, r3
 801d88a:	d8e0      	bhi.n	801d84e <f_open+0x2c6>
				}
				fp->clust = clst;
 801d88c:	68fb      	ldr	r3, [r7, #12]
 801d88e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d890:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801d892:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d896:	2b00      	cmp	r3, #0
 801d898:	d131      	bne.n	801d8fe <f_open+0x376>
 801d89a:	697b      	ldr	r3, [r7, #20]
 801d89c:	899b      	ldrh	r3, [r3, #12]
 801d89e:	461a      	mov	r2, r3
 801d8a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d8a2:	fbb3 f1f2 	udiv	r1, r3, r2
 801d8a6:	fb01 f202 	mul.w	r2, r1, r2
 801d8aa:	1a9b      	subs	r3, r3, r2
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	d026      	beq.n	801d8fe <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801d8b0:	697b      	ldr	r3, [r7, #20]
 801d8b2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d8b4:	4618      	mov	r0, r3
 801d8b6:	f7fd fee3 	bl	801b680 <clust2sect>
 801d8ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801d8bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d8be:	2b00      	cmp	r3, #0
 801d8c0:	d103      	bne.n	801d8ca <f_open+0x342>
						res = FR_INT_ERR;
 801d8c2:	2302      	movs	r3, #2
 801d8c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d8c8:	e019      	b.n	801d8fe <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801d8ca:	697b      	ldr	r3, [r7, #20]
 801d8cc:	899b      	ldrh	r3, [r3, #12]
 801d8ce:	461a      	mov	r2, r3
 801d8d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d8d2:	fbb3 f2f2 	udiv	r2, r3, r2
 801d8d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d8d8:	441a      	add	r2, r3
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801d8de:	697b      	ldr	r3, [r7, #20]
 801d8e0:	7858      	ldrb	r0, [r3, #1]
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d8e8:	68fb      	ldr	r3, [r7, #12]
 801d8ea:	6a1a      	ldr	r2, [r3, #32]
 801d8ec:	2301      	movs	r3, #1
 801d8ee:	f7fd fb1b 	bl	801af28 <disk_read>
 801d8f2:	4603      	mov	r3, r0
 801d8f4:	2b00      	cmp	r3, #0
 801d8f6:	d002      	beq.n	801d8fe <f_open+0x376>
 801d8f8:	2301      	movs	r3, #1
 801d8fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801d8fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d902:	2b00      	cmp	r3, #0
 801d904:	d002      	beq.n	801d90c <f_open+0x384>
 801d906:	68fb      	ldr	r3, [r7, #12]
 801d908:	2200      	movs	r2, #0
 801d90a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d90c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801d910:	4618      	mov	r0, r3
 801d912:	3768      	adds	r7, #104	@ 0x68
 801d914:	46bd      	mov	sp, r7
 801d916:	bd80      	pop	{r7, pc}

0801d918 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d918:	b580      	push	{r7, lr}
 801d91a:	b08c      	sub	sp, #48	@ 0x30
 801d91c:	af00      	add	r7, sp, #0
 801d91e:	60f8      	str	r0, [r7, #12]
 801d920:	60b9      	str	r1, [r7, #8]
 801d922:	607a      	str	r2, [r7, #4]
 801d924:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d926:	68bb      	ldr	r3, [r7, #8]
 801d928:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d92a:	683b      	ldr	r3, [r7, #0]
 801d92c:	2200      	movs	r2, #0
 801d92e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d930:	68fb      	ldr	r3, [r7, #12]
 801d932:	f107 0210 	add.w	r2, r7, #16
 801d936:	4611      	mov	r1, r2
 801d938:	4618      	mov	r0, r3
 801d93a:	f7ff fda9 	bl	801d490 <validate>
 801d93e:	4603      	mov	r3, r0
 801d940:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d944:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d948:	2b00      	cmp	r3, #0
 801d94a:	d107      	bne.n	801d95c <f_write+0x44>
 801d94c:	68fb      	ldr	r3, [r7, #12]
 801d94e:	7d5b      	ldrb	r3, [r3, #21]
 801d950:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801d954:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d958:	2b00      	cmp	r3, #0
 801d95a:	d002      	beq.n	801d962 <f_write+0x4a>
 801d95c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d960:	e16a      	b.n	801dc38 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d962:	68fb      	ldr	r3, [r7, #12]
 801d964:	7d1b      	ldrb	r3, [r3, #20]
 801d966:	f003 0302 	and.w	r3, r3, #2
 801d96a:	2b00      	cmp	r3, #0
 801d96c:	d101      	bne.n	801d972 <f_write+0x5a>
 801d96e:	2307      	movs	r3, #7
 801d970:	e162      	b.n	801dc38 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d972:	68fb      	ldr	r3, [r7, #12]
 801d974:	699a      	ldr	r2, [r3, #24]
 801d976:	687b      	ldr	r3, [r7, #4]
 801d978:	441a      	add	r2, r3
 801d97a:	68fb      	ldr	r3, [r7, #12]
 801d97c:	699b      	ldr	r3, [r3, #24]
 801d97e:	429a      	cmp	r2, r3
 801d980:	f080 814c 	bcs.w	801dc1c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d984:	68fb      	ldr	r3, [r7, #12]
 801d986:	699b      	ldr	r3, [r3, #24]
 801d988:	43db      	mvns	r3, r3
 801d98a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d98c:	e146      	b.n	801dc1c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	699b      	ldr	r3, [r3, #24]
 801d992:	693a      	ldr	r2, [r7, #16]
 801d994:	8992      	ldrh	r2, [r2, #12]
 801d996:	fbb3 f1f2 	udiv	r1, r3, r2
 801d99a:	fb01 f202 	mul.w	r2, r1, r2
 801d99e:	1a9b      	subs	r3, r3, r2
 801d9a0:	2b00      	cmp	r3, #0
 801d9a2:	f040 80f1 	bne.w	801db88 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d9a6:	68fb      	ldr	r3, [r7, #12]
 801d9a8:	699b      	ldr	r3, [r3, #24]
 801d9aa:	693a      	ldr	r2, [r7, #16]
 801d9ac:	8992      	ldrh	r2, [r2, #12]
 801d9ae:	fbb3 f3f2 	udiv	r3, r3, r2
 801d9b2:	693a      	ldr	r2, [r7, #16]
 801d9b4:	8952      	ldrh	r2, [r2, #10]
 801d9b6:	3a01      	subs	r2, #1
 801d9b8:	4013      	ands	r3, r2
 801d9ba:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d9bc:	69bb      	ldr	r3, [r7, #24]
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	d143      	bne.n	801da4a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d9c2:	68fb      	ldr	r3, [r7, #12]
 801d9c4:	699b      	ldr	r3, [r3, #24]
 801d9c6:	2b00      	cmp	r3, #0
 801d9c8:	d10c      	bne.n	801d9e4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d9ca:	68fb      	ldr	r3, [r7, #12]
 801d9cc:	689b      	ldr	r3, [r3, #8]
 801d9ce:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	d11a      	bne.n	801da0c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d9d6:	68fb      	ldr	r3, [r7, #12]
 801d9d8:	2100      	movs	r1, #0
 801d9da:	4618      	mov	r0, r3
 801d9dc:	f7fe f8c1 	bl	801bb62 <create_chain>
 801d9e0:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d9e2:	e013      	b.n	801da0c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d9e4:	68fb      	ldr	r3, [r7, #12]
 801d9e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d9e8:	2b00      	cmp	r3, #0
 801d9ea:	d007      	beq.n	801d9fc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d9ec:	68fb      	ldr	r3, [r7, #12]
 801d9ee:	699b      	ldr	r3, [r3, #24]
 801d9f0:	4619      	mov	r1, r3
 801d9f2:	68f8      	ldr	r0, [r7, #12]
 801d9f4:	f7fe f94d 	bl	801bc92 <clmt_clust>
 801d9f8:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d9fa:	e007      	b.n	801da0c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d9fc:	68fa      	ldr	r2, [r7, #12]
 801d9fe:	68fb      	ldr	r3, [r7, #12]
 801da00:	69db      	ldr	r3, [r3, #28]
 801da02:	4619      	mov	r1, r3
 801da04:	4610      	mov	r0, r2
 801da06:	f7fe f8ac 	bl	801bb62 <create_chain>
 801da0a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801da0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801da0e:	2b00      	cmp	r3, #0
 801da10:	f000 8109 	beq.w	801dc26 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801da14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801da16:	2b01      	cmp	r3, #1
 801da18:	d104      	bne.n	801da24 <f_write+0x10c>
 801da1a:	68fb      	ldr	r3, [r7, #12]
 801da1c:	2202      	movs	r2, #2
 801da1e:	755a      	strb	r2, [r3, #21]
 801da20:	2302      	movs	r3, #2
 801da22:	e109      	b.n	801dc38 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801da24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801da26:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da2a:	d104      	bne.n	801da36 <f_write+0x11e>
 801da2c:	68fb      	ldr	r3, [r7, #12]
 801da2e:	2201      	movs	r2, #1
 801da30:	755a      	strb	r2, [r3, #21]
 801da32:	2301      	movs	r3, #1
 801da34:	e100      	b.n	801dc38 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801da36:	68fb      	ldr	r3, [r7, #12]
 801da38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801da3a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801da3c:	68fb      	ldr	r3, [r7, #12]
 801da3e:	689b      	ldr	r3, [r3, #8]
 801da40:	2b00      	cmp	r3, #0
 801da42:	d102      	bne.n	801da4a <f_write+0x132>
 801da44:	68fb      	ldr	r3, [r7, #12]
 801da46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801da48:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801da4a:	68fb      	ldr	r3, [r7, #12]
 801da4c:	7d1b      	ldrb	r3, [r3, #20]
 801da4e:	b25b      	sxtb	r3, r3
 801da50:	2b00      	cmp	r3, #0
 801da52:	da18      	bge.n	801da86 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801da54:	693b      	ldr	r3, [r7, #16]
 801da56:	7858      	ldrb	r0, [r3, #1]
 801da58:	68fb      	ldr	r3, [r7, #12]
 801da5a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801da5e:	68fb      	ldr	r3, [r7, #12]
 801da60:	6a1a      	ldr	r2, [r3, #32]
 801da62:	2301      	movs	r3, #1
 801da64:	f7fd fa80 	bl	801af68 <disk_write>
 801da68:	4603      	mov	r3, r0
 801da6a:	2b00      	cmp	r3, #0
 801da6c:	d004      	beq.n	801da78 <f_write+0x160>
 801da6e:	68fb      	ldr	r3, [r7, #12]
 801da70:	2201      	movs	r2, #1
 801da72:	755a      	strb	r2, [r3, #21]
 801da74:	2301      	movs	r3, #1
 801da76:	e0df      	b.n	801dc38 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801da78:	68fb      	ldr	r3, [r7, #12]
 801da7a:	7d1b      	ldrb	r3, [r3, #20]
 801da7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801da80:	b2da      	uxtb	r2, r3
 801da82:	68fb      	ldr	r3, [r7, #12]
 801da84:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801da86:	693a      	ldr	r2, [r7, #16]
 801da88:	68fb      	ldr	r3, [r7, #12]
 801da8a:	69db      	ldr	r3, [r3, #28]
 801da8c:	4619      	mov	r1, r3
 801da8e:	4610      	mov	r0, r2
 801da90:	f7fd fdf6 	bl	801b680 <clust2sect>
 801da94:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801da96:	697b      	ldr	r3, [r7, #20]
 801da98:	2b00      	cmp	r3, #0
 801da9a:	d104      	bne.n	801daa6 <f_write+0x18e>
 801da9c:	68fb      	ldr	r3, [r7, #12]
 801da9e:	2202      	movs	r2, #2
 801daa0:	755a      	strb	r2, [r3, #21]
 801daa2:	2302      	movs	r3, #2
 801daa4:	e0c8      	b.n	801dc38 <f_write+0x320>
			sect += csect;
 801daa6:	697a      	ldr	r2, [r7, #20]
 801daa8:	69bb      	ldr	r3, [r7, #24]
 801daaa:	4413      	add	r3, r2
 801daac:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801daae:	693b      	ldr	r3, [r7, #16]
 801dab0:	899b      	ldrh	r3, [r3, #12]
 801dab2:	461a      	mov	r2, r3
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	fbb3 f3f2 	udiv	r3, r3, r2
 801daba:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801dabc:	6a3b      	ldr	r3, [r7, #32]
 801dabe:	2b00      	cmp	r3, #0
 801dac0:	d043      	beq.n	801db4a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801dac2:	69ba      	ldr	r2, [r7, #24]
 801dac4:	6a3b      	ldr	r3, [r7, #32]
 801dac6:	4413      	add	r3, r2
 801dac8:	693a      	ldr	r2, [r7, #16]
 801daca:	8952      	ldrh	r2, [r2, #10]
 801dacc:	4293      	cmp	r3, r2
 801dace:	d905      	bls.n	801dadc <f_write+0x1c4>
					cc = fs->csize - csect;
 801dad0:	693b      	ldr	r3, [r7, #16]
 801dad2:	895b      	ldrh	r3, [r3, #10]
 801dad4:	461a      	mov	r2, r3
 801dad6:	69bb      	ldr	r3, [r7, #24]
 801dad8:	1ad3      	subs	r3, r2, r3
 801dada:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801dadc:	693b      	ldr	r3, [r7, #16]
 801dade:	7858      	ldrb	r0, [r3, #1]
 801dae0:	6a3b      	ldr	r3, [r7, #32]
 801dae2:	697a      	ldr	r2, [r7, #20]
 801dae4:	69f9      	ldr	r1, [r7, #28]
 801dae6:	f7fd fa3f 	bl	801af68 <disk_write>
 801daea:	4603      	mov	r3, r0
 801daec:	2b00      	cmp	r3, #0
 801daee:	d004      	beq.n	801dafa <f_write+0x1e2>
 801daf0:	68fb      	ldr	r3, [r7, #12]
 801daf2:	2201      	movs	r2, #1
 801daf4:	755a      	strb	r2, [r3, #21]
 801daf6:	2301      	movs	r3, #1
 801daf8:	e09e      	b.n	801dc38 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801dafa:	68fb      	ldr	r3, [r7, #12]
 801dafc:	6a1a      	ldr	r2, [r3, #32]
 801dafe:	697b      	ldr	r3, [r7, #20]
 801db00:	1ad3      	subs	r3, r2, r3
 801db02:	6a3a      	ldr	r2, [r7, #32]
 801db04:	429a      	cmp	r2, r3
 801db06:	d918      	bls.n	801db3a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801db0e:	68fb      	ldr	r3, [r7, #12]
 801db10:	6a1a      	ldr	r2, [r3, #32]
 801db12:	697b      	ldr	r3, [r7, #20]
 801db14:	1ad3      	subs	r3, r2, r3
 801db16:	693a      	ldr	r2, [r7, #16]
 801db18:	8992      	ldrh	r2, [r2, #12]
 801db1a:	fb02 f303 	mul.w	r3, r2, r3
 801db1e:	69fa      	ldr	r2, [r7, #28]
 801db20:	18d1      	adds	r1, r2, r3
 801db22:	693b      	ldr	r3, [r7, #16]
 801db24:	899b      	ldrh	r3, [r3, #12]
 801db26:	461a      	mov	r2, r3
 801db28:	f7fd fade 	bl	801b0e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801db2c:	68fb      	ldr	r3, [r7, #12]
 801db2e:	7d1b      	ldrb	r3, [r3, #20]
 801db30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801db34:	b2da      	uxtb	r2, r3
 801db36:	68fb      	ldr	r3, [r7, #12]
 801db38:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801db3a:	693b      	ldr	r3, [r7, #16]
 801db3c:	899b      	ldrh	r3, [r3, #12]
 801db3e:	461a      	mov	r2, r3
 801db40:	6a3b      	ldr	r3, [r7, #32]
 801db42:	fb02 f303 	mul.w	r3, r2, r3
 801db46:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801db48:	e04b      	b.n	801dbe2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801db4a:	68fb      	ldr	r3, [r7, #12]
 801db4c:	6a1b      	ldr	r3, [r3, #32]
 801db4e:	697a      	ldr	r2, [r7, #20]
 801db50:	429a      	cmp	r2, r3
 801db52:	d016      	beq.n	801db82 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801db54:	68fb      	ldr	r3, [r7, #12]
 801db56:	699a      	ldr	r2, [r3, #24]
 801db58:	68fb      	ldr	r3, [r7, #12]
 801db5a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801db5c:	429a      	cmp	r2, r3
 801db5e:	d210      	bcs.n	801db82 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801db60:	693b      	ldr	r3, [r7, #16]
 801db62:	7858      	ldrb	r0, [r3, #1]
 801db64:	68fb      	ldr	r3, [r7, #12]
 801db66:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801db6a:	2301      	movs	r3, #1
 801db6c:	697a      	ldr	r2, [r7, #20]
 801db6e:	f7fd f9db 	bl	801af28 <disk_read>
 801db72:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801db74:	2b00      	cmp	r3, #0
 801db76:	d004      	beq.n	801db82 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801db78:	68fb      	ldr	r3, [r7, #12]
 801db7a:	2201      	movs	r2, #1
 801db7c:	755a      	strb	r2, [r3, #21]
 801db7e:	2301      	movs	r3, #1
 801db80:	e05a      	b.n	801dc38 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801db82:	68fb      	ldr	r3, [r7, #12]
 801db84:	697a      	ldr	r2, [r7, #20]
 801db86:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801db88:	693b      	ldr	r3, [r7, #16]
 801db8a:	899b      	ldrh	r3, [r3, #12]
 801db8c:	4618      	mov	r0, r3
 801db8e:	68fb      	ldr	r3, [r7, #12]
 801db90:	699b      	ldr	r3, [r3, #24]
 801db92:	693a      	ldr	r2, [r7, #16]
 801db94:	8992      	ldrh	r2, [r2, #12]
 801db96:	fbb3 f1f2 	udiv	r1, r3, r2
 801db9a:	fb01 f202 	mul.w	r2, r1, r2
 801db9e:	1a9b      	subs	r3, r3, r2
 801dba0:	1ac3      	subs	r3, r0, r3
 801dba2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801dba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801dba6:	687b      	ldr	r3, [r7, #4]
 801dba8:	429a      	cmp	r2, r3
 801dbaa:	d901      	bls.n	801dbb0 <f_write+0x298>
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801dbb0:	68fb      	ldr	r3, [r7, #12]
 801dbb2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801dbb6:	68fb      	ldr	r3, [r7, #12]
 801dbb8:	699b      	ldr	r3, [r3, #24]
 801dbba:	693a      	ldr	r2, [r7, #16]
 801dbbc:	8992      	ldrh	r2, [r2, #12]
 801dbbe:	fbb3 f0f2 	udiv	r0, r3, r2
 801dbc2:	fb00 f202 	mul.w	r2, r0, r2
 801dbc6:	1a9b      	subs	r3, r3, r2
 801dbc8:	440b      	add	r3, r1
 801dbca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801dbcc:	69f9      	ldr	r1, [r7, #28]
 801dbce:	4618      	mov	r0, r3
 801dbd0:	f7fd fa8a 	bl	801b0e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801dbd4:	68fb      	ldr	r3, [r7, #12]
 801dbd6:	7d1b      	ldrb	r3, [r3, #20]
 801dbd8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801dbdc:	b2da      	uxtb	r2, r3
 801dbde:	68fb      	ldr	r3, [r7, #12]
 801dbe0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801dbe2:	69fa      	ldr	r2, [r7, #28]
 801dbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dbe6:	4413      	add	r3, r2
 801dbe8:	61fb      	str	r3, [r7, #28]
 801dbea:	68fb      	ldr	r3, [r7, #12]
 801dbec:	699a      	ldr	r2, [r3, #24]
 801dbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dbf0:	441a      	add	r2, r3
 801dbf2:	68fb      	ldr	r3, [r7, #12]
 801dbf4:	619a      	str	r2, [r3, #24]
 801dbf6:	68fb      	ldr	r3, [r7, #12]
 801dbf8:	68da      	ldr	r2, [r3, #12]
 801dbfa:	68fb      	ldr	r3, [r7, #12]
 801dbfc:	699b      	ldr	r3, [r3, #24]
 801dbfe:	429a      	cmp	r2, r3
 801dc00:	bf38      	it	cc
 801dc02:	461a      	movcc	r2, r3
 801dc04:	68fb      	ldr	r3, [r7, #12]
 801dc06:	60da      	str	r2, [r3, #12]
 801dc08:	683b      	ldr	r3, [r7, #0]
 801dc0a:	681a      	ldr	r2, [r3, #0]
 801dc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc0e:	441a      	add	r2, r3
 801dc10:	683b      	ldr	r3, [r7, #0]
 801dc12:	601a      	str	r2, [r3, #0]
 801dc14:	687a      	ldr	r2, [r7, #4]
 801dc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc18:	1ad3      	subs	r3, r2, r3
 801dc1a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801dc1c:	687b      	ldr	r3, [r7, #4]
 801dc1e:	2b00      	cmp	r3, #0
 801dc20:	f47f aeb5 	bne.w	801d98e <f_write+0x76>
 801dc24:	e000      	b.n	801dc28 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801dc26:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801dc28:	68fb      	ldr	r3, [r7, #12]
 801dc2a:	7d1b      	ldrb	r3, [r3, #20]
 801dc2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dc30:	b2da      	uxtb	r2, r3
 801dc32:	68fb      	ldr	r3, [r7, #12]
 801dc34:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801dc36:	2300      	movs	r3, #0
}
 801dc38:	4618      	mov	r0, r3
 801dc3a:	3730      	adds	r7, #48	@ 0x30
 801dc3c:	46bd      	mov	sp, r7
 801dc3e:	bd80      	pop	{r7, pc}

0801dc40 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801dc40:	b580      	push	{r7, lr}
 801dc42:	b086      	sub	sp, #24
 801dc44:	af00      	add	r7, sp, #0
 801dc46:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	f107 0208 	add.w	r2, r7, #8
 801dc4e:	4611      	mov	r1, r2
 801dc50:	4618      	mov	r0, r3
 801dc52:	f7ff fc1d 	bl	801d490 <validate>
 801dc56:	4603      	mov	r3, r0
 801dc58:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801dc5a:	7dfb      	ldrb	r3, [r7, #23]
 801dc5c:	2b00      	cmp	r3, #0
 801dc5e:	d168      	bne.n	801dd32 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	7d1b      	ldrb	r3, [r3, #20]
 801dc64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801dc68:	2b00      	cmp	r3, #0
 801dc6a:	d062      	beq.n	801dd32 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	7d1b      	ldrb	r3, [r3, #20]
 801dc70:	b25b      	sxtb	r3, r3
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	da15      	bge.n	801dca2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801dc76:	68bb      	ldr	r3, [r7, #8]
 801dc78:	7858      	ldrb	r0, [r3, #1]
 801dc7a:	687b      	ldr	r3, [r7, #4]
 801dc7c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	6a1a      	ldr	r2, [r3, #32]
 801dc84:	2301      	movs	r3, #1
 801dc86:	f7fd f96f 	bl	801af68 <disk_write>
 801dc8a:	4603      	mov	r3, r0
 801dc8c:	2b00      	cmp	r3, #0
 801dc8e:	d001      	beq.n	801dc94 <f_sync+0x54>
 801dc90:	2301      	movs	r3, #1
 801dc92:	e04f      	b.n	801dd34 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	7d1b      	ldrb	r3, [r3, #20]
 801dc98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dc9c:	b2da      	uxtb	r2, r3
 801dc9e:	687b      	ldr	r3, [r7, #4]
 801dca0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801dca2:	f7fd f8a1 	bl	801ade8 <get_fattime>
 801dca6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801dca8:	68ba      	ldr	r2, [r7, #8]
 801dcaa:	687b      	ldr	r3, [r7, #4]
 801dcac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dcae:	4619      	mov	r1, r3
 801dcb0:	4610      	mov	r0, r2
 801dcb2:	f7fd fc47 	bl	801b544 <move_window>
 801dcb6:	4603      	mov	r3, r0
 801dcb8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801dcba:	7dfb      	ldrb	r3, [r7, #23]
 801dcbc:	2b00      	cmp	r3, #0
 801dcbe:	d138      	bne.n	801dd32 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801dcc0:	687b      	ldr	r3, [r7, #4]
 801dcc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dcc4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801dcc6:	68fb      	ldr	r3, [r7, #12]
 801dcc8:	330b      	adds	r3, #11
 801dcca:	781a      	ldrb	r2, [r3, #0]
 801dccc:	68fb      	ldr	r3, [r7, #12]
 801dcce:	330b      	adds	r3, #11
 801dcd0:	f042 0220 	orr.w	r2, r2, #32
 801dcd4:	b2d2      	uxtb	r2, r2
 801dcd6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	6818      	ldr	r0, [r3, #0]
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	689b      	ldr	r3, [r3, #8]
 801dce0:	461a      	mov	r2, r3
 801dce2:	68f9      	ldr	r1, [r7, #12]
 801dce4:	f7fe f9d2 	bl	801c08c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801dce8:	68fb      	ldr	r3, [r7, #12]
 801dcea:	f103 021c 	add.w	r2, r3, #28
 801dcee:	687b      	ldr	r3, [r7, #4]
 801dcf0:	68db      	ldr	r3, [r3, #12]
 801dcf2:	4619      	mov	r1, r3
 801dcf4:	4610      	mov	r0, r2
 801dcf6:	f7fd f9cb 	bl	801b090 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801dcfa:	68fb      	ldr	r3, [r7, #12]
 801dcfc:	3316      	adds	r3, #22
 801dcfe:	6939      	ldr	r1, [r7, #16]
 801dd00:	4618      	mov	r0, r3
 801dd02:	f7fd f9c5 	bl	801b090 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801dd06:	68fb      	ldr	r3, [r7, #12]
 801dd08:	3312      	adds	r3, #18
 801dd0a:	2100      	movs	r1, #0
 801dd0c:	4618      	mov	r0, r3
 801dd0e:	f7fd f9a4 	bl	801b05a <st_word>
					fs->wflag = 1;
 801dd12:	68bb      	ldr	r3, [r7, #8]
 801dd14:	2201      	movs	r2, #1
 801dd16:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801dd18:	68bb      	ldr	r3, [r7, #8]
 801dd1a:	4618      	mov	r0, r3
 801dd1c:	f7fd fc40 	bl	801b5a0 <sync_fs>
 801dd20:	4603      	mov	r3, r0
 801dd22:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	7d1b      	ldrb	r3, [r3, #20]
 801dd28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801dd2c:	b2da      	uxtb	r2, r3
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801dd32:	7dfb      	ldrb	r3, [r7, #23]
}
 801dd34:	4618      	mov	r0, r3
 801dd36:	3718      	adds	r7, #24
 801dd38:	46bd      	mov	sp, r7
 801dd3a:	bd80      	pop	{r7, pc}

0801dd3c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801dd3c:	b580      	push	{r7, lr}
 801dd3e:	b084      	sub	sp, #16
 801dd40:	af00      	add	r7, sp, #0
 801dd42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801dd44:	6878      	ldr	r0, [r7, #4]
 801dd46:	f7ff ff7b 	bl	801dc40 <f_sync>
 801dd4a:	4603      	mov	r3, r0
 801dd4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801dd4e:	7bfb      	ldrb	r3, [r7, #15]
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d118      	bne.n	801dd86 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801dd54:	687b      	ldr	r3, [r7, #4]
 801dd56:	f107 0208 	add.w	r2, r7, #8
 801dd5a:	4611      	mov	r1, r2
 801dd5c:	4618      	mov	r0, r3
 801dd5e:	f7ff fb97 	bl	801d490 <validate>
 801dd62:	4603      	mov	r3, r0
 801dd64:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801dd66:	7bfb      	ldrb	r3, [r7, #15]
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	d10c      	bne.n	801dd86 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	691b      	ldr	r3, [r3, #16]
 801dd70:	4618      	mov	r0, r3
 801dd72:	f7fd fb43 	bl	801b3fc <dec_lock>
 801dd76:	4603      	mov	r3, r0
 801dd78:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801dd7a:	7bfb      	ldrb	r3, [r7, #15]
 801dd7c:	2b00      	cmp	r3, #0
 801dd7e:	d102      	bne.n	801dd86 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801dd80:	687b      	ldr	r3, [r7, #4]
 801dd82:	2200      	movs	r2, #0
 801dd84:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801dd86:	7bfb      	ldrb	r3, [r7, #15]
}
 801dd88:	4618      	mov	r0, r3
 801dd8a:	3710      	adds	r7, #16
 801dd8c:	46bd      	mov	sp, r7
 801dd8e:	bd80      	pop	{r7, pc}

0801dd90 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801dd90:	b580      	push	{r7, lr}
 801dd92:	b0a0      	sub	sp, #128	@ 0x80
 801dd94:	af00      	add	r7, sp, #0
 801dd96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801dd98:	2300      	movs	r3, #0
 801dd9a:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801dd9c:	f107 010c 	add.w	r1, r7, #12
 801dda0:	1d3b      	adds	r3, r7, #4
 801dda2:	2202      	movs	r2, #2
 801dda4:	4618      	mov	r0, r3
 801dda6:	f7ff f8ed 	bl	801cf84 <find_volume>
 801ddaa:	4603      	mov	r3, r0
 801ddac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801ddb0:	68fb      	ldr	r3, [r7, #12]
 801ddb2:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801ddb4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddb8:	2b00      	cmp	r3, #0
 801ddba:	f040 808e 	bne.w	801deda <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801ddbe:	687a      	ldr	r2, [r7, #4]
 801ddc0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801ddc4:	4611      	mov	r1, r2
 801ddc6:	4618      	mov	r0, r3
 801ddc8:	f7fe ffcc 	bl	801cd64 <follow_path>
 801ddcc:	4603      	mov	r3, r0
 801ddce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801ddd2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	d108      	bne.n	801ddec <f_unlink+0x5c>
 801ddda:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801ddde:	2102      	movs	r1, #2
 801dde0:	4618      	mov	r0, r3
 801dde2:	f7fd f9ff 	bl	801b1e4 <chk_lock>
 801dde6:	4603      	mov	r3, r0
 801dde8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801ddec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	d172      	bne.n	801deda <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801ddf4:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801ddf8:	b25b      	sxtb	r3, r3
 801ddfa:	2b00      	cmp	r3, #0
 801ddfc:	da03      	bge.n	801de06 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801ddfe:	2306      	movs	r3, #6
 801de00:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801de04:	e008      	b.n	801de18 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801de06:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801de0a:	f003 0301 	and.w	r3, r3, #1
 801de0e:	2b00      	cmp	r3, #0
 801de10:	d002      	beq.n	801de18 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801de12:	2307      	movs	r3, #7
 801de14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801de18:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de1c:	2b00      	cmp	r3, #0
 801de1e:	d134      	bne.n	801de8a <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801de20:	68fb      	ldr	r3, [r7, #12]
 801de22:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801de24:	4611      	mov	r1, r2
 801de26:	4618      	mov	r0, r3
 801de28:	f7fe f911 	bl	801c04e <ld_clust>
 801de2c:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801de2e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801de32:	f003 0310 	and.w	r3, r3, #16
 801de36:	2b00      	cmp	r3, #0
 801de38:	d027      	beq.n	801de8a <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801de3a:	68fb      	ldr	r3, [r7, #12]
 801de3c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801de3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801de40:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801de42:	f107 0310 	add.w	r3, r7, #16
 801de46:	2100      	movs	r1, #0
 801de48:	4618      	mov	r0, r3
 801de4a:	f7fd ff5a 	bl	801bd02 <dir_sdi>
 801de4e:	4603      	mov	r3, r0
 801de50:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801de54:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de58:	2b00      	cmp	r3, #0
 801de5a:	d116      	bne.n	801de8a <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801de5c:	f107 0310 	add.w	r3, r7, #16
 801de60:	2100      	movs	r1, #0
 801de62:	4618      	mov	r0, r3
 801de64:	f7fe fb1d 	bl	801c4a2 <dir_read>
 801de68:	4603      	mov	r3, r0
 801de6a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801de6e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de72:	2b00      	cmp	r3, #0
 801de74:	d102      	bne.n	801de7c <f_unlink+0xec>
 801de76:	2307      	movs	r3, #7
 801de78:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801de7c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de80:	2b04      	cmp	r3, #4
 801de82:	d102      	bne.n	801de8a <f_unlink+0xfa>
 801de84:	2300      	movs	r3, #0
 801de86:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801de8a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de8e:	2b00      	cmp	r3, #0
 801de90:	d123      	bne.n	801deda <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801de92:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801de96:	4618      	mov	r0, r3
 801de98:	f7fe fd62 	bl	801c960 <dir_remove>
 801de9c:	4603      	mov	r3, r0
 801de9e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801dea2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dea6:	2b00      	cmp	r3, #0
 801dea8:	d10c      	bne.n	801dec4 <f_unlink+0x134>
 801deaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801deac:	2b00      	cmp	r3, #0
 801deae:	d009      	beq.n	801dec4 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801deb0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801deb4:	2200      	movs	r2, #0
 801deb6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801deb8:	4618      	mov	r0, r3
 801deba:	f7fd fded 	bl	801ba98 <remove_chain>
 801debe:	4603      	mov	r3, r0
 801dec0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801dec4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dec8:	2b00      	cmp	r3, #0
 801deca:	d106      	bne.n	801deda <f_unlink+0x14a>
 801decc:	68fb      	ldr	r3, [r7, #12]
 801dece:	4618      	mov	r0, r3
 801ded0:	f7fd fb66 	bl	801b5a0 <sync_fs>
 801ded4:	4603      	mov	r3, r0
 801ded6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801deda:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801dede:	4618      	mov	r0, r3
 801dee0:	3780      	adds	r7, #128	@ 0x80
 801dee2:	46bd      	mov	sp, r7
 801dee4:	bd80      	pop	{r7, pc}
	...

0801dee8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801dee8:	b480      	push	{r7}
 801deea:	b087      	sub	sp, #28
 801deec:	af00      	add	r7, sp, #0
 801deee:	60f8      	str	r0, [r7, #12]
 801def0:	60b9      	str	r1, [r7, #8]
 801def2:	4613      	mov	r3, r2
 801def4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801def6:	2301      	movs	r3, #1
 801def8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801defa:	2300      	movs	r3, #0
 801defc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801defe:	4b1f      	ldr	r3, [pc, #124]	@ (801df7c <FATFS_LinkDriverEx+0x94>)
 801df00:	7a5b      	ldrb	r3, [r3, #9]
 801df02:	b2db      	uxtb	r3, r3
 801df04:	2b00      	cmp	r3, #0
 801df06:	d131      	bne.n	801df6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801df08:	4b1c      	ldr	r3, [pc, #112]	@ (801df7c <FATFS_LinkDriverEx+0x94>)
 801df0a:	7a5b      	ldrb	r3, [r3, #9]
 801df0c:	b2db      	uxtb	r3, r3
 801df0e:	461a      	mov	r2, r3
 801df10:	4b1a      	ldr	r3, [pc, #104]	@ (801df7c <FATFS_LinkDriverEx+0x94>)
 801df12:	2100      	movs	r1, #0
 801df14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801df16:	4b19      	ldr	r3, [pc, #100]	@ (801df7c <FATFS_LinkDriverEx+0x94>)
 801df18:	7a5b      	ldrb	r3, [r3, #9]
 801df1a:	b2db      	uxtb	r3, r3
 801df1c:	4a17      	ldr	r2, [pc, #92]	@ (801df7c <FATFS_LinkDriverEx+0x94>)
 801df1e:	009b      	lsls	r3, r3, #2
 801df20:	4413      	add	r3, r2
 801df22:	68fa      	ldr	r2, [r7, #12]
 801df24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801df26:	4b15      	ldr	r3, [pc, #84]	@ (801df7c <FATFS_LinkDriverEx+0x94>)
 801df28:	7a5b      	ldrb	r3, [r3, #9]
 801df2a:	b2db      	uxtb	r3, r3
 801df2c:	461a      	mov	r2, r3
 801df2e:	4b13      	ldr	r3, [pc, #76]	@ (801df7c <FATFS_LinkDriverEx+0x94>)
 801df30:	4413      	add	r3, r2
 801df32:	79fa      	ldrb	r2, [r7, #7]
 801df34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801df36:	4b11      	ldr	r3, [pc, #68]	@ (801df7c <FATFS_LinkDriverEx+0x94>)
 801df38:	7a5b      	ldrb	r3, [r3, #9]
 801df3a:	b2db      	uxtb	r3, r3
 801df3c:	1c5a      	adds	r2, r3, #1
 801df3e:	b2d1      	uxtb	r1, r2
 801df40:	4a0e      	ldr	r2, [pc, #56]	@ (801df7c <FATFS_LinkDriverEx+0x94>)
 801df42:	7251      	strb	r1, [r2, #9]
 801df44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801df46:	7dbb      	ldrb	r3, [r7, #22]
 801df48:	3330      	adds	r3, #48	@ 0x30
 801df4a:	b2da      	uxtb	r2, r3
 801df4c:	68bb      	ldr	r3, [r7, #8]
 801df4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801df50:	68bb      	ldr	r3, [r7, #8]
 801df52:	3301      	adds	r3, #1
 801df54:	223a      	movs	r2, #58	@ 0x3a
 801df56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801df58:	68bb      	ldr	r3, [r7, #8]
 801df5a:	3302      	adds	r3, #2
 801df5c:	222f      	movs	r2, #47	@ 0x2f
 801df5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801df60:	68bb      	ldr	r3, [r7, #8]
 801df62:	3303      	adds	r3, #3
 801df64:	2200      	movs	r2, #0
 801df66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801df68:	2300      	movs	r3, #0
 801df6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801df6c:	7dfb      	ldrb	r3, [r7, #23]
}
 801df6e:	4618      	mov	r0, r3
 801df70:	371c      	adds	r7, #28
 801df72:	46bd      	mov	sp, r7
 801df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df78:	4770      	bx	lr
 801df7a:	bf00      	nop
 801df7c:	24000768 	.word	0x24000768

0801df80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801df80:	b580      	push	{r7, lr}
 801df82:	b082      	sub	sp, #8
 801df84:	af00      	add	r7, sp, #0
 801df86:	6078      	str	r0, [r7, #4]
 801df88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801df8a:	2200      	movs	r2, #0
 801df8c:	6839      	ldr	r1, [r7, #0]
 801df8e:	6878      	ldr	r0, [r7, #4]
 801df90:	f7ff ffaa 	bl	801dee8 <FATFS_LinkDriverEx>
 801df94:	4603      	mov	r3, r0
}
 801df96:	4618      	mov	r0, r3
 801df98:	3708      	adds	r7, #8
 801df9a:	46bd      	mov	sp, r7
 801df9c:	bd80      	pop	{r7, pc}
	...

0801dfa0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801dfa0:	b480      	push	{r7}
 801dfa2:	b085      	sub	sp, #20
 801dfa4:	af00      	add	r7, sp, #0
 801dfa6:	4603      	mov	r3, r0
 801dfa8:	6039      	str	r1, [r7, #0]
 801dfaa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801dfac:	88fb      	ldrh	r3, [r7, #6]
 801dfae:	2b7f      	cmp	r3, #127	@ 0x7f
 801dfb0:	d802      	bhi.n	801dfb8 <ff_convert+0x18>
		c = chr;
 801dfb2:	88fb      	ldrh	r3, [r7, #6]
 801dfb4:	81fb      	strh	r3, [r7, #14]
 801dfb6:	e025      	b.n	801e004 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801dfb8:	683b      	ldr	r3, [r7, #0]
 801dfba:	2b00      	cmp	r3, #0
 801dfbc:	d00b      	beq.n	801dfd6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801dfbe:	88fb      	ldrh	r3, [r7, #6]
 801dfc0:	2bff      	cmp	r3, #255	@ 0xff
 801dfc2:	d805      	bhi.n	801dfd0 <ff_convert+0x30>
 801dfc4:	88fb      	ldrh	r3, [r7, #6]
 801dfc6:	3b80      	subs	r3, #128	@ 0x80
 801dfc8:	4a12      	ldr	r2, [pc, #72]	@ (801e014 <ff_convert+0x74>)
 801dfca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801dfce:	e000      	b.n	801dfd2 <ff_convert+0x32>
 801dfd0:	2300      	movs	r3, #0
 801dfd2:	81fb      	strh	r3, [r7, #14]
 801dfd4:	e016      	b.n	801e004 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801dfd6:	2300      	movs	r3, #0
 801dfd8:	81fb      	strh	r3, [r7, #14]
 801dfda:	e009      	b.n	801dff0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801dfdc:	89fb      	ldrh	r3, [r7, #14]
 801dfde:	4a0d      	ldr	r2, [pc, #52]	@ (801e014 <ff_convert+0x74>)
 801dfe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801dfe4:	88fa      	ldrh	r2, [r7, #6]
 801dfe6:	429a      	cmp	r2, r3
 801dfe8:	d006      	beq.n	801dff8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801dfea:	89fb      	ldrh	r3, [r7, #14]
 801dfec:	3301      	adds	r3, #1
 801dfee:	81fb      	strh	r3, [r7, #14]
 801dff0:	89fb      	ldrh	r3, [r7, #14]
 801dff2:	2b7f      	cmp	r3, #127	@ 0x7f
 801dff4:	d9f2      	bls.n	801dfdc <ff_convert+0x3c>
 801dff6:	e000      	b.n	801dffa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801dff8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801dffa:	89fb      	ldrh	r3, [r7, #14]
 801dffc:	3380      	adds	r3, #128	@ 0x80
 801dffe:	b29b      	uxth	r3, r3
 801e000:	b2db      	uxtb	r3, r3
 801e002:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801e004:	89fb      	ldrh	r3, [r7, #14]
}
 801e006:	4618      	mov	r0, r3
 801e008:	3714      	adds	r7, #20
 801e00a:	46bd      	mov	sp, r7
 801e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e010:	4770      	bx	lr
 801e012:	bf00      	nop
 801e014:	0801eb34 	.word	0x0801eb34

0801e018 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801e018:	b480      	push	{r7}
 801e01a:	b087      	sub	sp, #28
 801e01c:	af00      	add	r7, sp, #0
 801e01e:	4603      	mov	r3, r0
 801e020:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801e022:	88fb      	ldrh	r3, [r7, #6]
 801e024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e028:	d201      	bcs.n	801e02e <ff_wtoupper+0x16>
 801e02a:	4b3e      	ldr	r3, [pc, #248]	@ (801e124 <ff_wtoupper+0x10c>)
 801e02c:	e000      	b.n	801e030 <ff_wtoupper+0x18>
 801e02e:	4b3e      	ldr	r3, [pc, #248]	@ (801e128 <ff_wtoupper+0x110>)
 801e030:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801e032:	697b      	ldr	r3, [r7, #20]
 801e034:	1c9a      	adds	r2, r3, #2
 801e036:	617a      	str	r2, [r7, #20]
 801e038:	881b      	ldrh	r3, [r3, #0]
 801e03a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801e03c:	8a7b      	ldrh	r3, [r7, #18]
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d068      	beq.n	801e114 <ff_wtoupper+0xfc>
 801e042:	88fa      	ldrh	r2, [r7, #6]
 801e044:	8a7b      	ldrh	r3, [r7, #18]
 801e046:	429a      	cmp	r2, r3
 801e048:	d364      	bcc.n	801e114 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801e04a:	697b      	ldr	r3, [r7, #20]
 801e04c:	1c9a      	adds	r2, r3, #2
 801e04e:	617a      	str	r2, [r7, #20]
 801e050:	881b      	ldrh	r3, [r3, #0]
 801e052:	823b      	strh	r3, [r7, #16]
 801e054:	8a3b      	ldrh	r3, [r7, #16]
 801e056:	0a1b      	lsrs	r3, r3, #8
 801e058:	81fb      	strh	r3, [r7, #14]
 801e05a:	8a3b      	ldrh	r3, [r7, #16]
 801e05c:	b2db      	uxtb	r3, r3
 801e05e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801e060:	88fa      	ldrh	r2, [r7, #6]
 801e062:	8a79      	ldrh	r1, [r7, #18]
 801e064:	8a3b      	ldrh	r3, [r7, #16]
 801e066:	440b      	add	r3, r1
 801e068:	429a      	cmp	r2, r3
 801e06a:	da49      	bge.n	801e100 <ff_wtoupper+0xe8>
			switch (cmd) {
 801e06c:	89fb      	ldrh	r3, [r7, #14]
 801e06e:	2b08      	cmp	r3, #8
 801e070:	d84f      	bhi.n	801e112 <ff_wtoupper+0xfa>
 801e072:	a201      	add	r2, pc, #4	@ (adr r2, 801e078 <ff_wtoupper+0x60>)
 801e074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e078:	0801e09d 	.word	0x0801e09d
 801e07c:	0801e0af 	.word	0x0801e0af
 801e080:	0801e0c5 	.word	0x0801e0c5
 801e084:	0801e0cd 	.word	0x0801e0cd
 801e088:	0801e0d5 	.word	0x0801e0d5
 801e08c:	0801e0dd 	.word	0x0801e0dd
 801e090:	0801e0e5 	.word	0x0801e0e5
 801e094:	0801e0ed 	.word	0x0801e0ed
 801e098:	0801e0f5 	.word	0x0801e0f5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801e09c:	88fa      	ldrh	r2, [r7, #6]
 801e09e:	8a7b      	ldrh	r3, [r7, #18]
 801e0a0:	1ad3      	subs	r3, r2, r3
 801e0a2:	005b      	lsls	r3, r3, #1
 801e0a4:	697a      	ldr	r2, [r7, #20]
 801e0a6:	4413      	add	r3, r2
 801e0a8:	881b      	ldrh	r3, [r3, #0]
 801e0aa:	80fb      	strh	r3, [r7, #6]
 801e0ac:	e027      	b.n	801e0fe <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801e0ae:	88fa      	ldrh	r2, [r7, #6]
 801e0b0:	8a7b      	ldrh	r3, [r7, #18]
 801e0b2:	1ad3      	subs	r3, r2, r3
 801e0b4:	b29b      	uxth	r3, r3
 801e0b6:	f003 0301 	and.w	r3, r3, #1
 801e0ba:	b29b      	uxth	r3, r3
 801e0bc:	88fa      	ldrh	r2, [r7, #6]
 801e0be:	1ad3      	subs	r3, r2, r3
 801e0c0:	80fb      	strh	r3, [r7, #6]
 801e0c2:	e01c      	b.n	801e0fe <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801e0c4:	88fb      	ldrh	r3, [r7, #6]
 801e0c6:	3b10      	subs	r3, #16
 801e0c8:	80fb      	strh	r3, [r7, #6]
 801e0ca:	e018      	b.n	801e0fe <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801e0cc:	88fb      	ldrh	r3, [r7, #6]
 801e0ce:	3b20      	subs	r3, #32
 801e0d0:	80fb      	strh	r3, [r7, #6]
 801e0d2:	e014      	b.n	801e0fe <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801e0d4:	88fb      	ldrh	r3, [r7, #6]
 801e0d6:	3b30      	subs	r3, #48	@ 0x30
 801e0d8:	80fb      	strh	r3, [r7, #6]
 801e0da:	e010      	b.n	801e0fe <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801e0dc:	88fb      	ldrh	r3, [r7, #6]
 801e0de:	3b1a      	subs	r3, #26
 801e0e0:	80fb      	strh	r3, [r7, #6]
 801e0e2:	e00c      	b.n	801e0fe <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801e0e4:	88fb      	ldrh	r3, [r7, #6]
 801e0e6:	3308      	adds	r3, #8
 801e0e8:	80fb      	strh	r3, [r7, #6]
 801e0ea:	e008      	b.n	801e0fe <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801e0ec:	88fb      	ldrh	r3, [r7, #6]
 801e0ee:	3b50      	subs	r3, #80	@ 0x50
 801e0f0:	80fb      	strh	r3, [r7, #6]
 801e0f2:	e004      	b.n	801e0fe <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801e0f4:	88fb      	ldrh	r3, [r7, #6]
 801e0f6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801e0fa:	80fb      	strh	r3, [r7, #6]
 801e0fc:	bf00      	nop
			}
			break;
 801e0fe:	e008      	b.n	801e112 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801e100:	89fb      	ldrh	r3, [r7, #14]
 801e102:	2b00      	cmp	r3, #0
 801e104:	d195      	bne.n	801e032 <ff_wtoupper+0x1a>
 801e106:	8a3b      	ldrh	r3, [r7, #16]
 801e108:	005b      	lsls	r3, r3, #1
 801e10a:	697a      	ldr	r2, [r7, #20]
 801e10c:	4413      	add	r3, r2
 801e10e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801e110:	e78f      	b.n	801e032 <ff_wtoupper+0x1a>
			break;
 801e112:	bf00      	nop
	}

	return chr;
 801e114:	88fb      	ldrh	r3, [r7, #6]
}
 801e116:	4618      	mov	r0, r3
 801e118:	371c      	adds	r7, #28
 801e11a:	46bd      	mov	sp, r7
 801e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e120:	4770      	bx	lr
 801e122:	bf00      	nop
 801e124:	0801ec34 	.word	0x0801ec34
 801e128:	0801ee28 	.word	0x0801ee28

0801e12c <memset>:
 801e12c:	4402      	add	r2, r0
 801e12e:	4603      	mov	r3, r0
 801e130:	4293      	cmp	r3, r2
 801e132:	d100      	bne.n	801e136 <memset+0xa>
 801e134:	4770      	bx	lr
 801e136:	f803 1b01 	strb.w	r1, [r3], #1
 801e13a:	e7f9      	b.n	801e130 <memset+0x4>

0801e13c <__errno>:
 801e13c:	4b01      	ldr	r3, [pc, #4]	@ (801e144 <__errno+0x8>)
 801e13e:	6818      	ldr	r0, [r3, #0]
 801e140:	4770      	bx	lr
 801e142:	bf00      	nop
 801e144:	24000028 	.word	0x24000028

0801e148 <__libc_init_array>:
 801e148:	b570      	push	{r4, r5, r6, lr}
 801e14a:	4d0d      	ldr	r5, [pc, #52]	@ (801e180 <__libc_init_array+0x38>)
 801e14c:	4c0d      	ldr	r4, [pc, #52]	@ (801e184 <__libc_init_array+0x3c>)
 801e14e:	1b64      	subs	r4, r4, r5
 801e150:	10a4      	asrs	r4, r4, #2
 801e152:	2600      	movs	r6, #0
 801e154:	42a6      	cmp	r6, r4
 801e156:	d109      	bne.n	801e16c <__libc_init_array+0x24>
 801e158:	4d0b      	ldr	r5, [pc, #44]	@ (801e188 <__libc_init_array+0x40>)
 801e15a:	4c0c      	ldr	r4, [pc, #48]	@ (801e18c <__libc_init_array+0x44>)
 801e15c:	f000 fc38 	bl	801e9d0 <_init>
 801e160:	1b64      	subs	r4, r4, r5
 801e162:	10a4      	asrs	r4, r4, #2
 801e164:	2600      	movs	r6, #0
 801e166:	42a6      	cmp	r6, r4
 801e168:	d105      	bne.n	801e176 <__libc_init_array+0x2e>
 801e16a:	bd70      	pop	{r4, r5, r6, pc}
 801e16c:	f855 3b04 	ldr.w	r3, [r5], #4
 801e170:	4798      	blx	r3
 801e172:	3601      	adds	r6, #1
 801e174:	e7ee      	b.n	801e154 <__libc_init_array+0xc>
 801e176:	f855 3b04 	ldr.w	r3, [r5], #4
 801e17a:	4798      	blx	r3
 801e17c:	3601      	adds	r6, #1
 801e17e:	e7f2      	b.n	801e166 <__libc_init_array+0x1e>
 801e180:	080207e8 	.word	0x080207e8
 801e184:	080207e8 	.word	0x080207e8
 801e188:	080207e8 	.word	0x080207e8
 801e18c:	080207ec 	.word	0x080207ec

0801e190 <sqrt>:
 801e190:	b508      	push	{r3, lr}
 801e192:	ed2d 8b04 	vpush	{d8-d9}
 801e196:	eeb0 8b40 	vmov.f64	d8, d0
 801e19a:	f000 fba1 	bl	801e8e0 <__ieee754_sqrt>
 801e19e:	eeb4 8b48 	vcmp.f64	d8, d8
 801e1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1a6:	d60c      	bvs.n	801e1c2 <sqrt+0x32>
 801e1a8:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801e1c8 <sqrt+0x38>
 801e1ac:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801e1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1b4:	d505      	bpl.n	801e1c2 <sqrt+0x32>
 801e1b6:	f7ff ffc1 	bl	801e13c <__errno>
 801e1ba:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801e1be:	2321      	movs	r3, #33	@ 0x21
 801e1c0:	6003      	str	r3, [r0, #0]
 801e1c2:	ecbd 8b04 	vpop	{d8-d9}
 801e1c6:	bd08      	pop	{r3, pc}
	...

0801e1d0 <atan>:
 801e1d0:	b538      	push	{r3, r4, r5, lr}
 801e1d2:	eeb0 7b40 	vmov.f64	d7, d0
 801e1d6:	ee17 5a90 	vmov	r5, s15
 801e1da:	4b73      	ldr	r3, [pc, #460]	@ (801e3a8 <atan+0x1d8>)
 801e1dc:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801e1e0:	429c      	cmp	r4, r3
 801e1e2:	d913      	bls.n	801e20c <atan+0x3c>
 801e1e4:	4b71      	ldr	r3, [pc, #452]	@ (801e3ac <atan+0x1dc>)
 801e1e6:	429c      	cmp	r4, r3
 801e1e8:	d803      	bhi.n	801e1f2 <atan+0x22>
 801e1ea:	d107      	bne.n	801e1fc <atan+0x2c>
 801e1ec:	ee10 3a10 	vmov	r3, s0
 801e1f0:	b123      	cbz	r3, 801e1fc <atan+0x2c>
 801e1f2:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e1f6:	eeb0 0b47 	vmov.f64	d0, d7
 801e1fa:	bd38      	pop	{r3, r4, r5, pc}
 801e1fc:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801e338 <atan+0x168>
 801e200:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801e340 <atan+0x170>
 801e204:	2d00      	cmp	r5, #0
 801e206:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801e20a:	e7f4      	b.n	801e1f6 <atan+0x26>
 801e20c:	4b68      	ldr	r3, [pc, #416]	@ (801e3b0 <atan+0x1e0>)
 801e20e:	429c      	cmp	r4, r3
 801e210:	d811      	bhi.n	801e236 <atan+0x66>
 801e212:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e216:	429c      	cmp	r4, r3
 801e218:	d80a      	bhi.n	801e230 <atan+0x60>
 801e21a:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801e21e:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801e348 <atan+0x178>
 801e222:	ee30 6b06 	vadd.f64	d6, d0, d6
 801e226:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801e22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e22e:	dce2      	bgt.n	801e1f6 <atan+0x26>
 801e230:	f04f 33ff 	mov.w	r3, #4294967295
 801e234:	e013      	b.n	801e25e <atan+0x8e>
 801e236:	f000 f8c5 	bl	801e3c4 <fabs>
 801e23a:	4b5e      	ldr	r3, [pc, #376]	@ (801e3b4 <atan+0x1e4>)
 801e23c:	429c      	cmp	r4, r3
 801e23e:	d84f      	bhi.n	801e2e0 <atan+0x110>
 801e240:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e244:	429c      	cmp	r4, r3
 801e246:	d841      	bhi.n	801e2cc <atan+0xfc>
 801e248:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801e24c:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801e250:	2300      	movs	r3, #0
 801e252:	eea0 5b07 	vfma.f64	d5, d0, d7
 801e256:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e25a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e25e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e350 <atan+0x180>
 801e262:	ee27 4b07 	vmul.f64	d4, d7, d7
 801e266:	ee24 5b04 	vmul.f64	d5, d4, d4
 801e26a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e358 <atan+0x188>
 801e26e:	eea5 3b06 	vfma.f64	d3, d5, d6
 801e272:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e360 <atan+0x190>
 801e276:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e27a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e368 <atan+0x198>
 801e27e:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e282:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e370 <atan+0x1a0>
 801e286:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e28a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e378 <atan+0x1a8>
 801e28e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e380 <atan+0x1b0>
 801e292:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e296:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e388 <atan+0x1b8>
 801e29a:	eea5 2b06 	vfma.f64	d2, d5, d6
 801e29e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e390 <atan+0x1c0>
 801e2a2:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e2a6:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e398 <atan+0x1c8>
 801e2aa:	eea6 2b05 	vfma.f64	d2, d6, d5
 801e2ae:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e3a0 <atan+0x1d0>
 801e2b2:	1c5a      	adds	r2, r3, #1
 801e2b4:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e2b8:	ee26 6b05 	vmul.f64	d6, d6, d5
 801e2bc:	eea3 6b04 	vfma.f64	d6, d3, d4
 801e2c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e2c4:	d121      	bne.n	801e30a <atan+0x13a>
 801e2c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e2ca:	e794      	b.n	801e1f6 <atan+0x26>
 801e2cc:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e2d0:	2301      	movs	r3, #1
 801e2d2:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e2d6:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e2da:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e2de:	e7be      	b.n	801e25e <atan+0x8e>
 801e2e0:	4b35      	ldr	r3, [pc, #212]	@ (801e3b8 <atan+0x1e8>)
 801e2e2:	429c      	cmp	r4, r3
 801e2e4:	d20b      	bcs.n	801e2fe <atan+0x12e>
 801e2e6:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801e2ea:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e2ee:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e2f2:	eea0 6b07 	vfma.f64	d6, d0, d7
 801e2f6:	2302      	movs	r3, #2
 801e2f8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e2fc:	e7af      	b.n	801e25e <atan+0x8e>
 801e2fe:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e302:	2303      	movs	r3, #3
 801e304:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e308:	e7a9      	b.n	801e25e <atan+0x8e>
 801e30a:	4a2c      	ldr	r2, [pc, #176]	@ (801e3bc <atan+0x1ec>)
 801e30c:	492c      	ldr	r1, [pc, #176]	@ (801e3c0 <atan+0x1f0>)
 801e30e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801e312:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e316:	ed93 5b00 	vldr	d5, [r3]
 801e31a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e31e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e322:	ed92 7b00 	vldr	d7, [r2]
 801e326:	2d00      	cmp	r5, #0
 801e328:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e32c:	bfb8      	it	lt
 801e32e:	eeb1 7b47 	vneglt.f64	d7, d7
 801e332:	e760      	b.n	801e1f6 <atan+0x26>
 801e334:	f3af 8000 	nop.w
 801e338:	54442d18 	.word	0x54442d18
 801e33c:	bff921fb 	.word	0xbff921fb
 801e340:	54442d18 	.word	0x54442d18
 801e344:	3ff921fb 	.word	0x3ff921fb
 801e348:	8800759c 	.word	0x8800759c
 801e34c:	7e37e43c 	.word	0x7e37e43c
 801e350:	e322da11 	.word	0xe322da11
 801e354:	3f90ad3a 	.word	0x3f90ad3a
 801e358:	24760deb 	.word	0x24760deb
 801e35c:	3fa97b4b 	.word	0x3fa97b4b
 801e360:	a0d03d51 	.word	0xa0d03d51
 801e364:	3fb10d66 	.word	0x3fb10d66
 801e368:	c54c206e 	.word	0xc54c206e
 801e36c:	3fb745cd 	.word	0x3fb745cd
 801e370:	920083ff 	.word	0x920083ff
 801e374:	3fc24924 	.word	0x3fc24924
 801e378:	5555550d 	.word	0x5555550d
 801e37c:	3fd55555 	.word	0x3fd55555
 801e380:	52defd9a 	.word	0x52defd9a
 801e384:	bfadde2d 	.word	0xbfadde2d
 801e388:	2c6a6c2f 	.word	0x2c6a6c2f
 801e38c:	bfa2b444 	.word	0xbfa2b444
 801e390:	af749a6d 	.word	0xaf749a6d
 801e394:	bfb3b0f2 	.word	0xbfb3b0f2
 801e398:	fe231671 	.word	0xfe231671
 801e39c:	bfbc71c6 	.word	0xbfbc71c6
 801e3a0:	9998ebc4 	.word	0x9998ebc4
 801e3a4:	bfc99999 	.word	0xbfc99999
 801e3a8:	440fffff 	.word	0x440fffff
 801e3ac:	7ff00000 	.word	0x7ff00000
 801e3b0:	3fdbffff 	.word	0x3fdbffff
 801e3b4:	3ff2ffff 	.word	0x3ff2ffff
 801e3b8:	40038000 	.word	0x40038000
 801e3bc:	0801ef08 	.word	0x0801ef08
 801e3c0:	0801eee8 	.word	0x0801eee8

0801e3c4 <fabs>:
 801e3c4:	ec51 0b10 	vmov	r0, r1, d0
 801e3c8:	4602      	mov	r2, r0
 801e3ca:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e3ce:	ec43 2b10 	vmov	d0, r2, r3
 801e3d2:	4770      	bx	lr

0801e3d4 <checkint>:
 801e3d4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e3d8:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801e3dc:	429a      	cmp	r2, r3
 801e3de:	b570      	push	{r4, r5, r6, lr}
 801e3e0:	dd2a      	ble.n	801e438 <checkint+0x64>
 801e3e2:	f240 4333 	movw	r3, #1075	@ 0x433
 801e3e6:	429a      	cmp	r2, r3
 801e3e8:	dc24      	bgt.n	801e434 <checkint+0x60>
 801e3ea:	1a9b      	subs	r3, r3, r2
 801e3ec:	f1a3 0620 	sub.w	r6, r3, #32
 801e3f0:	f04f 32ff 	mov.w	r2, #4294967295
 801e3f4:	fa02 f403 	lsl.w	r4, r2, r3
 801e3f8:	fa02 f606 	lsl.w	r6, r2, r6
 801e3fc:	f1c3 0520 	rsb	r5, r3, #32
 801e400:	fa22 f505 	lsr.w	r5, r2, r5
 801e404:	4334      	orrs	r4, r6
 801e406:	432c      	orrs	r4, r5
 801e408:	409a      	lsls	r2, r3
 801e40a:	ea20 0202 	bic.w	r2, r0, r2
 801e40e:	ea21 0404 	bic.w	r4, r1, r4
 801e412:	4322      	orrs	r2, r4
 801e414:	f1a3 0420 	sub.w	r4, r3, #32
 801e418:	f1c3 0220 	rsb	r2, r3, #32
 801e41c:	d10c      	bne.n	801e438 <checkint+0x64>
 801e41e:	40d8      	lsrs	r0, r3
 801e420:	fa01 f302 	lsl.w	r3, r1, r2
 801e424:	4318      	orrs	r0, r3
 801e426:	40e1      	lsrs	r1, r4
 801e428:	4308      	orrs	r0, r1
 801e42a:	f000 0001 	and.w	r0, r0, #1
 801e42e:	f1d0 0002 	rsbs	r0, r0, #2
 801e432:	bd70      	pop	{r4, r5, r6, pc}
 801e434:	2002      	movs	r0, #2
 801e436:	e7fc      	b.n	801e432 <checkint+0x5e>
 801e438:	2000      	movs	r0, #0
 801e43a:	e7fa      	b.n	801e432 <checkint+0x5e>
 801e43c:	0000      	movs	r0, r0
	...

0801e440 <pow>:
 801e440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e444:	ee10 4a90 	vmov	r4, s1
 801e448:	ed2d 8b0a 	vpush	{d8-d12}
 801e44c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801e450:	ee11 aa90 	vmov	sl, s3
 801e454:	f108 32ff 	add.w	r2, r8, #4294967295
 801e458:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801e45c:	429a      	cmp	r2, r3
 801e45e:	ee10 5a10 	vmov	r5, s0
 801e462:	ee11 0a10 	vmov	r0, s2
 801e466:	b087      	sub	sp, #28
 801e468:	46c4      	mov	ip, r8
 801e46a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801e46e:	d806      	bhi.n	801e47e <pow+0x3e>
 801e470:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801e474:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801e478:	2b7f      	cmp	r3, #127	@ 0x7f
 801e47a:	f240 8157 	bls.w	801e72c <pow+0x2ec>
 801e47e:	1802      	adds	r2, r0, r0
 801e480:	eb4a 010a 	adc.w	r1, sl, sl
 801e484:	f06f 0b01 	mvn.w	fp, #1
 801e488:	1e57      	subs	r7, r2, #1
 801e48a:	f141 33ff 	adc.w	r3, r1, #4294967295
 801e48e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801e492:	45bb      	cmp	fp, r7
 801e494:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e498:	d242      	bcs.n	801e520 <pow+0xe0>
 801e49a:	ea52 0301 	orrs.w	r3, r2, r1
 801e49e:	f04f 0300 	mov.w	r3, #0
 801e4a2:	d10c      	bne.n	801e4be <pow+0x7e>
 801e4a4:	196d      	adds	r5, r5, r5
 801e4a6:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801e4aa:	4164      	adcs	r4, r4
 801e4ac:	42ab      	cmp	r3, r5
 801e4ae:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801e4b2:	41a3      	sbcs	r3, r4
 801e4b4:	f0c0 808f 	bcc.w	801e5d6 <pow+0x196>
 801e4b8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e4bc:	e02b      	b.n	801e516 <pow+0xd6>
 801e4be:	4ed4      	ldr	r6, [pc, #848]	@ (801e810 <pow+0x3d0>)
 801e4c0:	42b4      	cmp	r4, r6
 801e4c2:	bf08      	it	eq
 801e4c4:	429d      	cmpeq	r5, r3
 801e4c6:	d109      	bne.n	801e4dc <pow+0x9c>
 801e4c8:	1800      	adds	r0, r0, r0
 801e4ca:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801e4ce:	eb4a 0a0a 	adc.w	sl, sl, sl
 801e4d2:	4283      	cmp	r3, r0
 801e4d4:	4bcf      	ldr	r3, [pc, #828]	@ (801e814 <pow+0x3d4>)
 801e4d6:	eb73 030a 	sbcs.w	r3, r3, sl
 801e4da:	e7eb      	b.n	801e4b4 <pow+0x74>
 801e4dc:	196d      	adds	r5, r5, r5
 801e4de:	48ce      	ldr	r0, [pc, #824]	@ (801e818 <pow+0x3d8>)
 801e4e0:	4164      	adcs	r4, r4
 801e4e2:	42ab      	cmp	r3, r5
 801e4e4:	eb70 0604 	sbcs.w	r6, r0, r4
 801e4e8:	d375      	bcc.n	801e5d6 <pow+0x196>
 801e4ea:	4281      	cmp	r1, r0
 801e4ec:	bf08      	it	eq
 801e4ee:	429a      	cmpeq	r2, r3
 801e4f0:	d171      	bne.n	801e5d6 <pow+0x196>
 801e4f2:	4aca      	ldr	r2, [pc, #808]	@ (801e81c <pow+0x3dc>)
 801e4f4:	4294      	cmp	r4, r2
 801e4f6:	bf08      	it	eq
 801e4f8:	429d      	cmpeq	r5, r3
 801e4fa:	d0dd      	beq.n	801e4b8 <pow+0x78>
 801e4fc:	4294      	cmp	r4, r2
 801e4fe:	ea6f 0a0a 	mvn.w	sl, sl
 801e502:	bf34      	ite	cc
 801e504:	2400      	movcc	r4, #0
 801e506:	2401      	movcs	r4, #1
 801e508:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801e50c:	4554      	cmp	r4, sl
 801e50e:	f040 81dc 	bne.w	801e8ca <pow+0x48a>
 801e512:	ee21 0b01 	vmul.f64	d0, d1, d1
 801e516:	b007      	add	sp, #28
 801e518:	ecbd 8b0a 	vpop	{d8-d12}
 801e51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e520:	196f      	adds	r7, r5, r5
 801e522:	eb44 0904 	adc.w	r9, r4, r4
 801e526:	1e7a      	subs	r2, r7, #1
 801e528:	f169 0300 	sbc.w	r3, r9, #0
 801e52c:	4593      	cmp	fp, r2
 801e52e:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e532:	d225      	bcs.n	801e580 <pow+0x140>
 801e534:	ee20 0b00 	vmul.f64	d0, d0, d0
 801e538:	2c00      	cmp	r4, #0
 801e53a:	da13      	bge.n	801e564 <pow+0x124>
 801e53c:	4651      	mov	r1, sl
 801e53e:	f7ff ff49 	bl	801e3d4 <checkint>
 801e542:	2801      	cmp	r0, #1
 801e544:	d10e      	bne.n	801e564 <pow+0x124>
 801e546:	eeb1 0b40 	vneg.f64	d0, d0
 801e54a:	ea57 0909 	orrs.w	r9, r7, r9
 801e54e:	d10b      	bne.n	801e568 <pow+0x128>
 801e550:	f1ba 0f00 	cmp.w	sl, #0
 801e554:	dadf      	bge.n	801e516 <pow+0xd6>
 801e556:	b007      	add	sp, #28
 801e558:	ecbd 8b0a 	vpop	{d8-d12}
 801e55c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e560:	f000 b9f2 	b.w	801e948 <__math_divzero>
 801e564:	2000      	movs	r0, #0
 801e566:	e7f0      	b.n	801e54a <pow+0x10a>
 801e568:	f1ba 0f00 	cmp.w	sl, #0
 801e56c:	dad3      	bge.n	801e516 <pow+0xd6>
 801e56e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e572:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e576:	ed8d 7b00 	vstr	d7, [sp]
 801e57a:	ed9d 0b00 	vldr	d0, [sp]
 801e57e:	e7ca      	b.n	801e516 <pow+0xd6>
 801e580:	2c00      	cmp	r4, #0
 801e582:	da2b      	bge.n	801e5dc <pow+0x19c>
 801e584:	4651      	mov	r1, sl
 801e586:	f7ff ff25 	bl	801e3d4 <checkint>
 801e58a:	b930      	cbnz	r0, 801e59a <pow+0x15a>
 801e58c:	b007      	add	sp, #28
 801e58e:	ecbd 8b0a 	vpop	{d8-d12}
 801e592:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e596:	f000 b9ef 	b.w	801e978 <__math_invalid>
 801e59a:	1e41      	subs	r1, r0, #1
 801e59c:	4248      	negs	r0, r1
 801e59e:	4148      	adcs	r0, r1
 801e5a0:	0480      	lsls	r0, r0, #18
 801e5a2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e5a6:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801e5aa:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801e5ae:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801e5b2:	2b7f      	cmp	r3, #127	@ 0x7f
 801e5b4:	d92d      	bls.n	801e612 <pow+0x1d2>
 801e5b6:	4b96      	ldr	r3, [pc, #600]	@ (801e810 <pow+0x3d0>)
 801e5b8:	2000      	movs	r0, #0
 801e5ba:	429c      	cmp	r4, r3
 801e5bc:	bf08      	it	eq
 801e5be:	4285      	cmpeq	r5, r0
 801e5c0:	f43f af7a 	beq.w	801e4b8 <pow+0x78>
 801e5c4:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801e5c8:	428a      	cmp	r2, r1
 801e5ca:	d80c      	bhi.n	801e5e6 <pow+0x1a6>
 801e5cc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e5d0:	42a8      	cmp	r0, r5
 801e5d2:	41a3      	sbcs	r3, r4
 801e5d4:	d204      	bcs.n	801e5e0 <pow+0x1a0>
 801e5d6:	ee31 0b00 	vadd.f64	d0, d1, d0
 801e5da:	e79c      	b.n	801e516 <pow+0xd6>
 801e5dc:	2000      	movs	r0, #0
 801e5de:	e7e4      	b.n	801e5aa <pow+0x16a>
 801e5e0:	ee30 0b41 	vsub.f64	d0, d0, d1
 801e5e4:	e797      	b.n	801e516 <pow+0xd6>
 801e5e6:	2d01      	cmp	r5, #1
 801e5e8:	eb74 0303 	sbcs.w	r3, r4, r3
 801e5ec:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801e5f0:	bf34      	ite	cc
 801e5f2:	2301      	movcc	r3, #1
 801e5f4:	2300      	movcs	r3, #0
 801e5f6:	4296      	cmp	r6, r2
 801e5f8:	bf8c      	ite	hi
 801e5fa:	2600      	movhi	r6, #0
 801e5fc:	2601      	movls	r6, #1
 801e5fe:	42b3      	cmp	r3, r6
 801e600:	f000 809c 	beq.w	801e73c <pow+0x2fc>
 801e604:	b007      	add	sp, #28
 801e606:	ecbd 8b0a 	vpop	{d8-d12}
 801e60a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e60e:	f000 b993 	b.w	801e938 <__math_oflow>
 801e612:	f1bc 0f00 	cmp.w	ip, #0
 801e616:	d10a      	bne.n	801e62e <pow+0x1ee>
 801e618:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801e800 <pow+0x3c0>
 801e61c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801e620:	ec53 2b17 	vmov	r2, r3, d7
 801e624:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801e628:	4615      	mov	r5, r2
 801e62a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801e62e:	4a7c      	ldr	r2, [pc, #496]	@ (801e820 <pow+0x3e0>)
 801e630:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e634:	4422      	add	r2, r4
 801e636:	1513      	asrs	r3, r2, #20
 801e638:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801e63c:	ee03 3a10 	vmov	s6, r3
 801e640:	0d12      	lsrs	r2, r2, #20
 801e642:	4b78      	ldr	r3, [pc, #480]	@ (801e824 <pow+0x3e4>)
 801e644:	0512      	lsls	r2, r2, #20
 801e646:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801e64a:	1aa7      	subs	r7, r4, r2
 801e64c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801e650:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801e654:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801e658:	1e2e      	subs	r6, r5, #0
 801e65a:	ec47 6b14 	vmov	d4, r6, r7
 801e65e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801e662:	eea4 6b05 	vfma.f64	d6, d4, d5
 801e666:	ed93 5b00 	vldr	d5, [r3]
 801e66a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801e66e:	eea3 2b05 	vfma.f64	d2, d3, d5
 801e672:	ed93 5b02 	vldr	d5, [r3, #8]
 801e676:	ee36 4b02 	vadd.f64	d4, d6, d2
 801e67a:	ee32 2b44 	vsub.f64	d2, d2, d4
 801e67e:	eea3 7b05 	vfma.f64	d7, d3, d5
 801e682:	ed93 5b04 	vldr	d5, [r3, #16]
 801e686:	ee32 2b06 	vadd.f64	d2, d2, d6
 801e68a:	ee37 7b02 	vadd.f64	d7, d7, d2
 801e68e:	ee26 5b05 	vmul.f64	d5, d6, d5
 801e692:	ee26 0b05 	vmul.f64	d0, d6, d5
 801e696:	ee34 8b00 	vadd.f64	d8, d4, d0
 801e69a:	eeb0 9b40 	vmov.f64	d9, d0
 801e69e:	ee34 4b48 	vsub.f64	d4, d4, d8
 801e6a2:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801e6a6:	ee34 ab00 	vadd.f64	d10, d4, d0
 801e6aa:	ed93 5b06 	vldr	d5, [r3, #24]
 801e6ae:	ee26 bb00 	vmul.f64	d11, d6, d0
 801e6b2:	ee37 7b09 	vadd.f64	d7, d7, d9
 801e6b6:	ed93 4b08 	vldr	d4, [r3, #32]
 801e6ba:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801e6be:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801e6c2:	eea6 5b04 	vfma.f64	d5, d6, d4
 801e6c6:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801e6ca:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801e6ce:	eea6 4b03 	vfma.f64	d4, d6, d3
 801e6d2:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801e6d6:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801e6da:	eea0 4b03 	vfma.f64	d4, d0, d3
 801e6de:	eea0 5b04 	vfma.f64	d5, d0, d4
 801e6e2:	eeab 7b05 	vfma.f64	d7, d11, d5
 801e6e6:	ee38 4b07 	vadd.f64	d4, d8, d7
 801e6ea:	ee21 6b04 	vmul.f64	d6, d1, d4
 801e6ee:	ee16 3a90 	vmov	r3, s13
 801e6f2:	eeb0 5b46 	vmov.f64	d5, d6
 801e6f6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801e6fa:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801e6fe:	18b2      	adds	r2, r6, r2
 801e700:	2a3e      	cmp	r2, #62	@ 0x3e
 801e702:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801e706:	ee38 8b44 	vsub.f64	d8, d8, d4
 801e70a:	ee38 8b07 	vadd.f64	d8, d8, d7
 801e70e:	eea1 5b08 	vfma.f64	d5, d1, d8
 801e712:	d91b      	bls.n	801e74c <pow+0x30c>
 801e714:	2a00      	cmp	r2, #0
 801e716:	da0b      	bge.n	801e730 <pow+0x2f0>
 801e718:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e71c:	ee36 0b00 	vadd.f64	d0, d6, d0
 801e720:	2800      	cmp	r0, #0
 801e722:	f43f aef8 	beq.w	801e516 <pow+0xd6>
 801e726:	eeb1 0b40 	vneg.f64	d0, d0
 801e72a:	e6f4      	b.n	801e516 <pow+0xd6>
 801e72c:	2000      	movs	r0, #0
 801e72e:	e77e      	b.n	801e62e <pow+0x1ee>
 801e730:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801e734:	d909      	bls.n	801e74a <pow+0x30a>
 801e736:	2b00      	cmp	r3, #0
 801e738:	f6bf af64 	bge.w	801e604 <pow+0x1c4>
 801e73c:	b007      	add	sp, #28
 801e73e:	ecbd 8b0a 	vpop	{d8-d12}
 801e742:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e746:	f000 b8ef 	b.w	801e928 <__math_uflow>
 801e74a:	2600      	movs	r6, #0
 801e74c:	4936      	ldr	r1, [pc, #216]	@ (801e828 <pow+0x3e8>)
 801e74e:	ed91 4b02 	vldr	d4, [r1, #8]
 801e752:	ed91 3b00 	vldr	d3, [r1]
 801e756:	eeb0 7b44 	vmov.f64	d7, d4
 801e75a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801e75e:	ee17 5a10 	vmov	r5, s14
 801e762:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e766:	ed91 4b04 	vldr	d4, [r1, #16]
 801e76a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801e76e:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e772:	ed91 4b06 	vldr	d4, [r1, #24]
 801e776:	18dc      	adds	r4, r3, r3
 801e778:	f104 030f 	add.w	r3, r4, #15
 801e77c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801e780:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e784:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801e788:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e78c:	ee25 6b05 	vmul.f64	d6, d5, d5
 801e790:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801e794:	ed91 4b08 	vldr	d4, [r1, #32]
 801e798:	ee35 7b07 	vadd.f64	d7, d5, d7
 801e79c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801e7a0:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e7a4:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801e7a8:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e7ac:	ee26 6b06 	vmul.f64	d6, d6, d6
 801e7b0:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801e7b4:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801e7b8:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801e7bc:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e7c0:	1940      	adds	r0, r0, r5
 801e7c2:	2700      	movs	r7, #0
 801e7c4:	eb17 020c 	adds.w	r2, r7, ip
 801e7c8:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801e7cc:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e7d0:	2e00      	cmp	r6, #0
 801e7d2:	d175      	bne.n	801e8c0 <pow+0x480>
 801e7d4:	42bd      	cmp	r5, r7
 801e7d6:	db29      	blt.n	801e82c <pow+0x3ec>
 801e7d8:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801e7dc:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801e7e0:	4610      	mov	r0, r2
 801e7e2:	ec41 0b10 	vmov	d0, r0, r1
 801e7e6:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e7ea:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801e808 <pow+0x3c8>
 801e7ee:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e7f2:	b007      	add	sp, #28
 801e7f4:	ecbd 8b0a 	vpop	{d8-d12}
 801e7f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7fc:	f000 b8d4 	b.w	801e9a8 <__math_check_oflow>
 801e800:	00000000 	.word	0x00000000
 801e804:	43300000 	.word	0x43300000
 801e808:	00000000 	.word	0x00000000
 801e80c:	7f000000 	.word	0x7f000000
 801e810:	3ff00000 	.word	0x3ff00000
 801e814:	fff00000 	.word	0xfff00000
 801e818:	ffe00000 	.word	0xffe00000
 801e81c:	7fe00000 	.word	0x7fe00000
 801e820:	c0196aab 	.word	0xc0196aab
 801e824:	0801ef28 	.word	0x0801ef28
 801e828:	0801ff70 	.word	0x0801ff70
 801e82c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801e830:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801e834:	4610      	mov	r0, r2
 801e836:	ec41 0b15 	vmov	d5, r0, r1
 801e83a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801e83e:	ee27 6b05 	vmul.f64	d6, d7, d5
 801e842:	ee35 7b06 	vadd.f64	d7, d5, d6
 801e846:	eeb0 4bc7 	vabs.f64	d4, d7
 801e84a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801e84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e852:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801e8d0 <pow+0x490>
 801e856:	d52a      	bpl.n	801e8ae <pow+0x46e>
 801e858:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e85c:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e864:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e868:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801e86c:	bf58      	it	pl
 801e86e:	eeb0 4b43 	vmovpl.f64	d4, d3
 801e872:	ee37 3b04 	vadd.f64	d3, d7, d4
 801e876:	ee34 6b43 	vsub.f64	d6, d4, d3
 801e87a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e87e:	ee36 6b05 	vadd.f64	d6, d6, d5
 801e882:	ee36 6b03 	vadd.f64	d6, d6, d3
 801e886:	ee36 7b44 	vsub.f64	d7, d6, d4
 801e88a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e892:	d104      	bne.n	801e89e <pow+0x45e>
 801e894:	4632      	mov	r2, r6
 801e896:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801e89a:	ec43 2b17 	vmov	d7, r2, r3
 801e89e:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e8a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e8a6:	ee26 6b00 	vmul.f64	d6, d6, d0
 801e8aa:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e8ae:	ee27 0b00 	vmul.f64	d0, d7, d0
 801e8b2:	b007      	add	sp, #28
 801e8b4:	ecbd 8b0a 	vpop	{d8-d12}
 801e8b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8bc:	f000 b86b 	b.w	801e996 <__math_check_uflow>
 801e8c0:	ec43 2b10 	vmov	d0, r2, r3
 801e8c4:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e8c8:	e625      	b.n	801e516 <pow+0xd6>
 801e8ca:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801e8d8 <pow+0x498>
 801e8ce:	e622      	b.n	801e516 <pow+0xd6>
 801e8d0:	00000000 	.word	0x00000000
 801e8d4:	00100000 	.word	0x00100000
	...

0801e8e0 <__ieee754_sqrt>:
 801e8e0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801e8e4:	4770      	bx	lr

0801e8e6 <with_errno>:
 801e8e6:	b510      	push	{r4, lr}
 801e8e8:	ed2d 8b02 	vpush	{d8}
 801e8ec:	eeb0 8b40 	vmov.f64	d8, d0
 801e8f0:	4604      	mov	r4, r0
 801e8f2:	f7ff fc23 	bl	801e13c <__errno>
 801e8f6:	eeb0 0b48 	vmov.f64	d0, d8
 801e8fa:	ecbd 8b02 	vpop	{d8}
 801e8fe:	6004      	str	r4, [r0, #0]
 801e900:	bd10      	pop	{r4, pc}

0801e902 <xflow>:
 801e902:	b082      	sub	sp, #8
 801e904:	b158      	cbz	r0, 801e91e <xflow+0x1c>
 801e906:	eeb1 7b40 	vneg.f64	d7, d0
 801e90a:	ed8d 7b00 	vstr	d7, [sp]
 801e90e:	ed9d 7b00 	vldr	d7, [sp]
 801e912:	2022      	movs	r0, #34	@ 0x22
 801e914:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e918:	b002      	add	sp, #8
 801e91a:	f7ff bfe4 	b.w	801e8e6 <with_errno>
 801e91e:	eeb0 7b40 	vmov.f64	d7, d0
 801e922:	e7f2      	b.n	801e90a <xflow+0x8>
 801e924:	0000      	movs	r0, r0
	...

0801e928 <__math_uflow>:
 801e928:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e930 <__math_uflow+0x8>
 801e92c:	f7ff bfe9 	b.w	801e902 <xflow>
 801e930:	00000000 	.word	0x00000000
 801e934:	10000000 	.word	0x10000000

0801e938 <__math_oflow>:
 801e938:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e940 <__math_oflow+0x8>
 801e93c:	f7ff bfe1 	b.w	801e902 <xflow>
 801e940:	00000000 	.word	0x00000000
 801e944:	70000000 	.word	0x70000000

0801e948 <__math_divzero>:
 801e948:	b082      	sub	sp, #8
 801e94a:	2800      	cmp	r0, #0
 801e94c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e950:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e954:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801e958:	ed8d 7b00 	vstr	d7, [sp]
 801e95c:	ed9d 0b00 	vldr	d0, [sp]
 801e960:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801e970 <__math_divzero+0x28>
 801e964:	2022      	movs	r0, #34	@ 0x22
 801e966:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801e96a:	b002      	add	sp, #8
 801e96c:	f7ff bfbb 	b.w	801e8e6 <with_errno>
	...

0801e978 <__math_invalid>:
 801e978:	eeb0 7b40 	vmov.f64	d7, d0
 801e97c:	eeb4 7b47 	vcmp.f64	d7, d7
 801e980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e984:	ee30 6b40 	vsub.f64	d6, d0, d0
 801e988:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801e98c:	d602      	bvs.n	801e994 <__math_invalid+0x1c>
 801e98e:	2021      	movs	r0, #33	@ 0x21
 801e990:	f7ff bfa9 	b.w	801e8e6 <with_errno>
 801e994:	4770      	bx	lr

0801e996 <__math_check_uflow>:
 801e996:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e99e:	d102      	bne.n	801e9a6 <__math_check_uflow+0x10>
 801e9a0:	2022      	movs	r0, #34	@ 0x22
 801e9a2:	f7ff bfa0 	b.w	801e8e6 <with_errno>
 801e9a6:	4770      	bx	lr

0801e9a8 <__math_check_oflow>:
 801e9a8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801e9c8 <__math_check_oflow+0x20>
 801e9ac:	eeb0 7bc0 	vabs.f64	d7, d0
 801e9b0:	eeb4 7b46 	vcmp.f64	d7, d6
 801e9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9b8:	dd02      	ble.n	801e9c0 <__math_check_oflow+0x18>
 801e9ba:	2022      	movs	r0, #34	@ 0x22
 801e9bc:	f7ff bf93 	b.w	801e8e6 <with_errno>
 801e9c0:	4770      	bx	lr
 801e9c2:	bf00      	nop
 801e9c4:	f3af 8000 	nop.w
 801e9c8:	ffffffff 	.word	0xffffffff
 801e9cc:	7fefffff 	.word	0x7fefffff

0801e9d0 <_init>:
 801e9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9d2:	bf00      	nop
 801e9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e9d6:	bc08      	pop	{r3}
 801e9d8:	469e      	mov	lr, r3
 801e9da:	4770      	bx	lr

0801e9dc <_fini>:
 801e9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9de:	bf00      	nop
 801e9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e9e2:	bc08      	pop	{r3}
 801e9e4:	469e      	mov	lr, r3
 801e9e6:	4770      	bx	lr
