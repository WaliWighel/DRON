
DRON 2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e698  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001df8  0801e968  0801e968  00024968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020760  08020760  00026760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020768  08020768  00026768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0802076c  0802076c  0002676c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08020770  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000078  080207e8  00027078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  080207e8  000278ac  2**0
                  ALLOC
  9 .IRAM         000041fe  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  00049710  2**0
                  CONTENTS
 11 .RAM1         00021860  24000eb0  24000eb0  00027eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00049710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031ed1  00000000  00000000  0004973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ee5  00000000  00000000  0007b60f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002460  00000000  00000000  000814f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c2d  00000000  00000000  00083958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c9b4  00000000  00000000  00085585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000387e3  00000000  00000000  000c1f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e1b5  00000000  00000000  000fa71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  002688d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f44  00000000  00000000  00268914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00272858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e950 	.word	0x0801e950

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801e950 	.word	0x0801e950

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:

static I2C_HandleTypeDef *hi2c_BMP180;
extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00e fa4a 	bl	800eb54 <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <BMP180_init+0x38>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	BMP180_read_calliberation_data();
 80006de:	f000 f8dd 	bl	800089c <BMP180_read_calliberation_data>

	uint8_t status = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 80006e6:	f7ff ffdb 	bl	80006a0 <BMP180_read_ID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b55      	cmp	r3, #85	@ 0x55
 80006f2:	d002      	beq.n	80006fa <BMP180_init+0x2a>
		status = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <BMP180_init+0x2e>
	}
	else{
		status = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000094 	.word	0x24000094

0800070c <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <BMP180_READ_temp+0x3c>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	22f6      	movs	r2, #246	@ 0xf6
 8000726:	21ee      	movs	r1, #238	@ 0xee
 8000728:	f00e fa14 	bl	800eb54 <HAL_I2C_Mem_Read>
	UT = ((data[0]<<8) | data[1]);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	797a      	ldrb	r2, [r7, #5]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <BMP180_READ_temp+0x40>)
 8000736:	6013      	str	r3, [r2, #0]
	return UT;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <BMP180_READ_temp+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000094 	.word	0x24000094
 800074c:	000000c0 	.word	0x000000c0

08000750 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_pres+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2303      	movs	r3, #3
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	22f6      	movs	r2, #246	@ 0xf6
 800076c:	21ee      	movs	r1, #238	@ 0xee
 800076e:	f00e f9f1 	bl	800eb54 <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4313      	orrs	r3, r2
 8000780:	115b      	asrs	r3, r3, #5
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000094 	.word	0x24000094

08000790 <BMP180_GET_temp_IT>:
void BMP180_READ_pres_IT(void){
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180_Press_IT, 3);
	BMP180_IRQ = 2;
}

uint16_t BMP180_GET_temp_IT(void){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	UT = ((BMP180_Temp_IT[0]<<8) | BMP180_Temp_IT[1]);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 800079c:	7852      	ldrb	r2, [r2, #1]
 800079e:	4313      	orrs	r3, r2
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a2:	6013      	str	r3, [r2, #0]
	return UT;
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	000000f0 	.word	0x000000f0
 80007b8:	000000c0 	.word	0x000000c0

080007bc <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return (((BMP180_Press_IT[0]<<16)|(BMP180_Press_IT[1]<<8)|BMP180_Press_IT[2]) >> 5);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	041a      	lsls	r2, r3, #16
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007d0:	7892      	ldrb	r2, [r2, #2]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	115b      	asrs	r3, r3, #5
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	000000ec 	.word	0x000000ec

080007e4 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80007ea:	232e      	movs	r3, #46	@ 0x2e
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <BMP180_start_measurment_temp+0x2c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2364      	movs	r3, #100	@ 0x64
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2301      	movs	r3, #1
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	22f4      	movs	r2, #244	@ 0xf4
 8000802:	21ee      	movs	r1, #238	@ 0xee
 8000804:	f00e f892 	bl	800e92c <HAL_I2C_Mem_Write>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000094 	.word	0x24000094

08000814 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 800081a:	23f4      	movs	r3, #244	@ 0xf4
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <BMP180_start_measurment_pres+0x2c>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	22f4      	movs	r2, #244	@ 0xf4
 8000832:	21ee      	movs	r1, #238	@ 0xee
 8000834:	f00e f87a 	bl	800e92c <HAL_I2C_Mem_Write>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000094 	.word	0x24000094

08000844 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 800084a:	23f4      	movs	r3, #244	@ 0xf4
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <BMP180_start_measurment_pres_IT+0x28>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	22f4      	movs	r2, #244	@ 0xf4
 800085e:	21ee      	movs	r1, #238	@ 0xee
 8000860:	f00e fa92 	bl	800ed88 <HAL_I2C_Mem_Write_IT>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000094 	.word	0x24000094

08000870 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 8000876:	232e      	movs	r3, #46	@ 0x2e
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <BMP180_start_measurment_temp_IT+0x28>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	22f4      	movs	r2, #244	@ 0xf4
 800088a:	21ee      	movs	r1, #238	@ 0xee
 800088c:	f00e fa7c 	bl	800ed88 <HAL_I2C_Mem_Write_IT>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000094 	.word	0x24000094

0800089c <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 80008b4:	23aa      	movs	r3, #170	@ 0xaa
 80008b6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 80008b8:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <BMP180_read_calliberation_data+0x10c>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	8afa      	ldrh	r2, [r7, #22]
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	2316      	movs	r3, #22
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	463b      	mov	r3, r7
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	21ee      	movs	r1, #238	@ 0xee
 80008ce:	f00e f941 	bl	800eb54 <HAL_I2C_Mem_Read>

	AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80008d2:	783b      	ldrb	r3, [r7, #0]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <BMP180_read_calliberation_data+0x110>)
 80008e2:	801a      	strh	r2, [r3, #0]
	AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <BMP180_read_calliberation_data+0x114>)
 80008f4:	801a      	strh	r2, [r3, #0]
	AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 80008f6:	793b      	ldrb	r3, [r7, #4]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <BMP180_read_calliberation_data+0x118>)
 8000906:	801a      	strh	r2, [r3, #0]
	AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <BMP180_read_calliberation_data+0x11c>)
 800091a:	801a      	strh	r2, [r3, #0]
	AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	7a7b      	ldrb	r3, [r7, #9]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <BMP180_read_calliberation_data+0x120>)
 800092e:	801a      	strh	r2, [r3, #0]
	AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <BMP180_read_calliberation_data+0x124>)
 8000942:	801a      	strh	r2, [r3, #0]
	B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000944:	7b3b      	ldrb	r3, [r7, #12]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <BMP180_read_calliberation_data+0x128>)
 8000954:	801a      	strh	r2, [r3, #0]
	B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <BMP180_read_calliberation_data+0x12c>)
 8000966:	801a      	strh	r2, [r3, #0]
	MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000968:	7c3b      	ldrb	r3, [r7, #16]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7c7b      	ldrb	r3, [r7, #17]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21a      	sxth	r2, r3
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <BMP180_read_calliberation_data+0x130>)
 8000978:	801a      	strh	r2, [r3, #0]
	MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 800097a:	7cbb      	ldrb	r3, [r7, #18]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <BMP180_read_calliberation_data+0x134>)
 800098a:	801a      	strh	r2, [r3, #0]
	MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 800098c:	7d3b      	ldrb	r3, [r7, #20]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	7d7b      	ldrb	r3, [r7, #21]
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <BMP180_read_calliberation_data+0x138>)
 800099c:	801a      	strh	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000094 	.word	0x24000094
 80009ac:	0000009a 	.word	0x0000009a
 80009b0:	0000009c 	.word	0x0000009c
 80009b4:	0000009e 	.word	0x0000009e
 80009b8:	00000094 	.word	0x00000094
 80009bc:	00000096 	.word	0x00000096
 80009c0:	00000098 	.word	0x00000098
 80009c4:	000000a0 	.word	0x000000a0
 80009c8:	000000a2 	.word	0x000000a2
 80009cc:	000000a4 	.word	0x000000a4
 80009d0:	000000a6 	.word	0x000000a6
 80009d4:	000000a8 	.word	0x000000a8

080009d8 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]

	X1 = ((temperature - AC6) * AC5)/32768;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <BMP180_GET_temp+0x98>)
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <BMP180_GET_temp+0x9c>)
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da03      	bge.n	80009fe <BMP180_GET_temp+0x26>
 80009f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80009fa:	441a      	add	r2, r3
 80009fc:	4613      	mov	r3, r2
 80009fe:	13db      	asrs	r3, r3, #15
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a04:	601a      	str	r2, [r3, #0]
	X2 = (MC * 2048)/(X1 + MD);
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <BMP180_GET_temp+0xa4>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	02da      	lsls	r2, r3, #11
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <BMP180_GET_temp+0xa8>)
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a20:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a22:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a16      	ldr	r2, [pc, #88]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a30:	6013      	str	r3, [r2, #0]
	temp = (B5 + 8)/16;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3308      	adds	r3, #8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da00      	bge.n	8000a3e <BMP180_GET_temp+0x66>
 8000a3c:	330f      	adds	r3, #15
 8000a3e:	111b      	asrs	r3, r3, #4
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
	return temp/10.0;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	00000098 	.word	0x00000098
 8000a74:	00000096 	.word	0x00000096
 8000a78:	000000c4 	.word	0x000000c4
 8000a7c:	000000a6 	.word	0x000000a6
 8000a80:	000000a8 	.word	0x000000a8
 8000a84:	000000c8 	.word	0x000000c8
 8000a88:	000000cc 	.word	0x000000cc
 8000a8c:	000000dc 	.word	0x000000dc

08000a90 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]

	UP = BMP180_READ_pres();
 8000a9a:	f7ff fe59 	bl	8000750 <BMP180_READ_pres>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a9c      	ldr	r2, [pc, #624]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000aa2:	6013      	str	r3, [r2, #0]
	X1 = (((UT-AC6) * AC5)/32768);//
 8000aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8000d18 <BMP180_GET_pres+0x288>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8000d1c <BMP180_GET_pres+0x28c>)
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	4a9c      	ldr	r2, [pc, #624]	@ (8000d20 <BMP180_GET_pres+0x290>)
 8000ab0:	8812      	ldrh	r2, [r2, #0]
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da03      	bge.n	8000ac2 <BMP180_GET_pres+0x32>
 8000aba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000abe:	441a      	add	r2, r3
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	13db      	asrs	r3, r3, #15
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b97      	ldr	r3, [pc, #604]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ac8:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(2048)) / (X1+MD));
 8000aca:	4b97      	ldr	r3, [pc, #604]	@ (8000d28 <BMP180_GET_pres+0x298>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	02da      	lsls	r2, r3, #11
 8000ad2:	4b96      	ldr	r3, [pc, #600]	@ (8000d2c <BMP180_GET_pres+0x29c>)
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b92      	ldr	r3, [pc, #584]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	440b      	add	r3, r1
 8000ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ae4:	4a92      	ldr	r2, [pc, #584]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000ae6:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b90      	ldr	r3, [pc, #576]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a90      	ldr	r2, [pc, #576]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8000af6:	4b8f      	ldr	r3, [pc, #572]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000afe:	4a8e      	ldr	r2, [pc, #568]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b00:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(4096)))/(2048);
 8000b02:	4b8e      	ldr	r3, [pc, #568]	@ (8000d3c <BMP180_GET_pres+0x2ac>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da01      	bge.n	8000b1e <BMP180_GET_pres+0x8e>
 8000b1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	da01      	bge.n	8000b2c <BMP180_GET_pres+0x9c>
 8000b28:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b2c:	12db      	asrs	r3, r3, #11
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b7c      	ldr	r3, [pc, #496]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b32:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(2048);
 8000b34:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <BMP180_GET_pres+0x2b0>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da01      	bge.n	8000b4c <BMP180_GET_pres+0xbc>
 8000b48:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b4c:	12db      	asrs	r3, r3, #11
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b77      	ldr	r3, [pc, #476]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b52:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8000b54:	4b73      	ldr	r3, [pc, #460]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b75      	ldr	r3, [pc, #468]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a79      	ldr	r2, [pc, #484]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b60:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<3)+2)/4;
 8000b62:	4b79      	ldr	r3, [pc, #484]	@ (8000d48 <BMP180_GET_pres+0x2b8>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	4b76      	ldr	r3, [pc, #472]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	3302      	adds	r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da00      	bge.n	8000b7a <BMP180_GET_pres+0xea>
 8000b78:	3303      	adds	r3, #3
 8000b7a:	109b      	asrs	r3, r3, #2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b73      	ldr	r3, [pc, #460]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000b80:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/8192;
 8000b82:	4b73      	ldr	r3, [pc, #460]	@ (8000d50 <BMP180_GET_pres+0x2c0>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da03      	bge.n	8000b9e <BMP180_GET_pres+0x10e>
 8000b96:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	135b      	asrs	r3, r3, #13
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b60      	ldr	r3, [pc, #384]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ba4:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(4096)))/(65536);
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <BMP180_GET_pres+0x2c4>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4b62      	ldr	r3, [pc, #392]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a61      	ldr	r2, [pc, #388]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <BMP180_GET_pres+0x132>
 8000bbe:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000bc2:	131b      	asrs	r3, r3, #12
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <BMP180_GET_pres+0x144>
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	141b      	asrs	r3, r3, #16
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b55      	ldr	r3, [pc, #340]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000bda:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/4;
 8000bdc:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b53      	ldr	r3, [pc, #332]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da00      	bge.n	8000bee <BMP180_GET_pres+0x15e>
 8000bec:	3303      	adds	r3, #3
 8000bee:	109b      	asrs	r3, r3, #2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bf4:	601a      	str	r2, [r3, #0]
	B4 = AC4* (uint32_t)(X3+32768)/(32768);
 8000bf6:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <BMP180_GET_pres+0x2c8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	0bdb      	lsrs	r3, r3, #15
 8000c0a:	4a54      	ldr	r2, [pc, #336]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c0c:	6013      	str	r3, [r2, #0]
	B7 = ((uint32_t)UP-B3)*(50000>>3);
 8000c0e:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a4e      	ldr	r2, [pc, #312]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a4f      	ldr	r2, [pc, #316]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c22:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000){
 8000c24:	4b4e      	ldr	r3, [pc, #312]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0e      	blt.n	8000c4a <BMP180_GET_pres+0x1ba>
		pres = (B7*2)/B4;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	005a      	lsls	r2, r3, #1
 8000c32:	4b4a      	ldr	r3, [pc, #296]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c42:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c44:	edc3 7a00 	vstr	s15, [r3]
 8000c48:	e00d      	b.n	8000c66 <BMP180_GET_pres+0x1d6>
	}
	else{
		pres = (B7/B4)*2;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c60:	4b40      	ldr	r3, [pc, #256]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c62:	edc3 7a00 	vstr	s15, [r3]
	}
	X1 = (pres/(256))*(pres/(256));
 8000c66:	4b3f      	ldr	r3, [pc, #252]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c74:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c76:	edd3 6a00 	vldr	s13, [r3]
 8000c7a:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c90:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(65536);
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da03      	bge.n	8000caa <BMP180_GET_pres+0x21a>
 8000ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca6:	441a      	add	r2, r3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	141b      	asrs	r3, r3, #16
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cb0:	601a      	str	r2, [r3, #0]
	X2 = (-7357*pres)/(65536);
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000d6c <BMP180_GET_pres+0x2dc>
 8000cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000d70 <BMP180_GET_pres+0x2e0>
 8000cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 2a90 	vmov	r2, s15
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cd2:	601a      	str	r2, [r3, #0]
	pres = pres + (X1+X2+3791)/(16);
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da00      	bge.n	8000ce8 <BMP180_GET_pres+0x258>
 8000ce6:	330f      	adds	r3, #15
 8000ce8:	111b      	asrs	r3, r3, #4
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cfe:	edc3 7a00 	vstr	s15, [r3]
	return pres;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	ee07 3a90 	vmov	s15, r3
}
 8000d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	000000b4 	.word	0x000000b4
 8000d18:	000000c0 	.word	0x000000c0
 8000d1c:	00000098 	.word	0x00000098
 8000d20:	00000096 	.word	0x00000096
 8000d24:	000000c4 	.word	0x000000c4
 8000d28:	000000a6 	.word	0x000000a6
 8000d2c:	000000a8 	.word	0x000000a8
 8000d30:	000000c8 	.word	0x000000c8
 8000d34:	000000cc 	.word	0x000000cc
 8000d38:	000000d0 	.word	0x000000d0
 8000d3c:	000000a2 	.word	0x000000a2
 8000d40:	0000009c 	.word	0x0000009c
 8000d44:	000000d8 	.word	0x000000d8
 8000d48:	0000009a 	.word	0x0000009a
 8000d4c:	000000d4 	.word	0x000000d4
 8000d50:	0000009e 	.word	0x0000009e
 8000d54:	000000a0 	.word	0x000000a0
 8000d58:	00000094 	.word	0x00000094
 8000d5c:	000000ac 	.word	0x000000ac
 8000d60:	000000b0 	.word	0x000000b0
 8000d64:	000000e0 	.word	0x000000e0
 8000d68:	43800000 	.word	0x43800000
 8000d6c:	c5e5e800 	.word	0xc5e5e800
 8000d70:	47800000 	.word	0x47800000

08000d74 <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000d7c:	f7ff fd32 	bl	80007e4 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000d80:	200a      	movs	r0, #10
 8000d82:	f008 fbc7 	bl	8009514 <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000d86:	f7ff fcc1 	bl	800070c <BMP180_READ_temp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d90:	601a      	str	r2, [r3, #0]
	temp = BMP180_GET_temp(temperature);
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe1d 	bl	80009d8 <BMP180_GET_temp>
 8000d9e:	eef0 7a40 	vmov.f32	s15, s0
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <BMP180_CALIBRATION+0x74>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]
	BMP180_start_measurment_pres();
 8000da8:	f7ff fd34 	bl	8000814 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000dac:	201e      	movs	r0, #30
 8000dae:	f008 fbb1 	bl	8009514 <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000db2:	f7ff fccd 	bl	8000750 <BMP180_READ_pres>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
	pres = BMP180_GET_pres(pressure);
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe63 	bl	8000a90 <BMP180_GET_pres>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd0:	edc3 7a00 	vstr	s15, [r3]
	//}
	*firstpres = pres;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	000000b8 	.word	0x000000b8
 8000de8:	000000dc 	.word	0x000000dc
 8000dec:	000000bc 	.word	0x000000bc
 8000df0:	000000e0 	.word	0x000000e0

08000df4 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <BMP180_GET_height+0x38>)
 8000e02:	603b      	str	r3, [r7, #0]
	height = (ampritude/factor);
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <BMP180_GET_height+0x3c>)
 8000e06:	edd3 6a00 	vldr	s13, [r3]
 8000e0a:	ed97 7a00 	vldr	s14, [r7]
 8000e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e12:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ee07 3a90 	vmov	s15, r3
}
 8000e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	4134cccd 	.word	0x4134cccd
 8000e30:	000000e8 	.word	0x000000e8

08000e34 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
//	  if(a >  max_speed)
//	  {
//		  a =  max_speed;
//	  }

	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d907      	bls.n	8000e58 <ESC_1_SPEED+0x24>
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	bf28      	it	cs
 8000e52:	4613      	movcs	r3, r2
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	e001      	b.n	8000e5c <ESC_1_SPEED+0x28>
 8000e58:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e5c:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <ESC_1_SPEED+0x40>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	24000098 	.word	0x24000098

08000e78 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d907      	bls.n	8000e9c <ESC_2_SPEED+0x24>
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e92:	4293      	cmp	r3, r2
 8000e94:	bf28      	it	cs
 8000e96:	4613      	movcs	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	e001      	b.n	8000ea0 <ESC_2_SPEED+0x28>
 8000e9c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ea0:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <ESC_2_SPEED+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	24000098 	.word	0x24000098

08000ebc <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d907      	bls.n	8000ee0 <ESC_3_SPEED+0x24>
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	bf28      	it	cs
 8000eda:	4613      	movcs	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	e001      	b.n	8000ee4 <ESC_3_SPEED+0x28>
 8000ee0:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ee4:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <ESC_3_SPEED+0x40>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	24000098 	.word	0x24000098

08000f00 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d907      	bls.n	8000f24 <ESC_4_SPEED+0x24>
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	bf28      	it	cs
 8000f1e:	4613      	movcs	r3, r2
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	e001      	b.n	8000f28 <ESC_4_SPEED+0x28>
 8000f24:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f28:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a);
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <ESC_4_SPEED+0x40>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	24000098 	.word	0x24000098

08000f44 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);//450Hz
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f015 fb63 	bl	8016624 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2104      	movs	r1, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f015 fb5d 	bl	8016624 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f015 fb57 	bl	8016624 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f015 fb51 	bl	8016624 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f98:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fa4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <ESC_INT+0x8c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <ESC_INT+0x90>)
 8000fba:	f00d fbe7 	bl	800e78c <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000fbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc2:	f008 faa7 	bl	8009514 <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000098 	.word	0x24000098
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <HMC5883L_Init>:
static I2C_HandleTypeDef *hi2c_HMC5883L;

extern uint8_t HMC5883L_Data_IT[6];
extern uint8_t HMC583L_IRQ;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8000fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <HMC5883L_Init+0xb4>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			30 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xF0;
 8000fea:	23f0      	movs	r3, #240	@ 0xf0
 8000fec:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 8000fee:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HMC5883L_Init+0xb4>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	213c      	movs	r1, #60	@ 0x3c
 8001006:	f00d fc91 	bl	800e92c <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x32;
 800100a:	2332      	movs	r3, #50	@ 0x32
 800100c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <HMC5883L_Init+0xb4>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 030f 	add.w	r3, r7, #15
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2201      	movs	r2, #1
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	f00d fc81 	bl	800e92c <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x80;
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <HMC5883L_Init+0xb4>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2202      	movs	r2, #2
 8001044:	213c      	movs	r1, #60	@ 0x3c
 8001046:	f00d fc71 	bl	800e92c <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HMC5883L_Init+0xb4>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	f107 030e 	add.w	r3, r7, #14
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	220a      	movs	r2, #10
 8001064:	213c      	movs	r1, #60	@ 0x3c
 8001066:	f00d fd75 	bl	800eb54 <HAL_I2C_Mem_Read>

	if(status != 0x48){
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	2b48      	cmp	r3, #72	@ 0x48
 800106e:	d002      	beq.n	8001076 <HMC5883L_Init+0x9e>
		status = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	73bb      	strb	r3, [r7, #14]
 8001074:	e001      	b.n	800107a <HMC5883L_Init+0xa2>
	}
	else{
		status = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f008 fa4a 	bl	8009514 <HAL_Delay>

	return status;
 8001080:	7bbb      	ldrb	r3, [r7, #14]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2400009c 	.word	0x2400009c

08001090 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 8001096:	23b6      	movs	r3, #182	@ 0xb6
 8001098:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, data, 6, 1);
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HMC5883L_Get_Z_Start+0x40>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2306      	movs	r3, #6
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	463b      	mov	r3, r7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2205      	movs	r2, #5
 80010ae:	213c      	movs	r1, #60	@ 0x3c
 80010b0:	f00d fd50 	bl	800eb54 <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[4]<<8) | data[5];
 80010b4:	793b      	ldrb	r3, [r7, #4]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	797b      	ldrb	r3, [r7, #5]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2400009c 	.word	0x2400009c

080010d4 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, (uint8_t *)HMC5883L_Data_IT, 6);
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HMC5883L_Get_Z_Start_IT+0x28>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	2306      	movs	r3, #6
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <HMC5883L_Get_Z_Start_IT+0x2c>)
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2205      	movs	r2, #5
 80010ea:	213c      	movs	r1, #60	@ 0x3c
 80010ec:	f00d fed6 	bl	800ee9c <HAL_I2C_Mem_Read_IT>
	HMC583L_IRQ = 1;
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <HMC5883L_Get_Z_Start_IT+0x30>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2400009c 	.word	0x2400009c
 8001100:	00000064 	.word	0x00000064
 8001104:	000041ed 	.word	0x000041ed

08001108 <HMC5883L_Get_Z_End_IT>:

int16_t HMC5883L_Get_Z_End_IT(void){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
	int16_t fulldata = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	80fb      	strh	r3, [r7, #6]

	fulldata = ((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5];
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 800111c:	795b      	ldrb	r3, [r3, #5]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 8001124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	00000064 	.word	0x00000064

08001138 <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 8001138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	e014      	b.n	800117c <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 8001152:	f7ff ff9d 	bl	8001090 <HMC5883L_Get_Z_Start>
 8001156:	4603      	mov	r3, r0
 8001158:	b21b      	sxth	r3, r3
 800115a:	17da      	asrs	r2, r3, #31
 800115c:	461c      	mov	r4, r3
 800115e:	4615      	mov	r5, r2
 8001160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001164:	eb12 0804 	adds.w	r8, r2, r4
 8001168:	eb43 0905 	adc.w	r9, r3, r5
 800116c:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 8001170:	2064      	movs	r0, #100	@ 0x64
 8001172:	f008 f9cf 	bl	8009514 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b09      	cmp	r3, #9
 8001180:	dde7      	ble.n	8001152 <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 8001182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001186:	f04f 020a 	mov.w	r2, #10
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	f7ff f8bf 	bl	8000310 <__aeabi_ldivmod>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	b213      	sxth	r3, r2
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080011a4 <MPU6050_INIT>:
//extern float xval;
//extern float yval;
//extern float zval;


uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 80011ac:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <MPU6050_INIT+0x58>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 80011b2:	f000 f825 	bl	8001200 <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 80011b6:	f000 f88f 	bl	80012d8 <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 80011ba:	2005      	movs	r0, #5
 80011bc:	f000 f838 	bl	8001230 <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 80011c0:	2008      	movs	r0, #8
 80011c2:	f000 f851 	bl	8001268 <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 80011c6:	2008      	movs	r0, #8
 80011c8:	f000 f86a 	bl	80012a0 <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 80011cc:	f000 fd40 	bl	8001c50 <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 80011d0:	f000 f89a 	bl	8001308 <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 80011d4:	200a      	movs	r0, #10
 80011d6:	f008 f99d 	bl	8009514 <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 80011da:	f000 fd21 	bl	8001c20 <MPU6050_READ_ID>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b68      	cmp	r3, #104	@ 0x68
 80011e6:	d002      	beq.n	80011ee <MPU6050_INIT+0x4a>
		status = 0;//error
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e001      	b.n	80011f2 <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	240000a0 	.word	0x240000a0

08001200 <MPU6050_RESET>:


void MPU6050_RESET(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <MPU6050_RESET+0x2c>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2301      	movs	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	226b      	movs	r2, #107	@ 0x6b
 800121e:	21d0      	movs	r1, #208	@ 0xd0
 8001220:	f00d fb84 	bl	800e92c <HAL_I2C_Mem_Write>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	240000a0 	.word	0x240000a0

08001230 <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af04      	add	r7, sp, #16
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MPU6050_CONFIG_DLPF+0x34>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2301      	movs	r3, #1
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	f107 030f 	add.w	r3, r7, #15
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	221a      	movs	r2, #26
 8001254:	21d0      	movs	r1, #208	@ 0xd0
 8001256:	f00d fb69 	bl	800e92c <HAL_I2C_Mem_Write>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	240000a0 	.word	0x240000a0

08001268 <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af04      	add	r7, sp, #16
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MPU6050_CONFIG_GYRO+0x34>)
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	2301      	movs	r3, #1
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	f107 030f 	add.w	r3, r7, #15
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	221b      	movs	r2, #27
 800128c:	21d0      	movs	r1, #208	@ 0xd0
 800128e:	f00d fb4d 	bl	800e92c <HAL_I2C_Mem_Write>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	240000a0 	.word	0x240000a0

080012a0 <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MPU6050_CONFIG_ACCEL+0x34>)
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	f107 030f 	add.w	r3, r7, #15
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	221c      	movs	r2, #28
 80012c4:	21d0      	movs	r1, #208	@ 0xd0
 80012c6:	f00d fb31 	bl	800e92c <HAL_I2C_Mem_Write>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	240000a0 	.word	0x240000a0

080012d8 <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	2219      	movs	r2, #25
 80012f6:	21d0      	movs	r1, #208	@ 0xd0
 80012f8:	f00d fb18 	bl	800e92c <HAL_I2C_Mem_Write>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	240000a0 	.word	0x240000a0

08001308 <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	2301      	movs	r3, #1
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	226a      	movs	r2, #106	@ 0x6a
 8001326:	21d0      	movs	r1, #208	@ 0xd0
 8001328:	f00d fb00 	bl	800e92c <HAL_I2C_Mem_Write>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	240000a0 	.word	0x240000a0

08001338 <MPU6050_CALIBRATION>:


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(float *accelx_cal,float *accely_cal,float*accelz_cal,float *gyrox_cal,float *gyroy_cal,
		float *gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	@ 0x38
 800133c:	af00      	add	r7, sp, #0
 800133e:	6178      	str	r0, [r7, #20]
 8001340:	6139      	str	r1, [r7, #16]
 8001342:	60fa      	str	r2, [r7, #12]
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	ed87 0a01 	vstr	s0, [r7, #4]
 800134a:	edc7 0a00 	vstr	s1, [r7]

	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	637b      	str	r3, [r7, #52]	@ 0x34
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	@ 0x30
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 1000; i++){ //5 sec
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e06b      	b.n	8001450 <MPU6050_CALIBRATION+0x118>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/Acc_Scale;
 8001378:	f000 fbce 	bl	8001b18 <MPU6050_GET_ACCEL_FULLVALUE_X>
 800137c:	4603      	mov	r3, r0
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001386:	ed97 7a00 	vldr	s14, [r7]
 800138a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/Acc_Scale;
 800139a:	f000 fbdd 	bl	8001b58 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 800139e:	4603      	mov	r3, r0
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013a8:	ed97 7a00 	vldr	s14, [r7]
 80013ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale;
 80013bc:	f000 fbe0 	bl	8001b80 <MPU6050_GET_ACCEL_FULLVALUE_Z>
 80013c0:	4603      	mov	r3, r0
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ca:	ed97 7a00 	vldr	s14, [r7]
 80013ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80013d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013da:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale;
 80013de:	f000 fbe3 	bl	8001ba8 <MPU6050_GET_GYRO_FULLVALUE_X>
 80013e2:	4603      	mov	r3, r0
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80013f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80013f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale;
 8001400:	f000 fbe6 	bl	8001bd0 <MPU6050_GET_GYRO_FULLVALUE_Y>
 8001404:	4603      	mov	r3, r0
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800140e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001416:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale;
 8001422:	f000 fbe9 	bl	8001bf8 <MPU6050_GET_GYRO_FULLVALUE_Z>
 8001426:	4603      	mov	r3, r0
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001430:	ed97 7a01 	vldr	s14, [r7, #4]
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	ed97 7a08 	vldr	s14, [r7, #32]
 800143c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001440:	edc7 7a08 	vstr	s15, [r7, #32]
		  HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f008 f865 	bl	8009514 <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001456:	db8f      	blt.n	8001378 <MPU6050_CALIBRATION+0x40>
	}
	*accelx_cal = accelx/1000;
 8001458:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800145c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	edc3 7a00 	vstr	s15, [r3]
	*accely_cal = accely/1000;
 800146a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800146e:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	edc3 7a00 	vstr	s15, [r3]
	*accelz_cal = accelz/1000;
 800147c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001480:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	edc3 7a00 	vstr	s15, [r3]

	*accelz_cal = 1 - *accelz_cal;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a00 	vstr	s15, [r3]

	*gyrox_cal = gyrox/1000;
 80014a2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014a6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	edc3 7a00 	vstr	s15, [r3]
	*gyroy_cal = gyroy/1000;
 80014b4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014b8:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014c2:	edc3 7a00 	vstr	s15, [r3]
	*gyroz_cal = gyroz/1000;
 80014c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ca:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d4:	edc3 7a00 	vstr	s15, [r3]
}
 80014d8:	bf00      	nop
 80014da:	3738      	adds	r7, #56	@ 0x38
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	447a0000 	.word	0x447a0000
 80014e4:	00000000 	.word	0x00000000

080014e8 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(float ax, float ay, float az, float *ax_ang, float *ay_ang/*, float *az_ang*/){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80014f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80014f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80014fa:	60b8      	str	r0, [r7, #8]
 80014fc:	6079      	str	r1, [r7, #4]
	float axan,ayan;
	float ang1 = sqrt((ax*ax)+(az*az));
 80014fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001502:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001506:	edd7 7a03 	vldr	s15, [r7, #12]
 800150a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800150e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001512:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001516:	eeb0 0b47 	vmov.f64	d0, d7
 800151a:	f01c fdf9 	bl	801e110 <sqrt>
 800151e:	eeb0 7b40 	vmov.f64	d7, d0
 8001522:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001526:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float ang2 = sqrt((ay*ay)+(az*az));
 800152a:	edd7 7a04 	vldr	s15, [r7, #16]
 800152e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001532:	edd7 7a03 	vldr	s15, [r7, #12]
 8001536:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800153a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001542:	eeb0 0b47 	vmov.f64	d0, d7
 8001546:	f01c fde3 	bl	801e110 <sqrt>
 800154a:	eeb0 7b40 	vmov.f64	d7, d0
 800154e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001552:	edc7 7a08 	vstr	s15, [r7, #32]
	axan = -1*(atan(ax/ang2));
 8001556:	edd7 6a05 	vldr	s13, [r7, #20]
 800155a:	ed97 7a08 	vldr	s14, [r7, #32]
 800155e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001562:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001566:	eeb0 0b47 	vmov.f64	d0, d7
 800156a:	f01c fdf1 	bl	801e150 <atan>
 800156e:	eeb0 7b40 	vmov.f64	d7, d0
 8001572:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001576:	eef1 7a67 	vneg.f32	s15, s15
 800157a:	edc7 7a07 	vstr	s15, [r7, #28]
	ayan= atan(ay/ang1);
 800157e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001582:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800158a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800158e:	eeb0 0b47 	vmov.f64	d0, d7
 8001592:	f01c fddd 	bl	801e150 <atan>
 8001596:	eeb0 7b40 	vmov.f64	d7, d0
 800159a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800159e:	edc7 7a06 	vstr	s15, [r7, #24]

//	*ax_ang = (axan*180)/M_PI;
//	*ay_ang = (ayan*180)/M_PI;

	*ay_ang = (axan*180)/M_PI;//x = y poniewaz x gyro to y acc
 80015a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80015a6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80015f8 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>
 80015aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80015b2:	ed9f 5b0f 	vldr	d5, [pc, #60]	@ 80015f0 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 80015b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a00 	vstr	s15, [r3]
	*ax_ang = (ayan*180)/M_PI;
 80015c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015c8:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80015f8 <MPU6050_GET_ACCEL_TO_ANGLE+0x110>
 80015cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80015d4:	ed9f 5b06 	vldr	d5, [pc, #24]	@ 80015f0 <MPU6050_GET_ACCEL_TO_ANGLE+0x108>
 80015d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	edc3 7a00 	vstr	s15, [r3]
}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	@ 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	54442d18 	.word	0x54442d18
 80015f4:	400921fb 	.word	0x400921fb
 80015f8:	43340000 	.word	0x43340000

080015fc <MPU6050_GET_ACCANDGYR_CALANDSCL>:
	*gy_ang = (gy/1000) + *gy_ang;
	*gz_ang = (gz/1000) + *gz_ang;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,
		float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b094      	sub	sp, #80	@ 0x50
 8001600:	af04      	add	r7, sp, #16
 8001602:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001604:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001606:	627a      	str	r2, [r7, #36]	@ 0x24
 8001608:	623b      	str	r3, [r7, #32]
 800160a:	ed87 0a07 	vstr	s0, [r7, #28]
 800160e:	edc7 0a06 	vstr	s1, [r7, #24]
 8001612:	ed87 1a05 	vstr	s2, [r7, #20]
 8001616:	edc7 1a04 	vstr	s3, [r7, #16]
 800161a:	ed87 2a03 	vstr	s4, [r7, #12]
 800161e:	edc7 2a02 	vstr	s5, [r7, #8]
 8001622:	ed87 3a01 	vstr	s6, [r7, #4]
 8001626:	edc7 3a00 	vstr	s7, [r7]

	uint8_t pdata[14];
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14, 1); // szybesz o ~1ms
 800162a:	4b4e      	ldr	r3, [pc, #312]	@ (8001764 <MPU6050_GET_ACCANDGYR_CALANDSCL+0x168>)
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	2301      	movs	r3, #1
 8001630:	9302      	str	r3, [sp, #8]
 8001632:	230e      	movs	r3, #14
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	223b      	movs	r2, #59	@ 0x3b
 8001640:	21d0      	movs	r1, #208	@ 0xd0
 8001642:	f00d fa87 	bl	800eb54 <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14);

	*ax = (((int16_t)(pdata[0]<<8) | pdata[1])/Acc_Scale) - accelx_cal;
 8001646:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	b21b      	sxth	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001654:	4313      	orrs	r3, r2
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800165e:	edd7 7a00 	vldr	s15, [r7]
 8001662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001666:	edd7 7a07 	vldr	s15, [r7, #28]
 800166a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800166e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001670:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(pdata[2]<<8) | pdata[3])/Acc_Scale) - accely_cal;
 8001674:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	b21b      	sxth	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001682:	4313      	orrs	r3, r2
 8001684:	ee07 3a90 	vmov	s15, r3
 8001688:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800168c:	edd7 7a00 	vldr	s15, [r7]
 8001690:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001694:	edd7 7a06 	vldr	s15, [r7, #24]
 8001698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800169e:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(pdata[4]<<8) | pdata[5])/Acc_Scale) + accelz_cal;
 80016a2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	461a      	mov	r2, r3
 80016ac:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80016b0:	4313      	orrs	r3, r2
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016ba:	edd7 7a00 	vldr	s15, [r7]
 80016be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80016c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(pdata[8]<<8) | pdata[9])/Gyr_Scale) - gyrox_cal;
 80016d0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80016de:	4313      	orrs	r3, r2
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(pdata[10]<<8) | pdata[11])/Gyr_Scale) - gyroy_cal;
 80016fe:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	b21b      	sxth	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800170c:	4313      	orrs	r3, r2
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001716:	edd7 7a01 	vldr	s15, [r7, #4]
 800171a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800171e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001728:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(pdata[12]<<8) | pdata[13])/Gyr_Scale) - gyroz_cal;
 800172c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b21b      	sxth	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800173a:	4313      	orrs	r3, r2
 800173c:	ee07 3a90 	vmov	s15, r3
 8001740:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001744:	edd7 7a01 	vldr	s15, [r7, #4]
 8001748:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800174c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001756:	edc3 7a00 	vstr	s15, [r3]
//	  *az = (MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale) + accelz_cal;
//
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}
 800175a:	bf00      	nop
 800175c:	3740      	adds	r7, #64	@ 0x40
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	240000a0 	.word	0x240000a0

08001768 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af02      	add	r7, sp, #8


	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, (uint8_t *)MPU6050_IT_DATA, 14);
 800176e:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x28>)
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	230e      	movs	r3, #14
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2301      	movs	r3, #1
 800177c:	223b      	movs	r2, #59	@ 0x3b
 800177e:	21d0      	movs	r1, #208	@ 0xd0
 8001780:	f00d fb8c 	bl	800ee9c <HAL_I2C_Mem_Read_IT>
	MPU6050_IRQ = 1;
 8001784:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]


}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	240000a0 	.word	0x240000a0
 8001794:	00000048 	.word	0x00000048
 8001798:	000041ec 	.word	0x000041ec

0800179c <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 800179c:	b480      	push	{r7}
 800179e:	b08d      	sub	sp, #52	@ 0x34
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80017a4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80017a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80017a8:	623b      	str	r3, [r7, #32]
 80017aa:	ed87 0a07 	vstr	s0, [r7, #28]
 80017ae:	edc7 0a06 	vstr	s1, [r7, #24]
 80017b2:	ed87 1a05 	vstr	s2, [r7, #20]
 80017b6:	edc7 1a04 	vstr	s3, [r7, #16]
 80017ba:	ed87 2a03 	vstr	s4, [r7, #12]
 80017be:	edc7 2a02 	vstr	s5, [r7, #8]
 80017c2:	ed87 3a01 	vstr	s6, [r7, #4]
 80017c6:	edc7 3a00 	vstr	s7, [r7]
	*ax = (((int16_t)(MPU6050_IT_DATA[0]<<8) | MPU6050_IT_DATA[1])/Acc_Scale) - accelx_cal;
 80017ca:	4b48      	ldr	r3, [pc, #288]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b45      	ldr	r3, [pc, #276]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017d6:	785b      	ldrb	r3, [r3, #1]
 80017d8:	4313      	orrs	r3, r2
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017e2:	edd7 7a00 	vldr	s15, [r7]
 80017e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80017ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f4:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(MPU6050_IT_DATA[2]<<8) | MPU6050_IT_DATA[3])/Acc_Scale) - accely_cal;
 80017f8:	4b3c      	ldr	r3, [pc, #240]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017fa:	789b      	ldrb	r3, [r3, #2]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	b21b      	sxth	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	4b3a      	ldr	r3, [pc, #232]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001804:	78db      	ldrb	r3, [r3, #3]
 8001806:	4313      	orrs	r3, r2
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001810:	edd7 7a00 	vldr	s15, [r7]
 8001814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001818:	edd7 7a06 	vldr	s15, [r7, #24]
 800181c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001822:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(MPU6050_IT_DATA[4]<<8) | MPU6050_IT_DATA[5])/Acc_Scale) + accelz_cal;
 8001826:	4b31      	ldr	r3, [pc, #196]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001828:	791b      	ldrb	r3, [r3, #4]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	b21b      	sxth	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	4b2e      	ldr	r3, [pc, #184]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001832:	795b      	ldrb	r3, [r3, #5]
 8001834:	4313      	orrs	r3, r2
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800183e:	edd7 7a00 	vldr	s15, [r7]
 8001842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001846:	edd7 7a05 	vldr	s15, [r7, #20]
 800184a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001850:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(MPU6050_IT_DATA[8]<<8) | MPU6050_IT_DATA[9])/Gyr_Scale) - gyrox_cal;
 8001854:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001856:	7a1b      	ldrb	r3, [r3, #8]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	b21b      	sxth	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001860:	7a5b      	ldrb	r3, [r3, #9]
 8001862:	4313      	orrs	r3, r2
 8001864:	ee07 3a90 	vmov	s15, r3
 8001868:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800186c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001874:	edd7 7a04 	vldr	s15, [r7, #16]
 8001878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(MPU6050_IT_DATA[10]<<8) | MPU6050_IT_DATA[11])/Gyr_Scale) - gyroy_cal;
 8001882:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001884:	7a9b      	ldrb	r3, [r3, #10]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	b21b      	sxth	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	4b17      	ldr	r3, [pc, #92]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 800188e:	7adb      	ldrb	r3, [r3, #11]
 8001890:	4313      	orrs	r3, r2
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800189a:	edd7 7a01 	vldr	s15, [r7, #4]
 800189e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018ac:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(MPU6050_IT_DATA[12]<<8) | MPU6050_IT_DATA[13])/Gyr_Scale) - gyroz_cal;
 80018b0:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018b2:	7b1b      	ldrb	r3, [r3, #12]
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018bc:	7b5b      	ldrb	r3, [r3, #13]
 80018be:	4313      	orrs	r3, r2
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018da:	edc3 7a00 	vstr	s15, [r3]
}
 80018de:	bf00      	nop
 80018e0:	3734      	adds	r7, #52	@ 0x34
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	00000048 	.word	0x00000048

080018f0 <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float ax_ang, float ay_ang, float megz_ang, float gx_ang,
		float gy_ang, float gz_ang){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	61f8      	str	r0, [r7, #28]
 80018f8:	ed87 0a06 	vstr	s0, [r7, #24]
 80018fc:	edc7 0a05 	vstr	s1, [r7, #20]
 8001900:	ed87 1a04 	vstr	s2, [r7, #16]
 8001904:	edc7 1a03 	vstr	s3, [r7, #12]
 8001908:	ed87 2a02 	vstr	s4, [r7, #8]
 800190c:	edc7 2a01 	vstr	s5, [r7, #4]
	Complementary_getFilter(Complementary_Filter_st, ax_ang, ay_ang, megz_ang, gx_ang, gy_ang, gz_ang);
 8001910:	edd7 2a01 	vldr	s5, [r7, #4]
 8001914:	ed97 2a02 	vldr	s4, [r7, #8]
 8001918:	edd7 1a03 	vldr	s3, [r7, #12]
 800191c:	ed97 1a04 	vldr	s2, [r7, #16]
 8001920:	edd7 0a05 	vldr	s1, [r7, #20]
 8001924:	ed97 0a06 	vldr	s0, [r7, #24]
 8001928:	69f8      	ldr	r0, [r7, #28]
 800192a:	f000 f9a9 	bl	8001c80 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 800192e:	bf00      	nop
 8001930:	3720      	adds	r7, #32
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <MPU6050_GET_ACCEL_YH+0x2c>)
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	2301      	movs	r3, #1
 8001944:	9302      	str	r3, [sp, #8]
 8001946:	2301      	movs	r3, #1
 8001948:	9301      	str	r3, [sp, #4]
 800194a:	1dfb      	adds	r3, r7, #7
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2301      	movs	r3, #1
 8001950:	223d      	movs	r2, #61	@ 0x3d
 8001952:	21d0      	movs	r1, #208	@ 0xd0
 8001954:	f00d f8fe 	bl	800eb54 <HAL_I2C_Mem_Read>
	return data;
 8001958:	79fb      	ldrb	r3, [r7, #7]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	240000a0 	.word	0x240000a0

08001968 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <MPU6050_GET_ACCEL_YL+0x2c>)
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	2301      	movs	r3, #1
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2301      	movs	r3, #1
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2301      	movs	r3, #1
 8001980:	223e      	movs	r2, #62	@ 0x3e
 8001982:	21d0      	movs	r1, #208	@ 0xd0
 8001984:	f00d f8e6 	bl	800eb54 <HAL_I2C_Mem_Read>
	return data;
 8001988:	79fb      	ldrb	r3, [r7, #7]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	240000a0 	.word	0x240000a0

08001998 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <MPU6050_GET_ACCEL_ZH+0x2c>)
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	2301      	movs	r3, #1
 80019a4:	9302      	str	r3, [sp, #8]
 80019a6:	2301      	movs	r3, #1
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2301      	movs	r3, #1
 80019b0:	223f      	movs	r2, #63	@ 0x3f
 80019b2:	21d0      	movs	r1, #208	@ 0xd0
 80019b4:	f00d f8ce 	bl	800eb54 <HAL_I2C_Mem_Read>
	return data;
 80019b8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	240000a0 	.word	0x240000a0

080019c8 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <MPU6050_GET_ACCEL_ZL+0x2c>)
 80019d0:	6818      	ldr	r0, [r3, #0]
 80019d2:	2301      	movs	r3, #1
 80019d4:	9302      	str	r3, [sp, #8]
 80019d6:	2301      	movs	r3, #1
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	1dfb      	adds	r3, r7, #7
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2301      	movs	r3, #1
 80019e0:	2240      	movs	r2, #64	@ 0x40
 80019e2:	21d0      	movs	r1, #208	@ 0xd0
 80019e4:	f00d f8b6 	bl	800eb54 <HAL_I2C_Mem_Read>
	return data;
 80019e8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	240000a0 	.word	0x240000a0

080019f8 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 80019fe:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <MPU6050_GET_GYRO_XH+0x2c>)
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	2301      	movs	r3, #1
 8001a04:	9302      	str	r3, [sp, #8]
 8001a06:	2301      	movs	r3, #1
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	1dfb      	adds	r3, r7, #7
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	2243      	movs	r2, #67	@ 0x43
 8001a12:	21d0      	movs	r1, #208	@ 0xd0
 8001a14:	f00d f89e 	bl	800eb54 <HAL_I2C_Mem_Read>
	return data;
 8001a18:	79fb      	ldrb	r3, [r7, #7]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	240000a0 	.word	0x240000a0

08001a28 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 8001a2e:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <MPU6050_GET_GYRO_XL+0x2c>)
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	2301      	movs	r3, #1
 8001a34:	9302      	str	r3, [sp, #8]
 8001a36:	2301      	movs	r3, #1
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2301      	movs	r3, #1
 8001a40:	2244      	movs	r2, #68	@ 0x44
 8001a42:	21d0      	movs	r1, #208	@ 0xd0
 8001a44:	f00d f886 	bl	800eb54 <HAL_I2C_Mem_Read>
	return data;
 8001a48:	79fb      	ldrb	r3, [r7, #7]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	240000a0 	.word	0x240000a0

08001a58 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <MPU6050_GET_GYRO_YH+0x2c>)
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	2301      	movs	r3, #1
 8001a64:	9302      	str	r3, [sp, #8]
 8001a66:	2301      	movs	r3, #1
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	1dfb      	adds	r3, r7, #7
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2301      	movs	r3, #1
 8001a70:	2245      	movs	r2, #69	@ 0x45
 8001a72:	21d0      	movs	r1, #208	@ 0xd0
 8001a74:	f00d f86e 	bl	800eb54 <HAL_I2C_Mem_Read>
	return data;
 8001a78:	79fb      	ldrb	r3, [r7, #7]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	240000a0 	.word	0x240000a0

08001a88 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 8001a8e:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <MPU6050_GET_GYRO_YL+0x2c>)
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	2301      	movs	r3, #1
 8001a94:	9302      	str	r3, [sp, #8]
 8001a96:	2301      	movs	r3, #1
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	1dfb      	adds	r3, r7, #7
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	2246      	movs	r2, #70	@ 0x46
 8001aa2:	21d0      	movs	r1, #208	@ 0xd0
 8001aa4:	f00d f856 	bl	800eb54 <HAL_I2C_Mem_Read>
	return data;
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	240000a0 	.word	0x240000a0

08001ab8 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <MPU6050_GET_GYRO_ZH+0x2c>)
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	9302      	str	r3, [sp, #8]
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	1dfb      	adds	r3, r7, #7
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	2247      	movs	r2, #71	@ 0x47
 8001ad2:	21d0      	movs	r1, #208	@ 0xd0
 8001ad4:	f00d f83e 	bl	800eb54 <HAL_I2C_Mem_Read>
	return data;
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	240000a0 	.word	0x240000a0

08001ae8 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <MPU6050_GET_GYRO_ZL+0x2c>)
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	2301      	movs	r3, #1
 8001af4:	9302      	str	r3, [sp, #8]
 8001af6:	2301      	movs	r3, #1
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	1dfb      	adds	r3, r7, #7
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2301      	movs	r3, #1
 8001b00:	2248      	movs	r2, #72	@ 0x48
 8001b02:	21d0      	movs	r1, #208	@ 0xd0
 8001b04:	f00d f826 	bl	800eb54 <HAL_I2C_Mem_Read>
	return data;
 8001b08:	79fb      	ldrb	r3, [r7, #7]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	240000a0 	.word	0x240000a0

08001b18 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	2301      	movs	r3, #1
 8001b24:	9302      	str	r3, [sp, #8]
 8001b26:	2302      	movs	r3, #2
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2301      	movs	r3, #1
 8001b30:	223b      	movs	r2, #59	@ 0x3b
 8001b32:	21d0      	movs	r1, #208	@ 0xd0
 8001b34:	f00d f80e 	bl	800eb54 <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001b38:	793b      	ldrb	r3, [r7, #4]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	b21a      	sxth	r2, r3
 8001b3e:	797b      	ldrb	r3, [r7, #5]
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	240000a0 	.word	0x240000a0

08001b58 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001b5e:	f7ff feeb 	bl	8001938 <MPU6050_GET_ACCEL_YH>
 8001b62:	4603      	mov	r3, r0
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	b21c      	sxth	r4, r3
 8001b68:	f7ff fefe 	bl	8001968 <MPU6050_GET_ACCEL_YL>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	4323      	orrs	r3, r4
 8001b72:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd90      	pop	{r4, r7, pc}

08001b80 <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001b86:	f7ff ff07 	bl	8001998 <MPU6050_GET_ACCEL_ZH>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	b21c      	sxth	r4, r3
 8001b90:	f7ff ff1a 	bl	80019c8 <MPU6050_GET_ACCEL_ZL>
 8001b94:	4603      	mov	r3, r0
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	4323      	orrs	r3, r4
 8001b9a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd90      	pop	{r4, r7, pc}

08001ba8 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001bae:	f7ff ff23 	bl	80019f8 <MPU6050_GET_GYRO_XH>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	b21c      	sxth	r4, r3
 8001bb8:	f7ff ff36 	bl	8001a28 <MPU6050_GET_GYRO_XL>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	b21b      	sxth	r3, r3
 8001bc0:	4323      	orrs	r3, r4
 8001bc2:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd90      	pop	{r4, r7, pc}

08001bd0 <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001bd6:	f7ff ff3f 	bl	8001a58 <MPU6050_GET_GYRO_YH>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	b21c      	sxth	r4, r3
 8001be0:	f7ff ff52 	bl	8001a88 <MPU6050_GET_GYRO_YL>
 8001be4:	4603      	mov	r3, r0
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	4323      	orrs	r3, r4
 8001bea:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd90      	pop	{r4, r7, pc}

08001bf8 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001bfe:	f7ff ff5b 	bl	8001ab8 <MPU6050_GET_GYRO_ZH>
 8001c02:	4603      	mov	r3, r0
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	b21c      	sxth	r4, r3
 8001c08:	f7ff ff6e 	bl	8001ae8 <MPU6050_GET_GYRO_ZL>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	4323      	orrs	r3, r4
 8001c12:	80fb      	strh	r3, [r7, #6]
	return data;
 8001c14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd90      	pop	{r4, r7, pc}

08001c20 <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001c26:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <MPU6050_READ_ID+0x2c>)
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	9302      	str	r3, [sp, #8]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	1dfb      	adds	r3, r7, #7
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2301      	movs	r3, #1
 8001c38:	2275      	movs	r2, #117	@ 0x75
 8001c3a:	21d0      	movs	r1, #208	@ 0xd0
 8001c3c:	f00c ff8a 	bl	800eb54 <HAL_I2C_Mem_Read>
	return data;
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	b25b      	sxtb	r3, r3
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	240000a0 	.word	0x240000a0

08001c50 <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001c56:	2302      	movs	r3, #2
 8001c58:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001c5a:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	2301      	movs	r3, #1
 8001c60:	9302      	str	r3, [sp, #8]
 8001c62:	2301      	movs	r3, #1
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	1dfb      	adds	r3, r7, #7
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	2237      	movs	r2, #55	@ 0x37
 8001c6e:	21d0      	movs	r1, #208	@ 0xd0
 8001c70:	f00c fe5c 	bl	800e92c <HAL_I2C_Mem_Write>
}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	240000a0 	.word	0x240000a0

08001c80 <Complementary_getFilter>:

    return Kalman->angle;
};


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	@ 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	61f8      	str	r0, [r7, #28]
 8001c88:	ed87 0a06 	vstr	s0, [r7, #24]
 8001c8c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001c90:	ed87 1a04 	vstr	s2, [r7, #16]
 8001c94:	edc7 1a03 	vstr	s3, [r7, #12]
 8001c98:	ed87 2a02 	vstr	s4, [r7, #8]
 8001c9c:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang)+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));//
 8001ca0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ca4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ca8:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8001d68 <Complementary_getFilter+0xe8>
 8001cac:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cb0:	4b31      	ldr	r3, [pc, #196]	@ (8001d78 <Complementary_getFilter+0xf8>)
 8001cb2:	ed93 7a00 	vldr	s14, [r3]
 8001cb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ccc:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001d70 <Complementary_getFilter+0xf0>
 8001cd0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cd4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001cd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang)+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001ce2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ce6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cea:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8001d68 <Complementary_getFilter+0xe8>
 8001cee:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cf2:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <Complementary_getFilter+0xf8>)
 8001cf4:	ed93 7a00 	vldr	s14, [r3]
 8001cf8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d0e:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001d70 <Complementary_getFilter+0xf0>
 8001d12:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001d16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (1*((gz_ang*looptime)+Complementary_Filter_st->oz));
 8001d24:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <Complementary_getFilter+0xf8>)
 8001d26:	ed93 7a00 	vldr	s14, [r3]
 8001d2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001d5a:	bf00      	nop
 8001d5c:	3724      	adds	r7, #36	@ 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	47ae147b 	.word	0x47ae147b
 8001d6c:	3f947ae1 	.word	0x3f947ae1
 8001d70:	f5c28f5c 	.word	0xf5c28f5c
 8001d74:	3fef5c28 	.word	0x3fef5c28
 8001d78:	0801e9dc 	.word	0x0801e9dc

08001d7c <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001d86:	2001      	movs	r0, #1
 8001d88:	f007 fbc4 	bl	8009514 <HAL_Delay>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001da0:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <nRF24_SendSpi+0x28>)
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	f012 fe49 	bl	8014a44 <HAL_SPI_Transmit>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	240000a4 	.word	0x240000a4

08001dc0 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <nRF24_ReadSpi+0x28>)
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	f013 f821 	bl	8014e20 <HAL_SPI_Receive>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	240000a4 	.word	0x240000a4

08001dec <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2180      	movs	r1, #128	@ 0x80
 8001dfe:	480c      	ldr	r0, [pc, #48]	@ (8001e30 <nRF24_ReadRegister+0x44>)
 8001e00:	f00c fcc4 	bl	800e78c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001e04:	1dfb      	adds	r3, r7, #7
 8001e06:	2101      	movs	r1, #1
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ffc3 	bl	8001d94 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001e0e:	f107 030f 	add.w	r3, r7, #15
 8001e12:	2101      	movs	r1, #1
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ffd3 	bl	8001dc0 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	2180      	movs	r1, #128	@ 0x80
 8001e1e:	4804      	ldr	r0, [pc, #16]	@ (8001e30 <nRF24_ReadRegister+0x44>)
 8001e20:	f00c fcb4 	bl	800e78c <HAL_GPIO_WritePin>

	return result;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	58020400 	.word	0x58020400

08001e34 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	71fb      	strb	r3, [r7, #7]
 8001e40:	4613      	mov	r3, r2
 8001e42:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2180      	movs	r1, #128	@ 0x80
 8001e4c:	480a      	ldr	r0, [pc, #40]	@ (8001e78 <nRF24_ReadRegisters+0x44>)
 8001e4e:	f00c fc9d 	bl	800e78c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e52:	1dfb      	adds	r3, r7, #7
 8001e54:	2101      	movs	r1, #1
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff9c 	bl	8001d94 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001e5c:	79bb      	ldrb	r3, [r7, #6]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	6838      	ldr	r0, [r7, #0]
 8001e62:	f7ff ffad 	bl	8001dc0 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001e66:	2201      	movs	r2, #1
 8001e68:	2180      	movs	r1, #128	@ 0x80
 8001e6a:	4803      	ldr	r0, [pc, #12]	@ (8001e78 <nRF24_ReadRegisters+0x44>)
 8001e6c:	f00c fc8e 	bl	800e78c <HAL_GPIO_WritePin>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	58020400 	.word	0x58020400

08001e7c <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	460a      	mov	r2, r1
 8001e86:	71fb      	strb	r3, [r7, #7]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f043 0320 	orr.w	r3, r3, #32
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001e96:	79bb      	ldrb	r3, [r7, #6]
 8001e98:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2180      	movs	r1, #128	@ 0x80
 8001e9e:	4809      	ldr	r0, [pc, #36]	@ (8001ec4 <nRF24_WriteRegister+0x48>)
 8001ea0:	f00c fc74 	bl	800e78c <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001ea4:	f107 030c 	add.w	r3, r7, #12
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ff72 	bl	8001d94 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	2180      	movs	r1, #128	@ 0x80
 8001eb4:	4803      	ldr	r0, [pc, #12]	@ (8001ec4 <nRF24_WriteRegister+0x48>)
 8001eb6:	f00c fc69 	bl	800e78c <HAL_GPIO_WritePin>
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	58020400 	.word	0x58020400

08001ec8 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	f043 0320 	orr.w	r3, r3, #32
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2180      	movs	r1, #128	@ 0x80
 8001ee6:	480b      	ldr	r0, [pc, #44]	@ (8001f14 <nRF24_WriteRegisters+0x4c>)
 8001ee8:	f00c fc50 	bl	800e78c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001eec:	1dfb      	adds	r3, r7, #7
 8001eee:	2101      	movs	r1, #1
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff4f 	bl	8001d94 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001ef6:	79bb      	ldrb	r3, [r7, #6]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	6838      	ldr	r0, [r7, #0]
 8001efc:	f7ff ff4a 	bl	8001d94 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001f00:	2201      	movs	r2, #1
 8001f02:	2180      	movs	r1, #128	@ 0x80
 8001f04:	4803      	ldr	r0, [pc, #12]	@ (8001f14 <nRF24_WriteRegisters+0x4c>)
 8001f06:	f00c fc41 	bl	800e78c <HAL_GPIO_WritePin>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	58020400 	.word	0x58020400

08001f18 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8001f1e:	f000 f84d 	bl	8001fbc <nRF24_ReadConfig>
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001f26:	4910      	ldr	r1, [pc, #64]	@ (8001f68 <nRF24_RX_Mode+0x50>)
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f000 f9f6 	bl	800231a <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 f843 	bl	8001fcc <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f46:	2070      	movs	r0, #112	@ 0x70
 8001f48:	f000 f89b 	bl	8002082 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f4c:	f000 f8a8 	bl	80020a0 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f50:	f000 f8c0 	bl	80020d4 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001f54:	2201      	movs	r2, #1
 8001f56:	2140      	movs	r1, #64	@ 0x40
 8001f58:	4804      	ldr	r0, [pc, #16]	@ (8001f6c <nRF24_RX_Mode+0x54>)
 8001f5a:	f00c fc17 	bl	800e78c <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	240000a8 	.word	0x240000a8
 8001f6c:	58020400 	.word	0x58020400

08001f70 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8001f76:	2200      	movs	r2, #0
 8001f78:	2140      	movs	r1, #64	@ 0x40
 8001f7a:	480f      	ldr	r0, [pc, #60]	@ (8001fb8 <nRF24_TX_Mode+0x48>)
 8001f7c:	f00c fc06 	bl	800e78c <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001f80:	f000 f81c 	bl	8001fbc <nRF24_ReadConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f043 0302 	orr.w	r3, r3, #2
 8001f8e:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f023 0301 	bic.w	r3, r3, #1
 8001f96:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f816 	bl	8001fcc <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001fa0:	2070      	movs	r0, #112	@ 0x70
 8001fa2:	f000 f86e 	bl	8002082 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001fa6:	f000 f87b 	bl	80020a0 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001faa:	f000 f893 	bl	80020d4 <nRF24_FlushTX>

	//nRF24_Delay(1);
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	58020400 	.word	0x58020400

08001fbc <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f7ff ff13 	bl	8001dec <nRF24_ReadRegister>
 8001fc6:	4603      	mov	r3, r0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f7ff ff4e 	bl	8001e7c <nRF24_WriteRegister>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001ff2:	2006      	movs	r0, #6
 8001ff4:	f7ff fefa 	bl	8001dec <nRF24_ReadRegister>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	f023 0307 	bic.w	r3, r3, #7
 8002002:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	b25a      	sxtb	r2, r3
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	4313      	orrs	r3, r2
 8002010:	b25b      	sxtb	r3, r3
 8002012:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	4619      	mov	r1, r3
 8002018:	2006      	movs	r0, #6
 800201a:	f7ff ff2f 	bl	8001e7c <nRF24_WriteRegister>
}
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002030:	2006      	movs	r0, #6
 8002032:	f7ff fedb 	bl	8001dec <nRF24_ReadRegister>
 8002036:	4603      	mov	r3, r0
 8002038:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002040:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d104      	bne.n	8002052 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	f043 0320 	orr.w	r3, r3, #32
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	e006      	b.n	8002060 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d103      	bne.n	8002060 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	f043 0308 	orr.w	r3, r3, #8
 800205e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	4619      	mov	r1, r3
 8002064:	2006      	movs	r0, #6
 8002066:	f7ff ff09 	bl	8001e7c <nRF24_WriteRegister>
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8002076:	2007      	movs	r0, #7
 8002078:	f7ff feb8 	bl	8001dec <nRF24_ReadRegister>
 800207c:	4603      	mov	r3, r0
}
 800207e:	4618      	mov	r0, r3
 8002080:	bd80      	pop	{r7, pc}

08002082 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	4619      	mov	r1, r3
 8002090:	2007      	movs	r0, #7
 8002092:	f7ff fef3 	bl	8001e7c <nRF24_WriteRegister>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 80020a6:	23e2      	movs	r3, #226	@ 0xe2
 80020a8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020aa:	2200      	movs	r2, #0
 80020ac:	2180      	movs	r1, #128	@ 0x80
 80020ae:	4808      	ldr	r0, [pc, #32]	@ (80020d0 <nRF24_FlushRX+0x30>)
 80020b0:	f00c fb6c 	bl	800e78c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	2101      	movs	r1, #1
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fe6b 	bl	8001d94 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020be:	2201      	movs	r2, #1
 80020c0:	2180      	movs	r1, #128	@ 0x80
 80020c2:	4803      	ldr	r0, [pc, #12]	@ (80020d0 <nRF24_FlushRX+0x30>)
 80020c4:	f00c fb62 	bl	800e78c <HAL_GPIO_WritePin>
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	58020400 	.word	0x58020400

080020d4 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80020da:	23e1      	movs	r3, #225	@ 0xe1
 80020dc:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020de:	2200      	movs	r2, #0
 80020e0:	2180      	movs	r1, #128	@ 0x80
 80020e2:	4808      	ldr	r0, [pc, #32]	@ (8002104 <nRF24_FlushTX+0x30>)
 80020e4:	f00c fb52 	bl	800e78c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80020e8:	1dfb      	adds	r3, r7, #7
 80020ea:	2101      	movs	r1, #1
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fe51 	bl	8001d94 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020f2:	2201      	movs	r2, #1
 80020f4:	2180      	movs	r1, #128	@ 0x80
 80020f6:	4803      	ldr	r0, [pc, #12]	@ (8002104 <nRF24_FlushTX+0x30>)
 80020f8:	f00c fb48 	bl	800e78c <HAL_GPIO_WritePin>
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	58020400 	.word	0x58020400

08002108 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002112:	f7ff ff53 	bl	8001fbc <nRF24_ReadConfig>
 8002116:	4603      	mov	r3, r0
 8002118:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	f043 0308 	orr.w	r3, r3, #8
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e003      	b.n	8002132 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	f023 0308 	bic.w	r3, r3, #8
 8002130:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff49 	bl	8001fcc <nRF24_WriteConfig>
}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800214c:	f7ff ff36 	bl	8001fbc <nRF24_ReadConfig>
 8002150:	4603      	mov	r3, r0
 8002152:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d104      	bne.n	8002164 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	73fb      	strb	r3, [r7, #15]
 8002162:	e003      	b.n	800216c <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	f023 0304 	bic.w	r3, r3, #4
 800216a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff2c 	bl	8001fcc <nRF24_WriteConfig>
}
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	460a      	mov	r2, r1
 8002186:	71fb      	strb	r3, [r7, #7]
 8002188:	4613      	mov	r3, r2
 800218a:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	b25a      	sxtb	r2, r3
 8002192:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	b25b      	sxtb	r3, r3
 800219c:	4313      	orrs	r3, r2
 800219e:	b25b      	sxtb	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4619      	mov	r1, r3
 80021a4:	2004      	movs	r0, #4
 80021a6:	f7ff fe69 	bl	8001e7c <nRF24_WriteRegister>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	4619      	mov	r1, r3
 80021c6:	2005      	movs	r0, #5
 80021c8:	f7ff fe58 	bl	8001e7c <nRF24_WriteRegister>
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	460a      	mov	r2, r1
 80021de:	71fb      	strb	r3, [r7, #7]
 80021e0:	4613      	mov	r3, r2
 80021e2:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	2b05      	cmp	r3, #5
 80021e8:	d901      	bls.n	80021ee <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 80021ea:	2305      	movs	r3, #5
 80021ec:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	3311      	adds	r3, #17
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	79bb      	ldrb	r3, [r7, #6]
 80021f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	4619      	mov	r1, r3
 80021fe:	4610      	mov	r0, r2
 8002200:	f7ff fe3c 	bl	8001e7c <nRF24_WriteRegister>
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	460a      	mov	r2, r1
 8002216:	71fb      	strb	r3, [r7, #7]
 8002218:	4613      	mov	r3, r2
 800221a:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	2b05      	cmp	r3, #5
 8002220:	d901      	bls.n	8002226 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8002222:	2305      	movs	r3, #5
 8002224:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8002226:	2002      	movs	r0, #2
 8002228:	f7ff fde0 	bl	8001dec <nRF24_ReadRegister>
 800222c:	4603      	mov	r3, r0
 800222e:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002230:	79bb      	ldrb	r3, [r7, #6]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d10a      	bne.n	800224c <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2201      	movs	r2, #1
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	b25a      	sxtb	r2, r3
 8002240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002244:	4313      	orrs	r3, r2
 8002246:	b25b      	sxtb	r3, r3
 8002248:	73fb      	strb	r3, [r7, #15]
 800224a:	e00b      	b.n	8002264 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	2201      	movs	r2, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	b25b      	sxtb	r3, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	b25a      	sxtb	r2, r3
 800225a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225e:	4013      	ands	r3, r2
 8002260:	b25b      	sxtb	r3, r3
 8002262:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	4619      	mov	r1, r3
 8002268:	2002      	movs	r0, #2
 800226a:	f7ff fe07 	bl	8001e7c <nRF24_WriteRegister>
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	460a      	mov	r2, r1
 8002280:	71fb      	strb	r3, [r7, #7]
 8002282:	4613      	mov	r3, r2
 8002284:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d901      	bls.n	8002290 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 800228c:	2305      	movs	r3, #5
 800228e:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002290:	2001      	movs	r0, #1
 8002292:	f7ff fdab 	bl	8001dec <nRF24_ReadRegister>
 8002296:	4603      	mov	r3, r0
 8002298:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 800229a:	79bb      	ldrb	r3, [r7, #6]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d10a      	bne.n	80022b6 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	2201      	movs	r2, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	b25a      	sxtb	r2, r3
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	b25b      	sxtb	r3, r3
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	e00b      	b.n	80022ce <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	2201      	movs	r2, #1
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	b25b      	sxtb	r3, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	b25a      	sxtb	r2, r3
 80022c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c8:	4013      	ands	r3, r2
 80022ca:	b25b      	sxtb	r3, r3
 80022cc:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	4619      	mov	r1, r3
 80022d2:	2001      	movs	r0, #1
 80022d4:	f7ff fdd2 	bl	8001e7c <nRF24_WriteRegister>
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d901      	bls.n	80022f4 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80022f0:	2305      	movs	r3, #5
 80022f2:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d801      	bhi.n	80022fe <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80022fa:	2303      	movs	r3, #3
 80022fc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	3b02      	subs	r3, #2
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	4619      	mov	r1, r3
 800230c:	2003      	movs	r0, #3
 800230e:	f7ff fdb5 	bl	8001e7c <nRF24_WriteRegister>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	6039      	str	r1, [r7, #0]
 8002324:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <nRF24_SetRXAddress+0x18>
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d11d      	bne.n	800236e <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002332:	2300      	movs	r3, #0
 8002334:	73fb      	strb	r3, [r7, #15]
 8002336:	e00d      	b.n	8002354 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	441a      	add	r2, r3
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	f1c3 0302 	rsb	r3, r3, #2
 8002344:	7812      	ldrb	r2, [r2, #0]
 8002346:	3310      	adds	r3, #16
 8002348:	443b      	add	r3, r7
 800234a:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	3301      	adds	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d9ee      	bls.n	8002338 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	330a      	adds	r3, #10
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f107 010c 	add.w	r1, r7, #12
 8002364:	2203      	movs	r2, #3
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fdae 	bl	8001ec8 <nRF24_WriteRegisters>
	{
 800236c:	e00a      	b.n	8002384 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	330a      	adds	r3, #10
 8002372:	b2da      	uxtb	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	3302      	adds	r3, #2
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4619      	mov	r1, r3
 800237c:	4610      	mov	r0, r2
 800237e:	f7ff fd7d 	bl	8001e7c <nRF24_WriteRegister>
}
 8002382:	bf00      	nop
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8002394:	f107 030c 	add.w	r3, r7, #12
 8002398:	2203      	movs	r2, #3
 800239a:	4619      	mov	r1, r3
 800239c:	200a      	movs	r0, #10
 800239e:	f7ff fd49 	bl	8001e34 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	e00c      	b.n	80023c2 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	f1c3 0302 	rsb	r3, r3, #2
 80023b0:	3210      	adds	r2, #16
 80023b2:	443a      	add	r2, r7
 80023b4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80023b8:	4a16      	ldr	r2, [pc, #88]	@ (8002414 <nRF24_SetTXAddress+0x88>)
 80023ba:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	3301      	adds	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d9ef      	bls.n	80023a8 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e00d      	b.n	80023ea <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	441a      	add	r2, r3
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	f1c3 0302 	rsb	r3, r3, #2
 80023da:	7812      	ldrb	r2, [r2, #0]
 80023dc:	3310      	adds	r3, #16
 80023de:	443b      	add	r3, r7
 80023e0:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	3301      	adds	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d9ee      	bls.n	80023ce <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	2203      	movs	r2, #3
 80023f6:	4619      	mov	r1, r3
 80023f8:	200a      	movs	r0, #10
 80023fa:	f7ff fd65 	bl	8001ec8 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80023fe:	f107 030c 	add.w	r3, r7, #12
 8002402:	2203      	movs	r2, #3
 8002404:	4619      	mov	r1, r3
 8002406:	2010      	movs	r0, #16
 8002408:	f7ff fd5e 	bl	8001ec8 <nRF24_WriteRegisters>

}
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	240000a8 	.word	0x240000a8

08002418 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 800241e:	f7ff fe28 	bl	8002072 <nRF24_ReadStatus>
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800242c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fe26 	bl	8002082 <nRF24_WriteStatus>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002448:	f7ff fdb8 	bl	8001fbc <nRF24_ReadConfig>
 800244c:	4603      	mov	r3, r0
 800244e:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d104      	bne.n	8002460 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	e003      	b.n	8002468 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002466:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fdae 	bl	8001fcc <nRF24_WriteConfig>
}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002482:	f7ff fd9b 	bl	8001fbc <nRF24_ReadConfig>
 8002486:	4603      	mov	r3, r0
 8002488:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d104      	bne.n	800249a <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	f043 0320 	orr.w	r3, r3, #32
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	e003      	b.n	80024a2 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	f023 0320 	bic.w	r3, r3, #32
 80024a0:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fd91 	bl	8001fcc <nRF24_WriteConfig>
}
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024bc:	f7ff fd7e 	bl	8001fbc <nRF24_ReadConfig>
 80024c0:	4603      	mov	r3, r0
 80024c2:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d104      	bne.n	80024d4 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	f043 0310 	orr.w	r3, r3, #16
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	e003      	b.n	80024dc <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	f023 0310 	bic.w	r3, r3, #16
 80024da:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fd74 	bl	8001fcc <nRF24_WriteConfig>
}
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80024f4:	2220      	movs	r2, #32
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	20a0      	movs	r0, #160	@ 0xa0
 80024fa:	f7ff fce5 	bl	8001ec8 <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 800250e:	2201      	movs	r2, #1
 8002510:	2140      	movs	r1, #64	@ 0x40
 8002512:	4810      	ldr	r0, [pc, #64]	@ (8002554 <nRF24_WaitTX+0x4c>)
 8002514:	f00c f93a 	bl	800e78c <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8002518:	2001      	movs	r0, #1
 800251a:	f7ff fc2f 	bl	8001d7c <nRF24_Delay>
	NRF24_CE_LOW;
 800251e:	2200      	movs	r2, #0
 8002520:	2140      	movs	r1, #64	@ 0x40
 8002522:	480c      	ldr	r0, [pc, #48]	@ (8002554 <nRF24_WaitTX+0x4c>)
 8002524:	f00c f932 	bl	800e78c <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8002528:	2001      	movs	r0, #1
 800252a:	f7ff fc27 	bl	8001d7c <nRF24_Delay>
		status = nRF24_ReadStatus();
 800252e:	f7ff fda0 	bl	8002072 <nRF24_ReadStatus>
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b00      	cmp	r3, #0
 800253e:	d104      	bne.n	800254a <nRF24_WaitTX+0x42>
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0ee      	beq.n	8002528 <nRF24_WaitTX+0x20>

}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	58020400 	.word	0x58020400

08002558 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002560:	2220      	movs	r2, #32
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	2061      	movs	r0, #97	@ 0x61
 8002566:	f7ff fc65 	bl	8001e34 <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 800256a:	2140      	movs	r1, #64	@ 0x40
 800256c:	2007      	movs	r0, #7
 800256e:	f7ff fc85 	bl	8001e7c <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 8002572:	f7ff fd7e 	bl	8002072 <nRF24_ReadStatus>
 8002576:	4603      	mov	r3, r0
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002580:	2120      	movs	r1, #32
 8002582:	2007      	movs	r0, #7
 8002584:	f7ff fc7a 	bl	8001e7c <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 800259a:	f000 f811 	bl	80025c0 <nRF24_ReadFifoStatus>
 800259e:	4603      	mov	r3, r0
 80025a0:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	fa42 f303 	asr.w	r3, r2, r3
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 80025c4:	2017      	movs	r0, #23
 80025c6:	f7ff fc11 	bl	8001dec <nRF24_ReadRegister>
 80025ca:	4603      	mov	r3, r0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80025d8:	4a25      	ldr	r2, [pc, #148]	@ (8002670 <nRF24_Init+0xa0>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80025de:	2200      	movs	r2, #0
 80025e0:	2140      	movs	r1, #64	@ 0x40
 80025e2:	4824      	ldr	r0, [pc, #144]	@ (8002674 <nRF24_Init+0xa4>)
 80025e4:	f00c f8d2 	bl	800e78c <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80025e8:	2201      	movs	r2, #1
 80025ea:	2180      	movs	r1, #128	@ 0x80
 80025ec:	4821      	ldr	r0, [pc, #132]	@ (8002674 <nRF24_Init+0xa4>)
 80025ee:	f00c f8cd 	bl	800e78c <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 80025f2:	200a      	movs	r0, #10
 80025f4:	f006 ff8e 	bl	8009514 <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80025f8:	2003      	movs	r0, #3
 80025fa:	f7ff fcf5 	bl	8001fe8 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 80025fe:	2001      	movs	r0, #1
 8002600:	f7ff fd11 	bl	8002026 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8002604:	2001      	movs	r0, #1
 8002606:	f7ff fd7f 	bl	8002108 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 800260a:	2000      	movs	r0, #0
 800260c:	f7ff fd99 	bl	8002142 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 8002610:	2100      	movs	r1, #0
 8002612:	2000      	movs	r0, #0
 8002614:	f7ff fdb2 	bl	800217c <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8002618:	2100      	movs	r1, #0
 800261a:	201c      	movs	r0, #28
 800261c:	f7ff fc2e 	bl	8001e7c <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8002620:	2120      	movs	r1, #32
 8002622:	2000      	movs	r0, #0
 8002624:	f7ff fdd6 	bl	80021d4 <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 8002628:	200f      	movs	r0, #15
 800262a:	f7ff fdc2 	bl	80021b2 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 800262e:	2101      	movs	r1, #1
 8002630:	2000      	movs	r0, #0
 8002632:	f7ff fdeb 	bl	800220c <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8002636:	2101      	movs	r1, #1
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff fe1c 	bl	8002276 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 800263e:	2003      	movs	r0, #3
 8002640:	f7ff fe4e 	bl	80022e0 <nRF24_SetAddressWidth>

	HAL_Delay(1);
 8002644:	2001      	movs	r0, #1
 8002646:	f006 ff65 	bl	8009514 <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 800264a:	2001      	movs	r0, #1
 800264c:	f7ff fef7 	bl	800243e <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8002650:	2000      	movs	r0, #0
 8002652:	f7ff ff11 	bl	8002478 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 8002656:	2000      	movs	r0, #0
 8002658:	f7ff ff2b 	bl	80024b2 <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 800265c:	2001      	movs	r0, #1
 800265e:	f006 ff59 	bl	8009514 <HAL_Delay>

	nRF24_ClearInterrupts();
 8002662:	f7ff fed9 	bl	8002418 <nRF24_ClearInterrupts>


}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	240000a4 	.word	0x240000a4
 8002674:	58020400 	.word	0x58020400

08002678 <nRF24_Inittest>:
void nRF24_Inittest(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
//	xz[5] = nRF24_ReadRegister(NRF24_EN_RXADDR);
//	xz[6] = nRF24_ReadRegister(NRF24_EN_AA);
//	xz[7] = nRF24_ReadRegister(NRF24_SETUP_AW);
//	xz[8] = nRF24_ReadConfig();

}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800268c:	f3bf 8f4f 	dsb	sy
}
 8002690:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002692:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <__NVIC_SystemReset+0x24>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800269a:	4904      	ldr	r1, [pc, #16]	@ (80026ac <__NVIC_SystemReset+0x24>)
 800269c:	4b04      	ldr	r3, [pc, #16]	@ (80026b0 <__NVIC_SystemReset+0x28>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80026a2:	f3bf 8f4f 	dsb	sy
}
 80026a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <__NVIC_SystemReset+0x20>
 80026ac:	e000ed00 	.word	0xe000ed00
 80026b0:	05fa0004 	.word	0x05fa0004

080026b4 <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	75fb      	strb	r3, [r7, #23]
 80026be:	2300      	movs	r3, #0
 80026c0:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 80026c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002740 <interpretcommand+0x8c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	e02e      	b.n	800272c <interpretcommand+0x78>

		if(words[j] == ' '){
 80026ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002744 <interpretcommand+0x90>)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	d102      	bne.n	80026e0 <interpretcommand+0x2c>
			vcount++;
 80026da:	7dfb      	ldrb	r3, [r7, #23]
 80026dc:	3301      	adds	r3, #1
 80026de:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d108      	bne.n	80026f8 <interpretcommand+0x44>
			command[j] = words[j];
 80026e6:	4a17      	ldr	r2, [pc, #92]	@ (8002744 <interpretcommand+0x90>)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	7819      	ldrb	r1, [r3, #0]
 80026ee:	4a16      	ldr	r2, [pc, #88]	@ (8002748 <interpretcommand+0x94>)
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	460a      	mov	r2, r1
 80026f6:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d113      	bne.n	8002726 <interpretcommand+0x72>
			value1[J1] = words[j];
 80026fe:	7dbb      	ldrb	r3, [r7, #22]
 8002700:	4910      	ldr	r1, [pc, #64]	@ (8002744 <interpretcommand+0x90>)
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	440a      	add	r2, r1
 8002706:	7812      	ldrb	r2, [r2, #0]
 8002708:	3318      	adds	r3, #24
 800270a:	443b      	add	r3, r7
 800270c:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 8002710:	7dba      	ldrb	r2, [r7, #22]
 8002712:	7dbb      	ldrb	r3, [r7, #22]
 8002714:	3218      	adds	r2, #24
 8002716:	443a      	add	r2, r7
 8002718:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 800271c:	4a0b      	ldr	r2, [pc, #44]	@ (800274c <interpretcommand+0x98>)
 800271e:	54d1      	strb	r1, [r2, r3]
			J1++;
 8002720:	7dbb      	ldrb	r3, [r7, #22]
 8002722:	3301      	adds	r3, #1
 8002724:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	3301      	adds	r3, #1
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002730:	ddcd      	ble.n	80026ce <interpretcommand+0x1a>
		}
	}
}
 8002732:	bf00      	nop
 8002734:	bf00      	nop
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	000041d6 	.word	0x000041d6
 8002744:	000041cc 	.word	0x000041cc
 8002748:	000041c8 	.word	0x000041c8
 800274c:	000041b8 	.word	0x000041b8

08002750 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b50      	cmp	r3, #80	@ 0x50
 8002760:	d14c      	bne.n	80027fc <executecommand+0xac>
	{
		p_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002762:	4bd5      	ldr	r3, [pc, #852]	@ (8002ab8 <executecommand+0x368>)
 8002764:	785b      	ldrb	r3, [r3, #1]
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276e:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002abc <executecommand+0x36c>
 8002772:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002776:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002ac0 <executecommand+0x370>
 800277a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800277e:	4bce      	ldr	r3, [pc, #824]	@ (8002ab8 <executecommand+0x368>)
 8002780:	789b      	ldrb	r3, [r3, #2]
 8002782:	ee07 3a90 	vmov	s15, r3
 8002786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800278a:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002abc <executecommand+0x36c>
 800278e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002792:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002796:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800279a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800279e:	4bc6      	ldr	r3, [pc, #792]	@ (8002ab8 <executecommand+0x368>)
 80027a0:	78db      	ldrb	r3, [r3, #3]
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027aa:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002abc <executecommand+0x36c>
 80027ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80027b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027b6:	4bc0      	ldr	r3, [pc, #768]	@ (8002ab8 <executecommand+0x368>)
 80027b8:	791b      	ldrb	r3, [r3, #4]
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c2:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002abc <executecommand+0x36c>
 80027c6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80027ca:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80027ce:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027d6:	4bb8      	ldr	r3, [pc, #736]	@ (8002ab8 <executecommand+0x368>)
 80027d8:	795b      	ldrb	r3, [r3, #5]
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e2:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002abc <executecommand+0x36c>
 80027e6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80027ea:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002ac0 <executecommand+0x370>
 80027ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f6:	4bb3      	ldr	r3, [pc, #716]	@ (8002ac4 <executecommand+0x374>)
 80027f8:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'I')
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b49      	cmp	r3, #73	@ 0x49
 8002802:	d14f      	bne.n	80028a4 <executecommand+0x154>
	{
		i_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002804:	4bac      	ldr	r3, [pc, #688]	@ (8002ab8 <executecommand+0x368>)
 8002806:	785b      	ldrb	r3, [r3, #1]
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002810:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002abc <executecommand+0x36c>
 8002814:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002818:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002ac0 <executecommand+0x370>
 800281c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002820:	4ba5      	ldr	r3, [pc, #660]	@ (8002ab8 <executecommand+0x368>)
 8002822:	789b      	ldrb	r3, [r3, #2]
 8002824:	ee07 3a90 	vmov	s15, r3
 8002828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282c:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002abc <executecommand+0x36c>
 8002830:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002834:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002838:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800283c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002840:	4b9d      	ldr	r3, [pc, #628]	@ (8002ab8 <executecommand+0x368>)
 8002842:	78db      	ldrb	r3, [r3, #3]
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284c:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002abc <executecommand+0x36c>
 8002850:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002854:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002858:	4b97      	ldr	r3, [pc, #604]	@ (8002ab8 <executecommand+0x368>)
 800285a:	791b      	ldrb	r3, [r3, #4]
 800285c:	ee07 3a90 	vmov	s15, r3
 8002860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002864:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002abc <executecommand+0x36c>
 8002868:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800286c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002870:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002874:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002878:	4b8f      	ldr	r3, [pc, #572]	@ (8002ab8 <executecommand+0x368>)
 800287a:	795b      	ldrb	r3, [r3, #5]
 800287c:	ee07 3a90 	vmov	s15, r3
 8002880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002884:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002abc <executecommand+0x36c>
 8002888:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800288c:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002ac0 <executecommand+0x370>
 8002890:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002898:	4b8b      	ldr	r3, [pc, #556]	@ (8002ac8 <executecommand+0x378>)
 800289a:	edc3 7a00 	vstr	s15, [r3]
		error_sum_pitch = 0;
 800289e:	4b8b      	ldr	r3, [pc, #556]	@ (8002acc <executecommand+0x37c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'D')
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b44      	cmp	r3, #68	@ 0x44
 80028aa:	d14c      	bne.n	8002946 <executecommand+0x1f6>
	{
		d_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 80028ac:	4b82      	ldr	r3, [pc, #520]	@ (8002ab8 <executecommand+0x368>)
 80028ae:	785b      	ldrb	r3, [r3, #1]
 80028b0:	ee07 3a90 	vmov	s15, r3
 80028b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002abc <executecommand+0x36c>
 80028bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028c0:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002ad0 <executecommand+0x380>
 80028c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028c8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab8 <executecommand+0x368>)
 80028ca:	789b      	ldrb	r3, [r3, #2]
 80028cc:	ee07 3a90 	vmov	s15, r3
 80028d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028d4:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002abc <executecommand+0x36c>
 80028d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028dc:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002ac0 <executecommand+0x370>
 80028e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e8:	4b73      	ldr	r3, [pc, #460]	@ (8002ab8 <executecommand+0x368>)
 80028ea:	78db      	ldrb	r3, [r3, #3]
 80028ec:	ee07 3a90 	vmov	s15, r3
 80028f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f4:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002abc <executecommand+0x36c>
 80028f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028fc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002900:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002908:	4b6b      	ldr	r3, [pc, #428]	@ (8002ab8 <executecommand+0x368>)
 800290a:	791b      	ldrb	r3, [r3, #4]
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002914:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002abc <executecommand+0x36c>
 8002918:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800291c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002920:	4b65      	ldr	r3, [pc, #404]	@ (8002ab8 <executecommand+0x368>)
 8002922:	795b      	ldrb	r3, [r3, #5]
 8002924:	ee07 3a90 	vmov	s15, r3
 8002928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800292c:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002abc <executecommand+0x36c>
 8002930:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002934:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002938:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800293c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002940:	4b64      	ldr	r3, [pc, #400]	@ (8002ad4 <executecommand+0x384>)
 8002942:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'p')
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b70      	cmp	r3, #112	@ 0x70
 800294c:	d14c      	bne.n	80029e8 <executecommand+0x298>
	{
		p_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800294e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ab8 <executecommand+0x368>)
 8002950:	785b      	ldrb	r3, [r3, #1]
 8002952:	ee07 3a90 	vmov	s15, r3
 8002956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295a:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002abc <executecommand+0x36c>
 800295e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002962:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002ac0 <executecommand+0x370>
 8002966:	ee27 7a87 	vmul.f32	s14, s15, s14
 800296a:	4b53      	ldr	r3, [pc, #332]	@ (8002ab8 <executecommand+0x368>)
 800296c:	789b      	ldrb	r3, [r3, #2]
 800296e:	ee07 3a90 	vmov	s15, r3
 8002972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002976:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002abc <executecommand+0x36c>
 800297a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800297e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002982:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298a:	4b4b      	ldr	r3, [pc, #300]	@ (8002ab8 <executecommand+0x368>)
 800298c:	78db      	ldrb	r3, [r3, #3]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002996:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002abc <executecommand+0x36c>
 800299a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800299e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029a2:	4b45      	ldr	r3, [pc, #276]	@ (8002ab8 <executecommand+0x368>)
 80029a4:	791b      	ldrb	r3, [r3, #4]
 80029a6:	ee07 3a90 	vmov	s15, r3
 80029aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ae:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002abc <executecommand+0x36c>
 80029b2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80029b6:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80029ba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029c2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab8 <executecommand+0x368>)
 80029c4:	795b      	ldrb	r3, [r3, #5]
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ce:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002abc <executecommand+0x36c>
 80029d2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80029d6:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002ac0 <executecommand+0x370>
 80029da:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ad8 <executecommand+0x388>)
 80029e4:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'i')
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b69      	cmp	r3, #105	@ 0x69
 80029ee:	d14f      	bne.n	8002a90 <executecommand+0x340>
	{
		i_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80029f0:	4b31      	ldr	r3, [pc, #196]	@ (8002ab8 <executecommand+0x368>)
 80029f2:	785b      	ldrb	r3, [r3, #1]
 80029f4:	ee07 3a90 	vmov	s15, r3
 80029f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002abc <executecommand+0x36c>
 8002a00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a04:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002ac0 <executecommand+0x370>
 8002a08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab8 <executecommand+0x368>)
 8002a0e:	789b      	ldrb	r3, [r3, #2]
 8002a10:	ee07 3a90 	vmov	s15, r3
 8002a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a18:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002abc <executecommand+0x36c>
 8002a1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a20:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a2c:	4b22      	ldr	r3, [pc, #136]	@ (8002ab8 <executecommand+0x368>)
 8002a2e:	78db      	ldrb	r3, [r3, #3]
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a38:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002abc <executecommand+0x36c>
 8002a3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a44:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab8 <executecommand+0x368>)
 8002a46:	791b      	ldrb	r3, [r3, #4]
 8002a48:	ee07 3a90 	vmov	s15, r3
 8002a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a50:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002abc <executecommand+0x36c>
 8002a54:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a58:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a5c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a64:	4b14      	ldr	r3, [pc, #80]	@ (8002ab8 <executecommand+0x368>)
 8002a66:	795b      	ldrb	r3, [r3, #5]
 8002a68:	ee07 3a90 	vmov	s15, r3
 8002a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a70:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002abc <executecommand+0x36c>
 8002a74:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a78:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002ac0 <executecommand+0x370>
 8002a7c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a84:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <executecommand+0x38c>)
 8002a86:	edc3 7a00 	vstr	s15, [r3]
		error_sum_angular_rate_pitch = 0;
 8002a8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ae0 <executecommand+0x390>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'd')
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b64      	cmp	r3, #100	@ 0x64
 8002a96:	d164      	bne.n	8002b62 <executecommand+0x412>
	{
		d_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002a98:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <executecommand+0x368>)
 8002a9a:	785b      	ldrb	r3, [r3, #1]
 8002a9c:	ee07 3a90 	vmov	s15, r3
 8002aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa4:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002abc <executecommand+0x36c>
 8002aa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002aac:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002ad0 <executecommand+0x380>
 8002ab0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ab4:	e016      	b.n	8002ae4 <executecommand+0x394>
 8002ab6:	bf00      	nop
 8002ab8:	000041b8 	.word	0x000041b8
 8002abc:	42400000 	.word	0x42400000
 8002ac0:	42c80000 	.word	0x42c80000
 8002ac4:	000040e4 	.word	0x000040e4
 8002ac8:	000040f0 	.word	0x000040f0
 8002acc:	000040b4 	.word	0x000040b4
 8002ad0:	447a0000 	.word	0x447a0000
 8002ad4:	000040fc 	.word	0x000040fc
 8002ad8:	00004144 	.word	0x00004144
 8002adc:	00004150 	.word	0x00004150
 8002ae0:	000040c0 	.word	0x000040c0
 8002ae4:	4bd3      	ldr	r3, [pc, #844]	@ (8002e34 <executecommand+0x6e4>)
 8002ae6:	789b      	ldrb	r3, [r3, #2]
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af0:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002e38 <executecommand+0x6e8>
 8002af4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002af8:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002e3c <executecommand+0x6ec>
 8002afc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b04:	4bcb      	ldr	r3, [pc, #812]	@ (8002e34 <executecommand+0x6e4>)
 8002b06:	78db      	ldrb	r3, [r3, #3]
 8002b08:	ee07 3a90 	vmov	s15, r3
 8002b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b10:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002e38 <executecommand+0x6e8>
 8002b14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b18:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002b1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b24:	4bc3      	ldr	r3, [pc, #780]	@ (8002e34 <executecommand+0x6e4>)
 8002b26:	791b      	ldrb	r3, [r3, #4]
 8002b28:	ee07 3a90 	vmov	s15, r3
 8002b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b30:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002e38 <executecommand+0x6e8>
 8002b34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b3c:	4bbd      	ldr	r3, [pc, #756]	@ (8002e34 <executecommand+0x6e4>)
 8002b3e:	795b      	ldrb	r3, [r3, #5]
 8002b40:	ee07 3a90 	vmov	s15, r3
 8002b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b48:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002e38 <executecommand+0x6e8>
 8002b4c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b50:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002b54:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b5c:	4bb8      	ldr	r3, [pc, #736]	@ (8002e40 <executecommand+0x6f0>)
 8002b5e:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'F')
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b46      	cmp	r3, #70	@ 0x46
 8002b68:	d150      	bne.n	8002c0c <executecommand+0x4bc>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002b6a:	4bb2      	ldr	r3, [pc, #712]	@ (8002e34 <executecommand+0x6e4>)
 8002b6c:	785b      	ldrb	r3, [r3, #1]
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b76:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002e38 <executecommand+0x6e8>
 8002b7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b7e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002e44 <executecommand+0x6f4>
 8002b82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b86:	4bab      	ldr	r3, [pc, #684]	@ (8002e34 <executecommand+0x6e4>)
 8002b88:	789b      	ldrb	r3, [r3, #2]
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b92:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002e38 <executecommand+0x6e8>
 8002b96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b9a:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002e3c <executecommand+0x6ec>
 8002b9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ba2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ba6:	4ba3      	ldr	r3, [pc, #652]	@ (8002e34 <executecommand+0x6e4>)
 8002ba8:	78db      	ldrb	r3, [r3, #3]
 8002baa:	ee07 3a90 	vmov	s15, r3
 8002bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb2:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002e38 <executecommand+0x6e8>
 8002bb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bba:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002bbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc6:	4b9b      	ldr	r3, [pc, #620]	@ (8002e34 <executecommand+0x6e4>)
 8002bc8:	791b      	ldrb	r3, [r3, #4]
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd2:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002e38 <executecommand+0x6e8>
 8002bd6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bde:	4b95      	ldr	r3, [pc, #596]	@ (8002e34 <executecommand+0x6e4>)
 8002be0:	795b      	ldrb	r3, [r3, #5]
 8002be2:	ee07 3a90 	vmov	s15, r3
 8002be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bea:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002e38 <executecommand+0x6e8>
 8002bee:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002bf2:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002bf6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c02:	ee17 3a90 	vmov	r3, s15
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	4b8f      	ldr	r3, [pc, #572]	@ (8002e48 <executecommand+0x6f8>)
 8002c0a:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b66      	cmp	r3, #102	@ 0x66
 8002c12:	d150      	bne.n	8002cb6 <executecommand+0x566>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002c14:	4b87      	ldr	r3, [pc, #540]	@ (8002e34 <executecommand+0x6e4>)
 8002c16:	785b      	ldrb	r3, [r3, #1]
 8002c18:	ee07 3a90 	vmov	s15, r3
 8002c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c20:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002e38 <executecommand+0x6e8>
 8002c24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c28:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002e44 <executecommand+0x6f4>
 8002c2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c30:	4b80      	ldr	r3, [pc, #512]	@ (8002e34 <executecommand+0x6e4>)
 8002c32:	789b      	ldrb	r3, [r3, #2]
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c3c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002e38 <executecommand+0x6e8>
 8002c40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c44:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002e3c <executecommand+0x6ec>
 8002c48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c50:	4b78      	ldr	r3, [pc, #480]	@ (8002e34 <executecommand+0x6e4>)
 8002c52:	78db      	ldrb	r3, [r3, #3]
 8002c54:	ee07 3a90 	vmov	s15, r3
 8002c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c5c:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002e38 <executecommand+0x6e8>
 8002c60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c64:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c70:	4b70      	ldr	r3, [pc, #448]	@ (8002e34 <executecommand+0x6e4>)
 8002c72:	791b      	ldrb	r3, [r3, #4]
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002e38 <executecommand+0x6e8>
 8002c80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c88:	4b6a      	ldr	r3, [pc, #424]	@ (8002e34 <executecommand+0x6e4>)
 8002c8a:	795b      	ldrb	r3, [r3, #5]
 8002c8c:	ee07 3a90 	vmov	s15, r3
 8002c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c94:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002e38 <executecommand+0x6e8>
 8002c98:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c9c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002ca0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cac:	ee17 3a90 	vmov	r3, s15
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	4b66      	ldr	r3, [pc, #408]	@ (8002e4c <executecommand+0x6fc>)
 8002cb4:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b61      	cmp	r3, #97	@ 0x61
 8002cbc:	d14c      	bne.n	8002d58 <executecommand+0x608>
		{
			p_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002cbe:	4b5d      	ldr	r3, [pc, #372]	@ (8002e34 <executecommand+0x6e4>)
 8002cc0:	785b      	ldrb	r3, [r3, #1]
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cca:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002e38 <executecommand+0x6e8>
 8002cce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cd2:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002e3c <executecommand+0x6ec>
 8002cd6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cda:	4b56      	ldr	r3, [pc, #344]	@ (8002e34 <executecommand+0x6e4>)
 8002cdc:	789b      	ldrb	r3, [r3, #2]
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce6:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002e38 <executecommand+0x6e8>
 8002cea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cee:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002cf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cfa:	4b4e      	ldr	r3, [pc, #312]	@ (8002e34 <executecommand+0x6e4>)
 8002cfc:	78db      	ldrb	r3, [r3, #3]
 8002cfe:	ee07 3a90 	vmov	s15, r3
 8002d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d06:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002e38 <executecommand+0x6e8>
 8002d0a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d12:	4b48      	ldr	r3, [pc, #288]	@ (8002e34 <executecommand+0x6e4>)
 8002d14:	791b      	ldrb	r3, [r3, #4]
 8002d16:	ee07 3a90 	vmov	s15, r3
 8002d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d1e:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002e38 <executecommand+0x6e8>
 8002d22:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d26:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d2a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d32:	4b40      	ldr	r3, [pc, #256]	@ (8002e34 <executecommand+0x6e4>)
 8002d34:	795b      	ldrb	r3, [r3, #5]
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d3e:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002e38 <executecommand+0x6e8>
 8002d42:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d46:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002e3c <executecommand+0x6ec>
 8002d4a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d52:	4b3f      	ldr	r3, [pc, #252]	@ (8002e50 <executecommand+0x700>)
 8002d54:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'b')
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b62      	cmp	r3, #98	@ 0x62
 8002d5e:	d14f      	bne.n	8002e00 <executecommand+0x6b0>
		{
			i_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002d60:	4b34      	ldr	r3, [pc, #208]	@ (8002e34 <executecommand+0x6e4>)
 8002d62:	785b      	ldrb	r3, [r3, #1]
 8002d64:	ee07 3a90 	vmov	s15, r3
 8002d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002e38 <executecommand+0x6e8>
 8002d70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d74:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002e3c <executecommand+0x6ec>
 8002d78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e34 <executecommand+0x6e4>)
 8002d7e:	789b      	ldrb	r3, [r3, #2]
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d88:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002e38 <executecommand+0x6e8>
 8002d8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d90:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d9c:	4b25      	ldr	r3, [pc, #148]	@ (8002e34 <executecommand+0x6e4>)
 8002d9e:	78db      	ldrb	r3, [r3, #3]
 8002da0:	ee07 3a90 	vmov	s15, r3
 8002da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da8:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002e38 <executecommand+0x6e8>
 8002dac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002db0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e34 <executecommand+0x6e4>)
 8002db6:	791b      	ldrb	r3, [r3, #4]
 8002db8:	ee07 3a90 	vmov	s15, r3
 8002dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc0:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002e38 <executecommand+0x6e8>
 8002dc4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002dc8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002dcc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002dd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dd4:	4b17      	ldr	r3, [pc, #92]	@ (8002e34 <executecommand+0x6e4>)
 8002dd6:	795b      	ldrb	r3, [r3, #5]
 8002dd8:	ee07 3a90 	vmov	s15, r3
 8002ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de0:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002e38 <executecommand+0x6e8>
 8002de4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002de8:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002e3c <executecommand+0x6ec>
 8002dec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df4:	4b17      	ldr	r3, [pc, #92]	@ (8002e54 <executecommand+0x704>)
 8002df6:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = 0;
 8002dfa:	4b17      	ldr	r3, [pc, #92]	@ (8002e58 <executecommand+0x708>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'c')
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b63      	cmp	r3, #99	@ 0x63
 8002e06:	d166      	bne.n	8002ed6 <executecommand+0x786>
		{
			d_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002e08:	4b0a      	ldr	r3, [pc, #40]	@ (8002e34 <executecommand+0x6e4>)
 8002e0a:	785b      	ldrb	r3, [r3, #1]
 8002e0c:	ee07 3a90 	vmov	s15, r3
 8002e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e14:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002e38 <executecommand+0x6e8>
 8002e18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e1c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002e44 <executecommand+0x6f4>
 8002e20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e24:	4b03      	ldr	r3, [pc, #12]	@ (8002e34 <executecommand+0x6e4>)
 8002e26:	789b      	ldrb	r3, [r3, #2]
 8002e28:	ee07 3a90 	vmov	s15, r3
 8002e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e30:	e018      	b.n	8002e64 <executecommand+0x714>
 8002e32:	bf00      	nop
 8002e34:	000041b8 	.word	0x000041b8
 8002e38:	42400000 	.word	0x42400000
 8002e3c:	42c80000 	.word	0x42c80000
 8002e40:	0000415c 	.word	0x0000415c
 8002e44:	447a0000 	.word	0x447a0000
 8002e48:	00004074 	.word	0x00004074
 8002e4c:	00004076 	.word	0x00004076
 8002e50:	000040e8 	.word	0x000040e8
 8002e54:	000040f4 	.word	0x000040f4
 8002e58:	000040b8 	.word	0x000040b8
 8002e5c:	42400000 	.word	0x42400000
 8002e60:	42c80000 	.word	0x42c80000
 8002e64:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 8002e5c <executecommand+0x70c>
 8002e68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e6c:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002e60 <executecommand+0x710>
 8002e70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e78:	4bd5      	ldr	r3, [pc, #852]	@ (80031d0 <executecommand+0xa80>)
 8002e7a:	78db      	ldrb	r3, [r3, #3]
 8002e7c:	ee07 3a90 	vmov	s15, r3
 8002e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e84:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 80031d4 <executecommand+0xa84>
 8002e88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e8c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002e90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e98:	4bcd      	ldr	r3, [pc, #820]	@ (80031d0 <executecommand+0xa80>)
 8002e9a:	791b      	ldrb	r3, [r3, #4]
 8002e9c:	ee07 3a90 	vmov	s15, r3
 8002ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea4:	eddf 6acb 	vldr	s13, [pc, #812]	@ 80031d4 <executecommand+0xa84>
 8002ea8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002eac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eb0:	4bc7      	ldr	r3, [pc, #796]	@ (80031d0 <executecommand+0xa80>)
 8002eb2:	795b      	ldrb	r3, [r3, #5]
 8002eb4:	ee07 3a90 	vmov	s15, r3
 8002eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ebc:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 80031d4 <executecommand+0xa84>
 8002ec0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ec4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002ec8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed0:	4bc1      	ldr	r3, [pc, #772]	@ (80031d8 <executecommand+0xa88>)
 8002ed2:	edc3 7a00 	vstr	s15, [r3]
		}
		if(command[0] == 'e')
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b65      	cmp	r3, #101	@ 0x65
 8002edc:	d14c      	bne.n	8002f78 <executecommand+0x828>
		{
			p_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002ede:	4bbc      	ldr	r3, [pc, #752]	@ (80031d0 <executecommand+0xa80>)
 8002ee0:	785b      	ldrb	r3, [r3, #1]
 8002ee2:	ee07 3a90 	vmov	s15, r3
 8002ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eea:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80031d4 <executecommand+0xa84>
 8002eee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ef2:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80031dc <executecommand+0xa8c>
 8002ef6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002efa:	4bb5      	ldr	r3, [pc, #724]	@ (80031d0 <executecommand+0xa80>)
 8002efc:	789b      	ldrb	r3, [r3, #2]
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f06:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 80031d4 <executecommand+0xa84>
 8002f0a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f0e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f1a:	4bad      	ldr	r3, [pc, #692]	@ (80031d0 <executecommand+0xa80>)
 8002f1c:	78db      	ldrb	r3, [r3, #3]
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f26:	eddf 6aab 	vldr	s13, [pc, #684]	@ 80031d4 <executecommand+0xa84>
 8002f2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f32:	4ba7      	ldr	r3, [pc, #668]	@ (80031d0 <executecommand+0xa80>)
 8002f34:	791b      	ldrb	r3, [r3, #4]
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3e:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 80031d4 <executecommand+0xa84>
 8002f42:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f46:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002f4a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f52:	4b9f      	ldr	r3, [pc, #636]	@ (80031d0 <executecommand+0xa80>)
 8002f54:	795b      	ldrb	r3, [r3, #5]
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5e:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 80031d4 <executecommand+0xa84>
 8002f62:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f66:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 80031dc <executecommand+0xa8c>
 8002f6a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f72:	4b9b      	ldr	r3, [pc, #620]	@ (80031e0 <executecommand+0xa90>)
 8002f74:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'g')
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b67      	cmp	r3, #103	@ 0x67
 8002f7e:	d14f      	bne.n	8003020 <executecommand+0x8d0>
		{
			i_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002f80:	4b93      	ldr	r3, [pc, #588]	@ (80031d0 <executecommand+0xa80>)
 8002f82:	785b      	ldrb	r3, [r3, #1]
 8002f84:	ee07 3a90 	vmov	s15, r3
 8002f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80031d4 <executecommand+0xa84>
 8002f90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f94:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80031dc <executecommand+0xa8c>
 8002f98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f9c:	4b8c      	ldr	r3, [pc, #560]	@ (80031d0 <executecommand+0xa80>)
 8002f9e:	789b      	ldrb	r3, [r3, #2]
 8002fa0:	ee07 3a90 	vmov	s15, r3
 8002fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa8:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 80031d4 <executecommand+0xa84>
 8002fac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fb0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002fb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fbc:	4b84      	ldr	r3, [pc, #528]	@ (80031d0 <executecommand+0xa80>)
 8002fbe:	78db      	ldrb	r3, [r3, #3]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc8:	eddf 6a82 	vldr	s13, [pc, #520]	@ 80031d4 <executecommand+0xa84>
 8002fcc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fd4:	4b7e      	ldr	r3, [pc, #504]	@ (80031d0 <executecommand+0xa80>)
 8002fd6:	791b      	ldrb	r3, [r3, #4]
 8002fd8:	ee07 3a90 	vmov	s15, r3
 8002fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe0:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80031d4 <executecommand+0xa84>
 8002fe4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fe8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002fec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ff0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ff4:	4b76      	ldr	r3, [pc, #472]	@ (80031d0 <executecommand+0xa80>)
 8002ff6:	795b      	ldrb	r3, [r3, #5]
 8002ff8:	ee07 3a90 	vmov	s15, r3
 8002ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003000:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80031d4 <executecommand+0xa84>
 8003004:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003008:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 80031dc <executecommand+0xa8c>
 800300c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003014:	4b73      	ldr	r3, [pc, #460]	@ (80031e4 <executecommand+0xa94>)
 8003016:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = 0;
 800301a:	4b73      	ldr	r3, [pc, #460]	@ (80031e8 <executecommand+0xa98>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'h')
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b68      	cmp	r3, #104	@ 0x68
 8003026:	d14c      	bne.n	80030c2 <executecommand+0x972>
		{
			d_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003028:	4b69      	ldr	r3, [pc, #420]	@ (80031d0 <executecommand+0xa80>)
 800302a:	785b      	ldrb	r3, [r3, #1]
 800302c:	ee07 3a90 	vmov	s15, r3
 8003030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003034:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80031d4 <executecommand+0xa84>
 8003038:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800303c:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80031ec <executecommand+0xa9c>
 8003040:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003044:	4b62      	ldr	r3, [pc, #392]	@ (80031d0 <executecommand+0xa80>)
 8003046:	789b      	ldrb	r3, [r3, #2]
 8003048:	ee07 3a90 	vmov	s15, r3
 800304c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003050:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80031d4 <executecommand+0xa84>
 8003054:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003058:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80031dc <executecommand+0xa8c>
 800305c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003060:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003064:	4b5a      	ldr	r3, [pc, #360]	@ (80031d0 <executecommand+0xa80>)
 8003066:	78db      	ldrb	r3, [r3, #3]
 8003068:	ee07 3a90 	vmov	s15, r3
 800306c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003070:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80031d4 <executecommand+0xa84>
 8003074:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003078:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800307c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003080:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003084:	4b52      	ldr	r3, [pc, #328]	@ (80031d0 <executecommand+0xa80>)
 8003086:	791b      	ldrb	r3, [r3, #4]
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003090:	eddf 6a50 	vldr	s13, [pc, #320]	@ 80031d4 <executecommand+0xa84>
 8003094:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003098:	ee37 7a27 	vadd.f32	s14, s14, s15
 800309c:	4b4c      	ldr	r3, [pc, #304]	@ (80031d0 <executecommand+0xa80>)
 800309e:	795b      	ldrb	r3, [r3, #5]
 80030a0:	ee07 3a90 	vmov	s15, r3
 80030a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a8:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80031d4 <executecommand+0xa84>
 80030ac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80030b0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80030b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80030b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030bc:	4b4c      	ldr	r3, [pc, #304]	@ (80031f0 <executecommand+0xaa0>)
 80030be:	edc3 7a00 	vstr	s15, [r3]





		if(command[0] == 'j')
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b6a      	cmp	r3, #106	@ 0x6a
 80030c8:	d14c      	bne.n	8003164 <executecommand+0xa14>
			{
				p_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80030ca:	4b41      	ldr	r3, [pc, #260]	@ (80031d0 <executecommand+0xa80>)
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	ee07 3a90 	vmov	s15, r3
 80030d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d6:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80031d4 <executecommand+0xa84>
 80030da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030de:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80031dc <executecommand+0xa8c>
 80030e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030e6:	4b3a      	ldr	r3, [pc, #232]	@ (80031d0 <executecommand+0xa80>)
 80030e8:	789b      	ldrb	r3, [r3, #2]
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80031d4 <executecommand+0xa84>
 80030f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030fa:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003102:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003106:	4b32      	ldr	r3, [pc, #200]	@ (80031d0 <executecommand+0xa80>)
 8003108:	78db      	ldrb	r3, [r3, #3]
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003112:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80031d4 <executecommand+0xa84>
 8003116:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800311a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800311e:	4b2c      	ldr	r3, [pc, #176]	@ (80031d0 <executecommand+0xa80>)
 8003120:	791b      	ldrb	r3, [r3, #4]
 8003122:	ee07 3a90 	vmov	s15, r3
 8003126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80031d4 <executecommand+0xa84>
 800312e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003132:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003136:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800313a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800313e:	4b24      	ldr	r3, [pc, #144]	@ (80031d0 <executecommand+0xa80>)
 8003140:	795b      	ldrb	r3, [r3, #5]
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80031d4 <executecommand+0xa84>
 800314e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003152:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80031dc <executecommand+0xa8c>
 8003156:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800315a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315e:	4b25      	ldr	r3, [pc, #148]	@ (80031f4 <executecommand+0xaa4>)
 8003160:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'k')
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b6b      	cmp	r3, #107	@ 0x6b
 800316a:	d167      	bne.n	800323c <executecommand+0xaec>
			{
				i_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800316c:	4b18      	ldr	r3, [pc, #96]	@ (80031d0 <executecommand+0xa80>)
 800316e:	785b      	ldrb	r3, [r3, #1]
 8003170:	ee07 3a90 	vmov	s15, r3
 8003174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003178:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80031d4 <executecommand+0xa84>
 800317c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003180:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80031dc <executecommand+0xa8c>
 8003184:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003188:	4b11      	ldr	r3, [pc, #68]	@ (80031d0 <executecommand+0xa80>)
 800318a:	789b      	ldrb	r3, [r3, #2]
 800318c:	ee07 3a90 	vmov	s15, r3
 8003190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003194:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80031d4 <executecommand+0xa84>
 8003198:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800319c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80031a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031a8:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <executecommand+0xa80>)
 80031aa:	78db      	ldrb	r3, [r3, #3]
 80031ac:	ee07 3a90 	vmov	s15, r3
 80031b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b4:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80031d4 <executecommand+0xa84>
 80031b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031c0:	4b03      	ldr	r3, [pc, #12]	@ (80031d0 <executecommand+0xa80>)
 80031c2:	791b      	ldrb	r3, [r3, #4]
 80031c4:	ee07 3a90 	vmov	s15, r3
 80031c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031cc:	e016      	b.n	80031fc <executecommand+0xaac>
 80031ce:	bf00      	nop
 80031d0:	000041b8 	.word	0x000041b8
 80031d4:	42400000 	.word	0x42400000
 80031d8:	00004100 	.word	0x00004100
 80031dc:	42c80000 	.word	0x42c80000
 80031e0:	00004148 	.word	0x00004148
 80031e4:	00004154 	.word	0x00004154
 80031e8:	000040c4 	.word	0x000040c4
 80031ec:	447a0000 	.word	0x447a0000
 80031f0:	00004160 	.word	0x00004160
 80031f4:	000040ec 	.word	0x000040ec
 80031f8:	42400000 	.word	0x42400000
 80031fc:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 80031f8 <executecommand+0xaa8>
 8003200:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003204:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003208:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800320c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003210:	4bba      	ldr	r3, [pc, #744]	@ (80034fc <executecommand+0xdac>)
 8003212:	795b      	ldrb	r3, [r3, #5]
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321c:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 8003500 <executecommand+0xdb0>
 8003220:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003224:	ed9f 6ab7 	vldr	s12, [pc, #732]	@ 8003504 <executecommand+0xdb4>
 8003228:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800322c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003230:	4bb5      	ldr	r3, [pc, #724]	@ (8003508 <executecommand+0xdb8>)
 8003232:	edc3 7a00 	vstr	s15, [r3]
				error_sum_yaw = 0;
 8003236:	4bb5      	ldr	r3, [pc, #724]	@ (800350c <executecommand+0xdbc>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'l')
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b6c      	cmp	r3, #108	@ 0x6c
 8003242:	d14c      	bne.n	80032de <executecommand+0xb8e>
			{
				d_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003244:	4bad      	ldr	r3, [pc, #692]	@ (80034fc <executecommand+0xdac>)
 8003246:	785b      	ldrb	r3, [r3, #1]
 8003248:	ee07 3a90 	vmov	s15, r3
 800324c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003250:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 8003500 <executecommand+0xdb0>
 8003254:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003258:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8003510 <executecommand+0xdc0>
 800325c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003260:	4ba6      	ldr	r3, [pc, #664]	@ (80034fc <executecommand+0xdac>)
 8003262:	789b      	ldrb	r3, [r3, #2]
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326c:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 8003500 <executecommand+0xdb0>
 8003270:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003274:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8003504 <executecommand+0xdb4>
 8003278:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800327c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003280:	4b9e      	ldr	r3, [pc, #632]	@ (80034fc <executecommand+0xdac>)
 8003282:	78db      	ldrb	r3, [r3, #3]
 8003284:	ee07 3a90 	vmov	s15, r3
 8003288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328c:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8003500 <executecommand+0xdb0>
 8003290:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003294:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003298:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800329c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a0:	4b96      	ldr	r3, [pc, #600]	@ (80034fc <executecommand+0xdac>)
 80032a2:	791b      	ldrb	r3, [r3, #4]
 80032a4:	ee07 3a90 	vmov	s15, r3
 80032a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ac:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8003500 <executecommand+0xdb0>
 80032b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032b8:	4b90      	ldr	r3, [pc, #576]	@ (80034fc <executecommand+0xdac>)
 80032ba:	795b      	ldrb	r3, [r3, #5]
 80032bc:	ee07 3a90 	vmov	s15, r3
 80032c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c4:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 8003500 <executecommand+0xdb0>
 80032c8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80032cc:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80032d0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003514 <executecommand+0xdc4>)
 80032da:	edc3 7a00 	vstr	s15, [r3]
			}
			if(command[0] == 'm')
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b6d      	cmp	r3, #109	@ 0x6d
 80032e4:	d14c      	bne.n	8003380 <executecommand+0xc30>
			{
				p_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80032e6:	4b85      	ldr	r3, [pc, #532]	@ (80034fc <executecommand+0xdac>)
 80032e8:	785b      	ldrb	r3, [r3, #1]
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f2:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8003500 <executecommand+0xdb0>
 80032f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032fa:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8003504 <executecommand+0xdb4>
 80032fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003302:	4b7e      	ldr	r3, [pc, #504]	@ (80034fc <executecommand+0xdac>)
 8003304:	789b      	ldrb	r3, [r3, #2]
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330e:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8003500 <executecommand+0xdb0>
 8003312:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003316:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800331a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800331e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003322:	4b76      	ldr	r3, [pc, #472]	@ (80034fc <executecommand+0xdac>)
 8003324:	78db      	ldrb	r3, [r3, #3]
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332e:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003500 <executecommand+0xdb0>
 8003332:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003336:	ee37 7a27 	vadd.f32	s14, s14, s15
 800333a:	4b70      	ldr	r3, [pc, #448]	@ (80034fc <executecommand+0xdac>)
 800333c:	791b      	ldrb	r3, [r3, #4]
 800333e:	ee07 3a90 	vmov	s15, r3
 8003342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003346:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8003500 <executecommand+0xdb0>
 800334a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800334e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003352:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800335a:	4b68      	ldr	r3, [pc, #416]	@ (80034fc <executecommand+0xdac>)
 800335c:	795b      	ldrb	r3, [r3, #5]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003366:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8003500 <executecommand+0xdb0>
 800336a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800336e:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 8003504 <executecommand+0xdb4>
 8003372:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337a:	4b67      	ldr	r3, [pc, #412]	@ (8003518 <executecommand+0xdc8>)
 800337c:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'n')
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b6e      	cmp	r3, #110	@ 0x6e
 8003386:	d14f      	bne.n	8003428 <executecommand+0xcd8>
			{
				i_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003388:	4b5c      	ldr	r3, [pc, #368]	@ (80034fc <executecommand+0xdac>)
 800338a:	785b      	ldrb	r3, [r3, #1]
 800338c:	ee07 3a90 	vmov	s15, r3
 8003390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003394:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8003500 <executecommand+0xdb0>
 8003398:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800339c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003504 <executecommand+0xdb4>
 80033a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033a4:	4b55      	ldr	r3, [pc, #340]	@ (80034fc <executecommand+0xdac>)
 80033a6:	789b      	ldrb	r3, [r3, #2]
 80033a8:	ee07 3a90 	vmov	s15, r3
 80033ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b0:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8003500 <executecommand+0xdb0>
 80033b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033b8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80033bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033c4:	4b4d      	ldr	r3, [pc, #308]	@ (80034fc <executecommand+0xdac>)
 80033c6:	78db      	ldrb	r3, [r3, #3]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d0:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8003500 <executecommand+0xdb0>
 80033d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033dc:	4b47      	ldr	r3, [pc, #284]	@ (80034fc <executecommand+0xdac>)
 80033de:	791b      	ldrb	r3, [r3, #4]
 80033e0:	ee07 3a90 	vmov	s15, r3
 80033e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e8:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8003500 <executecommand+0xdb0>
 80033ec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033f0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80033f4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033fc:	4b3f      	ldr	r3, [pc, #252]	@ (80034fc <executecommand+0xdac>)
 80033fe:	795b      	ldrb	r3, [r3, #5]
 8003400:	ee07 3a90 	vmov	s15, r3
 8003404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003408:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003500 <executecommand+0xdb0>
 800340c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003410:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 8003504 <executecommand+0xdb4>
 8003414:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341c:	4b3f      	ldr	r3, [pc, #252]	@ (800351c <executecommand+0xdcc>)
 800341e:	edc3 7a00 	vstr	s15, [r3]
				error_sum_angular_rate_yaw = 0;
 8003422:	4b3f      	ldr	r3, [pc, #252]	@ (8003520 <executecommand+0xdd0>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'o')
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b6f      	cmp	r3, #111	@ 0x6f
 800342e:	d14c      	bne.n	80034ca <executecommand+0xd7a>
			{
				d_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003430:	4b32      	ldr	r3, [pc, #200]	@ (80034fc <executecommand+0xdac>)
 8003432:	785b      	ldrb	r3, [r3, #1]
 8003434:	ee07 3a90 	vmov	s15, r3
 8003438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8003500 <executecommand+0xdb0>
 8003440:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003444:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003510 <executecommand+0xdc0>
 8003448:	ee27 7a87 	vmul.f32	s14, s15, s14
 800344c:	4b2b      	ldr	r3, [pc, #172]	@ (80034fc <executecommand+0xdac>)
 800344e:	789b      	ldrb	r3, [r3, #2]
 8003450:	ee07 3a90 	vmov	s15, r3
 8003454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003458:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8003500 <executecommand+0xdb0>
 800345c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003460:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8003504 <executecommand+0xdb4>
 8003464:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003468:	ee37 7a27 	vadd.f32	s14, s14, s15
 800346c:	4b23      	ldr	r3, [pc, #140]	@ (80034fc <executecommand+0xdac>)
 800346e:	78db      	ldrb	r3, [r3, #3]
 8003470:	ee07 3a90 	vmov	s15, r3
 8003474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003478:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8003500 <executecommand+0xdb0>
 800347c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003480:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003484:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800348c:	4b1b      	ldr	r3, [pc, #108]	@ (80034fc <executecommand+0xdac>)
 800348e:	791b      	ldrb	r3, [r3, #4]
 8003490:	ee07 3a90 	vmov	s15, r3
 8003494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003498:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8003500 <executecommand+0xdb0>
 800349c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034a4:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <executecommand+0xdac>)
 80034a6:	795b      	ldrb	r3, [r3, #5]
 80034a8:	ee07 3a90 	vmov	s15, r3
 80034ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b0:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003500 <executecommand+0xdb0>
 80034b4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80034b8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80034bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c4:	4b17      	ldr	r3, [pc, #92]	@ (8003524 <executecommand+0xdd4>)
 80034c6:	edc3 7a00 	vstr	s15, [r3]
			}

	if(command[0] == 'r'){
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b72      	cmp	r3, #114	@ 0x72
 80034d0:	d101      	bne.n	80034d6 <executecommand+0xd86>
		NVIC_SystemReset();
 80034d2:	f7ff f8d9 	bl	8002688 <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	e007      	b.n	80034ec <executecommand+0xd9c>
		UASRT_PID_VAL[i] = 0;
 80034dc:	4a07      	ldr	r2, [pc, #28]	@ (80034fc <executecommand+0xdac>)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4413      	add	r3, r2
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3301      	adds	r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b0e      	cmp	r3, #14
 80034f0:	ddf4      	ble.n	80034dc <executecommand+0xd8c>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 80034f2:	bf00      	nop
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	000041b8 	.word	0x000041b8
 8003500:	42400000 	.word	0x42400000
 8003504:	42c80000 	.word	0x42c80000
 8003508:	000040f8 	.word	0x000040f8
 800350c:	000040bc 	.word	0x000040bc
 8003510:	447a0000 	.word	0x447a0000
 8003514:	00004104 	.word	0x00004104
 8003518:	0000414c 	.word	0x0000414c
 800351c:	00004158 	.word	0x00004158
 8003520:	000040c8 	.word	0x000040c8
 8003524:	00004164 	.word	0x00004164

08003528 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	@ 0x28
 800352c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800352e:	1d3b      	adds	r3, r7, #4
 8003530:	2224      	movs	r2, #36	@ 0x24
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f01a fdb9 	bl	801e0ac <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800353a:	4b2e      	ldr	r3, [pc, #184]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 800353c:	4a2e      	ldr	r2, [pc, #184]	@ (80035f8 <MX_ADC2_Init+0xd0>)
 800353e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8003540:	4b2c      	ldr	r3, [pc, #176]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 8003542:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003546:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003548:	4b2a      	ldr	r3, [pc, #168]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 800354a:	2208      	movs	r2, #8
 800354c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800354e:	4b29      	ldr	r3, [pc, #164]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 8003550:	2200      	movs	r2, #0
 8003552:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003554:	4b27      	ldr	r3, [pc, #156]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 8003556:	2204      	movs	r2, #4
 8003558:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800355a:	4b26      	ldr	r3, [pc, #152]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 800355c:	2200      	movs	r2, #0
 800355e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003560:	4b24      	ldr	r3, [pc, #144]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 8003562:	2200      	movs	r2, #0
 8003564:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8003566:	4b23      	ldr	r3, [pc, #140]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 8003568:	2201      	movs	r2, #1
 800356a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800356c:	4b21      	ldr	r3, [pc, #132]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 8003574:	4b1f      	ldr	r3, [pc, #124]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 8003576:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 800357a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800357c:	4b1d      	ldr	r3, [pc, #116]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 800357e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003582:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8003584:	4b1b      	ldr	r3, [pc, #108]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 8003586:	2203      	movs	r2, #3
 8003588:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800358a:	4b1a      	ldr	r3, [pc, #104]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 800358c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003590:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003592:	4b18      	ldr	r3, [pc, #96]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 8003594:	2200      	movs	r2, #0
 8003596:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8003598:	4b16      	ldr	r3, [pc, #88]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 80035a0:	4b14      	ldr	r3, [pc, #80]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80035a6:	4813      	ldr	r0, [pc, #76]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 80035a8:	f006 fafe 	bl	8009ba8 <HAL_ADC_Init>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80035b2:	f004 fc45 	bl	8007e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80035b6:	4b11      	ldr	r3, [pc, #68]	@ (80035fc <MX_ADC2_Init+0xd4>)
 80035b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80035ba:	2306      	movs	r3, #6
 80035bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80035be:	2307      	movs	r3, #7
 80035c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80035c2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80035c6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80035c8:	2304      	movs	r3, #4
 80035ca:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	4619      	mov	r1, r3
 80035da:	4806      	ldr	r0, [pc, #24]	@ (80035f4 <MX_ADC2_Init+0xcc>)
 80035dc:	f007 f82a 	bl	800a634 <HAL_ADC_ConfigChannel>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 80035e6:	f004 fc2b 	bl	8007e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80035ea:	bf00      	nop
 80035ec:	3728      	adds	r7, #40	@ 0x28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	240000ac 	.word	0x240000ac
 80035f8:	40022100 	.word	0x40022100
 80035fc:	19200040 	.word	0x19200040

08003600 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	@ 0x28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a34      	ldr	r2, [pc, #208]	@ (80036f0 <HAL_ADC_MspInit+0xf0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d162      	bne.n	80036e8 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003622:	4b34      	ldr	r3, [pc, #208]	@ (80036f4 <HAL_ADC_MspInit+0xf4>)
 8003624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003628:	4a32      	ldr	r2, [pc, #200]	@ (80036f4 <HAL_ADC_MspInit+0xf4>)
 800362a:	f043 0320 	orr.w	r3, r3, #32
 800362e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003632:	4b30      	ldr	r3, [pc, #192]	@ (80036f4 <HAL_ADC_MspInit+0xf4>)
 8003634:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003640:	4b2c      	ldr	r3, [pc, #176]	@ (80036f4 <HAL_ADC_MspInit+0xf4>)
 8003642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003646:	4a2b      	ldr	r2, [pc, #172]	@ (80036f4 <HAL_ADC_MspInit+0xf4>)
 8003648:	f043 0320 	orr.w	r3, r3, #32
 800364c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003650:	4b28      	ldr	r3, [pc, #160]	@ (80036f4 <HAL_ADC_MspInit+0xf4>)
 8003652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800365e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003664:	2303      	movs	r3, #3
 8003666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800366c:	f107 0314 	add.w	r3, r7, #20
 8003670:	4619      	mov	r1, r3
 8003672:	4821      	ldr	r0, [pc, #132]	@ (80036f8 <HAL_ADC_MspInit+0xf8>)
 8003674:	f00a feca 	bl	800e40c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 8003678:	4b20      	ldr	r3, [pc, #128]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 800367a:	4a21      	ldr	r2, [pc, #132]	@ (8003700 <HAL_ADC_MspInit+0x100>)
 800367c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800367e:	4b1f      	ldr	r3, [pc, #124]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 8003680:	220a      	movs	r2, #10
 8003682:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003684:	4b1d      	ldr	r3, [pc, #116]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 8003686:	2200      	movs	r2, #0
 8003688:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800368a:	4b1c      	ldr	r3, [pc, #112]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 800368c:	2200      	movs	r2, #0
 800368e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003690:	4b1a      	ldr	r3, [pc, #104]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 8003692:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003696:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003698:	4b18      	ldr	r3, [pc, #96]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 800369a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800369e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036a0:	4b16      	ldr	r3, [pc, #88]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 80036a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036a6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80036a8:	4b14      	ldr	r3, [pc, #80]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 80036aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036ae:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80036b0:	4b12      	ldr	r3, [pc, #72]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036b6:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80036bc:	480f      	ldr	r0, [pc, #60]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 80036be:	f008 f853 	bl	800b768 <HAL_DMA_Init>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 80036c8:	f004 fbba 	bl	8007e40 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a0b      	ldr	r2, [pc, #44]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 80036d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80036d2:	4a0a      	ldr	r2, [pc, #40]	@ (80036fc <HAL_ADC_MspInit+0xfc>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80036d8:	2200      	movs	r2, #0
 80036da:	2100      	movs	r1, #0
 80036dc:	2012      	movs	r0, #18
 80036de:	f007 ff96 	bl	800b60e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80036e2:	2012      	movs	r0, #18
 80036e4:	f007 ffad 	bl	800b642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80036e8:	bf00      	nop
 80036ea:	3728      	adds	r7, #40	@ 0x28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40022100 	.word	0x40022100
 80036f4:	58024400 	.word	0x58024400
 80036f8:	58021400 	.word	0x58021400
 80036fc:	2400011c 	.word	0x2400011c
 8003700:	40020410 	.word	0x40020410

08003704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800370a:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <MX_DMA_Init+0x6c>)
 800370c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003710:	4a17      	ldr	r2, [pc, #92]	@ (8003770 <MX_DMA_Init+0x6c>)
 8003712:	f043 0302 	orr.w	r3, r3, #2
 8003716:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800371a:	4b15      	ldr	r3, [pc, #84]	@ (8003770 <MX_DMA_Init+0x6c>)
 800371c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003728:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <MX_DMA_Init+0x6c>)
 800372a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800372e:	4a10      	ldr	r2, [pc, #64]	@ (8003770 <MX_DMA_Init+0x6c>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003738:	4b0d      	ldr	r3, [pc, #52]	@ (8003770 <MX_DMA_Init+0x6c>)
 800373a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003746:	2200      	movs	r2, #0
 8003748:	2100      	movs	r1, #0
 800374a:	200b      	movs	r0, #11
 800374c:	f007 ff5f 	bl	800b60e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003750:	200b      	movs	r0, #11
 8003752:	f007 ff76 	bl	800b642 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003756:	2200      	movs	r2, #0
 8003758:	2100      	movs	r1, #0
 800375a:	2038      	movs	r0, #56	@ 0x38
 800375c:	f007 ff57 	bl	800b60e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003760:	2038      	movs	r0, #56	@ 0x38
 8003762:	f007 ff6e 	bl	800b642 <HAL_NVIC_EnableIRQ>

}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	58024400 	.word	0x58024400
 8003774:	00000000 	.word	0x00000000

08003778 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 8003778:	b580      	push	{r7, lr}
 800377a:	b08e      	sub	sp, #56	@ 0x38
 800377c:	af00      	add	r7, sp, #0
 800377e:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(pitch_error);
 8003794:	4b88      	ldr	r3, [pc, #544]	@ (80039b8 <Thrust_filter+0x240>)
 8003796:	edd3 7a00 	vldr	s15, [r3]
 800379a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800379e:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(rool_error);
 80037a2:	4b86      	ldr	r3, [pc, #536]	@ (80039bc <Thrust_filter+0x244>)
 80037a4:	edd3 7a00 	vldr	s15, [r3]
 80037a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037ac:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 80037b0:	ed97 7b08 	vldr	d7, [r7, #32]
 80037b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037b8:	eeb0 0a67 	vmov.f32	s0, s15
 80037bc:	f003 fe76 	bl	80074ac <WartoscBezwgledna>
 80037c0:	eef0 7a40 	vmov.f32	s15, s0
 80037c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037c8:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 80037cc:	ed97 7b06 	vldr	d7, [r7, #24]
 80037d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037d4:	eeb0 0a67 	vmov.f32	s0, s15
 80037d8:	f003 fe68 	bl	80074ac <WartoscBezwgledna>
 80037dc:	eef0 7a40 	vmov.f32	s15, s0
 80037e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037e4:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 80037e8:	ed97 6b08 	vldr	d6, [r7, #32]
 80037ec:	ed97 7b06 	vldr	d7, [r7, #24]
 80037f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037f4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80037f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80037fc:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 8003800:	eeb0 0b47 	vmov.f64	d0, d7
 8003804:	f01a fddc 	bl	801e3c0 <pow>
 8003808:	ed87 0b04 	vstr	d0, [r7, #16]
	if(wanted_thrust > 10500){
 800380c:	4b6c      	ldr	r3, [pc, #432]	@ (80039c0 <Thrust_filter+0x248>)
 800380e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003812:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003816:	4293      	cmp	r3, r2
 8003818:	dd03      	ble.n	8003822 <Thrust_filter+0xaa>
		wanted_thrust = 10500;
 800381a:	4b69      	ldr	r3, [pc, #420]	@ (80039c0 <Thrust_filter+0x248>)
 800381c:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003820:	801a      	strh	r2, [r3, #0]
	}

	thrust_error = wanted_thrust - MYDRON.THRUST;
 8003822:	4b67      	ldr	r3, [pc, #412]	@ (80039c0 <Thrust_filter+0x248>)
 8003824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003828:	b29a      	uxth	r2, r3
 800382a:	4b66      	ldr	r3, [pc, #408]	@ (80039c4 <Thrust_filter+0x24c>)
 800382c:	885b      	ldrh	r3, [r3, #2]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	b29b      	uxth	r3, r3
 8003832:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 8003834:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003838:	2b00      	cmp	r3, #0
 800383a:	da13      	bge.n	8003864 <Thrust_filter+0xec>
		thrust_error = WartoscBezwgledna(thrust_error);
 800383c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003840:	ee07 3a90 	vmov	s15, r3
 8003844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003848:	eeb0 0a67 	vmov.f32	s0, s15
 800384c:	f003 fe2e 	bl	80074ac <WartoscBezwgledna>
 8003850:	eef0 7a40 	vmov.f32	s15, s0
 8003854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003858:	ee17 3a90 	vmov	r3, s15
 800385c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 8003864:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8097 	beq.w	800399c <Thrust_filter+0x224>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 800386e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800387a:	eeb0 0b47 	vmov.f64	d0, d7
 800387e:	f01a fc47 	bl	801e110 <sqrt>
 8003882:	eeb0 7b40 	vmov.f64	d7, d0
 8003886:	eeb0 0b47 	vmov.f64	d0, d7
 800388a:	f01a fc41 	bl	801e110 <sqrt>
 800388e:	eeb0 7b40 	vmov.f64	d7, d0
 8003892:	ed9f 6b45 	vldr	d6, [pc, #276]	@ 80039a8 <Thrust_filter+0x230>
 8003896:	ee27 7b06 	vmul.f64	d7, d7, d6
 800389a:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 800389e:	ed97 7b00 	vldr	d7, [r7]
 80038a2:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 80039b0 <Thrust_filter+0x238>
 80038a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80038aa:	ed97 7b02 	vldr	d7, [r7, #8]
 80038ae:	ee26 5b07 	vmul.f64	d5, d6, d7
 80038b2:	ed97 6b04 	vldr	d6, [r7, #16]
 80038b6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80038ba:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 80038be:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d105      	bne.n	80038d2 <Thrust_filter+0x15a>
			thrust_add = thrust_add*(-1);
 80038c6:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038ca:	eeb1 7b47 	vneg.f64	d7, d7
 80038ce:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 80038d2:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038d6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80038da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e2:	d513      	bpl.n	800390c <Thrust_filter+0x194>
 80038e4:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038e8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80038ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f4:	dd0a      	ble.n	800390c <Thrust_filter+0x194>
			thrust_values = thrust_values + thrust_add;
 80038f6:	4b34      	ldr	r3, [pc, #208]	@ (80039c8 <Thrust_filter+0x250>)
 80038f8:	ed93 6b00 	vldr	d6, [r3]
 80038fc:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003900:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003904:	4b30      	ldr	r3, [pc, #192]	@ (80039c8 <Thrust_filter+0x250>)
 8003906:	ed83 7b00 	vstr	d7, [r3]
 800390a:	e010      	b.n	800392e <Thrust_filter+0x1b6>
		}
		else{
			MYDRON.THRUST = MYDRON.THRUST + thrust_add;
 800390c:	4b2d      	ldr	r3, [pc, #180]	@ (80039c4 <Thrust_filter+0x24c>)
 800390e:	885b      	ldrh	r3, [r3, #2]
 8003910:	ee07 3a90 	vmov	s15, r3
 8003914:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003918:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800391c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003920:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003924:	ee17 3a90 	vmov	r3, s15
 8003928:	b29a      	uxth	r2, r3
 800392a:	4b26      	ldr	r3, [pc, #152]	@ (80039c4 <Thrust_filter+0x24c>)
 800392c:	805a      	strh	r2, [r3, #2]
		}

		if(thrust_values >= 1 || thrust_values <= -1){
 800392e:	4b26      	ldr	r3, [pc, #152]	@ (80039c8 <Thrust_filter+0x250>)
 8003930:	ed93 7b00 	vldr	d7, [r3]
 8003934:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003938:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800393c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003940:	da09      	bge.n	8003956 <Thrust_filter+0x1de>
 8003942:	4b21      	ldr	r3, [pc, #132]	@ (80039c8 <Thrust_filter+0x250>)
 8003944:	ed93 7b00 	vldr	d7, [r3]
 8003948:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800394c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003954:	d818      	bhi.n	8003988 <Thrust_filter+0x210>
			MYDRON.THRUST = MYDRON.THRUST + thrust_values;
 8003956:	4b1b      	ldr	r3, [pc, #108]	@ (80039c4 <Thrust_filter+0x24c>)
 8003958:	885b      	ldrh	r3, [r3, #2]
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003962:	4b19      	ldr	r3, [pc, #100]	@ (80039c8 <Thrust_filter+0x250>)
 8003964:	ed93 7b00 	vldr	d7, [r3]
 8003968:	ee36 7b07 	vadd.f64	d7, d6, d7
 800396c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003970:	ee17 3a90 	vmov	r3, s15
 8003974:	b29a      	uxth	r2, r3
 8003976:	4b13      	ldr	r3, [pc, #76]	@ (80039c4 <Thrust_filter+0x24c>)
 8003978:	805a      	strh	r2, [r3, #2]
			thrust_values = 0;
 800397a:	4913      	ldr	r1, [pc, #76]	@ (80039c8 <Thrust_filter+0x250>)
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(MYDRON.THRUST > 10000){//ograniczenie THRUST
 8003988:	4b0e      	ldr	r3, [pc, #56]	@ (80039c4 <Thrust_filter+0x24c>)
 800398a:	885b      	ldrh	r3, [r3, #2]
 800398c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003990:	4293      	cmp	r3, r2
 8003992:	d903      	bls.n	800399c <Thrust_filter+0x224>
			MYDRON.THRUST = 10000;
 8003994:	4b0b      	ldr	r3, [pc, #44]	@ (80039c4 <Thrust_filter+0x24c>)
 8003996:	f242 7210 	movw	r2, #10000	@ 0x2710
 800399a:	805a      	strh	r2, [r3, #2]
		}
	}
}
 800399c:	bf00      	nop
 800399e:	3738      	adds	r7, #56	@ 0x38
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	f3af 8000 	nop.w
 80039a8:	00000000 	.word	0x00000000
 80039ac:	409f4000 	.word	0x409f4000
 80039b0:	30553261 	.word	0x30553261
 80039b4:	3f33a92a 	.word	0x3f33a92a
 80039b8:	00004084 	.word	0x00004084
 80039bc:	00004088 	.word	0x00004088
 80039c0:	0000405c 	.word	0x0000405c
 80039c4:	00000178 	.word	0x00000178
 80039c8:	00004060 	.word	0x00004060

080039cc <PID_cal>:

	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_cal(float *PID_var, float *PID_FAC, uint8_t pry){//pitch = 1, rool = 2, yaw = 3
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	71fb      	strb	r3, [r7, #7]
	switch(pry){
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	3b01      	subs	r3, #1
 80039de:	2b05      	cmp	r3, #5
 80039e0:	f200 8380 	bhi.w	80040e4 <PID_cal+0x718>
 80039e4:	a201      	add	r2, pc, #4	@ (adr r2, 80039ec <PID_cal+0x20>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	08003a05 	.word	0x08003a05
 80039f0:	08003b1f 	.word	0x08003b1f
 80039f4:	08003c59 	.word	0x08003c59
 80039f8:	08003d73 	.word	0x08003d73
 80039fc:	08003eb1 	.word	0x08003eb1
 8003a00:	08003fcb 	.word	0x08003fcb
		case 1://pitch

			*PID_var = PID_FAC[0]*(pitch_error);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	ed93 7a00 	vldr	s14, [r3]
 8003a0a:	4b8b      	ldr	r3, [pc, #556]	@ (8003c38 <PID_cal+0x26c>)
 8003a0c:	edd3 7a00 	vldr	s15, [r3]
 8003a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_pitch*looptime;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	ed93 7a00 	vldr	s14, [r3]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	3304      	adds	r3, #4
 8003a24:	edd3 6a00 	vldr	s13, [r3]
 8003a28:	4b84      	ldr	r3, [pc, #528]	@ (8003c3c <PID_cal+0x270>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	ee07 3a90 	vmov	s15, r3
 8003a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a38:	4b81      	ldr	r3, [pc, #516]	@ (8003c40 <PID_cal+0x274>)
 8003a3a:	edd3 7a00 	vldr	s15, [r3]
 8003a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((pitch_error) - old_error_pitch);//policzenie częsci D
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	3308      	adds	r3, #8
 8003a50:	ed93 7a00 	vldr	s14, [r3]
 8003a54:	4b78      	ldr	r3, [pc, #480]	@ (8003c38 <PID_cal+0x26c>)
 8003a56:	edd3 6a00 	vldr	s13, [r3]
 8003a5a:	4b7a      	ldr	r3, [pc, #488]	@ (8003c44 <PID_cal+0x278>)
 8003a5c:	edd3 7a00 	vldr	s15, [r3]
 8003a60:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	330c      	adds	r3, #12
 8003a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6c:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003a70:	4b75      	ldr	r3, [pc, #468]	@ (8003c48 <PID_cal+0x27c>)
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d045      	beq.n	8003b04 <PID_cal+0x138>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	ed93 7a00 	vldr	s14, [r3]
 8003a80:	4b71      	ldr	r3, [pc, #452]	@ (8003c48 <PID_cal+0x27c>)
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	ee07 3a90 	vmov	s15, r3
 8003a88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8003c40 <PID_cal+0x274>)
 8003a8e:	edd3 7a00 	vldr	s15, [r3]
 8003a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a96:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003a9a:	4b6b      	ldr	r3, [pc, #428]	@ (8003c48 <PID_cal+0x27c>)
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aa6:	4b66      	ldr	r3, [pc, #408]	@ (8003c40 <PID_cal+0x274>)
 8003aa8:	edd3 7a00 	vldr	s15, [r3]
 8003aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ab4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	3310      	adds	r3, #16
 8003ac0:	edd3 6a00 	vldr	s13, [r3]
 8003ac4:	4b60      	ldr	r3, [pc, #384]	@ (8003c48 <PID_cal+0x27c>)
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	ee07 3a90 	vmov	s15, r3
 8003acc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003ad0:	4b5b      	ldr	r3, [pc, #364]	@ (8003c40 <PID_cal+0x274>)
 8003ad2:	edd3 7a00 	vldr	s15, [r3]
 8003ad6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003ada:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003ade:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003ae2:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003ae6:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	330c      	adds	r3, #12
 8003af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af6:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	3310      	adds	r3, #16
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	68d2      	ldr	r2, [r2, #12]
 8003b02:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	ed93 7a00 	vldr	s14, [r3]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	330c      	adds	r3, #12
 8003b0e:	edd3 7a00 	vldr	s15, [r3]
 8003b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	edc3 7a00 	vstr	s15, [r3]
//					*PID_var = 400;
//				}
//				if(*PID_var < -400){
//					*PID_var = -400;
//				}
			break;
 8003b1c:	e2e3      	b.n	80040e6 <PID_cal+0x71a>

		case 2://rool

			*PID_var = PID_FAC[0]*(rool_error);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	ed93 7a00 	vldr	s14, [r3]
 8003b24:	4b49      	ldr	r3, [pc, #292]	@ (8003c4c <PID_cal+0x280>)
 8003b26:	edd3 7a00 	vldr	s15, [r3]
 8003b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_rool*looptime;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	ed93 7a00 	vldr	s14, [r3]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	edd3 6a00 	vldr	s13, [r3]
 8003b42:	4b43      	ldr	r3, [pc, #268]	@ (8003c50 <PID_cal+0x284>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b52:	4b3b      	ldr	r3, [pc, #236]	@ (8003c40 <PID_cal+0x274>)
 8003b54:	edd3 7a00 	vldr	s15, [r3]
 8003b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((rool_error) - old_error_rool);
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	ed93 7a00 	vldr	s14, [r3]
 8003b6e:	4b37      	ldr	r3, [pc, #220]	@ (8003c4c <PID_cal+0x280>)
 8003b70:	edd3 6a00 	vldr	s13, [r3]
 8003b74:	4b37      	ldr	r3, [pc, #220]	@ (8003c54 <PID_cal+0x288>)
 8003b76:	edd3 7a00 	vldr	s15, [r3]
 8003b7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	330c      	adds	r3, #12
 8003b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b86:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c48 <PID_cal+0x27c>)
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d045      	beq.n	8003c1e <PID_cal+0x252>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	330c      	adds	r3, #12
 8003b96:	ed93 7a00 	vldr	s14, [r3]
 8003b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8003c48 <PID_cal+0x27c>)
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ba6:	4b26      	ldr	r3, [pc, #152]	@ (8003c40 <PID_cal+0x274>)
 8003ba8:	edd3 7a00 	vldr	s15, [r3]
 8003bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bb0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003bb4:	4b24      	ldr	r3, [pc, #144]	@ (8003c48 <PID_cal+0x27c>)
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	ee07 3a90 	vmov	s15, r3
 8003bbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c40 <PID_cal+0x274>)
 8003bc2:	edd3 7a00 	vldr	s15, [r3]
 8003bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	3310      	adds	r3, #16
 8003bda:	edd3 6a00 	vldr	s13, [r3]
 8003bde:	4b1a      	ldr	r3, [pc, #104]	@ (8003c48 <PID_cal+0x27c>)
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003bea:	4b15      	ldr	r3, [pc, #84]	@ (8003c40 <PID_cal+0x274>)
 8003bec:	edd3 7a00 	vldr	s15, [r3]
 8003bf0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003bf4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003bf8:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003bfc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003c00:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	330c      	adds	r3, #12
 8003c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c10:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	3310      	adds	r3, #16
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	68d2      	ldr	r2, [r2, #12]
 8003c1c:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	ed93 7a00 	vldr	s14, [r3]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	330c      	adds	r3, #12
 8003c28:	edd3 7a00 	vldr	s15, [r3]
 8003c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003c36:	e256      	b.n	80040e6 <PID_cal+0x71a>
 8003c38:	00004084 	.word	0x00004084
 8003c3c:	000040b4 	.word	0x000040b4
 8003c40:	0801e9dc 	.word	0x0801e9dc
 8003c44:	0000409c 	.word	0x0000409c
 8003c48:	00004076 	.word	0x00004076
 8003c4c:	00004088 	.word	0x00004088
 8003c50:	000040b8 	.word	0x000040b8
 8003c54:	000040a0 	.word	0x000040a0

		case 3:

			*PID_var = PID_FAC[0]*(yaw_error);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	ed93 7a00 	vldr	s14, [r3]
 8003c5e:	4b8b      	ldr	r3, [pc, #556]	@ (8003e8c <PID_cal+0x4c0>)
 8003c60:	edd3 7a00 	vldr	s15, [r3]
 8003c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_yaw*looptime;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	ed93 7a00 	vldr	s14, [r3]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	3304      	adds	r3, #4
 8003c78:	edd3 6a00 	vldr	s13, [r3]
 8003c7c:	4b84      	ldr	r3, [pc, #528]	@ (8003e90 <PID_cal+0x4c4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	ee07 3a90 	vmov	s15, r3
 8003c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c8c:	4b81      	ldr	r3, [pc, #516]	@ (8003e94 <PID_cal+0x4c8>)
 8003c8e:	edd3 7a00 	vldr	s15, [r3]
 8003c92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((yaw_error) - old_error_yaw);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	ed93 7a00 	vldr	s14, [r3]
 8003ca8:	4b78      	ldr	r3, [pc, #480]	@ (8003e8c <PID_cal+0x4c0>)
 8003caa:	edd3 6a00 	vldr	s13, [r3]
 8003cae:	4b7a      	ldr	r3, [pc, #488]	@ (8003e98 <PID_cal+0x4cc>)
 8003cb0:	edd3 7a00 	vldr	s15, [r3]
 8003cb4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc0:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003cc4:	4b75      	ldr	r3, [pc, #468]	@ (8003e9c <PID_cal+0x4d0>)
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d045      	beq.n	8003d58 <PID_cal+0x38c>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	330c      	adds	r3, #12
 8003cd0:	ed93 7a00 	vldr	s14, [r3]
 8003cd4:	4b71      	ldr	r3, [pc, #452]	@ (8003e9c <PID_cal+0x4d0>)
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	ee07 3a90 	vmov	s15, r3
 8003cdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ce0:	4b6c      	ldr	r3, [pc, #432]	@ (8003e94 <PID_cal+0x4c8>)
 8003ce2:	edd3 7a00 	vldr	s15, [r3]
 8003ce6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cea:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003cee:	4b6b      	ldr	r3, [pc, #428]	@ (8003e9c <PID_cal+0x4d0>)
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cfa:	4b66      	ldr	r3, [pc, #408]	@ (8003e94 <PID_cal+0x4c8>)
 8003cfc:	edd3 7a00 	vldr	s15, [r3]
 8003d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	3310      	adds	r3, #16
 8003d14:	edd3 6a00 	vldr	s13, [r3]
 8003d18:	4b60      	ldr	r3, [pc, #384]	@ (8003e9c <PID_cal+0x4d0>)
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	ee07 3a90 	vmov	s15, r3
 8003d20:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003d24:	4b5b      	ldr	r3, [pc, #364]	@ (8003e94 <PID_cal+0x4c8>)
 8003d26:	edd3 7a00 	vldr	s15, [r3]
 8003d2a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003d2e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003d32:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003d36:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003d3a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003d3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	330c      	adds	r3, #12
 8003d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d4a:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	3310      	adds	r3, #16
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	68d2      	ldr	r2, [r2, #12]
 8003d56:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	ed93 7a00 	vldr	s14, [r3]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	330c      	adds	r3, #12
 8003d62:	edd3 7a00 	vldr	s15, [r3]
 8003d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003d70:	e1b9      	b.n	80040e6 <PID_cal+0x71a>

		case 4:// angular rates pitch

			*PID_var = PID_FAC[0]*(pitch_ar_error);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	ed93 7a00 	vldr	s14, [r3]
 8003d78:	4b49      	ldr	r3, [pc, #292]	@ (8003ea0 <PID_cal+0x4d4>)
 8003d7a:	edd3 7a00 	vldr	s15, [r3]
 8003d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_pitch*looptime;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	ed93 7a00 	vldr	s14, [r3]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	3304      	adds	r3, #4
 8003d92:	edd3 6a00 	vldr	s13, [r3]
 8003d96:	4b43      	ldr	r3, [pc, #268]	@ (8003ea4 <PID_cal+0x4d8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003da2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003da6:	4b3b      	ldr	r3, [pc, #236]	@ (8003e94 <PID_cal+0x4c8>)
 8003da8:	edd3 7a00 	vldr	s15, [r3]
 8003dac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	edc3 7a00 	vstr	s15, [r3]


			PID_FAC[3] = PID_FAC[2]*((pitch_ar_error) - old_error_angular_rate_pitch);//policzenie częsci D
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	ed93 7a00 	vldr	s14, [r3]
 8003dc2:	4b37      	ldr	r3, [pc, #220]	@ (8003ea0 <PID_cal+0x4d4>)
 8003dc4:	edd3 6a00 	vldr	s13, [r3]
 8003dc8:	4b37      	ldr	r3, [pc, #220]	@ (8003ea8 <PID_cal+0x4dc>)
 8003dca:	edd3 7a00 	vldr	s15, [r3]
 8003dce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dda:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 8003dde:	4b33      	ldr	r3, [pc, #204]	@ (8003eac <PID_cal+0x4e0>)
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d045      	beq.n	8003e72 <PID_cal+0x4a6>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	330c      	adds	r3, #12
 8003dea:	ed93 7a00 	vldr	s14, [r3]
 8003dee:	4b2f      	ldr	r3, [pc, #188]	@ (8003eac <PID_cal+0x4e0>)
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003dfa:	4b26      	ldr	r3, [pc, #152]	@ (8003e94 <PID_cal+0x4c8>)
 8003dfc:	edd3 7a00 	vldr	s15, [r3]
 8003e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e04:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e08:	4b28      	ldr	r3, [pc, #160]	@ (8003eac <PID_cal+0x4e0>)
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e14:	4b1f      	ldr	r3, [pc, #124]	@ (8003e94 <PID_cal+0x4c8>)
 8003e16:	edd3 7a00 	vldr	s15, [r3]
 8003e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	3310      	adds	r3, #16
 8003e2e:	edd3 6a00 	vldr	s13, [r3]
 8003e32:	4b1e      	ldr	r3, [pc, #120]	@ (8003eac <PID_cal+0x4e0>)
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	ee07 3a90 	vmov	s15, r3
 8003e3a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003e3e:	4b15      	ldr	r3, [pc, #84]	@ (8003e94 <PID_cal+0x4c8>)
 8003e40:	edd3 7a00 	vldr	s15, [r3]
 8003e44:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003e48:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003e4c:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003e50:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003e54:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003e58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	330c      	adds	r3, #12
 8003e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e64:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	3310      	adds	r3, #16
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	68d2      	ldr	r2, [r2, #12]
 8003e70:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	ed93 7a00 	vldr	s14, [r3]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	edd3 7a00 	vldr	s15, [r3]
 8003e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	edc3 7a00 	vstr	s15, [r3]

			break;
 8003e8a:	e12c      	b.n	80040e6 <PID_cal+0x71a>
 8003e8c:	0000408c 	.word	0x0000408c
 8003e90:	000040bc 	.word	0x000040bc
 8003e94:	0801e9dc 	.word	0x0801e9dc
 8003e98:	000040a4 	.word	0x000040a4
 8003e9c:	00004076 	.word	0x00004076
 8003ea0:	00004090 	.word	0x00004090
 8003ea4:	000040c0 	.word	0x000040c0
 8003ea8:	000040a8 	.word	0x000040a8
 8003eac:	00004074 	.word	0x00004074

		case 5:// angular rates rool

			*PID_var = PID_FAC[0]*(rool_ar_error);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	ed93 7a00 	vldr	s14, [r3]
 8003eb6:	4b8f      	ldr	r3, [pc, #572]	@ (80040f4 <PID_cal+0x728>)
 8003eb8:	edd3 7a00 	vldr	s15, [r3]
 8003ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_rool*looptime;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	ed93 7a00 	vldr	s14, [r3]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	edd3 6a00 	vldr	s13, [r3]
 8003ed4:	4b88      	ldr	r3, [pc, #544]	@ (80040f8 <PID_cal+0x72c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	ee07 3a90 	vmov	s15, r3
 8003edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ee0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ee4:	4b85      	ldr	r3, [pc, #532]	@ (80040fc <PID_cal+0x730>)
 8003ee6:	edd3 7a00 	vldr	s15, [r3]
 8003eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((rool_ar_error) - old_error_angular_rate_rool);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	3308      	adds	r3, #8
 8003efc:	ed93 7a00 	vldr	s14, [r3]
 8003f00:	4b7c      	ldr	r3, [pc, #496]	@ (80040f4 <PID_cal+0x728>)
 8003f02:	edd3 6a00 	vldr	s13, [r3]
 8003f06:	4b7e      	ldr	r3, [pc, #504]	@ (8004100 <PID_cal+0x734>)
 8003f08:	edd3 7a00 	vldr	s15, [r3]
 8003f0c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	330c      	adds	r3, #12
 8003f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f18:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 8003f1c:	4b79      	ldr	r3, [pc, #484]	@ (8004104 <PID_cal+0x738>)
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d045      	beq.n	8003fb0 <PID_cal+0x5e4>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	330c      	adds	r3, #12
 8003f28:	ed93 7a00 	vldr	s14, [r3]
 8003f2c:	4b75      	ldr	r3, [pc, #468]	@ (8004104 <PID_cal+0x738>)
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	ee07 3a90 	vmov	s15, r3
 8003f34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f38:	4b70      	ldr	r3, [pc, #448]	@ (80040fc <PID_cal+0x730>)
 8003f3a:	edd3 7a00 	vldr	s15, [r3]
 8003f3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f42:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003f46:	4b6f      	ldr	r3, [pc, #444]	@ (8004104 <PID_cal+0x738>)
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f52:	4b6a      	ldr	r3, [pc, #424]	@ (80040fc <PID_cal+0x730>)
 8003f54:	edd3 7a00 	vldr	s15, [r3]
 8003f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	3310      	adds	r3, #16
 8003f6c:	edd3 6a00 	vldr	s13, [r3]
 8003f70:	4b64      	ldr	r3, [pc, #400]	@ (8004104 <PID_cal+0x738>)
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	ee07 3a90 	vmov	s15, r3
 8003f78:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003f7c:	4b5f      	ldr	r3, [pc, #380]	@ (80040fc <PID_cal+0x730>)
 8003f7e:	edd3 7a00 	vldr	s15, [r3]
 8003f82:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003f86:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003f8a:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003f8e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003f92:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fa2:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	3310      	adds	r3, #16
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	68d2      	ldr	r2, [r2, #12]
 8003fae:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	ed93 7a00 	vldr	s14, [r3]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	edd3 7a00 	vldr	s15, [r3]
 8003fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003fc8:	e08d      	b.n	80040e6 <PID_cal+0x71a>

		case 6:// angular rates yaw

			*PID_var = PID_FAC[0]*(yaw_ar_error);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	ed93 7a00 	vldr	s14, [r3]
 8003fd0:	4b4d      	ldr	r3, [pc, #308]	@ (8004108 <PID_cal+0x73c>)
 8003fd2:	edd3 7a00 	vldr	s15, [r3]
 8003fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_yaw*looptime;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	ed93 7a00 	vldr	s14, [r3]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	edd3 6a00 	vldr	s13, [r3]
 8003fee:	4b47      	ldr	r3, [pc, #284]	@ (800410c <PID_cal+0x740>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ffa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80040fc <PID_cal+0x730>)
 8004000:	edd3 7a00 	vldr	s15, [r3]
 8004004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((yaw_ar_error) - old_error_angular_rate_yaw);
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3308      	adds	r3, #8
 8004016:	ed93 7a00 	vldr	s14, [r3]
 800401a:	4b3b      	ldr	r3, [pc, #236]	@ (8004108 <PID_cal+0x73c>)
 800401c:	edd3 6a00 	vldr	s13, [r3]
 8004020:	4b3b      	ldr	r3, [pc, #236]	@ (8004110 <PID_cal+0x744>)
 8004022:	edd3 7a00 	vldr	s15, [r3]
 8004026:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	330c      	adds	r3, #12
 800402e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004032:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 8004036:	4b33      	ldr	r3, [pc, #204]	@ (8004104 <PID_cal+0x738>)
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d045      	beq.n	80040ca <PID_cal+0x6fe>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));//todo
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	330c      	adds	r3, #12
 8004042:	ed93 7a00 	vldr	s14, [r3]
 8004046:	4b2f      	ldr	r3, [pc, #188]	@ (8004104 <PID_cal+0x738>)
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004052:	4b2a      	ldr	r3, [pc, #168]	@ (80040fc <PID_cal+0x730>)
 8004054:	edd3 7a00 	vldr	s15, [r3]
 8004058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800405c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004060:	4b28      	ldr	r3, [pc, #160]	@ (8004104 <PID_cal+0x738>)
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	ee07 3a90 	vmov	s15, r3
 8004068:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800406c:	4b23      	ldr	r3, [pc, #140]	@ (80040fc <PID_cal+0x730>)
 800406e:	edd3 7a00 	vldr	s15, [r3]
 8004072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004076:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800407a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800407e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	3310      	adds	r3, #16
 8004086:	edd3 6a00 	vldr	s13, [r3]
 800408a:	4b1e      	ldr	r3, [pc, #120]	@ (8004104 <PID_cal+0x738>)
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004096:	4b19      	ldr	r3, [pc, #100]	@ (80040fc <PID_cal+0x730>)
 8004098:	edd3 7a00 	vldr	s15, [r3]
 800409c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80040a0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80040a4:	ee37 6a86 	vadd.f32	s12, s15, s12
 80040a8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80040ac:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80040b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	330c      	adds	r3, #12
 80040b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040bc:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	3310      	adds	r3, #16
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	68d2      	ldr	r2, [r2, #12]
 80040c8:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	ed93 7a00 	vldr	s14, [r3]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	330c      	adds	r3, #12
 80040d4:	edd3 7a00 	vldr	s15, [r3]
 80040d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	edc3 7a00 	vstr	s15, [r3]
			break;
 80040e2:	e000      	b.n	80040e6 <PID_cal+0x71a>
		default:
			break;
 80040e4:	bf00      	nop
	}
}
 80040e6:	bf00      	nop
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	00004094 	.word	0x00004094
 80040f8:	000040c4 	.word	0x000040c4
 80040fc:	0801e9dc 	.word	0x0801e9dc
 8004100:	000040ac 	.word	0x000040ac
 8004104:	00004074 	.word	0x00004074
 8004108:	00004098 	.word	0x00004098
 800410c:	000040c8 	.word	0x000040c8
 8004110:	000040b0 	.word	0x000040b0
 8004114:	00000000 	.word	0x00000000

08004118 <Get_batteryvalue>:

void Get_batteryvalue(void){
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 800411c:	4b1c      	ldr	r3, [pc, #112]	@ (8004190 <Get_batteryvalue+0x78>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 8004124:	ee07 3a90 	vmov	s15, r3
 8004128:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800412c:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8004188 <Get_batteryvalue+0x70>
 8004130:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004134:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004138:	ee17 3a90 	vmov	r3, s15
 800413c:	b29a      	uxth	r2, r3
 800413e:	4b15      	ldr	r3, [pc, #84]	@ (8004194 <Get_batteryvalue+0x7c>)
 8004140:	801a      	strh	r2, [r3, #0]
	if(MYDRON.batterysize >= 100){
 8004142:	4b14      	ldr	r3, [pc, #80]	@ (8004194 <Get_batteryvalue+0x7c>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	2b63      	cmp	r3, #99	@ 0x63
 8004148:	d902      	bls.n	8004150 <Get_batteryvalue+0x38>
		MYDRON.batterysize = 100;
 800414a:	4b12      	ldr	r3, [pc, #72]	@ (8004194 <Get_batteryvalue+0x7c>)
 800414c:	2264      	movs	r2, #100	@ 0x64
 800414e:	801a      	strh	r2, [r3, #0]
	}

	if(MYDRON.batterysize < 25){
 8004150:	4b10      	ldr	r3, [pc, #64]	@ (8004194 <Get_batteryvalue+0x7c>)
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	2b18      	cmp	r3, #24
 8004156:	d802      	bhi.n	800415e <Get_batteryvalue+0x46>
		MYDRON.dron_status.Battery = DRON_BATTERY_RUN_OUT;
 8004158:	4b0e      	ldr	r3, [pc, #56]	@ (8004194 <Get_batteryvalue+0x7c>)
 800415a:	2207      	movs	r2, #7
 800415c:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize <= 10){
 800415e:	4b0d      	ldr	r3, [pc, #52]	@ (8004194 <Get_batteryvalue+0x7c>)
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	2b0a      	cmp	r3, #10
 8004164:	d802      	bhi.n	800416c <Get_batteryvalue+0x54>
		MYDRON.dron_status.Battery = DRON_BATTERY_CRIT_VAL;
 8004166:	4b0b      	ldr	r3, [pc, #44]	@ (8004194 <Get_batteryvalue+0x7c>)
 8004168:	2209      	movs	r2, #9
 800416a:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize >= 25){
 800416c:	4b09      	ldr	r3, [pc, #36]	@ (8004194 <Get_batteryvalue+0x7c>)
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	2b18      	cmp	r3, #24
 8004172:	d902      	bls.n	800417a <Get_batteryvalue+0x62>
		MYDRON.dron_status.Battery = DRON_BATTERY_OK;
 8004174:	4b07      	ldr	r3, [pc, #28]	@ (8004194 <Get_batteryvalue+0x7c>)
 8004176:	2208      	movs	r2, #8
 8004178:	829a      	strh	r2, [r3, #20]
	}
}
 800417a:	bf00      	nop
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	f3af 8000 	nop.w
 8004188:	7ae147ae 	.word	0x7ae147ae
 800418c:	401dae14 	.word	0x401dae14
 8004190:	24000eb0 	.word	0x24000eb0
 8004194:	00000178 	.word	0x00000178

08004198 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800419c:	2200      	movs	r2, #0
 800419e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041a2:	4802      	ldr	r0, [pc, #8]	@ (80041ac <SELECT+0x14>)
 80041a4:	f00a faf2 	bl	800e78c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 80041a8:	bf00      	nop
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	58020c00 	.word	0x58020c00

080041b0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80041b4:	2201      	movs	r2, #1
 80041b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041ba:	4802      	ldr	r0, [pc, #8]	@ (80041c4 <DESELECT+0x14>)
 80041bc:	f00a fae6 	bl	800e78c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 80041c0:	bf00      	nop
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	58020c00 	.word	0x58020c00

080041c8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 80041d2:	bf00      	nop
 80041d4:	4b07      	ldr	r3, [pc, #28]	@ (80041f4 <SPI_TxByte+0x2c>)
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d1f9      	bne.n	80041d4 <SPI_TxByte+0xc>


	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80041e0:	1df9      	adds	r1, r7, #7
 80041e2:	2364      	movs	r3, #100	@ 0x64
 80041e4:	2201      	movs	r2, #1
 80041e6:	4804      	ldr	r0, [pc, #16]	@ (80041f8 <SPI_TxByte+0x30>)
 80041e8:	f010 fc2c 	bl	8014a44 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(HSPI_SDCARD, &data, 1);
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40020010 	.word	0x40020010
 80041f8:	240001ec 	.word	0x240001ec

080041fc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	807b      	strh	r3, [r7, #2]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));//czekanie na zakonczenie tramnsmisji DMA?
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8004208:	bf00      	nop
 800420a:	4b08      	ldr	r3, [pc, #32]	@ (800422c <SPI_TxBuffer+0x30>)
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004212:	2b20      	cmp	r3, #32
 8004214:	d1f9      	bne.n	800420a <SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
	HAL_SPI_Transmit_DMA(HSPI_SDCARD, buffer, len);
 8004216:	887b      	ldrh	r3, [r7, #2]
 8004218:	461a      	mov	r2, r3
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4804      	ldr	r0, [pc, #16]	@ (8004230 <SPI_TxBuffer+0x34>)
 800421e:	f011 fbab 	bl	8015978 <HAL_SPI_Transmit_DMA>
}
 8004222:	bf00      	nop
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40020010 	.word	0x40020010
 8004230:	240001ec 	.word	0x240001ec

08004234 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800423a:	23ff      	movs	r3, #255	@ 0xff
 800423c:	71fb      	strb	r3, [r7, #7]

	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 800423e:	bf00      	nop
 8004240:	4b09      	ldr	r3, [pc, #36]	@ (8004268 <SPI_RxByte+0x34>)
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004248:	2b20      	cmp	r3, #32
 800424a:	d1f9      	bne.n	8004240 <SPI_RxByte+0xc>

	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800424c:	1dba      	adds	r2, r7, #6
 800424e:	1df9      	adds	r1, r7, #7
 8004250:	2364      	movs	r3, #100	@ 0x64
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	2301      	movs	r3, #1
 8004256:	4805      	ldr	r0, [pc, #20]	@ (800426c <SPI_RxByte+0x38>)
 8004258:	f011 f854 	bl	8015304 <HAL_SPI_TransmitReceive>

	return data;
 800425c:	79bb      	ldrb	r3, [r7, #6]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40020010 	.word	0x40020010
 800426c:	240001ec 	.word	0x240001ec

08004270 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8004278:	f7ff ffdc 	bl	8004234 <SPI_RxByte>
 800427c:	4603      	mov	r3, r0
 800427e:	461a      	mov	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	701a      	strb	r2, [r3, #0]
}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8004292:	4b0a      	ldr	r3, [pc, #40]	@ (80042bc <SD_ReadyWait+0x30>)
 8004294:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004298:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800429a:	f7ff ffcb 	bl	8004234 <SPI_RxByte>
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	2bff      	cmp	r3, #255	@ 0xff
 80042a6:	d004      	beq.n	80042b2 <SD_ReadyWait+0x26>
 80042a8:	4b04      	ldr	r3, [pc, #16]	@ (80042bc <SD_ReadyWait+0x30>)
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f3      	bne.n	800429a <SD_ReadyWait+0xe>

	return res;
 80042b2:	79fb      	ldrb	r3, [r7, #7]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	2400037c 	.word	0x2400037c

080042c0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80042c6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80042ca:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80042cc:	f7ff ff70 	bl	80041b0 <DESELECT>
	for(int i = 0; i < 10; i++)
 80042d0:	2300      	movs	r3, #0
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	e005      	b.n	80042e2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80042d6:	20ff      	movs	r0, #255	@ 0xff
 80042d8:	f7ff ff76 	bl	80041c8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	3301      	adds	r3, #1
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b09      	cmp	r3, #9
 80042e6:	ddf6      	ble.n	80042d6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80042e8:	f7ff ff56 	bl	8004198 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80042ec:	2340      	movs	r3, #64	@ 0x40
 80042ee:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8004300:	2395      	movs	r3, #149	@ 0x95
 8004302:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8004304:	463b      	mov	r3, r7
 8004306:	2106      	movs	r1, #6
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff ff77 	bl	80041fc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800430e:	e002      	b.n	8004316 <SD_PowerOn+0x56>
	{
		cnt--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3b01      	subs	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8004316:	f7ff ff8d 	bl	8004234 <SPI_RxByte>
 800431a:	4603      	mov	r3, r0
 800431c:	2b01      	cmp	r3, #1
 800431e:	d002      	beq.n	8004326 <SD_PowerOn+0x66>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f4      	bne.n	8004310 <SD_PowerOn+0x50>
	}

	DESELECT();
 8004326:	f7ff ff43 	bl	80041b0 <DESELECT>
	SPI_TxByte(0XFF);
 800432a:	20ff      	movs	r0, #255	@ 0xff
 800432c:	f7ff ff4c 	bl	80041c8 <SPI_TxByte>

	PowerFlag = 1;
 8004330:	4b03      	ldr	r3, [pc, #12]	@ (8004340 <SD_PowerOn+0x80>)
 8004332:	2201      	movs	r2, #1
 8004334:	701a      	strb	r2, [r3, #0]
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	24000195 	.word	0x24000195

08004344 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8004348:	4b03      	ldr	r3, [pc, #12]	@ (8004358 <SD_PowerOff+0x14>)
 800434a:	2200      	movs	r2, #0
 800434c:	701a      	strb	r2, [r3, #0]
}
 800434e:	bf00      	nop
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	24000195 	.word	0x24000195

0800435c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8004360:	4b03      	ldr	r3, [pc, #12]	@ (8004370 <SD_CheckPower+0x14>)
 8004362:	781b      	ldrb	r3, [r3, #0]
}
 8004364:	4618      	mov	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	24000195 	.word	0x24000195

08004374 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 10;
 800437e:	4b14      	ldr	r3, [pc, #80]	@ (80043d0 <SD_RxDataBlock+0x5c>)
 8004380:	220a      	movs	r2, #10
 8004382:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8004384:	f7ff ff56 	bl	8004234 <SPI_RxByte>
 8004388:	4603      	mov	r3, r0
 800438a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2bff      	cmp	r3, #255	@ 0xff
 8004390:	d104      	bne.n	800439c <SD_RxDataBlock+0x28>
 8004392:	4b0f      	ldr	r3, [pc, #60]	@ (80043d0 <SD_RxDataBlock+0x5c>)
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f3      	bne.n	8004384 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2bfe      	cmp	r3, #254	@ 0xfe
 80043a0:	d001      	beq.n	80043a6 <SD_RxDataBlock+0x32>
 80043a2:	2300      	movs	r3, #0
 80043a4:	e00f      	b.n	80043c6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff ff5f 	bl	8004270 <SPI_RxBytePtr>
	} while(len--);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	1e5a      	subs	r2, r3, #1
 80043b6:	603a      	str	r2, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f4      	bne.n	80043a6 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80043bc:	f7ff ff3a 	bl	8004234 <SPI_RxByte>
	SPI_RxByte();
 80043c0:	f7ff ff38 	bl	8004234 <SPI_RxByte>

	return TRUE;
 80043c4:	2301      	movs	r3, #1
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	24000378 	.word	0x24000378

080043d4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80043e4:	f7ff ff52 	bl	800428c <SD_ReadyWait>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2bff      	cmp	r3, #255	@ 0xff
 80043ec:	d001      	beq.n	80043f2 <SD_TxDataBlock+0x1e>
 80043ee:	2300      	movs	r3, #0
 80043f0:	e02f      	b.n	8004452 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fee7 	bl	80041c8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	2bfd      	cmp	r3, #253	@ 0xfd
 80043fe:	d020      	beq.n	8004442 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8004400:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff fef9 	bl	80041fc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800440a:	f7ff ff13 	bl	8004234 <SPI_RxByte>
		SPI_RxByte();
 800440e:	f7ff ff11 	bl	8004234 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8004412:	e00b      	b.n	800442c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8004414:	f7ff ff0e 	bl	8004234 <SPI_RxByte>
 8004418:	4603      	mov	r3, r0
 800441a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	2b05      	cmp	r3, #5
 8004424:	d006      	beq.n	8004434 <SD_TxDataBlock+0x60>
			i++;
 8004426:	7bbb      	ldrb	r3, [r7, #14]
 8004428:	3301      	adds	r3, #1
 800442a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800442c:	7bbb      	ldrb	r3, [r7, #14]
 800442e:	2b40      	cmp	r3, #64	@ 0x40
 8004430:	d9f0      	bls.n	8004414 <SD_TxDataBlock+0x40>
 8004432:	e000      	b.n	8004436 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8004434:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8004436:	bf00      	nop
 8004438:	f7ff fefc 	bl	8004234 <SPI_RxByte>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0fa      	beq.n	8004438 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	2b05      	cmp	r3, #5
 800444a:	d101      	bne.n	8004450 <SD_TxDataBlock+0x7c>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <SD_TxDataBlock+0x7e>

	return FALSE;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	4603      	mov	r3, r0
 8004462:	6039      	str	r1, [r7, #0]
 8004464:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8004466:	f7ff ff11 	bl	800428c <SD_ReadyWait>
 800446a:	4603      	mov	r3, r0
 800446c:	2bff      	cmp	r3, #255	@ 0xff
 800446e:	d001      	beq.n	8004474 <SD_SendCmd+0x1a>
 8004470:	23ff      	movs	r3, #255	@ 0xff
 8004472:	e042      	b.n	80044fa <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fea6 	bl	80041c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	0e1b      	lsrs	r3, r3, #24
 8004480:	b2db      	uxtb	r3, r3
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fea0 	bl	80041c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	0c1b      	lsrs	r3, r3, #16
 800448c:	b2db      	uxtb	r3, r3
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff fe9a 	bl	80041c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	b2db      	uxtb	r3, r3
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fe94 	bl	80041c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff fe8f 	bl	80041c8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	2b40      	cmp	r3, #64	@ 0x40
 80044ae:	d102      	bne.n	80044b6 <SD_SendCmd+0x5c>
 80044b0:	2395      	movs	r3, #149	@ 0x95
 80044b2:	73fb      	strb	r3, [r7, #15]
 80044b4:	e007      	b.n	80044c6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	2b48      	cmp	r3, #72	@ 0x48
 80044ba:	d102      	bne.n	80044c2 <SD_SendCmd+0x68>
 80044bc:	2387      	movs	r3, #135	@ 0x87
 80044be:	73fb      	strb	r3, [r7, #15]
 80044c0:	e001      	b.n	80044c6 <SD_SendCmd+0x6c>
	else crc = 1;
 80044c2:	2301      	movs	r3, #1
 80044c4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fe7d 	bl	80041c8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	2b4c      	cmp	r3, #76	@ 0x4c
 80044d2:	d101      	bne.n	80044d8 <SD_SendCmd+0x7e>
 80044d4:	f7ff feae 	bl	8004234 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80044d8:	230a      	movs	r3, #10
 80044da:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80044dc:	f7ff feaa 	bl	8004234 <SPI_RxByte>
 80044e0:	4603      	mov	r3, r0
 80044e2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80044e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	da05      	bge.n	80044f8 <SD_SendCmd+0x9e>
 80044ec:	7bbb      	ldrb	r3, [r7, #14]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	73bb      	strb	r3, [r7, #14]
 80044f2:	7bbb      	ldrb	r3, [r7, #14]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f1      	bne.n	80044dc <SD_SendCmd+0x82>

	return res;
 80044f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <SD_disk_initialize+0x14>
 8004514:	2301      	movs	r3, #1
 8004516:	e0d6      	b.n	80046c6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004518:	4b6d      	ldr	r3, [pc, #436]	@ (80046d0 <SD_disk_initialize+0x1cc>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <SD_disk_initialize+0x2a>
 8004526:	4b6a      	ldr	r3, [pc, #424]	@ (80046d0 <SD_disk_initialize+0x1cc>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	e0cb      	b.n	80046c6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800452e:	f7ff fec7 	bl	80042c0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8004532:	f7ff fe31 	bl	8004198 <SELECT>

	/* check disk type */
	type = 0;
 8004536:	2300      	movs	r3, #0
 8004538:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800453a:	2100      	movs	r1, #0
 800453c:	2040      	movs	r0, #64	@ 0x40
 800453e:	f7ff ff8c 	bl	800445a <SD_SendCmd>
 8004542:	4603      	mov	r3, r0
 8004544:	2b01      	cmp	r3, #1
 8004546:	f040 80a6 	bne.w	8004696 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800454a:	4b62      	ldr	r3, [pc, #392]	@ (80046d4 <SD_disk_initialize+0x1d0>)
 800454c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004550:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8004552:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8004556:	2048      	movs	r0, #72	@ 0x48
 8004558:	f7ff ff7f 	bl	800445a <SD_SendCmd>
 800455c:	4603      	mov	r3, r0
 800455e:	2b01      	cmp	r3, #1
 8004560:	d158      	bne.n	8004614 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8004562:	2300      	movs	r3, #0
 8004564:	73fb      	strb	r3, [r7, #15]
 8004566:	e00c      	b.n	8004582 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8004568:	7bfc      	ldrb	r4, [r7, #15]
 800456a:	f7ff fe63 	bl	8004234 <SPI_RxByte>
 800456e:	4603      	mov	r3, r0
 8004570:	461a      	mov	r2, r3
 8004572:	f104 0310 	add.w	r3, r4, #16
 8004576:	443b      	add	r3, r7
 8004578:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	3301      	adds	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	2b03      	cmp	r3, #3
 8004586:	d9ef      	bls.n	8004568 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004588:	7abb      	ldrb	r3, [r7, #10]
 800458a:	2b01      	cmp	r3, #1
 800458c:	f040 8083 	bne.w	8004696 <SD_disk_initialize+0x192>
 8004590:	7afb      	ldrb	r3, [r7, #11]
 8004592:	2baa      	cmp	r3, #170	@ 0xaa
 8004594:	d17f      	bne.n	8004696 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004596:	2100      	movs	r1, #0
 8004598:	2077      	movs	r0, #119	@ 0x77
 800459a:	f7ff ff5e 	bl	800445a <SD_SendCmd>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d807      	bhi.n	80045b4 <SD_disk_initialize+0xb0>
 80045a4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80045a8:	2069      	movs	r0, #105	@ 0x69
 80045aa:	f7ff ff56 	bl	800445a <SD_SendCmd>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80045b4:	4b47      	ldr	r3, [pc, #284]	@ (80046d4 <SD_disk_initialize+0x1d0>)
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1eb      	bne.n	8004596 <SD_disk_initialize+0x92>
 80045be:	e000      	b.n	80045c2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80045c0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80045c2:	4b44      	ldr	r3, [pc, #272]	@ (80046d4 <SD_disk_initialize+0x1d0>)
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d064      	beq.n	8004696 <SD_disk_initialize+0x192>
 80045cc:	2100      	movs	r1, #0
 80045ce:	207a      	movs	r0, #122	@ 0x7a
 80045d0:	f7ff ff43 	bl	800445a <SD_SendCmd>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d15d      	bne.n	8004696 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80045da:	2300      	movs	r3, #0
 80045dc:	73fb      	strb	r3, [r7, #15]
 80045de:	e00c      	b.n	80045fa <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80045e0:	7bfc      	ldrb	r4, [r7, #15]
 80045e2:	f7ff fe27 	bl	8004234 <SPI_RxByte>
 80045e6:	4603      	mov	r3, r0
 80045e8:	461a      	mov	r2, r3
 80045ea:	f104 0310 	add.w	r3, r4, #16
 80045ee:	443b      	add	r3, r7
 80045f0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	3301      	adds	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d9ef      	bls.n	80045e0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004600:	7a3b      	ldrb	r3, [r7, #8]
 8004602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <SD_disk_initialize+0x10a>
 800460a:	230c      	movs	r3, #12
 800460c:	e000      	b.n	8004610 <SD_disk_initialize+0x10c>
 800460e:	2304      	movs	r3, #4
 8004610:	73bb      	strb	r3, [r7, #14]
 8004612:	e040      	b.n	8004696 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8004614:	2100      	movs	r1, #0
 8004616:	2077      	movs	r0, #119	@ 0x77
 8004618:	f7ff ff1f 	bl	800445a <SD_SendCmd>
 800461c:	4603      	mov	r3, r0
 800461e:	2b01      	cmp	r3, #1
 8004620:	d808      	bhi.n	8004634 <SD_disk_initialize+0x130>
 8004622:	2100      	movs	r1, #0
 8004624:	2069      	movs	r0, #105	@ 0x69
 8004626:	f7ff ff18 	bl	800445a <SD_SendCmd>
 800462a:	4603      	mov	r3, r0
 800462c:	2b01      	cmp	r3, #1
 800462e:	d801      	bhi.n	8004634 <SD_disk_initialize+0x130>
 8004630:	2302      	movs	r3, #2
 8004632:	e000      	b.n	8004636 <SD_disk_initialize+0x132>
 8004634:	2301      	movs	r3, #1
 8004636:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8004638:	7bbb      	ldrb	r3, [r7, #14]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d10e      	bne.n	800465c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800463e:	2100      	movs	r1, #0
 8004640:	2077      	movs	r0, #119	@ 0x77
 8004642:	f7ff ff0a 	bl	800445a <SD_SendCmd>
 8004646:	4603      	mov	r3, r0
 8004648:	2b01      	cmp	r3, #1
 800464a:	d80e      	bhi.n	800466a <SD_disk_initialize+0x166>
 800464c:	2100      	movs	r1, #0
 800464e:	2069      	movs	r0, #105	@ 0x69
 8004650:	f7ff ff03 	bl	800445a <SD_SendCmd>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d107      	bne.n	800466a <SD_disk_initialize+0x166>
 800465a:	e00d      	b.n	8004678 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800465c:	2100      	movs	r1, #0
 800465e:	2041      	movs	r0, #65	@ 0x41
 8004660:	f7ff fefb 	bl	800445a <SD_SendCmd>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800466a:	4b1a      	ldr	r3, [pc, #104]	@ (80046d4 <SD_disk_initialize+0x1d0>)
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e1      	bne.n	8004638 <SD_disk_initialize+0x134>
 8004674:	e000      	b.n	8004678 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004676:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8004678:	4b16      	ldr	r3, [pc, #88]	@ (80046d4 <SD_disk_initialize+0x1d0>)
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <SD_disk_initialize+0x18e>
 8004682:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004686:	2050      	movs	r0, #80	@ 0x50
 8004688:	f7ff fee7 	bl	800445a <SD_SendCmd>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <SD_disk_initialize+0x192>
 8004692:	2300      	movs	r3, #0
 8004694:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8004696:	4a10      	ldr	r2, [pc, #64]	@ (80046d8 <SD_disk_initialize+0x1d4>)
 8004698:	7bbb      	ldrb	r3, [r7, #14]
 800469a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800469c:	f7ff fd88 	bl	80041b0 <DESELECT>
	SPI_RxByte();
 80046a0:	f7ff fdc8 	bl	8004234 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80046a4:	7bbb      	ldrb	r3, [r7, #14]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d008      	beq.n	80046bc <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80046aa:	4b09      	ldr	r3, [pc, #36]	@ (80046d0 <SD_disk_initialize+0x1cc>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <SD_disk_initialize+0x1cc>)
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	e001      	b.n	80046c0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80046bc:	f7ff fe42 	bl	8004344 <SD_PowerOff>
	}

	return Stat;
 80046c0:	4b03      	ldr	r3, [pc, #12]	@ (80046d0 <SD_disk_initialize+0x1cc>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	b2db      	uxtb	r3, r3
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd90      	pop	{r4, r7, pc}
 80046ce:	bf00      	nop
 80046d0:	24000000 	.word	0x24000000
 80046d4:	24000378 	.word	0x24000378
 80046d8:	24000194 	.word	0x24000194

080046dc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <SD_disk_status+0x14>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e002      	b.n	80046f6 <SD_disk_status+0x1a>
	return Stat;
 80046f0:	4b04      	ldr	r3, [pc, #16]	@ (8004704 <SD_disk_status+0x28>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	b2db      	uxtb	r3, r3
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	24000000 	.word	0x24000000

08004708 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	607a      	str	r2, [r7, #4]
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	4603      	mov	r3, r0
 8004716:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d102      	bne.n	8004724 <SD_disk_read+0x1c>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <SD_disk_read+0x20>
 8004724:	2304      	movs	r3, #4
 8004726:	e051      	b.n	80047cc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004728:	4b2a      	ldr	r3, [pc, #168]	@ (80047d4 <SD_disk_read+0xcc>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <SD_disk_read+0x32>
 8004736:	2303      	movs	r3, #3
 8004738:	e048      	b.n	80047cc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800473a:	4b27      	ldr	r3, [pc, #156]	@ (80047d8 <SD_disk_read+0xd0>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d102      	bne.n	800474c <SD_disk_read+0x44>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	025b      	lsls	r3, r3, #9
 800474a:	607b      	str	r3, [r7, #4]

	SELECT();
 800474c:	f7ff fd24 	bl	8004198 <SELECT>

	if (count == 1)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d111      	bne.n	800477a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	2051      	movs	r0, #81	@ 0x51
 800475a:	f7ff fe7e 	bl	800445a <SD_SendCmd>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d129      	bne.n	80047b8 <SD_disk_read+0xb0>
 8004764:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004768:	68b8      	ldr	r0, [r7, #8]
 800476a:	f7ff fe03 	bl	8004374 <SD_RxDataBlock>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d021      	beq.n	80047b8 <SD_disk_read+0xb0>
 8004774:	2300      	movs	r3, #0
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	e01e      	b.n	80047b8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	2052      	movs	r0, #82	@ 0x52
 800477e:	f7ff fe6c 	bl	800445a <SD_SendCmd>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d117      	bne.n	80047b8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8004788:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800478c:	68b8      	ldr	r0, [r7, #8]
 800478e:	f7ff fdf1 	bl	8004374 <SD_RxDataBlock>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <SD_disk_read+0xa6>
				buff += 512;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800479e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1ed      	bne.n	8004788 <SD_disk_read+0x80>
 80047ac:	e000      	b.n	80047b0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80047ae:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80047b0:	2100      	movs	r1, #0
 80047b2:	204c      	movs	r0, #76	@ 0x4c
 80047b4:	f7ff fe51 	bl	800445a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80047b8:	f7ff fcfa 	bl	80041b0 <DESELECT>
	SPI_RxByte();
 80047bc:	f7ff fd3a 	bl	8004234 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	24000000 	.word	0x24000000
 80047d8:	24000194 	.word	0x24000194

080047dc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4603      	mov	r3, r0
 80047ea:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d102      	bne.n	80047f8 <SD_disk_write+0x1c>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <SD_disk_write+0x20>
 80047f8:	2304      	movs	r3, #4
 80047fa:	e06b      	b.n	80048d4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80047fc:	4b37      	ldr	r3, [pc, #220]	@ (80048dc <SD_disk_write+0x100>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <SD_disk_write+0x32>
 800480a:	2303      	movs	r3, #3
 800480c:	e062      	b.n	80048d4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800480e:	4b33      	ldr	r3, [pc, #204]	@ (80048dc <SD_disk_write+0x100>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <SD_disk_write+0x44>
 800481c:	2302      	movs	r3, #2
 800481e:	e059      	b.n	80048d4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004820:	4b2f      	ldr	r3, [pc, #188]	@ (80048e0 <SD_disk_write+0x104>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d102      	bne.n	8004832 <SD_disk_write+0x56>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	025b      	lsls	r3, r3, #9
 8004830:	607b      	str	r3, [r7, #4]

	SELECT();
 8004832:	f7ff fcb1 	bl	8004198 <SELECT>

	if (count == 1)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d110      	bne.n	800485e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	2058      	movs	r0, #88	@ 0x58
 8004840:	f7ff fe0b 	bl	800445a <SD_SendCmd>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d13a      	bne.n	80048c0 <SD_disk_write+0xe4>
 800484a:	21fe      	movs	r1, #254	@ 0xfe
 800484c:	68b8      	ldr	r0, [r7, #8]
 800484e:	f7ff fdc1 	bl	80043d4 <SD_TxDataBlock>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d033      	beq.n	80048c0 <SD_disk_write+0xe4>
			count = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	e030      	b.n	80048c0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800485e:	4b20      	ldr	r3, [pc, #128]	@ (80048e0 <SD_disk_write+0x104>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800486a:	2100      	movs	r1, #0
 800486c:	2077      	movs	r0, #119	@ 0x77
 800486e:	f7ff fdf4 	bl	800445a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8004872:	6839      	ldr	r1, [r7, #0]
 8004874:	2057      	movs	r0, #87	@ 0x57
 8004876:	f7ff fdf0 	bl	800445a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	2059      	movs	r0, #89	@ 0x59
 800487e:	f7ff fdec 	bl	800445a <SD_SendCmd>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d11b      	bne.n	80048c0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004888:	21fc      	movs	r1, #252	@ 0xfc
 800488a:	68b8      	ldr	r0, [r7, #8]
 800488c:	f7ff fda2 	bl	80043d4 <SD_TxDataBlock>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <SD_disk_write+0xd0>
				buff += 512;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800489c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1ee      	bne.n	8004888 <SD_disk_write+0xac>
 80048aa:	e000      	b.n	80048ae <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80048ac:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80048ae:	21fd      	movs	r1, #253	@ 0xfd
 80048b0:	2000      	movs	r0, #0
 80048b2:	f7ff fd8f 	bl	80043d4 <SD_TxDataBlock>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <SD_disk_write+0xe4>
			{
				count = 1;
 80048bc:	2301      	movs	r3, #1
 80048be:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80048c0:	f7ff fc76 	bl	80041b0 <DESELECT>
	SPI_RxByte();
 80048c4:	f7ff fcb6 	bl	8004234 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bf14      	ite	ne
 80048ce:	2301      	movne	r3, #1
 80048d0:	2300      	moveq	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	24000000 	.word	0x24000000
 80048e0:	24000194 	.word	0x24000194

080048e4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b08b      	sub	sp, #44	@ 0x2c
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	603a      	str	r2, [r7, #0]
 80048ee:	71fb      	strb	r3, [r7, #7]
 80048f0:	460b      	mov	r3, r1
 80048f2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <SD_disk_ioctl+0x1e>
 80048fe:	2304      	movs	r3, #4
 8004900:	e113      	b.n	8004b2a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8004908:	79bb      	ldrb	r3, [r7, #6]
 800490a:	2b05      	cmp	r3, #5
 800490c:	d124      	bne.n	8004958 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d012      	beq.n	800493c <SD_disk_ioctl+0x58>
 8004916:	2b02      	cmp	r3, #2
 8004918:	dc1a      	bgt.n	8004950 <SD_disk_ioctl+0x6c>
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <SD_disk_ioctl+0x40>
 800491e:	2b01      	cmp	r3, #1
 8004920:	d006      	beq.n	8004930 <SD_disk_ioctl+0x4c>
 8004922:	e015      	b.n	8004950 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004924:	f7ff fd0e 	bl	8004344 <SD_PowerOff>
			res = RES_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800492e:	e0fa      	b.n	8004b26 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8004930:	f7ff fcc6 	bl	80042c0 <SD_PowerOn>
			res = RES_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800493a:	e0f4      	b.n	8004b26 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	1c5c      	adds	r4, r3, #1
 8004940:	f7ff fd0c 	bl	800435c <SD_CheckPower>
 8004944:	4603      	mov	r3, r0
 8004946:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8004948:	2300      	movs	r3, #0
 800494a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800494e:	e0ea      	b.n	8004b26 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8004950:	2304      	movs	r3, #4
 8004952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004956:	e0e6      	b.n	8004b26 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004958:	4b76      	ldr	r3, [pc, #472]	@ (8004b34 <SD_disk_ioctl+0x250>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <SD_disk_ioctl+0x86>
 8004966:	2303      	movs	r3, #3
 8004968:	e0df      	b.n	8004b2a <SD_disk_ioctl+0x246>

		SELECT();
 800496a:	f7ff fc15 	bl	8004198 <SELECT>

		switch (ctrl)
 800496e:	79bb      	ldrb	r3, [r7, #6]
 8004970:	2b0d      	cmp	r3, #13
 8004972:	f200 80c9 	bhi.w	8004b08 <SD_disk_ioctl+0x224>
 8004976:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <SD_disk_ioctl+0x98>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	08004a73 	.word	0x08004a73
 8004980:	080049b5 	.word	0x080049b5
 8004984:	08004a63 	.word	0x08004a63
 8004988:	08004b09 	.word	0x08004b09
 800498c:	08004b09 	.word	0x08004b09
 8004990:	08004b09 	.word	0x08004b09
 8004994:	08004b09 	.word	0x08004b09
 8004998:	08004b09 	.word	0x08004b09
 800499c:	08004b09 	.word	0x08004b09
 80049a0:	08004b09 	.word	0x08004b09
 80049a4:	08004b09 	.word	0x08004b09
 80049a8:	08004a85 	.word	0x08004a85
 80049ac:	08004aa9 	.word	0x08004aa9
 80049b0:	08004acd 	.word	0x08004acd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80049b4:	2100      	movs	r1, #0
 80049b6:	2049      	movs	r0, #73	@ 0x49
 80049b8:	f7ff fd4f 	bl	800445a <SD_SendCmd>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f040 80a6 	bne.w	8004b10 <SD_disk_ioctl+0x22c>
 80049c4:	f107 030c 	add.w	r3, r7, #12
 80049c8:	2110      	movs	r1, #16
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff fcd2 	bl	8004374 <SD_RxDataBlock>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 809c 	beq.w	8004b10 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80049d8:	7b3b      	ldrb	r3, [r7, #12]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d10d      	bne.n	80049fe <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80049e2:	7d7b      	ldrb	r3, [r7, #21]
 80049e4:	461a      	mov	r2, r3
 80049e6:	7d3b      	ldrb	r3, [r7, #20]
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	4413      	add	r3, r2
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3301      	adds	r3, #1
 80049f2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80049f4:	8bfb      	ldrh	r3, [r7, #30]
 80049f6:	029a      	lsls	r2, r3, #10
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e02d      	b.n	8004a5a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80049fe:	7c7b      	ldrb	r3, [r7, #17]
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	7dbb      	ldrb	r3, [r7, #22]
 8004a08:	09db      	lsrs	r3, r3, #7
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	7d7b      	ldrb	r3, [r7, #21]
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	f003 0306 	and.w	r3, r3, #6
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	3302      	adds	r3, #2
 8004a22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004a26:	7d3b      	ldrb	r3, [r7, #20]
 8004a28:	099b      	lsrs	r3, r3, #6
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	7cfb      	ldrb	r3, [r7, #19]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	4413      	add	r3, r2
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	7cbb      	ldrb	r3, [r7, #18]
 8004a3a:	029b      	lsls	r3, r3, #10
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3301      	adds	r3, #1
 8004a4a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004a4c:	8bfa      	ldrh	r2, [r7, #30]
 8004a4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004a52:	3b09      	subs	r3, #9
 8004a54:	409a      	lsls	r2, r3
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8004a60:	e056      	b.n	8004b10 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a68:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004a70:	e055      	b.n	8004b1e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004a72:	f7ff fc0b 	bl	800428c <SD_ReadyWait>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2bff      	cmp	r3, #255	@ 0xff
 8004a7a:	d14b      	bne.n	8004b14 <SD_disk_ioctl+0x230>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004a82:	e047      	b.n	8004b14 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004a84:	2100      	movs	r1, #0
 8004a86:	2049      	movs	r0, #73	@ 0x49
 8004a88:	f7ff fce7 	bl	800445a <SD_SendCmd>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d142      	bne.n	8004b18 <SD_disk_ioctl+0x234>
 8004a92:	2110      	movs	r1, #16
 8004a94:	6a38      	ldr	r0, [r7, #32]
 8004a96:	f7ff fc6d 	bl	8004374 <SD_RxDataBlock>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d03b      	beq.n	8004b18 <SD_disk_ioctl+0x234>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004aa6:	e037      	b.n	8004b18 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	204a      	movs	r0, #74	@ 0x4a
 8004aac:	f7ff fcd5 	bl	800445a <SD_SendCmd>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d132      	bne.n	8004b1c <SD_disk_ioctl+0x238>
 8004ab6:	2110      	movs	r1, #16
 8004ab8:	6a38      	ldr	r0, [r7, #32]
 8004aba:	f7ff fc5b 	bl	8004374 <SD_RxDataBlock>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d02b      	beq.n	8004b1c <SD_disk_ioctl+0x238>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004aca:	e027      	b.n	8004b1c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004acc:	2100      	movs	r1, #0
 8004ace:	207a      	movs	r0, #122	@ 0x7a
 8004ad0:	f7ff fcc3 	bl	800445a <SD_SendCmd>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d116      	bne.n	8004b08 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8004ada:	2300      	movs	r3, #0
 8004adc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004ae0:	e00b      	b.n	8004afa <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8004ae2:	6a3c      	ldr	r4, [r7, #32]
 8004ae4:	1c63      	adds	r3, r4, #1
 8004ae6:	623b      	str	r3, [r7, #32]
 8004ae8:	f7ff fba4 	bl	8004234 <SPI_RxByte>
 8004aec:	4603      	mov	r3, r0
 8004aee:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004af0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004af4:	3301      	adds	r3, #1
 8004af6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004afa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d9ef      	bls.n	8004ae2 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8004b08:	2304      	movs	r3, #4
 8004b0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004b0e:	e006      	b.n	8004b1e <SD_disk_ioctl+0x23a>
			break;
 8004b10:	bf00      	nop
 8004b12:	e004      	b.n	8004b1e <SD_disk_ioctl+0x23a>
			break;
 8004b14:	bf00      	nop
 8004b16:	e002      	b.n	8004b1e <SD_disk_ioctl+0x23a>
			break;
 8004b18:	bf00      	nop
 8004b1a:	e000      	b.n	8004b1e <SD_disk_ioctl+0x23a>
			break;
 8004b1c:	bf00      	nop
		}

		DESELECT();
 8004b1e:	f7ff fb47 	bl	80041b0 <DESELECT>
		SPI_RxByte();
 8004b22:	f7ff fb87 	bl	8004234 <SPI_RxByte>
	}

	return res;
 8004b26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	372c      	adds	r7, #44	@ 0x2c
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd90      	pop	{r4, r7, pc}
 8004b32:	bf00      	nop
 8004b34:	24000000 	.word	0x24000000

08004b38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08e      	sub	sp, #56	@ 0x38
 8004b3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	605a      	str	r2, [r3, #4]
 8004b48:	609a      	str	r2, [r3, #8]
 8004b4a:	60da      	str	r2, [r3, #12]
 8004b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b4e:	4b8b      	ldr	r3, [pc, #556]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b54:	4a89      	ldr	r2, [pc, #548]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b56:	f043 0310 	orr.w	r3, r3, #16
 8004b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b5e:	4b87      	ldr	r3, [pc, #540]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	623b      	str	r3, [r7, #32]
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b6c:	4b83      	ldr	r3, [pc, #524]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b72:	4a82      	ldr	r2, [pc, #520]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b7c:	4b7f      	ldr	r3, [pc, #508]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b8a:	4b7c      	ldr	r3, [pc, #496]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b90:	4a7a      	ldr	r2, [pc, #488]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b9a:	4b78      	ldr	r3, [pc, #480]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ba8:	4b74      	ldr	r3, [pc, #464]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bae:	4a73      	ldr	r2, [pc, #460]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004bb0:	f043 0320 	orr.w	r3, r3, #32
 8004bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bb8:	4b70      	ldr	r3, [pc, #448]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bc6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bcc:	4a6b      	ldr	r2, [pc, #428]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004bce:	f043 0302 	orr.w	r3, r3, #2
 8004bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bd6:	4b69      	ldr	r3, [pc, #420]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	613b      	str	r3, [r7, #16]
 8004be2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004be4:	4b65      	ldr	r3, [pc, #404]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bea:	4a64      	ldr	r2, [pc, #400]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004bec:	f043 0308 	orr.w	r3, r3, #8
 8004bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bf4:	4b61      	ldr	r3, [pc, #388]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c02:	4b5e      	ldr	r3, [pc, #376]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c08:	4a5c      	ldr	r2, [pc, #368]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c12:	4b5a      	ldr	r3, [pc, #360]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c20:	4b56      	ldr	r3, [pc, #344]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c26:	4a55      	ldr	r2, [pc, #340]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004c28:	f043 0304 	orr.w	r3, r3, #4
 8004c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c30:	4b52      	ldr	r3, [pc, #328]	@ (8004d7c <MX_GPIO_Init+0x244>)
 8004c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	607b      	str	r3, [r7, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f248 0108 	movw	r1, #32776	@ 0x8008
 8004c44:	484e      	ldr	r0, [pc, #312]	@ (8004d80 <MX_GPIO_Init+0x248>)
 8004c46:	f009 fda1 	bl	800e78c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8004c50:	484c      	ldr	r0, [pc, #304]	@ (8004d84 <MX_GPIO_Init+0x24c>)
 8004c52:	f009 fd9b 	bl	800e78c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 8004c56:	2200      	movs	r2, #0
 8004c58:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8004c5c:	484a      	ldr	r0, [pc, #296]	@ (8004d88 <MX_GPIO_Init+0x250>)
 8004c5e:	f009 fd95 	bl	800e78c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 8004c62:	2200      	movs	r2, #0
 8004c64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c68:	4848      	ldr	r0, [pc, #288]	@ (8004d8c <MX_GPIO_Init+0x254>)
 8004c6a:	f009 fd8f 	bl	800e78c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8004c74:	4846      	ldr	r0, [pc, #280]	@ (8004d90 <MX_GPIO_Init+0x258>)
 8004c76:	f009 fd89 	bl	800e78c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_6_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 8004c7a:	f248 0308 	movw	r3, #32776	@ 0x8008
 8004c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c80:	2301      	movs	r3, #1
 8004c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c90:	4619      	mov	r1, r3
 8004c92:	483b      	ldr	r0, [pc, #236]	@ (8004d80 <MX_GPIO_Init+0x248>)
 8004c94:	f009 fbba 	bl	800e40c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_R_Pin NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004c98:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 8004c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004caa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4834      	ldr	r0, [pc, #208]	@ (8004d84 <MX_GPIO_Init+0x24c>)
 8004cb2:	f009 fbab 	bl	800e40c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detection_Pin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 8004cb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cc8:	4619      	mov	r1, r3
 8004cca:	482e      	ldr	r0, [pc, #184]	@ (8004d84 <MX_GPIO_Init+0x24c>)
 8004ccc:	f009 fb9e 	bl	800e40c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_LED_Pin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004cd0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4827      	ldr	r0, [pc, #156]	@ (8004d88 <MX_GPIO_Init+0x250>)
 8004cea:	f009 fb8f 	bl	800e40c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_SC_Pin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 8004cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004d00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d04:	4619      	mov	r1, r3
 8004d06:	4820      	ldr	r0, [pc, #128]	@ (8004d88 <MX_GPIO_Init+0x250>)
 8004d08:	f009 fb80 	bl	800e40c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_Power_Pin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 8004d0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d12:	2301      	movs	r3, #1
 8004d14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 8004d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d22:	4619      	mov	r1, r3
 8004d24:	4819      	ldr	r0, [pc, #100]	@ (8004d8c <MX_GPIO_Init+0x254>)
 8004d26:	f009 fb71 	bl	800e40c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_7_Pin LED_5_Pin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 8004d2a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d30:	2301      	movs	r3, #1
 8004d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d34:	2300      	movs	r3, #0
 8004d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d40:	4619      	mov	r1, r3
 8004d42:	4813      	ldr	r0, [pc, #76]	@ (8004d90 <MX_GPIO_Init+0x258>)
 8004d44:	f009 fb62 	bl	800e40c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8004d48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004d4e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d54:	2300      	movs	r3, #0
 8004d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004d58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	480b      	ldr	r0, [pc, #44]	@ (8004d8c <MX_GPIO_Init+0x254>)
 8004d60:	f009 fb54 	bl	800e40c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004d64:	2200      	movs	r2, #0
 8004d66:	2100      	movs	r1, #0
 8004d68:	2028      	movs	r0, #40	@ 0x28
 8004d6a:	f006 fc50 	bl	800b60e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d6e:	2028      	movs	r0, #40	@ 0x28
 8004d70:	f006 fc67 	bl	800b642 <HAL_NVIC_EnableIRQ>

}
 8004d74:	bf00      	nop
 8004d76:	3738      	adds	r7, #56	@ 0x38
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	58024400 	.word	0x58024400
 8004d80:	58021000 	.word	0x58021000
 8004d84:	58020400 	.word	0x58020400
 8004d88:	58020c00 	.word	0x58020c00
 8004d8c:	58021800 	.word	0x58021800
 8004d90:	58020000 	.word	0x58020000

08004d94 <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004d98:	4b1d      	ldr	r3, [pc, #116]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004d9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e14 <MX_I2C5_Init+0x80>)
 8004d9c:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 8004d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004da4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004daa:	4b19      	ldr	r3, [pc, #100]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004db0:	4b17      	ldr	r3, [pc, #92]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004db6:	4b16      	ldr	r3, [pc, #88]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004dbc:	4b14      	ldr	r3, [pc, #80]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004dc2:	4b13      	ldr	r3, [pc, #76]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004dc8:	4b11      	ldr	r3, [pc, #68]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8004dce:	4810      	ldr	r0, [pc, #64]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004dd0:	f009 fd10 	bl	800e7f4 <HAL_I2C_Init>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8004dda:	f003 f831 	bl	8007e40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004dde:	2100      	movs	r1, #0
 8004de0:	480b      	ldr	r0, [pc, #44]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004de2:	f00c f8c9 	bl	8010f78 <HAL_I2CEx_ConfigAnalogFilter>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8004dec:	f003 f828 	bl	8007e40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004df0:	2100      	movs	r1, #0
 8004df2:	4807      	ldr	r0, [pc, #28]	@ (8004e10 <MX_I2C5_Init+0x7c>)
 8004df4:	f00c f90b 	bl	801100e <HAL_I2CEx_ConfigDigitalFilter>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8004dfe:	f003 f81f 	bl	8007e40 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004e02:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004e06:	f00c f94f 	bl	80110a8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	24000198 	.word	0x24000198
 8004e14:	40006400 	.word	0x40006400

08004e18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b0b8      	sub	sp, #224	@ 0xe0
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e20:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	605a      	str	r2, [r3, #4]
 8004e2a:	609a      	str	r2, [r3, #8]
 8004e2c:	60da      	str	r2, [r3, #12]
 8004e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e30:	f107 0310 	add.w	r3, r7, #16
 8004e34:	22b8      	movs	r2, #184	@ 0xb8
 8004e36:	2100      	movs	r1, #0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f019 f937 	bl	801e0ac <memset>
  if(i2cHandle->Instance==I2C5)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a2b      	ldr	r2, [pc, #172]	@ (8004ef0 <HAL_I2C_MspInit+0xd8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d14f      	bne.n	8004ee8 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8004e48:	f04f 0208 	mov.w	r2, #8
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 8004e54:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004e58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e5c:	f107 0310 	add.w	r3, r7, #16
 8004e60:	4618      	mov	r0, r3
 8004e62:	f00d f8e5 	bl	8012030 <HAL_RCCEx_PeriphCLKConfig>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8004e6c:	f002 ffe8 	bl	8007e40 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e70:	4b20      	ldr	r3, [pc, #128]	@ (8004ef4 <HAL_I2C_MspInit+0xdc>)
 8004e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e76:	4a1f      	ldr	r2, [pc, #124]	@ (8004ef4 <HAL_I2C_MspInit+0xdc>)
 8004e78:	f043 0304 	orr.w	r3, r3, #4
 8004e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e80:	4b1c      	ldr	r3, [pc, #112]	@ (8004ef4 <HAL_I2C_MspInit+0xdc>)
 8004e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004e8e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004e92:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e96:	2312      	movs	r3, #18
 8004e98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004eae:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4810      	ldr	r0, [pc, #64]	@ (8004ef8 <HAL_I2C_MspInit+0xe0>)
 8004eb6:	f009 faa9 	bl	800e40c <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004eba:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef4 <HAL_I2C_MspInit+0xdc>)
 8004ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ef4 <HAL_I2C_MspInit+0xdc>)
 8004ec2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ec6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004eca:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef4 <HAL_I2C_MspInit+0xdc>)
 8004ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2101      	movs	r1, #1
 8004edc:	209d      	movs	r0, #157	@ 0x9d
 8004ede:	f006 fb96 	bl	800b60e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8004ee2:	209d      	movs	r0, #157	@ 0x9d
 8004ee4:	f006 fbad 	bl	800b642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 8004ee8:	bf00      	nop
 8004eea:	37e0      	adds	r7, #224	@ 0xe0
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40006400 	.word	0x40006400
 8004ef4:	58024400 	.word	0x58024400
 8004ef8:	58020800 	.word	0x58020800

08004efc <__NVIC_SystemReset>:
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004f00:	f3bf 8f4f 	dsb	sy
}
 8004f04:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004f06:	4b06      	ldr	r3, [pc, #24]	@ (8004f20 <__NVIC_SystemReset+0x24>)
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004f0e:	4904      	ldr	r1, [pc, #16]	@ (8004f20 <__NVIC_SystemReset+0x24>)
 8004f10:	4b04      	ldr	r3, [pc, #16]	@ (8004f24 <__NVIC_SystemReset+0x28>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f16:	f3bf 8f4f 	dsb	sy
}
 8004f1a:	bf00      	nop
    __NOP();
 8004f1c:	bf00      	nop
 8004f1e:	e7fd      	b.n	8004f1c <__NVIC_SystemReset+0x20>
 8004f20:	e000ed00 	.word	0xe000ed00
 8004f24:	05fa0004 	.word	0x05fa0004

08004f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08a      	sub	sp, #40	@ 0x28
 8004f2c:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/

	MPU_Config();
 8004f2e:	f002 ff5b 	bl	8007de8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f32:	f004 fa5d 	bl	80093f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f36:	f000 ffc7 	bl	8005ec8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004f3a:	f001 f837 	bl	8005fac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f3e:	f7ff fdfb 	bl	8004b38 <MX_GPIO_Init>
  MX_DMA_Init();
 8004f42:	f7fe fbdf 	bl	8003704 <MX_DMA_Init>
  MX_I2C5_Init();
 8004f46:	f7ff ff25 	bl	8004d94 <MX_I2C5_Init>
  MX_SPI6_Init();
 8004f4a:	f002 ffd5 	bl	8007ef8 <MX_SPI6_Init>
  MX_ADC2_Init();
 8004f4e:	f7fe faeb 	bl	8003528 <MX_ADC2_Init>
  MX_SPI2_Init();
 8004f52:	f002 ff7b 	bl	8007e4c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004f56:	f004 f963 	bl	8009220 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004f5a:	f003 fe81 	bl	8008c60 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004f5e:	f003 fff7 	bl	8008f50 <MX_TIM8_Init>
  MX_TIM3_Init();
 8004f62:	f003 ff79 	bl	8008e58 <MX_TIM3_Init>
  MX_FATFS_Init();
 8004f66:	f015 feed 	bl	801ad44 <MX_FATFS_Init>
  MX_TIM2_Init();
 8004f6a:	f003 ff21 	bl	8008db0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	  ESC_POWER_1;
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f74:	489c      	ldr	r0, [pc, #624]	@ (80051e8 <main+0x2c0>)
 8004f76:	f009 fc09 	bl	800e78c <HAL_GPIO_WritePin>

  	  STARTUP = 1;
 8004f7a:	4b9c      	ldr	r3, [pc, #624]	@ (80051ec <main+0x2c4>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]

  	DRON_ON_GRUND = 1;
 8004f80:	4b9b      	ldr	r3, [pc, #620]	@ (80051f0 <main+0x2c8>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]

  	PID_FAC_Pitch[0] = p_pitchfactor;
 8004f86:	4b9b      	ldr	r3, [pc, #620]	@ (80051f4 <main+0x2cc>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a9b      	ldr	r2, [pc, #620]	@ (80051f8 <main+0x2d0>)
 8004f8c:	6013      	str	r3, [r2, #0]
  	PID_FAC_Pitch[1] = i_pitchfactor;
 8004f8e:	4b9b      	ldr	r3, [pc, #620]	@ (80051fc <main+0x2d4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a99      	ldr	r2, [pc, #612]	@ (80051f8 <main+0x2d0>)
 8004f94:	6053      	str	r3, [r2, #4]
  	PID_FAC_Pitch[2] = d_pitchfactor;
 8004f96:	4b9a      	ldr	r3, [pc, #616]	@ (8005200 <main+0x2d8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a97      	ldr	r2, [pc, #604]	@ (80051f8 <main+0x2d0>)
 8004f9c:	6093      	str	r3, [r2, #8]
  	PID_FAC_Pitch[4] = 0;
 8004f9e:	4b96      	ldr	r3, [pc, #600]	@ (80051f8 <main+0x2d0>)
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	611a      	str	r2, [r3, #16]

  	PID_FAC_Rool[0] = p_roolfactor;
 8004fa6:	4b97      	ldr	r3, [pc, #604]	@ (8005204 <main+0x2dc>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a97      	ldr	r2, [pc, #604]	@ (8005208 <main+0x2e0>)
 8004fac:	6013      	str	r3, [r2, #0]
  	PID_FAC_Rool[1] = i_roolfactor;
 8004fae:	4b97      	ldr	r3, [pc, #604]	@ (800520c <main+0x2e4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a95      	ldr	r2, [pc, #596]	@ (8005208 <main+0x2e0>)
 8004fb4:	6053      	str	r3, [r2, #4]
  	PID_FAC_Rool[2] = d_roolfactor;
 8004fb6:	4b96      	ldr	r3, [pc, #600]	@ (8005210 <main+0x2e8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a93      	ldr	r2, [pc, #588]	@ (8005208 <main+0x2e0>)
 8004fbc:	6093      	str	r3, [r2, #8]
  	PID_FAC_Rool[4] = 0;
 8004fbe:	4b92      	ldr	r3, [pc, #584]	@ (8005208 <main+0x2e0>)
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	611a      	str	r2, [r3, #16]

  	PID_FAC_Yaw[0] = p_yawfactor;
 8004fc6:	4b93      	ldr	r3, [pc, #588]	@ (8005214 <main+0x2ec>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a93      	ldr	r2, [pc, #588]	@ (8005218 <main+0x2f0>)
 8004fcc:	6013      	str	r3, [r2, #0]
  	PID_FAC_Yaw[1] = i_yawfactor;
 8004fce:	4b93      	ldr	r3, [pc, #588]	@ (800521c <main+0x2f4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a91      	ldr	r2, [pc, #580]	@ (8005218 <main+0x2f0>)
 8004fd4:	6053      	str	r3, [r2, #4]
  	PID_FAC_Yaw[2] = d_yawfactor;
 8004fd6:	4b92      	ldr	r3, [pc, #584]	@ (8005220 <main+0x2f8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a8f      	ldr	r2, [pc, #572]	@ (8005218 <main+0x2f0>)
 8004fdc:	6093      	str	r3, [r2, #8]
  	PID_FAC_Yaw[4] = 0;
 8004fde:	4b8e      	ldr	r3, [pc, #568]	@ (8005218 <main+0x2f0>)
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	611a      	str	r2, [r3, #16]


  	ax_ang =0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 8004fe6:	4b8f      	ldr	r3, [pc, #572]	@ (8005224 <main+0x2fc>)
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	4b8e      	ldr	r3, [pc, #568]	@ (8005228 <main+0x300>)
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	4b8d      	ldr	r3, [pc, #564]	@ (800522c <main+0x304>)
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	4b8c      	ldr	r3, [pc, #560]	@ (8005230 <main+0x308>)
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	4b8b      	ldr	r3, [pc, #556]	@ (8005234 <main+0x30c>)
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	4b8a      	ldr	r3, [pc, #552]	@ (8005238 <main+0x310>)
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
  	Mag_Z = 0;
 8005016:	4b89      	ldr	r3, [pc, #548]	@ (800523c <main+0x314>)
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
  	TIM_inte_SD = 0, TIM_inte = 0;
 800501e:	4b88      	ldr	r3, [pc, #544]	@ (8005240 <main+0x318>)
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	4b87      	ldr	r3, [pc, #540]	@ (8005244 <main+0x31c>)
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 800502a:	4b87      	ldr	r3, [pc, #540]	@ (8005248 <main+0x320>)
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
  	temp = 0, pres = 0, startpres = 0, ampritude = 0;
 8005030:	4b86      	ldr	r3, [pc, #536]	@ (800524c <main+0x324>)
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	4b85      	ldr	r3, [pc, #532]	@ (8005250 <main+0x328>)
 800503a:	f04f 0200 	mov.w	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	4b84      	ldr	r3, [pc, #528]	@ (8005254 <main+0x32c>)
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	4b83      	ldr	r3, [pc, #524]	@ (8005258 <main+0x330>)
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
  	last_wanted_pitch_rx = 0;
 8005050:	4b82      	ldr	r3, [pc, #520]	@ (800525c <main+0x334>)
 8005052:	f04f 0200 	mov.w	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
  	last_wanted_rool_rx = 0;
 8005058:	4b81      	ldr	r3, [pc, #516]	@ (8005260 <main+0x338>)
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
  	last_wanted_yaw_rx = 0;
 8005060:	4b80      	ldr	r3, [pc, #512]	@ (8005264 <main+0x33c>)
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
  	wanted_thrust = 0;
 8005068:	4b7f      	ldr	r3, [pc, #508]	@ (8005268 <main+0x340>)
 800506a:	2200      	movs	r2, #0
 800506c:	801a      	strh	r2, [r3, #0]
  	thrust_limit = 10000;
 800506e:	4b7f      	ldr	r3, [pc, #508]	@ (800526c <main+0x344>)
 8005070:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005074:	801a      	strh	r2, [r3, #0]


  	FDP_D_Gain_AR = 0;
 8005076:	4b7e      	ldr	r3, [pc, #504]	@ (8005270 <main+0x348>)
 8005078:	2200      	movs	r2, #0
 800507a:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 0;
 800507c:	4b7d      	ldr	r3, [pc, #500]	@ (8005274 <main+0x34c>)
 800507e:	2200      	movs	r2, #0
 8005080:	801a      	strh	r2, [r3, #0]


  	old_error_pitch = 0;// ruznica
 8005082:	4b7d      	ldr	r3, [pc, #500]	@ (8005278 <main+0x350>)
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	601a      	str	r2, [r3, #0]
  	old_error_rool = 0;
 800508a:	4b7c      	ldr	r3, [pc, #496]	@ (800527c <main+0x354>)
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
  	old_error_yaw = 0;
 8005092:	4b7b      	ldr	r3, [pc, #492]	@ (8005280 <main+0x358>)
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_pitch = 0;// ruznica
 800509a:	4b7a      	ldr	r3, [pc, #488]	@ (8005284 <main+0x35c>)
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_rool = 0;
 80050a2:	4b79      	ldr	r3, [pc, #484]	@ (8005288 <main+0x360>)
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_yaw = 0;
 80050aa:	4b78      	ldr	r3, [pc, #480]	@ (800528c <main+0x364>)
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
  	error_sum_pitch = 0;
 80050b2:	4b77      	ldr	r3, [pc, #476]	@ (8005290 <main+0x368>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
  	error_sum_rool = 0;
 80050b8:	4b76      	ldr	r3, [pc, #472]	@ (8005294 <main+0x36c>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
  	error_sum_yaw = 0;
 80050be:	4b76      	ldr	r3, [pc, #472]	@ (8005298 <main+0x370>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_pitch = 0;
 80050c4:	4b75      	ldr	r3, [pc, #468]	@ (800529c <main+0x374>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_rool = 0;
 80050ca:	4b75      	ldr	r3, [pc, #468]	@ (80052a0 <main+0x378>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_yaw = 0;
 80050d0:	4b74      	ldr	r3, [pc, #464]	@ (80052a4 <main+0x37c>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
  	SPEED1 = min_speed;
 80050d6:	4b74      	ldr	r3, [pc, #464]	@ (80052a8 <main+0x380>)
 80050d8:	f642 1204 	movw	r2, #10500	@ 0x2904
 80050dc:	801a      	strh	r2, [r3, #0]
  	SPEED2 = min_speed;
 80050de:	4b73      	ldr	r3, [pc, #460]	@ (80052ac <main+0x384>)
 80050e0:	f642 1204 	movw	r2, #10500	@ 0x2904
 80050e4:	801a      	strh	r2, [r3, #0]
  	SPEED3 = min_speed;
 80050e6:	4b72      	ldr	r3, [pc, #456]	@ (80052b0 <main+0x388>)
 80050e8:	f642 1204 	movw	r2, #10500	@ 0x2904
 80050ec:	801a      	strh	r2, [r3, #0]
  	SPEED4 = min_speed;
 80050ee:	4b71      	ldr	r3, [pc, #452]	@ (80052b4 <main+0x38c>)
 80050f0:	f642 1204 	movw	r2, #10500	@ 0x2904
 80050f4:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED1 = min_speed;
 80050f6:	4b70      	ldr	r3, [pc, #448]	@ (80052b8 <main+0x390>)
 80050f8:	f642 1204 	movw	r2, #10500	@ 0x2904
 80050fc:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED2 = min_speed;
 80050fe:	4b6f      	ldr	r3, [pc, #444]	@ (80052bc <main+0x394>)
 8005100:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005104:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED3 = min_speed;
 8005106:	4b6e      	ldr	r3, [pc, #440]	@ (80052c0 <main+0x398>)
 8005108:	f642 1204 	movw	r2, #10500	@ 0x2904
 800510c:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED4 = min_speed;
 800510e:	4b6d      	ldr	r3, [pc, #436]	@ (80052c4 <main+0x39c>)
 8005110:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005114:	801a      	strh	r2, [r3, #0]
  	commandready = 0;
 8005116:	4b6c      	ldr	r3, [pc, #432]	@ (80052c8 <main+0x3a0>)
 8005118:	2200      	movs	r2, #0
 800511a:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 800511c:	4b6b      	ldr	r3, [pc, #428]	@ (80052cc <main+0x3a4>)
 800511e:	2200      	movs	r2, #0
 8005120:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 8005122:	4b6b      	ldr	r3, [pc, #428]	@ (80052d0 <main+0x3a8>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 8005128:	4b6a      	ldr	r3, [pc, #424]	@ (80052d4 <main+0x3ac>)
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 800512e:	4b6a      	ldr	r3, [pc, #424]	@ (80052d8 <main+0x3b0>)
 8005130:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005134:	601a      	str	r2, [r3, #0]
  	MPU6050_IRQ = 0, HMC583L_IRQ = 0, BMP180_IRQ = 0;
 8005136:	4b69      	ldr	r3, [pc, #420]	@ (80052dc <main+0x3b4>)
 8005138:	2200      	movs	r2, #0
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	4b68      	ldr	r3, [pc, #416]	@ (80052e0 <main+0x3b8>)
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	4b68      	ldr	r3, [pc, #416]	@ (80052e4 <main+0x3bc>)
 8005144:	2200      	movs	r2, #0
 8005146:	701a      	strb	r2, [r3, #0]
  	i = 0, loopnum = 0;
 8005148:	4b67      	ldr	r3, [pc, #412]	@ (80052e8 <main+0x3c0>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	4b67      	ldr	r3, [pc, #412]	@ (80052ec <main+0x3c4>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]

  	thrust_values = 0;
 8005154:	4966      	ldr	r1, [pc, #408]	@ (80052f0 <main+0x3c8>)
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	e9c1 2300 	strd	r2, r3, [r1]

	  p_angular_rate_pitchfactor = 10;
 8005162:	4b64      	ldr	r3, [pc, #400]	@ (80052f4 <main+0x3cc>)
 8005164:	4a64      	ldr	r2, [pc, #400]	@ (80052f8 <main+0x3d0>)
 8005166:	601a      	str	r2, [r3, #0]
	  p_angular_rate_roolfactor = 10;
 8005168:	4b64      	ldr	r3, [pc, #400]	@ (80052fc <main+0x3d4>)
 800516a:	4a63      	ldr	r2, [pc, #396]	@ (80052f8 <main+0x3d0>)
 800516c:	601a      	str	r2, [r3, #0]
	  p_angular_rate_yawfactor = 10;
 800516e:	4b64      	ldr	r3, [pc, #400]	@ (8005300 <main+0x3d8>)
 8005170:	4a61      	ldr	r2, [pc, #388]	@ (80052f8 <main+0x3d0>)
 8005172:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_angular_rate_pitchfactor = 0;
 8005174:	4b63      	ldr	r3, [pc, #396]	@ (8005304 <main+0x3dc>)
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
	  i_angular_rate_roolfactor = 0;
 800517c:	4b62      	ldr	r3, [pc, #392]	@ (8005308 <main+0x3e0>)
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
	  i_angular_rate_yawfactor = 0;
 8005184:	4b61      	ldr	r3, [pc, #388]	@ (800530c <main+0x3e4>)
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_angular_rate_pitchfactor = 30;
 800518c:	4b60      	ldr	r3, [pc, #384]	@ (8005310 <main+0x3e8>)
 800518e:	4a61      	ldr	r2, [pc, #388]	@ (8005314 <main+0x3ec>)
 8005190:	601a      	str	r2, [r3, #0]
	  d_angular_rate_roolfactor = 20;
 8005192:	4b61      	ldr	r3, [pc, #388]	@ (8005318 <main+0x3f0>)
 8005194:	4a61      	ldr	r2, [pc, #388]	@ (800531c <main+0x3f4>)
 8005196:	601a      	str	r2, [r3, #0]
	  d_angular_rate_yawfactor = 5;
 8005198:	4b61      	ldr	r3, [pc, #388]	@ (8005320 <main+0x3f8>)
 800519a:	4a62      	ldr	r2, [pc, #392]	@ (8005324 <main+0x3fc>)
 800519c:	601a      	str	r2, [r3, #0]

	  p_pitchfactor = 6.5;//*1.5 6
 800519e:	4b15      	ldr	r3, [pc, #84]	@ (80051f4 <main+0x2cc>)
 80051a0:	4a61      	ldr	r2, [pc, #388]	@ (8005328 <main+0x400>)
 80051a2:	601a      	str	r2, [r3, #0]
	  p_roolfactor = 4.5;//5
 80051a4:	4b17      	ldr	r3, [pc, #92]	@ (8005204 <main+0x2dc>)
 80051a6:	4a61      	ldr	r2, [pc, #388]	@ (800532c <main+0x404>)
 80051a8:	601a      	str	r2, [r3, #0]
	  p_yawfactor = 3;
 80051aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005214 <main+0x2ec>)
 80051ac:	4a60      	ldr	r2, [pc, #384]	@ (8005330 <main+0x408>)
 80051ae:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_pitchfactor = 8;//8
 80051b0:	4b12      	ldr	r3, [pc, #72]	@ (80051fc <main+0x2d4>)
 80051b2:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80051b6:	601a      	str	r2, [r3, #0]
	  i_roolfactor = 10;//10
 80051b8:	4b14      	ldr	r3, [pc, #80]	@ (800520c <main+0x2e4>)
 80051ba:	4a4f      	ldr	r2, [pc, #316]	@ (80052f8 <main+0x3d0>)
 80051bc:	601a      	str	r2, [r3, #0]
	  i_yawfactor = 0;
 80051be:	4b17      	ldr	r3, [pc, #92]	@ (800521c <main+0x2f4>)
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_pitchfactor = 25;//25
 80051c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005200 <main+0x2d8>)
 80051c8:	4a5a      	ldr	r2, [pc, #360]	@ (8005334 <main+0x40c>)
 80051ca:	601a      	str	r2, [r3, #0]
	  d_roolfactor = 0;
 80051cc:	4b10      	ldr	r3, [pc, #64]	@ (8005210 <main+0x2e8>)
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]
	  d_yawfactor = 0;
 80051d4:	4b12      	ldr	r3, [pc, #72]	@ (8005220 <main+0x2f8>)
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	601a      	str	r2, [r3, #0]




  	  PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 80051dc:	4b45      	ldr	r3, [pc, #276]	@ (80052f4 <main+0x3cc>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a55      	ldr	r2, [pc, #340]	@ (8005338 <main+0x410>)
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	e0aa      	b.n	800533c <main+0x414>
 80051e6:	bf00      	nop
 80051e8:	58021800 	.word	0x58021800
 80051ec:	00000074 	.word	0x00000074
 80051f0:	000041b4 	.word	0x000041b4
 80051f4:	000040e4 	.word	0x000040e4
 80051f8:	00004108 	.word	0x00004108
 80051fc:	000040f0 	.word	0x000040f0
 8005200:	000040fc 	.word	0x000040fc
 8005204:	000040e8 	.word	0x000040e8
 8005208:	0000411c 	.word	0x0000411c
 800520c:	000040f4 	.word	0x000040f4
 8005210:	00004100 	.word	0x00004100
 8005214:	000040ec 	.word	0x000040ec
 8005218:	00004130 	.word	0x00004130
 800521c:	000040f8 	.word	0x000040f8
 8005220:	00004104 	.word	0x00004104
 8005224:	00000018 	.word	0x00000018
 8005228:	0000001c 	.word	0x0000001c
 800522c:	00000020 	.word	0x00000020
 8005230:	00000024 	.word	0x00000024
 8005234:	00000028 	.word	0x00000028
 8005238:	0000002c 	.word	0x0000002c
 800523c:	00000058 	.word	0x00000058
 8005240:	0000006c 	.word	0x0000006c
 8005244:	00000070 	.word	0x00000070
 8005248:	00000078 	.word	0x00000078
 800524c:	000000dc 	.word	0x000000dc
 8005250:	000000e0 	.word	0x000000e0
 8005254:	000000e4 	.word	0x000000e4
 8005258:	000000e8 	.word	0x000000e8
 800525c:	00004050 	.word	0x00004050
 8005260:	00004054 	.word	0x00004054
 8005264:	00004058 	.word	0x00004058
 8005268:	0000405c 	.word	0x0000405c
 800526c:	0000405e 	.word	0x0000405e
 8005270:	00004074 	.word	0x00004074
 8005274:	00004076 	.word	0x00004076
 8005278:	0000409c 	.word	0x0000409c
 800527c:	000040a0 	.word	0x000040a0
 8005280:	000040a4 	.word	0x000040a4
 8005284:	000040a8 	.word	0x000040a8
 8005288:	000040ac 	.word	0x000040ac
 800528c:	000040b0 	.word	0x000040b0
 8005290:	000040b4 	.word	0x000040b4
 8005294:	000040b8 	.word	0x000040b8
 8005298:	000040bc 	.word	0x000040bc
 800529c:	000040c0 	.word	0x000040c0
 80052a0:	000040c4 	.word	0x000040c4
 80052a4:	000040c8 	.word	0x000040c8
 80052a8:	000041a4 	.word	0x000041a4
 80052ac:	000041a6 	.word	0x000041a6
 80052b0:	000041a8 	.word	0x000041a8
 80052b4:	000041aa 	.word	0x000041aa
 80052b8:	000041ac 	.word	0x000041ac
 80052bc:	000041ae 	.word	0x000041ae
 80052c0:	000041b0 	.word	0x000041b0
 80052c4:	000041b2 	.word	0x000041b2
 80052c8:	000041d6 	.word	0x000041d6
 80052cc:	000041d7 	.word	0x000041d7
 80052d0:	000041dc 	.word	0x000041dc
 80052d4:	000041e0 	.word	0x000041e0
 80052d8:	000041e8 	.word	0x000041e8
 80052dc:	000041ec 	.word	0x000041ec
 80052e0:	000041ed 	.word	0x000041ed
 80052e4:	000041ee 	.word	0x000041ee
 80052e8:	000041f0 	.word	0x000041f0
 80052ec:	000041f4 	.word	0x000041f4
 80052f0:	00004060 	.word	0x00004060
 80052f4:	00004144 	.word	0x00004144
 80052f8:	41200000 	.word	0x41200000
 80052fc:	00004148 	.word	0x00004148
 8005300:	0000414c 	.word	0x0000414c
 8005304:	00004150 	.word	0x00004150
 8005308:	00004154 	.word	0x00004154
 800530c:	00004158 	.word	0x00004158
 8005310:	0000415c 	.word	0x0000415c
 8005314:	41f00000 	.word	0x41f00000
 8005318:	00004160 	.word	0x00004160
 800531c:	41a00000 	.word	0x41a00000
 8005320:	00004164 	.word	0x00004164
 8005324:	40a00000 	.word	0x40a00000
 8005328:	40d00000 	.word	0x40d00000
 800532c:	40900000 	.word	0x40900000
 8005330:	40400000 	.word	0x40400000
 8005334:	41c80000 	.word	0x41c80000
 8005338:	00004168 	.word	0x00004168
  	  PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 800533c:	4ba6      	ldr	r3, [pc, #664]	@ (80055d8 <main+0x6b0>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4aa6      	ldr	r2, [pc, #664]	@ (80055dc <main+0x6b4>)
 8005342:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005344:	4ba6      	ldr	r3, [pc, #664]	@ (80055e0 <main+0x6b8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4aa4      	ldr	r2, [pc, #656]	@ (80055dc <main+0x6b4>)
 800534a:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;//
 800534c:	4ba5      	ldr	r3, [pc, #660]	@ (80055e4 <main+0x6bc>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4aa5      	ldr	r2, [pc, #660]	@ (80055e8 <main+0x6c0>)
 8005352:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005354:	4ba5      	ldr	r3, [pc, #660]	@ (80055ec <main+0x6c4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4aa3      	ldr	r2, [pc, #652]	@ (80055e8 <main+0x6c0>)
 800535a:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 800535c:	4ba4      	ldr	r3, [pc, #656]	@ (80055f0 <main+0x6c8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4aa1      	ldr	r2, [pc, #644]	@ (80055e8 <main+0x6c0>)
 8005362:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;//
 8005364:	4ba3      	ldr	r3, [pc, #652]	@ (80055f4 <main+0x6cc>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4aa3      	ldr	r2, [pc, #652]	@ (80055f8 <main+0x6d0>)
 800536a:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 800536c:	4ba3      	ldr	r3, [pc, #652]	@ (80055fc <main+0x6d4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4aa1      	ldr	r2, [pc, #644]	@ (80055f8 <main+0x6d0>)
 8005372:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 8005374:	4ba2      	ldr	r3, [pc, #648]	@ (8005600 <main+0x6d8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a9f      	ldr	r2, [pc, #636]	@ (80055f8 <main+0x6d0>)
 800537a:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Pitch[0] = p_pitchfactor;
 800537c:	4ba1      	ldr	r3, [pc, #644]	@ (8005604 <main+0x6dc>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4aa1      	ldr	r2, [pc, #644]	@ (8005608 <main+0x6e0>)
 8005382:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Pitch[1] = i_pitchfactor;
 8005384:	4ba1      	ldr	r3, [pc, #644]	@ (800560c <main+0x6e4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a9f      	ldr	r2, [pc, #636]	@ (8005608 <main+0x6e0>)
 800538a:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Pitch[2] = d_pitchfactor;
 800538c:	4ba0      	ldr	r3, [pc, #640]	@ (8005610 <main+0x6e8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a9d      	ldr	r2, [pc, #628]	@ (8005608 <main+0x6e0>)
 8005392:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Rool[0] = p_roolfactor;//
 8005394:	4b9f      	ldr	r3, [pc, #636]	@ (8005614 <main+0x6ec>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a9f      	ldr	r2, [pc, #636]	@ (8005618 <main+0x6f0>)
 800539a:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Rool[1] = i_roolfactor;
 800539c:	4b9f      	ldr	r3, [pc, #636]	@ (800561c <main+0x6f4>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a9d      	ldr	r2, [pc, #628]	@ (8005618 <main+0x6f0>)
 80053a2:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Rool[2] = d_roolfactor;
 80053a4:	4b9e      	ldr	r3, [pc, #632]	@ (8005620 <main+0x6f8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a9b      	ldr	r2, [pc, #620]	@ (8005618 <main+0x6f0>)
 80053aa:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Yaw[0] = p_yawfactor;//
 80053ac:	4b9d      	ldr	r3, [pc, #628]	@ (8005624 <main+0x6fc>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a9d      	ldr	r2, [pc, #628]	@ (8005628 <main+0x700>)
 80053b2:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Yaw[1] = i_yawfactor;
 80053b4:	4b9d      	ldr	r3, [pc, #628]	@ (800562c <main+0x704>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a9b      	ldr	r2, [pc, #620]	@ (8005628 <main+0x700>)
 80053ba:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Yaw[2] = d_yawfactor;
 80053bc:	4b9c      	ldr	r3, [pc, #624]	@ (8005630 <main+0x708>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a99      	ldr	r2, [pc, #612]	@ (8005628 <main+0x700>)
 80053c2:	6093      	str	r3, [r2, #8]

  	wanted_pitch_rx = 0;// chcainy stan
 80053c4:	4b9b      	ldr	r3, [pc, #620]	@ (8005634 <main+0x70c>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	801a      	strh	r2, [r3, #0]
  	wanted_rool_rx = 0;
 80053ca:	4b9b      	ldr	r3, [pc, #620]	@ (8005638 <main+0x710>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	801a      	strh	r2, [r3, #0]
  	wanted_yaw_rx = 0;
 80053d0:	4b9a      	ldr	r3, [pc, #616]	@ (800563c <main+0x714>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	801a      	strh	r2, [r3, #0]
  	wanted_gz = 0 ;
 80053d6:	4b9a      	ldr	r3, [pc, #616]	@ (8005640 <main+0x718>)
 80053d8:	2200      	movs	r2, #0
 80053da:	801a      	strh	r2, [r3, #0]


  	data.ox = 0;
 80053dc:	4b99      	ldr	r3, [pc, #612]	@ (8005644 <main+0x71c>)
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 80053e4:	4b97      	ldr	r3, [pc, #604]	@ (8005644 <main+0x71c>)
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 80053ec:	4b95      	ldr	r3, [pc, #596]	@ (8005644 <main+0x71c>)
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 80053f4:	4b93      	ldr	r3, [pc, #588]	@ (8005644 <main+0x71c>)
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 80053fc:	4b91      	ldr	r3, [pc, #580]	@ (8005644 <main+0x71c>)
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 8005404:	4b8f      	ldr	r3, [pc, #572]	@ (8005644 <main+0x71c>)
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	609a      	str	r2, [r3, #8]


  	pid_pitch = 0;
 800540c:	4b8e      	ldr	r3, [pc, #568]	@ (8005648 <main+0x720>)
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
  	pid_yaw = 0;
 8005414:	4b8d      	ldr	r3, [pc, #564]	@ (800564c <main+0x724>)
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
  	pid_rool = 0;
 800541c:	4b8c      	ldr	r3, [pc, #560]	@ (8005650 <main+0x728>)
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	601a      	str	r2, [r3, #0]

  	pid_angular_rate_pitch = 0;
 8005424:	4b8b      	ldr	r3, [pc, #556]	@ (8005654 <main+0x72c>)
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_yaw = 0;
 800542c:	4b8a      	ldr	r3, [pc, #552]	@ (8005658 <main+0x730>)
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_rool = 0;
 8005434:	4b89      	ldr	r3, [pc, #548]	@ (800565c <main+0x734>)
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

  	MYDRON.PITCH_STA = 0;
 800543c:	4b88      	ldr	r3, [pc, #544]	@ (8005660 <main+0x738>)
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	MYDRON.ROOL_STA = 0;
 8005444:	4b86      	ldr	r3, [pc, #536]	@ (8005660 <main+0x738>)
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  	MYDRON.YAW_STA = 0;
 800544c:	4b84      	ldr	r3, [pc, #528]	@ (8005660 <main+0x738>)
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  	ax = 0,ay = 0,az = 0, gx = 0, gy = 0, gz = 0;
 8005454:	4b83      	ldr	r3, [pc, #524]	@ (8005664 <main+0x73c>)
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	4b82      	ldr	r3, [pc, #520]	@ (8005668 <main+0x740>)
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	4b81      	ldr	r3, [pc, #516]	@ (800566c <main+0x744>)
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	4b80      	ldr	r3, [pc, #512]	@ (8005670 <main+0x748>)
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	4b7f      	ldr	r3, [pc, #508]	@ (8005674 <main+0x74c>)
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	4b7e      	ldr	r3, [pc, #504]	@ (8005678 <main+0x750>)
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
  	ax_ang = 0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 8005484:	4b7d      	ldr	r3, [pc, #500]	@ (800567c <main+0x754>)
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	4b7c      	ldr	r3, [pc, #496]	@ (8005680 <main+0x758>)
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	4b7b      	ldr	r3, [pc, #492]	@ (8005684 <main+0x75c>)
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	4b7a      	ldr	r3, [pc, #488]	@ (8005688 <main+0x760>)
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	4b79      	ldr	r3, [pc, #484]	@ (800568c <main+0x764>)
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	4b78      	ldr	r3, [pc, #480]	@ (8005690 <main+0x768>)
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]
  	accelx_cal = 0, accely_cal = 0, accelz_cal = 0, gyrox_cal = 0, gyroy_cal = 0, gyroz_cal = 0;
 80054b4:	4b77      	ldr	r3, [pc, #476]	@ (8005694 <main+0x76c>)
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	4b76      	ldr	r3, [pc, #472]	@ (8005698 <main+0x770>)
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	4b75      	ldr	r3, [pc, #468]	@ (800569c <main+0x774>)
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	4b74      	ldr	r3, [pc, #464]	@ (80056a0 <main+0x778>)
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	4b73      	ldr	r3, [pc, #460]	@ (80056a4 <main+0x77c>)
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	4b72      	ldr	r3, [pc, #456]	@ (80056a8 <main+0x780>)
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]

  	nRF24_Rx_Mode = 0;
 80054e4:	4b71      	ldr	r3, [pc, #452]	@ (80056ac <main+0x784>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]

  	now_pitch = 0;
 80054ea:	4b71      	ldr	r3, [pc, #452]	@ (80056b0 <main+0x788>)
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
  	now_rool = 0;
 80054f2:	4b70      	ldr	r3, [pc, #448]	@ (80056b4 <main+0x78c>)
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]
  	now_yaw = 0;
 80054fa:	4b6f      	ldr	r3, [pc, #444]	@ (80056b8 <main+0x790>)
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
  	wanted_pitch = 0;
 8005502:	4b6e      	ldr	r3, [pc, #440]	@ (80056bc <main+0x794>)
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	601a      	str	r2, [r3, #0]

  	pitch_error = 0;
 800550a:	4b6d      	ldr	r3, [pc, #436]	@ (80056c0 <main+0x798>)
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	601a      	str	r2, [r3, #0]
  	rool_error = 0;
 8005512:	4b6c      	ldr	r3, [pc, #432]	@ (80056c4 <main+0x79c>)
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
  	yaw_error = 0;
 800551a:	4b6b      	ldr	r3, [pc, #428]	@ (80056c8 <main+0x7a0>)
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
  	pitch_ar_error = 0;
 8005522:	4b6a      	ldr	r3, [pc, #424]	@ (80056cc <main+0x7a4>)
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
  	rool_ar_error = 0;
 800552a:	4b69      	ldr	r3, [pc, #420]	@ (80056d0 <main+0x7a8>)
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	601a      	str	r2, [r3, #0]
  	yaw_ar_error = 0;
 8005532:	4b68      	ldr	r3, [pc, #416]	@ (80056d4 <main+0x7ac>)
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	601a      	str	r2, [r3, #0]


  	uint8_t o[3] = "Odb";
 800553a:	4a67      	ldr	r2, [pc, #412]	@ (80056d8 <main+0x7b0>)
 800553c:	f107 0308 	add.w	r3, r7, #8
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	4611      	mov	r1, r2
 8005544:	8019      	strh	r1, [r3, #0]
 8005546:	3302      	adds	r3, #2
 8005548:	0c12      	lsrs	r2, r2, #16
 800554a:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 800554c:	4a63      	ldr	r2, [pc, #396]	@ (80056dc <main+0x7b4>)
 800554e:	1d3b      	adds	r3, r7, #4
 8005550:	6812      	ldr	r2, [r2, #0]
 8005552:	4611      	mov	r1, r2
 8005554:	8019      	strh	r1, [r3, #0]
 8005556:	3302      	adds	r3, #2
 8005558:	0c12      	lsrs	r2, r2, #16
 800555a:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 800555c:	2201      	movs	r2, #1
 800555e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005562:	485f      	ldr	r0, [pc, #380]	@ (80056e0 <main+0x7b8>)
 8005564:	f009 f912 	bl	800e78c <HAL_GPIO_WritePin>
  	LED_6_1;
 8005568:	2201      	movs	r2, #1
 800556a:	2108      	movs	r1, #8
 800556c:	485d      	ldr	r0, [pc, #372]	@ (80056e4 <main+0x7bc>)
 800556e:	f009 f90d 	bl	800e78c <HAL_GPIO_WritePin>
  	LED_7_1;
 8005572:	2201      	movs	r2, #1
 8005574:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005578:	4859      	ldr	r0, [pc, #356]	@ (80056e0 <main+0x7b8>)
 800557a:	f009 f907 	bl	800e78c <HAL_GPIO_WritePin>
  	LED_uSD_1;
 800557e:	2201      	movs	r2, #1
 8005580:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005584:	4858      	ldr	r0, [pc, #352]	@ (80056e8 <main+0x7c0>)
 8005586:	f009 f901 	bl	800e78c <HAL_GPIO_WritePin>
  	LED_G_1;
 800558a:	2201      	movs	r2, #1
 800558c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005590:	4854      	ldr	r0, [pc, #336]	@ (80056e4 <main+0x7bc>)
 8005592:	f009 f8fb 	bl	800e78c <HAL_GPIO_WritePin>
  	LED_Y_1;
 8005596:	2201      	movs	r2, #1
 8005598:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800559c:	4853      	ldr	r0, [pc, #332]	@ (80056ec <main+0x7c4>)
 800559e:	f009 f8f5 	bl	800e78c <HAL_GPIO_WritePin>
  	LED_R_1;
 80055a2:	2201      	movs	r2, #1
 80055a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055a8:	4850      	ldr	r0, [pc, #320]	@ (80056ec <main+0x7c4>)
 80055aa:	f009 f8ef 	bl	800e78c <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 80055ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80055b2:	f003 ffaf 	bl	8009514 <HAL_Delay>
  	LED_G_0;
 80055b6:	2200      	movs	r2, #0
 80055b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055bc:	4849      	ldr	r0, [pc, #292]	@ (80056e4 <main+0x7bc>)
 80055be:	f009 f8e5 	bl	800e78c <HAL_GPIO_WritePin>
  	LED_Y_0;
 80055c2:	2200      	movs	r2, #0
 80055c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80055c8:	4848      	ldr	r0, [pc, #288]	@ (80056ec <main+0x7c4>)
 80055ca:	f009 f8df 	bl	800e78c <HAL_GPIO_WritePin>
  	LED_R_0;
 80055ce:	2200      	movs	r2, #0
 80055d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055d4:	e08c      	b.n	80056f0 <main+0x7c8>
 80055d6:	bf00      	nop
 80055d8:	00004150 	.word	0x00004150
 80055dc:	00004168 	.word	0x00004168
 80055e0:	0000415c 	.word	0x0000415c
 80055e4:	00004148 	.word	0x00004148
 80055e8:	0000417c 	.word	0x0000417c
 80055ec:	00004154 	.word	0x00004154
 80055f0:	00004160 	.word	0x00004160
 80055f4:	0000414c 	.word	0x0000414c
 80055f8:	00004190 	.word	0x00004190
 80055fc:	00004158 	.word	0x00004158
 8005600:	00004164 	.word	0x00004164
 8005604:	000040e4 	.word	0x000040e4
 8005608:	00004108 	.word	0x00004108
 800560c:	000040f0 	.word	0x000040f0
 8005610:	000040fc 	.word	0x000040fc
 8005614:	000040e8 	.word	0x000040e8
 8005618:	0000411c 	.word	0x0000411c
 800561c:	000040f4 	.word	0x000040f4
 8005620:	00004100 	.word	0x00004100
 8005624:	000040ec 	.word	0x000040ec
 8005628:	00004130 	.word	0x00004130
 800562c:	000040f8 	.word	0x000040f8
 8005630:	00004104 	.word	0x00004104
 8005634:	00004048 	.word	0x00004048
 8005638:	0000404a 	.word	0x0000404a
 800563c:	0000404c 	.word	0x0000404c
 8005640:	0000404e 	.word	0x0000404e
 8005644:	0000007c 	.word	0x0000007c
 8005648:	000040cc 	.word	0x000040cc
 800564c:	000040d0 	.word	0x000040d0
 8005650:	000040d4 	.word	0x000040d4
 8005654:	000040d8 	.word	0x000040d8
 8005658:	000040dc 	.word	0x000040dc
 800565c:	000040e0 	.word	0x000040e0
 8005660:	00000178 	.word	0x00000178
 8005664:	00000000 	.word	0x00000000
 8005668:	00000004 	.word	0x00000004
 800566c:	00000008 	.word	0x00000008
 8005670:	0000000c 	.word	0x0000000c
 8005674:	00000010 	.word	0x00000010
 8005678:	00000014 	.word	0x00000014
 800567c:	00000018 	.word	0x00000018
 8005680:	0000001c 	.word	0x0000001c
 8005684:	00000020 	.word	0x00000020
 8005688:	00000024 	.word	0x00000024
 800568c:	00000028 	.word	0x00000028
 8005690:	0000002c 	.word	0x0000002c
 8005694:	00000030 	.word	0x00000030
 8005698:	00000034 	.word	0x00000034
 800569c:	00000038 	.word	0x00000038
 80056a0:	0000003c 	.word	0x0000003c
 80056a4:	00000040 	.word	0x00000040
 80056a8:	00000044 	.word	0x00000044
 80056ac:	00000174 	.word	0x00000174
 80056b0:	00004078 	.word	0x00004078
 80056b4:	0000407c 	.word	0x0000407c
 80056b8:	00004080 	.word	0x00004080
 80056bc:	00004068 	.word	0x00004068
 80056c0:	00004084 	.word	0x00004084
 80056c4:	00004088 	.word	0x00004088
 80056c8:	0000408c 	.word	0x0000408c
 80056cc:	00004090 	.word	0x00004090
 80056d0:	00004094 	.word	0x00004094
 80056d4:	00004098 	.word	0x00004098
 80056d8:	0801e984 	.word	0x0801e984
 80056dc:	0801e988 	.word	0x0801e988
 80056e0:	58020000 	.word	0x58020000
 80056e4:	58021000 	.word	0x58021000
 80056e8:	58020c00 	.word	0x58020c00
 80056ec:	58020400 	.word	0x58020400
 80056f0:	48aa      	ldr	r0, [pc, #680]	@ (800599c <main+0xa74>)
 80056f2:	f009 f84b 	bl	800e78c <HAL_GPIO_WritePin>
  	LED_5_0;
 80056f6:	2200      	movs	r2, #0
 80056f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056fc:	48a8      	ldr	r0, [pc, #672]	@ (80059a0 <main+0xa78>)
 80056fe:	f009 f845 	bl	800e78c <HAL_GPIO_WritePin>
  	LED_6_0;
 8005702:	2200      	movs	r2, #0
 8005704:	2108      	movs	r1, #8
 8005706:	48a7      	ldr	r0, [pc, #668]	@ (80059a4 <main+0xa7c>)
 8005708:	f009 f840 	bl	800e78c <HAL_GPIO_WritePin>
  	LED_7_0;
 800570c:	2200      	movs	r2, #0
 800570e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005712:	48a3      	ldr	r0, [pc, #652]	@ (80059a0 <main+0xa78>)
 8005714:	f009 f83a 	bl	800e78c <HAL_GPIO_WritePin>
  	LED_uSD_0;
 8005718:	2200      	movs	r2, #0
 800571a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800571e:	48a2      	ldr	r0, [pc, #648]	@ (80059a8 <main+0xa80>)
 8005720:	f009 f834 	bl	800e78c <HAL_GPIO_WritePin>


  	for(int i = 0; i < 4000; i++){
 8005724:	2300      	movs	r3, #0
 8005726:	61fb      	str	r3, [r7, #28]
 8005728:	e009      	b.n	800573e <main+0x816>
  		Old_Data_stack.olddata[i] = 0;
 800572a:	4aa0      	ldr	r2, [pc, #640]	@ (80059ac <main+0xa84>)
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	3301      	adds	r3, #1
 800573c:	61fb      	str	r3, [r7, #28]
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8005744:	dbf1      	blt.n	800572a <main+0x802>
  	}
  	Old_Data_stack.start_pointer = 0;
 8005746:	4b99      	ldr	r3, [pc, #612]	@ (80059ac <main+0xa84>)
 8005748:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800574c:	2200      	movs	r2, #0
 800574e:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 8005752:	4b96      	ldr	r3, [pc, #600]	@ (80059ac <main+0xa84>)
 8005754:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8005758:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800575c:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 8005760:	4b93      	ldr	r3, [pc, #588]	@ (80059b0 <main+0xa88>)
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 8005766:	4893      	ldr	r0, [pc, #588]	@ (80059b4 <main+0xa8c>)
 8005768:	f010 fe00 	bl	801636c <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);
 800576c:	2201      	movs	r2, #1
 800576e:	4990      	ldr	r1, [pc, #576]	@ (80059b0 <main+0xa88>)
 8005770:	4891      	ldr	r0, [pc, #580]	@ (80059b8 <main+0xa90>)
 8005772:	f004 fc21 	bl	8009fb8 <HAL_ADC_Start_DMA>
  	LED_R_1;
 8005776:	2201      	movs	r2, #1
 8005778:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800577c:	4887      	ldr	r0, [pc, #540]	@ (800599c <main+0xa74>)
 800577e:	f009 f805 	bl	800e78c <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 8005782:	bf00      	nop
 8005784:	4b8a      	ldr	r3, [pc, #552]	@ (80059b0 <main+0xa88>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0fb      	beq.n	8005784 <main+0x85c>

  	}
  	LED_R_0;
 800578c:	2200      	movs	r2, #0
 800578e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005792:	4882      	ldr	r0, [pc, #520]	@ (800599c <main+0xa74>)
 8005794:	f008 fffa 	bl	800e78c <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 8005798:	f7fe fcbe 	bl	8004118 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 800579c:	2104      	movs	r1, #4
 800579e:	4887      	ldr	r0, [pc, #540]	@ (80059bc <main+0xa94>)
 80057a0:	f010 ff40 	bl	8016624 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80057a4:	2108      	movs	r1, #8
 80057a6:	4885      	ldr	r0, [pc, #532]	@ (80059bc <main+0xa94>)
 80057a8:	f010 ff3c 	bl	8016624 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80057ac:	210c      	movs	r1, #12
 80057ae:	4883      	ldr	r0, [pc, #524]	@ (80059bc <main+0xa94>)
 80057b0:	f010 ff38 	bl	8016624 <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 80057b4:	4b82      	ldr	r3, [pc, #520]	@ (80059c0 <main+0xa98>)
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	4618      	mov	r0, r3
 80057bc:	f001 feb4 	bl	8007528 <RGB_LED_For_BAT>
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 80057c0:	4b7f      	ldr	r3, [pc, #508]	@ (80059c0 <main+0xa98>)
 80057c2:	8a9b      	ldrh	r3, [r3, #20]
 80057c4:	2b07      	cmp	r3, #7
 80057c6:	d107      	bne.n	80057d8 <main+0x8b0>
  	{
  		LED_R_1;
 80057c8:	2201      	movs	r2, #1
 80057ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057ce:	4873      	ldr	r0, [pc, #460]	@ (800599c <main+0xa74>)
 80057d0:	f008 ffdc 	bl	800e78c <HAL_GPIO_WritePin>
  		while(1){
 80057d4:	bf00      	nop
 80057d6:	e7fd      	b.n	80057d4 <main+0x8ac>

  		}
  	}
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 80057d8:	4b79      	ldr	r3, [pc, #484]	@ (80059c0 <main+0xa98>)
 80057da:	8a9b      	ldrh	r3, [r3, #20]
 80057dc:	2b09      	cmp	r3, #9
 80057de:	d107      	bne.n	80057f0 <main+0x8c8>
  		LED_R_1;
 80057e0:	2201      	movs	r2, #1
 80057e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057e6:	486d      	ldr	r0, [pc, #436]	@ (800599c <main+0xa74>)
 80057e8:	f008 ffd0 	bl	800e78c <HAL_GPIO_WritePin>
  		while(1){
 80057ec:	bf00      	nop
 80057ee:	e7fd      	b.n	80057ec <main+0x8c4>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 80057f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80057f4:	4869      	ldr	r0, [pc, #420]	@ (800599c <main+0xa74>)
 80057f6:	f008 ffb1 	bl	800e75c <HAL_GPIO_ReadPin>
 80057fa:	4603      	mov	r3, r0
 80057fc:	461a      	mov	r2, r3
 80057fe:	4b71      	ldr	r3, [pc, #452]	@ (80059c4 <main+0xa9c>)
 8005800:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 8005802:	4b70      	ldr	r3, [pc, #448]	@ (80059c4 <main+0xa9c>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d103      	bne.n	8005812 <main+0x8ea>
		SD_enable_Flag = 0;
 800580a:	4b6e      	ldr	r3, [pc, #440]	@ (80059c4 <main+0xa9c>)
 800580c:	2200      	movs	r2, #0
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	e002      	b.n	8005818 <main+0x8f0>
	}
	else{
		SD_enable_Flag = 1;
 8005812:	4b6c      	ldr	r3, [pc, #432]	@ (80059c4 <main+0xa9c>)
 8005814:	2201      	movs	r2, #1
 8005816:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 8005818:	4b6a      	ldr	r3, [pc, #424]	@ (80059c4 <main+0xa9c>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d15f      	bne.n	80058e0 <main+0x9b8>
		LED_uSD_1;
 8005820:	2201      	movs	r2, #1
 8005822:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005826:	4860      	ldr	r0, [pc, #384]	@ (80059a8 <main+0xa80>)
 8005828:	f008 ffb0 	bl	800e78c <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 800582c:	2201      	movs	r2, #1
 800582e:	4966      	ldr	r1, [pc, #408]	@ (80059c8 <main+0xaa0>)
 8005830:	4866      	ldr	r0, [pc, #408]	@ (80059cc <main+0xaa4>)
 8005832:	f017 fe23 	bl	801d47c <f_mount>
 8005836:	4603      	mov	r3, r0
 8005838:	461a      	mov	r2, r3
 800583a:	4b65      	ldr	r3, [pc, #404]	@ (80059d0 <main+0xaa8>)
 800583c:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 800583e:	4865      	ldr	r0, [pc, #404]	@ (80059d4 <main+0xaac>)
 8005840:	f018 fa66 	bl	801dd10 <f_unlink>
 8005844:	4603      	mov	r3, r0
 8005846:	461a      	mov	r2, r3
 8005848:	4b61      	ldr	r3, [pc, #388]	@ (80059d0 <main+0xaa8>)
 800584a:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 800584c:	2201      	movs	r2, #1
 800584e:	495e      	ldr	r1, [pc, #376]	@ (80059c8 <main+0xaa0>)
 8005850:	485e      	ldr	r0, [pc, #376]	@ (80059cc <main+0xaa4>)
 8005852:	f017 fe13 	bl	801d47c <f_mount>
 8005856:	4603      	mov	r3, r0
 8005858:	461a      	mov	r2, r3
 800585a:	4b5d      	ldr	r3, [pc, #372]	@ (80059d0 <main+0xaa8>)
 800585c:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 800585e:	220a      	movs	r2, #10
 8005860:	495d      	ldr	r1, [pc, #372]	@ (80059d8 <main+0xab0>)
 8005862:	485e      	ldr	r0, [pc, #376]	@ (80059dc <main+0xab4>)
 8005864:	f017 fe50 	bl	801d508 <f_open>
 8005868:	4603      	mov	r3, r0
 800586a:	461a      	mov	r2, r3
 800586c:	4b58      	ldr	r3, [pc, #352]	@ (80059d0 <main+0xaa8>)
 800586e:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 8005870:	2200      	movs	r2, #0
 8005872:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005876:	484c      	ldr	r0, [pc, #304]	@ (80059a8 <main+0xa80>)
 8005878:	f008 ff88 	bl	800e78c <HAL_GPIO_WritePin>

		LED_uSD_1;
 800587c:	2201      	movs	r2, #1
 800587e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005882:	4849      	ldr	r0, [pc, #292]	@ (80059a8 <main+0xa80>)
 8005884:	f008 ff82 	bl	800e78c <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 8005888:	2300      	movs	r3, #0
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	e007      	b.n	800589e <main+0x976>
			DataToSendBuffer[i] = 49;
 800588e:	4a54      	ldr	r2, [pc, #336]	@ (80059e0 <main+0xab8>)
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	4413      	add	r3, r2
 8005894:	2231      	movs	r2, #49	@ 0x31
 8005896:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	3301      	adds	r3, #1
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	4a50      	ldr	r2, [pc, #320]	@ (80059e4 <main+0xabc>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	ddf3      	ble.n	800588e <main+0x966>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 80058a6:	4b50      	ldr	r3, [pc, #320]	@ (80059e8 <main+0xac0>)
 80058a8:	2281      	movs	r2, #129	@ 0x81
 80058aa:	494d      	ldr	r1, [pc, #308]	@ (80059e0 <main+0xab8>)
 80058ac:	484b      	ldr	r0, [pc, #300]	@ (80059dc <main+0xab4>)
 80058ae:	f017 fff3 	bl	801d898 <f_write>
 80058b2:	4603      	mov	r3, r0
 80058b4:	461a      	mov	r2, r3
 80058b6:	4b46      	ldr	r3, [pc, #280]	@ (80059d0 <main+0xaa8>)
 80058b8:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 80058ba:	4848      	ldr	r0, [pc, #288]	@ (80059dc <main+0xab4>)
 80058bc:	f018 f9fe 	bl	801dcbc <f_close>
 80058c0:	4603      	mov	r3, r0
 80058c2:	461a      	mov	r2, r3
 80058c4:	4b42      	ldr	r3, [pc, #264]	@ (80059d0 <main+0xaa8>)
 80058c6:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 80058c8:	4b41      	ldr	r3, [pc, #260]	@ (80059d0 <main+0xaa8>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <main+0x9ac>
			while(1){
 80058d0:	bf00      	nop
 80058d2:	e7fd      	b.n	80058d0 <main+0x9a8>

			}
		}
		LED_uSD_0;
 80058d4:	2200      	movs	r2, #0
 80058d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058da:	4833      	ldr	r0, [pc, #204]	@ (80059a8 <main+0xa80>)
 80058dc:	f008 ff56 	bl	800e78c <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 80058e0:	2201      	movs	r2, #1
 80058e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058e6:	482e      	ldr	r0, [pc, #184]	@ (80059a0 <main+0xa78>)
 80058e8:	f008 ff50 	bl	800e78c <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 80058ec:	483f      	ldr	r0, [pc, #252]	@ (80059ec <main+0xac4>)
 80058ee:	f7fb fc59 	bl	80011a4 <MPU6050_INIT>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d107      	bne.n	8005908 <main+0x9e0>
			LED_R_1;
 80058f8:	2201      	movs	r2, #1
 80058fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058fe:	4827      	ldr	r0, [pc, #156]	@ (800599c <main+0xa74>)
 8005900:	f008 ff44 	bl	800e78c <HAL_GPIO_WritePin>
			while(1){
 8005904:	bf00      	nop
 8005906:	e7fd      	b.n	8005904 <main+0x9dc>
			}
		}
		LED_Y_1;
 8005908:	2201      	movs	r2, #1
 800590a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800590e:	4823      	ldr	r0, [pc, #140]	@ (800599c <main+0xa74>)
 8005910:	f008 ff3c 	bl	800e78c <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION(&accelx_cal, &accely_cal, &accelz_cal, &gyrox_cal, &gyroy_cal, &gyroz_cal, Gyr_Scale, Acc_Scale);
 8005914:	eddf 7a36 	vldr	s15, [pc, #216]	@ 80059f0 <main+0xac8>
 8005918:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80059f4 <main+0xacc>
 800591c:	4b36      	ldr	r3, [pc, #216]	@ (80059f8 <main+0xad0>)
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	4b36      	ldr	r3, [pc, #216]	@ (80059fc <main+0xad4>)
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	eef0 0a47 	vmov.f32	s1, s14
 8005928:	eeb0 0a67 	vmov.f32	s0, s15
 800592c:	4b34      	ldr	r3, [pc, #208]	@ (8005a00 <main+0xad8>)
 800592e:	4a35      	ldr	r2, [pc, #212]	@ (8005a04 <main+0xadc>)
 8005930:	4935      	ldr	r1, [pc, #212]	@ (8005a08 <main+0xae0>)
 8005932:	4836      	ldr	r0, [pc, #216]	@ (8005a0c <main+0xae4>)
 8005934:	f7fb fd00 	bl	8001338 <MPU6050_CALIBRATION>
		LED_Y_0;
 8005938:	2200      	movs	r2, #0
 800593a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800593e:	4817      	ldr	r0, [pc, #92]	@ (800599c <main+0xa74>)
 8005940:	f008 ff24 	bl	800e78c <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 8005944:	4829      	ldr	r0, [pc, #164]	@ (80059ec <main+0xac4>)
 8005946:	f7fa fec3 	bl	80006d0 <BMP180_init>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d107      	bne.n	8005960 <main+0xa38>
			LED_R_1;
 8005950:	2201      	movs	r2, #1
 8005952:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005956:	4811      	ldr	r0, [pc, #68]	@ (800599c <main+0xa74>)
 8005958:	f008 ff18 	bl	800e78c <HAL_GPIO_WritePin>
			while(1){
 800595c:	bf00      	nop
 800595e:	e7fd      	b.n	800595c <main+0xa34>
			}
		}
		LED_Y_1;
 8005960:	2201      	movs	r2, #1
 8005962:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005966:	480d      	ldr	r0, [pc, #52]	@ (800599c <main+0xa74>)
 8005968:	f008 ff10 	bl	800e78c <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&startpres);
 800596c:	4828      	ldr	r0, [pc, #160]	@ (8005a10 <main+0xae8>)
 800596e:	f7fb fa01 	bl	8000d74 <BMP180_CALIBRATION>
		LED_Y_0;
 8005972:	2200      	movs	r2, #0
 8005974:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005978:	4808      	ldr	r0, [pc, #32]	@ (800599c <main+0xa74>)
 800597a:	f008 ff07 	bl	800e78c <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 800597e:	481b      	ldr	r0, [pc, #108]	@ (80059ec <main+0xac4>)
 8005980:	f7fb fb2a 	bl	8000fd8 <HMC5883L_Init>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d144      	bne.n	8005a14 <main+0xaec>
			LED_R_1;
 800598a:	2201      	movs	r2, #1
 800598c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005990:	4802      	ldr	r0, [pc, #8]	@ (800599c <main+0xa74>)
 8005992:	f008 fefb 	bl	800e78c <HAL_GPIO_WritePin>
			while(1){
 8005996:	bf00      	nop
 8005998:	e7fd      	b.n	8005996 <main+0xa6e>
 800599a:	bf00      	nop
 800599c:	58020400 	.word	0x58020400
 80059a0:	58020000 	.word	0x58020000
 80059a4:	58021000 	.word	0x58021000
 80059a8:	58020c00 	.word	0x58020c00
 80059ac:	0000019c 	.word	0x0000019c
 80059b0:	24000eb0 	.word	0x24000eb0
 80059b4:	24000464 	.word	0x24000464
 80059b8:	240000ac 	.word	0x240000ac
 80059bc:	24000380 	.word	0x24000380
 80059c0:	00000178 	.word	0x00000178
 80059c4:	000041e4 	.word	0x000041e4
 80059c8:	0801e968 	.word	0x0801e968
 80059cc:	24000eb4 	.word	0x24000eb4
 80059d0:	24001eec 	.word	0x24001eec
 80059d4:	0801e96c 	.word	0x0801e96c
 80059d8:	0801e978 	.word	0x0801e978
 80059dc:	24001ef0 	.word	0x24001ef0
 80059e0:	24002f28 	.word	0x24002f28
 80059e4:	0001f7e7 	.word	0x0001f7e7
 80059e8:	24002f24 	.word	0x24002f24
 80059ec:	24000198 	.word	0x24000198
 80059f0:	42830000 	.word	0x42830000
 80059f4:	46000000 	.word	0x46000000
 80059f8:	00000044 	.word	0x00000044
 80059fc:	00000040 	.word	0x00000040
 8005a00:	0000003c 	.word	0x0000003c
 8005a04:	00000038 	.word	0x00000038
 8005a08:	00000034 	.word	0x00000034
 8005a0c:	00000030 	.word	0x00000030
 8005a10:	000000e4 	.word	0x000000e4
			}
		}
		LED_Y_1;
 8005a14:	2201      	movs	r2, #1
 8005a16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a1a:	488c      	ldr	r0, [pc, #560]	@ (8005c4c <main+0xd24>)
 8005a1c:	f008 feb6 	bl	800e78c <HAL_GPIO_WritePin>
		Mag_Offset_val = HMC5883L_Calibration();
 8005a20:	f7fb fb8a 	bl	8001138 <HMC5883L_Calibration>
 8005a24:	4603      	mov	r3, r0
 8005a26:	461a      	mov	r2, r3
 8005a28:	4b89      	ldr	r3, [pc, #548]	@ (8005c50 <main+0xd28>)
 8005a2a:	801a      	strh	r2, [r3, #0]
		LED_Y_0;
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a32:	4886      	ldr	r0, [pc, #536]	@ (8005c4c <main+0xd24>)
 8005a34:	f008 feaa 	bl	800e78c <HAL_GPIO_WritePin>

		LED_5_0;
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a3e:	4885      	ldr	r0, [pc, #532]	@ (8005c54 <main+0xd2c>)
 8005a40:	f008 fea4 	bl	800e78c <HAL_GPIO_WritePin>



		MYDRON.dron_status.Connection = DRON_CONNECTED;
 8005a44:	4b84      	ldr	r3, [pc, #528]	@ (8005c58 <main+0xd30>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	825a      	strh	r2, [r3, #18]
		MYDRON.dron_status.position = DRON_POSITION_OK;
 8005a4a:	4b83      	ldr	r3, [pc, #524]	@ (8005c58 <main+0xd30>)
 8005a4c:	220c      	movs	r2, #12
 8005a4e:	835a      	strh	r2, [r3, #26]


		MYDRON.THRUST = 0;
 8005a50:	4b81      	ldr	r3, [pc, #516]	@ (8005c58 <main+0xd30>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	805a      	strh	r2, [r3, #2]
		MYDRON.PITCH = 0;
 8005a56:	4b80      	ldr	r3, [pc, #512]	@ (8005c58 <main+0xd30>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	809a      	strh	r2, [r3, #4]
		MYDRON.ROOL = 0;
 8005a5c:	4b7e      	ldr	r3, [pc, #504]	@ (8005c58 <main+0xd30>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	80da      	strh	r2, [r3, #6]
		MYDRON.YAW = 0;
 8005a62:	4b7d      	ldr	r3, [pc, #500]	@ (8005c58 <main+0xd30>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	811a      	strh	r2, [r3, #8]



	/////////////////////////////// nRF24
		LED_6_1;
 8005a68:	2201      	movs	r2, #1
 8005a6a:	2108      	movs	r1, #8
 8005a6c:	487b      	ldr	r0, [pc, #492]	@ (8005c5c <main+0xd34>)
 8005a6e:	f008 fe8d 	bl	800e78c <HAL_GPIO_WritePin>
		nRF24_Init(&hspi6);
 8005a72:	487b      	ldr	r0, [pc, #492]	@ (8005c60 <main+0xd38>)
 8005a74:	f7fc fdac 	bl	80025d0 <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 8005a78:	f107 0308 	add.w	r3, r7, #8
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	2000      	movs	r0, #0
 8005a80:	f7fc fc4b 	bl	800231a <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 8005a84:	1d3b      	adds	r3, r7, #4
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fc fc80 	bl	800238c <nRF24_SetTXAddress>
		nRF24_Inittest();
 8005a8c:	f7fc fdf4 	bl	8002678 <nRF24_Inittest>
		nRF24_TX_Mode();
 8005a90:	f7fc fa6e 	bl	8001f70 <nRF24_TX_Mode>


		for(int i = 0; i < 32; i++){
 8005a94:	2300      	movs	r3, #0
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e007      	b.n	8005aaa <main+0xb82>
			Txcode[i] = 0;
 8005a9a:	4a72      	ldr	r2, [pc, #456]	@ (8005c64 <main+0xd3c>)
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2b1f      	cmp	r3, #31
 8005aae:	ddf4      	ble.n	8005a9a <main+0xb72>
		}
		Txcode[22] = 'd';
 8005ab0:	4b6c      	ldr	r3, [pc, #432]	@ (8005c64 <main+0xd3c>)
 8005ab2:	2264      	movs	r2, #100	@ 0x64
 8005ab4:	759a      	strb	r2, [r3, #22]
		Txcode[23] = 'r';
 8005ab6:	4b6b      	ldr	r3, [pc, #428]	@ (8005c64 <main+0xd3c>)
 8005ab8:	2272      	movs	r2, #114	@ 0x72
 8005aba:	75da      	strb	r2, [r3, #23]
		Txcode[24] = 'o';
 8005abc:	4b69      	ldr	r3, [pc, #420]	@ (8005c64 <main+0xd3c>)
 8005abe:	226f      	movs	r2, #111	@ 0x6f
 8005ac0:	761a      	strb	r2, [r3, #24]
		Txcode[25] = 'n';
 8005ac2:	4b68      	ldr	r3, [pc, #416]	@ (8005c64 <main+0xd3c>)
 8005ac4:	226e      	movs	r2, #110	@ 0x6e
 8005ac6:	765a      	strb	r2, [r3, #25]
		Txcode[26] = '2';
 8005ac8:	4b66      	ldr	r3, [pc, #408]	@ (8005c64 <main+0xd3c>)
 8005aca:	2232      	movs	r2, #50	@ 0x32
 8005acc:	769a      	strb	r2, [r3, #26]
		Txcode[27] = 'c';
 8005ace:	4b65      	ldr	r3, [pc, #404]	@ (8005c64 <main+0xd3c>)
 8005ad0:	2263      	movs	r2, #99	@ 0x63
 8005ad2:	76da      	strb	r2, [r3, #27]
		Txcode[28] = '1';
 8005ad4:	4b63      	ldr	r3, [pc, #396]	@ (8005c64 <main+0xd3c>)
 8005ad6:	2231      	movs	r2, #49	@ 0x31
 8005ad8:	771a      	strb	r2, [r3, #28]
		Txcode[29] = 'z';
 8005ada:	4b62      	ldr	r3, [pc, #392]	@ (8005c64 <main+0xd3c>)
 8005adc:	227a      	movs	r2, #122	@ 0x7a
 8005ade:	775a      	strb	r2, [r3, #29]
		Txcode[30] = 'a';
 8005ae0:	4b60      	ldr	r3, [pc, #384]	@ (8005c64 <main+0xd3c>)
 8005ae2:	2261      	movs	r2, #97	@ 0x61
 8005ae4:	779a      	strb	r2, [r3, #30]
		Txcode[31] = '7';
 8005ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8005c64 <main+0xd3c>)
 8005ae8:	2237      	movs	r2, #55	@ 0x37
 8005aea:	77da      	strb	r2, [r3, #31]



		nRF24_WriteTXPayload(Txcode);
 8005aec:	485d      	ldr	r0, [pc, #372]	@ (8005c64 <main+0xd3c>)
 8005aee:	f7fc fcfd 	bl	80024ec <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 8005af2:	f7fc fd09 	bl	8002508 <nRF24_WaitTX>
		nRF24_RX_Mode();
 8005af6:	f7fc fa0f 	bl	8001f18 <nRF24_RX_Mode>

		uint8_t cunter = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005afe:	e022      	b.n	8005b46 <main+0xc1e>
			LED_G_1;
 8005b00:	2201      	movs	r2, #1
 8005b02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b06:	4855      	ldr	r0, [pc, #340]	@ (8005c5c <main+0xd34>)
 8005b08:	f008 fe40 	bl	800e78c <HAL_GPIO_WritePin>
			LED_Y_1;
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b12:	484e      	ldr	r0, [pc, #312]	@ (8005c4c <main+0xd24>)
 8005b14:	f008 fe3a 	bl	800e78c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005b18:	2001      	movs	r0, #1
 8005b1a:	f003 fcfb 	bl	8009514 <HAL_Delay>
			LED_G_0;
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b24:	484d      	ldr	r0, [pc, #308]	@ (8005c5c <main+0xd34>)
 8005b26:	f008 fe31 	bl	800e78c <HAL_GPIO_WritePin>
			LED_Y_0;
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b30:	4846      	ldr	r0, [pc, #280]	@ (8005c4c <main+0xd24>)
 8005b32:	f008 fe2b 	bl	800e78c <HAL_GPIO_WritePin>

			cunter++;
 8005b36:	7cfb      	ldrb	r3, [r7, #19]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	74fb      	strb	r3, [r7, #19]
			if(cunter == 200){
 8005b3c:	7cfb      	ldrb	r3, [r7, #19]
 8005b3e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005b40:	d101      	bne.n	8005b46 <main+0xc1e>
				NVIC_SystemReset();
 8005b42:	f7ff f9db 	bl	8004efc <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005b46:	2000      	movs	r0, #0
 8005b48:	f7fc fd22 	bl	8002590 <nRF24_IsBitSetInFifoStatus>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d0d6      	beq.n	8005b00 <main+0xbd8>
			}
		}

		nRF24_ReadRXPaylaod(RxData);
 8005b52:	4845      	ldr	r0, [pc, #276]	@ (8005c68 <main+0xd40>)
 8005b54:	f7fc fd00 	bl	8002558 <nRF24_ReadRXPaylaod>
		LED_6_0;
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2108      	movs	r1, #8
 8005b5c:	483f      	ldr	r0, [pc, #252]	@ (8005c5c <main+0xd34>)
 8005b5e:	f008 fe15 	bl	800e78c <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 8005b62:	230c      	movs	r3, #12
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	e00b      	b.n	8005b80 <main+0xc58>
			Rxcode[i] = RxData[i];
 8005b68:	4a3f      	ldr	r2, [pc, #252]	@ (8005c68 <main+0xd40>)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	7819      	ldrb	r1, [r3, #0]
 8005b70:	4a3e      	ldr	r2, [pc, #248]	@ (8005c6c <main+0xd44>)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4413      	add	r3, r2
 8005b76:	460a      	mov	r2, r1
 8005b78:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b15      	cmp	r3, #21
 8005b84:	ddf0      	ble.n	8005b68 <main+0xc40>
		}
	///////////////////////////////////////////////////////////////////////
		ESC_INT(&htim3);
 8005b86:	483a      	ldr	r0, [pc, #232]	@ (8005c70 <main+0xd48>)
 8005b88:	f7fb f9dc 	bl	8000f44 <ESC_INT>

		LED_7_1;
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005b92:	4830      	ldr	r0, [pc, #192]	@ (8005c54 <main+0xd2c>)
 8005b94:	f008 fdfa 	bl	800e78c <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 8005b98:	2201      	movs	r2, #1
 8005b9a:	4936      	ldr	r1, [pc, #216]	@ (8005c74 <main+0xd4c>)
 8005b9c:	4836      	ldr	r0, [pc, #216]	@ (8005c78 <main+0xd50>)
 8005b9e:	f012 fabf 	bl	8018120 <HAL_UART_Receive_IT>
		LED_7_0;
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ba8:	482a      	ldr	r0, [pc, #168]	@ (8005c54 <main+0xd2c>)
 8005baa:	f008 fdef 	bl	800e78c <HAL_GPIO_WritePin>

		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 8005bae:	4833      	ldr	r0, [pc, #204]	@ (8005c7c <main+0xd54>)
 8005bb0:	f010 fc5a 	bl	8016468 <HAL_TIM_Base_Start_IT>



	  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005bb4:	4b28      	ldr	r3, [pc, #160]	@ (8005c58 <main+0xd30>)
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f001 fcb4 	bl	8007528 <RGB_LED_For_BAT>


	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005bc0:	4b25      	ldr	r3, [pc, #148]	@ (8005c58 <main+0xd30>)
 8005bc2:	8a9b      	ldrh	r3, [r3, #20]
 8005bc4:	2b07      	cmp	r3, #7
 8005bc6:	d107      	bne.n	8005bd8 <main+0xcb0>
	  	{
	  		LED_R_1;
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005bce:	481f      	ldr	r0, [pc, #124]	@ (8005c4c <main+0xd24>)
 8005bd0:	f008 fddc 	bl	800e78c <HAL_GPIO_WritePin>
	  		while(1){
 8005bd4:	bf00      	nop
 8005bd6:	e7fd      	b.n	8005bd4 <main+0xcac>
	  		}
	  	}



	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8005c58 <main+0xd30>)
 8005bda:	8a9b      	ldrh	r3, [r3, #20]
 8005bdc:	2b09      	cmp	r3, #9
 8005bde:	d107      	bne.n	8005bf0 <main+0xcc8>
	  		LED_R_1;
 8005be0:	2201      	movs	r2, #1
 8005be2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005be6:	4819      	ldr	r0, [pc, #100]	@ (8005c4c <main+0xd24>)
 8005be8:	f008 fdd0 	bl	800e78c <HAL_GPIO_WritePin>
	  		while(1){
 8005bec:	bf00      	nop
 8005bee:	e7fd      	b.n	8005bec <main+0xcc4>
	  		}
	  	}



		STARTUP = 0;
 8005bf0:	4b23      	ldr	r3, [pc, #140]	@ (8005c80 <main+0xd58>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005bf6:	4b18      	ldr	r3, [pc, #96]	@ (8005c58 <main+0xd30>)
 8005bf8:	8a9b      	ldrh	r3, [r3, #20]
 8005bfa:	2b07      	cmp	r3, #7
 8005bfc:	d10a      	bne.n	8005c14 <main+0xcec>
	  			LED_R_1;
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c04:	4811      	ldr	r0, [pc, #68]	@ (8005c4c <main+0xd24>)
 8005c06:	f008 fdc1 	bl	800e78c <HAL_GPIO_WritePin>
	  			thrust_limit = MYDRON.THRUST;
 8005c0a:	4b13      	ldr	r3, [pc, #76]	@ (8005c58 <main+0xd30>)
 8005c0c:	885b      	ldrh	r3, [r3, #2]
 8005c0e:	b21a      	sxth	r2, r3
 8005c10:	4b1c      	ldr	r3, [pc, #112]	@ (8005c84 <main+0xd5c>)
 8005c12:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_OK){
 8005c14:	4b10      	ldr	r3, [pc, #64]	@ (8005c58 <main+0xd30>)
 8005c16:	8a9b      	ldrh	r3, [r3, #20]
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d103      	bne.n	8005c24 <main+0xcfc>
	  			thrust_limit = 10000;
 8005c1c:	4b19      	ldr	r3, [pc, #100]	@ (8005c84 <main+0xd5c>)
 8005c1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005c22:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005c24:	4b0c      	ldr	r3, [pc, #48]	@ (8005c58 <main+0xd30>)
 8005c26:	8a9b      	ldrh	r3, [r3, #20]
 8005c28:	2b09      	cmp	r3, #9
 8005c2a:	d13a      	bne.n	8005ca2 <main+0xd7a>
	  			ESC_POWER_1;
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c32:	4815      	ldr	r0, [pc, #84]	@ (8005c88 <main+0xd60>)
 8005c34:	f008 fdaa 	bl	800e78c <HAL_GPIO_WritePin>
	  			LED_R_1;
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c3e:	4803      	ldr	r0, [pc, #12]	@ (8005c4c <main+0xd24>)
 8005c40:	f008 fda4 	bl	800e78c <HAL_GPIO_WritePin>
	  			f_close(&fil);
 8005c44:	4811      	ldr	r0, [pc, #68]	@ (8005c8c <main+0xd64>)
 8005c46:	f018 f839 	bl	801dcbc <f_close>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005c4a:	e026      	b.n	8005c9a <main+0xd72>
 8005c4c:	58020400 	.word	0x58020400
 8005c50:	00000060 	.word	0x00000060
 8005c54:	58020000 	.word	0x58020000
 8005c58:	00000178 	.word	0x00000178
 8005c5c:	58021000 	.word	0x58021000
 8005c60:	24000274 	.word	0x24000274
 8005c64:	00000114 	.word	0x00000114
 8005c68:	000000f4 	.word	0x000000f4
 8005c6c:	00000154 	.word	0x00000154
 8005c70:	24000418 	.word	0x24000418
 8005c74:	000041d8 	.word	0x000041d8
 8005c78:	240004b0 	.word	0x240004b0
 8005c7c:	240003cc 	.word	0x240003cc
 8005c80:	00000074 	.word	0x00000074
 8005c84:	0000405e 	.word	0x0000405e
 8005c88:	58021800 	.word	0x58021800
 8005c8c:	24001ef0 	.word	0x24001ef0
	  				HAL_Delay(10);
 8005c90:	200a      	movs	r0, #10
 8005c92:	f003 fc3f 	bl	8009514 <HAL_Delay>
	  				Get_batteryvalue();
 8005c96:	f7fe fa3f 	bl	8004118 <Get_batteryvalue>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005c9a:	4b61      	ldr	r3, [pc, #388]	@ (8005e20 <main+0xef8>)
 8005c9c:	8a9b      	ldrh	r3, [r3, #20]
 8005c9e:	2b09      	cmp	r3, #9
 8005ca0:	d0f6      	beq.n	8005c90 <main+0xd68>
	  			}
	  		}

	  		if(commandready == 1){
 8005ca2:	4b60      	ldr	r3, [pc, #384]	@ (8005e24 <main+0xefc>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d159      	bne.n	8005d5e <main+0xe36>
	  			LED_7_1;
 8005caa:	2201      	movs	r2, #1
 8005cac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005cb0:	485d      	ldr	r0, [pc, #372]	@ (8005e28 <main+0xf00>)
 8005cb2:	f008 fd6b 	bl	800e78c <HAL_GPIO_WritePin>
	  			interpretcommand();
 8005cb6:	f7fc fcfd 	bl	80026b4 <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 8005cba:	495c      	ldr	r1, [pc, #368]	@ (8005e2c <main+0xf04>)
 8005cbc:	485c      	ldr	r0, [pc, #368]	@ (8005e30 <main+0xf08>)
 8005cbe:	f7fc fd47 	bl	8002750 <executecommand>
	  			LED_7_0;
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005cc8:	4857      	ldr	r0, [pc, #348]	@ (8005e28 <main+0xf00>)
 8005cca:	f008 fd5f 	bl	800e78c <HAL_GPIO_WritePin>

	  			PID_FAC_Pitch[0] = p_pitchfactor;
 8005cce:	4b59      	ldr	r3, [pc, #356]	@ (8005e34 <main+0xf0c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a59      	ldr	r2, [pc, #356]	@ (8005e38 <main+0xf10>)
 8005cd4:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Pitch[1] = i_pitchfactor;
 8005cd6:	4b59      	ldr	r3, [pc, #356]	@ (8005e3c <main+0xf14>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a57      	ldr	r2, [pc, #348]	@ (8005e38 <main+0xf10>)
 8005cdc:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Pitch[2] = d_pitchfactor;
 8005cde:	4b58      	ldr	r3, [pc, #352]	@ (8005e40 <main+0xf18>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a55      	ldr	r2, [pc, #340]	@ (8005e38 <main+0xf10>)
 8005ce4:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005ce6:	4b57      	ldr	r3, [pc, #348]	@ (8005e44 <main+0xf1c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a57      	ldr	r2, [pc, #348]	@ (8005e48 <main+0xf20>)
 8005cec:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005cee:	4b57      	ldr	r3, [pc, #348]	@ (8005e4c <main+0xf24>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a55      	ldr	r2, [pc, #340]	@ (8005e48 <main+0xf20>)
 8005cf4:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005cf6:	4b56      	ldr	r3, [pc, #344]	@ (8005e50 <main+0xf28>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a53      	ldr	r2, [pc, #332]	@ (8005e48 <main+0xf20>)
 8005cfc:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Rool[0] = p_roolfactor;
 8005cfe:	4b55      	ldr	r3, [pc, #340]	@ (8005e54 <main+0xf2c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a55      	ldr	r2, [pc, #340]	@ (8005e58 <main+0xf30>)
 8005d04:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Rool[1] = i_roolfactor;
 8005d06:	4b55      	ldr	r3, [pc, #340]	@ (8005e5c <main+0xf34>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a53      	ldr	r2, [pc, #332]	@ (8005e58 <main+0xf30>)
 8005d0c:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Rool[2] = d_roolfactor;
 8005d0e:	4b54      	ldr	r3, [pc, #336]	@ (8005e60 <main+0xf38>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a51      	ldr	r2, [pc, #324]	@ (8005e58 <main+0xf30>)
 8005d14:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;
 8005d16:	4b53      	ldr	r3, [pc, #332]	@ (8005e64 <main+0xf3c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a53      	ldr	r2, [pc, #332]	@ (8005e68 <main+0xf40>)
 8005d1c:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005d1e:	4b53      	ldr	r3, [pc, #332]	@ (8005e6c <main+0xf44>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a51      	ldr	r2, [pc, #324]	@ (8005e68 <main+0xf40>)
 8005d24:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005d26:	4b52      	ldr	r3, [pc, #328]	@ (8005e70 <main+0xf48>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a4f      	ldr	r2, [pc, #316]	@ (8005e68 <main+0xf40>)
 8005d2c:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Yaw[0] = p_yawfactor;
 8005d2e:	4b51      	ldr	r3, [pc, #324]	@ (8005e74 <main+0xf4c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a51      	ldr	r2, [pc, #324]	@ (8005e78 <main+0xf50>)
 8005d34:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Yaw[1] = i_yawfactor;
 8005d36:	4b51      	ldr	r3, [pc, #324]	@ (8005e7c <main+0xf54>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a4f      	ldr	r2, [pc, #316]	@ (8005e78 <main+0xf50>)
 8005d3c:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Yaw[2] = d_yawfactor;
 8005d3e:	4b50      	ldr	r3, [pc, #320]	@ (8005e80 <main+0xf58>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a4d      	ldr	r2, [pc, #308]	@ (8005e78 <main+0xf50>)
 8005d44:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;
 8005d46:	4b4f      	ldr	r3, [pc, #316]	@ (8005e84 <main+0xf5c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a4f      	ldr	r2, [pc, #316]	@ (8005e88 <main+0xf60>)
 8005d4c:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005d4e:	4b4f      	ldr	r3, [pc, #316]	@ (8005e8c <main+0xf64>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a4d      	ldr	r2, [pc, #308]	@ (8005e88 <main+0xf60>)
 8005d54:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 8005d56:	4b4e      	ldr	r3, [pc, #312]	@ (8005e90 <main+0xf68>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a4b      	ldr	r2, [pc, #300]	@ (8005e88 <main+0xf60>)
 8005d5c:	6093      	str	r3, [r2, #8]
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 8005d5e:	4b4d      	ldr	r3, [pc, #308]	@ (8005e94 <main+0xf6c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d14d      	bne.n	8005e02 <main+0xeda>
 8005d66:	4b4c      	ldr	r3, [pc, #304]	@ (8005e98 <main+0xf70>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d149      	bne.n	8005e02 <main+0xeda>
 8005d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8005e9c <main+0xf74>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d145      	bne.n	8005e02 <main+0xeda>
	  			TIM_inte_SD = 0;
 8005d76:	4b47      	ldr	r3, [pc, #284]	@ (8005e94 <main+0xf6c>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);
 8005d7c:	4b48      	ldr	r3, [pc, #288]	@ (8005ea0 <main+0xf78>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f001 fd67 	bl	8007854 <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 8005d86:	4b46      	ldr	r3, [pc, #280]	@ (8005ea0 <main+0xf78>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d12b      	bne.n	8005dea <main+0xec2>
	  				SD_In_Use = 1;
 8005d92:	4b44      	ldr	r3, [pc, #272]	@ (8005ea4 <main+0xf7c>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d9e:	4842      	ldr	r0, [pc, #264]	@ (8005ea8 <main+0xf80>)
 8005da0:	f008 fcf4 	bl	800e78c <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 8005da4:	2232      	movs	r2, #50	@ 0x32
 8005da6:	4941      	ldr	r1, [pc, #260]	@ (8005eac <main+0xf84>)
 8005da8:	4841      	ldr	r0, [pc, #260]	@ (8005eb0 <main+0xf88>)
 8005daa:	f017 fbad 	bl	801d508 <f_open>
 8005dae:	4603      	mov	r3, r0
 8005db0:	461a      	mov	r2, r3
 8005db2:	4b39      	ldr	r3, [pc, #228]	@ (8005e98 <main+0xf70>)
 8005db4:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 8005db6:	4b3f      	ldr	r3, [pc, #252]	@ (8005eb4 <main+0xf8c>)
 8005db8:	4a3f      	ldr	r2, [pc, #252]	@ (8005eb8 <main+0xf90>)
 8005dba:	4940      	ldr	r1, [pc, #256]	@ (8005ebc <main+0xf94>)
 8005dbc:	483c      	ldr	r0, [pc, #240]	@ (8005eb0 <main+0xf88>)
 8005dbe:	f017 fd6b 	bl	801d898 <f_write>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	4b34      	ldr	r3, [pc, #208]	@ (8005e98 <main+0xf70>)
 8005dc8:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 8005dca:	4839      	ldr	r0, [pc, #228]	@ (8005eb0 <main+0xf88>)
 8005dcc:	f017 ff76 	bl	801dcbc <f_close>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	4b30      	ldr	r3, [pc, #192]	@ (8005e98 <main+0xf70>)
 8005dd6:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005dde:	4832      	ldr	r0, [pc, #200]	@ (8005ea8 <main+0xf80>)
 8005de0:	f008 fcd4 	bl	800e78c <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 8005de4:	4b2f      	ldr	r3, [pc, #188]	@ (8005ea4 <main+0xf7c>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
	  				}

	  			Mainloop_Number = Mainloop_Number < 1000 ? Mainloop_Number+1 : 0;
 8005dea:	4b2d      	ldr	r3, [pc, #180]	@ (8005ea0 <main+0xf78>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005df2:	d203      	bcs.n	8005dfc <main+0xed4>
 8005df4:	4b2a      	ldr	r3, [pc, #168]	@ (8005ea0 <main+0xf78>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	e000      	b.n	8005dfe <main+0xed6>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	4a28      	ldr	r2, [pc, #160]	@ (8005ea0 <main+0xf78>)
 8005e00:	6013      	str	r3, [r2, #0]
	  		}

	  		if(TIM_inte == 1){
 8005e02:	4b2f      	ldr	r3, [pc, #188]	@ (8005ec0 <main+0xf98>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	f47f aef5 	bne.w	8005bf6 <main+0xcce>
	  			LED_R_0;
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e12:	482c      	ldr	r0, [pc, #176]	@ (8005ec4 <main+0xf9c>)
 8005e14:	f008 fcba 	bl	800e78c <HAL_GPIO_WritePin>
	  			TIM_inte = 0;
 8005e18:	4b29      	ldr	r3, [pc, #164]	@ (8005ec0 <main+0xf98>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005e1e:	e6ea      	b.n	8005bf6 <main+0xcce>
 8005e20:	00000178 	.word	0x00000178
 8005e24:	000041d6 	.word	0x000041d6
 8005e28:	58020000 	.word	0x58020000
 8005e2c:	000041b8 	.word	0x000041b8
 8005e30:	000041c8 	.word	0x000041c8
 8005e34:	000040e4 	.word	0x000040e4
 8005e38:	00004108 	.word	0x00004108
 8005e3c:	000040f0 	.word	0x000040f0
 8005e40:	000040fc 	.word	0x000040fc
 8005e44:	00004144 	.word	0x00004144
 8005e48:	00004168 	.word	0x00004168
 8005e4c:	00004150 	.word	0x00004150
 8005e50:	0000415c 	.word	0x0000415c
 8005e54:	000040e8 	.word	0x000040e8
 8005e58:	0000411c 	.word	0x0000411c
 8005e5c:	000040f4 	.word	0x000040f4
 8005e60:	00004100 	.word	0x00004100
 8005e64:	00004148 	.word	0x00004148
 8005e68:	0000417c 	.word	0x0000417c
 8005e6c:	00004154 	.word	0x00004154
 8005e70:	00004160 	.word	0x00004160
 8005e74:	000040ec 	.word	0x000040ec
 8005e78:	00004130 	.word	0x00004130
 8005e7c:	000040f8 	.word	0x000040f8
 8005e80:	00004104 	.word	0x00004104
 8005e84:	0000414c 	.word	0x0000414c
 8005e88:	00004190 	.word	0x00004190
 8005e8c:	00004158 	.word	0x00004158
 8005e90:	00004164 	.word	0x00004164
 8005e94:	0000006c 	.word	0x0000006c
 8005e98:	24001eec 	.word	0x24001eec
 8005e9c:	000041e4 	.word	0x000041e4
 8005ea0:	000041dc 	.word	0x000041dc
 8005ea4:	000041e0 	.word	0x000041e0
 8005ea8:	58020c00 	.word	0x58020c00
 8005eac:	0801e978 	.word	0x0801e978
 8005eb0:	24001ef0 	.word	0x24001ef0
 8005eb4:	24002f24 	.word	0x24002f24
 8005eb8:	0001f7e8 	.word	0x0001f7e8
 8005ebc:	24002f28 	.word	0x24002f28
 8005ec0:	00000070 	.word	0x00000070
 8005ec4:	58020400 	.word	0x58020400

08005ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b09c      	sub	sp, #112	@ 0x70
 8005ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ed2:	224c      	movs	r2, #76	@ 0x4c
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f018 f8e8 	bl	801e0ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005edc:	1d3b      	adds	r3, r7, #4
 8005ede:	2220      	movs	r2, #32
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f018 f8e2 	bl	801e0ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005ee8:	2002      	movs	r0, #2
 8005eea:	f00b f901 	bl	80110f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005eee:	2300      	movs	r3, #0
 8005ef0:	603b      	str	r3, [r7, #0]
 8005ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8005fa8 <SystemClock_Config+0xe0>)
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8005fa8 <SystemClock_Config+0xe0>)
 8005ef8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005efc:	6193      	str	r3, [r2, #24]
 8005efe:	4b2a      	ldr	r3, [pc, #168]	@ (8005fa8 <SystemClock_Config+0xe0>)
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005f06:	603b      	str	r3, [r7, #0]
 8005f08:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005f0a:	bf00      	nop
 8005f0c:	4b26      	ldr	r3, [pc, #152]	@ (8005fa8 <SystemClock_Config+0xe0>)
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f18:	d1f8      	bne.n	8005f0c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8005f1a:	2311      	movs	r3, #17
 8005f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8005f24:	2380      	movs	r3, #128	@ 0x80
 8005f26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8005f28:	2310      	movs	r3, #16
 8005f2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f30:	2302      	movs	r3, #2
 8005f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8005f34:	2303      	movs	r3, #3
 8005f36:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005f38:	2344      	movs	r3, #68	@ 0x44
 8005f3a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005f40:	2302      	movs	r3, #2
 8005f42:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005f44:	2302      	movs	r3, #2
 8005f46:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005f48:	230c      	movs	r3, #12
 8005f4a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8005f50:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005f54:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f00b f902 	bl	8011164 <HAL_RCC_OscConfig>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005f66:	f001 ff6b 	bl	8007e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f6a:	233f      	movs	r3, #63	@ 0x3f
 8005f6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005f76:	2308      	movs	r3, #8
 8005f78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005f7a:	2340      	movs	r3, #64	@ 0x40
 8005f7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005f7e:	2340      	movs	r3, #64	@ 0x40
 8005f80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005f82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f86:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005f88:	2340      	movs	r3, #64	@ 0x40
 8005f8a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005f8c:	1d3b      	adds	r3, r7, #4
 8005f8e:	2103      	movs	r1, #3
 8005f90:	4618      	mov	r0, r3
 8005f92:	f00b fcc1 	bl	8011918 <HAL_RCC_ClockConfig>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005f9c:	f001 ff50 	bl	8007e40 <Error_Handler>
  }
}
 8005fa0:	bf00      	nop
 8005fa2:	3770      	adds	r7, #112	@ 0x70
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	58024800 	.word	0x58024800

08005fac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b0ae      	sub	sp, #184	@ 0xb8
 8005fb0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	22b8      	movs	r2, #184	@ 0xb8
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f018 f877 	bl	801e0ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2;
 8005fbe:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 8005fc2:	f04f 0300 	mov.w	r3, #0
 8005fc6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 8005fca:	2316      	movs	r3, #22
 8005fcc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 8005fce:	23c0      	movs	r3, #192	@ 0xc0
 8005fd0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005fda:	2302      	movs	r3, #2
 8005fdc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8005fe2:	2320      	movs	r3, #32
 8005fe4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8005fea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005fee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ff6:	463b      	mov	r3, r7
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f00c f819 	bl	8012030 <HAL_RCCEx_PeriphCLKConfig>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8006004:	f001 ff1c 	bl	8007e40 <Error_Handler>
  }
}
 8006008:	bf00      	nop
 800600a:	37b8      	adds	r7, #184	@ 0xb8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a89      	ldr	r2, [pc, #548]	@ (8006240 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800601c:	4293      	cmp	r3, r2
 800601e:	f040 810b 	bne.w	8006238 <HAL_TIM_PeriodElapsedCallback+0x228>
	{
		TIM_inte_SD = 1;
 8006022:	4b88      	ldr	r3, [pc, #544]	@ (8006244 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8006024:	2201      	movs	r2, #1
 8006026:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 8006028:	4b87      	ldr	r3, [pc, #540]	@ (8006248 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800602a:	2201      	movs	r2, #1
 800602c:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 800602e:	4b87      	ldr	r3, [pc, #540]	@ (800624c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3301      	adds	r3, #1
 8006034:	4a85      	ldr	r2, [pc, #532]	@ (800624c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006036:	6013      	str	r3, [r2, #0]


		if(i == 0){// na calosc 100ms
 8006038:	4b85      	ldr	r3, [pc, #532]	@ (8006250 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d113      	bne.n	8006068 <HAL_TIM_PeriodElapsedCallback+0x58>
			LED_5_1;
 8006040:	2201      	movs	r2, #1
 8006042:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006046:	4883      	ldr	r0, [pc, #524]	@ (8006254 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006048:	f008 fba0 	bl	800e78c <HAL_GPIO_WritePin>
			BMP180_start_measurment_temp_IT();
 800604c:	f7fa fc10 	bl	8000870 <BMP180_start_measurment_temp_IT>
			LED_5_0;
 8006050:	2200      	movs	r2, #0
 8006052:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006056:	487f      	ldr	r0, [pc, #508]	@ (8006254 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006058:	f008 fb98 	bl	800e78c <HAL_GPIO_WritePin>


			RGB_LED_For_BAT(MYDRON.batterysize);
 800605c:	4b7e      	ldr	r3, [pc, #504]	@ (8006258 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	4618      	mov	r0, r3
 8006064:	f001 fa60 	bl	8007528 <RGB_LED_For_BAT>
		}

		if(i == 10){//2
 8006068:	4b79      	ldr	r3, [pc, #484]	@ (8006250 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b0a      	cmp	r3, #10
 800606e:	d10d      	bne.n	800608c <HAL_TIM_PeriodElapsedCallback+0x7c>
			LED_5_1;
 8006070:	2201      	movs	r2, #1
 8006072:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006076:	4877      	ldr	r0, [pc, #476]	@ (8006254 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006078:	f008 fb88 	bl	800e78c <HAL_GPIO_WritePin>
			BMP180_start_measurment_pres_IT();
 800607c:	f7fa fbe2 	bl	8000844 <BMP180_start_measurment_pres_IT>
			LED_5_0;
 8006080:	2200      	movs	r2, #0
 8006082:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006086:	4873      	ldr	r0, [pc, #460]	@ (8006254 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006088:	f008 fb80 	bl	800e78c <HAL_GPIO_WritePin>
		}

		if(i == 36){
 800608c:	4b70      	ldr	r3, [pc, #448]	@ (8006250 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b24      	cmp	r3, #36	@ 0x24
 8006092:	d10d      	bne.n	80060b0 <HAL_TIM_PeriodElapsedCallback+0xa0>
			LED_5_1;
 8006094:	2201      	movs	r2, #1
 8006096:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800609a:	486e      	ldr	r0, [pc, #440]	@ (8006254 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800609c:	f008 fb76 	bl	800e78c <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 80060a0:	f7fb f818 	bl	80010d4 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 80060a4:	2200      	movs	r2, #0
 80060a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060aa:	486a      	ldr	r0, [pc, #424]	@ (8006254 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80060ac:	f008 fb6e 	bl	800e78c <HAL_GPIO_WritePin>
		}

		if(i == 38){
 80060b0:	4b67      	ldr	r3, [pc, #412]	@ (8006250 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b26      	cmp	r3, #38	@ 0x26
 80060b6:	d10e      	bne.n	80060d6 <HAL_TIM_PeriodElapsedCallback+0xc6>
			LED_6_1;
 80060b8:	2201      	movs	r2, #1
 80060ba:	2108      	movs	r1, #8
 80060bc:	4867      	ldr	r0, [pc, #412]	@ (800625c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80060be:	f008 fb65 	bl	800e78c <HAL_GPIO_WritePin>
			nRF24_TX_Mode();
 80060c2:	f7fb ff55 	bl	8001f70 <nRF24_TX_Mode>
			nRF24_Rx_Mode = 0;
 80060c6:	4b66      	ldr	r3, [pc, #408]	@ (8006260 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	701a      	strb	r2, [r3, #0]
			LED_6_0;
 80060cc:	2200      	movs	r2, #0
 80060ce:	2108      	movs	r1, #8
 80060d0:	4862      	ldr	r0, [pc, #392]	@ (800625c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80060d2:	f008 fb5b 	bl	800e78c <HAL_GPIO_WritePin>
		}
		if(i == 40){//5
 80060d6:	4b5e      	ldr	r3, [pc, #376]	@ (8006250 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b28      	cmp	r3, #40	@ 0x28
 80060dc:	d14c      	bne.n	8006178 <HAL_TIM_PeriodElapsedCallback+0x168>
			ampritude = startpres - pres;
 80060de:	4b61      	ldr	r3, [pc, #388]	@ (8006264 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80060e0:	ed93 7a00 	vldr	s14, [r3]
 80060e4:	4b60      	ldr	r3, [pc, #384]	@ (8006268 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80060e6:	edd3 7a00 	vldr	s15, [r3]
 80060ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060ee:	4b5f      	ldr	r3, [pc, #380]	@ (800626c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80060f0:	edc3 7a00 	vstr	s15, [r3]

			MYDRON.dronheight = (uint16_t)BMP180_GET_height();
 80060f4:	f7fa fe7e 	bl	8000df4 <BMP180_GET_height>
 80060f8:	eef0 7a40 	vmov.f32	s15, s0
 80060fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006100:	ee17 3a90 	vmov	r3, s15
 8006104:	b29b      	uxth	r3, r3
 8006106:	b21a      	sxth	r2, r3
 8006108:	4b53      	ldr	r3, [pc, #332]	@ (8006258 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800610a:	83da      	strh	r2, [r3, #30]
			convert_value_to_array(MYDRON.dronheight, TxData, 0, 3);
 800610c:	4b52      	ldr	r3, [pc, #328]	@ (8006258 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800610e:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8006112:	2303      	movs	r3, #3
 8006114:	2200      	movs	r2, #0
 8006116:	4956      	ldr	r1, [pc, #344]	@ (8006270 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006118:	f001 f929 	bl	800736e <convert_value_to_array>

			Get_batteryvalue();
 800611c:	f7fd fffc 	bl	8004118 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, TxData, 3, 6);
 8006120:	4b4d      	ldr	r3, [pc, #308]	@ (8006258 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	b218      	sxth	r0, r3
 8006126:	2306      	movs	r3, #6
 8006128:	2203      	movs	r2, #3
 800612a:	4951      	ldr	r1, [pc, #324]	@ (8006270 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800612c:	f001 f91f 	bl	800736e <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	e00b      	b.n	800614e <HAL_TIM_PeriodElapsedCallback+0x13e>
				TxData[22+i] = Txcode[22+i];
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f103 0216 	add.w	r2, r3, #22
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3316      	adds	r3, #22
 8006140:	494c      	ldr	r1, [pc, #304]	@ (8006274 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8006142:	5c89      	ldrb	r1, [r1, r2]
 8006144:	4a4a      	ldr	r2, [pc, #296]	@ (8006270 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006146:	54d1      	strb	r1, [r2, r3]
			for(int i = 0; i < 10; i++){
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3301      	adds	r3, #1
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b09      	cmp	r3, #9
 8006152:	ddf0      	ble.n	8006136 <HAL_TIM_PeriodElapsedCallback+0x126>
			}
			LED_6_1;
 8006154:	2201      	movs	r2, #1
 8006156:	2108      	movs	r1, #8
 8006158:	4840      	ldr	r0, [pc, #256]	@ (800625c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800615a:	f008 fb17 	bl	800e78c <HAL_GPIO_WritePin>
			nRF24_WriteTXPayload(TxData);
 800615e:	4844      	ldr	r0, [pc, #272]	@ (8006270 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006160:	f7fc f9c4 	bl	80024ec <nRF24_WriteTXPayload>
			NRF24_CE_HIGH;
 8006164:	2201      	movs	r2, #1
 8006166:	2140      	movs	r1, #64	@ 0x40
 8006168:	4843      	ldr	r0, [pc, #268]	@ (8006278 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800616a:	f008 fb0f 	bl	800e78c <HAL_GPIO_WritePin>
			LED_6_0;
 800616e:	2200      	movs	r2, #0
 8006170:	2108      	movs	r1, #8
 8006172:	483a      	ldr	r0, [pc, #232]	@ (800625c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8006174:	f008 fb0a 	bl	800e78c <HAL_GPIO_WritePin>
		}
		if(i == 41){
 8006178:	4b35      	ldr	r3, [pc, #212]	@ (8006250 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b29      	cmp	r3, #41	@ 0x29
 800617e:	d104      	bne.n	800618a <HAL_TIM_PeriodElapsedCallback+0x17a>
			NRF24_CE_LOW;
 8006180:	2200      	movs	r2, #0
 8006182:	2140      	movs	r1, #64	@ 0x40
 8006184:	483c      	ldr	r0, [pc, #240]	@ (8006278 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006186:	f008 fb01 	bl	800e78c <HAL_GPIO_WritePin>
		}
		if(i >= 42){
 800618a:	4b31      	ldr	r3, [pc, #196]	@ (8006250 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b29      	cmp	r3, #41	@ 0x29
 8006190:	d916      	bls.n	80061c0 <HAL_TIM_PeriodElapsedCallback+0x1b0>
			if(nRF24_Rx_Mode != 1){
 8006192:	4b33      	ldr	r3, [pc, #204]	@ (8006260 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d012      	beq.n	80061c0 <HAL_TIM_PeriodElapsedCallback+0x1b0>
				if(((nRF24_ReadStatus() & (1<<NRF24_MAX_RT)) || (nRF24_ReadStatus() & (1<<NRF24_TX_DS)))){
 800619a:	f7fb ff6a 	bl	8002072 <nRF24_ReadStatus>
 800619e:	4603      	mov	r3, r0
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d106      	bne.n	80061b6 <HAL_TIM_PeriodElapsedCallback+0x1a6>
 80061a8:	f7fb ff63 	bl	8002072 <nRF24_ReadStatus>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d004      	beq.n	80061c0 <HAL_TIM_PeriodElapsedCallback+0x1b0>
					nRF24_RX_Mode();
 80061b6:	f7fb feaf 	bl	8001f18 <nRF24_RX_Mode>
					nRF24_Rx_Mode = 1;
 80061ba:	4b29      	ldr	r3, [pc, #164]	@ (8006260 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80061bc:	2201      	movs	r2, #1
 80061be:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		LED_5_1;
 80061c0:	2201      	movs	r2, #1
 80061c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80061c6:	4823      	ldr	r0, [pc, #140]	@ (8006254 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80061c8:	f008 fae0 	bl	800e78c <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 80061cc:	f7fb facc 	bl	8001768 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 80061d0:	2200      	movs	r2, #0
 80061d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80061d6:	481f      	ldr	r0, [pc, #124]	@ (8006254 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80061d8:	f008 fad8 	bl	800e78c <HAL_GPIO_WritePin>

		i = (i == 100) ? 0 : i+1;
 80061dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006250 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b64      	cmp	r3, #100	@ 0x64
 80061e2:	d003      	beq.n	80061ec <HAL_TIM_PeriodElapsedCallback+0x1dc>
 80061e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006250 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3301      	adds	r3, #1
 80061ea:	e000      	b.n	80061ee <HAL_TIM_PeriodElapsedCallback+0x1de>
 80061ec:	2300      	movs	r3, #0
 80061ee:	4a18      	ldr	r2, [pc, #96]	@ (8006250 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80061f0:	6013      	str	r3, [r2, #0]

		if(NRF_TIM_Inte >= 1000){
 80061f2:	4b16      	ldr	r3, [pc, #88]	@ (800624c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061fa:	d308      	bcc.n	800620e <HAL_TIM_PeriodElapsedCallback+0x1fe>
			LED_R_1;
 80061fc:	2201      	movs	r2, #1
 80061fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006202:	481d      	ldr	r0, [pc, #116]	@ (8006278 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006204:	f008 fac2 	bl	800e78c <HAL_GPIO_WritePin>
			MYDRON.dron_status.Connection = DRON_DISCONNECTED;
 8006208:	4b13      	ldr	r3, [pc, #76]	@ (8006258 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800620a:	2202      	movs	r2, #2
 800620c:	825a      	strh	r2, [r3, #18]
		}
		if(MYDRON.dron_status.Connection == DRON_DISCONNECTED){
 800620e:	4b12      	ldr	r3, [pc, #72]	@ (8006258 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006210:	8a5b      	ldrh	r3, [r3, #18]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d110      	bne.n	8006238 <HAL_TIM_PeriodElapsedCallback+0x228>
			wanted_rool = 0;
 8006216:	4b19      	ldr	r3, [pc, #100]	@ (800627c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	601a      	str	r2, [r3, #0]
			wanted_pitch = 0;
 800621e:	4b18      	ldr	r3, [pc, #96]	@ (8006280 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
			wanted_yaw = 0;
 8006226:	4b17      	ldr	r3, [pc, #92]	@ (8006284 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8006228:	f04f 0200 	mov.w	r2, #0
 800622c:	601a      	str	r2, [r3, #0]
			wanted_thrust = DRON_SLOWFALING;
 800622e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006232:	b21a      	sxth	r2, r3
 8006234:	4b14      	ldr	r3, [pc, #80]	@ (8006288 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8006236:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8006238:	bf00      	nop
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	240003cc 	.word	0x240003cc
 8006244:	0000006c 	.word	0x0000006c
 8006248:	00000070 	.word	0x00000070
 800624c:	00000078 	.word	0x00000078
 8006250:	000041f0 	.word	0x000041f0
 8006254:	58020000 	.word	0x58020000
 8006258:	00000178 	.word	0x00000178
 800625c:	58021000 	.word	0x58021000
 8006260:	00000174 	.word	0x00000174
 8006264:	000000e4 	.word	0x000000e4
 8006268:	000000e0 	.word	0x000000e0
 800626c:	000000e8 	.word	0x000000e8
 8006270:	00000134 	.word	0x00000134
 8006274:	00000114 	.word	0x00000114
 8006278:	58020400 	.word	0x58020400
 800627c:	0000406c 	.word	0x0000406c
 8006280:	00004068 	.word	0x00004068
 8006284:	00004070 	.word	0x00004070
 8006288:	0000405c 	.word	0x0000405c

0800628c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	4603      	mov	r3, r0
 8006294:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 8006296:	88fb      	ldrh	r3, [r7, #6]
 8006298:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800629c:	f040 812c 	bne.w	80064f8 <HAL_GPIO_EXTI_Callback+0x26c>
	{
		if(STARTUP == 0){
 80062a0:	4b97      	ldr	r3, [pc, #604]	@ (8006500 <HAL_GPIO_EXTI_Callback+0x274>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f040 8127 	bne.w	80064f8 <HAL_GPIO_EXTI_Callback+0x26c>
			LED_6_1;
 80062aa:	2201      	movs	r2, #1
 80062ac:	2108      	movs	r1, #8
 80062ae:	4895      	ldr	r0, [pc, #596]	@ (8006504 <HAL_GPIO_EXTI_Callback+0x278>)
 80062b0:	f008 fa6c 	bl	800e78c <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod(RxData);
 80062b4:	4894      	ldr	r0, [pc, #592]	@ (8006508 <HAL_GPIO_EXTI_Callback+0x27c>)
 80062b6:	f7fc f94f 	bl	8002558 <nRF24_ReadRXPaylaod>
			LED_6_0;
 80062ba:	2200      	movs	r2, #0
 80062bc:	2108      	movs	r1, #8
 80062be:	4891      	ldr	r0, [pc, #580]	@ (8006504 <HAL_GPIO_EXTI_Callback+0x278>)
 80062c0:	f008 fa64 	bl	800e78c <HAL_GPIO_WritePin>


			LED_Y_1;
 80062c4:	2201      	movs	r2, #1
 80062c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80062ca:	4890      	ldr	r0, [pc, #576]	@ (800650c <HAL_GPIO_EXTI_Callback+0x280>)
 80062cc:	f008 fa5e 	bl	800e78c <HAL_GPIO_WritePin>

			loopnum = 0;
 80062d0:	4b8f      	ldr	r3, [pc, #572]	@ (8006510 <HAL_GPIO_EXTI_Callback+0x284>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	e011      	b.n	8006300 <HAL_GPIO_EXTI_Callback+0x74>
				if(RxData[12+abc] == Rxcode[abc+12]){
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	330c      	adds	r3, #12
 80062e0:	4a89      	ldr	r2, [pc, #548]	@ (8006508 <HAL_GPIO_EXTI_Callback+0x27c>)
 80062e2:	5cd2      	ldrb	r2, [r2, r3]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	330c      	adds	r3, #12
 80062e8:	498a      	ldr	r1, [pc, #552]	@ (8006514 <HAL_GPIO_EXTI_Callback+0x288>)
 80062ea:	5ccb      	ldrb	r3, [r1, r3]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d104      	bne.n	80062fa <HAL_GPIO_EXTI_Callback+0x6e>
					loopnum++;
 80062f0:	4b87      	ldr	r3, [pc, #540]	@ (8006510 <HAL_GPIO_EXTI_Callback+0x284>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3301      	adds	r3, #1
 80062f6:	4a86      	ldr	r2, [pc, #536]	@ (8006510 <HAL_GPIO_EXTI_Callback+0x284>)
 80062f8:	6013      	str	r3, [r2, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3301      	adds	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b09      	cmp	r3, #9
 8006304:	ddea      	ble.n	80062dc <HAL_GPIO_EXTI_Callback+0x50>
				}
			}

			if(loopnum == 10){
 8006306:	4b82      	ldr	r3, [pc, #520]	@ (8006510 <HAL_GPIO_EXTI_Callback+0x284>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b0a      	cmp	r3, #10
 800630c:	f040 80e3 	bne.w	80064d6 <HAL_GPIO_EXTI_Callback+0x24a>
				convert_array_to_value(RxData, &wanted_pitch_v, 0, 2);//pitch
 8006310:	2302      	movs	r3, #2
 8006312:	2200      	movs	r2, #0
 8006314:	4980      	ldr	r1, [pc, #512]	@ (8006518 <HAL_GPIO_EXTI_Callback+0x28c>)
 8006316:	487c      	ldr	r0, [pc, #496]	@ (8006508 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006318:	f000 ffd8 	bl	80072cc <convert_array_to_value>
				convert_array_to_value(RxData, &wanted_roll_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 800631c:	2305      	movs	r3, #5
 800631e:	2203      	movs	r2, #3
 8006320:	497e      	ldr	r1, [pc, #504]	@ (800651c <HAL_GPIO_EXTI_Callback+0x290>)
 8006322:	4879      	ldr	r0, [pc, #484]	@ (8006508 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006324:	f000 ffd2 	bl	80072cc <convert_array_to_value>
				if(wobble_strenght == 1){
 8006328:	4b7d      	ldr	r3, [pc, #500]	@ (8006520 <HAL_GPIO_EXTI_Callback+0x294>)
 800632a:	edd3 7a00 	vldr	s15, [r3]
 800632e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006332:	eef4 7a47 	vcmp.f32	s15, s14
 8006336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800633a:	d105      	bne.n	8006348 <HAL_GPIO_EXTI_Callback+0xbc>
					convert_array_to_value(RxData, &wanted_thrust, 6, 8);//
 800633c:	2308      	movs	r3, #8
 800633e:	2206      	movs	r2, #6
 8006340:	4978      	ldr	r1, [pc, #480]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x298>)
 8006342:	4871      	ldr	r0, [pc, #452]	@ (8006508 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006344:	f000 ffc2 	bl	80072cc <convert_array_to_value>
				}
				convert_array_to_value(RxData, &wanted_yaw_v, 9, 11);//
 8006348:	230b      	movs	r3, #11
 800634a:	2209      	movs	r2, #9
 800634c:	4976      	ldr	r1, [pc, #472]	@ (8006528 <HAL_GPIO_EXTI_Callback+0x29c>)
 800634e:	486e      	ldr	r0, [pc, #440]	@ (8006508 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006350:	f000 ffbc 	bl	80072cc <convert_array_to_value>
				MYDRON.dron_status.Connection = DRON_CONNECTED;
 8006354:	4b75      	ldr	r3, [pc, #468]	@ (800652c <HAL_GPIO_EXTI_Callback+0x2a0>)
 8006356:	2201      	movs	r2, #1
 8006358:	825a      	strh	r2, [r3, #18]

				if(RxData[23] == 1){
 800635a:	4b6b      	ldr	r3, [pc, #428]	@ (8006508 <HAL_GPIO_EXTI_Callback+0x27c>)
 800635c:	7ddb      	ldrb	r3, [r3, #23]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d11b      	bne.n	800639a <HAL_GPIO_EXTI_Callback+0x10e>
					ESC_POWER_1;
 8006362:	2201      	movs	r2, #1
 8006364:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006368:	4871      	ldr	r0, [pc, #452]	@ (8006530 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800636a:	f008 fa0f 	bl	800e78c <HAL_GPIO_WritePin>
					LED_R_1;
 800636e:	2201      	movs	r2, #1
 8006370:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006374:	4865      	ldr	r0, [pc, #404]	@ (800650c <HAL_GPIO_EXTI_Callback+0x280>)
 8006376:	f008 fa09 	bl	800e78c <HAL_GPIO_WritePin>
					if(SD_enable_Flag == 1){
 800637a:	4b6e      	ldr	r3, [pc, #440]	@ (8006534 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d10b      	bne.n	800639a <HAL_GPIO_EXTI_Callback+0x10e>
						f_close(&fil);
 8006382:	486d      	ldr	r0, [pc, #436]	@ (8006538 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8006384:	f017 fc9a 	bl	801dcbc <f_close>
						fresult = f_mount(NULL, "/", 1);
 8006388:	2201      	movs	r2, #1
 800638a:	496c      	ldr	r1, [pc, #432]	@ (800653c <HAL_GPIO_EXTI_Callback+0x2b0>)
 800638c:	2000      	movs	r0, #0
 800638e:	f017 f875 	bl	801d47c <f_mount>
 8006392:	4603      	mov	r3, r0
 8006394:	461a      	mov	r2, r3
 8006396:	4b6a      	ldr	r3, [pc, #424]	@ (8006540 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8006398:	701a      	strb	r2, [r3, #0]
					}

				}

				if(wanted_thrust == 9999){
 800639a:	4b62      	ldr	r3, [pc, #392]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x298>)
 800639c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063a0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d103      	bne.n	80063b0 <HAL_GPIO_EXTI_Callback+0x124>
					MYDRON.THRUST_flag = THRUST_MAX;
 80063a8:	4b60      	ldr	r3, [pc, #384]	@ (800652c <HAL_GPIO_EXTI_Callback+0x2a0>)
 80063aa:	2210      	movs	r2, #16
 80063ac:	f883 2020 	strb.w	r2, [r3, #32]
	  			}
				wanted_thrust = wanted_thrust * 20;
 80063b0:	4b5c      	ldr	r3, [pc, #368]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x298>)
 80063b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	0092      	lsls	r2, r2, #2
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	b21a      	sxth	r2, r3
 80063c4:	4b57      	ldr	r3, [pc, #348]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x298>)
 80063c6:	801a      	strh	r2, [r3, #0]
				wanted_thrust = wanted_thrust - 10000;
 80063c8:	4b56      	ldr	r3, [pc, #344]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x298>)
 80063ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	4b5c      	ldr	r3, [pc, #368]	@ (8006544 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80063d2:	4413      	add	r3, r2
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	b21a      	sxth	r2, r3
 80063d8:	4b52      	ldr	r3, [pc, #328]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x298>)
 80063da:	801a      	strh	r2, [r3, #0]
				if(wanted_thrust < 0){
 80063dc:	4b51      	ldr	r3, [pc, #324]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x298>)
 80063de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	da02      	bge.n	80063ec <HAL_GPIO_EXTI_Callback+0x160>
					wanted_thrust = 0;
 80063e6:	4b4f      	ldr	r3, [pc, #316]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x298>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	801a      	strh	r2, [r3, #0]
	  			}

				wanted_rool_rx = (wanted_roll_v - 500)*wanted_rool_factro;//wanted_rool_rx (-90 <-> 90)
 80063ec:	4b4b      	ldr	r3, [pc, #300]	@ (800651c <HAL_GPIO_EXTI_Callback+0x290>)
 80063ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063f2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063fe:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8006548 <HAL_GPIO_EXTI_Callback+0x2bc>
 8006402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006406:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800640a:	ee17 3a90 	vmov	r3, s15
 800640e:	b21a      	sxth	r2, r3
 8006410:	4b4e      	ldr	r3, [pc, #312]	@ (800654c <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006412:	801a      	strh	r2, [r3, #0]
				wanted_pitch_rx = (wanted_pitch_v - 500)*wanted_pitch_factro;// (-450 <-> 450)
 8006414:	4b40      	ldr	r3, [pc, #256]	@ (8006518 <HAL_GPIO_EXTI_Callback+0x28c>)
 8006416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800641a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006426:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8006550 <HAL_GPIO_EXTI_Callback+0x2c4>
 800642a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800642e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006432:	ee17 3a90 	vmov	r3, s15
 8006436:	b21a      	sxth	r2, r3
 8006438:	4b46      	ldr	r3, [pc, #280]	@ (8006554 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800643a:	801a      	strh	r2, [r3, #0]
				wanted_yaw_rx = (wanted_yaw_v - 500)*wanted_yaw_factro;
 800643c:	4b3a      	ldr	r3, [pc, #232]	@ (8006528 <HAL_GPIO_EXTI_Callback+0x29c>)
 800643e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006442:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006446:	ee07 3a90 	vmov	s15, r3
 800644a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800644e:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006558 <HAL_GPIO_EXTI_Callback+0x2cc>
 8006452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800645a:	ee17 3a90 	vmov	r3, s15
 800645e:	b21a      	sxth	r2, r3
 8006460:	4b3e      	ldr	r3, [pc, #248]	@ (800655c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006462:	801a      	strh	r2, [r3, #0]


				wanted_rool_rx = (wanted_rool_rx >= 30) ? 30 : (wanted_rool_rx <= -30) ? -30 : wanted_rool_rx;
 8006464:	4b39      	ldr	r3, [pc, #228]	@ (800654c <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800646a:	2b1d      	cmp	r3, #29
 800646c:	dc09      	bgt.n	8006482 <HAL_GPIO_EXTI_Callback+0x1f6>
 800646e:	4b37      	ldr	r3, [pc, #220]	@ (800654c <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006474:	f06f 021d 	mvn.w	r2, #29
 8006478:	4293      	cmp	r3, r2
 800647a:	bfb8      	it	lt
 800647c:	4613      	movlt	r3, r2
 800647e:	b21b      	sxth	r3, r3
 8006480:	e000      	b.n	8006484 <HAL_GPIO_EXTI_Callback+0x1f8>
 8006482:	231e      	movs	r3, #30
 8006484:	4a31      	ldr	r2, [pc, #196]	@ (800654c <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006486:	8013      	strh	r3, [r2, #0]
				wanted_pitch_rx = (wanted_pitch_rx >= 30) ? 30 : (wanted_pitch_rx <= -30) ? -30 : wanted_pitch_rx;
 8006488:	4b32      	ldr	r3, [pc, #200]	@ (8006554 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800648a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800648e:	2b1d      	cmp	r3, #29
 8006490:	dc09      	bgt.n	80064a6 <HAL_GPIO_EXTI_Callback+0x21a>
 8006492:	4b30      	ldr	r3, [pc, #192]	@ (8006554 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006498:	f06f 021d 	mvn.w	r2, #29
 800649c:	4293      	cmp	r3, r2
 800649e:	bfb8      	it	lt
 80064a0:	4613      	movlt	r3, r2
 80064a2:	b21b      	sxth	r3, r3
 80064a4:	e000      	b.n	80064a8 <HAL_GPIO_EXTI_Callback+0x21c>
 80064a6:	231e      	movs	r3, #30
 80064a8:	4a2a      	ldr	r2, [pc, #168]	@ (8006554 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80064aa:	8013      	strh	r3, [r2, #0]
				wanted_yaw_rx = (wanted_yaw_rx >= 30) ? 30 : (wanted_yaw_rx <= -30) ? -30 : wanted_yaw_rx;
 80064ac:	4b2b      	ldr	r3, [pc, #172]	@ (800655c <HAL_GPIO_EXTI_Callback+0x2d0>)
 80064ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064b2:	2b1d      	cmp	r3, #29
 80064b4:	dc09      	bgt.n	80064ca <HAL_GPIO_EXTI_Callback+0x23e>
 80064b6:	4b29      	ldr	r3, [pc, #164]	@ (800655c <HAL_GPIO_EXTI_Callback+0x2d0>)
 80064b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064bc:	f06f 021d 	mvn.w	r2, #29
 80064c0:	4293      	cmp	r3, r2
 80064c2:	bfb8      	it	lt
 80064c4:	4613      	movlt	r3, r2
 80064c6:	b21b      	sxth	r3, r3
 80064c8:	e000      	b.n	80064cc <HAL_GPIO_EXTI_Callback+0x240>
 80064ca:	231e      	movs	r3, #30
 80064cc:	4a23      	ldr	r2, [pc, #140]	@ (800655c <HAL_GPIO_EXTI_Callback+0x2d0>)
 80064ce:	8013      	strh	r3, [r2, #0]


				NRF_TIM_Inte = 0;
 80064d0:	4b23      	ldr	r3, [pc, #140]	@ (8006560 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	601a      	str	r2, [r3, #0]
	  		}

	  			if(loopnum > 0 && loopnum < 10){
 80064d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006510 <HAL_GPIO_EXTI_Callback+0x284>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d006      	beq.n	80064ec <HAL_GPIO_EXTI_Callback+0x260>
 80064de:	4b0c      	ldr	r3, [pc, #48]	@ (8006510 <HAL_GPIO_EXTI_Callback+0x284>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b09      	cmp	r3, #9
 80064e4:	d802      	bhi.n	80064ec <HAL_GPIO_EXTI_Callback+0x260>
	  				MYDRON.dron_status.Connection = DRON_CONNECTION_ERROR;
 80064e6:	4b11      	ldr	r3, [pc, #68]	@ (800652c <HAL_GPIO_EXTI_Callback+0x2a0>)
 80064e8:	2203      	movs	r2, #3
 80064ea:	825a      	strh	r2, [r3, #18]
	  			}
	  			LED_Y_0;
 80064ec:	2200      	movs	r2, #0
 80064ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80064f2:	4806      	ldr	r0, [pc, #24]	@ (800650c <HAL_GPIO_EXTI_Callback+0x280>)
 80064f4:	f008 f94a 	bl	800e78c <HAL_GPIO_WritePin>
		}
	}
}
 80064f8:	bf00      	nop
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	00000074 	.word	0x00000074
 8006504:	58021000 	.word	0x58021000
 8006508:	000000f4 	.word	0x000000f4
 800650c:	58020400 	.word	0x58020400
 8006510:	000041f4 	.word	0x000041f4
 8006514:	00000154 	.word	0x00000154
 8006518:	000041fa 	.word	0x000041fa
 800651c:	000041f8 	.word	0x000041f8
 8006520:	000041e8 	.word	0x000041e8
 8006524:	0000405c 	.word	0x0000405c
 8006528:	000041fc 	.word	0x000041fc
 800652c:	00000178 	.word	0x00000178
 8006530:	58021800 	.word	0x58021800
 8006534:	000041e4 	.word	0x000041e4
 8006538:	24001ef0 	.word	0x24001ef0
 800653c:	0801e968 	.word	0x0801e968
 8006540:	24001eec 	.word	0x24001eec
 8006544:	ffffd8f0 	.word	0xffffd8f0
 8006548:	3f266666 	.word	0x3f266666
 800654c:	0000404a 	.word	0x0000404a
 8006550:	3f28f5c3 	.word	0x3f28f5c3
 8006554:	00004048 	.word	0x00004048
 8006558:	3f19999a 	.word	0x3f19999a
 800655c:	0000404c 	.word	0x0000404c
 8006560:	00000078 	.word	0x00000078

08006564 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 800656c:	4b24      	ldr	r3, [pc, #144]	@ (8006600 <HAL_UART_RxCpltCallback+0x9c>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	461a      	mov	r2, r3
 8006572:	4b24      	ldr	r3, [pc, #144]	@ (8006604 <HAL_UART_RxCpltCallback+0xa0>)
 8006574:	7819      	ldrb	r1, [r3, #0]
 8006576:	4b24      	ldr	r3, [pc, #144]	@ (8006608 <HAL_UART_RxCpltCallback+0xa4>)
 8006578:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 800657a:	4b21      	ldr	r3, [pc, #132]	@ (8006600 <HAL_UART_RxCpltCallback+0x9c>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	4b21      	ldr	r3, [pc, #132]	@ (8006608 <HAL_UART_RxCpltCallback+0xa4>)
 8006582:	5c9b      	ldrb	r3, [r3, r2]
 8006584:	2b0d      	cmp	r3, #13
 8006586:	d11a      	bne.n	80065be <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 8006588:	230a      	movs	r3, #10
 800658a:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 800658c:	f107 010f 	add.w	r1, r7, #15
 8006590:	2364      	movs	r3, #100	@ 0x64
 8006592:	2201      	movs	r2, #1
 8006594:	481d      	ldr	r0, [pc, #116]	@ (800660c <HAL_UART_RxCpltCallback+0xa8>)
 8006596:	f011 fca1 	bl	8017edc <HAL_UART_Transmit>
		Y = '\r';
 800659a:	230d      	movs	r3, #13
 800659c:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 800659e:	f107 010f 	add.w	r1, r7, #15
 80065a2:	2364      	movs	r3, #100	@ 0x64
 80065a4:	2201      	movs	r2, #1
 80065a6:	4819      	ldr	r0, [pc, #100]	@ (800660c <HAL_UART_RxCpltCallback+0xa8>)
 80065a8:	f011 fc98 	bl	8017edc <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 80065ac:	4b14      	ldr	r3, [pc, #80]	@ (8006600 <HAL_UART_RxCpltCallback+0x9c>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	461a      	mov	r2, r3
 80065b2:	4b15      	ldr	r3, [pc, #84]	@ (8006608 <HAL_UART_RxCpltCallback+0xa4>)
 80065b4:	2100      	movs	r1, #0
 80065b6:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 80065b8:	4b15      	ldr	r3, [pc, #84]	@ (8006610 <HAL_UART_RxCpltCallback+0xac>)
 80065ba:	2201      	movs	r2, #1
 80065bc:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 80065be:	4b10      	ldr	r3, [pc, #64]	@ (8006600 <HAL_UART_RxCpltCallback+0x9c>)
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	4b10      	ldr	r3, [pc, #64]	@ (8006608 <HAL_UART_RxCpltCallback+0xa4>)
 80065c6:	4413      	add	r3, r2
 80065c8:	2201      	movs	r2, #1
 80065ca:	4619      	mov	r1, r3
 80065cc:	480f      	ldr	r0, [pc, #60]	@ (800660c <HAL_UART_RxCpltCallback+0xa8>)
 80065ce:	f011 fd13 	bl	8017ff8 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 80065d2:	2201      	movs	r2, #1
 80065d4:	490b      	ldr	r1, [pc, #44]	@ (8006604 <HAL_UART_RxCpltCallback+0xa0>)
 80065d6:	480d      	ldr	r0, [pc, #52]	@ (800660c <HAL_UART_RxCpltCallback+0xa8>)
 80065d8:	f011 fda2 	bl	8018120 <HAL_UART_Receive_IT>
	command_ch_num++;
 80065dc:	4b08      	ldr	r3, [pc, #32]	@ (8006600 <HAL_UART_RxCpltCallback+0x9c>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	3301      	adds	r3, #1
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	4b06      	ldr	r3, [pc, #24]	@ (8006600 <HAL_UART_RxCpltCallback+0x9c>)
 80065e6:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 80065e8:	4b09      	ldr	r3, [pc, #36]	@ (8006610 <HAL_UART_RxCpltCallback+0xac>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d102      	bne.n	80065f6 <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 80065f0:	4b03      	ldr	r3, [pc, #12]	@ (8006600 <HAL_UART_RxCpltCallback+0x9c>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	701a      	strb	r2, [r3, #0]
	}
}
 80065f6:	bf00      	nop
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	000041d7 	.word	0x000041d7
 8006604:	000041d8 	.word	0x000041d8
 8006608:	000041cc 	.word	0x000041cc
 800660c:	240004b0 	.word	0x240004b0
 8006610:	000041d6 	.word	0x000041d6
 8006614:	00000000 	.word	0x00000000

08006618 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af02      	add	r7, sp, #8
 800661e:	6078      	str	r0, [r7, #4]
	if(MPU6050_IRQ == 1){
 8006620:	4bba      	ldr	r3, [pc, #744]	@ (800690c <HAL_I2C_MemRxCpltCallback+0x2f4>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b01      	cmp	r3, #1
 8006626:	f040 85a5 	bne.w	8007174 <HAL_I2C_MemRxCpltCallback+0xb5c>
			MPU6050_IRQ = 0;
 800662a:	4bb8      	ldr	r3, [pc, #736]	@ (800690c <HAL_I2C_MemRxCpltCallback+0x2f4>)
 800662c:	2200      	movs	r2, #0
 800662e:	701a      	strb	r2, [r3, #0]
			LED_G_1;
 8006630:	2201      	movs	r2, #1
 8006632:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006636:	48b6      	ldr	r0, [pc, #728]	@ (8006910 <HAL_I2C_MemRxCpltCallback+0x2f8>)
 8006638:	f008 f8a8 	bl	800e78c <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 800663c:	4bb5      	ldr	r3, [pc, #724]	@ (8006914 <HAL_I2C_MemRxCpltCallback+0x2fc>)
 800663e:	edd3 7a00 	vldr	s15, [r3]
 8006642:	4bb5      	ldr	r3, [pc, #724]	@ (8006918 <HAL_I2C_MemRxCpltCallback+0x300>)
 8006644:	ed93 7a00 	vldr	s14, [r3]
 8006648:	4bb4      	ldr	r3, [pc, #720]	@ (800691c <HAL_I2C_MemRxCpltCallback+0x304>)
 800664a:	edd3 6a00 	vldr	s13, [r3]
 800664e:	4bb4      	ldr	r3, [pc, #720]	@ (8006920 <HAL_I2C_MemRxCpltCallback+0x308>)
 8006650:	ed93 6a00 	vldr	s12, [r3]
 8006654:	4bb3      	ldr	r3, [pc, #716]	@ (8006924 <HAL_I2C_MemRxCpltCallback+0x30c>)
 8006656:	edd3 5a00 	vldr	s11, [r3]
 800665a:	4bb3      	ldr	r3, [pc, #716]	@ (8006928 <HAL_I2C_MemRxCpltCallback+0x310>)
 800665c:	ed93 5a00 	vldr	s10, [r3]
 8006660:	eddf 4ab2 	vldr	s9, [pc, #712]	@ 800692c <HAL_I2C_MemRxCpltCallback+0x314>
 8006664:	ed9f 4ab2 	vldr	s8, [pc, #712]	@ 8006930 <HAL_I2C_MemRxCpltCallback+0x318>
 8006668:	4bb2      	ldr	r3, [pc, #712]	@ (8006934 <HAL_I2C_MemRxCpltCallback+0x31c>)
 800666a:	9301      	str	r3, [sp, #4]
 800666c:	4bb2      	ldr	r3, [pc, #712]	@ (8006938 <HAL_I2C_MemRxCpltCallback+0x320>)
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	eef0 3a44 	vmov.f32	s7, s8
 8006674:	eeb0 3a64 	vmov.f32	s6, s9
 8006678:	eef0 2a45 	vmov.f32	s5, s10
 800667c:	eeb0 2a65 	vmov.f32	s4, s11
 8006680:	eef0 1a46 	vmov.f32	s3, s12
 8006684:	eeb0 1a66 	vmov.f32	s2, s13
 8006688:	eef0 0a47 	vmov.f32	s1, s14
 800668c:	eeb0 0a67 	vmov.f32	s0, s15
 8006690:	4baa      	ldr	r3, [pc, #680]	@ (800693c <HAL_I2C_MemRxCpltCallback+0x324>)
 8006692:	4aab      	ldr	r2, [pc, #684]	@ (8006940 <HAL_I2C_MemRxCpltCallback+0x328>)
 8006694:	49ab      	ldr	r1, [pc, #684]	@ (8006944 <HAL_I2C_MemRxCpltCallback+0x32c>)
 8006696:	48ac      	ldr	r0, [pc, #688]	@ (8006948 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006698:	f7fb f880 	bl	800179c <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 800669c:	4baa      	ldr	r3, [pc, #680]	@ (8006948 <HAL_I2C_MemRxCpltCallback+0x330>)
 800669e:	edd3 7a00 	vldr	s15, [r3]
 80066a2:	4ba8      	ldr	r3, [pc, #672]	@ (8006944 <HAL_I2C_MemRxCpltCallback+0x32c>)
 80066a4:	ed93 7a00 	vldr	s14, [r3]
 80066a8:	4ba5      	ldr	r3, [pc, #660]	@ (8006940 <HAL_I2C_MemRxCpltCallback+0x328>)
 80066aa:	edd3 6a00 	vldr	s13, [r3]
 80066ae:	49a7      	ldr	r1, [pc, #668]	@ (800694c <HAL_I2C_MemRxCpltCallback+0x334>)
 80066b0:	48a7      	ldr	r0, [pc, #668]	@ (8006950 <HAL_I2C_MemRxCpltCallback+0x338>)
 80066b2:	eeb0 1a66 	vmov.f32	s2, s13
 80066b6:	eef0 0a47 	vmov.f32	s1, s14
 80066ba:	eeb0 0a67 	vmov.f32	s0, s15
 80066be:	f7fa ff13 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 80066c2:	4ba3      	ldr	r3, [pc, #652]	@ (8006950 <HAL_I2C_MemRxCpltCallback+0x338>)
 80066c4:	edd3 7a00 	vldr	s15, [r3]
 80066c8:	4ba0      	ldr	r3, [pc, #640]	@ (800694c <HAL_I2C_MemRxCpltCallback+0x334>)
 80066ca:	ed93 7a00 	vldr	s14, [r3]
 80066ce:	4ba1      	ldr	r3, [pc, #644]	@ (8006954 <HAL_I2C_MemRxCpltCallback+0x33c>)
 80066d0:	edd3 6a00 	vldr	s13, [r3]
 80066d4:	4b99      	ldr	r3, [pc, #612]	@ (800693c <HAL_I2C_MemRxCpltCallback+0x324>)
 80066d6:	ed93 6a00 	vldr	s12, [r3]
 80066da:	4b97      	ldr	r3, [pc, #604]	@ (8006938 <HAL_I2C_MemRxCpltCallback+0x320>)
 80066dc:	edd3 5a00 	vldr	s11, [r3]
 80066e0:	4b94      	ldr	r3, [pc, #592]	@ (8006934 <HAL_I2C_MemRxCpltCallback+0x31c>)
 80066e2:	ed93 5a00 	vldr	s10, [r3]
 80066e6:	eef0 2a45 	vmov.f32	s5, s10
 80066ea:	eeb0 2a65 	vmov.f32	s4, s11
 80066ee:	eef0 1a46 	vmov.f32	s3, s12
 80066f2:	eeb0 1a66 	vmov.f32	s2, s13
 80066f6:	eef0 0a47 	vmov.f32	s1, s14
 80066fa:	eeb0 0a67 	vmov.f32	s0, s15
 80066fe:	4896      	ldr	r0, [pc, #600]	@ (8006958 <HAL_I2C_MemRxCpltCallback+0x340>)
 8006700:	f7fb f8f6 	bl	80018f0 <MPU6050_GET_ACCANDGYR_FILTRED>


			now_pitch = data.x;
 8006704:	4b94      	ldr	r3, [pc, #592]	@ (8006958 <HAL_I2C_MemRxCpltCallback+0x340>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a94      	ldr	r2, [pc, #592]	@ (800695c <HAL_I2C_MemRxCpltCallback+0x344>)
 800670a:	6013      	str	r3, [r2, #0]
			now_rool = data.y;
 800670c:	4b92      	ldr	r3, [pc, #584]	@ (8006958 <HAL_I2C_MemRxCpltCallback+0x340>)
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	4a93      	ldr	r2, [pc, #588]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0x348>)
 8006712:	6013      	str	r3, [r2, #0]
			now_yaw = data.z;
 8006714:	4b90      	ldr	r3, [pc, #576]	@ (8006958 <HAL_I2C_MemRxCpltCallback+0x340>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	4a92      	ldr	r2, [pc, #584]	@ (8006964 <HAL_I2C_MemRxCpltCallback+0x34c>)
 800671a:	6013      	str	r3, [r2, #0]


			wanted_rool = (float)wanted_rool_rx/10;
 800671c:	4b92      	ldr	r3, [pc, #584]	@ (8006968 <HAL_I2C_MemRxCpltCallback+0x350>)
 800671e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800672a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800672e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006732:	4b8e      	ldr	r3, [pc, #568]	@ (800696c <HAL_I2C_MemRxCpltCallback+0x354>)
 8006734:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (float)wanted_pitch_rx/10;
 8006738:	4b8d      	ldr	r3, [pc, #564]	@ (8006970 <HAL_I2C_MemRxCpltCallback+0x358>)
 800673a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800673e:	ee07 3a90 	vmov	s15, r3
 8006742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006746:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800674a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800674e:	4b89      	ldr	r3, [pc, #548]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006750:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = 0;//(float)wanted_yaw_rx/10;
 8006754:	4b88      	ldr	r3, [pc, #544]	@ (8006978 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	601a      	str	r2, [r3, #0]
				  			/*
				  				 * FDP
				  				 */
			wanted_rool = (wanted_rool * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_rool_rx * (1 / (1 + (FDP_FQ * looptime))));
 800675c:	eddf 7a87 	vldr	s15, [pc, #540]	@ 800697c <HAL_I2C_MemRxCpltCallback+0x364>
 8006760:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006764:	4b81      	ldr	r3, [pc, #516]	@ (800696c <HAL_I2C_MemRxCpltCallback+0x354>)
 8006766:	edd3 7a00 	vldr	s15, [r3]
 800676a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800676e:	eddf 7a83 	vldr	s15, [pc, #524]	@ 800697c <HAL_I2C_MemRxCpltCallback+0x364>
 8006772:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006776:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800677a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800677e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006782:	eddf 7a7e 	vldr	s15, [pc, #504]	@ 800697c <HAL_I2C_MemRxCpltCallback+0x364>
 8006786:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800678a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800678e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006792:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006796:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800679a:	4b79      	ldr	r3, [pc, #484]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0x368>)
 800679c:	edd3 7a00 	vldr	s15, [r3]
 80067a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067a8:	4b70      	ldr	r3, [pc, #448]	@ (800696c <HAL_I2C_MemRxCpltCallback+0x354>)
 80067aa:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (wanted_pitch * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_pitch_rx * (1 / (1 + (FDP_FQ * looptime))));
 80067ae:	eddf 7a73 	vldr	s15, [pc, #460]	@ 800697c <HAL_I2C_MemRxCpltCallback+0x364>
 80067b2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80067b6:	4b6f      	ldr	r3, [pc, #444]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0x35c>)
 80067b8:	edd3 7a00 	vldr	s15, [r3]
 80067bc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80067c0:	eddf 7a6e 	vldr	s15, [pc, #440]	@ 800697c <HAL_I2C_MemRxCpltCallback+0x364>
 80067c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80067c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d4:	eddf 7a69 	vldr	s15, [pc, #420]	@ 800697c <HAL_I2C_MemRxCpltCallback+0x364>
 80067d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80067dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80067e8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80067ec:	4b65      	ldr	r3, [pc, #404]	@ (8006984 <HAL_I2C_MemRxCpltCallback+0x36c>)
 80067ee:	edd3 7a00 	vldr	s15, [r3]
 80067f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067fa:	4b5e      	ldr	r3, [pc, #376]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0x35c>)
 80067fc:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = (wanted_yaw * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_yaw_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006800:	eddf 7a5e 	vldr	s15, [pc, #376]	@ 800697c <HAL_I2C_MemRxCpltCallback+0x364>
 8006804:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006808:	4b5b      	ldr	r3, [pc, #364]	@ (8006978 <HAL_I2C_MemRxCpltCallback+0x360>)
 800680a:	edd3 7a00 	vldr	s15, [r3]
 800680e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006812:	eddf 7a5a 	vldr	s15, [pc, #360]	@ 800697c <HAL_I2C_MemRxCpltCallback+0x364>
 8006816:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800681a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800681e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006826:	eddf 7a55 	vldr	s15, [pc, #340]	@ 800697c <HAL_I2C_MemRxCpltCallback+0x364>
 800682a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800682e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006836:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800683a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800683e:	4b52      	ldr	r3, [pc, #328]	@ (8006988 <HAL_I2C_MemRxCpltCallback+0x370>)
 8006840:	edd3 7a00 	vldr	s15, [r3]
 8006844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800684c:	4b4a      	ldr	r3, [pc, #296]	@ (8006978 <HAL_I2C_MemRxCpltCallback+0x360>)
 800684e:	edc3 7a00 	vstr	s15, [r3]


			last_wanted_rool_rx = wanted_rool;
 8006852:	4b46      	ldr	r3, [pc, #280]	@ (800696c <HAL_I2C_MemRxCpltCallback+0x354>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a4a      	ldr	r2, [pc, #296]	@ (8006980 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006858:	6013      	str	r3, [r2, #0]
			last_wanted_pitch_rx = wanted_pitch;
 800685a:	4b46      	ldr	r3, [pc, #280]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0x35c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a49      	ldr	r2, [pc, #292]	@ (8006984 <HAL_I2C_MemRxCpltCallback+0x36c>)
 8006860:	6013      	str	r3, [r2, #0]
			last_wanted_yaw_rx = wanted_yaw;
 8006862:	4b45      	ldr	r3, [pc, #276]	@ (8006978 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a48      	ldr	r2, [pc, #288]	@ (8006988 <HAL_I2C_MemRxCpltCallback+0x370>)
 8006868:	6013      	str	r3, [r2, #0]


		  	pitch_error = wanted_pitch - now_pitch;
 800686a:	4b42      	ldr	r3, [pc, #264]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0x35c>)
 800686c:	ed93 7a00 	vldr	s14, [r3]
 8006870:	4b3a      	ldr	r3, [pc, #232]	@ (800695c <HAL_I2C_MemRxCpltCallback+0x344>)
 8006872:	edd3 7a00 	vldr	s15, [r3]
 8006876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800687a:	4b44      	ldr	r3, [pc, #272]	@ (800698c <HAL_I2C_MemRxCpltCallback+0x374>)
 800687c:	edc3 7a00 	vstr	s15, [r3]
		  	rool_error = wanted_rool - now_rool;
 8006880:	4b3a      	ldr	r3, [pc, #232]	@ (800696c <HAL_I2C_MemRxCpltCallback+0x354>)
 8006882:	ed93 7a00 	vldr	s14, [r3]
 8006886:	4b36      	ldr	r3, [pc, #216]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0x348>)
 8006888:	edd3 7a00 	vldr	s15, [r3]
 800688c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006890:	4b3f      	ldr	r3, [pc, #252]	@ (8006990 <HAL_I2C_MemRxCpltCallback+0x378>)
 8006892:	edc3 7a00 	vstr	s15, [r3]
		  	yaw_error = wanted_yaw - now_yaw;
 8006896:	4b38      	ldr	r3, [pc, #224]	@ (8006978 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006898:	ed93 7a00 	vldr	s14, [r3]
 800689c:	4b31      	ldr	r3, [pc, #196]	@ (8006964 <HAL_I2C_MemRxCpltCallback+0x34c>)
 800689e:	edd3 7a00 	vldr	s15, [r3]
 80068a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006994 <HAL_I2C_MemRxCpltCallback+0x37c>)
 80068a8:	edc3 7a00 	vstr	s15, [r3]
		  	pitch_ar_error = pid_pitch - gx;
 80068ac:	4b3a      	ldr	r3, [pc, #232]	@ (8006998 <HAL_I2C_MemRxCpltCallback+0x380>)
 80068ae:	ed93 7a00 	vldr	s14, [r3]
 80068b2:	4b22      	ldr	r3, [pc, #136]	@ (800693c <HAL_I2C_MemRxCpltCallback+0x324>)
 80068b4:	edd3 7a00 	vldr	s15, [r3]
 80068b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068bc:	4b37      	ldr	r3, [pc, #220]	@ (800699c <HAL_I2C_MemRxCpltCallback+0x384>)
 80068be:	edc3 7a00 	vstr	s15, [r3]
		  	rool_ar_error = pid_rool - gy;
 80068c2:	4b37      	ldr	r3, [pc, #220]	@ (80069a0 <HAL_I2C_MemRxCpltCallback+0x388>)
 80068c4:	ed93 7a00 	vldr	s14, [r3]
 80068c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006938 <HAL_I2C_MemRxCpltCallback+0x320>)
 80068ca:	edd3 7a00 	vldr	s15, [r3]
 80068ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068d2:	4b34      	ldr	r3, [pc, #208]	@ (80069a4 <HAL_I2C_MemRxCpltCallback+0x38c>)
 80068d4:	edc3 7a00 	vstr	s15, [r3]
		  	yaw_ar_error = pid_yaw - gz;
 80068d8:	4b33      	ldr	r3, [pc, #204]	@ (80069a8 <HAL_I2C_MemRxCpltCallback+0x390>)
 80068da:	ed93 7a00 	vldr	s14, [r3]
 80068de:	4b15      	ldr	r3, [pc, #84]	@ (8006934 <HAL_I2C_MemRxCpltCallback+0x31c>)
 80068e0:	edd3 7a00 	vldr	s15, [r3]
 80068e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068e8:	4b30      	ldr	r3, [pc, #192]	@ (80069ac <HAL_I2C_MemRxCpltCallback+0x394>)
 80068ea:	edc3 7a00 	vstr	s15, [r3]


			error_sum_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_pitch : error_sum_pitch + (pitch_error);//pitch_error -> pitch_error
 80068ee:	4b30      	ldr	r3, [pc, #192]	@ (80069b0 <HAL_I2C_MemRxCpltCallback+0x398>)
 80068f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d05f      	beq.n	80069b8 <HAL_I2C_MemRxCpltCallback+0x3a0>
 80068f8:	4b2e      	ldr	r3, [pc, #184]	@ (80069b4 <HAL_I2C_MemRxCpltCallback+0x39c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	ee07 3a90 	vmov	s15, r3
 8006900:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006904:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006908:	e063      	b.n	80069d2 <HAL_I2C_MemRxCpltCallback+0x3ba>
 800690a:	bf00      	nop
 800690c:	000041ec 	.word	0x000041ec
 8006910:	58021000 	.word	0x58021000
 8006914:	00000030 	.word	0x00000030
 8006918:	00000034 	.word	0x00000034
 800691c:	00000038 	.word	0x00000038
 8006920:	0000003c 	.word	0x0000003c
 8006924:	00000040 	.word	0x00000040
 8006928:	00000044 	.word	0x00000044
 800692c:	42830000 	.word	0x42830000
 8006930:	46000000 	.word	0x46000000
 8006934:	00000014 	.word	0x00000014
 8006938:	00000010 	.word	0x00000010
 800693c:	0000000c 	.word	0x0000000c
 8006940:	00000008 	.word	0x00000008
 8006944:	00000004 	.word	0x00000004
 8006948:	00000000 	.word	0x00000000
 800694c:	0000001c 	.word	0x0000001c
 8006950:	00000018 	.word	0x00000018
 8006954:	00000058 	.word	0x00000058
 8006958:	0000007c 	.word	0x0000007c
 800695c:	00004078 	.word	0x00004078
 8006960:	0000407c 	.word	0x0000407c
 8006964:	00004080 	.word	0x00004080
 8006968:	0000404a 	.word	0x0000404a
 800696c:	0000406c 	.word	0x0000406c
 8006970:	00004048 	.word	0x00004048
 8006974:	00004068 	.word	0x00004068
 8006978:	00004070 	.word	0x00004070
 800697c:	3a83126f 	.word	0x3a83126f
 8006980:	00004054 	.word	0x00004054
 8006984:	00004050 	.word	0x00004050
 8006988:	00004058 	.word	0x00004058
 800698c:	00004084 	.word	0x00004084
 8006990:	00004088 	.word	0x00004088
 8006994:	0000408c 	.word	0x0000408c
 8006998:	000040cc 	.word	0x000040cc
 800699c:	00004090 	.word	0x00004090
 80069a0:	000040d4 	.word	0x000040d4
 80069a4:	00004094 	.word	0x00004094
 80069a8:	000040d0 	.word	0x000040d0
 80069ac:	00004098 	.word	0x00004098
 80069b0:	00000178 	.word	0x00000178
 80069b4:	000040b4 	.word	0x000040b4
 80069b8:	4ba4      	ldr	r3, [pc, #656]	@ (8006c4c <HAL_I2C_MemRxCpltCallback+0x634>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	ee07 3a90 	vmov	s15, r3
 80069c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069c4:	4ba2      	ldr	r3, [pc, #648]	@ (8006c50 <HAL_I2C_MemRxCpltCallback+0x638>)
 80069c6:	edd3 7a00 	vldr	s15, [r3]
 80069ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069d2:	4b9e      	ldr	r3, [pc, #632]	@ (8006c4c <HAL_I2C_MemRxCpltCallback+0x634>)
 80069d4:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = (MYDRON.ROOL_STA != 0) ? error_sum_rool : error_sum_rool + (rool_error);//rool_error
 80069d8:	4b9e      	ldr	r3, [pc, #632]	@ (8006c54 <HAL_I2C_MemRxCpltCallback+0x63c>)
 80069da:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d008      	beq.n	80069f4 <HAL_I2C_MemRxCpltCallback+0x3dc>
 80069e2:	4b9d      	ldr	r3, [pc, #628]	@ (8006c58 <HAL_I2C_MemRxCpltCallback+0x640>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069f2:	e00c      	b.n	8006a0e <HAL_I2C_MemRxCpltCallback+0x3f6>
 80069f4:	4b98      	ldr	r3, [pc, #608]	@ (8006c58 <HAL_I2C_MemRxCpltCallback+0x640>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	ee07 3a90 	vmov	s15, r3
 80069fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a00:	4b96      	ldr	r3, [pc, #600]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x644>)
 8006a02:	edd3 7a00 	vldr	s15, [r3]
 8006a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a0e:	4b92      	ldr	r3, [pc, #584]	@ (8006c58 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006a10:	edc3 7a00 	vstr	s15, [r3]
			error_sum_yaw = (MYDRON.YAW_STA != 0) ? error_sum_yaw : error_sum_yaw + (yaw_error);//yaw_error
 8006a14:	4b8f      	ldr	r3, [pc, #572]	@ (8006c54 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006a16:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d008      	beq.n	8006a30 <HAL_I2C_MemRxCpltCallback+0x418>
 8006a1e:	4b90      	ldr	r3, [pc, #576]	@ (8006c60 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a2e:	e00c      	b.n	8006a4a <HAL_I2C_MemRxCpltCallback+0x432>
 8006a30:	4b8b      	ldr	r3, [pc, #556]	@ (8006c60 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	ee07 3a90 	vmov	s15, r3
 8006a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a3c:	4b89      	ldr	r3, [pc, #548]	@ (8006c64 <HAL_I2C_MemRxCpltCallback+0x64c>)
 8006a3e:	edd3 7a00 	vldr	s15, [r3]
 8006a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a4a:	4b85      	ldr	r3, [pc, #532]	@ (8006c60 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006a4c:	edc3 7a00 	vstr	s15, [r3]

			error_sum_angular_rate_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_angular_rate_pitch : error_sum_angular_rate_pitch + (pitch_ar_error);//pitch_ar_error
 8006a50:	4b80      	ldr	r3, [pc, #512]	@ (8006c54 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006a52:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d008      	beq.n	8006a6c <HAL_I2C_MemRxCpltCallback+0x454>
 8006a5a:	4b83      	ldr	r3, [pc, #524]	@ (8006c68 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	ee07 3a90 	vmov	s15, r3
 8006a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a6a:	e00c      	b.n	8006a86 <HAL_I2C_MemRxCpltCallback+0x46e>
 8006a6c:	4b7e      	ldr	r3, [pc, #504]	@ (8006c68 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	ee07 3a90 	vmov	s15, r3
 8006a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a78:	4b7c      	ldr	r3, [pc, #496]	@ (8006c6c <HAL_I2C_MemRxCpltCallback+0x654>)
 8006a7a:	edd3 7a00 	vldr	s15, [r3]
 8006a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a86:	4b78      	ldr	r3, [pc, #480]	@ (8006c68 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006a88:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = (MYDRON.ROOL_STA != 0) ? error_sum_angular_rate_rool : error_sum_angular_rate_rool + (rool_ar_error);
 8006a8c:	4b71      	ldr	r3, [pc, #452]	@ (8006c54 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006a8e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d008      	beq.n	8006aa8 <HAL_I2C_MemRxCpltCallback+0x490>
 8006a96:	4b76      	ldr	r3, [pc, #472]	@ (8006c70 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aa6:	e00c      	b.n	8006ac2 <HAL_I2C_MemRxCpltCallback+0x4aa>
 8006aa8:	4b71      	ldr	r3, [pc, #452]	@ (8006c70 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	ee07 3a90 	vmov	s15, r3
 8006ab0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ab4:	4b6f      	ldr	r3, [pc, #444]	@ (8006c74 <HAL_I2C_MemRxCpltCallback+0x65c>)
 8006ab6:	edd3 7a00 	vldr	s15, [r3]
 8006aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ac2:	4b6b      	ldr	r3, [pc, #428]	@ (8006c70 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006ac4:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_yaw = (MYDRON.YAW_STA != 0) ? error_sum_angular_rate_yaw : error_sum_angular_rate_yaw + (yaw_ar_error);
 8006ac8:	4b62      	ldr	r3, [pc, #392]	@ (8006c54 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006aca:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d008      	beq.n	8006ae4 <HAL_I2C_MemRxCpltCallback+0x4cc>
 8006ad2:	4b69      	ldr	r3, [pc, #420]	@ (8006c78 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ade:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ae2:	e00c      	b.n	8006afe <HAL_I2C_MemRxCpltCallback+0x4e6>
 8006ae4:	4b64      	ldr	r3, [pc, #400]	@ (8006c78 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	ee07 3a90 	vmov	s15, r3
 8006aec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006af0:	4b62      	ldr	r3, [pc, #392]	@ (8006c7c <HAL_I2C_MemRxCpltCallback+0x664>)
 8006af2:	edd3 7a00 	vldr	s15, [r3]
 8006af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006afe:	4b5e      	ldr	r3, [pc, #376]	@ (8006c78 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006b00:	edc3 7a00 	vstr	s15, [r3]


			PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8006b04:	2201      	movs	r2, #1
 8006b06:	495e      	ldr	r1, [pc, #376]	@ (8006c80 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006b08:	485e      	ldr	r0, [pc, #376]	@ (8006c84 <HAL_I2C_MemRxCpltCallback+0x66c>)
 8006b0a:	f7fc ff5f 	bl	80039cc <PID_cal>
			PID_cal(&pid_rool, PID_FAC_Rool, 2);
 8006b0e:	2202      	movs	r2, #2
 8006b10:	495d      	ldr	r1, [pc, #372]	@ (8006c88 <HAL_I2C_MemRxCpltCallback+0x670>)
 8006b12:	485e      	ldr	r0, [pc, #376]	@ (8006c8c <HAL_I2C_MemRxCpltCallback+0x674>)
 8006b14:	f7fc ff5a 	bl	80039cc <PID_cal>
			PID_cal(&pid_yaw, PID_FAC_Yaw, 3);
 8006b18:	2203      	movs	r2, #3
 8006b1a:	495d      	ldr	r1, [pc, #372]	@ (8006c90 <HAL_I2C_MemRxCpltCallback+0x678>)
 8006b1c:	485d      	ldr	r0, [pc, #372]	@ (8006c94 <HAL_I2C_MemRxCpltCallback+0x67c>)
 8006b1e:	f7fc ff55 	bl	80039cc <PID_cal>

			PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8006b22:	2204      	movs	r2, #4
 8006b24:	495c      	ldr	r1, [pc, #368]	@ (8006c98 <HAL_I2C_MemRxCpltCallback+0x680>)
 8006b26:	485d      	ldr	r0, [pc, #372]	@ (8006c9c <HAL_I2C_MemRxCpltCallback+0x684>)
 8006b28:	f7fc ff50 	bl	80039cc <PID_cal>
			PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 8006b2c:	2205      	movs	r2, #5
 8006b2e:	495c      	ldr	r1, [pc, #368]	@ (8006ca0 <HAL_I2C_MemRxCpltCallback+0x688>)
 8006b30:	485c      	ldr	r0, [pc, #368]	@ (8006ca4 <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006b32:	f7fc ff4b 	bl	80039cc <PID_cal>
			PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 8006b36:	2206      	movs	r2, #6
 8006b38:	495b      	ldr	r1, [pc, #364]	@ (8006ca8 <HAL_I2C_MemRxCpltCallback+0x690>)
 8006b3a:	485c      	ldr	r0, [pc, #368]	@ (8006cac <HAL_I2C_MemRxCpltCallback+0x694>)
 8006b3c:	f7fc ff46 	bl	80039cc <PID_cal>


			old_error_pitch = pitch_error;
 8006b40:	4b43      	ldr	r3, [pc, #268]	@ (8006c50 <HAL_I2C_MemRxCpltCallback+0x638>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a5a      	ldr	r2, [pc, #360]	@ (8006cb0 <HAL_I2C_MemRxCpltCallback+0x698>)
 8006b46:	6013      	str	r3, [r2, #0]
			old_error_rool = rool_error;
 8006b48:	4b44      	ldr	r3, [pc, #272]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x644>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a59      	ldr	r2, [pc, #356]	@ (8006cb4 <HAL_I2C_MemRxCpltCallback+0x69c>)
 8006b4e:	6013      	str	r3, [r2, #0]
			old_error_yaw = yaw_error;
 8006b50:	4b44      	ldr	r3, [pc, #272]	@ (8006c64 <HAL_I2C_MemRxCpltCallback+0x64c>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a58      	ldr	r2, [pc, #352]	@ (8006cb8 <HAL_I2C_MemRxCpltCallback+0x6a0>)
 8006b56:	6013      	str	r3, [r2, #0]

			old_error_angular_rate_pitch = pitch_ar_error;
 8006b58:	4b44      	ldr	r3, [pc, #272]	@ (8006c6c <HAL_I2C_MemRxCpltCallback+0x654>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a57      	ldr	r2, [pc, #348]	@ (8006cbc <HAL_I2C_MemRxCpltCallback+0x6a4>)
 8006b5e:	6013      	str	r3, [r2, #0]
			old_error_angular_rate_rool = rool_ar_error;
 8006b60:	4b44      	ldr	r3, [pc, #272]	@ (8006c74 <HAL_I2C_MemRxCpltCallback+0x65c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a56      	ldr	r2, [pc, #344]	@ (8006cc0 <HAL_I2C_MemRxCpltCallback+0x6a8>)
 8006b66:	6013      	str	r3, [r2, #0]
			old_error_angular_rate_yaw = wanted_yaw - gz;
 8006b68:	4b56      	ldr	r3, [pc, #344]	@ (8006cc4 <HAL_I2C_MemRxCpltCallback+0x6ac>)
 8006b6a:	ed93 7a00 	vldr	s14, [r3]
 8006b6e:	4b56      	ldr	r3, [pc, #344]	@ (8006cc8 <HAL_I2C_MemRxCpltCallback+0x6b0>)
 8006b70:	edd3 7a00 	vldr	s15, [r3]
 8006b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b78:	4b54      	ldr	r3, [pc, #336]	@ (8006ccc <HAL_I2C_MemRxCpltCallback+0x6b4>)
 8006b7a:	edc3 7a00 	vstr	s15, [r3]


			MYDRON.ROOL 	= (pid_angular_rate_rool > 5000) ? ROOL_MAX_VAL(): (pid_angular_rate_rool < -5000) ? ROOL_MIN_VAL(): ROOL_GOOD_VAL();
 8006b7e:	4b49      	ldr	r3, [pc, #292]	@ (8006ca4 <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006b80:	edd3 7a00 	vldr	s15, [r3]
 8006b84:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8006cd0 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b90:	dd04      	ble.n	8006b9c <HAL_I2C_MemRxCpltCallback+0x584>
 8006b92:	f001 f881 	bl	8007c98 <ROOL_MAX_VAL>
 8006b96:	4603      	mov	r3, r0
 8006b98:	461a      	mov	r2, r3
 8006b9a:	e012      	b.n	8006bc2 <HAL_I2C_MemRxCpltCallback+0x5aa>
 8006b9c:	4b41      	ldr	r3, [pc, #260]	@ (8006ca4 <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006b9e:	edd3 7a00 	vldr	s15, [r3]
 8006ba2:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006cd4 <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bae:	d504      	bpl.n	8006bba <HAL_I2C_MemRxCpltCallback+0x5a2>
 8006bb0:	f001 f882 	bl	8007cb8 <ROOL_MIN_VAL>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	e003      	b.n	8006bc2 <HAL_I2C_MemRxCpltCallback+0x5aa>
 8006bba:	f001 f8cd 	bl	8007d58 <ROOL_GOOD_VAL>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4b24      	ldr	r3, [pc, #144]	@ (8006c54 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006bc4:	80da      	strh	r2, [r3, #6]
			MYDRON.PITCH 	= (pid_angular_rate_pitch > 5000) ? PITCH_MAX_VAL(): (pid_angular_rate_pitch < -5000) ? PITCH_MIN_VAL(): PITCH_GOOD_VAL();
 8006bc6:	4b35      	ldr	r3, [pc, #212]	@ (8006c9c <HAL_I2C_MemRxCpltCallback+0x684>)
 8006bc8:	edd3 7a00 	vldr	s15, [r3]
 8006bcc:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8006cd0 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd8:	dd04      	ble.n	8006be4 <HAL_I2C_MemRxCpltCallback+0x5cc>
 8006bda:	f001 f87d 	bl	8007cd8 <PITCH_MAX_VAL>
 8006bde:	4603      	mov	r3, r0
 8006be0:	461a      	mov	r2, r3
 8006be2:	e012      	b.n	8006c0a <HAL_I2C_MemRxCpltCallback+0x5f2>
 8006be4:	4b2d      	ldr	r3, [pc, #180]	@ (8006c9c <HAL_I2C_MemRxCpltCallback+0x684>)
 8006be6:	edd3 7a00 	vldr	s15, [r3]
 8006bea:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8006cd4 <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf6:	d504      	bpl.n	8006c02 <HAL_I2C_MemRxCpltCallback+0x5ea>
 8006bf8:	f001 f87e 	bl	8007cf8 <PITCH_MIN_VAL>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	461a      	mov	r2, r3
 8006c00:	e003      	b.n	8006c0a <HAL_I2C_MemRxCpltCallback+0x5f2>
 8006c02:	f001 f8c1 	bl	8007d88 <PITCH_GOOD_VAL>
 8006c06:	4603      	mov	r3, r0
 8006c08:	461a      	mov	r2, r3
 8006c0a:	4b12      	ldr	r3, [pc, #72]	@ (8006c54 <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006c0c:	809a      	strh	r2, [r3, #4]
			MYDRON.YAW 		= (pid_angular_rate_yaw > 5000) ? YAW_MAX_VAL(): (pid_angular_rate_yaw < -5000) ? YAW_MIN_VAL(): YAW_GOOD_VAL();
 8006c0e:	4b27      	ldr	r3, [pc, #156]	@ (8006cac <HAL_I2C_MemRxCpltCallback+0x694>)
 8006c10:	edd3 7a00 	vldr	s15, [r3]
 8006c14:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8006cd0 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c20:	dd04      	ble.n	8006c2c <HAL_I2C_MemRxCpltCallback+0x614>
 8006c22:	f001 f879 	bl	8007d18 <YAW_MAX_VAL>
 8006c26:	4603      	mov	r3, r0
 8006c28:	461a      	mov	r2, r3
 8006c2a:	e059      	b.n	8006ce0 <HAL_I2C_MemRxCpltCallback+0x6c8>
 8006c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8006cac <HAL_I2C_MemRxCpltCallback+0x694>)
 8006c2e:	edd3 7a00 	vldr	s15, [r3]
 8006c32:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006cd4 <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c3e:	d54b      	bpl.n	8006cd8 <HAL_I2C_MemRxCpltCallback+0x6c0>
 8006c40:	f001 f87a 	bl	8007d38 <YAW_MIN_VAL>
 8006c44:	4603      	mov	r3, r0
 8006c46:	461a      	mov	r2, r3
 8006c48:	e04a      	b.n	8006ce0 <HAL_I2C_MemRxCpltCallback+0x6c8>
 8006c4a:	bf00      	nop
 8006c4c:	000040b4 	.word	0x000040b4
 8006c50:	00004084 	.word	0x00004084
 8006c54:	00000178 	.word	0x00000178
 8006c58:	000040b8 	.word	0x000040b8
 8006c5c:	00004088 	.word	0x00004088
 8006c60:	000040bc 	.word	0x000040bc
 8006c64:	0000408c 	.word	0x0000408c
 8006c68:	000040c0 	.word	0x000040c0
 8006c6c:	00004090 	.word	0x00004090
 8006c70:	000040c4 	.word	0x000040c4
 8006c74:	00004094 	.word	0x00004094
 8006c78:	000040c8 	.word	0x000040c8
 8006c7c:	00004098 	.word	0x00004098
 8006c80:	00004108 	.word	0x00004108
 8006c84:	000040cc 	.word	0x000040cc
 8006c88:	0000411c 	.word	0x0000411c
 8006c8c:	000040d4 	.word	0x000040d4
 8006c90:	00004130 	.word	0x00004130
 8006c94:	000040d0 	.word	0x000040d0
 8006c98:	00004168 	.word	0x00004168
 8006c9c:	000040d8 	.word	0x000040d8
 8006ca0:	0000417c 	.word	0x0000417c
 8006ca4:	000040e0 	.word	0x000040e0
 8006ca8:	00004190 	.word	0x00004190
 8006cac:	000040dc 	.word	0x000040dc
 8006cb0:	0000409c 	.word	0x0000409c
 8006cb4:	000040a0 	.word	0x000040a0
 8006cb8:	000040a4 	.word	0x000040a4
 8006cbc:	000040a8 	.word	0x000040a8
 8006cc0:	000040ac 	.word	0x000040ac
 8006cc4:	00004070 	.word	0x00004070
 8006cc8:	00000014 	.word	0x00000014
 8006ccc:	000040b0 	.word	0x000040b0
 8006cd0:	459c4000 	.word	0x459c4000
 8006cd4:	c59c4000 	.word	0xc59c4000
 8006cd8:	f001 f86e 	bl	8007db8 <YAW_GOOD_VAL>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	461a      	mov	r2, r3
 8006ce0:	4bc3      	ldr	r3, [pc, #780]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006ce2:	811a      	strh	r2, [r3, #8]
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 8006ce4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006ce8:	f7fc fd46 	bl	8003778 <Thrust_filter>
			if(MYDRON.THRUST > thrust_limit){
 8006cec:	4bc0      	ldr	r3, [pc, #768]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006cee:	885b      	ldrh	r3, [r3, #2]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	4bc0      	ldr	r3, [pc, #768]	@ (8006ff4 <HAL_I2C_MemRxCpltCallback+0x9dc>)
 8006cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	dd05      	ble.n	8006d08 <HAL_I2C_MemRxCpltCallback+0x6f0>
				MYDRON.THRUST = thrust_limit;
 8006cfc:	4bbd      	ldr	r3, [pc, #756]	@ (8006ff4 <HAL_I2C_MemRxCpltCallback+0x9dc>)
 8006cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	4bba      	ldr	r3, [pc, #744]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d06:	805a      	strh	r2, [r3, #2]
			}


			Stack_Push(WartoscBezwgledna(PID_FAC_Pitch[4]));
 8006d08:	4bbb      	ldr	r3, [pc, #748]	@ (8006ff8 <HAL_I2C_MemRxCpltCallback+0x9e0>)
 8006d0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d12:	f000 fbcb 	bl	80074ac <WartoscBezwgledna>
 8006d16:	eef0 7a40 	vmov.f32	s15, s0
 8006d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d1e:	f000 ff6f 	bl	8007c00 <Stack_Push>
			Stack_Push(WartoscBezwgledna(PID_FAC_Rool[4]));
 8006d22:	4bb6      	ldr	r3, [pc, #728]	@ (8006ffc <HAL_I2C_MemRxCpltCallback+0x9e4>)
 8006d24:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d28:	eeb0 0a67 	vmov.f32	s0, s15
 8006d2c:	f000 fbbe 	bl	80074ac <WartoscBezwgledna>
 8006d30:	eef0 7a40 	vmov.f32	s15, s0
 8006d34:	eeb0 0a67 	vmov.f32	s0, s15
 8006d38:	f000 ff62 	bl	8007c00 <Stack_Push>
			Stack_Push(now_pitch);
 8006d3c:	4bb0      	ldr	r3, [pc, #704]	@ (8007000 <HAL_I2C_MemRxCpltCallback+0x9e8>)
 8006d3e:	edd3 7a00 	vldr	s15, [r3]
 8006d42:	eeb0 0a67 	vmov.f32	s0, s15
 8006d46:	f000 ff5b 	bl	8007c00 <Stack_Push>
			Stack_Push(now_rool);
 8006d4a:	4bae      	ldr	r3, [pc, #696]	@ (8007004 <HAL_I2C_MemRxCpltCallback+0x9ec>)
 8006d4c:	edd3 7a00 	vldr	s15, [r3]
 8006d50:	eeb0 0a67 	vmov.f32	s0, s15
 8006d54:	f000 ff54 	bl	8007c00 <Stack_Push>


			SPEED1 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//trust 7000 max
 8006d58:	4ba5      	ldr	r3, [pc, #660]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d5a:	885b      	ldrh	r3, [r3, #2]
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d64:	ed9f 6b9c 	vldr	d6, [pc, #624]	@ 8006fd8 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006d68:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006d6c:	4ba0      	ldr	r3, [pc, #640]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d6e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d7a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006d7e:	4b9c      	ldr	r3, [pc, #624]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d84:	ee07 3a90 	vmov	s15, r3
 8006d88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d8c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d90:	4b97      	ldr	r3, [pc, #604]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d9e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006da2:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 8006fe0 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006da6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006daa:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 8006fe8 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006dae:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006db2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006db6:	ee17 2a90 	vmov	r2, s15
 8006dba:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d832      	bhi.n	8006e28 <HAL_I2C_MemRxCpltCallback+0x810>
 8006dc2:	4b8b      	ldr	r3, [pc, #556]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006dc4:	885b      	ldrh	r3, [r3, #2]
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dce:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 8006fd8 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006dd2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006dd6:	4b86      	ldr	r3, [pc, #536]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006dd8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006ddc:	ee07 3a90 	vmov	s15, r3
 8006de0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006de4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006de8:	4b81      	ldr	r3, [pc, #516]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006dea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006df6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006dfa:	4b7d      	ldr	r3, [pc, #500]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006dfc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e00:	ee07 3a90 	vmov	s15, r3
 8006e04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006e0c:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8006fe0 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006e10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e14:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8006fe8 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006e18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e20:	ee17 3a90 	vmov	r3, s15
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	e001      	b.n	8006e2c <HAL_I2C_MemRxCpltCallback+0x814>
 8006e28:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006e2c:	4a76      	ldr	r2, [pc, #472]	@ (8007008 <HAL_I2C_MemRxCpltCallback+0x9f0>)
 8006e2e:	8013      	strh	r3, [r2, #0]
			SPEED2 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006e30:	4b6f      	ldr	r3, [pc, #444]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e32:	885b      	ldrh	r3, [r3, #2]
 8006e34:	ee07 3a90 	vmov	s15, r3
 8006e38:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e3c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8006fd8 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006e40:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e44:	4b6a      	ldr	r3, [pc, #424]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e46:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e52:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e56:	4b66      	ldr	r3, [pc, #408]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e5c:	ee07 3a90 	vmov	s15, r3
 8006e60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e64:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e68:	4b61      	ldr	r3, [pc, #388]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e76:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006e7a:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8006fe0 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006e7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e82:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8006fe8 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006e86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e8e:	ee17 2a90 	vmov	r2, s15
 8006e92:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d832      	bhi.n	8006f00 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006e9a:	4b55      	ldr	r3, [pc, #340]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e9c:	885b      	ldrh	r3, [r3, #2]
 8006e9e:	ee07 3a90 	vmov	s15, r3
 8006ea2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ea6:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 8006fd8 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006eaa:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006eae:	4b50      	ldr	r3, [pc, #320]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006eb0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006eb4:	ee07 3a90 	vmov	s15, r3
 8006eb8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ebc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ec0:	4b4b      	ldr	r3, [pc, #300]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006ec2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ece:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ed2:	4b47      	ldr	r3, [pc, #284]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006ed4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ed8:	ee07 3a90 	vmov	s15, r3
 8006edc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ee0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006ee4:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8006fe0 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006ee8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006eec:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8006fe8 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006ef0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ef4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006ef8:	ee17 3a90 	vmov	r3, s15
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	e001      	b.n	8006f04 <HAL_I2C_MemRxCpltCallback+0x8ec>
 8006f00:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006f04:	4a41      	ldr	r2, [pc, #260]	@ (800700c <HAL_I2C_MemRxCpltCallback+0x9f4>)
 8006f06:	8013      	strh	r3, [r2, #0]
			SPEED3 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006f08:	4b39      	ldr	r3, [pc, #228]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f0a:	885b      	ldrh	r3, [r3, #2]
 8006f0c:	ee07 3a90 	vmov	s15, r3
 8006f10:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f14:	ed9f 6b30 	vldr	d6, [pc, #192]	@ 8006fd8 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006f18:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f1c:	4b34      	ldr	r3, [pc, #208]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f1e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f2a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006f2e:	4b30      	ldr	r3, [pc, #192]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f34:	ee07 3a90 	vmov	s15, r3
 8006f38:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f3c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006f40:	4b2b      	ldr	r3, [pc, #172]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f4e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006f52:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8006fe0 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006f56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f5a:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8006fe8 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006f5e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f62:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006f66:	ee17 2a90 	vmov	r2, s15
 8006f6a:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d84e      	bhi.n	8007010 <HAL_I2C_MemRxCpltCallback+0x9f8>
 8006f72:	4b1f      	ldr	r3, [pc, #124]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f74:	885b      	ldrh	r3, [r3, #2]
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f7e:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8006fd8 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006f82:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f86:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f88:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006f8c:	ee07 3a90 	vmov	s15, r3
 8006f90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f94:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006f98:	4b15      	ldr	r3, [pc, #84]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fa6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006faa:	4b11      	ldr	r3, [pc, #68]	@ (8006ff0 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006fac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006fb0:	ee07 3a90 	vmov	s15, r3
 8006fb4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fb8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006fbc:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8006fe0 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006fc0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006fc4:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8006fe8 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006fc8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006fcc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006fd0:	ee17 3a90 	vmov	r3, s15
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	e01d      	b.n	8007014 <HAL_I2C_MemRxCpltCallback+0x9fc>
 8006fd8:	66666666 	.word	0x66666666
 8006fdc:	3fe66666 	.word	0x3fe66666
 8006fe0:	00000000 	.word	0x00000000
 8006fe4:	40c48200 	.word	0x40c48200
 8006fe8:	00000000 	.word	0x00000000
 8006fec:	407f4000 	.word	0x407f4000
 8006ff0:	00000178 	.word	0x00000178
 8006ff4:	0000405e 	.word	0x0000405e
 8006ff8:	00004108 	.word	0x00004108
 8006ffc:	0000411c 	.word	0x0000411c
 8007000:	00004078 	.word	0x00004078
 8007004:	0000407c 	.word	0x0000407c
 8007008:	000041a4 	.word	0x000041a4
 800700c:	000041a6 	.word	0x000041a6
 8007010:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8007014:	4a9a      	ldr	r2, [pc, #616]	@ (8007280 <HAL_I2C_MemRxCpltCallback+0xc68>)
 8007016:	8013      	strh	r3, [r2, #0]
			SPEED4 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//
 8007018:	4b9a      	ldr	r3, [pc, #616]	@ (8007284 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 800701a:	885b      	ldrh	r3, [r3, #2]
 800701c:	ee07 3a90 	vmov	s15, r3
 8007020:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007024:	ed9f 6b8a 	vldr	d6, [pc, #552]	@ 8007250 <HAL_I2C_MemRxCpltCallback+0xc38>
 8007028:	ee27 6b06 	vmul.f64	d6, d7, d6
 800702c:	4b95      	ldr	r3, [pc, #596]	@ (8007284 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 800702e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800703a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800703e:	4b91      	ldr	r3, [pc, #580]	@ (8007284 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8007040:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007044:	ee07 3a90 	vmov	s15, r3
 8007048:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800704c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007050:	4b8c      	ldr	r3, [pc, #560]	@ (8007284 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8007052:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800705e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007062:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8007258 <HAL_I2C_MemRxCpltCallback+0xc40>
 8007066:	ee37 7b06 	vadd.f64	d7, d7, d6
 800706a:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8007260 <HAL_I2C_MemRxCpltCallback+0xc48>
 800706e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007072:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007076:	ee17 2a90 	vmov	r2, s15
 800707a:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 800707e:	429a      	cmp	r2, r3
 8007080:	d832      	bhi.n	80070e8 <HAL_I2C_MemRxCpltCallback+0xad0>
 8007082:	4b80      	ldr	r3, [pc, #512]	@ (8007284 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8007084:	885b      	ldrh	r3, [r3, #2]
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800708e:	ed9f 6b70 	vldr	d6, [pc, #448]	@ 8007250 <HAL_I2C_MemRxCpltCallback+0xc38>
 8007092:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007096:	4b7b      	ldr	r3, [pc, #492]	@ (8007284 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8007098:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800709c:	ee07 3a90 	vmov	s15, r3
 80070a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80070a8:	4b76      	ldr	r3, [pc, #472]	@ (8007284 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 80070aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070b6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80070ba:	4b72      	ldr	r3, [pc, #456]	@ (8007284 <HAL_I2C_MemRxCpltCallback+0xc6c>)
 80070bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070c0:	ee07 3a90 	vmov	s15, r3
 80070c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80070cc:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8007258 <HAL_I2C_MemRxCpltCallback+0xc40>
 80070d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80070d4:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8007260 <HAL_I2C_MemRxCpltCallback+0xc48>
 80070d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80070dc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80070e0:	ee17 3a90 	vmov	r3, s15
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	e001      	b.n	80070ec <HAL_I2C_MemRxCpltCallback+0xad4>
 80070e8:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 80070ec:	4a66      	ldr	r2, [pc, #408]	@ (8007288 <HAL_I2C_MemRxCpltCallback+0xc70>)
 80070ee:	8013      	strh	r3, [r2, #0]

			if(SPEED1 != OLD_SPEED1){
 80070f0:	4b66      	ldr	r3, [pc, #408]	@ (800728c <HAL_I2C_MemRxCpltCallback+0xc74>)
 80070f2:	881a      	ldrh	r2, [r3, #0]
 80070f4:	4b66      	ldr	r3, [pc, #408]	@ (8007290 <HAL_I2C_MemRxCpltCallback+0xc78>)
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d004      	beq.n	8007106 <HAL_I2C_MemRxCpltCallback+0xaee>
				ESC_1_SPEED(SPEED1);
 80070fc:	4b63      	ldr	r3, [pc, #396]	@ (800728c <HAL_I2C_MemRxCpltCallback+0xc74>)
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	4618      	mov	r0, r3
 8007102:	f7f9 fe97 	bl	8000e34 <ESC_1_SPEED>
			}
			if(SPEED2 != OLD_SPEED2){
 8007106:	4b63      	ldr	r3, [pc, #396]	@ (8007294 <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8007108:	881a      	ldrh	r2, [r3, #0]
 800710a:	4b63      	ldr	r3, [pc, #396]	@ (8007298 <HAL_I2C_MemRxCpltCallback+0xc80>)
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	429a      	cmp	r2, r3
 8007110:	d004      	beq.n	800711c <HAL_I2C_MemRxCpltCallback+0xb04>
				ESC_2_SPEED(SPEED2);
 8007112:	4b60      	ldr	r3, [pc, #384]	@ (8007294 <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	4618      	mov	r0, r3
 8007118:	f7f9 feae 	bl	8000e78 <ESC_2_SPEED>
			}
			if(SPEED3 != OLD_SPEED3){
 800711c:	4b58      	ldr	r3, [pc, #352]	@ (8007280 <HAL_I2C_MemRxCpltCallback+0xc68>)
 800711e:	881a      	ldrh	r2, [r3, #0]
 8007120:	4b5e      	ldr	r3, [pc, #376]	@ (800729c <HAL_I2C_MemRxCpltCallback+0xc84>)
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	429a      	cmp	r2, r3
 8007126:	d004      	beq.n	8007132 <HAL_I2C_MemRxCpltCallback+0xb1a>
				ESC_3_SPEED(SPEED3);
 8007128:	4b55      	ldr	r3, [pc, #340]	@ (8007280 <HAL_I2C_MemRxCpltCallback+0xc68>)
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	4618      	mov	r0, r3
 800712e:	f7f9 fec5 	bl	8000ebc <ESC_3_SPEED>
			}
			if(SPEED4 != OLD_SPEED4){
 8007132:	4b55      	ldr	r3, [pc, #340]	@ (8007288 <HAL_I2C_MemRxCpltCallback+0xc70>)
 8007134:	881a      	ldrh	r2, [r3, #0]
 8007136:	4b5a      	ldr	r3, [pc, #360]	@ (80072a0 <HAL_I2C_MemRxCpltCallback+0xc88>)
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	429a      	cmp	r2, r3
 800713c:	d004      	beq.n	8007148 <HAL_I2C_MemRxCpltCallback+0xb30>
				ESC_4_SPEED(SPEED4);
 800713e:	4b52      	ldr	r3, [pc, #328]	@ (8007288 <HAL_I2C_MemRxCpltCallback+0xc70>)
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	4618      	mov	r0, r3
 8007144:	f7f9 fedc 	bl	8000f00 <ESC_4_SPEED>
			}

			OLD_SPEED1 = SPEED1;
 8007148:	4b50      	ldr	r3, [pc, #320]	@ (800728c <HAL_I2C_MemRxCpltCallback+0xc74>)
 800714a:	881a      	ldrh	r2, [r3, #0]
 800714c:	4b50      	ldr	r3, [pc, #320]	@ (8007290 <HAL_I2C_MemRxCpltCallback+0xc78>)
 800714e:	801a      	strh	r2, [r3, #0]
			OLD_SPEED2 = SPEED2;
 8007150:	4b50      	ldr	r3, [pc, #320]	@ (8007294 <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8007152:	881a      	ldrh	r2, [r3, #0]
 8007154:	4b50      	ldr	r3, [pc, #320]	@ (8007298 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8007156:	801a      	strh	r2, [r3, #0]
			OLD_SPEED3 = SPEED3;
 8007158:	4b49      	ldr	r3, [pc, #292]	@ (8007280 <HAL_I2C_MemRxCpltCallback+0xc68>)
 800715a:	881a      	ldrh	r2, [r3, #0]
 800715c:	4b4f      	ldr	r3, [pc, #316]	@ (800729c <HAL_I2C_MemRxCpltCallback+0xc84>)
 800715e:	801a      	strh	r2, [r3, #0]
			OLD_SPEED4 = SPEED4;
 8007160:	4b49      	ldr	r3, [pc, #292]	@ (8007288 <HAL_I2C_MemRxCpltCallback+0xc70>)
 8007162:	881a      	ldrh	r2, [r3, #0]
 8007164:	4b4e      	ldr	r3, [pc, #312]	@ (80072a0 <HAL_I2C_MemRxCpltCallback+0xc88>)
 8007166:	801a      	strh	r2, [r3, #0]

			LED_G_0;
 8007168:	2200      	movs	r2, #0
 800716a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800716e:	484d      	ldr	r0, [pc, #308]	@ (80072a4 <HAL_I2C_MemRxCpltCallback+0xc8c>)
 8007170:	f007 fb0c 	bl	800e78c <HAL_GPIO_WritePin>
	}
	if(HMC583L_IRQ == 1){
 8007174:	4b4c      	ldr	r3, [pc, #304]	@ (80072a8 <HAL_I2C_MemRxCpltCallback+0xc90>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d132      	bne.n	80071e2 <HAL_I2C_MemRxCpltCallback+0xbca>
		HMC583L_IRQ = 0;
 800717c:	4b4a      	ldr	r3, [pc, #296]	@ (80072a8 <HAL_I2C_MemRxCpltCallback+0xc90>)
 800717e:	2200      	movs	r2, #0
 8007180:	701a      	strb	r2, [r3, #0]
		Mag_Z = (float)(HMC5883L_Get_Z_End_IT() - Mag_Offset_val);
 8007182:	f7f9 ffc1 	bl	8001108 <HMC5883L_Get_Z_End_IT>
 8007186:	4603      	mov	r3, r0
 8007188:	461a      	mov	r2, r3
 800718a:	4b48      	ldr	r3, [pc, #288]	@ (80072ac <HAL_I2C_MemRxCpltCallback+0xc94>)
 800718c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800719a:	4b45      	ldr	r3, [pc, #276]	@ (80072b0 <HAL_I2C_MemRxCpltCallback+0xc98>)
 800719c:	edc3 7a00 	vstr	s15, [r3]
		Mag_Z = (Mag_Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (Old_Mag_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 80071a0:	4b43      	ldr	r3, [pc, #268]	@ (80072b0 <HAL_I2C_MemRxCpltCallback+0xc98>)
 80071a2:	edd3 7a00 	vldr	s15, [r3]
 80071a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80071aa:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8007268 <HAL_I2C_MemRxCpltCallback+0xc50>
 80071ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071b2:	ed9f 5b2f 	vldr	d5, [pc, #188]	@ 8007270 <HAL_I2C_MemRxCpltCallback+0xc58>
 80071b6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80071ba:	4b3e      	ldr	r3, [pc, #248]	@ (80072b4 <HAL_I2C_MemRxCpltCallback+0xc9c>)
 80071bc:	edd3 7a00 	vldr	s15, [r3]
 80071c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80071c4:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8007278 <HAL_I2C_MemRxCpltCallback+0xc60>
 80071c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80071cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80071d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80071d4:	4b36      	ldr	r3, [pc, #216]	@ (80072b0 <HAL_I2C_MemRxCpltCallback+0xc98>)
 80071d6:	edc3 7a00 	vstr	s15, [r3]
		Old_Mag_Z = Mag_Z;
 80071da:	4b35      	ldr	r3, [pc, #212]	@ (80072b0 <HAL_I2C_MemRxCpltCallback+0xc98>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a35      	ldr	r2, [pc, #212]	@ (80072b4 <HAL_I2C_MemRxCpltCallback+0xc9c>)
 80071e0:	6013      	str	r3, [r2, #0]
	}
	if(BMP180_IRQ == 1){
 80071e2:	4b35      	ldr	r3, [pc, #212]	@ (80072b8 <HAL_I2C_MemRxCpltCallback+0xca0>)
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d113      	bne.n	8007212 <HAL_I2C_MemRxCpltCallback+0xbfa>
		temperature = BMP180_GET_temp_IT();
 80071ea:	f7f9 fad1 	bl	8000790 <BMP180_GET_temp_IT>
 80071ee:	4603      	mov	r3, r0
 80071f0:	461a      	mov	r2, r3
 80071f2:	4b32      	ldr	r3, [pc, #200]	@ (80072bc <HAL_I2C_MemRxCpltCallback+0xca4>)
 80071f4:	601a      	str	r2, [r3, #0]
		temp = BMP180_GET_temp(temperature);
 80071f6:	4b31      	ldr	r3, [pc, #196]	@ (80072bc <HAL_I2C_MemRxCpltCallback+0xca4>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7f9 fbeb 	bl	80009d8 <BMP180_GET_temp>
 8007202:	eef0 7a40 	vmov.f32	s15, s0
 8007206:	4b2e      	ldr	r3, [pc, #184]	@ (80072c0 <HAL_I2C_MemRxCpltCallback+0xca8>)
 8007208:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 800720c:	4b2a      	ldr	r3, [pc, #168]	@ (80072b8 <HAL_I2C_MemRxCpltCallback+0xca0>)
 800720e:	2200      	movs	r2, #0
 8007210:	701a      	strb	r2, [r3, #0]
	}
	if(BMP180_IRQ == 2){
 8007212:	4b29      	ldr	r3, [pc, #164]	@ (80072b8 <HAL_I2C_MemRxCpltCallback+0xca0>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b02      	cmp	r3, #2
 8007218:	d113      	bne.n	8007242 <HAL_I2C_MemRxCpltCallback+0xc2a>
		pressure = BMP180_GET_pres_IT();
 800721a:	f7f9 facf 	bl	80007bc <BMP180_GET_pres_IT>
 800721e:	4603      	mov	r3, r0
 8007220:	461a      	mov	r2, r3
 8007222:	4b28      	ldr	r3, [pc, #160]	@ (80072c4 <HAL_I2C_MemRxCpltCallback+0xcac>)
 8007224:	601a      	str	r2, [r3, #0]
		pres = BMP180_GET_pres(pressure);
 8007226:	4b27      	ldr	r3, [pc, #156]	@ (80072c4 <HAL_I2C_MemRxCpltCallback+0xcac>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	b29b      	uxth	r3, r3
 800722c:	4618      	mov	r0, r3
 800722e:	f7f9 fc2f 	bl	8000a90 <BMP180_GET_pres>
 8007232:	eef0 7a40 	vmov.f32	s15, s0
 8007236:	4b24      	ldr	r3, [pc, #144]	@ (80072c8 <HAL_I2C_MemRxCpltCallback+0xcb0>)
 8007238:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 800723c:	4b1e      	ldr	r3, [pc, #120]	@ (80072b8 <HAL_I2C_MemRxCpltCallback+0xca0>)
 800723e:	2200      	movs	r2, #0
 8007240:	701a      	strb	r2, [r3, #0]
	}
}
 8007242:	bf00      	nop
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	f3af 8000 	nop.w
 8007250:	66666666 	.word	0x66666666
 8007254:	3fe66666 	.word	0x3fe66666
 8007258:	00000000 	.word	0x00000000
 800725c:	40c48200 	.word	0x40c48200
 8007260:	00000000 	.word	0x00000000
 8007264:	407f4000 	.word	0x407f4000
 8007268:	9999999a 	.word	0x9999999a
 800726c:	3fc99999 	.word	0x3fc99999
 8007270:	33333333 	.word	0x33333333
 8007274:	3ff33333 	.word	0x3ff33333
 8007278:	aaaaaaab 	.word	0xaaaaaaab
 800727c:	3feaaaaa 	.word	0x3feaaaaa
 8007280:	000041a8 	.word	0x000041a8
 8007284:	00000178 	.word	0x00000178
 8007288:	000041aa 	.word	0x000041aa
 800728c:	000041a4 	.word	0x000041a4
 8007290:	000041ac 	.word	0x000041ac
 8007294:	000041a6 	.word	0x000041a6
 8007298:	000041ae 	.word	0x000041ae
 800729c:	000041b0 	.word	0x000041b0
 80072a0:	000041b2 	.word	0x000041b2
 80072a4:	58021000 	.word	0x58021000
 80072a8:	000041ed 	.word	0x000041ed
 80072ac:	00000060 	.word	0x00000060
 80072b0:	00000058 	.word	0x00000058
 80072b4:	0000005c 	.word	0x0000005c
 80072b8:	000041ee 	.word	0x000041ee
 80072bc:	000000b8 	.word	0x000000b8
 80072c0:	000000dc 	.word	0x000000dc
 80072c4:	000000bc 	.word	0x000000bc
 80072c8:	000000e0 	.word	0x000000e0

080072cc <convert_array_to_value>:


void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 80072cc:	b580      	push	{r7, lr}
 80072ce:	ed2d 8b04 	vpush	{d8-d9}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	4611      	mov	r1, r2
 80072dc:	461a      	mov	r2, r3
 80072de:	460b      	mov	r3, r1
 80072e0:	71fb      	strb	r3, [r7, #7]
 80072e2:	4613      	mov	r3, r2
 80072e4:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2200      	movs	r2, #0
 80072ea:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 80072ec:	79ba      	ldrb	r2, [r7, #6]
 80072ee:	79fb      	ldrb	r3, [r7, #7]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 80072f4:	2300      	movs	r3, #0
 80072f6:	617b      	str	r3, [r7, #20]
 80072f8:	e02e      	b.n	8007358 <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007300:	ee07 3a90 	vmov	s15, r3
 8007304:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8007308:	79fa      	ldrb	r2, [r7, #7]
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	4413      	add	r3, r2
 800730e:	461a      	mov	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4413      	add	r3, r2
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	ee07 3a90 	vmov	s15, r3
 8007328:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800732c:	eeb0 1b47 	vmov.f64	d1, d7
 8007330:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007334:	f017 f844 	bl	801e3c0 <pow>
 8007338:	eeb0 7b40 	vmov.f64	d7, d0
 800733c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8007340:	ee38 7b07 	vadd.f64	d7, d8, d7
 8007344:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007348:	ee17 3a90 	vmov	r3, s15
 800734c:	b21a      	sxth	r2, r3
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	3301      	adds	r3, #1
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	429a      	cmp	r2, r3
 800735e:	dacc      	bge.n	80072fa <convert_array_to_value+0x2e>
	}

}
 8007360:	bf00      	nop
 8007362:	bf00      	nop
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	ecbd 8b04 	vpop	{d8-d9}
 800736c:	bd80      	pop	{r7, pc}

0800736e <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 800736e:	b590      	push	{r4, r7, lr}
 8007370:	b087      	sub	sp, #28
 8007372:	af00      	add	r7, sp, #0
 8007374:	6039      	str	r1, [r7, #0]
 8007376:	4611      	mov	r1, r2
 8007378:	461a      	mov	r2, r3
 800737a:	4603      	mov	r3, r0
 800737c:	80fb      	strh	r3, [r7, #6]
 800737e:	460b      	mov	r3, r1
 8007380:	717b      	strb	r3, [r7, #5]
 8007382:	4613      	mov	r3, r2
 8007384:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 800738e:	793a      	ldrb	r2, [r7, #4]
 8007390:	797b      	ldrb	r3, [r7, #5]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 8007396:	2300      	movs	r3, #0
 8007398:	60fb      	str	r3, [r7, #12]
 800739a:	e03e      	b.n	800741a <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 800739c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d028      	beq.n	80073f6 <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	4619      	mov	r1, r3
 80073ac:	200a      	movs	r0, #10
 80073ae:	f000 f83d 	bl	800742c <potenga>
 80073b2:	4603      	mov	r3, r0
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	88fa      	ldrh	r2, [r7, #6]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	80fb      	strh	r3, [r7, #6]
			x++;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	3301      	adds	r3, #1
 80073c2:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 80073c4:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80073d6:	eeb0 1b47 	vmov.f64	d1, d7
 80073da:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80073de:	f016 ffef 	bl	801e3c0 <pow>
 80073e2:	eeb0 7b40 	vmov.f64	d7, d0
 80073e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80073ea:	ee17 3a90 	vmov	r3, s15
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	429c      	cmp	r4, r3
 80073f2:	dad3      	bge.n	800739c <convert_value_to_array+0x2e>
 80073f4:	e000      	b.n	80073f8 <convert_value_to_array+0x8a>
				break;
 80073f6:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 80073f8:	797a      	ldrb	r2, [r7, #5]
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	4413      	add	r3, r2
 80073fe:	461a      	mov	r2, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	4413      	add	r3, r2
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	b2d2      	uxtb	r2, r2
 8007408:	701a      	strb	r2, [r3, #0]
		loopnum++;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3301      	adds	r3, #1
 800740e:	613b      	str	r3, [r7, #16]
		x = 0;
 8007410:	2300      	movs	r3, #0
 8007412:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3301      	adds	r3, #1
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	429a      	cmp	r2, r3
 8007420:	dad0      	bge.n	80073c4 <convert_value_to_array+0x56>
	}
}
 8007422:	bf00      	nop
 8007424:	bf00      	nop
 8007426:	371c      	adds	r7, #28
 8007428:	46bd      	mov	sp, r7
 800742a:	bd90      	pop	{r4, r7, pc}

0800742c <potenga>:
uint32_t potenga(int a, int b){
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <potenga+0x18>
		return 1;
 8007440:	2301      	movs	r3, #1
 8007442:	e02d      	b.n	80074a0 <potenga+0x74>
	}
	if(b == 1){
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d101      	bne.n	800744e <potenga+0x22>
		return a;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	e028      	b.n	80074a0 <potenga+0x74>
	}
	if(b > 1){
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b01      	cmp	r3, #1
 8007452:	dd10      	ble.n	8007476 <potenga+0x4a>
			for(int i = 1; i < b; i++){
 8007454:	2301      	movs	r3, #1
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	e007      	b.n	800746a <potenga+0x3e>
			a = a*c;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	fb02 f303 	mul.w	r3, r2, r3
 8007462:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	3301      	adds	r3, #1
 8007468:	617b      	str	r3, [r7, #20]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	dbf3      	blt.n	800745a <potenga+0x2e>
		}
		return a;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	e014      	b.n	80074a0 <potenga+0x74>
	}
	if(b < 0){
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	da10      	bge.n	800749e <potenga+0x72>
		for(int i = 0; i < b; i++){
 800747c:	2300      	movs	r3, #0
 800747e:	613b      	str	r3, [r7, #16]
 8007480:	e007      	b.n	8007492 <potenga+0x66>
			a = a/c;
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	fb92 f3f3 	sdiv	r3, r2, r3
 800748a:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	3301      	adds	r3, #1
 8007490:	613b      	str	r3, [r7, #16]
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	429a      	cmp	r2, r3
 8007498:	dbf3      	blt.n	8007482 <potenga+0x56>
		}
		return a;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	e000      	b.n	80074a0 <potenga+0x74>
	}
	return a;
 800749e:	687b      	ldr	r3, [r7, #4]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <WartoscBezwgledna>:
float WartoscBezwgledna(float a){
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	ed87 0a01 	vstr	s0, [r7, #4]
	a = (a < 0) ? a*(-1) : a;
 80074b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80074ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c2:	d504      	bpl.n	80074ce <WartoscBezwgledna+0x22>
 80074c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80074c8:	eef1 7a67 	vneg.f32	s15, s15
 80074cc:	e001      	b.n	80074d2 <WartoscBezwgledna+0x26>
 80074ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80074d2:	edc7 7a01 	vstr	s15, [r7, #4]
	return a;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	ee07 3a90 	vmov	s15, r3
}
 80074dc:	eeb0 0a67 	vmov.f32	s0, s15
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
	...

080074ec <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	4603      	mov	r3, r0
 80074f4:	71fb      	strb	r3, [r7, #7]
 80074f6:	460b      	mov	r3, r1
 80074f8:	71bb      	strb	r3, [r7, #6]
 80074fa:	4613      	mov	r3, r2
 80074fc:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 80074fe:	4b09      	ldr	r3, [pc, #36]	@ (8007524 <RGB_LED_Set_color+0x38>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	797a      	ldrb	r2, [r7, #5]
 8007504:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 8007506:	4b07      	ldr	r3, [pc, #28]	@ (8007524 <RGB_LED_Set_color+0x38>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	79fa      	ldrb	r2, [r7, #7]
 800750c:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 800750e:	4b05      	ldr	r3, [pc, #20]	@ (8007524 <RGB_LED_Set_color+0x38>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	79ba      	ldrb	r2, [r7, #6]
 8007514:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	24000380 	.word	0x24000380

08007528 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 8007532:	79fb      	ldrb	r3, [r7, #7]
 8007534:	ee07 3a90 	vmov	s15, r3
 8007538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007540:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8007590 <RGB_LED_For_BAT+0x68>
 8007544:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007548:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8007598 <RGB_LED_For_BAT+0x70>
 800754c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007550:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007554:	edc7 7a00 	vstr	s15, [r7]
 8007558:	783b      	ldrb	r3, [r7, #0]
 800755a:	b2db      	uxtb	r3, r3
 800755c:	79fa      	ldrb	r2, [r7, #7]
 800755e:	ee07 2a90 	vmov	s15, r2
 8007562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007566:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800756a:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8007590 <RGB_LED_For_BAT+0x68>
 800756e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007572:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007576:	edc7 7a00 	vstr	s15, [r7]
 800757a:	783a      	ldrb	r2, [r7, #0]
 800757c:	b2d1      	uxtb	r1, r2
 800757e:	2200      	movs	r2, #0
 8007580:	4618      	mov	r0, r3
 8007582:	f7ff ffb3 	bl	80074ec <RGB_LED_Set_color>
}
 8007586:	bf00      	nop
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	66666666 	.word	0x66666666
 8007594:	40046666 	.word	0x40046666
 8007598:	00000000 	.word	0x00000000
 800759c:	406fe000 	.word	0x406fe000

080075a0 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80075a0:	b590      	push	{r4, r7, lr}
 80075a2:	b087      	sub	sp, #28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6039      	str	r1, [r7, #0]
 80075a8:	4611      	mov	r1, r2
 80075aa:	461a      	mov	r2, r3
 80075ac:	4603      	mov	r3, r0
 80075ae:	80fb      	strh	r3, [r7, #6]
 80075b0:	460b      	mov	r3, r1
 80075b2:	717b      	strb	r3, [r7, #5]
 80075b4:	4613      	mov	r3, r2
 80075b6:	713b      	strb	r3, [r7, #4]
	int x = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 80075bc:	2300      	movs	r3, #0
 80075be:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 80075c0:	793a      	ldrb	r2, [r7, #4]
 80075c2:	797b      	ldrb	r3, [r7, #5]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 80075c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	da04      	bge.n	80075da <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 80075d0:	797b      	ldrb	r3, [r7, #5]
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	4413      	add	r3, r2
 80075d6:	222d      	movs	r2, #45	@ 0x2d
 80075d8:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 80075da:	2301      	movs	r3, #1
 80075dc:	60fb      	str	r3, [r7, #12]
 80075de:	e035      	b.n	800764c <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 80075e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d01d      	beq.n	8007624 <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	4619      	mov	r1, r3
 80075f0:	200a      	movs	r0, #10
 80075f2:	f7ff ff1b 	bl	800742c <potenga>
 80075f6:	4603      	mov	r3, r0
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	88fa      	ldrh	r2, [r7, #6]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	b29b      	uxth	r3, r3
 8007600:	80fb      	strh	r3, [r7, #6]
			x++;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	3301      	adds	r3, #1
 8007606:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 8007608:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	4619      	mov	r1, r3
 8007614:	200a      	movs	r0, #10
 8007616:	f7ff ff09 	bl	800742c <potenga>
 800761a:	4603      	mov	r3, r0
 800761c:	b29b      	uxth	r3, r3
 800761e:	429c      	cmp	r4, r3
 8007620:	dade      	bge.n	80075e0 <convert_value_to_array2+0x40>
 8007622:	e000      	b.n	8007626 <convert_value_to_array2+0x86>
				break;
 8007624:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	b2da      	uxtb	r2, r3
 800762a:	7979      	ldrb	r1, [r7, #5]
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	440b      	add	r3, r1
 8007630:	4619      	mov	r1, r3
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	440b      	add	r3, r1
 8007636:	3230      	adds	r2, #48	@ 0x30
 8007638:	b2d2      	uxtb	r2, r2
 800763a:	701a      	strb	r2, [r3, #0]
		loopnum++;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	3301      	adds	r3, #1
 8007640:	613b      	str	r3, [r7, #16]
		x = 0;
 8007642:	2300      	movs	r3, #0
 8007644:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3301      	adds	r3, #1
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	429a      	cmp	r2, r3
 8007652:	dad9      	bge.n	8007608 <convert_value_to_array2+0x68>
	}
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	bd90      	pop	{r4, r7, pc}

0800765e <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 800765e:	b580      	push	{r7, lr}
 8007660:	ed2d 8b02 	vpush	{d8}
 8007664:	b08c      	sub	sp, #48	@ 0x30
 8007666:	af00      	add	r7, sp, #0
 8007668:	ed87 0a03 	vstr	s0, [r7, #12]
 800766c:	60b8      	str	r0, [r7, #8]
 800766e:	460b      	mov	r3, r1
 8007670:	71fb      	strb	r3, [r7, #7]
 8007672:	4613      	mov	r3, r2
 8007674:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 800767e:	79ba      	ldrb	r2, [r7, #6]
 8007680:	79fb      	ldrb	r3, [r7, #7]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 800768a:	edd7 7a03 	vldr	s15, [r7, #12]
 800768e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007696:	d50a      	bpl.n	80076ae <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 8007698:	79fb      	ldrb	r3, [r7, #7]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	4413      	add	r3, r2
 800769e:	222d      	movs	r2, #45	@ 0x2d
 80076a0:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 80076a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80076a6:	eef1 7a67 	vneg.f32	s15, s15
 80076aa:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 80076ae:	2301      	movs	r3, #1
 80076b0:	61fb      	str	r3, [r7, #28]
 80076b2:	e021      	b.n	80076f8 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80076c2:	eeb0 1b47 	vmov.f64	d1, d7
 80076c6:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80076ca:	f016 fe79 	bl	801e3c0 <pow>
 80076ce:	eeb0 7b40 	vmov.f64	d7, d0
 80076d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80076d6:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 80076da:	ed97 7a03 	vldr	s14, [r7, #12]
 80076de:	edd7 7a04 	vldr	s15, [r7, #16]
 80076e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ea:	da0b      	bge.n	8007704 <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 80076ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ee:	3301      	adds	r3, #1
 80076f0:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	3301      	adds	r3, #1
 80076f6:	61fb      	str	r3, [r7, #28]
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	69fa      	ldr	r2, [r7, #28]
 80076fe:	429a      	cmp	r2, r3
 8007700:	dbd8      	blt.n	80076b4 <convert_value_to_array3+0x56>
 8007702:	e000      	b.n	8007706 <convert_value_to_array3+0xa8>
			break;
 8007704:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	3b01      	subs	r3, #1
 800770e:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 8007710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007712:	2b00      	cmp	r3, #0
 8007714:	dc07      	bgt.n	8007726 <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 8007716:	79fb      	ldrb	r3, [r7, #7]
 8007718:	3301      	adds	r3, #1
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	4413      	add	r3, r2
 800771e:	222e      	movs	r2, #46	@ 0x2e
 8007720:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 8007722:	2301      	movs	r3, #1
 8007724:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 8007726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007728:	2b00      	cmp	r3, #0
 800772a:	dd0a      	ble.n	8007742 <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 800772c:	79fa      	ldrb	r2, [r7, #7]
 800772e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007730:	4413      	add	r3, r2
 8007732:	3301      	adds	r3, #1
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	4413      	add	r3, r2
 8007738:	222e      	movs	r2, #46	@ 0x2e
 800773a:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 800773c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773e:	3301      	adds	r3, #1
 8007740:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 8007742:	edd7 7a03 	vldr	s15, [r7, #12]
 8007746:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	1e5a      	subs	r2, r3, #1
 800774e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800775a:	eeb0 1b47 	vmov.f64	d1, d7
 800775e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007762:	f016 fe2d 	bl	801e3c0 <pow>
 8007766:	eeb0 7b40 	vmov.f64	d7, d0
 800776a:	ee28 7b07 	vmul.f64	d7, d8, d7
 800776e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007772:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 8007776:	2300      	movs	r3, #0
 8007778:	61bb      	str	r3, [r7, #24]
 800777a:	e05f      	b.n	800783c <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 800777c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007780:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007788:	d93d      	bls.n	8007806 <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 800778a:	edd7 7a03 	vldr	s15, [r7, #12]
 800778e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	1e5a      	subs	r2, r3, #1
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80077a2:	eeb0 1b47 	vmov.f64	d1, d7
 80077a6:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80077aa:	f016 fe09 	bl	801e3c0 <pow>
 80077ae:	eeb0 7b40 	vmov.f64	d7, d0
 80077b2:	ee38 7b47 	vsub.f64	d7, d8, d7
 80077b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80077ba:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 80077be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c0:	3301      	adds	r3, #1
 80077c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	1e5a      	subs	r2, r3, #1
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	ee07 3a90 	vmov	s15, r3
 80077d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80077d4:	eeb0 1b47 	vmov.f64	d1, d7
 80077d8:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80077dc:	f016 fdf0 	bl	801e3c0 <pow>
 80077e0:	eeb0 7b40 	vmov.f64	d7, d0
 80077e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80077e8:	ee17 3a90 	vmov	r3, s15
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80077fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007802:	dabb      	bge.n	800777c <convert_value_to_array3+0x11e>
 8007804:	e000      	b.n	8007808 <convert_value_to_array3+0x1aa>
				break;
 8007806:	bf00      	nop
		}

        if(loopnum == kropka){
 8007808:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	429a      	cmp	r2, r3
 800780e:	d102      	bne.n	8007816 <convert_value_to_array3+0x1b8>
            loopnum++;
 8007810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007812:	3301      	adds	r3, #1
 8007814:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 8007816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007818:	b2da      	uxtb	r2, r3
 800781a:	79f9      	ldrb	r1, [r7, #7]
 800781c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800781e:	440b      	add	r3, r1
 8007820:	4619      	mov	r1, r3
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	440b      	add	r3, r1
 8007826:	3230      	adds	r2, #48	@ 0x30
 8007828:	b2d2      	uxtb	r2, r2
 800782a:	701a      	strb	r2, [r3, #0]
		loopnum++;
 800782c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782e:	3301      	adds	r3, #1
 8007830:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 8007832:	2300      	movs	r3, #0
 8007834:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	3301      	adds	r3, #1
 800783a:	61bb      	str	r3, [r7, #24]
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	3b02      	subs	r3, #2
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	429a      	cmp	r2, r3
 8007844:	dbbe      	blt.n	80077c4 <convert_value_to_array3+0x166>
	}
}
 8007846:	bf00      	nop
 8007848:	bf00      	nop
 800784a:	3730      	adds	r7, #48	@ 0x30
 800784c:	46bd      	mov	sp, r7
 800784e:	ecbd 8b02 	vpop	{d8}
 8007852:	bd80      	pop	{r7, pc}

08007854 <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 800785c:	4ba6      	ldr	r3, [pc, #664]	@ (8007af8 <uSD_Card_SendData_To_Buffer+0x2a4>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	b218      	sxth	r0, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	b2db      	uxtb	r3, r3
 8007866:	01db      	lsls	r3, r3, #7
 8007868:	b2da      	uxtb	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	01db      	lsls	r3, r3, #7
 8007870:	b2db      	uxtb	r3, r3
 8007872:	3308      	adds	r3, #8
 8007874:	b2db      	uxtb	r3, r3
 8007876:	49a1      	ldr	r1, [pc, #644]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007878:	f7ff fe92 	bl	80075a0 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	01db      	lsls	r3, r3, #7
 8007880:	3308      	adds	r3, #8
 8007882:	4a9e      	ldr	r2, [pc, #632]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007884:	2120      	movs	r1, #32
 8007886:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(SPEED1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 8007888:	4b9d      	ldr	r3, [pc, #628]	@ (8007b00 <uSD_Card_SendData_To_Buffer+0x2ac>)
 800788a:	881b      	ldrh	r3, [r3, #0]
 800788c:	b218      	sxth	r0, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	b2db      	uxtb	r3, r3
 8007892:	01db      	lsls	r3, r3, #7
 8007894:	b2db      	uxtb	r3, r3
 8007896:	3309      	adds	r3, #9
 8007898:	b2da      	uxtb	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	01db      	lsls	r3, r3, #7
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	330f      	adds	r3, #15
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	4995      	ldr	r1, [pc, #596]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 80078a8:	f7ff fe7a 	bl	80075a0 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	01db      	lsls	r3, r3, #7
 80078b0:	330f      	adds	r3, #15
 80078b2:	4a92      	ldr	r2, [pc, #584]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 80078b4:	2120      	movs	r1, #32
 80078b6:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 80078b8:	4b92      	ldr	r3, [pc, #584]	@ (8007b04 <uSD_Card_SendData_To_Buffer+0x2b0>)
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	b218      	sxth	r0, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	01db      	lsls	r3, r3, #7
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	3310      	adds	r3, #16
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	01db      	lsls	r3, r3, #7
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	3316      	adds	r3, #22
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	4989      	ldr	r1, [pc, #548]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 80078d8:	f7ff fe62 	bl	80075a0 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	01db      	lsls	r3, r3, #7
 80078e0:	3316      	adds	r3, #22
 80078e2:	4a86      	ldr	r2, [pc, #536]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 80078e4:	2120      	movs	r1, #32
 80078e6:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 80078e8:	4b87      	ldr	r3, [pc, #540]	@ (8007b08 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80078ea:	881b      	ldrh	r3, [r3, #0]
 80078ec:	b218      	sxth	r0, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	01db      	lsls	r3, r3, #7
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	3317      	adds	r3, #23
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	01db      	lsls	r3, r3, #7
 8007900:	b2db      	uxtb	r3, r3
 8007902:	331d      	adds	r3, #29
 8007904:	b2db      	uxtb	r3, r3
 8007906:	497d      	ldr	r1, [pc, #500]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007908:	f7ff fe4a 	bl	80075a0 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	01db      	lsls	r3, r3, #7
 8007910:	331d      	adds	r3, #29
 8007912:	4a7a      	ldr	r2, [pc, #488]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007914:	2120      	movs	r1, #32
 8007916:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 8007918:	4b7c      	ldr	r3, [pc, #496]	@ (8007b0c <uSD_Card_SendData_To_Buffer+0x2b8>)
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b218      	sxth	r0, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	01db      	lsls	r3, r3, #7
 8007924:	b2db      	uxtb	r3, r3
 8007926:	331e      	adds	r3, #30
 8007928:	b2da      	uxtb	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	01db      	lsls	r3, r3, #7
 8007930:	b2db      	uxtb	r3, r3
 8007932:	3324      	adds	r3, #36	@ 0x24
 8007934:	b2db      	uxtb	r3, r3
 8007936:	4971      	ldr	r1, [pc, #452]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007938:	f7ff fe32 	bl	80075a0 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	01db      	lsls	r3, r3, #7
 8007940:	3324      	adds	r3, #36	@ 0x24
 8007942:	4a6e      	ldr	r2, [pc, #440]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007944:	2120      	movs	r1, #32
 8007946:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(wanted_rool, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 8007948:	4b71      	ldr	r3, [pc, #452]	@ (8007b10 <uSD_Card_SendData_To_Buffer+0x2bc>)
 800794a:	edd3 7a00 	vldr	s15, [r3]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	01db      	lsls	r3, r3, #7
 8007954:	b2db      	uxtb	r3, r3
 8007956:	3325      	adds	r3, #37	@ 0x25
 8007958:	b2d9      	uxtb	r1, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	b2db      	uxtb	r3, r3
 800795e:	01db      	lsls	r3, r3, #7
 8007960:	b2db      	uxtb	r3, r3
 8007962:	332d      	adds	r3, #45	@ 0x2d
 8007964:	b2db      	uxtb	r3, r3
 8007966:	461a      	mov	r2, r3
 8007968:	4864      	ldr	r0, [pc, #400]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 800796a:	eeb0 0a67 	vmov.f32	s0, s15
 800796e:	f7ff fe76 	bl	800765e <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	01db      	lsls	r3, r3, #7
 8007976:	332d      	adds	r3, #45	@ 0x2d
 8007978:	4a60      	ldr	r2, [pc, #384]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 800797a:	2120      	movs	r1, #32
 800797c:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_pitch, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 800797e:	4b65      	ldr	r3, [pc, #404]	@ (8007b14 <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007980:	edd3 7a00 	vldr	s15, [r3]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	01db      	lsls	r3, r3, #7
 800798a:	b2db      	uxtb	r3, r3
 800798c:	332e      	adds	r3, #46	@ 0x2e
 800798e:	b2d9      	uxtb	r1, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	01db      	lsls	r3, r3, #7
 8007996:	b2db      	uxtb	r3, r3
 8007998:	3336      	adds	r3, #54	@ 0x36
 800799a:	b2db      	uxtb	r3, r3
 800799c:	461a      	mov	r2, r3
 800799e:	4857      	ldr	r0, [pc, #348]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079a0:	eeb0 0a67 	vmov.f32	s0, s15
 80079a4:	f7ff fe5b 	bl	800765e <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	01db      	lsls	r3, r3, #7
 80079ac:	3336      	adds	r3, #54	@ 0x36
 80079ae:	4a53      	ldr	r2, [pc, #332]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079b0:	2120      	movs	r1, #32
 80079b2:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_yaw, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 80079b4:	4b58      	ldr	r3, [pc, #352]	@ (8007b18 <uSD_Card_SendData_To_Buffer+0x2c4>)
 80079b6:	edd3 7a00 	vldr	s15, [r3]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	01db      	lsls	r3, r3, #7
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	3337      	adds	r3, #55	@ 0x37
 80079c4:	b2d9      	uxtb	r1, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	01db      	lsls	r3, r3, #7
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	333f      	adds	r3, #63	@ 0x3f
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	461a      	mov	r2, r3
 80079d4:	4849      	ldr	r0, [pc, #292]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079d6:	eeb0 0a67 	vmov.f32	s0, s15
 80079da:	f7ff fe40 	bl	800765e <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	01db      	lsls	r3, r3, #7
 80079e2:	333f      	adds	r3, #63	@ 0x3f
 80079e4:	4a45      	ldr	r2, [pc, #276]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079e6:	2120      	movs	r1, #32
 80079e8:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(error_sum_pitch, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 80079ea:	4b4c      	ldr	r3, [pc, #304]	@ (8007b1c <uSD_Card_SendData_To_Buffer+0x2c8>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	b218      	sxth	r0, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	01db      	lsls	r3, r3, #7
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	3340      	adds	r3, #64	@ 0x40
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	01db      	lsls	r3, r3, #7
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	3348      	adds	r3, #72	@ 0x48
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	493c      	ldr	r1, [pc, #240]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a0a:	f7ff fdc9 	bl	80075a0 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	01db      	lsls	r3, r3, #7
 8007a12:	3348      	adds	r3, #72	@ 0x48
 8007a14:	4a39      	ldr	r2, [pc, #228]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a16:	2120      	movs	r1, #32
 8007a18:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_rool, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 8007a1a:	4b41      	ldr	r3, [pc, #260]	@ (8007b20 <uSD_Card_SendData_To_Buffer+0x2cc>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	b218      	sxth	r0, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	01db      	lsls	r3, r3, #7
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	3349      	adds	r3, #73	@ 0x49
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	01db      	lsls	r3, r3, #7
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	3351      	adds	r3, #81	@ 0x51
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	4930      	ldr	r1, [pc, #192]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a3a:	f7ff fdb1 	bl	80075a0 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	01db      	lsls	r3, r3, #7
 8007a42:	3351      	adds	r3, #81	@ 0x51
 8007a44:	4a2d      	ldr	r2, [pc, #180]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a46:	2120      	movs	r1, #32
 8007a48:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_yaw, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 8007a4a:	4b36      	ldr	r3, [pc, #216]	@ (8007b24 <uSD_Card_SendData_To_Buffer+0x2d0>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	b218      	sxth	r0, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	01db      	lsls	r3, r3, #7
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	3352      	adds	r3, #82	@ 0x52
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	01db      	lsls	r3, r3, #7
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	335a      	adds	r3, #90	@ 0x5a
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	4924      	ldr	r1, [pc, #144]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a6a:	f7ff fd99 	bl	80075a0 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	01db      	lsls	r3, r3, #7
 8007a72:	335a      	adds	r3, #90	@ 0x5a
 8007a74:	4a21      	ldr	r2, [pc, #132]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a76:	2120      	movs	r1, #32
 8007a78:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 8007a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8007b28 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007a7c:	edd3 7a00 	vldr	s15, [r3]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	01db      	lsls	r3, r3, #7
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	335b      	adds	r3, #91	@ 0x5b
 8007a8a:	b2d9      	uxtb	r1, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	01db      	lsls	r3, r3, #7
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	3362      	adds	r3, #98	@ 0x62
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	461a      	mov	r2, r3
 8007a9a:	4818      	ldr	r0, [pc, #96]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8007aa0:	f7ff fddd 	bl	800765e <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	01db      	lsls	r3, r3, #7
 8007aa8:	3362      	adds	r3, #98	@ 0x62
 8007aaa:	4a14      	ldr	r2, [pc, #80]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007aac:	2120      	movs	r1, #32
 8007aae:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 8007ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b28 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007ab2:	edd3 7a01 	vldr	s15, [r3, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	01db      	lsls	r3, r3, #7
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	3363      	adds	r3, #99	@ 0x63
 8007ac0:	b2d9      	uxtb	r1, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	01db      	lsls	r3, r3, #7
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	336a      	adds	r3, #106	@ 0x6a
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	461a      	mov	r2, r3
 8007ad0:	480a      	ldr	r0, [pc, #40]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8007ad6:	f7ff fdc2 	bl	800765e <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	01db      	lsls	r3, r3, #7
 8007ade:	336a      	adds	r3, #106	@ 0x6a
 8007ae0:	4a06      	ldr	r2, [pc, #24]	@ (8007afc <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007ae2:	2120      	movs	r1, #32
 8007ae4:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 8007ae6:	4b10      	ldr	r3, [pc, #64]	@ (8007b28 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007ae8:	edd3 7a02 	vldr	s15, [r3, #8]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	01db      	lsls	r3, r3, #7
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	336b      	adds	r3, #107	@ 0x6b
 8007af6:	e019      	b.n	8007b2c <uSD_Card_SendData_To_Buffer+0x2d8>
 8007af8:	000041dc 	.word	0x000041dc
 8007afc:	24002f28 	.word	0x24002f28
 8007b00:	000041a4 	.word	0x000041a4
 8007b04:	000041a6 	.word	0x000041a6
 8007b08:	000041a8 	.word	0x000041a8
 8007b0c:	000041aa 	.word	0x000041aa
 8007b10:	0000406c 	.word	0x0000406c
 8007b14:	00004068 	.word	0x00004068
 8007b18:	00004070 	.word	0x00004070
 8007b1c:	000040b4 	.word	0x000040b4
 8007b20:	000040b8 	.word	0x000040b8
 8007b24:	000040bc 	.word	0x000040bc
 8007b28:	0000007c 	.word	0x0000007c
 8007b2c:	b2d9      	uxtb	r1, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	01db      	lsls	r3, r3, #7
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	3372      	adds	r3, #114	@ 0x72
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	482d      	ldr	r0, [pc, #180]	@ (8007bf4 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8007b42:	f7ff fd8c 	bl	800765e <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	01db      	lsls	r3, r3, #7
 8007b4a:	3372      	adds	r3, #114	@ 0x72
 8007b4c:	4a29      	ldr	r2, [pc, #164]	@ (8007bf4 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007b4e:	2120      	movs	r1, #32
 8007b50:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 8007b52:	4b29      	ldr	r3, [pc, #164]	@ (8007bf8 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	b218      	sxth	r0, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	01db      	lsls	r3, r3, #7
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	3373      	adds	r3, #115	@ 0x73
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	01db      	lsls	r3, r3, #7
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	3377      	adds	r3, #119	@ 0x77
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	4920      	ldr	r1, [pc, #128]	@ (8007bf4 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007b72:	f7ff fd15 	bl	80075a0 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	01db      	lsls	r3, r3, #7
 8007b7a:	3377      	adds	r3, #119	@ 0x77
 8007b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8007bf4 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007b7e:	2120      	movs	r1, #32
 8007b80:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.dron_status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 8007b82:	4b1d      	ldr	r3, [pc, #116]	@ (8007bf8 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007b84:	8a5b      	ldrh	r3, [r3, #18]
 8007b86:	b218      	sxth	r0, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	01db      	lsls	r3, r3, #7
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	3378      	adds	r3, #120	@ 0x78
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	01db      	lsls	r3, r3, #7
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	337a      	adds	r3, #122	@ 0x7a
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	4914      	ldr	r1, [pc, #80]	@ (8007bf4 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007ba2:	f7ff fcfd 	bl	80075a0 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	01db      	lsls	r3, r3, #7
 8007baa:	337a      	adds	r3, #122	@ 0x7a
 8007bac:	4a11      	ldr	r2, [pc, #68]	@ (8007bf4 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007bae:	2120      	movs	r1, #32
 8007bb0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(Mag_Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 8007bb2:	4b12      	ldr	r3, [pc, #72]	@ (8007bfc <uSD_Card_SendData_To_Buffer+0x3a8>)
 8007bb4:	edd3 7a00 	vldr	s15, [r3]
 8007bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bbc:	ee17 3a90 	vmov	r3, s15
 8007bc0:	b218      	sxth	r0, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	01db      	lsls	r3, r3, #7
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	337b      	adds	r3, #123	@ 0x7b
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	01db      	lsls	r3, r3, #7
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	337f      	adds	r3, #127	@ 0x7f
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	4906      	ldr	r1, [pc, #24]	@ (8007bf4 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007bdc:	f7ff fce0 	bl	80075a0 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3301      	adds	r3, #1
 8007be4:	01db      	lsls	r3, r3, #7
 8007be6:	4a03      	ldr	r2, [pc, #12]	@ (8007bf4 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007be8:	210a      	movs	r1, #10
 8007bea:	54d1      	strb	r1, [r2, r3]
}
 8007bec:	bf00      	nop
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	24002f28 	.word	0x24002f28
 8007bf8:	00000178 	.word	0x00000178
 8007bfc:	00000058 	.word	0x00000058

08007c00 <Stack_Push>:

void Stack_Push(float data){
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 8007c0a:	4b22      	ldr	r3, [pc, #136]	@ (8007c94 <Stack_Push+0x94>)
 8007c0c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c10:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007c14:	3301      	adds	r3, #1
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	4b1e      	ldr	r3, [pc, #120]	@ (8007c94 <Stack_Push+0x94>)
 8007c1a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c1e:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 8007c22:	4b1c      	ldr	r3, [pc, #112]	@ (8007c94 <Stack_Push+0x94>)
 8007c24:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c28:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007c2c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007c30:	d105      	bne.n	8007c3e <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 8007c32:	4b18      	ldr	r3, [pc, #96]	@ (8007c94 <Stack_Push+0x94>)
 8007c34:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 8007c3e:	4b15      	ldr	r3, [pc, #84]	@ (8007c94 <Stack_Push+0x94>)
 8007c40:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c44:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007c48:	4a12      	ldr	r2, [pc, #72]	@ (8007c94 <Stack_Push+0x94>)
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 8007c52:	4b10      	ldr	r3, [pc, #64]	@ (8007c94 <Stack_Push+0x94>)
 8007c54:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c58:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	4b0c      	ldr	r3, [pc, #48]	@ (8007c94 <Stack_Push+0x94>)
 8007c62:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c66:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 8007c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007c94 <Stack_Push+0x94>)
 8007c6c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c70:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007c74:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007c78:	d105      	bne.n	8007c86 <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 8007c7a:	4b06      	ldr	r3, [pc, #24]	@ (8007c94 <Stack_Push+0x94>)
 8007c7c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c80:	2200      	movs	r2, #0
 8007c82:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	0000019c 	.word	0x0000019c

08007c98 <ROOL_MAX_VAL>:

int16_t ROOL_MAX_VAL(void){
 8007c98:	b480      	push	{r7}
 8007c9a:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 2;
 8007c9c:	4b05      	ldr	r3, [pc, #20]	@ (8007cb4 <ROOL_MAX_VAL+0x1c>)
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return 5000;
 8007ca4:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	00000178 	.word	0x00000178

08007cb8 <ROOL_MIN_VAL>:
int16_t ROOL_MIN_VAL(void){
 8007cb8:	b480      	push	{r7}
 8007cba:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 1;
 8007cbc:	4b04      	ldr	r3, [pc, #16]	@ (8007cd0 <ROOL_MIN_VAL+0x18>)
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return -5000;
 8007cc4:	4b03      	ldr	r3, [pc, #12]	@ (8007cd4 <ROOL_MIN_VAL+0x1c>)
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	00000178 	.word	0x00000178
 8007cd4:	ffffec78 	.word	0xffffec78

08007cd8 <PITCH_MAX_VAL>:
int16_t PITCH_MAX_VAL(void){
 8007cd8:	b480      	push	{r7}
 8007cda:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 2;
 8007cdc:	4b05      	ldr	r3, [pc, #20]	@ (8007cf4 <PITCH_MAX_VAL+0x1c>)
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return 5000;
 8007ce4:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	00000178 	.word	0x00000178

08007cf8 <PITCH_MIN_VAL>:
int16_t PITCH_MIN_VAL(void){
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 1;
 8007cfc:	4b04      	ldr	r3, [pc, #16]	@ (8007d10 <PITCH_MIN_VAL+0x18>)
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return -5000;
 8007d04:	4b03      	ldr	r3, [pc, #12]	@ (8007d14 <PITCH_MIN_VAL+0x1c>)
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	00000178 	.word	0x00000178
 8007d14:	ffffec78 	.word	0xffffec78

08007d18 <YAW_MAX_VAL>:
int16_t YAW_MAX_VAL(void){
 8007d18:	b480      	push	{r7}
 8007d1a:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 2;
 8007d1c:	4b05      	ldr	r3, [pc, #20]	@ (8007d34 <YAW_MAX_VAL+0x1c>)
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return 5000;
 8007d24:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	00000178 	.word	0x00000178

08007d38 <YAW_MIN_VAL>:
int16_t YAW_MIN_VAL(void){
 8007d38:	b480      	push	{r7}
 8007d3a:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 1;
 8007d3c:	4b04      	ldr	r3, [pc, #16]	@ (8007d50 <YAW_MIN_VAL+0x18>)
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return -5000;
 8007d44:	4b03      	ldr	r3, [pc, #12]	@ (8007d54 <YAW_MIN_VAL+0x1c>)
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	00000178 	.word	0x00000178
 8007d54:	ffffec78 	.word	0xffffec78

08007d58 <ROOL_GOOD_VAL>:
int16_t ROOL_GOOD_VAL(void){
 8007d58:	b480      	push	{r7}
 8007d5a:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 0;
 8007d5c:	4b08      	ldr	r3, [pc, #32]	@ (8007d80 <ROOL_GOOD_VAL+0x28>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return pid_angular_rate_rool;
 8007d64:	4b07      	ldr	r3, [pc, #28]	@ (8007d84 <ROOL_GOOD_VAL+0x2c>)
 8007d66:	edd3 7a00 	vldr	s15, [r3]
 8007d6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d6e:	ee17 3a90 	vmov	r3, s15
 8007d72:	b21b      	sxth	r3, r3
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	00000178 	.word	0x00000178
 8007d84:	000040e0 	.word	0x000040e0

08007d88 <PITCH_GOOD_VAL>:
int16_t PITCH_GOOD_VAL(void){
 8007d88:	b480      	push	{r7}
 8007d8a:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 0;
 8007d8c:	4b08      	ldr	r3, [pc, #32]	@ (8007db0 <PITCH_GOOD_VAL+0x28>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return pid_angular_rate_pitch;
 8007d94:	4b07      	ldr	r3, [pc, #28]	@ (8007db4 <PITCH_GOOD_VAL+0x2c>)
 8007d96:	edd3 7a00 	vldr	s15, [r3]
 8007d9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d9e:	ee17 3a90 	vmov	r3, s15
 8007da2:	b21b      	sxth	r3, r3
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	00000178 	.word	0x00000178
 8007db4:	000040d8 	.word	0x000040d8

08007db8 <YAW_GOOD_VAL>:
int16_t YAW_GOOD_VAL(void){
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 0;
 8007dbc:	4b08      	ldr	r3, [pc, #32]	@ (8007de0 <YAW_GOOD_VAL+0x28>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return pid_angular_rate_yaw;
 8007dc4:	4b07      	ldr	r3, [pc, #28]	@ (8007de4 <YAW_GOOD_VAL+0x2c>)
 8007dc6:	edd3 7a00 	vldr	s15, [r3]
 8007dca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007dce:	ee17 3a90 	vmov	r3, s15
 8007dd2:	b21b      	sxth	r3, r3
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	00000178 	.word	0x00000178
 8007de4:	000040dc 	.word	0x000040dc

08007de8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007dee:	463b      	mov	r3, r7
 8007df0:	2200      	movs	r2, #0
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	605a      	str	r2, [r3, #4]
 8007df6:	609a      	str	r2, [r3, #8]
 8007df8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007dfa:	f003 fc3d 	bl	800b678 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007e0a:	231f      	movs	r3, #31
 8007e0c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007e0e:	2387      	movs	r3, #135	@ 0x87
 8007e10:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007e16:	2300      	movs	r3, #0
 8007e18:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007e22:	2300      	movs	r3, #0
 8007e24:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007e26:	2300      	movs	r3, #0
 8007e28:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007e2a:	463b      	mov	r3, r7
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f003 fc5b 	bl	800b6e8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007e32:	2004      	movs	r0, #4
 8007e34:	f003 fc38 	bl	800b6a8 <HAL_MPU_Enable>

}
 8007e38:	bf00      	nop
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007e40:	b480      	push	{r7}
 8007e42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007e44:	b672      	cpsid	i
}
 8007e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007e48:	bf00      	nop
 8007e4a:	e7fd      	b.n	8007e48 <Error_Handler+0x8>

08007e4c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi6;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007e50:	4b27      	ldr	r3, [pc, #156]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007e52:	4a28      	ldr	r2, [pc, #160]	@ (8007ef4 <MX_SPI2_Init+0xa8>)
 8007e54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007e56:	4b26      	ldr	r3, [pc, #152]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007e58:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007e5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007e5e:	4b24      	ldr	r3, [pc, #144]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007e64:	4b22      	ldr	r3, [pc, #136]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007e66:	2207      	movs	r2, #7
 8007e68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e6a:	4b21      	ldr	r3, [pc, #132]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007e70:	4b1f      	ldr	r3, [pc, #124]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007e76:	4b1e      	ldr	r3, [pc, #120]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007e78:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007e7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007e84:	4b1a      	ldr	r3, [pc, #104]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007e8a:	4b19      	ldr	r3, [pc, #100]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e90:	4b17      	ldr	r3, [pc, #92]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007e96:	4b16      	ldr	r3, [pc, #88]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007e9c:	4b14      	ldr	r3, [pc, #80]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007e9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007ea2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007ea4:	4b12      	ldr	r3, [pc, #72]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007eaa:	4b11      	ldr	r3, [pc, #68]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007ec8:	4b09      	ldr	r3, [pc, #36]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007ece:	4b08      	ldr	r3, [pc, #32]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007ed4:	4b06      	ldr	r3, [pc, #24]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007eda:	4805      	ldr	r0, [pc, #20]	@ (8007ef0 <MX_SPI2_Init+0xa4>)
 8007edc:	f00c fc8e 	bl	80147fc <HAL_SPI_Init>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8007ee6:	f7ff ffab 	bl	8007e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007eea:	bf00      	nop
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	240001ec 	.word	0x240001ec
 8007ef4:	40003800 	.word	0x40003800

08007ef8 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8007efc:	4b27      	ldr	r3, [pc, #156]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007efe:	4a28      	ldr	r2, [pc, #160]	@ (8007fa0 <MX_SPI6_Init+0xa8>)
 8007f00:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8007f02:	4b26      	ldr	r3, [pc, #152]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f04:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007f08:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8007f0a:	4b24      	ldr	r3, [pc, #144]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8007f10:	4b22      	ldr	r3, [pc, #136]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f12:	2207      	movs	r2, #7
 8007f14:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f16:	4b21      	ldr	r3, [pc, #132]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8007f22:	4b1e      	ldr	r3, [pc, #120]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f24:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007f28:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007f30:	4b1a      	ldr	r3, [pc, #104]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8007f36:	4b19      	ldr	r3, [pc, #100]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f3c:	4b17      	ldr	r3, [pc, #92]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8007f42:	4b16      	ldr	r3, [pc, #88]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007f48:	4b14      	ldr	r3, [pc, #80]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007f4e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007f50:	4b12      	ldr	r3, [pc, #72]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007f56:	4b11      	ldr	r3, [pc, #68]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007f62:	4b0e      	ldr	r3, [pc, #56]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007f68:	4b0c      	ldr	r3, [pc, #48]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007f74:	4b09      	ldr	r3, [pc, #36]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007f7a:	4b08      	ldr	r3, [pc, #32]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007f80:	4b06      	ldr	r3, [pc, #24]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8007f86:	4805      	ldr	r0, [pc, #20]	@ (8007f9c <MX_SPI6_Init+0xa4>)
 8007f88:	f00c fc38 	bl	80147fc <HAL_SPI_Init>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8007f92:	f7ff ff55 	bl	8007e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8007f96:	bf00      	nop
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	24000274 	.word	0x24000274
 8007fa0:	58001400 	.word	0x58001400

08007fa4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b0ba      	sub	sp, #232	@ 0xe8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	605a      	str	r2, [r3, #4]
 8007fb6:	609a      	str	r2, [r3, #8]
 8007fb8:	60da      	str	r2, [r3, #12]
 8007fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007fbc:	f107 0318 	add.w	r3, r7, #24
 8007fc0:	22b8      	movs	r2, #184	@ 0xb8
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f016 f871 	bl	801e0ac <memset>
  if(spiHandle->Instance==SPI2)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a77      	ldr	r2, [pc, #476]	@ (80081ac <HAL_SPI_MspInit+0x208>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	f040 8089 	bne.w	80080e8 <HAL_SPI_MspInit+0x144>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007fd6:	4b76      	ldr	r3, [pc, #472]	@ (80081b0 <HAL_SPI_MspInit+0x20c>)
 8007fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fdc:	4a74      	ldr	r2, [pc, #464]	@ (80081b0 <HAL_SPI_MspInit+0x20c>)
 8007fde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007fe2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007fe6:	4b72      	ldr	r3, [pc, #456]	@ (80081b0 <HAL_SPI_MspInit+0x20c>)
 8007fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ff0:	617b      	str	r3, [r7, #20]
 8007ff2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ff4:	4b6e      	ldr	r3, [pc, #440]	@ (80081b0 <HAL_SPI_MspInit+0x20c>)
 8007ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ffa:	4a6d      	ldr	r2, [pc, #436]	@ (80081b0 <HAL_SPI_MspInit+0x20c>)
 8007ffc:	f043 0302 	orr.w	r3, r3, #2
 8008000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008004:	4b6a      	ldr	r3, [pc, #424]	@ (80081b0 <HAL_SPI_MspInit+0x20c>)
 8008006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800800a:	f003 0302 	and.w	r3, r3, #2
 800800e:	613b      	str	r3, [r7, #16]
 8008010:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008012:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008016:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800801a:	2302      	movs	r3, #2
 800801c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008020:	2300      	movs	r3, #0
 8008022:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8008026:	2301      	movs	r3, #1
 8008028:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800802c:	2305      	movs	r3, #5
 800802e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008032:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008036:	4619      	mov	r1, r3
 8008038:	485e      	ldr	r0, [pc, #376]	@ (80081b4 <HAL_SPI_MspInit+0x210>)
 800803a:	f006 f9e7 	bl	800e40c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800803e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8008042:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008046:	2302      	movs	r3, #2
 8008048:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800804c:	2301      	movs	r3, #1
 800804e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8008052:	2301      	movs	r3, #1
 8008054:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008058:	2305      	movs	r3, #5
 800805a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800805e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008062:	4619      	mov	r1, r3
 8008064:	4853      	ldr	r0, [pc, #332]	@ (80081b4 <HAL_SPI_MspInit+0x210>)
 8008066:	f006 f9d1 	bl	800e40c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream0;
 800806a:	4b53      	ldr	r3, [pc, #332]	@ (80081b8 <HAL_SPI_MspInit+0x214>)
 800806c:	4a53      	ldr	r2, [pc, #332]	@ (80081bc <HAL_SPI_MspInit+0x218>)
 800806e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8008070:	4b51      	ldr	r3, [pc, #324]	@ (80081b8 <HAL_SPI_MspInit+0x214>)
 8008072:	2228      	movs	r2, #40	@ 0x28
 8008074:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008076:	4b50      	ldr	r3, [pc, #320]	@ (80081b8 <HAL_SPI_MspInit+0x214>)
 8008078:	2240      	movs	r2, #64	@ 0x40
 800807a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800807c:	4b4e      	ldr	r3, [pc, #312]	@ (80081b8 <HAL_SPI_MspInit+0x214>)
 800807e:	2200      	movs	r2, #0
 8008080:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008082:	4b4d      	ldr	r3, [pc, #308]	@ (80081b8 <HAL_SPI_MspInit+0x214>)
 8008084:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008088:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800808a:	4b4b      	ldr	r3, [pc, #300]	@ (80081b8 <HAL_SPI_MspInit+0x214>)
 800808c:	2200      	movs	r2, #0
 800808e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008090:	4b49      	ldr	r3, [pc, #292]	@ (80081b8 <HAL_SPI_MspInit+0x214>)
 8008092:	2200      	movs	r2, #0
 8008094:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8008096:	4b48      	ldr	r3, [pc, #288]	@ (80081b8 <HAL_SPI_MspInit+0x214>)
 8008098:	2200      	movs	r2, #0
 800809a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800809c:	4b46      	ldr	r3, [pc, #280]	@ (80081b8 <HAL_SPI_MspInit+0x214>)
 800809e:	2200      	movs	r2, #0
 80080a0:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80080a2:	4b45      	ldr	r3, [pc, #276]	@ (80081b8 <HAL_SPI_MspInit+0x214>)
 80080a4:	2204      	movs	r2, #4
 80080a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80080a8:	4b43      	ldr	r3, [pc, #268]	@ (80081b8 <HAL_SPI_MspInit+0x214>)
 80080aa:	2203      	movs	r2, #3
 80080ac:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80080ae:	4b42      	ldr	r3, [pc, #264]	@ (80081b8 <HAL_SPI_MspInit+0x214>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80080b4:	4b40      	ldr	r3, [pc, #256]	@ (80081b8 <HAL_SPI_MspInit+0x214>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80080ba:	483f      	ldr	r0, [pc, #252]	@ (80081b8 <HAL_SPI_MspInit+0x214>)
 80080bc:	f003 fb54 	bl	800b768 <HAL_DMA_Init>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 80080c6:	f7ff febb 	bl	8007e40 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a3a      	ldr	r2, [pc, #232]	@ (80081b8 <HAL_SPI_MspInit+0x214>)
 80080ce:	679a      	str	r2, [r3, #120]	@ 0x78
 80080d0:	4a39      	ldr	r2, [pc, #228]	@ (80081b8 <HAL_SPI_MspInit+0x214>)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80080d6:	2200      	movs	r2, #0
 80080d8:	2100      	movs	r1, #0
 80080da:	2024      	movs	r0, #36	@ 0x24
 80080dc:	f003 fa97 	bl	800b60e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80080e0:	2024      	movs	r0, #36	@ 0x24
 80080e2:	f003 faae 	bl	800b642 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 80080e6:	e05c      	b.n	80081a2 <HAL_SPI_MspInit+0x1fe>
  else if(spiHandle->Instance==SPI6)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a34      	ldr	r2, [pc, #208]	@ (80081c0 <HAL_SPI_MspInit+0x21c>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d157      	bne.n	80081a2 <HAL_SPI_MspInit+0x1fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 80080f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80080f6:	f04f 0300 	mov.w	r3, #0
 80080fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 80080fe:	2318      	movs	r3, #24
 8008100:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 8008102:	23c8      	movs	r3, #200	@ 0xc8
 8008104:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 1;
 8008106:	2301      	movs	r3, #1
 8008108:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 800810a:	230a      	movs	r3, #10
 800810c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800810e:	2302      	movs	r3, #2
 8008110:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8008112:	2300      	movs	r3, #0
 8008114:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8008116:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800811a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL3;
 8008120:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8008124:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008128:	f107 0318 	add.w	r3, r7, #24
 800812c:	4618      	mov	r0, r3
 800812e:	f009 ff7f 	bl	8012030 <HAL_RCCEx_PeriphCLKConfig>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <HAL_SPI_MspInit+0x198>
      Error_Handler();
 8008138:	f7ff fe82 	bl	8007e40 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 800813c:	4b1c      	ldr	r3, [pc, #112]	@ (80081b0 <HAL_SPI_MspInit+0x20c>)
 800813e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008142:	4a1b      	ldr	r2, [pc, #108]	@ (80081b0 <HAL_SPI_MspInit+0x20c>)
 8008144:	f043 0320 	orr.w	r3, r3, #32
 8008148:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800814c:	4b18      	ldr	r3, [pc, #96]	@ (80081b0 <HAL_SPI_MspInit+0x20c>)
 800814e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	60fb      	str	r3, [r7, #12]
 8008158:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800815a:	4b15      	ldr	r3, [pc, #84]	@ (80081b0 <HAL_SPI_MspInit+0x20c>)
 800815c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008160:	4a13      	ldr	r2, [pc, #76]	@ (80081b0 <HAL_SPI_MspInit+0x20c>)
 8008162:	f043 0302 	orr.w	r3, r3, #2
 8008166:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800816a:	4b11      	ldr	r3, [pc, #68]	@ (80081b0 <HAL_SPI_MspInit+0x20c>)
 800816c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008170:	f003 0302 	and.w	r3, r3, #2
 8008174:	60bb      	str	r3, [r7, #8]
 8008176:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8008178:	2338      	movs	r3, #56	@ 0x38
 800817a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800817e:	2302      	movs	r3, #2
 8008180:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008184:	2300      	movs	r3, #0
 8008186:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800818a:	2300      	movs	r3, #0
 800818c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8008190:	2308      	movs	r3, #8
 8008192:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008196:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800819a:	4619      	mov	r1, r3
 800819c:	4805      	ldr	r0, [pc, #20]	@ (80081b4 <HAL_SPI_MspInit+0x210>)
 800819e:	f006 f935 	bl	800e40c <HAL_GPIO_Init>
}
 80081a2:	bf00      	nop
 80081a4:	37e8      	adds	r7, #232	@ 0xe8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	40003800 	.word	0x40003800
 80081b0:	58024400 	.word	0x58024400
 80081b4:	58020400 	.word	0x58020400
 80081b8:	240002fc 	.word	0x240002fc
 80081bc:	40020010 	.word	0x40020010
 80081c0:	58001400 	.word	0x58001400

080081c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081ca:	4b0a      	ldr	r3, [pc, #40]	@ (80081f4 <HAL_MspInit+0x30>)
 80081cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081d0:	4a08      	ldr	r2, [pc, #32]	@ (80081f4 <HAL_MspInit+0x30>)
 80081d2:	f043 0302 	orr.w	r3, r3, #2
 80081d6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80081da:	4b06      	ldr	r3, [pc, #24]	@ (80081f4 <HAL_MspInit+0x30>)
 80081dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	607b      	str	r3, [r7, #4]
 80081e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr
 80081f4:	58024400 	.word	0x58024400

080081f8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 80081f8:	b480      	push	{r7}
 80081fa:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80081fc:	4b0b      	ldr	r3, [pc, #44]	@ (800822c <SDTimer_Handler+0x34>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d004      	beq.n	800820e <SDTimer_Handler+0x16>
    Timer1--;
 8008204:	4b09      	ldr	r3, [pc, #36]	@ (800822c <SDTimer_Handler+0x34>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3b01      	subs	r3, #1
 800820a:	4a08      	ldr	r2, [pc, #32]	@ (800822c <SDTimer_Handler+0x34>)
 800820c:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 800820e:	4b08      	ldr	r3, [pc, #32]	@ (8008230 <SDTimer_Handler+0x38>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d004      	beq.n	8008220 <SDTimer_Handler+0x28>
    Timer2--;
 8008216:	4b06      	ldr	r3, [pc, #24]	@ (8008230 <SDTimer_Handler+0x38>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3b01      	subs	r3, #1
 800821c:	4a04      	ldr	r2, [pc, #16]	@ (8008230 <SDTimer_Handler+0x38>)
 800821e:	6013      	str	r3, [r2, #0]
}
 8008220:	bf00      	nop
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	24000378 	.word	0x24000378
 8008230:	2400037c 	.word	0x2400037c
 8008234:	00000000 	.word	0x00000000

08008238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 800823e:	2200      	movs	r2, #0
 8008240:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008244:	48bc      	ldr	r0, [pc, #752]	@ (8008538 <NMI_Handler+0x300>)
 8008246:	f006 faa1 	bl	800e78c <HAL_GPIO_WritePin>
	LED_Y_0;
 800824a:	2200      	movs	r2, #0
 800824c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008250:	48ba      	ldr	r0, [pc, #744]	@ (800853c <NMI_Handler+0x304>)
 8008252:	f006 fa9b 	bl	800e78c <HAL_GPIO_WritePin>
	LED_R_1;
 8008256:	2201      	movs	r2, #1
 8008258:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800825c:	48b7      	ldr	r0, [pc, #732]	@ (800853c <NMI_Handler+0x304>)
 800825e:	f006 fa95 	bl	800e78c <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 8008262:	48b7      	ldr	r0, [pc, #732]	@ (8008540 <NMI_Handler+0x308>)
 8008264:	f015 fd2a 	bl	801dcbc <f_close>

	wanted_rool = 0;
 8008268:	4bb6      	ldr	r3, [pc, #728]	@ (8008544 <NMI_Handler+0x30c>)
 800826a:	f04f 0200 	mov.w	r2, #0
 800826e:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008270:	4bb5      	ldr	r3, [pc, #724]	@ (8008548 <NMI_Handler+0x310>)
 8008272:	f04f 0200 	mov.w	r2, #0
 8008276:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008278:	4bb4      	ldr	r3, [pc, #720]	@ (800854c <NMI_Handler+0x314>)
 800827a:	f04f 0200 	mov.w	r2, #0
 800827e:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008280:	4bb3      	ldr	r3, [pc, #716]	@ (8008550 <NMI_Handler+0x318>)
 8008282:	881b      	ldrh	r3, [r3, #0]
 8008284:	b21a      	sxth	r2, r3
 8008286:	4bb3      	ldr	r3, [pc, #716]	@ (8008554 <NMI_Handler+0x31c>)
 8008288:	801a      	strh	r2, [r3, #0]
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   	HAL_Delay(1);
 800828a:	2001      	movs	r0, #1
 800828c:	f001 f942 	bl	8009514 <HAL_Delay>
		MPU6050_GET_ACCANDGYR_CALANDSCL(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 8008290:	4bb1      	ldr	r3, [pc, #708]	@ (8008558 <NMI_Handler+0x320>)
 8008292:	edd3 7a00 	vldr	s15, [r3]
 8008296:	4bb1      	ldr	r3, [pc, #708]	@ (800855c <NMI_Handler+0x324>)
 8008298:	ed93 7a00 	vldr	s14, [r3]
 800829c:	4bb0      	ldr	r3, [pc, #704]	@ (8008560 <NMI_Handler+0x328>)
 800829e:	edd3 6a00 	vldr	s13, [r3]
 80082a2:	4bb0      	ldr	r3, [pc, #704]	@ (8008564 <NMI_Handler+0x32c>)
 80082a4:	ed93 6a00 	vldr	s12, [r3]
 80082a8:	4baf      	ldr	r3, [pc, #700]	@ (8008568 <NMI_Handler+0x330>)
 80082aa:	edd3 5a00 	vldr	s11, [r3]
 80082ae:	4baf      	ldr	r3, [pc, #700]	@ (800856c <NMI_Handler+0x334>)
 80082b0:	ed93 5a00 	vldr	s10, [r3]
 80082b4:	4bae      	ldr	r3, [pc, #696]	@ (8008570 <NMI_Handler+0x338>)
 80082b6:	edd3 4a00 	vldr	s9, [r3]
 80082ba:	4bae      	ldr	r3, [pc, #696]	@ (8008574 <NMI_Handler+0x33c>)
 80082bc:	ed93 4a00 	vldr	s8, [r3]
 80082c0:	4bad      	ldr	r3, [pc, #692]	@ (8008578 <NMI_Handler+0x340>)
 80082c2:	9301      	str	r3, [sp, #4]
 80082c4:	4bad      	ldr	r3, [pc, #692]	@ (800857c <NMI_Handler+0x344>)
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	eef0 3a44 	vmov.f32	s7, s8
 80082cc:	eeb0 3a64 	vmov.f32	s6, s9
 80082d0:	eef0 2a45 	vmov.f32	s5, s10
 80082d4:	eeb0 2a65 	vmov.f32	s4, s11
 80082d8:	eef0 1a46 	vmov.f32	s3, s12
 80082dc:	eeb0 1a66 	vmov.f32	s2, s13
 80082e0:	eef0 0a47 	vmov.f32	s1, s14
 80082e4:	eeb0 0a67 	vmov.f32	s0, s15
 80082e8:	4ba5      	ldr	r3, [pc, #660]	@ (8008580 <NMI_Handler+0x348>)
 80082ea:	4aa6      	ldr	r2, [pc, #664]	@ (8008584 <NMI_Handler+0x34c>)
 80082ec:	49a6      	ldr	r1, [pc, #664]	@ (8008588 <NMI_Handler+0x350>)
 80082ee:	48a7      	ldr	r0, [pc, #668]	@ (800858c <NMI_Handler+0x354>)
 80082f0:	f7f9 f984 	bl	80015fc <MPU6050_GET_ACCANDGYR_CALANDSCL>
		MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 80082f4:	4ba5      	ldr	r3, [pc, #660]	@ (800858c <NMI_Handler+0x354>)
 80082f6:	edd3 7a00 	vldr	s15, [r3]
 80082fa:	4ba3      	ldr	r3, [pc, #652]	@ (8008588 <NMI_Handler+0x350>)
 80082fc:	ed93 7a00 	vldr	s14, [r3]
 8008300:	4ba0      	ldr	r3, [pc, #640]	@ (8008584 <NMI_Handler+0x34c>)
 8008302:	edd3 6a00 	vldr	s13, [r3]
 8008306:	49a2      	ldr	r1, [pc, #648]	@ (8008590 <NMI_Handler+0x358>)
 8008308:	48a2      	ldr	r0, [pc, #648]	@ (8008594 <NMI_Handler+0x35c>)
 800830a:	eeb0 1a66 	vmov.f32	s2, s13
 800830e:	eef0 0a47 	vmov.f32	s1, s14
 8008312:	eeb0 0a67 	vmov.f32	s0, s15
 8008316:	f7f9 f8e7 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
		MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 800831a:	4b9e      	ldr	r3, [pc, #632]	@ (8008594 <NMI_Handler+0x35c>)
 800831c:	edd3 7a00 	vldr	s15, [r3]
 8008320:	4b9b      	ldr	r3, [pc, #620]	@ (8008590 <NMI_Handler+0x358>)
 8008322:	ed93 7a00 	vldr	s14, [r3]
 8008326:	4b9c      	ldr	r3, [pc, #624]	@ (8008598 <NMI_Handler+0x360>)
 8008328:	edd3 6a00 	vldr	s13, [r3]
 800832c:	4b94      	ldr	r3, [pc, #592]	@ (8008580 <NMI_Handler+0x348>)
 800832e:	ed93 6a00 	vldr	s12, [r3]
 8008332:	4b92      	ldr	r3, [pc, #584]	@ (800857c <NMI_Handler+0x344>)
 8008334:	edd3 5a00 	vldr	s11, [r3]
 8008338:	4b8f      	ldr	r3, [pc, #572]	@ (8008578 <NMI_Handler+0x340>)
 800833a:	ed93 5a00 	vldr	s10, [r3]
 800833e:	eef0 2a45 	vmov.f32	s5, s10
 8008342:	eeb0 2a65 	vmov.f32	s4, s11
 8008346:	eef0 1a46 	vmov.f32	s3, s12
 800834a:	eeb0 1a66 	vmov.f32	s2, s13
 800834e:	eef0 0a47 	vmov.f32	s1, s14
 8008352:	eeb0 0a67 	vmov.f32	s0, s15
 8008356:	4891      	ldr	r0, [pc, #580]	@ (800859c <NMI_Handler+0x364>)
 8008358:	f7f9 faca 	bl	80018f0 <MPU6050_GET_ACCANDGYR_FILTRED>


		now_pitch = data.x;
 800835c:	4b8f      	ldr	r3, [pc, #572]	@ (800859c <NMI_Handler+0x364>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a8f      	ldr	r2, [pc, #572]	@ (80085a0 <NMI_Handler+0x368>)
 8008362:	6013      	str	r3, [r2, #0]
		now_rool = data.y;
 8008364:	4b8d      	ldr	r3, [pc, #564]	@ (800859c <NMI_Handler+0x364>)
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	4a8e      	ldr	r2, [pc, #568]	@ (80085a4 <NMI_Handler+0x36c>)
 800836a:	6013      	str	r3, [r2, #0]
		now_yaw = data.z;
 800836c:	4b8b      	ldr	r3, [pc, #556]	@ (800859c <NMI_Handler+0x364>)
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	4a8d      	ldr	r2, [pc, #564]	@ (80085a8 <NMI_Handler+0x370>)
 8008372:	6013      	str	r3, [r2, #0]


		last_wanted_rool_rx = wanted_rool;
 8008374:	4b73      	ldr	r3, [pc, #460]	@ (8008544 <NMI_Handler+0x30c>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a8c      	ldr	r2, [pc, #560]	@ (80085ac <NMI_Handler+0x374>)
 800837a:	6013      	str	r3, [r2, #0]
		last_wanted_pitch_rx = wanted_pitch;
 800837c:	4b72      	ldr	r3, [pc, #456]	@ (8008548 <NMI_Handler+0x310>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a8b      	ldr	r2, [pc, #556]	@ (80085b0 <NMI_Handler+0x378>)
 8008382:	6013      	str	r3, [r2, #0]
		last_wanted_yaw_rx = wanted_yaw;
 8008384:	4b71      	ldr	r3, [pc, #452]	@ (800854c <NMI_Handler+0x314>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a8a      	ldr	r2, [pc, #552]	@ (80085b4 <NMI_Handler+0x37c>)
 800838a:	6013      	str	r3, [r2, #0]


		error_sum_pitch = error_sum_pitch + (wanted_pitch - now_pitch);
 800838c:	4b8a      	ldr	r3, [pc, #552]	@ (80085b8 <NMI_Handler+0x380>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	ee07 3a90 	vmov	s15, r3
 8008394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008398:	4b6b      	ldr	r3, [pc, #428]	@ (8008548 <NMI_Handler+0x310>)
 800839a:	edd3 6a00 	vldr	s13, [r3]
 800839e:	4b80      	ldr	r3, [pc, #512]	@ (80085a0 <NMI_Handler+0x368>)
 80083a0:	edd3 7a00 	vldr	s15, [r3]
 80083a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80083a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083b0:	ee17 2a90 	vmov	r2, s15
 80083b4:	4b80      	ldr	r3, [pc, #512]	@ (80085b8 <NMI_Handler+0x380>)
 80083b6:	601a      	str	r2, [r3, #0]
		error_sum_rool = error_sum_rool + (wanted_rool - now_rool);
 80083b8:	4b80      	ldr	r3, [pc, #512]	@ (80085bc <NMI_Handler+0x384>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	ee07 3a90 	vmov	s15, r3
 80083c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083c4:	4b5f      	ldr	r3, [pc, #380]	@ (8008544 <NMI_Handler+0x30c>)
 80083c6:	edd3 6a00 	vldr	s13, [r3]
 80083ca:	4b76      	ldr	r3, [pc, #472]	@ (80085a4 <NMI_Handler+0x36c>)
 80083cc:	edd3 7a00 	vldr	s15, [r3]
 80083d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80083d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083dc:	ee17 2a90 	vmov	r2, s15
 80083e0:	4b76      	ldr	r3, [pc, #472]	@ (80085bc <NMI_Handler+0x384>)
 80083e2:	601a      	str	r2, [r3, #0]
		error_sum_yaw = error_sum_yaw + (wanted_yaw - now_yaw);
 80083e4:	4b76      	ldr	r3, [pc, #472]	@ (80085c0 <NMI_Handler+0x388>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	ee07 3a90 	vmov	s15, r3
 80083ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083f0:	4b56      	ldr	r3, [pc, #344]	@ (800854c <NMI_Handler+0x314>)
 80083f2:	edd3 6a00 	vldr	s13, [r3]
 80083f6:	4b6c      	ldr	r3, [pc, #432]	@ (80085a8 <NMI_Handler+0x370>)
 80083f8:	edd3 7a00 	vldr	s15, [r3]
 80083fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008408:	ee17 2a90 	vmov	r2, s15
 800840c:	4b6c      	ldr	r3, [pc, #432]	@ (80085c0 <NMI_Handler+0x388>)
 800840e:	601a      	str	r2, [r3, #0]

		error_sum_angular_rate_pitch = error_sum_angular_rate_pitch + (pid_pitch - gx);
 8008410:	4b6c      	ldr	r3, [pc, #432]	@ (80085c4 <NMI_Handler+0x38c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	ee07 3a90 	vmov	s15, r3
 8008418:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800841c:	4b6a      	ldr	r3, [pc, #424]	@ (80085c8 <NMI_Handler+0x390>)
 800841e:	edd3 6a00 	vldr	s13, [r3]
 8008422:	4b57      	ldr	r3, [pc, #348]	@ (8008580 <NMI_Handler+0x348>)
 8008424:	edd3 7a00 	vldr	s15, [r3]
 8008428:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800842c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008434:	ee17 2a90 	vmov	r2, s15
 8008438:	4b62      	ldr	r3, [pc, #392]	@ (80085c4 <NMI_Handler+0x38c>)
 800843a:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_rool = error_sum_angular_rate_rool + (pid_rool - gy);
 800843c:	4b63      	ldr	r3, [pc, #396]	@ (80085cc <NMI_Handler+0x394>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	ee07 3a90 	vmov	s15, r3
 8008444:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008448:	4b61      	ldr	r3, [pc, #388]	@ (80085d0 <NMI_Handler+0x398>)
 800844a:	edd3 6a00 	vldr	s13, [r3]
 800844e:	4b4b      	ldr	r3, [pc, #300]	@ (800857c <NMI_Handler+0x344>)
 8008450:	edd3 7a00 	vldr	s15, [r3]
 8008454:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800845c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008460:	ee17 2a90 	vmov	r2, s15
 8008464:	4b59      	ldr	r3, [pc, #356]	@ (80085cc <NMI_Handler+0x394>)
 8008466:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_yaw = error_sum_angular_rate_yaw + (pid_yaw - gz);
 8008468:	4b5a      	ldr	r3, [pc, #360]	@ (80085d4 <NMI_Handler+0x39c>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	ee07 3a90 	vmov	s15, r3
 8008470:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008474:	4b58      	ldr	r3, [pc, #352]	@ (80085d8 <NMI_Handler+0x3a0>)
 8008476:	edd3 6a00 	vldr	s13, [r3]
 800847a:	4b3f      	ldr	r3, [pc, #252]	@ (8008578 <NMI_Handler+0x340>)
 800847c:	edd3 7a00 	vldr	s15, [r3]
 8008480:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800848c:	ee17 2a90 	vmov	r2, s15
 8008490:	4b50      	ldr	r3, [pc, #320]	@ (80085d4 <NMI_Handler+0x39c>)
 8008492:	601a      	str	r2, [r3, #0]


		PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8008494:	2201      	movs	r2, #1
 8008496:	4951      	ldr	r1, [pc, #324]	@ (80085dc <NMI_Handler+0x3a4>)
 8008498:	484b      	ldr	r0, [pc, #300]	@ (80085c8 <NMI_Handler+0x390>)
 800849a:	f7fb fa97 	bl	80039cc <PID_cal>
		PID_cal(&pid_rool, PID_FAC_Rool, 2);
 800849e:	2202      	movs	r2, #2
 80084a0:	494f      	ldr	r1, [pc, #316]	@ (80085e0 <NMI_Handler+0x3a8>)
 80084a2:	484b      	ldr	r0, [pc, #300]	@ (80085d0 <NMI_Handler+0x398>)
 80084a4:	f7fb fa92 	bl	80039cc <PID_cal>

		PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 80084a8:	2204      	movs	r2, #4
 80084aa:	494e      	ldr	r1, [pc, #312]	@ (80085e4 <NMI_Handler+0x3ac>)
 80084ac:	484e      	ldr	r0, [pc, #312]	@ (80085e8 <NMI_Handler+0x3b0>)
 80084ae:	f7fb fa8d 	bl	80039cc <PID_cal>
		PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 80084b2:	2205      	movs	r2, #5
 80084b4:	494d      	ldr	r1, [pc, #308]	@ (80085ec <NMI_Handler+0x3b4>)
 80084b6:	484e      	ldr	r0, [pc, #312]	@ (80085f0 <NMI_Handler+0x3b8>)
 80084b8:	f7fb fa88 	bl	80039cc <PID_cal>
		PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 80084bc:	2206      	movs	r2, #6
 80084be:	494d      	ldr	r1, [pc, #308]	@ (80085f4 <NMI_Handler+0x3bc>)
 80084c0:	484d      	ldr	r0, [pc, #308]	@ (80085f8 <NMI_Handler+0x3c0>)
 80084c2:	f7fb fa83 	bl	80039cc <PID_cal>


		old_error_pitch = wanted_pitch - now_pitch;
 80084c6:	4b20      	ldr	r3, [pc, #128]	@ (8008548 <NMI_Handler+0x310>)
 80084c8:	ed93 7a00 	vldr	s14, [r3]
 80084cc:	4b34      	ldr	r3, [pc, #208]	@ (80085a0 <NMI_Handler+0x368>)
 80084ce:	edd3 7a00 	vldr	s15, [r3]
 80084d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084d6:	4b49      	ldr	r3, [pc, #292]	@ (80085fc <NMI_Handler+0x3c4>)
 80084d8:	edc3 7a00 	vstr	s15, [r3]
		old_error_rool = wanted_rool - now_rool;
 80084dc:	4b19      	ldr	r3, [pc, #100]	@ (8008544 <NMI_Handler+0x30c>)
 80084de:	ed93 7a00 	vldr	s14, [r3]
 80084e2:	4b30      	ldr	r3, [pc, #192]	@ (80085a4 <NMI_Handler+0x36c>)
 80084e4:	edd3 7a00 	vldr	s15, [r3]
 80084e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084ec:	4b44      	ldr	r3, [pc, #272]	@ (8008600 <NMI_Handler+0x3c8>)
 80084ee:	edc3 7a00 	vstr	s15, [r3]

		old_error_angular_rate_pitch = pid_pitch - gx;
 80084f2:	4b35      	ldr	r3, [pc, #212]	@ (80085c8 <NMI_Handler+0x390>)
 80084f4:	ed93 7a00 	vldr	s14, [r3]
 80084f8:	4b21      	ldr	r3, [pc, #132]	@ (8008580 <NMI_Handler+0x348>)
 80084fa:	edd3 7a00 	vldr	s15, [r3]
 80084fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008502:	4b40      	ldr	r3, [pc, #256]	@ (8008604 <NMI_Handler+0x3cc>)
 8008504:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_rool = pid_rool - gy;
 8008508:	4b31      	ldr	r3, [pc, #196]	@ (80085d0 <NMI_Handler+0x398>)
 800850a:	ed93 7a00 	vldr	s14, [r3]
 800850e:	4b1b      	ldr	r3, [pc, #108]	@ (800857c <NMI_Handler+0x344>)
 8008510:	edd3 7a00 	vldr	s15, [r3]
 8008514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008518:	4b3b      	ldr	r3, [pc, #236]	@ (8008608 <NMI_Handler+0x3d0>)
 800851a:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_yaw = wanted_yaw - gz;
 800851e:	4b0b      	ldr	r3, [pc, #44]	@ (800854c <NMI_Handler+0x314>)
 8008520:	ed93 7a00 	vldr	s14, [r3]
 8008524:	4b14      	ldr	r3, [pc, #80]	@ (8008578 <NMI_Handler+0x340>)
 8008526:	edd3 7a00 	vldr	s15, [r3]
 800852a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800852e:	4b37      	ldr	r3, [pc, #220]	@ (800860c <NMI_Handler+0x3d4>)
 8008530:	edc3 7a00 	vstr	s15, [r3]
 8008534:	e06c      	b.n	8008610 <NMI_Handler+0x3d8>
 8008536:	bf00      	nop
 8008538:	58021000 	.word	0x58021000
 800853c:	58020400 	.word	0x58020400
 8008540:	24001ef0 	.word	0x24001ef0
 8008544:	0000406c 	.word	0x0000406c
 8008548:	00004068 	.word	0x00004068
 800854c:	00004070 	.word	0x00004070
 8008550:	0801e9e0 	.word	0x0801e9e0
 8008554:	0000405c 	.word	0x0000405c
 8008558:	00000030 	.word	0x00000030
 800855c:	00000034 	.word	0x00000034
 8008560:	00000038 	.word	0x00000038
 8008564:	0000003c 	.word	0x0000003c
 8008568:	00000040 	.word	0x00000040
 800856c:	00000044 	.word	0x00000044
 8008570:	0801e9d4 	.word	0x0801e9d4
 8008574:	0801e9d8 	.word	0x0801e9d8
 8008578:	00000014 	.word	0x00000014
 800857c:	00000010 	.word	0x00000010
 8008580:	0000000c 	.word	0x0000000c
 8008584:	00000008 	.word	0x00000008
 8008588:	00000004 	.word	0x00000004
 800858c:	00000000 	.word	0x00000000
 8008590:	0000001c 	.word	0x0000001c
 8008594:	00000018 	.word	0x00000018
 8008598:	00000058 	.word	0x00000058
 800859c:	0000007c 	.word	0x0000007c
 80085a0:	00004078 	.word	0x00004078
 80085a4:	0000407c 	.word	0x0000407c
 80085a8:	00004080 	.word	0x00004080
 80085ac:	00004054 	.word	0x00004054
 80085b0:	00004050 	.word	0x00004050
 80085b4:	00004058 	.word	0x00004058
 80085b8:	000040b4 	.word	0x000040b4
 80085bc:	000040b8 	.word	0x000040b8
 80085c0:	000040bc 	.word	0x000040bc
 80085c4:	000040c0 	.word	0x000040c0
 80085c8:	000040cc 	.word	0x000040cc
 80085cc:	000040c4 	.word	0x000040c4
 80085d0:	000040d4 	.word	0x000040d4
 80085d4:	000040c8 	.word	0x000040c8
 80085d8:	000040d0 	.word	0x000040d0
 80085dc:	00004108 	.word	0x00004108
 80085e0:	0000411c 	.word	0x0000411c
 80085e4:	00004168 	.word	0x00004168
 80085e8:	000040d8 	.word	0x000040d8
 80085ec:	0000417c 	.word	0x0000417c
 80085f0:	000040e0 	.word	0x000040e0
 80085f4:	00004190 	.word	0x00004190
 80085f8:	000040dc 	.word	0x000040dc
 80085fc:	0000409c 	.word	0x0000409c
 8008600:	000040a0 	.word	0x000040a0
 8008604:	000040a8 	.word	0x000040a8
 8008608:	000040ac 	.word	0x000040ac
 800860c:	000040b0 	.word	0x000040b0


		MYDRON.ROOL = pid_angular_rate_rool;
 8008610:	4b99      	ldr	r3, [pc, #612]	@ (8008878 <NMI_Handler+0x640>)
 8008612:	edd3 7a00 	vldr	s15, [r3]
 8008616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800861a:	ee17 3a90 	vmov	r3, s15
 800861e:	b21a      	sxth	r2, r3
 8008620:	4b96      	ldr	r3, [pc, #600]	@ (800887c <NMI_Handler+0x644>)
 8008622:	80da      	strh	r2, [r3, #6]
		MYDRON.PITCH = pid_angular_rate_pitch;
 8008624:	4b96      	ldr	r3, [pc, #600]	@ (8008880 <NMI_Handler+0x648>)
 8008626:	edd3 7a00 	vldr	s15, [r3]
 800862a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800862e:	ee17 3a90 	vmov	r3, s15
 8008632:	b21a      	sxth	r2, r3
 8008634:	4b91      	ldr	r3, [pc, #580]	@ (800887c <NMI_Handler+0x644>)
 8008636:	809a      	strh	r2, [r3, #4]
		MYDRON.YAW = pid_angular_rate_yaw;
 8008638:	4b92      	ldr	r3, [pc, #584]	@ (8008884 <NMI_Handler+0x64c>)
 800863a:	edd3 7a00 	vldr	s15, [r3]
 800863e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008642:	ee17 3a90 	vmov	r3, s15
 8008646:	b21a      	sxth	r2, r3
 8008648:	4b8c      	ldr	r3, [pc, #560]	@ (800887c <NMI_Handler+0x644>)
 800864a:	811a      	strh	r2, [r3, #8]



		Thrust_filter(1);
 800864c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8008650:	f7fb f892 	bl	8003778 <Thrust_filter>
		if(MYDRON.THRUST > thrust_limit){
 8008654:	4b89      	ldr	r3, [pc, #548]	@ (800887c <NMI_Handler+0x644>)
 8008656:	885b      	ldrh	r3, [r3, #2]
 8008658:	461a      	mov	r2, r3
 800865a:	4b8b      	ldr	r3, [pc, #556]	@ (8008888 <NMI_Handler+0x650>)
 800865c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008660:	429a      	cmp	r2, r3
 8008662:	dd05      	ble.n	8008670 <NMI_Handler+0x438>
			MYDRON.THRUST = thrust_limit;
 8008664:	4b88      	ldr	r3, [pc, #544]	@ (8008888 <NMI_Handler+0x650>)
 8008666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800866a:	b29a      	uxth	r2, r3
 800866c:	4b83      	ldr	r3, [pc, #524]	@ (800887c <NMI_Handler+0x644>)
 800866e:	805a      	strh	r2, [r3, #2]
		}


		SPEED1 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//trust 7000 max
 8008670:	4b82      	ldr	r3, [pc, #520]	@ (800887c <NMI_Handler+0x644>)
 8008672:	885b      	ldrh	r3, [r3, #2]
 8008674:	ee07 3a90 	vmov	s15, r3
 8008678:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800867c:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8008860 <NMI_Handler+0x628>
 8008680:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008684:	4b7d      	ldr	r3, [pc, #500]	@ (800887c <NMI_Handler+0x644>)
 8008686:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800868a:	ee07 3a90 	vmov	s15, r3
 800868e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008692:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008696:	4b79      	ldr	r3, [pc, #484]	@ (800887c <NMI_Handler+0x644>)
 8008698:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800869c:	ee07 3a90 	vmov	s15, r3
 80086a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80086a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80086a8:	4b74      	ldr	r3, [pc, #464]	@ (800887c <NMI_Handler+0x644>)
 80086aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80086b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80086ba:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008868 <NMI_Handler+0x630>
 80086be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80086c2:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008870 <NMI_Handler+0x638>
 80086c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80086ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80086ce:	ee17 3a90 	vmov	r3, s15
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	4b6d      	ldr	r3, [pc, #436]	@ (800888c <NMI_Handler+0x654>)
 80086d6:	801a      	strh	r2, [r3, #0]
		SPEED2 = (MYDRON.THRUST*0.7)- MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 80086d8:	4b68      	ldr	r3, [pc, #416]	@ (800887c <NMI_Handler+0x644>)
 80086da:	885b      	ldrh	r3, [r3, #2]
 80086dc:	ee07 3a90 	vmov	s15, r3
 80086e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80086e4:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8008860 <NMI_Handler+0x628>
 80086e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80086ec:	4b63      	ldr	r3, [pc, #396]	@ (800887c <NMI_Handler+0x644>)
 80086ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80086f2:	ee07 3a90 	vmov	s15, r3
 80086f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80086fa:	ee36 6b47 	vsub.f64	d6, d6, d7
 80086fe:	4b5f      	ldr	r3, [pc, #380]	@ (800887c <NMI_Handler+0x644>)
 8008700:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008704:	ee07 3a90 	vmov	s15, r3
 8008708:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800870c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008710:	4b5a      	ldr	r3, [pc, #360]	@ (800887c <NMI_Handler+0x644>)
 8008712:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008716:	ee07 3a90 	vmov	s15, r3
 800871a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800871e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008722:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008868 <NMI_Handler+0x630>
 8008726:	ee37 7b06 	vadd.f64	d7, d7, d6
 800872a:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008870 <NMI_Handler+0x638>
 800872e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008732:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008736:	ee17 3a90 	vmov	r3, s15
 800873a:	b29a      	uxth	r2, r3
 800873c:	4b54      	ldr	r3, [pc, #336]	@ (8008890 <NMI_Handler+0x658>)
 800873e:	801a      	strh	r2, [r3, #0]
		SPEED3 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8008740:	4b4e      	ldr	r3, [pc, #312]	@ (800887c <NMI_Handler+0x644>)
 8008742:	885b      	ldrh	r3, [r3, #2]
 8008744:	ee07 3a90 	vmov	s15, r3
 8008748:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800874c:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8008860 <NMI_Handler+0x628>
 8008750:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008754:	4b49      	ldr	r3, [pc, #292]	@ (800887c <NMI_Handler+0x644>)
 8008756:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800875a:	ee07 3a90 	vmov	s15, r3
 800875e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008762:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008766:	4b45      	ldr	r3, [pc, #276]	@ (800887c <NMI_Handler+0x644>)
 8008768:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800876c:	ee07 3a90 	vmov	s15, r3
 8008770:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008774:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008778:	4b40      	ldr	r3, [pc, #256]	@ (800887c <NMI_Handler+0x644>)
 800877a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800877e:	ee07 3a90 	vmov	s15, r3
 8008782:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008786:	ee36 7b47 	vsub.f64	d7, d6, d7
 800878a:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008868 <NMI_Handler+0x630>
 800878e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008792:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008870 <NMI_Handler+0x638>
 8008796:	ee37 7b06 	vadd.f64	d7, d7, d6
 800879a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800879e:	ee17 3a90 	vmov	r3, s15
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	4b3b      	ldr	r3, [pc, #236]	@ (8008894 <NMI_Handler+0x65c>)
 80087a6:	801a      	strh	r2, [r3, #0]
		SPEED4 = (MYDRON.THRUST*0.7)- MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//
 80087a8:	4b34      	ldr	r3, [pc, #208]	@ (800887c <NMI_Handler+0x644>)
 80087aa:	885b      	ldrh	r3, [r3, #2]
 80087ac:	ee07 3a90 	vmov	s15, r3
 80087b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087b4:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8008860 <NMI_Handler+0x628>
 80087b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80087bc:	4b2f      	ldr	r3, [pc, #188]	@ (800887c <NMI_Handler+0x644>)
 80087be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80087c2:	ee07 3a90 	vmov	s15, r3
 80087c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087ca:	ee36 6b47 	vsub.f64	d6, d6, d7
 80087ce:	4b2b      	ldr	r3, [pc, #172]	@ (800887c <NMI_Handler+0x644>)
 80087d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80087d4:	ee07 3a90 	vmov	s15, r3
 80087d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087dc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80087e0:	4b26      	ldr	r3, [pc, #152]	@ (800887c <NMI_Handler+0x644>)
 80087e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80087f2:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008868 <NMI_Handler+0x630>
 80087f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80087fa:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008870 <NMI_Handler+0x638>
 80087fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008802:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008806:	ee17 3a90 	vmov	r3, s15
 800880a:	b29a      	uxth	r2, r3
 800880c:	4b22      	ldr	r3, [pc, #136]	@ (8008898 <NMI_Handler+0x660>)
 800880e:	801a      	strh	r2, [r3, #0]

		ESC_1_SPEED(SPEED1);
 8008810:	4b1e      	ldr	r3, [pc, #120]	@ (800888c <NMI_Handler+0x654>)
 8008812:	881b      	ldrh	r3, [r3, #0]
 8008814:	4618      	mov	r0, r3
 8008816:	f7f8 fb0d 	bl	8000e34 <ESC_1_SPEED>
		ESC_2_SPEED(SPEED2);
 800881a:	4b1d      	ldr	r3, [pc, #116]	@ (8008890 <NMI_Handler+0x658>)
 800881c:	881b      	ldrh	r3, [r3, #0]
 800881e:	4618      	mov	r0, r3
 8008820:	f7f8 fb2a 	bl	8000e78 <ESC_2_SPEED>
		ESC_3_SPEED(SPEED3);
 8008824:	4b1b      	ldr	r3, [pc, #108]	@ (8008894 <NMI_Handler+0x65c>)
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	4618      	mov	r0, r3
 800882a:	f7f8 fb47 	bl	8000ebc <ESC_3_SPEED>
		ESC_4_SPEED(SPEED4);
 800882e:	4b1a      	ldr	r3, [pc, #104]	@ (8008898 <NMI_Handler+0x660>)
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	4618      	mov	r0, r3
 8008834:	f7f8 fb64 	bl	8000f00 <ESC_4_SPEED>


		OLD_SPEED1 = SPEED1;
 8008838:	4b14      	ldr	r3, [pc, #80]	@ (800888c <NMI_Handler+0x654>)
 800883a:	881a      	ldrh	r2, [r3, #0]
 800883c:	4b17      	ldr	r3, [pc, #92]	@ (800889c <NMI_Handler+0x664>)
 800883e:	801a      	strh	r2, [r3, #0]
		OLD_SPEED2 = SPEED2;
 8008840:	4b13      	ldr	r3, [pc, #76]	@ (8008890 <NMI_Handler+0x658>)
 8008842:	881a      	ldrh	r2, [r3, #0]
 8008844:	4b16      	ldr	r3, [pc, #88]	@ (80088a0 <NMI_Handler+0x668>)
 8008846:	801a      	strh	r2, [r3, #0]
		OLD_SPEED3 = SPEED3;
 8008848:	4b12      	ldr	r3, [pc, #72]	@ (8008894 <NMI_Handler+0x65c>)
 800884a:	881a      	ldrh	r2, [r3, #0]
 800884c:	4b15      	ldr	r3, [pc, #84]	@ (80088a4 <NMI_Handler+0x66c>)
 800884e:	801a      	strh	r2, [r3, #0]
		OLD_SPEED4 = SPEED4;
 8008850:	4b11      	ldr	r3, [pc, #68]	@ (8008898 <NMI_Handler+0x660>)
 8008852:	881a      	ldrh	r2, [r3, #0]
 8008854:	4b14      	ldr	r3, [pc, #80]	@ (80088a8 <NMI_Handler+0x670>)
 8008856:	801a      	strh	r2, [r3, #0]
	   	HAL_Delay(1);
 8008858:	e517      	b.n	800828a <NMI_Handler+0x52>
 800885a:	bf00      	nop
 800885c:	f3af 8000 	nop.w
 8008860:	66666666 	.word	0x66666666
 8008864:	3fe66666 	.word	0x3fe66666
 8008868:	00000000 	.word	0x00000000
 800886c:	40c48200 	.word	0x40c48200
 8008870:	00000000 	.word	0x00000000
 8008874:	407f4000 	.word	0x407f4000
 8008878:	000040e0 	.word	0x000040e0
 800887c:	00000178 	.word	0x00000178
 8008880:	000040d8 	.word	0x000040d8
 8008884:	000040dc 	.word	0x000040dc
 8008888:	0000405e 	.word	0x0000405e
 800888c:	000041a4 	.word	0x000041a4
 8008890:	000041a6 	.word	0x000041a6
 8008894:	000041a8 	.word	0x000041a8
 8008898:	000041aa 	.word	0x000041aa
 800889c:	000041ac 	.word	0x000041ac
 80088a0:	000041ae 	.word	0x000041ae
 80088a4:	000041b0 	.word	0x000041b0
 80088a8:	000041b2 	.word	0x000041b2

080088ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 80088b0:	2201      	movs	r2, #1
 80088b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80088b6:	4812      	ldr	r0, [pc, #72]	@ (8008900 <HardFault_Handler+0x54>)
 80088b8:	f005 ff68 	bl	800e78c <HAL_GPIO_WritePin>
	LED_Y_0;
 80088bc:	2200      	movs	r2, #0
 80088be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80088c2:	4810      	ldr	r0, [pc, #64]	@ (8008904 <HardFault_Handler+0x58>)
 80088c4:	f005 ff62 	bl	800e78c <HAL_GPIO_WritePin>
	LED_R_1;
 80088c8:	2201      	movs	r2, #1
 80088ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80088ce:	480d      	ldr	r0, [pc, #52]	@ (8008904 <HardFault_Handler+0x58>)
 80088d0:	f005 ff5c 	bl	800e78c <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80088d4:	480c      	ldr	r0, [pc, #48]	@ (8008908 <HardFault_Handler+0x5c>)
 80088d6:	f015 f9f1 	bl	801dcbc <f_close>
	wanted_rool = 0;
 80088da:	4b0c      	ldr	r3, [pc, #48]	@ (800890c <HardFault_Handler+0x60>)
 80088dc:	f04f 0200 	mov.w	r2, #0
 80088e0:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80088e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008910 <HardFault_Handler+0x64>)
 80088e4:	f04f 0200 	mov.w	r2, #0
 80088e8:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80088ea:	4b0a      	ldr	r3, [pc, #40]	@ (8008914 <HardFault_Handler+0x68>)
 80088ec:	f04f 0200 	mov.w	r2, #0
 80088f0:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80088f2:	4b09      	ldr	r3, [pc, #36]	@ (8008918 <HardFault_Handler+0x6c>)
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	b21a      	sxth	r2, r3
 80088f8:	4b08      	ldr	r3, [pc, #32]	@ (800891c <HardFault_Handler+0x70>)
 80088fa:	801a      	strh	r2, [r3, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80088fc:	bf00      	nop
 80088fe:	e7fd      	b.n	80088fc <HardFault_Handler+0x50>
 8008900:	58021000 	.word	0x58021000
 8008904:	58020400 	.word	0x58020400
 8008908:	24001ef0 	.word	0x24001ef0
 800890c:	0000406c 	.word	0x0000406c
 8008910:	00004068 	.word	0x00004068
 8008914:	00004070 	.word	0x00004070
 8008918:	0801e9e0 	.word	0x0801e9e0
 800891c:	0000405c 	.word	0x0000405c

08008920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 8008924:	2200      	movs	r2, #0
 8008926:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800892a:	4812      	ldr	r0, [pc, #72]	@ (8008974 <MemManage_Handler+0x54>)
 800892c:	f005 ff2e 	bl	800e78c <HAL_GPIO_WritePin>
	LED_Y_0;
 8008930:	2200      	movs	r2, #0
 8008932:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008936:	4810      	ldr	r0, [pc, #64]	@ (8008978 <MemManage_Handler+0x58>)
 8008938:	f005 ff28 	bl	800e78c <HAL_GPIO_WritePin>
	LED_R_1;
 800893c:	2201      	movs	r2, #1
 800893e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008942:	480d      	ldr	r0, [pc, #52]	@ (8008978 <MemManage_Handler+0x58>)
 8008944:	f005 ff22 	bl	800e78c <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008948:	480c      	ldr	r0, [pc, #48]	@ (800897c <MemManage_Handler+0x5c>)
 800894a:	f015 f9b7 	bl	801dcbc <f_close>
	wanted_rool = 0;
 800894e:	4b0c      	ldr	r3, [pc, #48]	@ (8008980 <MemManage_Handler+0x60>)
 8008950:	f04f 0200 	mov.w	r2, #0
 8008954:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008956:	4b0b      	ldr	r3, [pc, #44]	@ (8008984 <MemManage_Handler+0x64>)
 8008958:	f04f 0200 	mov.w	r2, #0
 800895c:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 800895e:	4b0a      	ldr	r3, [pc, #40]	@ (8008988 <MemManage_Handler+0x68>)
 8008960:	f04f 0200 	mov.w	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008966:	4b09      	ldr	r3, [pc, #36]	@ (800898c <MemManage_Handler+0x6c>)
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	b21a      	sxth	r2, r3
 800896c:	4b08      	ldr	r3, [pc, #32]	@ (8008990 <MemManage_Handler+0x70>)
 800896e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008970:	bf00      	nop
 8008972:	e7fd      	b.n	8008970 <MemManage_Handler+0x50>
 8008974:	58021000 	.word	0x58021000
 8008978:	58020400 	.word	0x58020400
 800897c:	24001ef0 	.word	0x24001ef0
 8008980:	0000406c 	.word	0x0000406c
 8008984:	00004068 	.word	0x00004068
 8008988:	00004070 	.word	0x00004070
 800898c:	0801e9e0 	.word	0x0801e9e0
 8008990:	0000405c 	.word	0x0000405c

08008994 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 8008998:	2201      	movs	r2, #1
 800899a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800899e:	4812      	ldr	r0, [pc, #72]	@ (80089e8 <BusFault_Handler+0x54>)
 80089a0:	f005 fef4 	bl	800e78c <HAL_GPIO_WritePin>
	LED_Y_1;
 80089a4:	2201      	movs	r2, #1
 80089a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80089aa:	4810      	ldr	r0, [pc, #64]	@ (80089ec <BusFault_Handler+0x58>)
 80089ac:	f005 feee 	bl	800e78c <HAL_GPIO_WritePin>
	LED_R_1;
 80089b0:	2201      	movs	r2, #1
 80089b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80089b6:	480d      	ldr	r0, [pc, #52]	@ (80089ec <BusFault_Handler+0x58>)
 80089b8:	f005 fee8 	bl	800e78c <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80089bc:	480c      	ldr	r0, [pc, #48]	@ (80089f0 <BusFault_Handler+0x5c>)
 80089be:	f015 f97d 	bl	801dcbc <f_close>
	wanted_rool = 0;
 80089c2:	4b0c      	ldr	r3, [pc, #48]	@ (80089f4 <BusFault_Handler+0x60>)
 80089c4:	f04f 0200 	mov.w	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80089ca:	4b0b      	ldr	r3, [pc, #44]	@ (80089f8 <BusFault_Handler+0x64>)
 80089cc:	f04f 0200 	mov.w	r2, #0
 80089d0:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80089d2:	4b0a      	ldr	r3, [pc, #40]	@ (80089fc <BusFault_Handler+0x68>)
 80089d4:	f04f 0200 	mov.w	r2, #0
 80089d8:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80089da:	4b09      	ldr	r3, [pc, #36]	@ (8008a00 <BusFault_Handler+0x6c>)
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	b21a      	sxth	r2, r3
 80089e0:	4b08      	ldr	r3, [pc, #32]	@ (8008a04 <BusFault_Handler+0x70>)
 80089e2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80089e4:	bf00      	nop
 80089e6:	e7fd      	b.n	80089e4 <BusFault_Handler+0x50>
 80089e8:	58021000 	.word	0x58021000
 80089ec:	58020400 	.word	0x58020400
 80089f0:	24001ef0 	.word	0x24001ef0
 80089f4:	0000406c 	.word	0x0000406c
 80089f8:	00004068 	.word	0x00004068
 80089fc:	00004070 	.word	0x00004070
 8008a00:	0801e9e0 	.word	0x0801e9e0
 8008a04:	0000405c 	.word	0x0000405c

08008a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a12:	4812      	ldr	r0, [pc, #72]	@ (8008a5c <UsageFault_Handler+0x54>)
 8008a14:	f005 feba 	bl	800e78c <HAL_GPIO_WritePin>
	LED_Y_1;
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a1e:	4810      	ldr	r0, [pc, #64]	@ (8008a60 <UsageFault_Handler+0x58>)
 8008a20:	f005 feb4 	bl	800e78c <HAL_GPIO_WritePin>
	LED_R_1;
 8008a24:	2201      	movs	r2, #1
 8008a26:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008a2a:	480d      	ldr	r0, [pc, #52]	@ (8008a60 <UsageFault_Handler+0x58>)
 8008a2c:	f005 feae 	bl	800e78c <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008a30:	480c      	ldr	r0, [pc, #48]	@ (8008a64 <UsageFault_Handler+0x5c>)
 8008a32:	f015 f943 	bl	801dcbc <f_close>
	wanted_rool = 0;
 8008a36:	4b0c      	ldr	r3, [pc, #48]	@ (8008a68 <UsageFault_Handler+0x60>)
 8008a38:	f04f 0200 	mov.w	r2, #0
 8008a3c:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8008a6c <UsageFault_Handler+0x64>)
 8008a40:	f04f 0200 	mov.w	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008a46:	4b0a      	ldr	r3, [pc, #40]	@ (8008a70 <UsageFault_Handler+0x68>)
 8008a48:	f04f 0200 	mov.w	r2, #0
 8008a4c:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008a4e:	4b09      	ldr	r3, [pc, #36]	@ (8008a74 <UsageFault_Handler+0x6c>)
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	b21a      	sxth	r2, r3
 8008a54:	4b08      	ldr	r3, [pc, #32]	@ (8008a78 <UsageFault_Handler+0x70>)
 8008a56:	801a      	strh	r2, [r3, #0]
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008a58:	bf00      	nop
 8008a5a:	e7fd      	b.n	8008a58 <UsageFault_Handler+0x50>
 8008a5c:	58021000 	.word	0x58021000
 8008a60:	58020400 	.word	0x58020400
 8008a64:	24001ef0 	.word	0x24001ef0
 8008a68:	0000406c 	.word	0x0000406c
 8008a6c:	00004068 	.word	0x00004068
 8008a70:	00004070 	.word	0x00004070
 8008a74:	0801e9e0 	.word	0x0801e9e0
 8008a78:	0000405c 	.word	0x0000405c

08008a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008a80:	bf00      	nop
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008a8e:	bf00      	nop
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008a9c:	bf00      	nop
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
	...

08008aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8008aac:	4b08      	ldr	r3, [pc, #32]	@ (8008ad0 <SysTick_Handler+0x28>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	4a07      	ldr	r2, [pc, #28]	@ (8008ad0 <SysTick_Handler+0x28>)
 8008ab4:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 8008ab6:	4b06      	ldr	r3, [pc, #24]	@ (8008ad0 <SysTick_Handler+0x28>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b09      	cmp	r3, #9
 8008abc:	d904      	bls.n	8008ac8 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 8008abe:	4b04      	ldr	r3, [pc, #16]	@ (8008ad0 <SysTick_Handler+0x28>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 8008ac4:	f7ff fb98 	bl	80081f8 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ac8:	f000 fd04 	bl	80094d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008acc:	bf00      	nop
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	24000374 	.word	0x24000374

08008ad4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008ad8:	4802      	ldr	r0, [pc, #8]	@ (8008ae4 <DMA1_Stream0_IRQHandler+0x10>)
 8008ada:	f004 f96b 	bl	800cdb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008ade:	bf00      	nop
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	240002fc 	.word	0x240002fc

08008ae8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8008aec:	4802      	ldr	r0, [pc, #8]	@ (8008af8 <ADC_IRQHandler+0x10>)
 8008aee:	f001 fb3f 	bl	800a170 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008af2:	bf00      	nop
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	240000ac 	.word	0x240000ac

08008afc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008b00:	4802      	ldr	r0, [pc, #8]	@ (8008b0c <TIM2_IRQHandler+0x10>)
 8008b02:	f00d ff02 	bl	801690a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008b06:	bf00      	nop
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	240003cc 	.word	0x240003cc

08008b10 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008b14:	4802      	ldr	r0, [pc, #8]	@ (8008b20 <SPI2_IRQHandler+0x10>)
 8008b16:	f00d f871 	bl	8015bfc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008b1a:	bf00      	nop
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	240001ec 	.word	0x240001ec

08008b24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008b28:	4802      	ldr	r0, [pc, #8]	@ (8008b34 <USART1_IRQHandler+0x10>)
 8008b2a:	f00f fb45 	bl	80181b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008b2e:	bf00      	nop
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	240004b0 	.word	0x240004b0

08008b38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8008b3c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008b40:	f005 fe3d 	bl	800e7be <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008b44:	bf00      	nop
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008b4c:	4802      	ldr	r0, [pc, #8]	@ (8008b58 <DMA2_Stream0_IRQHandler+0x10>)
 8008b4e:	f004 f931 	bl	800cdb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008b52:	bf00      	nop
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	2400011c 	.word	0x2400011c

08008b5c <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8008b60:	4802      	ldr	r0, [pc, #8]	@ (8008b6c <I2C5_EV_IRQHandler+0x10>)
 8008b62:	f006 fa21 	bl	800efa8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 8008b66:	bf00      	nop
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	24000198 	.word	0x24000198

08008b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008b70:	b480      	push	{r7}
 8008b72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008b74:	4b32      	ldr	r3, [pc, #200]	@ (8008c40 <SystemInit+0xd0>)
 8008b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b7a:	4a31      	ldr	r2, [pc, #196]	@ (8008c40 <SystemInit+0xd0>)
 8008b7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008b84:	4b2f      	ldr	r3, [pc, #188]	@ (8008c44 <SystemInit+0xd4>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 030f 	and.w	r3, r3, #15
 8008b8c:	2b06      	cmp	r3, #6
 8008b8e:	d807      	bhi.n	8008ba0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008b90:	4b2c      	ldr	r3, [pc, #176]	@ (8008c44 <SystemInit+0xd4>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f023 030f 	bic.w	r3, r3, #15
 8008b98:	4a2a      	ldr	r2, [pc, #168]	@ (8008c44 <SystemInit+0xd4>)
 8008b9a:	f043 0307 	orr.w	r3, r3, #7
 8008b9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008ba0:	4b29      	ldr	r3, [pc, #164]	@ (8008c48 <SystemInit+0xd8>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a28      	ldr	r2, [pc, #160]	@ (8008c48 <SystemInit+0xd8>)
 8008ba6:	f043 0301 	orr.w	r3, r3, #1
 8008baa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008bac:	4b26      	ldr	r3, [pc, #152]	@ (8008c48 <SystemInit+0xd8>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008bb2:	4b25      	ldr	r3, [pc, #148]	@ (8008c48 <SystemInit+0xd8>)
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	4924      	ldr	r1, [pc, #144]	@ (8008c48 <SystemInit+0xd8>)
 8008bb8:	4b24      	ldr	r3, [pc, #144]	@ (8008c4c <SystemInit+0xdc>)
 8008bba:	4013      	ands	r3, r2
 8008bbc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008bbe:	4b21      	ldr	r3, [pc, #132]	@ (8008c44 <SystemInit+0xd4>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0308 	and.w	r3, r3, #8
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d007      	beq.n	8008bda <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008bca:	4b1e      	ldr	r3, [pc, #120]	@ (8008c44 <SystemInit+0xd4>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f023 030f 	bic.w	r3, r3, #15
 8008bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8008c44 <SystemInit+0xd4>)
 8008bd4:	f043 0307 	orr.w	r3, r3, #7
 8008bd8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008bda:	4b1b      	ldr	r3, [pc, #108]	@ (8008c48 <SystemInit+0xd8>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008be0:	4b19      	ldr	r3, [pc, #100]	@ (8008c48 <SystemInit+0xd8>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008be6:	4b18      	ldr	r3, [pc, #96]	@ (8008c48 <SystemInit+0xd8>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008bec:	4b16      	ldr	r3, [pc, #88]	@ (8008c48 <SystemInit+0xd8>)
 8008bee:	4a18      	ldr	r2, [pc, #96]	@ (8008c50 <SystemInit+0xe0>)
 8008bf0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008bf2:	4b15      	ldr	r3, [pc, #84]	@ (8008c48 <SystemInit+0xd8>)
 8008bf4:	4a17      	ldr	r2, [pc, #92]	@ (8008c54 <SystemInit+0xe4>)
 8008bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008bf8:	4b13      	ldr	r3, [pc, #76]	@ (8008c48 <SystemInit+0xd8>)
 8008bfa:	4a17      	ldr	r2, [pc, #92]	@ (8008c58 <SystemInit+0xe8>)
 8008bfc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008bfe:	4b12      	ldr	r3, [pc, #72]	@ (8008c48 <SystemInit+0xd8>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008c04:	4b10      	ldr	r3, [pc, #64]	@ (8008c48 <SystemInit+0xd8>)
 8008c06:	4a14      	ldr	r2, [pc, #80]	@ (8008c58 <SystemInit+0xe8>)
 8008c08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8008c48 <SystemInit+0xd8>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008c10:	4b0d      	ldr	r3, [pc, #52]	@ (8008c48 <SystemInit+0xd8>)
 8008c12:	4a11      	ldr	r2, [pc, #68]	@ (8008c58 <SystemInit+0xe8>)
 8008c14:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008c16:	4b0c      	ldr	r3, [pc, #48]	@ (8008c48 <SystemInit+0xd8>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c48 <SystemInit+0xd8>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a09      	ldr	r2, [pc, #36]	@ (8008c48 <SystemInit+0xd8>)
 8008c22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008c28:	4b07      	ldr	r3, [pc, #28]	@ (8008c48 <SystemInit+0xd8>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8008c5c <SystemInit+0xec>)
 8008c30:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8008c34:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008c36:	bf00      	nop
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	e000ed00 	.word	0xe000ed00
 8008c44:	52002000 	.word	0x52002000
 8008c48:	58024400 	.word	0x58024400
 8008c4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8008c50:	02020200 	.word	0x02020200
 8008c54:	01ff0000 	.word	0x01ff0000
 8008c58:	01010280 	.word	0x01010280
 8008c5c:	52004000 	.word	0x52004000

08008c60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b098      	sub	sp, #96	@ 0x60
 8008c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c66:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	605a      	str	r2, [r3, #4]
 8008c70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008c72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008c76:	2200      	movs	r2, #0
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	605a      	str	r2, [r3, #4]
 8008c7c:	609a      	str	r2, [r3, #8]
 8008c7e:	60da      	str	r2, [r3, #12]
 8008c80:	611a      	str	r2, [r3, #16]
 8008c82:	615a      	str	r2, [r3, #20]
 8008c84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008c86:	1d3b      	adds	r3, r7, #4
 8008c88:	2234      	movs	r2, #52	@ 0x34
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f015 fa0d 	bl	801e0ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008c92:	4b45      	ldr	r3, [pc, #276]	@ (8008da8 <MX_TIM1_Init+0x148>)
 8008c94:	4a45      	ldr	r2, [pc, #276]	@ (8008dac <MX_TIM1_Init+0x14c>)
 8008c96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8008c98:	4b43      	ldr	r3, [pc, #268]	@ (8008da8 <MX_TIM1_Init+0x148>)
 8008c9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008c9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ca0:	4b41      	ldr	r3, [pc, #260]	@ (8008da8 <MX_TIM1_Init+0x148>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8008ca6:	4b40      	ldr	r3, [pc, #256]	@ (8008da8 <MX_TIM1_Init+0x148>)
 8008ca8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008cac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008cae:	4b3e      	ldr	r3, [pc, #248]	@ (8008da8 <MX_TIM1_Init+0x148>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008cb4:	4b3c      	ldr	r3, [pc, #240]	@ (8008da8 <MX_TIM1_Init+0x148>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008cba:	4b3b      	ldr	r3, [pc, #236]	@ (8008da8 <MX_TIM1_Init+0x148>)
 8008cbc:	2280      	movs	r2, #128	@ 0x80
 8008cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008cc0:	4839      	ldr	r0, [pc, #228]	@ (8008da8 <MX_TIM1_Init+0x148>)
 8008cc2:	f00d fc57 	bl	8016574 <HAL_TIM_PWM_Init>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8008ccc:	f7ff f8b8 	bl	8007e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008cdc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4831      	ldr	r0, [pc, #196]	@ (8008da8 <MX_TIM1_Init+0x148>)
 8008ce4:	f00e ff64 	bl	8017bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d001      	beq.n	8008cf2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008cee:	f7ff f8a7 	bl	8007e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008cf2:	2360      	movs	r3, #96	@ 0x60
 8008cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008d02:	2300      	movs	r3, #0
 8008d04:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008d06:	2300      	movs	r3, #0
 8008d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008d0e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d12:	2204      	movs	r2, #4
 8008d14:	4619      	mov	r1, r3
 8008d16:	4824      	ldr	r0, [pc, #144]	@ (8008da8 <MX_TIM1_Init+0x148>)
 8008d18:	f00d ff9a 	bl	8016c50 <HAL_TIM_PWM_ConfigChannel>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8008d22:	f7ff f88d 	bl	8007e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008d26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d2a:	2208      	movs	r2, #8
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	481e      	ldr	r0, [pc, #120]	@ (8008da8 <MX_TIM1_Init+0x148>)
 8008d30:	f00d ff8e 	bl	8016c50 <HAL_TIM_PWM_ConfigChannel>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8008d3a:	f7ff f881 	bl	8007e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008d3e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d42:	220c      	movs	r2, #12
 8008d44:	4619      	mov	r1, r3
 8008d46:	4818      	ldr	r0, [pc, #96]	@ (8008da8 <MX_TIM1_Init+0x148>)
 8008d48:	f00d ff82 	bl	8016c50 <HAL_TIM_PWM_ConfigChannel>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d001      	beq.n	8008d56 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8008d52:	f7ff f875 	bl	8007e40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008d56:	2300      	movs	r3, #0
 8008d58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008d62:	2300      	movs	r3, #0
 8008d64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008d66:	2300      	movs	r3, #0
 8008d68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008d6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008d6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008d70:	2300      	movs	r3, #0
 8008d72:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008d74:	2300      	movs	r3, #0
 8008d76:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008d78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008d82:	2300      	movs	r3, #0
 8008d84:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008d86:	1d3b      	adds	r3, r7, #4
 8008d88:	4619      	mov	r1, r3
 8008d8a:	4807      	ldr	r0, [pc, #28]	@ (8008da8 <MX_TIM1_Init+0x148>)
 8008d8c:	f00e ffac 	bl	8017ce8 <HAL_TIMEx_ConfigBreakDeadTime>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8008d96:	f7ff f853 	bl	8007e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008d9a:	4803      	ldr	r0, [pc, #12]	@ (8008da8 <MX_TIM1_Init+0x148>)
 8008d9c:	f000 f9da 	bl	8009154 <HAL_TIM_MspPostInit>

}
 8008da0:	bf00      	nop
 8008da2:	3760      	adds	r7, #96	@ 0x60
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	24000380 	.word	0x24000380
 8008dac:	40010000 	.word	0x40010000

08008db0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b088      	sub	sp, #32
 8008db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008db6:	f107 0314 	add.w	r3, r7, #20
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	605a      	str	r2, [r3, #4]
 8008dc0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008dc2:	1d3b      	adds	r3, r7, #4
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	601a      	str	r2, [r3, #0]
 8008dc8:	605a      	str	r2, [r3, #4]
 8008dca:	609a      	str	r2, [r3, #8]
 8008dcc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008dce:	4b21      	ldr	r3, [pc, #132]	@ (8008e54 <MX_TIM2_Init+0xa4>)
 8008dd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008dd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8008dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8008e54 <MX_TIM2_Init+0xa4>)
 8008dd8:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008ddc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008dde:	4b1d      	ldr	r3, [pc, #116]	@ (8008e54 <MX_TIM2_Init+0xa4>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8008de4:	4b1b      	ldr	r3, [pc, #108]	@ (8008e54 <MX_TIM2_Init+0xa4>)
 8008de6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008dea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008dec:	4b19      	ldr	r3, [pc, #100]	@ (8008e54 <MX_TIM2_Init+0xa4>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008df2:	4b18      	ldr	r3, [pc, #96]	@ (8008e54 <MX_TIM2_Init+0xa4>)
 8008df4:	2280      	movs	r2, #128	@ 0x80
 8008df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8008df8:	4816      	ldr	r0, [pc, #88]	@ (8008e54 <MX_TIM2_Init+0xa4>)
 8008dfa:	f00d fd2f 	bl	801685c <HAL_TIM_IC_Init>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d001      	beq.n	8008e08 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8008e04:	f7ff f81c 	bl	8007e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008e10:	f107 0314 	add.w	r3, r7, #20
 8008e14:	4619      	mov	r1, r3
 8008e16:	480f      	ldr	r0, [pc, #60]	@ (8008e54 <MX_TIM2_Init+0xa4>)
 8008e18:	f00e feca 	bl	8017bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8008e22:	f7ff f80d 	bl	8007e40 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008e26:	2300      	movs	r3, #0
 8008e28:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8008e32:	2300      	movs	r3, #0
 8008e34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008e36:	1d3b      	adds	r3, r7, #4
 8008e38:	2200      	movs	r2, #0
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	4805      	ldr	r0, [pc, #20]	@ (8008e54 <MX_TIM2_Init+0xa4>)
 8008e3e:	f00d fe6b 	bl	8016b18 <HAL_TIM_IC_ConfigChannel>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008e48:	f7fe fffa 	bl	8007e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008e4c:	bf00      	nop
 8008e4e:	3720      	adds	r7, #32
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	240003cc 	.word	0x240003cc

08008e58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08a      	sub	sp, #40	@ 0x28
 8008e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e5e:	f107 031c 	add.w	r3, r7, #28
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	605a      	str	r2, [r3, #4]
 8008e68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008e6a:	463b      	mov	r3, r7
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	601a      	str	r2, [r3, #0]
 8008e70:	605a      	str	r2, [r3, #4]
 8008e72:	609a      	str	r2, [r3, #8]
 8008e74:	60da      	str	r2, [r3, #12]
 8008e76:	611a      	str	r2, [r3, #16]
 8008e78:	615a      	str	r2, [r3, #20]
 8008e7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008e7c:	4b32      	ldr	r3, [pc, #200]	@ (8008f48 <MX_TIM3_Init+0xf0>)
 8008e7e:	4a33      	ldr	r2, [pc, #204]	@ (8008f4c <MX_TIM3_Init+0xf4>)
 8008e80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 8008e82:	4b31      	ldr	r3, [pc, #196]	@ (8008f48 <MX_TIM3_Init+0xf0>)
 8008e84:	221c      	movs	r2, #28
 8008e86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e88:	4b2f      	ldr	r3, [pc, #188]	@ (8008f48 <MX_TIM3_Init+0xf0>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8008e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8008f48 <MX_TIM3_Init+0xf0>)
 8008e90:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008e94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e96:	4b2c      	ldr	r3, [pc, #176]	@ (8008f48 <MX_TIM3_Init+0xf0>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8008f48 <MX_TIM3_Init+0xf0>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008ea2:	4829      	ldr	r0, [pc, #164]	@ (8008f48 <MX_TIM3_Init+0xf0>)
 8008ea4:	f00d fb66 	bl	8016574 <HAL_TIM_PWM_Init>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8008eae:	f7fe ffc7 	bl	8007e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008eba:	f107 031c 	add.w	r3, r7, #28
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	4821      	ldr	r0, [pc, #132]	@ (8008f48 <MX_TIM3_Init+0xf0>)
 8008ec2:	f00e fe75 	bl	8017bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d001      	beq.n	8008ed0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8008ecc:	f7fe ffb8 	bl	8007e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008ed0:	2360      	movs	r3, #96	@ 0x60
 8008ed2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008edc:	2300      	movs	r3, #0
 8008ede:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008ee0:	463b      	mov	r3, r7
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	4818      	ldr	r0, [pc, #96]	@ (8008f48 <MX_TIM3_Init+0xf0>)
 8008ee8:	f00d feb2 	bl	8016c50 <HAL_TIM_PWM_ConfigChannel>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8008ef2:	f7fe ffa5 	bl	8007e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008ef6:	463b      	mov	r3, r7
 8008ef8:	2204      	movs	r2, #4
 8008efa:	4619      	mov	r1, r3
 8008efc:	4812      	ldr	r0, [pc, #72]	@ (8008f48 <MX_TIM3_Init+0xf0>)
 8008efe:	f00d fea7 	bl	8016c50 <HAL_TIM_PWM_ConfigChannel>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008f08:	f7fe ff9a 	bl	8007e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008f0c:	463b      	mov	r3, r7
 8008f0e:	2208      	movs	r2, #8
 8008f10:	4619      	mov	r1, r3
 8008f12:	480d      	ldr	r0, [pc, #52]	@ (8008f48 <MX_TIM3_Init+0xf0>)
 8008f14:	f00d fe9c 	bl	8016c50 <HAL_TIM_PWM_ConfigChannel>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8008f1e:	f7fe ff8f 	bl	8007e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008f22:	463b      	mov	r3, r7
 8008f24:	220c      	movs	r2, #12
 8008f26:	4619      	mov	r1, r3
 8008f28:	4807      	ldr	r0, [pc, #28]	@ (8008f48 <MX_TIM3_Init+0xf0>)
 8008f2a:	f00d fe91 	bl	8016c50 <HAL_TIM_PWM_ConfigChannel>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8008f34:	f7fe ff84 	bl	8007e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008f38:	4803      	ldr	r0, [pc, #12]	@ (8008f48 <MX_TIM3_Init+0xf0>)
 8008f3a:	f000 f90b 	bl	8009154 <HAL_TIM_MspPostInit>

}
 8008f3e:	bf00      	nop
 8008f40:	3728      	adds	r7, #40	@ 0x28
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	24000418 	.word	0x24000418
 8008f4c:	40000400 	.word	0x40000400

08008f50 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b088      	sub	sp, #32
 8008f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008f56:	f107 0310 	add.w	r3, r7, #16
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	605a      	str	r2, [r3, #4]
 8008f60:	609a      	str	r2, [r3, #8]
 8008f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008f64:	1d3b      	adds	r3, r7, #4
 8008f66:	2200      	movs	r2, #0
 8008f68:	601a      	str	r2, [r3, #0]
 8008f6a:	605a      	str	r2, [r3, #4]
 8008f6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008f6e:	4b21      	ldr	r3, [pc, #132]	@ (8008ff4 <MX_TIM8_Init+0xa4>)
 8008f70:	4a21      	ldr	r2, [pc, #132]	@ (8008ff8 <MX_TIM8_Init+0xa8>)
 8008f72:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 8008f74:	4b1f      	ldr	r3, [pc, #124]	@ (8008ff4 <MX_TIM8_Init+0xa4>)
 8008f76:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 8008f7a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8008ff4 <MX_TIM8_Init+0xa4>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8008f82:	4b1c      	ldr	r3, [pc, #112]	@ (8008ff4 <MX_TIM8_Init+0xa4>)
 8008f84:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008f88:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ff4 <MX_TIM8_Init+0xa4>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008f90:	4b18      	ldr	r3, [pc, #96]	@ (8008ff4 <MX_TIM8_Init+0xa4>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f96:	4b17      	ldr	r3, [pc, #92]	@ (8008ff4 <MX_TIM8_Init+0xa4>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008f9c:	4815      	ldr	r0, [pc, #84]	@ (8008ff4 <MX_TIM8_Init+0xa4>)
 8008f9e:	f00d f98e 	bl	80162be <HAL_TIM_Base_Init>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d001      	beq.n	8008fac <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8008fa8:	f7fe ff4a 	bl	8007e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008fac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008fb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008fb2:	f107 0310 	add.w	r3, r7, #16
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	480e      	ldr	r0, [pc, #56]	@ (8008ff4 <MX_TIM8_Init+0xa4>)
 8008fba:	f00d ff5d 	bl	8016e78 <HAL_TIM_ConfigClockSource>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8008fc4:	f7fe ff3c 	bl	8007e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008fc8:	2320      	movs	r3, #32
 8008fca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8008fcc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008fd0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008fd6:	1d3b      	adds	r3, r7, #4
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4806      	ldr	r0, [pc, #24]	@ (8008ff4 <MX_TIM8_Init+0xa4>)
 8008fdc:	f00e fde8 	bl	8017bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d001      	beq.n	8008fea <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8008fe6:	f7fe ff2b 	bl	8007e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8008fea:	bf00      	nop
 8008fec:	3720      	adds	r7, #32
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	24000464 	.word	0x24000464
 8008ff8:	40010400 	.word	0x40010400

08008ffc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a16      	ldr	r2, [pc, #88]	@ (8009064 <HAL_TIM_PWM_MspInit+0x68>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d10f      	bne.n	800902e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800900e:	4b16      	ldr	r3, [pc, #88]	@ (8009068 <HAL_TIM_PWM_MspInit+0x6c>)
 8009010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009014:	4a14      	ldr	r2, [pc, #80]	@ (8009068 <HAL_TIM_PWM_MspInit+0x6c>)
 8009016:	f043 0301 	orr.w	r3, r3, #1
 800901a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800901e:	4b12      	ldr	r3, [pc, #72]	@ (8009068 <HAL_TIM_PWM_MspInit+0x6c>)
 8009020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009024:	f003 0301 	and.w	r3, r3, #1
 8009028:	60fb      	str	r3, [r7, #12]
 800902a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800902c:	e013      	b.n	8009056 <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a0e      	ldr	r2, [pc, #56]	@ (800906c <HAL_TIM_PWM_MspInit+0x70>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d10e      	bne.n	8009056 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009038:	4b0b      	ldr	r3, [pc, #44]	@ (8009068 <HAL_TIM_PWM_MspInit+0x6c>)
 800903a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800903e:	4a0a      	ldr	r2, [pc, #40]	@ (8009068 <HAL_TIM_PWM_MspInit+0x6c>)
 8009040:	f043 0302 	orr.w	r3, r3, #2
 8009044:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009048:	4b07      	ldr	r3, [pc, #28]	@ (8009068 <HAL_TIM_PWM_MspInit+0x6c>)
 800904a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800904e:	f003 0302 	and.w	r3, r3, #2
 8009052:	60bb      	str	r3, [r7, #8]
 8009054:	68bb      	ldr	r3, [r7, #8]
}
 8009056:	bf00      	nop
 8009058:	3714      	adds	r7, #20
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	40010000 	.word	0x40010000
 8009068:	58024400 	.word	0x58024400
 800906c:	40000400 	.word	0x40000400

08009070 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b08a      	sub	sp, #40	@ 0x28
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009078:	f107 0314 	add.w	r3, r7, #20
 800907c:	2200      	movs	r2, #0
 800907e:	601a      	str	r2, [r3, #0]
 8009080:	605a      	str	r2, [r3, #4]
 8009082:	609a      	str	r2, [r3, #8]
 8009084:	60da      	str	r2, [r3, #12]
 8009086:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009090:	d135      	bne.n	80090fe <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009092:	4b1d      	ldr	r3, [pc, #116]	@ (8009108 <HAL_TIM_IC_MspInit+0x98>)
 8009094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009098:	4a1b      	ldr	r2, [pc, #108]	@ (8009108 <HAL_TIM_IC_MspInit+0x98>)
 800909a:	f043 0301 	orr.w	r3, r3, #1
 800909e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80090a2:	4b19      	ldr	r3, [pc, #100]	@ (8009108 <HAL_TIM_IC_MspInit+0x98>)
 80090a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	613b      	str	r3, [r7, #16]
 80090ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090b0:	4b15      	ldr	r3, [pc, #84]	@ (8009108 <HAL_TIM_IC_MspInit+0x98>)
 80090b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80090b6:	4a14      	ldr	r2, [pc, #80]	@ (8009108 <HAL_TIM_IC_MspInit+0x98>)
 80090b8:	f043 0301 	orr.w	r3, r3, #1
 80090bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80090c0:	4b11      	ldr	r3, [pc, #68]	@ (8009108 <HAL_TIM_IC_MspInit+0x98>)
 80090c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80090c6:	f003 0301 	and.w	r3, r3, #1
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80090ce:	2301      	movs	r3, #1
 80090d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090d2:	2302      	movs	r3, #2
 80090d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090d6:	2300      	movs	r3, #0
 80090d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090da:	2300      	movs	r3, #0
 80090dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80090de:	2301      	movs	r3, #1
 80090e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090e2:	f107 0314 	add.w	r3, r7, #20
 80090e6:	4619      	mov	r1, r3
 80090e8:	4808      	ldr	r0, [pc, #32]	@ (800910c <HAL_TIM_IC_MspInit+0x9c>)
 80090ea:	f005 f98f 	bl	800e40c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80090ee:	2200      	movs	r2, #0
 80090f0:	2101      	movs	r1, #1
 80090f2:	201c      	movs	r0, #28
 80090f4:	f002 fa8b 	bl	800b60e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80090f8:	201c      	movs	r0, #28
 80090fa:	f002 faa2 	bl	800b642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80090fe:	bf00      	nop
 8009100:	3728      	adds	r7, #40	@ 0x28
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	58024400 	.word	0x58024400
 800910c:	58020000 	.word	0x58020000

08009110 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a0b      	ldr	r2, [pc, #44]	@ (800914c <HAL_TIM_Base_MspInit+0x3c>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d10e      	bne.n	8009140 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009122:	4b0b      	ldr	r3, [pc, #44]	@ (8009150 <HAL_TIM_Base_MspInit+0x40>)
 8009124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009128:	4a09      	ldr	r2, [pc, #36]	@ (8009150 <HAL_TIM_Base_MspInit+0x40>)
 800912a:	f043 0302 	orr.w	r3, r3, #2
 800912e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009132:	4b07      	ldr	r3, [pc, #28]	@ (8009150 <HAL_TIM_Base_MspInit+0x40>)
 8009134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009138:	f003 0302 	and.w	r3, r3, #2
 800913c:	60fb      	str	r3, [r7, #12]
 800913e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8009140:	bf00      	nop
 8009142:	3714      	adds	r7, #20
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	40010400 	.word	0x40010400
 8009150:	58024400 	.word	0x58024400

08009154 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b08a      	sub	sp, #40	@ 0x28
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800915c:	f107 0314 	add.w	r3, r7, #20
 8009160:	2200      	movs	r2, #0
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	605a      	str	r2, [r3, #4]
 8009166:	609a      	str	r2, [r3, #8]
 8009168:	60da      	str	r2, [r3, #12]
 800916a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a26      	ldr	r2, [pc, #152]	@ (800920c <HAL_TIM_MspPostInit+0xb8>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d120      	bne.n	80091b8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009176:	4b26      	ldr	r3, [pc, #152]	@ (8009210 <HAL_TIM_MspPostInit+0xbc>)
 8009178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800917c:	4a24      	ldr	r2, [pc, #144]	@ (8009210 <HAL_TIM_MspPostInit+0xbc>)
 800917e:	f043 0310 	orr.w	r3, r3, #16
 8009182:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009186:	4b22      	ldr	r3, [pc, #136]	@ (8009210 <HAL_TIM_MspPostInit+0xbc>)
 8009188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800918c:	f003 0310 	and.w	r3, r3, #16
 8009190:	613b      	str	r3, [r7, #16]
 8009192:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8009194:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8009198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800919a:	2302      	movs	r3, #2
 800919c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800919e:	2300      	movs	r3, #0
 80091a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091a2:	2300      	movs	r3, #0
 80091a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80091a6:	2301      	movs	r3, #1
 80091a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80091aa:	f107 0314 	add.w	r3, r7, #20
 80091ae:	4619      	mov	r1, r3
 80091b0:	4818      	ldr	r0, [pc, #96]	@ (8009214 <HAL_TIM_MspPostInit+0xc0>)
 80091b2:	f005 f92b 	bl	800e40c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80091b6:	e024      	b.n	8009202 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a16      	ldr	r2, [pc, #88]	@ (8009218 <HAL_TIM_MspPostInit+0xc4>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d11f      	bne.n	8009202 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80091c2:	4b13      	ldr	r3, [pc, #76]	@ (8009210 <HAL_TIM_MspPostInit+0xbc>)
 80091c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091c8:	4a11      	ldr	r2, [pc, #68]	@ (8009210 <HAL_TIM_MspPostInit+0xbc>)
 80091ca:	f043 0304 	orr.w	r3, r3, #4
 80091ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80091d2:	4b0f      	ldr	r3, [pc, #60]	@ (8009210 <HAL_TIM_MspPostInit+0xbc>)
 80091d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091d8:	f003 0304 	and.w	r3, r3, #4
 80091dc:	60fb      	str	r3, [r7, #12]
 80091de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80091e0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80091e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091e6:	2302      	movs	r3, #2
 80091e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091ee:	2300      	movs	r3, #0
 80091f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80091f2:	2302      	movs	r3, #2
 80091f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80091f6:	f107 0314 	add.w	r3, r7, #20
 80091fa:	4619      	mov	r1, r3
 80091fc:	4807      	ldr	r0, [pc, #28]	@ (800921c <HAL_TIM_MspPostInit+0xc8>)
 80091fe:	f005 f905 	bl	800e40c <HAL_GPIO_Init>
}
 8009202:	bf00      	nop
 8009204:	3728      	adds	r7, #40	@ 0x28
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	40010000 	.word	0x40010000
 8009210:	58024400 	.word	0x58024400
 8009214:	58021000 	.word	0x58021000
 8009218:	40000400 	.word	0x40000400
 800921c:	58020800 	.word	0x58020800

08009220 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009224:	4b22      	ldr	r3, [pc, #136]	@ (80092b0 <MX_USART1_UART_Init+0x90>)
 8009226:	4a23      	ldr	r2, [pc, #140]	@ (80092b4 <MX_USART1_UART_Init+0x94>)
 8009228:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800922a:	4b21      	ldr	r3, [pc, #132]	@ (80092b0 <MX_USART1_UART_Init+0x90>)
 800922c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009230:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009232:	4b1f      	ldr	r3, [pc, #124]	@ (80092b0 <MX_USART1_UART_Init+0x90>)
 8009234:	2200      	movs	r2, #0
 8009236:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009238:	4b1d      	ldr	r3, [pc, #116]	@ (80092b0 <MX_USART1_UART_Init+0x90>)
 800923a:	2200      	movs	r2, #0
 800923c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800923e:	4b1c      	ldr	r3, [pc, #112]	@ (80092b0 <MX_USART1_UART_Init+0x90>)
 8009240:	2200      	movs	r2, #0
 8009242:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009244:	4b1a      	ldr	r3, [pc, #104]	@ (80092b0 <MX_USART1_UART_Init+0x90>)
 8009246:	220c      	movs	r2, #12
 8009248:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800924a:	4b19      	ldr	r3, [pc, #100]	@ (80092b0 <MX_USART1_UART_Init+0x90>)
 800924c:	2200      	movs	r2, #0
 800924e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009250:	4b17      	ldr	r3, [pc, #92]	@ (80092b0 <MX_USART1_UART_Init+0x90>)
 8009252:	2200      	movs	r2, #0
 8009254:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009256:	4b16      	ldr	r3, [pc, #88]	@ (80092b0 <MX_USART1_UART_Init+0x90>)
 8009258:	2200      	movs	r2, #0
 800925a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800925c:	4b14      	ldr	r3, [pc, #80]	@ (80092b0 <MX_USART1_UART_Init+0x90>)
 800925e:	2200      	movs	r2, #0
 8009260:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009262:	4b13      	ldr	r3, [pc, #76]	@ (80092b0 <MX_USART1_UART_Init+0x90>)
 8009264:	2200      	movs	r2, #0
 8009266:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009268:	4811      	ldr	r0, [pc, #68]	@ (80092b0 <MX_USART1_UART_Init+0x90>)
 800926a:	f00e fde7 	bl	8017e3c <HAL_UART_Init>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8009274:	f7fe fde4 	bl	8007e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009278:	2100      	movs	r1, #0
 800927a:	480d      	ldr	r0, [pc, #52]	@ (80092b0 <MX_USART1_UART_Init+0x90>)
 800927c:	f011 fc97 	bl	801abae <HAL_UARTEx_SetTxFifoThreshold>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8009286:	f7fe fddb 	bl	8007e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800928a:	2100      	movs	r1, #0
 800928c:	4808      	ldr	r0, [pc, #32]	@ (80092b0 <MX_USART1_UART_Init+0x90>)
 800928e:	f011 fccc 	bl	801ac2a <HAL_UARTEx_SetRxFifoThreshold>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d001      	beq.n	800929c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8009298:	f7fe fdd2 	bl	8007e40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800929c:	4804      	ldr	r0, [pc, #16]	@ (80092b0 <MX_USART1_UART_Init+0x90>)
 800929e:	f011 fc4d 	bl	801ab3c <HAL_UARTEx_DisableFifoMode>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80092a8:	f7fe fdca 	bl	8007e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80092ac:	bf00      	nop
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	240004b0 	.word	0x240004b0
 80092b4:	40011000 	.word	0x40011000

080092b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b0b8      	sub	sp, #224	@ 0xe0
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092c0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80092c4:	2200      	movs	r2, #0
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	605a      	str	r2, [r3, #4]
 80092ca:	609a      	str	r2, [r3, #8]
 80092cc:	60da      	str	r2, [r3, #12]
 80092ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80092d0:	f107 0310 	add.w	r3, r7, #16
 80092d4:	22b8      	movs	r2, #184	@ 0xb8
 80092d6:	2100      	movs	r1, #0
 80092d8:	4618      	mov	r0, r3
 80092da:	f014 fee7 	bl	801e0ac <memset>
  if(uartHandle->Instance==USART1)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a2b      	ldr	r2, [pc, #172]	@ (8009390 <HAL_UART_MspInit+0xd8>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d14e      	bne.n	8009386 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80092e8:	f04f 0201 	mov.w	r2, #1
 80092ec:	f04f 0300 	mov.w	r3, #0
 80092f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80092f4:	2300      	movs	r3, #0
 80092f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80092fa:	f107 0310 	add.w	r3, r7, #16
 80092fe:	4618      	mov	r0, r3
 8009300:	f008 fe96 	bl	8012030 <HAL_RCCEx_PeriphCLKConfig>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800930a:	f7fe fd99 	bl	8007e40 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800930e:	4b21      	ldr	r3, [pc, #132]	@ (8009394 <HAL_UART_MspInit+0xdc>)
 8009310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009314:	4a1f      	ldr	r2, [pc, #124]	@ (8009394 <HAL_UART_MspInit+0xdc>)
 8009316:	f043 0310 	orr.w	r3, r3, #16
 800931a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800931e:	4b1d      	ldr	r3, [pc, #116]	@ (8009394 <HAL_UART_MspInit+0xdc>)
 8009320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009324:	f003 0310 	and.w	r3, r3, #16
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800932c:	4b19      	ldr	r3, [pc, #100]	@ (8009394 <HAL_UART_MspInit+0xdc>)
 800932e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009332:	4a18      	ldr	r2, [pc, #96]	@ (8009394 <HAL_UART_MspInit+0xdc>)
 8009334:	f043 0301 	orr.w	r3, r3, #1
 8009338:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800933c:	4b15      	ldr	r3, [pc, #84]	@ (8009394 <HAL_UART_MspInit+0xdc>)
 800933e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	60bb      	str	r3, [r7, #8]
 8009348:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800934a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800934e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009352:	2302      	movs	r3, #2
 8009354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009358:	2300      	movs	r3, #0
 800935a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800935e:	2300      	movs	r3, #0
 8009360:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009364:	2307      	movs	r3, #7
 8009366:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800936a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800936e:	4619      	mov	r1, r3
 8009370:	4809      	ldr	r0, [pc, #36]	@ (8009398 <HAL_UART_MspInit+0xe0>)
 8009372:	f005 f84b 	bl	800e40c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009376:	2200      	movs	r2, #0
 8009378:	2100      	movs	r1, #0
 800937a:	2025      	movs	r0, #37	@ 0x25
 800937c:	f002 f947 	bl	800b60e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009380:	2025      	movs	r0, #37	@ 0x25
 8009382:	f002 f95e 	bl	800b642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8009386:	bf00      	nop
 8009388:	37e0      	adds	r7, #224	@ 0xe0
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	40011000 	.word	0x40011000
 8009394:	58024400 	.word	0x58024400
 8009398:	58020000 	.word	0x58020000

0800939c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800939c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80093d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80093a0:	f7ff fbe6 	bl	8008b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80093a4:	480c      	ldr	r0, [pc, #48]	@ (80093d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80093a6:	490d      	ldr	r1, [pc, #52]	@ (80093dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80093a8:	4a0d      	ldr	r2, [pc, #52]	@ (80093e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80093aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80093ac:	e002      	b.n	80093b4 <LoopCopyDataInit>

080093ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80093ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80093b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80093b2:	3304      	adds	r3, #4

080093b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80093b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80093b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80093b8:	d3f9      	bcc.n	80093ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80093ba:	4a0a      	ldr	r2, [pc, #40]	@ (80093e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80093bc:	4c0a      	ldr	r4, [pc, #40]	@ (80093e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80093be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80093c0:	e001      	b.n	80093c6 <LoopFillZerobss>

080093c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80093c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80093c4:	3204      	adds	r2, #4

080093c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80093c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80093c8:	d3fb      	bcc.n	80093c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80093ca:	f014 fe7d 	bl	801e0c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80093ce:	f7fb fdab 	bl	8004f28 <main>
  bx  lr
 80093d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80093d4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80093d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80093dc:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80093e0:	08020770 	.word	0x08020770
  ldr r2, =_sbss
 80093e4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80093e8:	240008ac 	.word	0x240008ac

080093ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80093ec:	e7fe      	b.n	80093ec <ADC3_IRQHandler>
	...

080093f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80093f6:	2003      	movs	r0, #3
 80093f8:	f002 f8fe 	bl	800b5f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80093fc:	f008 fc42 	bl	8011c84 <HAL_RCC_GetSysClockFreq>
 8009400:	4602      	mov	r2, r0
 8009402:	4b15      	ldr	r3, [pc, #84]	@ (8009458 <HAL_Init+0x68>)
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	0a1b      	lsrs	r3, r3, #8
 8009408:	f003 030f 	and.w	r3, r3, #15
 800940c:	4913      	ldr	r1, [pc, #76]	@ (800945c <HAL_Init+0x6c>)
 800940e:	5ccb      	ldrb	r3, [r1, r3]
 8009410:	f003 031f 	and.w	r3, r3, #31
 8009414:	fa22 f303 	lsr.w	r3, r2, r3
 8009418:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800941a:	4b0f      	ldr	r3, [pc, #60]	@ (8009458 <HAL_Init+0x68>)
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	f003 030f 	and.w	r3, r3, #15
 8009422:	4a0e      	ldr	r2, [pc, #56]	@ (800945c <HAL_Init+0x6c>)
 8009424:	5cd3      	ldrb	r3, [r2, r3]
 8009426:	f003 031f 	and.w	r3, r3, #31
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	fa22 f303 	lsr.w	r3, r2, r3
 8009430:	4a0b      	ldr	r2, [pc, #44]	@ (8009460 <HAL_Init+0x70>)
 8009432:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009434:	4a0b      	ldr	r2, [pc, #44]	@ (8009464 <HAL_Init+0x74>)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800943a:	200f      	movs	r0, #15
 800943c:	f000 f814 	bl	8009468 <HAL_InitTick>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e002      	b.n	8009450 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800944a:	f7fe febb 	bl	80081c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	58024400 	.word	0x58024400
 800945c:	0801e9e4 	.word	0x0801e9e4
 8009460:	24000008 	.word	0x24000008
 8009464:	24000004 	.word	0x24000004

08009468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8009470:	4b15      	ldr	r3, [pc, #84]	@ (80094c8 <HAL_InitTick+0x60>)
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e021      	b.n	80094c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800947c:	4b13      	ldr	r3, [pc, #76]	@ (80094cc <HAL_InitTick+0x64>)
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	4b11      	ldr	r3, [pc, #68]	@ (80094c8 <HAL_InitTick+0x60>)
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	4619      	mov	r1, r3
 8009486:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800948a:	fbb3 f3f1 	udiv	r3, r3, r1
 800948e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009492:	4618      	mov	r0, r3
 8009494:	f002 f8e3 	bl	800b65e <HAL_SYSTICK_Config>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e00e      	b.n	80094c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2b0f      	cmp	r3, #15
 80094a6:	d80a      	bhi.n	80094be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80094a8:	2200      	movs	r2, #0
 80094aa:	6879      	ldr	r1, [r7, #4]
 80094ac:	f04f 30ff 	mov.w	r0, #4294967295
 80094b0:	f002 f8ad 	bl	800b60e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80094b4:	4a06      	ldr	r2, [pc, #24]	@ (80094d0 <HAL_InitTick+0x68>)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	e000      	b.n	80094c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	24000010 	.word	0x24000010
 80094cc:	24000004 	.word	0x24000004
 80094d0:	2400000c 	.word	0x2400000c

080094d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80094d4:	b480      	push	{r7}
 80094d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80094d8:	4b06      	ldr	r3, [pc, #24]	@ (80094f4 <HAL_IncTick+0x20>)
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	461a      	mov	r2, r3
 80094de:	4b06      	ldr	r3, [pc, #24]	@ (80094f8 <HAL_IncTick+0x24>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4413      	add	r3, r2
 80094e4:	4a04      	ldr	r2, [pc, #16]	@ (80094f8 <HAL_IncTick+0x24>)
 80094e6:	6013      	str	r3, [r2, #0]
}
 80094e8:	bf00      	nop
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	24000010 	.word	0x24000010
 80094f8:	24000544 	.word	0x24000544

080094fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80094fc:	b480      	push	{r7}
 80094fe:	af00      	add	r7, sp, #0
  return uwTick;
 8009500:	4b03      	ldr	r3, [pc, #12]	@ (8009510 <HAL_GetTick+0x14>)
 8009502:	681b      	ldr	r3, [r3, #0]
}
 8009504:	4618      	mov	r0, r3
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	24000544 	.word	0x24000544

08009514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800951c:	f7ff ffee 	bl	80094fc <HAL_GetTick>
 8009520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800952c:	d005      	beq.n	800953a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800952e:	4b0a      	ldr	r3, [pc, #40]	@ (8009558 <HAL_Delay+0x44>)
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	4413      	add	r3, r2
 8009538:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800953a:	bf00      	nop
 800953c:	f7ff ffde 	bl	80094fc <HAL_GetTick>
 8009540:	4602      	mov	r2, r0
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	429a      	cmp	r2, r3
 800954a:	d8f7      	bhi.n	800953c <HAL_Delay+0x28>
  {
  }
}
 800954c:	bf00      	nop
 800954e:	bf00      	nop
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	24000010 	.word	0x24000010

0800955c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	431a      	orrs	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	609a      	str	r2, [r3, #8]
}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009582:	b480      	push	{r7}
 8009584:	b083      	sub	sp, #12
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	431a      	orrs	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	609a      	str	r2, [r3, #8]
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b087      	sub	sp, #28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a18      	ldr	r2, [pc, #96]	@ (8009634 <LL_ADC_SetChannelPreselection+0x70>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d027      	beq.n	8009626 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d107      	bne.n	80095f0 <LL_ADC_SetChannelPreselection+0x2c>
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	0e9b      	lsrs	r3, r3, #26
 80095e4:	f003 031f 	and.w	r3, r3, #31
 80095e8:	2201      	movs	r2, #1
 80095ea:	fa02 f303 	lsl.w	r3, r2, r3
 80095ee:	e015      	b.n	800961c <LL_ADC_SetChannelPreselection+0x58>
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	fa93 f3a3 	rbit	r3, r3
 80095fa:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d101      	bne.n	800960a <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8009606:	2320      	movs	r3, #32
 8009608:	e003      	b.n	8009612 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	fab3 f383 	clz	r3, r3
 8009610:	b2db      	uxtb	r3, r3
 8009612:	f003 031f 	and.w	r3, r3, #31
 8009616:	2201      	movs	r2, #1
 8009618:	fa02 f303 	lsl.w	r3, r2, r3
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	69d2      	ldr	r2, [r2, #28]
 8009620:	431a      	orrs	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8009626:	bf00      	nop
 8009628:	371c      	adds	r7, #28
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	58026000 	.word	0x58026000

08009638 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009638:	b480      	push	{r7}
 800963a:	b087      	sub	sp, #28
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	3360      	adds	r3, #96	@ 0x60
 800964a:	461a      	mov	r2, r3
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4413      	add	r3, r2
 8009652:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4a10      	ldr	r2, [pc, #64]	@ (8009698 <LL_ADC_SetOffset+0x60>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d10b      	bne.n	8009674 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	4313      	orrs	r3, r2
 800966a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8009672:	e00b      	b.n	800968c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	430b      	orrs	r3, r1
 8009686:	431a      	orrs	r2, r3
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	601a      	str	r2, [r3, #0]
}
 800968c:	bf00      	nop
 800968e:	371c      	adds	r7, #28
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	58026000 	.word	0x58026000

0800969c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	3360      	adds	r3, #96	@ 0x60
 80096aa:	461a      	mov	r2, r3
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4413      	add	r3, r2
 80096b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	f003 031f 	and.w	r3, r3, #31
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	fa01 f303 	lsl.w	r3, r1, r3
 80096e8:	431a      	orrs	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	611a      	str	r2, [r3, #16]
}
 80096ee:	bf00      	nop
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
	...

080096fc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b087      	sub	sp, #28
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4a0c      	ldr	r2, [pc, #48]	@ (800973c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d00e      	beq.n	800972e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3360      	adds	r3, #96	@ 0x60
 8009714:	461a      	mov	r2, r3
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	431a      	orrs	r2, r3
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	601a      	str	r2, [r3, #0]
  }
}
 800972e:	bf00      	nop
 8009730:	371c      	adds	r7, #28
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	58026000 	.word	0x58026000

08009740 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8009740:	b480      	push	{r7}
 8009742:	b087      	sub	sp, #28
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4a0c      	ldr	r2, [pc, #48]	@ (8009780 <LL_ADC_SetOffsetSaturation+0x40>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d10e      	bne.n	8009772 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	3360      	adds	r3, #96	@ 0x60
 8009758:	461a      	mov	r2, r3
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4413      	add	r3, r2
 8009760:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	431a      	orrs	r2, r3
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8009772:	bf00      	nop
 8009774:	371c      	adds	r7, #28
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	58026000 	.word	0x58026000

08009784 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	4a0c      	ldr	r2, [pc, #48]	@ (80097c4 <LL_ADC_SetOffsetSign+0x40>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d10e      	bne.n	80097b6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3360      	adds	r3, #96	@ 0x60
 800979c:	461a      	mov	r2, r3
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	431a      	orrs	r2, r3
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80097b6:	bf00      	nop
 80097b8:	371c      	adds	r7, #28
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	58026000 	.word	0x58026000

080097c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b087      	sub	sp, #28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	3360      	adds	r3, #96	@ 0x60
 80097d8:	461a      	mov	r2, r3
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	4a0c      	ldr	r2, [pc, #48]	@ (8009818 <LL_ADC_SetOffsetState+0x50>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d108      	bne.n	80097fc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	431a      	orrs	r2, r3
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80097fa:	e007      	b.n	800980c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	431a      	orrs	r2, r3
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	601a      	str	r2, [r3, #0]
}
 800980c:	bf00      	nop
 800980e:	371c      	adds	r7, #28
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr
 8009818:	58026000 	.word	0x58026000

0800981c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009830:	2301      	movs	r3, #1
 8009832:	e000      	b.n	8009836 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	370c      	adds	r7, #12
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr

08009842 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009842:	b480      	push	{r7}
 8009844:	b087      	sub	sp, #28
 8009846:	af00      	add	r7, sp, #0
 8009848:	60f8      	str	r0, [r7, #12]
 800984a:	60b9      	str	r1, [r7, #8]
 800984c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	3330      	adds	r3, #48	@ 0x30
 8009852:	461a      	mov	r2, r3
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	0a1b      	lsrs	r3, r3, #8
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	f003 030c 	and.w	r3, r3, #12
 800985e:	4413      	add	r3, r2
 8009860:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	f003 031f 	and.w	r3, r3, #31
 800986c:	211f      	movs	r1, #31
 800986e:	fa01 f303 	lsl.w	r3, r1, r3
 8009872:	43db      	mvns	r3, r3
 8009874:	401a      	ands	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	0e9b      	lsrs	r3, r3, #26
 800987a:	f003 011f 	and.w	r1, r3, #31
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	f003 031f 	and.w	r3, r3, #31
 8009884:	fa01 f303 	lsl.w	r3, r1, r3
 8009888:	431a      	orrs	r2, r3
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800988e:	bf00      	nop
 8009890:	371c      	adds	r7, #28
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800989a:	b480      	push	{r7}
 800989c:	b083      	sub	sp, #12
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f023 0203 	bic.w	r2, r3, #3
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	431a      	orrs	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	60da      	str	r2, [r3, #12]
}
 80098b4:	bf00      	nop
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	f043 0201 	orr.w	r2, r3, #1
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	60da      	str	r2, [r3, #12]
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a08      	ldr	r2, [pc, #32]	@ (8009910 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d107      	bne.n	8009902 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	f023 0203 	bic.w	r2, r3, #3
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	431a      	orrs	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	60da      	str	r2, [r3, #12]
  }
}
 8009902:	bf00      	nop
 8009904:	370c      	adds	r7, #12
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	58026000 	.word	0x58026000

08009914 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009920:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8009924:	2b00      	cmp	r3, #0
 8009926:	d101      	bne.n	800992c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8009928:	2301      	movs	r3, #1
 800992a:	e000      	b.n	800992e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	370c      	adds	r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800993a:	b480      	push	{r7}
 800993c:	b087      	sub	sp, #28
 800993e:	af00      	add	r7, sp, #0
 8009940:	60f8      	str	r0, [r7, #12]
 8009942:	60b9      	str	r1, [r7, #8]
 8009944:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3314      	adds	r3, #20
 800994a:	461a      	mov	r2, r3
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	0e5b      	lsrs	r3, r3, #25
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	f003 0304 	and.w	r3, r3, #4
 8009956:	4413      	add	r3, r2
 8009958:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	0d1b      	lsrs	r3, r3, #20
 8009962:	f003 031f 	and.w	r3, r3, #31
 8009966:	2107      	movs	r1, #7
 8009968:	fa01 f303 	lsl.w	r3, r1, r3
 800996c:	43db      	mvns	r3, r3
 800996e:	401a      	ands	r2, r3
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	0d1b      	lsrs	r3, r3, #20
 8009974:	f003 031f 	and.w	r3, r3, #31
 8009978:	6879      	ldr	r1, [r7, #4]
 800997a:	fa01 f303 	lsl.w	r3, r1, r3
 800997e:	431a      	orrs	r2, r3
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009984:	bf00      	nop
 8009986:	371c      	adds	r7, #28
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4a1a      	ldr	r2, [pc, #104]	@ (8009a08 <LL_ADC_SetChannelSingleDiff+0x78>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d115      	bne.n	80099d0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099b0:	43db      	mvns	r3, r3
 80099b2:	401a      	ands	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f003 0318 	and.w	r3, r3, #24
 80099ba:	4914      	ldr	r1, [pc, #80]	@ (8009a0c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80099bc:	40d9      	lsrs	r1, r3
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	400b      	ands	r3, r1
 80099c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099c6:	431a      	orrs	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80099ce:	e014      	b.n	80099fa <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099dc:	43db      	mvns	r3, r3
 80099de:	401a      	ands	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f003 0318 	and.w	r3, r3, #24
 80099e6:	4909      	ldr	r1, [pc, #36]	@ (8009a0c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80099e8:	40d9      	lsrs	r1, r3
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	400b      	ands	r3, r1
 80099ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099f2:	431a      	orrs	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80099fa:	bf00      	nop
 80099fc:	3714      	adds	r7, #20
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	58026000 	.word	0x58026000
 8009a0c:	000fffff 	.word	0x000fffff

08009a10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	f003 031f 	and.w	r3, r3, #31
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	689a      	ldr	r2, [r3, #8]
 8009a54:	4b04      	ldr	r3, [pc, #16]	@ (8009a68 <LL_ADC_DisableDeepPowerDown+0x20>)
 8009a56:	4013      	ands	r3, r2
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	6093      	str	r3, [r2, #8]
}
 8009a5c:	bf00      	nop
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	5fffffc0 	.word	0x5fffffc0

08009a6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a80:	d101      	bne.n	8009a86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009a82:	2301      	movs	r3, #1
 8009a84:	e000      	b.n	8009a88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	689a      	ldr	r2, [r3, #8]
 8009aa0:	4b05      	ldr	r3, [pc, #20]	@ (8009ab8 <LL_ADC_EnableInternalRegulator+0x24>)
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	6fffffc0 	.word	0x6fffffc0

08009abc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009acc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ad0:	d101      	bne.n	8009ad6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e000      	b.n	8009ad8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689a      	ldr	r2, [r3, #8]
 8009af0:	4b05      	ldr	r3, [pc, #20]	@ (8009b08 <LL_ADC_Enable+0x24>)
 8009af2:	4013      	ands	r3, r2
 8009af4:	f043 0201 	orr.w	r2, r3, #1
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr
 8009b08:	7fffffc0 	.word	0x7fffffc0

08009b0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	f003 0301 	and.w	r3, r3, #1
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d101      	bne.n	8009b24 <LL_ADC_IsEnabled+0x18>
 8009b20:	2301      	movs	r3, #1
 8009b22:	e000      	b.n	8009b26 <LL_ADC_IsEnabled+0x1a>
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	370c      	adds	r7, #12
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
	...

08009b34 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	689a      	ldr	r2, [r3, #8]
 8009b40:	4b05      	ldr	r3, [pc, #20]	@ (8009b58 <LL_ADC_REG_StartConversion+0x24>)
 8009b42:	4013      	ands	r3, r2
 8009b44:	f043 0204 	orr.w	r2, r3, #4
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr
 8009b58:	7fffffc0 	.word	0x7fffffc0

08009b5c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	f003 0304 	and.w	r3, r3, #4
 8009b6c:	2b04      	cmp	r3, #4
 8009b6e:	d101      	bne.n	8009b74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009b70:	2301      	movs	r3, #1
 8009b72:	e000      	b.n	8009b76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	370c      	adds	r7, #12
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009b82:	b480      	push	{r7}
 8009b84:	b083      	sub	sp, #12
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	f003 0308 	and.w	r3, r3, #8
 8009b92:	2b08      	cmp	r3, #8
 8009b94:	d101      	bne.n	8009b9a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009b96:	2301      	movs	r3, #1
 8009b98:	e000      	b.n	8009b9c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009ba8:	b590      	push	{r4, r7, lr}
 8009baa:	b089      	sub	sp, #36	@ 0x24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d101      	bne.n	8009bc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e1ee      	b.n	8009fa0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d109      	bne.n	8009be4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7f9 fd15 	bl	8003600 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7ff ff3f 	bl	8009a6c <LL_ADC_IsDeepPowerDownEnabled>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d004      	beq.n	8009bfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff ff25 	bl	8009a48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7ff ff5a 	bl	8009abc <LL_ADC_IsInternalRegulatorEnabled>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d114      	bne.n	8009c38 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7ff ff3e 	bl	8009a94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009c18:	4b8e      	ldr	r3, [pc, #568]	@ (8009e54 <HAL_ADC_Init+0x2ac>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	099b      	lsrs	r3, r3, #6
 8009c1e:	4a8e      	ldr	r2, [pc, #568]	@ (8009e58 <HAL_ADC_Init+0x2b0>)
 8009c20:	fba2 2303 	umull	r2, r3, r2, r3
 8009c24:	099b      	lsrs	r3, r3, #6
 8009c26:	3301      	adds	r3, #1
 8009c28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009c2a:	e002      	b.n	8009c32 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1f9      	bne.n	8009c2c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7ff ff3d 	bl	8009abc <LL_ADC_IsInternalRegulatorEnabled>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10d      	bne.n	8009c64 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c4c:	f043 0210 	orr.w	r2, r3, #16
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c58:	f043 0201 	orr.w	r2, r3, #1
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7ff ff77 	bl	8009b5c <LL_ADC_REG_IsConversionOngoing>
 8009c6e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c74:	f003 0310 	and.w	r3, r3, #16
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f040 8188 	bne.w	8009f8e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f040 8184 	bne.w	8009f8e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c8a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009c8e:	f043 0202 	orr.w	r2, r3, #2
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7ff ff36 	bl	8009b0c <LL_ADC_IsEnabled>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d136      	bne.n	8009d14 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a6c      	ldr	r2, [pc, #432]	@ (8009e5c <HAL_ADC_Init+0x2b4>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d004      	beq.n	8009cba <HAL_ADC_Init+0x112>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a6a      	ldr	r2, [pc, #424]	@ (8009e60 <HAL_ADC_Init+0x2b8>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d10e      	bne.n	8009cd8 <HAL_ADC_Init+0x130>
 8009cba:	4868      	ldr	r0, [pc, #416]	@ (8009e5c <HAL_ADC_Init+0x2b4>)
 8009cbc:	f7ff ff26 	bl	8009b0c <LL_ADC_IsEnabled>
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	4867      	ldr	r0, [pc, #412]	@ (8009e60 <HAL_ADC_Init+0x2b8>)
 8009cc4:	f7ff ff22 	bl	8009b0c <LL_ADC_IsEnabled>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	4323      	orrs	r3, r4
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	bf0c      	ite	eq
 8009cd0:	2301      	moveq	r3, #1
 8009cd2:	2300      	movne	r3, #0
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	e008      	b.n	8009cea <HAL_ADC_Init+0x142>
 8009cd8:	4862      	ldr	r0, [pc, #392]	@ (8009e64 <HAL_ADC_Init+0x2bc>)
 8009cda:	f7ff ff17 	bl	8009b0c <LL_ADC_IsEnabled>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	bf0c      	ite	eq
 8009ce4:	2301      	moveq	r3, #1
 8009ce6:	2300      	movne	r3, #0
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d012      	beq.n	8009d14 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a5a      	ldr	r2, [pc, #360]	@ (8009e5c <HAL_ADC_Init+0x2b4>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d004      	beq.n	8009d02 <HAL_ADC_Init+0x15a>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a58      	ldr	r2, [pc, #352]	@ (8009e60 <HAL_ADC_Init+0x2b8>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d101      	bne.n	8009d06 <HAL_ADC_Init+0x15e>
 8009d02:	4a59      	ldr	r2, [pc, #356]	@ (8009e68 <HAL_ADC_Init+0x2c0>)
 8009d04:	e000      	b.n	8009d08 <HAL_ADC_Init+0x160>
 8009d06:	4a59      	ldr	r2, [pc, #356]	@ (8009e6c <HAL_ADC_Init+0x2c4>)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4610      	mov	r0, r2
 8009d10:	f7ff fc24 	bl	800955c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a52      	ldr	r2, [pc, #328]	@ (8009e64 <HAL_ADC_Init+0x2bc>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d129      	bne.n	8009d72 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	7e5b      	ldrb	r3, [r3, #25]
 8009d22:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009d28:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8009d2e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	2b08      	cmp	r3, #8
 8009d36:	d013      	beq.n	8009d60 <HAL_ADC_Init+0x1b8>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	2b0c      	cmp	r3, #12
 8009d3e:	d00d      	beq.n	8009d5c <HAL_ADC_Init+0x1b4>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	2b1c      	cmp	r3, #28
 8009d46:	d007      	beq.n	8009d58 <HAL_ADC_Init+0x1b0>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	2b18      	cmp	r3, #24
 8009d4e:	d101      	bne.n	8009d54 <HAL_ADC_Init+0x1ac>
 8009d50:	2318      	movs	r3, #24
 8009d52:	e006      	b.n	8009d62 <HAL_ADC_Init+0x1ba>
 8009d54:	2300      	movs	r3, #0
 8009d56:	e004      	b.n	8009d62 <HAL_ADC_Init+0x1ba>
 8009d58:	2310      	movs	r3, #16
 8009d5a:	e002      	b.n	8009d62 <HAL_ADC_Init+0x1ba>
 8009d5c:	2308      	movs	r3, #8
 8009d5e:	e000      	b.n	8009d62 <HAL_ADC_Init+0x1ba>
 8009d60:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8009d62:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d6a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	61bb      	str	r3, [r7, #24]
 8009d70:	e00e      	b.n	8009d90 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	7e5b      	ldrb	r3, [r3, #25]
 8009d76:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009d7c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8009d82:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d8a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d106      	bne.n	8009da8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	045b      	lsls	r3, r3, #17
 8009da2:	69ba      	ldr	r2, [r7, #24]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d009      	beq.n	8009dc4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dbc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009dbe:	69ba      	ldr	r2, [r7, #24]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a26      	ldr	r2, [pc, #152]	@ (8009e64 <HAL_ADC_Init+0x2bc>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d115      	bne.n	8009dfa <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68da      	ldr	r2, [r3, #12]
 8009dd4:	4b26      	ldr	r3, [pc, #152]	@ (8009e70 <HAL_ADC_Init+0x2c8>)
 8009dd6:	4013      	ands	r3, r2
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	6812      	ldr	r2, [r2, #0]
 8009ddc:	69b9      	ldr	r1, [r7, #24]
 8009dde:	430b      	orrs	r3, r1
 8009de0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	430a      	orrs	r2, r1
 8009df6:	611a      	str	r2, [r3, #16]
 8009df8:	e009      	b.n	8009e0e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68da      	ldr	r2, [r3, #12]
 8009e00:	4b1c      	ldr	r3, [pc, #112]	@ (8009e74 <HAL_ADC_Init+0x2cc>)
 8009e02:	4013      	ands	r3, r2
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	6812      	ldr	r2, [r2, #0]
 8009e08:	69b9      	ldr	r1, [r7, #24]
 8009e0a:	430b      	orrs	r3, r1
 8009e0c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7ff fea2 	bl	8009b5c <LL_ADC_REG_IsConversionOngoing>
 8009e18:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7ff feaf 	bl	8009b82 <LL_ADC_INJ_IsConversionOngoing>
 8009e24:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f040 808e 	bne.w	8009f4a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f040 808a 	bne.w	8009f4a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8009e64 <HAL_ADC_Init+0x2bc>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d11b      	bne.n	8009e78 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	7e1b      	ldrb	r3, [r3, #24]
 8009e44:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009e4c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	61bb      	str	r3, [r7, #24]
 8009e52:	e018      	b.n	8009e86 <HAL_ADC_Init+0x2de>
 8009e54:	24000004 	.word	0x24000004
 8009e58:	053e2d63 	.word	0x053e2d63
 8009e5c:	40022000 	.word	0x40022000
 8009e60:	40022100 	.word	0x40022100
 8009e64:	58026000 	.word	0x58026000
 8009e68:	40022300 	.word	0x40022300
 8009e6c:	58026300 	.word	0x58026300
 8009e70:	fff04007 	.word	0xfff04007
 8009e74:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	7e1b      	ldrb	r3, [r3, #24]
 8009e7c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8009e82:	4313      	orrs	r3, r2
 8009e84:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68da      	ldr	r2, [r3, #12]
 8009e8c:	4b46      	ldr	r3, [pc, #280]	@ (8009fa8 <HAL_ADC_Init+0x400>)
 8009e8e:	4013      	ands	r3, r2
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	6812      	ldr	r2, [r2, #0]
 8009e94:	69b9      	ldr	r1, [r7, #24]
 8009e96:	430b      	orrs	r3, r1
 8009e98:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d137      	bne.n	8009f14 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a3f      	ldr	r2, [pc, #252]	@ (8009fac <HAL_ADC_Init+0x404>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d116      	bne.n	8009ee2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	691a      	ldr	r2, [r3, #16]
 8009eba:	4b3d      	ldr	r3, [pc, #244]	@ (8009fb0 <HAL_ADC_Init+0x408>)
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009ec6:	4311      	orrs	r1, r2
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009ecc:	4311      	orrs	r1, r2
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009ed2:	430a      	orrs	r2, r1
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f042 0201 	orr.w	r2, r2, #1
 8009ede:	611a      	str	r2, [r3, #16]
 8009ee0:	e020      	b.n	8009f24 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	691a      	ldr	r2, [r3, #16]
 8009ee8:	4b32      	ldr	r3, [pc, #200]	@ (8009fb4 <HAL_ADC_Init+0x40c>)
 8009eea:	4013      	ands	r3, r2
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009ef0:	3a01      	subs	r2, #1
 8009ef2:	0411      	lsls	r1, r2, #16
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009ef8:	4311      	orrs	r1, r2
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009efe:	4311      	orrs	r1, r2
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009f04:	430a      	orrs	r2, r1
 8009f06:	431a      	orrs	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f042 0201 	orr.w	r2, r2, #1
 8009f10:	611a      	str	r2, [r3, #16]
 8009f12:	e007      	b.n	8009f24 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	691a      	ldr	r2, [r3, #16]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f022 0201 	bic.w	r2, r2, #1
 8009f22:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	430a      	orrs	r2, r1
 8009f38:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8009fac <HAL_ADC_Init+0x404>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d002      	beq.n	8009f4a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f001 f967 	bl	800b218 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d10c      	bne.n	8009f6c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f58:	f023 010f 	bic.w	r1, r3, #15
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	69db      	ldr	r3, [r3, #28]
 8009f60:	1e5a      	subs	r2, r3, #1
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	430a      	orrs	r2, r1
 8009f68:	631a      	str	r2, [r3, #48]	@ 0x30
 8009f6a:	e007      	b.n	8009f7c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f022 020f 	bic.w	r2, r2, #15
 8009f7a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f80:	f023 0303 	bic.w	r3, r3, #3
 8009f84:	f043 0201 	orr.w	r2, r3, #1
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	661a      	str	r2, [r3, #96]	@ 0x60
 8009f8c:	e007      	b.n	8009f9e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f92:	f043 0210 	orr.w	r2, r3, #16
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009f9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3724      	adds	r7, #36	@ 0x24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd90      	pop	{r4, r7, pc}
 8009fa8:	ffffbffc 	.word	0xffffbffc
 8009fac:	58026000 	.word	0x58026000
 8009fb0:	fc00f81f 	.word	0xfc00f81f
 8009fb4:	fc00f81e 	.word	0xfc00f81e

08009fb8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a60      	ldr	r2, [pc, #384]	@ (800a14c <HAL_ADC_Start_DMA+0x194>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d004      	beq.n	8009fd8 <HAL_ADC_Start_DMA+0x20>
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a5f      	ldr	r2, [pc, #380]	@ (800a150 <HAL_ADC_Start_DMA+0x198>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d101      	bne.n	8009fdc <HAL_ADC_Start_DMA+0x24>
 8009fd8:	4b5e      	ldr	r3, [pc, #376]	@ (800a154 <HAL_ADC_Start_DMA+0x19c>)
 8009fda:	e000      	b.n	8009fde <HAL_ADC_Start_DMA+0x26>
 8009fdc:	4b5e      	ldr	r3, [pc, #376]	@ (800a158 <HAL_ADC_Start_DMA+0x1a0>)
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7ff fd16 	bl	8009a10 <LL_ADC_GetMultimode>
 8009fe4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7ff fdb6 	bl	8009b5c <LL_ADC_REG_IsConversionOngoing>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f040 80a2 	bne.w	800a13c <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d101      	bne.n	800a006 <HAL_ADC_Start_DMA+0x4e>
 800a002:	2302      	movs	r3, #2
 800a004:	e09d      	b.n	800a142 <HAL_ADC_Start_DMA+0x18a>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d006      	beq.n	800a022 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	2b05      	cmp	r3, #5
 800a018:	d003      	beq.n	800a022 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	2b09      	cmp	r3, #9
 800a01e:	f040 8086 	bne.w	800a12e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 ffda 	bl	800afdc <ADC_Enable>
 800a028:	4603      	mov	r3, r0
 800a02a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d178      	bne.n	800a124 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a036:	4b49      	ldr	r3, [pc, #292]	@ (800a15c <HAL_ADC_Start_DMA+0x1a4>)
 800a038:	4013      	ands	r3, r2
 800a03a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a42      	ldr	r2, [pc, #264]	@ (800a150 <HAL_ADC_Start_DMA+0x198>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d002      	beq.n	800a052 <HAL_ADC_Start_DMA+0x9a>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	e000      	b.n	800a054 <HAL_ADC_Start_DMA+0x9c>
 800a052:	4b3e      	ldr	r3, [pc, #248]	@ (800a14c <HAL_ADC_Start_DMA+0x194>)
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	6812      	ldr	r2, [r2, #0]
 800a058:	4293      	cmp	r3, r2
 800a05a:	d002      	beq.n	800a062 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d105      	bne.n	800a06e <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a066:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a072:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a076:	2b00      	cmp	r3, #0
 800a078:	d006      	beq.n	800a088 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a07e:	f023 0206 	bic.w	r2, r3, #6
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	665a      	str	r2, [r3, #100]	@ 0x64
 800a086:	e002      	b.n	800a08e <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a092:	4a33      	ldr	r2, [pc, #204]	@ (800a160 <HAL_ADC_Start_DMA+0x1a8>)
 800a094:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a09a:	4a32      	ldr	r2, [pc, #200]	@ (800a164 <HAL_ADC_Start_DMA+0x1ac>)
 800a09c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0a2:	4a31      	ldr	r2, [pc, #196]	@ (800a168 <HAL_ADC_Start_DMA+0x1b0>)
 800a0a4:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	221c      	movs	r2, #28
 800a0ac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f042 0210 	orr.w	r2, r2, #16
 800a0c4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a28      	ldr	r2, [pc, #160]	@ (800a16c <HAL_ADC_Start_DMA+0x1b4>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d10f      	bne.n	800a0f0 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a0da:	005b      	lsls	r3, r3, #1
 800a0dc:	4619      	mov	r1, r3
 800a0de:	4610      	mov	r0, r2
 800a0e0:	f7ff fbfe 	bl	80098e0 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7ff fbe9 	bl	80098c0 <LL_ADC_EnableDMAReq>
 800a0ee:	e007      	b.n	800a100 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	f7ff fbcd 	bl	800989a <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3340      	adds	r3, #64	@ 0x40
 800a10a:	4619      	mov	r1, r3
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f001 fe82 	bl	800be18 <HAL_DMA_Start_IT>
 800a114:	4603      	mov	r3, r0
 800a116:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7ff fd09 	bl	8009b34 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a122:	e00d      	b.n	800a140 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 800a12c:	e008      	b.n	800a140 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800a13a:	e001      	b.n	800a140 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a13c:	2302      	movs	r3, #2
 800a13e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a140:	7dfb      	ldrb	r3, [r7, #23]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3718      	adds	r7, #24
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	40022000 	.word	0x40022000
 800a150:	40022100 	.word	0x40022100
 800a154:	40022300 	.word	0x40022300
 800a158:	58026300 	.word	0x58026300
 800a15c:	fffff0fe 	.word	0xfffff0fe
 800a160:	0800b0f1 	.word	0x0800b0f1
 800a164:	0800b1c9 	.word	0x0800b1c9
 800a168:	0800b1e5 	.word	0x0800b1e5
 800a16c:	58026000 	.word	0x58026000

0800a170 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b08a      	sub	sp, #40	@ 0x28
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800a178:	2300      	movs	r3, #0
 800a17a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a87      	ldr	r2, [pc, #540]	@ (800a3b0 <HAL_ADC_IRQHandler+0x240>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d004      	beq.n	800a1a0 <HAL_ADC_IRQHandler+0x30>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a86      	ldr	r2, [pc, #536]	@ (800a3b4 <HAL_ADC_IRQHandler+0x244>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d101      	bne.n	800a1a4 <HAL_ADC_IRQHandler+0x34>
 800a1a0:	4b85      	ldr	r3, [pc, #532]	@ (800a3b8 <HAL_ADC_IRQHandler+0x248>)
 800a1a2:	e000      	b.n	800a1a6 <HAL_ADC_IRQHandler+0x36>
 800a1a4:	4b85      	ldr	r3, [pc, #532]	@ (800a3bc <HAL_ADC_IRQHandler+0x24c>)
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7ff fc32 	bl	8009a10 <LL_ADC_GetMultimode>
 800a1ac:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	f003 0302 	and.w	r3, r3, #2
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d017      	beq.n	800a1e8 <HAL_ADC_IRQHandler+0x78>
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	f003 0302 	and.w	r3, r3, #2
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d012      	beq.n	800a1e8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1c6:	f003 0310 	and.w	r3, r3, #16
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d105      	bne.n	800a1da <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1d2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f001 f932 	bl	800b444 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2202      	movs	r2, #2
 800a1e6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	f003 0304 	and.w	r3, r3, #4
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d004      	beq.n	800a1fc <HAL_ADC_IRQHandler+0x8c>
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	f003 0304 	and.w	r3, r3, #4
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10a      	bne.n	800a212 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 8083 	beq.w	800a30e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	f003 0308 	and.w	r3, r3, #8
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d07d      	beq.n	800a30e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a216:	f003 0310 	and.w	r3, r3, #16
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d105      	bne.n	800a22a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a222:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4618      	mov	r0, r3
 800a230:	f7ff faf4 	bl	800981c <LL_ADC_REG_IsTriggerSourceSWStart>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d062      	beq.n	800a300 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a5d      	ldr	r2, [pc, #372]	@ (800a3b4 <HAL_ADC_IRQHandler+0x244>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d002      	beq.n	800a24a <HAL_ADC_IRQHandler+0xda>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	e000      	b.n	800a24c <HAL_ADC_IRQHandler+0xdc>
 800a24a:	4b59      	ldr	r3, [pc, #356]	@ (800a3b0 <HAL_ADC_IRQHandler+0x240>)
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	6812      	ldr	r2, [r2, #0]
 800a250:	4293      	cmp	r3, r2
 800a252:	d008      	beq.n	800a266 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d005      	beq.n	800a266 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2b05      	cmp	r3, #5
 800a25e:	d002      	beq.n	800a266 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	2b09      	cmp	r3, #9
 800a264:	d104      	bne.n	800a270 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	623b      	str	r3, [r7, #32]
 800a26e:	e00c      	b.n	800a28a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a4f      	ldr	r2, [pc, #316]	@ (800a3b4 <HAL_ADC_IRQHandler+0x244>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d002      	beq.n	800a280 <HAL_ADC_IRQHandler+0x110>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	e000      	b.n	800a282 <HAL_ADC_IRQHandler+0x112>
 800a280:	4b4b      	ldr	r3, [pc, #300]	@ (800a3b0 <HAL_ADC_IRQHandler+0x240>)
 800a282:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d135      	bne.n	800a300 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 0308 	and.w	r3, r3, #8
 800a29e:	2b08      	cmp	r3, #8
 800a2a0:	d12e      	bne.n	800a300 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7ff fc58 	bl	8009b5c <LL_ADC_REG_IsConversionOngoing>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d11a      	bne.n	800a2e8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	685a      	ldr	r2, [r3, #4]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f022 020c 	bic.w	r2, r2, #12
 800a2c0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d112      	bne.n	800a300 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2de:	f043 0201 	orr.w	r2, r3, #1
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	661a      	str	r2, [r3, #96]	@ 0x60
 800a2e6:	e00b      	b.n	800a300 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2ec:	f043 0210 	orr.w	r2, r3, #16
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2f8:	f043 0201 	orr.w	r2, r3, #1
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f96f 	bl	800a5e4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	220c      	movs	r2, #12
 800a30c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	f003 0320 	and.w	r3, r3, #32
 800a314:	2b00      	cmp	r3, #0
 800a316:	d004      	beq.n	800a322 <HAL_ADC_IRQHandler+0x1b2>
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	f003 0320 	and.w	r3, r3, #32
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10b      	bne.n	800a33a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 80a0 	beq.w	800a46e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a334:	2b00      	cmp	r3, #0
 800a336:	f000 809a 	beq.w	800a46e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a33e:	f003 0310 	and.w	r3, r3, #16
 800a342:	2b00      	cmp	r3, #0
 800a344:	d105      	bne.n	800a352 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a34a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4618      	mov	r0, r3
 800a358:	f7ff fadc 	bl	8009914 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800a35c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4618      	mov	r0, r3
 800a364:	f7ff fa5a 	bl	800981c <LL_ADC_REG_IsTriggerSourceSWStart>
 800a368:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a11      	ldr	r2, [pc, #68]	@ (800a3b4 <HAL_ADC_IRQHandler+0x244>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d002      	beq.n	800a37a <HAL_ADC_IRQHandler+0x20a>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	e000      	b.n	800a37c <HAL_ADC_IRQHandler+0x20c>
 800a37a:	4b0d      	ldr	r3, [pc, #52]	@ (800a3b0 <HAL_ADC_IRQHandler+0x240>)
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	6812      	ldr	r2, [r2, #0]
 800a380:	4293      	cmp	r3, r2
 800a382:	d008      	beq.n	800a396 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d005      	beq.n	800a396 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	2b06      	cmp	r3, #6
 800a38e:	d002      	beq.n	800a396 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	2b07      	cmp	r3, #7
 800a394:	d104      	bne.n	800a3a0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	623b      	str	r3, [r7, #32]
 800a39e:	e014      	b.n	800a3ca <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a03      	ldr	r2, [pc, #12]	@ (800a3b4 <HAL_ADC_IRQHandler+0x244>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d00a      	beq.n	800a3c0 <HAL_ADC_IRQHandler+0x250>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	e008      	b.n	800a3c2 <HAL_ADC_IRQHandler+0x252>
 800a3b0:	40022000 	.word	0x40022000
 800a3b4:	40022100 	.word	0x40022100
 800a3b8:	40022300 	.word	0x40022300
 800a3bc:	58026300 	.word	0x58026300
 800a3c0:	4b84      	ldr	r3, [pc, #528]	@ (800a5d4 <HAL_ADC_IRQHandler+0x464>)
 800a3c2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d047      	beq.n	800a460 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800a3d0:	6a3b      	ldr	r3, [r7, #32]
 800a3d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d007      	beq.n	800a3ea <HAL_ADC_IRQHandler+0x27a>
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d03f      	beq.n	800a460 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d13a      	bne.n	800a460 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3f4:	2b40      	cmp	r3, #64	@ 0x40
 800a3f6:	d133      	bne.n	800a460 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d12e      	bne.n	800a460 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4618      	mov	r0, r3
 800a408:	f7ff fbbb 	bl	8009b82 <LL_ADC_INJ_IsConversionOngoing>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d11a      	bne.n	800a448 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	685a      	ldr	r2, [r3, #4]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a420:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a426:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a436:	2b00      	cmp	r3, #0
 800a438:	d112      	bne.n	800a460 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a43e:	f043 0201 	orr.w	r2, r3, #1
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	661a      	str	r2, [r3, #96]	@ 0x60
 800a446:	e00b      	b.n	800a460 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a44c:	f043 0210 	orr.w	r2, r3, #16
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a458:	f043 0201 	orr.w	r2, r3, #1
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 ffc7 	bl	800b3f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2260      	movs	r2, #96	@ 0x60
 800a46c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a474:	2b00      	cmp	r3, #0
 800a476:	d011      	beq.n	800a49c <HAL_ADC_IRQHandler+0x32c>
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00c      	beq.n	800a49c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a486:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 f8bc 	bl	800a60c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2280      	movs	r2, #128	@ 0x80
 800a49a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d012      	beq.n	800a4cc <HAL_ADC_IRQHandler+0x35c>
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00d      	beq.n	800a4cc <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4b4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 ffad 	bl	800b41c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a4ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d012      	beq.n	800a4fc <HAL_ADC_IRQHandler+0x38c>
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00d      	beq.n	800a4fc <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 ff9f 	bl	800b430 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a4fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	f003 0310 	and.w	r3, r3, #16
 800a502:	2b00      	cmp	r3, #0
 800a504:	d043      	beq.n	800a58e <HAL_ADC_IRQHandler+0x41e>
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	f003 0310 	and.w	r3, r3, #16
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d03e      	beq.n	800a58e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a514:	2b00      	cmp	r3, #0
 800a516:	d102      	bne.n	800a51e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800a518:	2301      	movs	r3, #1
 800a51a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a51c:	e021      	b.n	800a562 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d015      	beq.n	800a550 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a2a      	ldr	r2, [pc, #168]	@ (800a5d4 <HAL_ADC_IRQHandler+0x464>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d004      	beq.n	800a538 <HAL_ADC_IRQHandler+0x3c8>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a29      	ldr	r2, [pc, #164]	@ (800a5d8 <HAL_ADC_IRQHandler+0x468>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d101      	bne.n	800a53c <HAL_ADC_IRQHandler+0x3cc>
 800a538:	4b28      	ldr	r3, [pc, #160]	@ (800a5dc <HAL_ADC_IRQHandler+0x46c>)
 800a53a:	e000      	b.n	800a53e <HAL_ADC_IRQHandler+0x3ce>
 800a53c:	4b28      	ldr	r3, [pc, #160]	@ (800a5e0 <HAL_ADC_IRQHandler+0x470>)
 800a53e:	4618      	mov	r0, r3
 800a540:	f7ff fa74 	bl	8009a2c <LL_ADC_GetMultiDMATransfer>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00b      	beq.n	800a562 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a54a:	2301      	movs	r3, #1
 800a54c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a54e:	e008      	b.n	800a562 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	f003 0303 	and.w	r3, r3, #3
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d001      	beq.n	800a562 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a55e:	2301      	movs	r3, #1
 800a560:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a564:	2b01      	cmp	r3, #1
 800a566:	d10e      	bne.n	800a586 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a56c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a578:	f043 0202 	orr.w	r2, r3, #2
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 f84d 	bl	800a620 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2210      	movs	r2, #16
 800a58c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a594:	2b00      	cmp	r3, #0
 800a596:	d018      	beq.n	800a5ca <HAL_ADC_IRQHandler+0x45a>
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d013      	beq.n	800a5ca <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5a6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5b2:	f043 0208 	orr.w	r2, r3, #8
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a5c2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 ff1f 	bl	800b408 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a5ca:	bf00      	nop
 800a5cc:	3728      	adds	r7, #40	@ 0x28
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	40022000 	.word	0x40022000
 800a5d8:	40022100 	.word	0x40022100
 800a5dc:	40022300 	.word	0x40022300
 800a5e0:	58026300 	.word	0x58026300

0800a5e4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a628:	bf00      	nop
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a634:	b590      	push	{r4, r7, lr}
 800a636:	b0a5      	sub	sp, #148	@ 0x94
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800a644:	2300      	movs	r3, #0
 800a646:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a64e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	4aa4      	ldr	r2, [pc, #656]	@ (800a8e8 <HAL_ADC_ConfigChannel+0x2b4>)
 800a656:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d102      	bne.n	800a668 <HAL_ADC_ConfigChannel+0x34>
 800a662:	2302      	movs	r3, #2
 800a664:	f000 bca2 	b.w	800afac <HAL_ADC_ConfigChannel+0x978>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4618      	mov	r0, r3
 800a676:	f7ff fa71 	bl	8009b5c <LL_ADC_REG_IsConversionOngoing>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f040 8486 	bne.w	800af8e <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	db31      	blt.n	800a6ee <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a97      	ldr	r2, [pc, #604]	@ (800a8ec <HAL_ADC_ConfigChannel+0x2b8>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d02c      	beq.n	800a6ee <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d108      	bne.n	800a6b2 <HAL_ADC_ConfigChannel+0x7e>
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	0e9b      	lsrs	r3, r3, #26
 800a6a6:	f003 031f 	and.w	r3, r3, #31
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b0:	e016      	b.n	800a6e0 <HAL_ADC_ConfigChannel+0xac>
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6ba:	fa93 f3a3 	rbit	r3, r3
 800a6be:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800a6c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a6c2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800a6c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d101      	bne.n	800a6ce <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800a6ca:	2320      	movs	r3, #32
 800a6cc:	e003      	b.n	800a6d6 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800a6ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6d0:	fab3 f383 	clz	r3, r3
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	f003 031f 	and.w	r3, r3, #31
 800a6da:	2201      	movs	r2, #1
 800a6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	6812      	ldr	r2, [r2, #0]
 800a6e4:	69d1      	ldr	r1, [r2, #28]
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	6812      	ldr	r2, [r2, #0]
 800a6ea:	430b      	orrs	r3, r1
 800a6ec:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6818      	ldr	r0, [r3, #0]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	6859      	ldr	r1, [r3, #4]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	f7ff f8a1 	bl	8009842 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4618      	mov	r0, r3
 800a706:	f7ff fa29 	bl	8009b5c <LL_ADC_REG_IsConversionOngoing>
 800a70a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4618      	mov	r0, r3
 800a714:	f7ff fa35 	bl	8009b82 <LL_ADC_INJ_IsConversionOngoing>
 800a718:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a71c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a720:	2b00      	cmp	r3, #0
 800a722:	f040 824a 	bne.w	800abba <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a726:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f040 8245 	bne.w	800abba <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6818      	ldr	r0, [r3, #0]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	6819      	ldr	r1, [r3, #0]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	461a      	mov	r2, r3
 800a73e:	f7ff f8fc 	bl	800993a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a69      	ldr	r2, [pc, #420]	@ (800a8ec <HAL_ADC_ConfigChannel+0x2b8>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d10d      	bne.n	800a768 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	695a      	ldr	r2, [r3, #20]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	08db      	lsrs	r3, r3, #3
 800a758:	f003 0303 	and.w	r3, r3, #3
 800a75c:	005b      	lsls	r3, r3, #1
 800a75e:	fa02 f303 	lsl.w	r3, r2, r3
 800a762:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a766:	e032      	b.n	800a7ce <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a768:	4b61      	ldr	r3, [pc, #388]	@ (800a8f0 <HAL_ADC_ConfigChannel+0x2bc>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a770:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a774:	d10b      	bne.n	800a78e <HAL_ADC_ConfigChannel+0x15a>
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	695a      	ldr	r2, [r3, #20]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	089b      	lsrs	r3, r3, #2
 800a782:	f003 0307 	and.w	r3, r3, #7
 800a786:	005b      	lsls	r3, r3, #1
 800a788:	fa02 f303 	lsl.w	r3, r2, r3
 800a78c:	e01d      	b.n	800a7ca <HAL_ADC_ConfigChannel+0x196>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	f003 0310 	and.w	r3, r3, #16
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10b      	bne.n	800a7b4 <HAL_ADC_ConfigChannel+0x180>
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	695a      	ldr	r2, [r3, #20]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	089b      	lsrs	r3, r3, #2
 800a7a8:	f003 0307 	and.w	r3, r3, #7
 800a7ac:	005b      	lsls	r3, r3, #1
 800a7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b2:	e00a      	b.n	800a7ca <HAL_ADC_ConfigChannel+0x196>
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	695a      	ldr	r2, [r3, #20]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	089b      	lsrs	r3, r3, #2
 800a7c0:	f003 0304 	and.w	r3, r3, #4
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	691b      	ldr	r3, [r3, #16]
 800a7d2:	2b04      	cmp	r3, #4
 800a7d4:	d048      	beq.n	800a868 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6818      	ldr	r0, [r3, #0]
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	6919      	ldr	r1, [r3, #16]
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a7e6:	f7fe ff27 	bl	8009638 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a3f      	ldr	r2, [pc, #252]	@ (800a8ec <HAL_ADC_ConfigChannel+0x2b8>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d119      	bne.n	800a828 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6818      	ldr	r0, [r3, #0]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	6919      	ldr	r1, [r3, #16]
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	69db      	ldr	r3, [r3, #28]
 800a800:	461a      	mov	r2, r3
 800a802:	f7fe ffbf 	bl	8009784 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6818      	ldr	r0, [r3, #0]
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	6919      	ldr	r1, [r3, #16]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d102      	bne.n	800a81e <HAL_ADC_ConfigChannel+0x1ea>
 800a818:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a81c:	e000      	b.n	800a820 <HAL_ADC_ConfigChannel+0x1ec>
 800a81e:	2300      	movs	r3, #0
 800a820:	461a      	mov	r2, r3
 800a822:	f7fe ff8d 	bl	8009740 <LL_ADC_SetOffsetSaturation>
 800a826:	e1c8      	b.n	800abba <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6818      	ldr	r0, [r3, #0]
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	6919      	ldr	r1, [r3, #16]
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a836:	2b01      	cmp	r3, #1
 800a838:	d102      	bne.n	800a840 <HAL_ADC_ConfigChannel+0x20c>
 800a83a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a83e:	e000      	b.n	800a842 <HAL_ADC_ConfigChannel+0x20e>
 800a840:	2300      	movs	r3, #0
 800a842:	461a      	mov	r2, r3
 800a844:	f7fe ff5a 	bl	80096fc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6818      	ldr	r0, [r3, #0]
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	6919      	ldr	r1, [r3, #16]
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	7e1b      	ldrb	r3, [r3, #24]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d102      	bne.n	800a85e <HAL_ADC_ConfigChannel+0x22a>
 800a858:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a85c:	e000      	b.n	800a860 <HAL_ADC_ConfigChannel+0x22c>
 800a85e:	2300      	movs	r3, #0
 800a860:	461a      	mov	r2, r3
 800a862:	f7fe ff31 	bl	80096c8 <LL_ADC_SetDataRightShift>
 800a866:	e1a8      	b.n	800abba <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a1f      	ldr	r2, [pc, #124]	@ (800a8ec <HAL_ADC_ConfigChannel+0x2b8>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	f040 815b 	bne.w	800ab2a <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2100      	movs	r1, #0
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fe ff0e 	bl	800969c <LL_ADC_GetOffsetChannel>
 800a880:	4603      	mov	r3, r0
 800a882:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a886:	2b00      	cmp	r3, #0
 800a888:	d10a      	bne.n	800a8a0 <HAL_ADC_ConfigChannel+0x26c>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2100      	movs	r1, #0
 800a890:	4618      	mov	r0, r3
 800a892:	f7fe ff03 	bl	800969c <LL_ADC_GetOffsetChannel>
 800a896:	4603      	mov	r3, r0
 800a898:	0e9b      	lsrs	r3, r3, #26
 800a89a:	f003 021f 	and.w	r2, r3, #31
 800a89e:	e017      	b.n	800a8d0 <HAL_ADC_ConfigChannel+0x29c>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fe fef8 	bl	800969c <LL_ADC_GetOffsetChannel>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8b2:	fa93 f3a3 	rbit	r3, r3
 800a8b6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800a8b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800a8bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d101      	bne.n	800a8c6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800a8c2:	2320      	movs	r3, #32
 800a8c4:	e003      	b.n	800a8ce <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800a8c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8c8:	fab3 f383 	clz	r3, r3
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10b      	bne.n	800a8f4 <HAL_ADC_ConfigChannel+0x2c0>
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	0e9b      	lsrs	r3, r3, #26
 800a8e2:	f003 031f 	and.w	r3, r3, #31
 800a8e6:	e017      	b.n	800a918 <HAL_ADC_ConfigChannel+0x2e4>
 800a8e8:	47ff0000 	.word	0x47ff0000
 800a8ec:	58026000 	.word	0x58026000
 800a8f0:	5c001000 	.word	0x5c001000
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8fc:	fa93 f3a3 	rbit	r3, r3
 800a900:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800a902:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a904:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800a906:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d101      	bne.n	800a910 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800a90c:	2320      	movs	r3, #32
 800a90e:	e003      	b.n	800a918 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800a910:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a912:	fab3 f383 	clz	r3, r3
 800a916:	b2db      	uxtb	r3, r3
 800a918:	429a      	cmp	r2, r3
 800a91a:	d106      	bne.n	800a92a <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2200      	movs	r2, #0
 800a922:	2100      	movs	r1, #0
 800a924:	4618      	mov	r0, r3
 800a926:	f7fe ff4f 	bl	80097c8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2101      	movs	r1, #1
 800a930:	4618      	mov	r0, r3
 800a932:	f7fe feb3 	bl	800969c <LL_ADC_GetOffsetChannel>
 800a936:	4603      	mov	r3, r0
 800a938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10a      	bne.n	800a956 <HAL_ADC_ConfigChannel+0x322>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2101      	movs	r1, #1
 800a946:	4618      	mov	r0, r3
 800a948:	f7fe fea8 	bl	800969c <LL_ADC_GetOffsetChannel>
 800a94c:	4603      	mov	r3, r0
 800a94e:	0e9b      	lsrs	r3, r3, #26
 800a950:	f003 021f 	and.w	r2, r3, #31
 800a954:	e017      	b.n	800a986 <HAL_ADC_ConfigChannel+0x352>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2101      	movs	r1, #1
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7fe fe9d 	bl	800969c <LL_ADC_GetOffsetChannel>
 800a962:	4603      	mov	r3, r0
 800a964:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a968:	fa93 f3a3 	rbit	r3, r3
 800a96c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800a96e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a970:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800a972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a974:	2b00      	cmp	r3, #0
 800a976:	d101      	bne.n	800a97c <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800a978:	2320      	movs	r3, #32
 800a97a:	e003      	b.n	800a984 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800a97c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a97e:	fab3 f383 	clz	r3, r3
 800a982:	b2db      	uxtb	r3, r3
 800a984:	461a      	mov	r2, r3
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d105      	bne.n	800a99e <HAL_ADC_ConfigChannel+0x36a>
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	0e9b      	lsrs	r3, r3, #26
 800a998:	f003 031f 	and.w	r3, r3, #31
 800a99c:	e011      	b.n	800a9c2 <HAL_ADC_ConfigChannel+0x38e>
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9a6:	fa93 f3a3 	rbit	r3, r3
 800a9aa:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800a9ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800a9b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d101      	bne.n	800a9ba <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800a9b6:	2320      	movs	r3, #32
 800a9b8:	e003      	b.n	800a9c2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800a9ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9bc:	fab3 f383 	clz	r3, r3
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d106      	bne.n	800a9d4 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7fe fefa 	bl	80097c8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2102      	movs	r1, #2
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fe fe5e 	bl	800969c <LL_ADC_GetOffsetChannel>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d10a      	bne.n	800aa00 <HAL_ADC_ConfigChannel+0x3cc>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2102      	movs	r1, #2
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7fe fe53 	bl	800969c <LL_ADC_GetOffsetChannel>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	0e9b      	lsrs	r3, r3, #26
 800a9fa:	f003 021f 	and.w	r2, r3, #31
 800a9fe:	e017      	b.n	800aa30 <HAL_ADC_ConfigChannel+0x3fc>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2102      	movs	r1, #2
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7fe fe48 	bl	800969c <LL_ADC_GetOffsetChannel>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa12:	fa93 f3a3 	rbit	r3, r3
 800aa16:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800aa18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800aa1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d101      	bne.n	800aa26 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800aa22:	2320      	movs	r3, #32
 800aa24:	e003      	b.n	800aa2e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800aa26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa28:	fab3 f383 	clz	r3, r3
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	461a      	mov	r2, r3
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d105      	bne.n	800aa48 <HAL_ADC_ConfigChannel+0x414>
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	0e9b      	lsrs	r3, r3, #26
 800aa42:	f003 031f 	and.w	r3, r3, #31
 800aa46:	e011      	b.n	800aa6c <HAL_ADC_ConfigChannel+0x438>
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa50:	fa93 f3a3 	rbit	r3, r3
 800aa54:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800aa56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa58:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d101      	bne.n	800aa64 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800aa60:	2320      	movs	r3, #32
 800aa62:	e003      	b.n	800aa6c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800aa64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa66:	fab3 f383 	clz	r3, r3
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d106      	bne.n	800aa7e <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2200      	movs	r2, #0
 800aa76:	2102      	movs	r1, #2
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7fe fea5 	bl	80097c8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2103      	movs	r1, #3
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fe fe09 	bl	800969c <LL_ADC_GetOffsetChannel>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10a      	bne.n	800aaaa <HAL_ADC_ConfigChannel+0x476>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2103      	movs	r1, #3
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7fe fdfe 	bl	800969c <LL_ADC_GetOffsetChannel>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	0e9b      	lsrs	r3, r3, #26
 800aaa4:	f003 021f 	and.w	r2, r3, #31
 800aaa8:	e017      	b.n	800aada <HAL_ADC_ConfigChannel+0x4a6>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2103      	movs	r1, #3
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7fe fdf3 	bl	800969c <LL_ADC_GetOffsetChannel>
 800aab6:	4603      	mov	r3, r0
 800aab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	fa93 f3a3 	rbit	r3, r3
 800aac0:	61fb      	str	r3, [r7, #28]
  return result;
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800aac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d101      	bne.n	800aad0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800aacc:	2320      	movs	r3, #32
 800aace:	e003      	b.n	800aad8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800aad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad2:	fab3 f383 	clz	r3, r3
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	461a      	mov	r2, r3
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d105      	bne.n	800aaf2 <HAL_ADC_ConfigChannel+0x4be>
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	0e9b      	lsrs	r3, r3, #26
 800aaec:	f003 031f 	and.w	r3, r3, #31
 800aaf0:	e011      	b.n	800ab16 <HAL_ADC_ConfigChannel+0x4e2>
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	fa93 f3a3 	rbit	r3, r3
 800aafe:	613b      	str	r3, [r7, #16]
  return result;
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d101      	bne.n	800ab0e <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800ab0a:	2320      	movs	r3, #32
 800ab0c:	e003      	b.n	800ab16 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	fab3 f383 	clz	r3, r3
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d14f      	bne.n	800abba <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	2103      	movs	r1, #3
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fe fe50 	bl	80097c8 <LL_ADC_SetOffsetState>
 800ab28:	e047      	b.n	800abba <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	069b      	lsls	r3, r3, #26
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d107      	bne.n	800ab4e <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ab4c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	069b      	lsls	r3, r3, #26
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d107      	bne.n	800ab72 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ab70:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	069b      	lsls	r3, r3, #26
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d107      	bne.n	800ab96 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ab94:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab9c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	069b      	lsls	r3, r3, #26
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d107      	bne.n	800abba <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800abb8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe ffa4 	bl	8009b0c <LL_ADC_IsEnabled>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f040 81ea 	bne.w	800afa0 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6818      	ldr	r0, [r3, #0]
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	6819      	ldr	r1, [r3, #0]
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	461a      	mov	r2, r3
 800abda:	f7fe fed9 	bl	8009990 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	4a7a      	ldr	r2, [pc, #488]	@ (800adcc <HAL_ADC_ConfigChannel+0x798>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	f040 80e0 	bne.w	800adaa <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4977      	ldr	r1, [pc, #476]	@ (800add0 <HAL_ADC_ConfigChannel+0x79c>)
 800abf4:	428b      	cmp	r3, r1
 800abf6:	d147      	bne.n	800ac88 <HAL_ADC_ConfigChannel+0x654>
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4975      	ldr	r1, [pc, #468]	@ (800add4 <HAL_ADC_ConfigChannel+0x7a0>)
 800abfe:	428b      	cmp	r3, r1
 800ac00:	d040      	beq.n	800ac84 <HAL_ADC_ConfigChannel+0x650>
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4974      	ldr	r1, [pc, #464]	@ (800add8 <HAL_ADC_ConfigChannel+0x7a4>)
 800ac08:	428b      	cmp	r3, r1
 800ac0a:	d039      	beq.n	800ac80 <HAL_ADC_ConfigChannel+0x64c>
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4972      	ldr	r1, [pc, #456]	@ (800addc <HAL_ADC_ConfigChannel+0x7a8>)
 800ac12:	428b      	cmp	r3, r1
 800ac14:	d032      	beq.n	800ac7c <HAL_ADC_ConfigChannel+0x648>
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4971      	ldr	r1, [pc, #452]	@ (800ade0 <HAL_ADC_ConfigChannel+0x7ac>)
 800ac1c:	428b      	cmp	r3, r1
 800ac1e:	d02b      	beq.n	800ac78 <HAL_ADC_ConfigChannel+0x644>
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	496f      	ldr	r1, [pc, #444]	@ (800ade4 <HAL_ADC_ConfigChannel+0x7b0>)
 800ac26:	428b      	cmp	r3, r1
 800ac28:	d024      	beq.n	800ac74 <HAL_ADC_ConfigChannel+0x640>
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	496e      	ldr	r1, [pc, #440]	@ (800ade8 <HAL_ADC_ConfigChannel+0x7b4>)
 800ac30:	428b      	cmp	r3, r1
 800ac32:	d01d      	beq.n	800ac70 <HAL_ADC_ConfigChannel+0x63c>
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	496c      	ldr	r1, [pc, #432]	@ (800adec <HAL_ADC_ConfigChannel+0x7b8>)
 800ac3a:	428b      	cmp	r3, r1
 800ac3c:	d016      	beq.n	800ac6c <HAL_ADC_ConfigChannel+0x638>
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	496b      	ldr	r1, [pc, #428]	@ (800adf0 <HAL_ADC_ConfigChannel+0x7bc>)
 800ac44:	428b      	cmp	r3, r1
 800ac46:	d00f      	beq.n	800ac68 <HAL_ADC_ConfigChannel+0x634>
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4969      	ldr	r1, [pc, #420]	@ (800adf4 <HAL_ADC_ConfigChannel+0x7c0>)
 800ac4e:	428b      	cmp	r3, r1
 800ac50:	d008      	beq.n	800ac64 <HAL_ADC_ConfigChannel+0x630>
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4968      	ldr	r1, [pc, #416]	@ (800adf8 <HAL_ADC_ConfigChannel+0x7c4>)
 800ac58:	428b      	cmp	r3, r1
 800ac5a:	d101      	bne.n	800ac60 <HAL_ADC_ConfigChannel+0x62c>
 800ac5c:	4b67      	ldr	r3, [pc, #412]	@ (800adfc <HAL_ADC_ConfigChannel+0x7c8>)
 800ac5e:	e0a0      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ac60:	2300      	movs	r3, #0
 800ac62:	e09e      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ac64:	4b66      	ldr	r3, [pc, #408]	@ (800ae00 <HAL_ADC_ConfigChannel+0x7cc>)
 800ac66:	e09c      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ac68:	4b66      	ldr	r3, [pc, #408]	@ (800ae04 <HAL_ADC_ConfigChannel+0x7d0>)
 800ac6a:	e09a      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ac6c:	4b60      	ldr	r3, [pc, #384]	@ (800adf0 <HAL_ADC_ConfigChannel+0x7bc>)
 800ac6e:	e098      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ac70:	4b5e      	ldr	r3, [pc, #376]	@ (800adec <HAL_ADC_ConfigChannel+0x7b8>)
 800ac72:	e096      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ac74:	4b64      	ldr	r3, [pc, #400]	@ (800ae08 <HAL_ADC_ConfigChannel+0x7d4>)
 800ac76:	e094      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ac78:	4b64      	ldr	r3, [pc, #400]	@ (800ae0c <HAL_ADC_ConfigChannel+0x7d8>)
 800ac7a:	e092      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ac7c:	4b64      	ldr	r3, [pc, #400]	@ (800ae10 <HAL_ADC_ConfigChannel+0x7dc>)
 800ac7e:	e090      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ac80:	4b64      	ldr	r3, [pc, #400]	@ (800ae14 <HAL_ADC_ConfigChannel+0x7e0>)
 800ac82:	e08e      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ac84:	2301      	movs	r3, #1
 800ac86:	e08c      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4962      	ldr	r1, [pc, #392]	@ (800ae18 <HAL_ADC_ConfigChannel+0x7e4>)
 800ac8e:	428b      	cmp	r3, r1
 800ac90:	d140      	bne.n	800ad14 <HAL_ADC_ConfigChannel+0x6e0>
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	494f      	ldr	r1, [pc, #316]	@ (800add4 <HAL_ADC_ConfigChannel+0x7a0>)
 800ac98:	428b      	cmp	r3, r1
 800ac9a:	d039      	beq.n	800ad10 <HAL_ADC_ConfigChannel+0x6dc>
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	494d      	ldr	r1, [pc, #308]	@ (800add8 <HAL_ADC_ConfigChannel+0x7a4>)
 800aca2:	428b      	cmp	r3, r1
 800aca4:	d032      	beq.n	800ad0c <HAL_ADC_ConfigChannel+0x6d8>
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	494c      	ldr	r1, [pc, #304]	@ (800addc <HAL_ADC_ConfigChannel+0x7a8>)
 800acac:	428b      	cmp	r3, r1
 800acae:	d02b      	beq.n	800ad08 <HAL_ADC_ConfigChannel+0x6d4>
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	494a      	ldr	r1, [pc, #296]	@ (800ade0 <HAL_ADC_ConfigChannel+0x7ac>)
 800acb6:	428b      	cmp	r3, r1
 800acb8:	d024      	beq.n	800ad04 <HAL_ADC_ConfigChannel+0x6d0>
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4949      	ldr	r1, [pc, #292]	@ (800ade4 <HAL_ADC_ConfigChannel+0x7b0>)
 800acc0:	428b      	cmp	r3, r1
 800acc2:	d01d      	beq.n	800ad00 <HAL_ADC_ConfigChannel+0x6cc>
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4947      	ldr	r1, [pc, #284]	@ (800ade8 <HAL_ADC_ConfigChannel+0x7b4>)
 800acca:	428b      	cmp	r3, r1
 800accc:	d016      	beq.n	800acfc <HAL_ADC_ConfigChannel+0x6c8>
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4946      	ldr	r1, [pc, #280]	@ (800adec <HAL_ADC_ConfigChannel+0x7b8>)
 800acd4:	428b      	cmp	r3, r1
 800acd6:	d00f      	beq.n	800acf8 <HAL_ADC_ConfigChannel+0x6c4>
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4944      	ldr	r1, [pc, #272]	@ (800adf0 <HAL_ADC_ConfigChannel+0x7bc>)
 800acde:	428b      	cmp	r3, r1
 800ace0:	d008      	beq.n	800acf4 <HAL_ADC_ConfigChannel+0x6c0>
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4944      	ldr	r1, [pc, #272]	@ (800adf8 <HAL_ADC_ConfigChannel+0x7c4>)
 800ace8:	428b      	cmp	r3, r1
 800acea:	d101      	bne.n	800acf0 <HAL_ADC_ConfigChannel+0x6bc>
 800acec:	4b43      	ldr	r3, [pc, #268]	@ (800adfc <HAL_ADC_ConfigChannel+0x7c8>)
 800acee:	e058      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800acf0:	2300      	movs	r3, #0
 800acf2:	e056      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800acf4:	4b43      	ldr	r3, [pc, #268]	@ (800ae04 <HAL_ADC_ConfigChannel+0x7d0>)
 800acf6:	e054      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800acf8:	4b3d      	ldr	r3, [pc, #244]	@ (800adf0 <HAL_ADC_ConfigChannel+0x7bc>)
 800acfa:	e052      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800acfc:	4b3b      	ldr	r3, [pc, #236]	@ (800adec <HAL_ADC_ConfigChannel+0x7b8>)
 800acfe:	e050      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ad00:	4b41      	ldr	r3, [pc, #260]	@ (800ae08 <HAL_ADC_ConfigChannel+0x7d4>)
 800ad02:	e04e      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ad04:	4b41      	ldr	r3, [pc, #260]	@ (800ae0c <HAL_ADC_ConfigChannel+0x7d8>)
 800ad06:	e04c      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ad08:	4b41      	ldr	r3, [pc, #260]	@ (800ae10 <HAL_ADC_ConfigChannel+0x7dc>)
 800ad0a:	e04a      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ad0c:	4b41      	ldr	r3, [pc, #260]	@ (800ae14 <HAL_ADC_ConfigChannel+0x7e0>)
 800ad0e:	e048      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ad10:	2301      	movs	r3, #1
 800ad12:	e046      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4940      	ldr	r1, [pc, #256]	@ (800ae1c <HAL_ADC_ConfigChannel+0x7e8>)
 800ad1a:	428b      	cmp	r3, r1
 800ad1c:	d140      	bne.n	800ada0 <HAL_ADC_ConfigChannel+0x76c>
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	492c      	ldr	r1, [pc, #176]	@ (800add4 <HAL_ADC_ConfigChannel+0x7a0>)
 800ad24:	428b      	cmp	r3, r1
 800ad26:	d039      	beq.n	800ad9c <HAL_ADC_ConfigChannel+0x768>
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	492a      	ldr	r1, [pc, #168]	@ (800add8 <HAL_ADC_ConfigChannel+0x7a4>)
 800ad2e:	428b      	cmp	r3, r1
 800ad30:	d032      	beq.n	800ad98 <HAL_ADC_ConfigChannel+0x764>
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4929      	ldr	r1, [pc, #164]	@ (800addc <HAL_ADC_ConfigChannel+0x7a8>)
 800ad38:	428b      	cmp	r3, r1
 800ad3a:	d02b      	beq.n	800ad94 <HAL_ADC_ConfigChannel+0x760>
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4927      	ldr	r1, [pc, #156]	@ (800ade0 <HAL_ADC_ConfigChannel+0x7ac>)
 800ad42:	428b      	cmp	r3, r1
 800ad44:	d024      	beq.n	800ad90 <HAL_ADC_ConfigChannel+0x75c>
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4926      	ldr	r1, [pc, #152]	@ (800ade4 <HAL_ADC_ConfigChannel+0x7b0>)
 800ad4c:	428b      	cmp	r3, r1
 800ad4e:	d01d      	beq.n	800ad8c <HAL_ADC_ConfigChannel+0x758>
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4924      	ldr	r1, [pc, #144]	@ (800ade8 <HAL_ADC_ConfigChannel+0x7b4>)
 800ad56:	428b      	cmp	r3, r1
 800ad58:	d016      	beq.n	800ad88 <HAL_ADC_ConfigChannel+0x754>
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4923      	ldr	r1, [pc, #140]	@ (800adec <HAL_ADC_ConfigChannel+0x7b8>)
 800ad60:	428b      	cmp	r3, r1
 800ad62:	d00f      	beq.n	800ad84 <HAL_ADC_ConfigChannel+0x750>
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4926      	ldr	r1, [pc, #152]	@ (800ae04 <HAL_ADC_ConfigChannel+0x7d0>)
 800ad6a:	428b      	cmp	r3, r1
 800ad6c:	d008      	beq.n	800ad80 <HAL_ADC_ConfigChannel+0x74c>
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	492b      	ldr	r1, [pc, #172]	@ (800ae20 <HAL_ADC_ConfigChannel+0x7ec>)
 800ad74:	428b      	cmp	r3, r1
 800ad76:	d101      	bne.n	800ad7c <HAL_ADC_ConfigChannel+0x748>
 800ad78:	4b2a      	ldr	r3, [pc, #168]	@ (800ae24 <HAL_ADC_ConfigChannel+0x7f0>)
 800ad7a:	e012      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	e010      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ad80:	4b27      	ldr	r3, [pc, #156]	@ (800ae20 <HAL_ADC_ConfigChannel+0x7ec>)
 800ad82:	e00e      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ad84:	4b1a      	ldr	r3, [pc, #104]	@ (800adf0 <HAL_ADC_ConfigChannel+0x7bc>)
 800ad86:	e00c      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ad88:	4b18      	ldr	r3, [pc, #96]	@ (800adec <HAL_ADC_ConfigChannel+0x7b8>)
 800ad8a:	e00a      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ad8c:	4b1e      	ldr	r3, [pc, #120]	@ (800ae08 <HAL_ADC_ConfigChannel+0x7d4>)
 800ad8e:	e008      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ad90:	4b1e      	ldr	r3, [pc, #120]	@ (800ae0c <HAL_ADC_ConfigChannel+0x7d8>)
 800ad92:	e006      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ad94:	4b1e      	ldr	r3, [pc, #120]	@ (800ae10 <HAL_ADC_ConfigChannel+0x7dc>)
 800ad96:	e004      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ad98:	4b1e      	ldr	r3, [pc, #120]	@ (800ae14 <HAL_ADC_ConfigChannel+0x7e0>)
 800ad9a:	e002      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e000      	b.n	800ada2 <HAL_ADC_ConfigChannel+0x76e>
 800ada0:	2300      	movs	r3, #0
 800ada2:	4619      	mov	r1, r3
 800ada4:	4610      	mov	r0, r2
 800ada6:	f7fe fc0d 	bl	80095c4 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	f280 80f6 	bge.w	800afa0 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a05      	ldr	r2, [pc, #20]	@ (800add0 <HAL_ADC_ConfigChannel+0x79c>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d004      	beq.n	800adc8 <HAL_ADC_ConfigChannel+0x794>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a15      	ldr	r2, [pc, #84]	@ (800ae18 <HAL_ADC_ConfigChannel+0x7e4>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d131      	bne.n	800ae2c <HAL_ADC_ConfigChannel+0x7f8>
 800adc8:	4b17      	ldr	r3, [pc, #92]	@ (800ae28 <HAL_ADC_ConfigChannel+0x7f4>)
 800adca:	e030      	b.n	800ae2e <HAL_ADC_ConfigChannel+0x7fa>
 800adcc:	47ff0000 	.word	0x47ff0000
 800add0:	40022000 	.word	0x40022000
 800add4:	04300002 	.word	0x04300002
 800add8:	08600004 	.word	0x08600004
 800addc:	0c900008 	.word	0x0c900008
 800ade0:	10c00010 	.word	0x10c00010
 800ade4:	14f00020 	.word	0x14f00020
 800ade8:	2a000400 	.word	0x2a000400
 800adec:	2e300800 	.word	0x2e300800
 800adf0:	32601000 	.word	0x32601000
 800adf4:	43210000 	.word	0x43210000
 800adf8:	4b840000 	.word	0x4b840000
 800adfc:	4fb80000 	.word	0x4fb80000
 800ae00:	47520000 	.word	0x47520000
 800ae04:	36902000 	.word	0x36902000
 800ae08:	25b00200 	.word	0x25b00200
 800ae0c:	21800100 	.word	0x21800100
 800ae10:	1d500080 	.word	0x1d500080
 800ae14:	19200040 	.word	0x19200040
 800ae18:	40022100 	.word	0x40022100
 800ae1c:	58026000 	.word	0x58026000
 800ae20:	3ac04000 	.word	0x3ac04000
 800ae24:	3ef08000 	.word	0x3ef08000
 800ae28:	40022300 	.word	0x40022300
 800ae2c:	4b61      	ldr	r3, [pc, #388]	@ (800afb4 <HAL_ADC_ConfigChannel+0x980>)
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fe fbba 	bl	80095a8 <LL_ADC_GetCommonPathInternalCh>
 800ae34:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a5f      	ldr	r2, [pc, #380]	@ (800afb8 <HAL_ADC_ConfigChannel+0x984>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d004      	beq.n	800ae4a <HAL_ADC_ConfigChannel+0x816>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a5d      	ldr	r2, [pc, #372]	@ (800afbc <HAL_ADC_ConfigChannel+0x988>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d10e      	bne.n	800ae68 <HAL_ADC_ConfigChannel+0x834>
 800ae4a:	485b      	ldr	r0, [pc, #364]	@ (800afb8 <HAL_ADC_ConfigChannel+0x984>)
 800ae4c:	f7fe fe5e 	bl	8009b0c <LL_ADC_IsEnabled>
 800ae50:	4604      	mov	r4, r0
 800ae52:	485a      	ldr	r0, [pc, #360]	@ (800afbc <HAL_ADC_ConfigChannel+0x988>)
 800ae54:	f7fe fe5a 	bl	8009b0c <LL_ADC_IsEnabled>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	4323      	orrs	r3, r4
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	bf0c      	ite	eq
 800ae60:	2301      	moveq	r3, #1
 800ae62:	2300      	movne	r3, #0
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	e008      	b.n	800ae7a <HAL_ADC_ConfigChannel+0x846>
 800ae68:	4855      	ldr	r0, [pc, #340]	@ (800afc0 <HAL_ADC_ConfigChannel+0x98c>)
 800ae6a:	f7fe fe4f 	bl	8009b0c <LL_ADC_IsEnabled>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	bf0c      	ite	eq
 800ae74:	2301      	moveq	r3, #1
 800ae76:	2300      	movne	r3, #0
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d07d      	beq.n	800af7a <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a50      	ldr	r2, [pc, #320]	@ (800afc4 <HAL_ADC_ConfigChannel+0x990>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d130      	bne.n	800aeea <HAL_ADC_ConfigChannel+0x8b6>
 800ae88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ae8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d12b      	bne.n	800aeea <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a4a      	ldr	r2, [pc, #296]	@ (800afc0 <HAL_ADC_ConfigChannel+0x98c>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	f040 8081 	bne.w	800afa0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a45      	ldr	r2, [pc, #276]	@ (800afb8 <HAL_ADC_ConfigChannel+0x984>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d004      	beq.n	800aeb2 <HAL_ADC_ConfigChannel+0x87e>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a43      	ldr	r2, [pc, #268]	@ (800afbc <HAL_ADC_ConfigChannel+0x988>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d101      	bne.n	800aeb6 <HAL_ADC_ConfigChannel+0x882>
 800aeb2:	4a45      	ldr	r2, [pc, #276]	@ (800afc8 <HAL_ADC_ConfigChannel+0x994>)
 800aeb4:	e000      	b.n	800aeb8 <HAL_ADC_ConfigChannel+0x884>
 800aeb6:	4a3f      	ldr	r2, [pc, #252]	@ (800afb4 <HAL_ADC_ConfigChannel+0x980>)
 800aeb8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aeba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800aebe:	4619      	mov	r1, r3
 800aec0:	4610      	mov	r0, r2
 800aec2:	f7fe fb5e 	bl	8009582 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800aec6:	4b41      	ldr	r3, [pc, #260]	@ (800afcc <HAL_ADC_ConfigChannel+0x998>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	099b      	lsrs	r3, r3, #6
 800aecc:	4a40      	ldr	r2, [pc, #256]	@ (800afd0 <HAL_ADC_ConfigChannel+0x99c>)
 800aece:	fba2 2303 	umull	r2, r3, r2, r3
 800aed2:	099b      	lsrs	r3, r3, #6
 800aed4:	3301      	adds	r3, #1
 800aed6:	005b      	lsls	r3, r3, #1
 800aed8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800aeda:	e002      	b.n	800aee2 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	3b01      	subs	r3, #1
 800aee0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1f9      	bne.n	800aedc <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800aee8:	e05a      	b.n	800afa0 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a39      	ldr	r2, [pc, #228]	@ (800afd4 <HAL_ADC_ConfigChannel+0x9a0>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d11e      	bne.n	800af32 <HAL_ADC_ConfigChannel+0x8fe>
 800aef4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aef6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d119      	bne.n	800af32 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a2f      	ldr	r2, [pc, #188]	@ (800afc0 <HAL_ADC_ConfigChannel+0x98c>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d14b      	bne.n	800afa0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a2a      	ldr	r2, [pc, #168]	@ (800afb8 <HAL_ADC_ConfigChannel+0x984>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d004      	beq.n	800af1c <HAL_ADC_ConfigChannel+0x8e8>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a29      	ldr	r2, [pc, #164]	@ (800afbc <HAL_ADC_ConfigChannel+0x988>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d101      	bne.n	800af20 <HAL_ADC_ConfigChannel+0x8ec>
 800af1c:	4a2a      	ldr	r2, [pc, #168]	@ (800afc8 <HAL_ADC_ConfigChannel+0x994>)
 800af1e:	e000      	b.n	800af22 <HAL_ADC_ConfigChannel+0x8ee>
 800af20:	4a24      	ldr	r2, [pc, #144]	@ (800afb4 <HAL_ADC_ConfigChannel+0x980>)
 800af22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800af28:	4619      	mov	r1, r3
 800af2a:	4610      	mov	r0, r2
 800af2c:	f7fe fb29 	bl	8009582 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800af30:	e036      	b.n	800afa0 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a28      	ldr	r2, [pc, #160]	@ (800afd8 <HAL_ADC_ConfigChannel+0x9a4>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d131      	bne.n	800afa0 <HAL_ADC_ConfigChannel+0x96c>
 800af3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af42:	2b00      	cmp	r3, #0
 800af44:	d12c      	bne.n	800afa0 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a1d      	ldr	r2, [pc, #116]	@ (800afc0 <HAL_ADC_ConfigChannel+0x98c>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d127      	bne.n	800afa0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a18      	ldr	r2, [pc, #96]	@ (800afb8 <HAL_ADC_ConfigChannel+0x984>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d004      	beq.n	800af64 <HAL_ADC_ConfigChannel+0x930>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a17      	ldr	r2, [pc, #92]	@ (800afbc <HAL_ADC_ConfigChannel+0x988>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d101      	bne.n	800af68 <HAL_ADC_ConfigChannel+0x934>
 800af64:	4a18      	ldr	r2, [pc, #96]	@ (800afc8 <HAL_ADC_ConfigChannel+0x994>)
 800af66:	e000      	b.n	800af6a <HAL_ADC_ConfigChannel+0x936>
 800af68:	4a12      	ldr	r2, [pc, #72]	@ (800afb4 <HAL_ADC_ConfigChannel+0x980>)
 800af6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800af70:	4619      	mov	r1, r3
 800af72:	4610      	mov	r0, r2
 800af74:	f7fe fb05 	bl	8009582 <LL_ADC_SetCommonPathInternalCh>
 800af78:	e012      	b.n	800afa0 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af7e:	f043 0220 	orr.w	r2, r3, #32
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800af8c:	e008      	b.n	800afa0 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af92:	f043 0220 	orr.w	r2, r3, #32
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800afa8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800afac:	4618      	mov	r0, r3
 800afae:	3794      	adds	r7, #148	@ 0x94
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd90      	pop	{r4, r7, pc}
 800afb4:	58026300 	.word	0x58026300
 800afb8:	40022000 	.word	0x40022000
 800afbc:	40022100 	.word	0x40022100
 800afc0:	58026000 	.word	0x58026000
 800afc4:	c7520000 	.word	0xc7520000
 800afc8:	40022300 	.word	0x40022300
 800afcc:	24000004 	.word	0x24000004
 800afd0:	053e2d63 	.word	0x053e2d63
 800afd4:	c3210000 	.word	0xc3210000
 800afd8:	cb840000 	.word	0xcb840000

0800afdc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4618      	mov	r0, r3
 800afea:	f7fe fd8f 	bl	8009b0c <LL_ADC_IsEnabled>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d16e      	bne.n	800b0d2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	689a      	ldr	r2, [r3, #8]
 800affa:	4b38      	ldr	r3, [pc, #224]	@ (800b0dc <ADC_Enable+0x100>)
 800affc:	4013      	ands	r3, r2
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00d      	beq.n	800b01e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b006:	f043 0210 	orr.w	r2, r3, #16
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b012:	f043 0201 	orr.w	r2, r3, #1
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e05a      	b.n	800b0d4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4618      	mov	r0, r3
 800b024:	f7fe fd5e 	bl	8009ae4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b028:	f7fe fa68 	bl	80094fc <HAL_GetTick>
 800b02c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a2b      	ldr	r2, [pc, #172]	@ (800b0e0 <ADC_Enable+0x104>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d004      	beq.n	800b042 <ADC_Enable+0x66>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a29      	ldr	r2, [pc, #164]	@ (800b0e4 <ADC_Enable+0x108>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d101      	bne.n	800b046 <ADC_Enable+0x6a>
 800b042:	4b29      	ldr	r3, [pc, #164]	@ (800b0e8 <ADC_Enable+0x10c>)
 800b044:	e000      	b.n	800b048 <ADC_Enable+0x6c>
 800b046:	4b29      	ldr	r3, [pc, #164]	@ (800b0ec <ADC_Enable+0x110>)
 800b048:	4618      	mov	r0, r3
 800b04a:	f7fe fce1 	bl	8009a10 <LL_ADC_GetMultimode>
 800b04e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a23      	ldr	r2, [pc, #140]	@ (800b0e4 <ADC_Enable+0x108>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d002      	beq.n	800b060 <ADC_Enable+0x84>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	e000      	b.n	800b062 <ADC_Enable+0x86>
 800b060:	4b1f      	ldr	r3, [pc, #124]	@ (800b0e0 <ADC_Enable+0x104>)
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	6812      	ldr	r2, [r2, #0]
 800b066:	4293      	cmp	r3, r2
 800b068:	d02c      	beq.n	800b0c4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d130      	bne.n	800b0d2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b070:	e028      	b.n	800b0c4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4618      	mov	r0, r3
 800b078:	f7fe fd48 	bl	8009b0c <LL_ADC_IsEnabled>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d104      	bne.n	800b08c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4618      	mov	r0, r3
 800b088:	f7fe fd2c 	bl	8009ae4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b08c:	f7fe fa36 	bl	80094fc <HAL_GetTick>
 800b090:	4602      	mov	r2, r0
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	2b02      	cmp	r3, #2
 800b098:	d914      	bls.n	800b0c4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f003 0301 	and.w	r3, r3, #1
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d00d      	beq.n	800b0c4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0ac:	f043 0210 	orr.w	r2, r3, #16
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0b8:	f043 0201 	orr.w	r2, r3, #1
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e007      	b.n	800b0d4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f003 0301 	and.w	r3, r3, #1
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d1cf      	bne.n	800b072 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	8000003f 	.word	0x8000003f
 800b0e0:	40022000 	.word	0x40022000
 800b0e4:	40022100 	.word	0x40022100
 800b0e8:	40022300 	.word	0x40022300
 800b0ec:	58026300 	.word	0x58026300

0800b0f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b102:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b106:	2b00      	cmp	r3, #0
 800b108:	d14b      	bne.n	800b1a2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b10e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 0308 	and.w	r3, r3, #8
 800b120:	2b00      	cmp	r3, #0
 800b122:	d021      	beq.n	800b168 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4618      	mov	r0, r3
 800b12a:	f7fe fb77 	bl	800981c <LL_ADC_REG_IsTriggerSourceSWStart>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d032      	beq.n	800b19a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d12b      	bne.n	800b19a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b146:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b152:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b156:	2b00      	cmp	r3, #0
 800b158:	d11f      	bne.n	800b19a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b15e:	f043 0201 	orr.w	r2, r3, #1
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	661a      	str	r2, [r3, #96]	@ 0x60
 800b166:	e018      	b.n	800b19a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	f003 0303 	and.w	r3, r3, #3
 800b172:	2b00      	cmp	r3, #0
 800b174:	d111      	bne.n	800b19a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b17a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b186:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d105      	bne.n	800b19a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b192:	f043 0201 	orr.w	r2, r3, #1
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f7ff fa22 	bl	800a5e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b1a0:	e00e      	b.n	800b1c0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1a6:	f003 0310 	and.w	r3, r3, #16
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d003      	beq.n	800b1b6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f7ff fa36 	bl	800a620 <HAL_ADC_ErrorCallback>
}
 800b1b4:	e004      	b.n	800b1c0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	4798      	blx	r3
}
 800b1c0:	bf00      	nop
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1d4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f7ff fa0e 	bl	800a5f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b1dc:	bf00      	nop
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1f0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b202:	f043 0204 	orr.w	r2, r3, #4
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f7ff fa08 	bl	800a620 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b210:	bf00      	nop
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a6c      	ldr	r2, [pc, #432]	@ (800b3d8 <ADC_ConfigureBoostMode+0x1c0>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d004      	beq.n	800b234 <ADC_ConfigureBoostMode+0x1c>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a6b      	ldr	r2, [pc, #428]	@ (800b3dc <ADC_ConfigureBoostMode+0x1c4>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d109      	bne.n	800b248 <ADC_ConfigureBoostMode+0x30>
 800b234:	4b6a      	ldr	r3, [pc, #424]	@ (800b3e0 <ADC_ConfigureBoostMode+0x1c8>)
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	bf14      	ite	ne
 800b240:	2301      	movne	r3, #1
 800b242:	2300      	moveq	r3, #0
 800b244:	b2db      	uxtb	r3, r3
 800b246:	e008      	b.n	800b25a <ADC_ConfigureBoostMode+0x42>
 800b248:	4b66      	ldr	r3, [pc, #408]	@ (800b3e4 <ADC_ConfigureBoostMode+0x1cc>)
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b250:	2b00      	cmp	r3, #0
 800b252:	bf14      	ite	ne
 800b254:	2301      	movne	r3, #1
 800b256:	2300      	moveq	r3, #0
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d01c      	beq.n	800b298 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800b25e:	f006 fe8b 	bl	8011f78 <HAL_RCC_GetHCLKFreq>
 800b262:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b26c:	d010      	beq.n	800b290 <ADC_ConfigureBoostMode+0x78>
 800b26e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b272:	d873      	bhi.n	800b35c <ADC_ConfigureBoostMode+0x144>
 800b274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b278:	d002      	beq.n	800b280 <ADC_ConfigureBoostMode+0x68>
 800b27a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b27e:	d16d      	bne.n	800b35c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	0c1b      	lsrs	r3, r3, #16
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	fbb2 f3f3 	udiv	r3, r2, r3
 800b28c:	60fb      	str	r3, [r7, #12]
        break;
 800b28e:	e068      	b.n	800b362 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	089b      	lsrs	r3, r3, #2
 800b294:	60fb      	str	r3, [r7, #12]
        break;
 800b296:	e064      	b.n	800b362 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800b298:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b29c:	f04f 0100 	mov.w	r1, #0
 800b2a0:	f008 f866 	bl	8013370 <HAL_RCCEx_GetPeriphCLKFreq>
 800b2a4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b2ae:	d051      	beq.n	800b354 <ADC_ConfigureBoostMode+0x13c>
 800b2b0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b2b4:	d854      	bhi.n	800b360 <ADC_ConfigureBoostMode+0x148>
 800b2b6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b2ba:	d047      	beq.n	800b34c <ADC_ConfigureBoostMode+0x134>
 800b2bc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b2c0:	d84e      	bhi.n	800b360 <ADC_ConfigureBoostMode+0x148>
 800b2c2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b2c6:	d03d      	beq.n	800b344 <ADC_ConfigureBoostMode+0x12c>
 800b2c8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b2cc:	d848      	bhi.n	800b360 <ADC_ConfigureBoostMode+0x148>
 800b2ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b2d2:	d033      	beq.n	800b33c <ADC_ConfigureBoostMode+0x124>
 800b2d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b2d8:	d842      	bhi.n	800b360 <ADC_ConfigureBoostMode+0x148>
 800b2da:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b2de:	d029      	beq.n	800b334 <ADC_ConfigureBoostMode+0x11c>
 800b2e0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b2e4:	d83c      	bhi.n	800b360 <ADC_ConfigureBoostMode+0x148>
 800b2e6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b2ea:	d01a      	beq.n	800b322 <ADC_ConfigureBoostMode+0x10a>
 800b2ec:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b2f0:	d836      	bhi.n	800b360 <ADC_ConfigureBoostMode+0x148>
 800b2f2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b2f6:	d014      	beq.n	800b322 <ADC_ConfigureBoostMode+0x10a>
 800b2f8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b2fc:	d830      	bhi.n	800b360 <ADC_ConfigureBoostMode+0x148>
 800b2fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b302:	d00e      	beq.n	800b322 <ADC_ConfigureBoostMode+0x10a>
 800b304:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b308:	d82a      	bhi.n	800b360 <ADC_ConfigureBoostMode+0x148>
 800b30a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b30e:	d008      	beq.n	800b322 <ADC_ConfigureBoostMode+0x10a>
 800b310:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b314:	d824      	bhi.n	800b360 <ADC_ConfigureBoostMode+0x148>
 800b316:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b31a:	d002      	beq.n	800b322 <ADC_ConfigureBoostMode+0x10a>
 800b31c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b320:	d11e      	bne.n	800b360 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	0c9b      	lsrs	r3, r3, #18
 800b328:	005b      	lsls	r3, r3, #1
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b330:	60fb      	str	r3, [r7, #12]
        break;
 800b332:	e016      	b.n	800b362 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	091b      	lsrs	r3, r3, #4
 800b338:	60fb      	str	r3, [r7, #12]
        break;
 800b33a:	e012      	b.n	800b362 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	095b      	lsrs	r3, r3, #5
 800b340:	60fb      	str	r3, [r7, #12]
        break;
 800b342:	e00e      	b.n	800b362 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	099b      	lsrs	r3, r3, #6
 800b348:	60fb      	str	r3, [r7, #12]
        break;
 800b34a:	e00a      	b.n	800b362 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	09db      	lsrs	r3, r3, #7
 800b350:	60fb      	str	r3, [r7, #12]
        break;
 800b352:	e006      	b.n	800b362 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	0a1b      	lsrs	r3, r3, #8
 800b358:	60fb      	str	r3, [r7, #12]
        break;
 800b35a:	e002      	b.n	800b362 <ADC_ConfigureBoostMode+0x14a>
        break;
 800b35c:	bf00      	nop
 800b35e:	e000      	b.n	800b362 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800b360:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	085b      	lsrs	r3, r3, #1
 800b366:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	4a1f      	ldr	r2, [pc, #124]	@ (800b3e8 <ADC_ConfigureBoostMode+0x1d0>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d808      	bhi.n	800b382 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	689a      	ldr	r2, [r3, #8]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b37e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800b380:	e025      	b.n	800b3ce <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	4a19      	ldr	r2, [pc, #100]	@ (800b3ec <ADC_ConfigureBoostMode+0x1d4>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d80a      	bhi.n	800b3a0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b39c:	609a      	str	r2, [r3, #8]
}
 800b39e:	e016      	b.n	800b3ce <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	4a13      	ldr	r2, [pc, #76]	@ (800b3f0 <ADC_ConfigureBoostMode+0x1d8>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d80a      	bhi.n	800b3be <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b3ba:	609a      	str	r2, [r3, #8]
}
 800b3bc:	e007      	b.n	800b3ce <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	689a      	ldr	r2, [r3, #8]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800b3cc:	609a      	str	r2, [r3, #8]
}
 800b3ce:	bf00      	nop
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	40022000 	.word	0x40022000
 800b3dc:	40022100 	.word	0x40022100
 800b3e0:	40022300 	.word	0x40022300
 800b3e4:	58026300 	.word	0x58026300
 800b3e8:	005f5e10 	.word	0x005f5e10
 800b3ec:	00bebc20 	.word	0x00bebc20
 800b3f0:	017d7840 	.word	0x017d7840

0800b3f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800b424:	bf00      	nop
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800b438:	bf00      	nop
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800b44c:	bf00      	nop
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <__NVIC_SetPriorityGrouping>:
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f003 0307 	and.w	r3, r3, #7
 800b466:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b468:	4b0b      	ldr	r3, [pc, #44]	@ (800b498 <__NVIC_SetPriorityGrouping+0x40>)
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b474:	4013      	ands	r3, r2
 800b476:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b480:	4b06      	ldr	r3, [pc, #24]	@ (800b49c <__NVIC_SetPriorityGrouping+0x44>)
 800b482:	4313      	orrs	r3, r2
 800b484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b486:	4a04      	ldr	r2, [pc, #16]	@ (800b498 <__NVIC_SetPriorityGrouping+0x40>)
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	60d3      	str	r3, [r2, #12]
}
 800b48c:	bf00      	nop
 800b48e:	3714      	adds	r7, #20
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr
 800b498:	e000ed00 	.word	0xe000ed00
 800b49c:	05fa0000 	.word	0x05fa0000

0800b4a0 <__NVIC_GetPriorityGrouping>:
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b4a4:	4b04      	ldr	r3, [pc, #16]	@ (800b4b8 <__NVIC_GetPriorityGrouping+0x18>)
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	0a1b      	lsrs	r3, r3, #8
 800b4aa:	f003 0307 	and.w	r3, r3, #7
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr
 800b4b8:	e000ed00 	.word	0xe000ed00

0800b4bc <__NVIC_EnableIRQ>:
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b4c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	db0b      	blt.n	800b4e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b4ce:	88fb      	ldrh	r3, [r7, #6]
 800b4d0:	f003 021f 	and.w	r2, r3, #31
 800b4d4:	4907      	ldr	r1, [pc, #28]	@ (800b4f4 <__NVIC_EnableIRQ+0x38>)
 800b4d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b4da:	095b      	lsrs	r3, r3, #5
 800b4dc:	2001      	movs	r0, #1
 800b4de:	fa00 f202 	lsl.w	r2, r0, r2
 800b4e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b4e6:	bf00      	nop
 800b4e8:	370c      	adds	r7, #12
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	e000e100 	.word	0xe000e100

0800b4f8 <__NVIC_SetPriority>:
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	4603      	mov	r3, r0
 800b500:	6039      	str	r1, [r7, #0]
 800b502:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	db0a      	blt.n	800b522 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	b2da      	uxtb	r2, r3
 800b510:	490c      	ldr	r1, [pc, #48]	@ (800b544 <__NVIC_SetPriority+0x4c>)
 800b512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b516:	0112      	lsls	r2, r2, #4
 800b518:	b2d2      	uxtb	r2, r2
 800b51a:	440b      	add	r3, r1
 800b51c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b520:	e00a      	b.n	800b538 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	b2da      	uxtb	r2, r3
 800b526:	4908      	ldr	r1, [pc, #32]	@ (800b548 <__NVIC_SetPriority+0x50>)
 800b528:	88fb      	ldrh	r3, [r7, #6]
 800b52a:	f003 030f 	and.w	r3, r3, #15
 800b52e:	3b04      	subs	r3, #4
 800b530:	0112      	lsls	r2, r2, #4
 800b532:	b2d2      	uxtb	r2, r2
 800b534:	440b      	add	r3, r1
 800b536:	761a      	strb	r2, [r3, #24]
}
 800b538:	bf00      	nop
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr
 800b544:	e000e100 	.word	0xe000e100
 800b548:	e000ed00 	.word	0xe000ed00

0800b54c <NVIC_EncodePriority>:
{
 800b54c:	b480      	push	{r7}
 800b54e:	b089      	sub	sp, #36	@ 0x24
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f003 0307 	and.w	r3, r3, #7
 800b55e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	f1c3 0307 	rsb	r3, r3, #7
 800b566:	2b04      	cmp	r3, #4
 800b568:	bf28      	it	cs
 800b56a:	2304      	movcs	r3, #4
 800b56c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	3304      	adds	r3, #4
 800b572:	2b06      	cmp	r3, #6
 800b574:	d902      	bls.n	800b57c <NVIC_EncodePriority+0x30>
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	3b03      	subs	r3, #3
 800b57a:	e000      	b.n	800b57e <NVIC_EncodePriority+0x32>
 800b57c:	2300      	movs	r3, #0
 800b57e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b580:	f04f 32ff 	mov.w	r2, #4294967295
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	fa02 f303 	lsl.w	r3, r2, r3
 800b58a:	43da      	mvns	r2, r3
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	401a      	ands	r2, r3
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b594:	f04f 31ff 	mov.w	r1, #4294967295
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	fa01 f303 	lsl.w	r3, r1, r3
 800b59e:	43d9      	mvns	r1, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b5a4:	4313      	orrs	r3, r2
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3724      	adds	r7, #36	@ 0x24
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
	...

0800b5b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5c4:	d301      	bcc.n	800b5ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e00f      	b.n	800b5ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b5ca:	4a0a      	ldr	r2, [pc, #40]	@ (800b5f4 <SysTick_Config+0x40>)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b5d2:	210f      	movs	r1, #15
 800b5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d8:	f7ff ff8e 	bl	800b4f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b5dc:	4b05      	ldr	r3, [pc, #20]	@ (800b5f4 <SysTick_Config+0x40>)
 800b5de:	2200      	movs	r2, #0
 800b5e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b5e2:	4b04      	ldr	r3, [pc, #16]	@ (800b5f4 <SysTick_Config+0x40>)
 800b5e4:	2207      	movs	r2, #7
 800b5e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	e000e010 	.word	0xe000e010

0800b5f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff ff29 	bl	800b458 <__NVIC_SetPriorityGrouping>
}
 800b606:	bf00      	nop
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b086      	sub	sp, #24
 800b612:	af00      	add	r7, sp, #0
 800b614:	4603      	mov	r3, r0
 800b616:	60b9      	str	r1, [r7, #8]
 800b618:	607a      	str	r2, [r7, #4]
 800b61a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b61c:	f7ff ff40 	bl	800b4a0 <__NVIC_GetPriorityGrouping>
 800b620:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	68b9      	ldr	r1, [r7, #8]
 800b626:	6978      	ldr	r0, [r7, #20]
 800b628:	f7ff ff90 	bl	800b54c <NVIC_EncodePriority>
 800b62c:	4602      	mov	r2, r0
 800b62e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b632:	4611      	mov	r1, r2
 800b634:	4618      	mov	r0, r3
 800b636:	f7ff ff5f 	bl	800b4f8 <__NVIC_SetPriority>
}
 800b63a:	bf00      	nop
 800b63c:	3718      	adds	r7, #24
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b082      	sub	sp, #8
 800b646:	af00      	add	r7, sp, #0
 800b648:	4603      	mov	r3, r0
 800b64a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b64c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b650:	4618      	mov	r0, r3
 800b652:	f7ff ff33 	bl	800b4bc <__NVIC_EnableIRQ>
}
 800b656:	bf00      	nop
 800b658:	3708      	adds	r7, #8
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b082      	sub	sp, #8
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7ff ffa4 	bl	800b5b4 <SysTick_Config>
 800b66c:	4603      	mov	r3, r0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
	...

0800b678 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800b678:	b480      	push	{r7}
 800b67a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800b67c:	f3bf 8f5f 	dmb	sy
}
 800b680:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b682:	4b07      	ldr	r3, [pc, #28]	@ (800b6a0 <HAL_MPU_Disable+0x28>)
 800b684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b686:	4a06      	ldr	r2, [pc, #24]	@ (800b6a0 <HAL_MPU_Disable+0x28>)
 800b688:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b68c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b68e:	4b05      	ldr	r3, [pc, #20]	@ (800b6a4 <HAL_MPU_Disable+0x2c>)
 800b690:	2200      	movs	r2, #0
 800b692:	605a      	str	r2, [r3, #4]
}
 800b694:	bf00      	nop
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	e000ed00 	.word	0xe000ed00
 800b6a4:	e000ed90 	.word	0xe000ed90

0800b6a8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b6b0:	4a0b      	ldr	r2, [pc, #44]	@ (800b6e0 <HAL_MPU_Enable+0x38>)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f043 0301 	orr.w	r3, r3, #1
 800b6b8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b6ba:	4b0a      	ldr	r3, [pc, #40]	@ (800b6e4 <HAL_MPU_Enable+0x3c>)
 800b6bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6be:	4a09      	ldr	r2, [pc, #36]	@ (800b6e4 <HAL_MPU_Enable+0x3c>)
 800b6c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b6c4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b6c6:	f3bf 8f4f 	dsb	sy
}
 800b6ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b6cc:	f3bf 8f6f 	isb	sy
}
 800b6d0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b6d2:	bf00      	nop
 800b6d4:	370c      	adds	r7, #12
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	e000ed90 	.word	0xe000ed90
 800b6e4:	e000ed00 	.word	0xe000ed00

0800b6e8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	785a      	ldrb	r2, [r3, #1]
 800b6f4:	4b1b      	ldr	r3, [pc, #108]	@ (800b764 <HAL_MPU_ConfigRegion+0x7c>)
 800b6f6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800b6f8:	4b1a      	ldr	r3, [pc, #104]	@ (800b764 <HAL_MPU_ConfigRegion+0x7c>)
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	4a19      	ldr	r2, [pc, #100]	@ (800b764 <HAL_MPU_ConfigRegion+0x7c>)
 800b6fe:	f023 0301 	bic.w	r3, r3, #1
 800b702:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800b704:	4a17      	ldr	r2, [pc, #92]	@ (800b764 <HAL_MPU_ConfigRegion+0x7c>)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	7b1b      	ldrb	r3, [r3, #12]
 800b710:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	7adb      	ldrb	r3, [r3, #11]
 800b716:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b718:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	7a9b      	ldrb	r3, [r3, #10]
 800b71e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b720:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	7b5b      	ldrb	r3, [r3, #13]
 800b726:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b728:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	7b9b      	ldrb	r3, [r3, #14]
 800b72e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b730:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	7bdb      	ldrb	r3, [r3, #15]
 800b736:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b738:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	7a5b      	ldrb	r3, [r3, #9]
 800b73e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b740:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	7a1b      	ldrb	r3, [r3, #8]
 800b746:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b748:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	7812      	ldrb	r2, [r2, #0]
 800b74e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b750:	4a04      	ldr	r2, [pc, #16]	@ (800b764 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b752:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b754:	6113      	str	r3, [r2, #16]
}
 800b756:	bf00      	nop
 800b758:	370c      	adds	r7, #12
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	e000ed90 	.word	0xe000ed90

0800b768 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800b770:	f7fd fec4 	bl	80094fc <HAL_GetTick>
 800b774:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d101      	bne.n	800b780 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800b77c:	2301      	movs	r3, #1
 800b77e:	e312      	b.n	800bda6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a66      	ldr	r2, [pc, #408]	@ (800b920 <HAL_DMA_Init+0x1b8>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d04a      	beq.n	800b820 <HAL_DMA_Init+0xb8>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4a65      	ldr	r2, [pc, #404]	@ (800b924 <HAL_DMA_Init+0x1bc>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d045      	beq.n	800b820 <HAL_DMA_Init+0xb8>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4a63      	ldr	r2, [pc, #396]	@ (800b928 <HAL_DMA_Init+0x1c0>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d040      	beq.n	800b820 <HAL_DMA_Init+0xb8>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a62      	ldr	r2, [pc, #392]	@ (800b92c <HAL_DMA_Init+0x1c4>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d03b      	beq.n	800b820 <HAL_DMA_Init+0xb8>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a60      	ldr	r2, [pc, #384]	@ (800b930 <HAL_DMA_Init+0x1c8>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d036      	beq.n	800b820 <HAL_DMA_Init+0xb8>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a5f      	ldr	r2, [pc, #380]	@ (800b934 <HAL_DMA_Init+0x1cc>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d031      	beq.n	800b820 <HAL_DMA_Init+0xb8>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a5d      	ldr	r2, [pc, #372]	@ (800b938 <HAL_DMA_Init+0x1d0>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d02c      	beq.n	800b820 <HAL_DMA_Init+0xb8>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a5c      	ldr	r2, [pc, #368]	@ (800b93c <HAL_DMA_Init+0x1d4>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d027      	beq.n	800b820 <HAL_DMA_Init+0xb8>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a5a      	ldr	r2, [pc, #360]	@ (800b940 <HAL_DMA_Init+0x1d8>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d022      	beq.n	800b820 <HAL_DMA_Init+0xb8>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a59      	ldr	r2, [pc, #356]	@ (800b944 <HAL_DMA_Init+0x1dc>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d01d      	beq.n	800b820 <HAL_DMA_Init+0xb8>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a57      	ldr	r2, [pc, #348]	@ (800b948 <HAL_DMA_Init+0x1e0>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d018      	beq.n	800b820 <HAL_DMA_Init+0xb8>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a56      	ldr	r2, [pc, #344]	@ (800b94c <HAL_DMA_Init+0x1e4>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d013      	beq.n	800b820 <HAL_DMA_Init+0xb8>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a54      	ldr	r2, [pc, #336]	@ (800b950 <HAL_DMA_Init+0x1e8>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d00e      	beq.n	800b820 <HAL_DMA_Init+0xb8>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4a53      	ldr	r2, [pc, #332]	@ (800b954 <HAL_DMA_Init+0x1ec>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d009      	beq.n	800b820 <HAL_DMA_Init+0xb8>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a51      	ldr	r2, [pc, #324]	@ (800b958 <HAL_DMA_Init+0x1f0>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d004      	beq.n	800b820 <HAL_DMA_Init+0xb8>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4a50      	ldr	r2, [pc, #320]	@ (800b95c <HAL_DMA_Init+0x1f4>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d101      	bne.n	800b824 <HAL_DMA_Init+0xbc>
 800b820:	2301      	movs	r3, #1
 800b822:	e000      	b.n	800b826 <HAL_DMA_Init+0xbe>
 800b824:	2300      	movs	r3, #0
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 813c 	beq.w	800baa4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2202      	movs	r2, #2
 800b830:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a37      	ldr	r2, [pc, #220]	@ (800b920 <HAL_DMA_Init+0x1b8>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d04a      	beq.n	800b8dc <HAL_DMA_Init+0x174>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a36      	ldr	r2, [pc, #216]	@ (800b924 <HAL_DMA_Init+0x1bc>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d045      	beq.n	800b8dc <HAL_DMA_Init+0x174>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a34      	ldr	r2, [pc, #208]	@ (800b928 <HAL_DMA_Init+0x1c0>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d040      	beq.n	800b8dc <HAL_DMA_Init+0x174>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a33      	ldr	r2, [pc, #204]	@ (800b92c <HAL_DMA_Init+0x1c4>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d03b      	beq.n	800b8dc <HAL_DMA_Init+0x174>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a31      	ldr	r2, [pc, #196]	@ (800b930 <HAL_DMA_Init+0x1c8>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d036      	beq.n	800b8dc <HAL_DMA_Init+0x174>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a30      	ldr	r2, [pc, #192]	@ (800b934 <HAL_DMA_Init+0x1cc>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d031      	beq.n	800b8dc <HAL_DMA_Init+0x174>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a2e      	ldr	r2, [pc, #184]	@ (800b938 <HAL_DMA_Init+0x1d0>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d02c      	beq.n	800b8dc <HAL_DMA_Init+0x174>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a2d      	ldr	r2, [pc, #180]	@ (800b93c <HAL_DMA_Init+0x1d4>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d027      	beq.n	800b8dc <HAL_DMA_Init+0x174>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a2b      	ldr	r2, [pc, #172]	@ (800b940 <HAL_DMA_Init+0x1d8>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d022      	beq.n	800b8dc <HAL_DMA_Init+0x174>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a2a      	ldr	r2, [pc, #168]	@ (800b944 <HAL_DMA_Init+0x1dc>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d01d      	beq.n	800b8dc <HAL_DMA_Init+0x174>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a28      	ldr	r2, [pc, #160]	@ (800b948 <HAL_DMA_Init+0x1e0>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d018      	beq.n	800b8dc <HAL_DMA_Init+0x174>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a27      	ldr	r2, [pc, #156]	@ (800b94c <HAL_DMA_Init+0x1e4>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d013      	beq.n	800b8dc <HAL_DMA_Init+0x174>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a25      	ldr	r2, [pc, #148]	@ (800b950 <HAL_DMA_Init+0x1e8>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d00e      	beq.n	800b8dc <HAL_DMA_Init+0x174>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a24      	ldr	r2, [pc, #144]	@ (800b954 <HAL_DMA_Init+0x1ec>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d009      	beq.n	800b8dc <HAL_DMA_Init+0x174>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a22      	ldr	r2, [pc, #136]	@ (800b958 <HAL_DMA_Init+0x1f0>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d004      	beq.n	800b8dc <HAL_DMA_Init+0x174>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a21      	ldr	r2, [pc, #132]	@ (800b95c <HAL_DMA_Init+0x1f4>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d108      	bne.n	800b8ee <HAL_DMA_Init+0x186>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f022 0201 	bic.w	r2, r2, #1
 800b8ea:	601a      	str	r2, [r3, #0]
 800b8ec:	e007      	b.n	800b8fe <HAL_DMA_Init+0x196>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f022 0201 	bic.w	r2, r2, #1
 800b8fc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b8fe:	e02f      	b.n	800b960 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b900:	f7fd fdfc 	bl	80094fc <HAL_GetTick>
 800b904:	4602      	mov	r2, r0
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	1ad3      	subs	r3, r2, r3
 800b90a:	2b05      	cmp	r3, #5
 800b90c:	d928      	bls.n	800b960 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2220      	movs	r2, #32
 800b912:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2203      	movs	r2, #3
 800b918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e242      	b.n	800bda6 <HAL_DMA_Init+0x63e>
 800b920:	40020010 	.word	0x40020010
 800b924:	40020028 	.word	0x40020028
 800b928:	40020040 	.word	0x40020040
 800b92c:	40020058 	.word	0x40020058
 800b930:	40020070 	.word	0x40020070
 800b934:	40020088 	.word	0x40020088
 800b938:	400200a0 	.word	0x400200a0
 800b93c:	400200b8 	.word	0x400200b8
 800b940:	40020410 	.word	0x40020410
 800b944:	40020428 	.word	0x40020428
 800b948:	40020440 	.word	0x40020440
 800b94c:	40020458 	.word	0x40020458
 800b950:	40020470 	.word	0x40020470
 800b954:	40020488 	.word	0x40020488
 800b958:	400204a0 	.word	0x400204a0
 800b95c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f003 0301 	and.w	r3, r3, #1
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d1c8      	bne.n	800b900 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b976:	697a      	ldr	r2, [r7, #20]
 800b978:	4b83      	ldr	r3, [pc, #524]	@ (800bb88 <HAL_DMA_Init+0x420>)
 800b97a:	4013      	ands	r3, r2
 800b97c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800b986:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	691b      	ldr	r3, [r3, #16]
 800b98c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b992:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	699b      	ldr	r3, [r3, #24]
 800b998:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b99e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a1b      	ldr	r3, [r3, #32]
 800b9a4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800b9a6:	697a      	ldr	r2, [r7, #20]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9b0:	2b04      	cmp	r3, #4
 800b9b2:	d107      	bne.n	800b9c4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	697a      	ldr	r2, [r7, #20]
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	2b28      	cmp	r3, #40	@ 0x28
 800b9ca:	d903      	bls.n	800b9d4 <HAL_DMA_Init+0x26c>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9d2:	d91f      	bls.n	800ba14 <HAL_DMA_Init+0x2ac>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800b9da:	d903      	bls.n	800b9e4 <HAL_DMA_Init+0x27c>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	2b42      	cmp	r3, #66	@ 0x42
 800b9e2:	d917      	bls.n	800ba14 <HAL_DMA_Init+0x2ac>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	2b46      	cmp	r3, #70	@ 0x46
 800b9ea:	d903      	bls.n	800b9f4 <HAL_DMA_Init+0x28c>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	2b48      	cmp	r3, #72	@ 0x48
 800b9f2:	d90f      	bls.n	800ba14 <HAL_DMA_Init+0x2ac>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	2b4e      	cmp	r3, #78	@ 0x4e
 800b9fa:	d903      	bls.n	800ba04 <HAL_DMA_Init+0x29c>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	2b52      	cmp	r3, #82	@ 0x52
 800ba02:	d907      	bls.n	800ba14 <HAL_DMA_Init+0x2ac>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	2b73      	cmp	r3, #115	@ 0x73
 800ba0a:	d905      	bls.n	800ba18 <HAL_DMA_Init+0x2b0>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	2b77      	cmp	r3, #119	@ 0x77
 800ba12:	d801      	bhi.n	800ba18 <HAL_DMA_Init+0x2b0>
 800ba14:	2301      	movs	r3, #1
 800ba16:	e000      	b.n	800ba1a <HAL_DMA_Init+0x2b2>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d003      	beq.n	800ba26 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba24:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	697a      	ldr	r2, [r7, #20]
 800ba2c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	695b      	ldr	r3, [r3, #20]
 800ba34:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	f023 0307 	bic.w	r3, r3, #7
 800ba3c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	4313      	orrs	r3, r2
 800ba46:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba4c:	2b04      	cmp	r3, #4
 800ba4e:	d117      	bne.n	800ba80 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba54:	697a      	ldr	r2, [r7, #20]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00e      	beq.n	800ba80 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f002 fb48 	bl	800e0f8 <DMA_CheckFifoParam>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d008      	beq.n	800ba80 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2240      	movs	r2, #64	@ 0x40
 800ba72:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2201      	movs	r2, #1
 800ba78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e192      	b.n	800bda6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	697a      	ldr	r2, [r7, #20]
 800ba86:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f002 fa83 	bl	800df94 <DMA_CalcBaseAndBitshift>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba96:	f003 031f 	and.w	r3, r3, #31
 800ba9a:	223f      	movs	r2, #63	@ 0x3f
 800ba9c:	409a      	lsls	r2, r3
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	609a      	str	r2, [r3, #8]
 800baa2:	e0c8      	b.n	800bc36 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a38      	ldr	r2, [pc, #224]	@ (800bb8c <HAL_DMA_Init+0x424>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d022      	beq.n	800baf4 <HAL_DMA_Init+0x38c>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a37      	ldr	r2, [pc, #220]	@ (800bb90 <HAL_DMA_Init+0x428>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d01d      	beq.n	800baf4 <HAL_DMA_Init+0x38c>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a35      	ldr	r2, [pc, #212]	@ (800bb94 <HAL_DMA_Init+0x42c>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d018      	beq.n	800baf4 <HAL_DMA_Init+0x38c>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a34      	ldr	r2, [pc, #208]	@ (800bb98 <HAL_DMA_Init+0x430>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d013      	beq.n	800baf4 <HAL_DMA_Init+0x38c>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a32      	ldr	r2, [pc, #200]	@ (800bb9c <HAL_DMA_Init+0x434>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d00e      	beq.n	800baf4 <HAL_DMA_Init+0x38c>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a31      	ldr	r2, [pc, #196]	@ (800bba0 <HAL_DMA_Init+0x438>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d009      	beq.n	800baf4 <HAL_DMA_Init+0x38c>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a2f      	ldr	r2, [pc, #188]	@ (800bba4 <HAL_DMA_Init+0x43c>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d004      	beq.n	800baf4 <HAL_DMA_Init+0x38c>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a2e      	ldr	r2, [pc, #184]	@ (800bba8 <HAL_DMA_Init+0x440>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d101      	bne.n	800baf8 <HAL_DMA_Init+0x390>
 800baf4:	2301      	movs	r3, #1
 800baf6:	e000      	b.n	800bafa <HAL_DMA_Init+0x392>
 800baf8:	2300      	movs	r3, #0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f000 8092 	beq.w	800bc24 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a21      	ldr	r2, [pc, #132]	@ (800bb8c <HAL_DMA_Init+0x424>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d021      	beq.n	800bb4e <HAL_DMA_Init+0x3e6>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a20      	ldr	r2, [pc, #128]	@ (800bb90 <HAL_DMA_Init+0x428>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d01c      	beq.n	800bb4e <HAL_DMA_Init+0x3e6>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a1e      	ldr	r2, [pc, #120]	@ (800bb94 <HAL_DMA_Init+0x42c>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d017      	beq.n	800bb4e <HAL_DMA_Init+0x3e6>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a1d      	ldr	r2, [pc, #116]	@ (800bb98 <HAL_DMA_Init+0x430>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d012      	beq.n	800bb4e <HAL_DMA_Init+0x3e6>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a1b      	ldr	r2, [pc, #108]	@ (800bb9c <HAL_DMA_Init+0x434>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d00d      	beq.n	800bb4e <HAL_DMA_Init+0x3e6>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a1a      	ldr	r2, [pc, #104]	@ (800bba0 <HAL_DMA_Init+0x438>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d008      	beq.n	800bb4e <HAL_DMA_Init+0x3e6>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a18      	ldr	r2, [pc, #96]	@ (800bba4 <HAL_DMA_Init+0x43c>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d003      	beq.n	800bb4e <HAL_DMA_Init+0x3e6>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a17      	ldr	r2, [pc, #92]	@ (800bba8 <HAL_DMA_Init+0x440>)
 800bb4c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2202      	movs	r2, #2
 800bb52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800bb66:	697a      	ldr	r2, [r7, #20]
 800bb68:	4b10      	ldr	r3, [pc, #64]	@ (800bbac <HAL_DMA_Init+0x444>)
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	2b40      	cmp	r3, #64	@ 0x40
 800bb74:	d01c      	beq.n	800bbb0 <HAL_DMA_Init+0x448>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	2b80      	cmp	r3, #128	@ 0x80
 800bb7c:	d102      	bne.n	800bb84 <HAL_DMA_Init+0x41c>
 800bb7e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bb82:	e016      	b.n	800bbb2 <HAL_DMA_Init+0x44a>
 800bb84:	2300      	movs	r3, #0
 800bb86:	e014      	b.n	800bbb2 <HAL_DMA_Init+0x44a>
 800bb88:	fe10803f 	.word	0xfe10803f
 800bb8c:	58025408 	.word	0x58025408
 800bb90:	5802541c 	.word	0x5802541c
 800bb94:	58025430 	.word	0x58025430
 800bb98:	58025444 	.word	0x58025444
 800bb9c:	58025458 	.word	0x58025458
 800bba0:	5802546c 	.word	0x5802546c
 800bba4:	58025480 	.word	0x58025480
 800bba8:	58025494 	.word	0x58025494
 800bbac:	fffe000f 	.word	0xfffe000f
 800bbb0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	68d2      	ldr	r2, [r2, #12]
 800bbb6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bbb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800bbc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	695b      	ldr	r3, [r3, #20]
 800bbc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bbc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	699b      	ldr	r3, [r3, #24]
 800bbce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800bbd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	69db      	ldr	r3, [r3, #28]
 800bbd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800bbd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800bbe0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bbe2:	697a      	ldr	r2, [r7, #20]
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	697a      	ldr	r2, [r7, #20]
 800bbee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	4b6e      	ldr	r3, [pc, #440]	@ (800bdb0 <HAL_DMA_Init+0x648>)
 800bbf8:	4413      	add	r3, r2
 800bbfa:	4a6e      	ldr	r2, [pc, #440]	@ (800bdb4 <HAL_DMA_Init+0x64c>)
 800bbfc:	fba2 2303 	umull	r2, r3, r2, r3
 800bc00:	091b      	lsrs	r3, r3, #4
 800bc02:	009a      	lsls	r2, r3, #2
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f002 f9c3 	bl	800df94 <DMA_CalcBaseAndBitshift>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc16:	f003 031f 	and.w	r3, r3, #31
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	409a      	lsls	r2, r3
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	605a      	str	r2, [r3, #4]
 800bc22:	e008      	b.n	800bc36 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2240      	movs	r2, #64	@ 0x40
 800bc28:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2203      	movs	r2, #3
 800bc2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800bc32:	2301      	movs	r3, #1
 800bc34:	e0b7      	b.n	800bda6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a5f      	ldr	r2, [pc, #380]	@ (800bdb8 <HAL_DMA_Init+0x650>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d072      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a5d      	ldr	r2, [pc, #372]	@ (800bdbc <HAL_DMA_Init+0x654>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d06d      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a5c      	ldr	r2, [pc, #368]	@ (800bdc0 <HAL_DMA_Init+0x658>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d068      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a5a      	ldr	r2, [pc, #360]	@ (800bdc4 <HAL_DMA_Init+0x65c>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d063      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a59      	ldr	r2, [pc, #356]	@ (800bdc8 <HAL_DMA_Init+0x660>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d05e      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a57      	ldr	r2, [pc, #348]	@ (800bdcc <HAL_DMA_Init+0x664>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d059      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4a56      	ldr	r2, [pc, #344]	@ (800bdd0 <HAL_DMA_Init+0x668>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d054      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a54      	ldr	r2, [pc, #336]	@ (800bdd4 <HAL_DMA_Init+0x66c>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d04f      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a53      	ldr	r2, [pc, #332]	@ (800bdd8 <HAL_DMA_Init+0x670>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d04a      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4a51      	ldr	r2, [pc, #324]	@ (800bddc <HAL_DMA_Init+0x674>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d045      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a50      	ldr	r2, [pc, #320]	@ (800bde0 <HAL_DMA_Init+0x678>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d040      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a4e      	ldr	r2, [pc, #312]	@ (800bde4 <HAL_DMA_Init+0x67c>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d03b      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a4d      	ldr	r2, [pc, #308]	@ (800bde8 <HAL_DMA_Init+0x680>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d036      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a4b      	ldr	r2, [pc, #300]	@ (800bdec <HAL_DMA_Init+0x684>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d031      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a4a      	ldr	r2, [pc, #296]	@ (800bdf0 <HAL_DMA_Init+0x688>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d02c      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a48      	ldr	r2, [pc, #288]	@ (800bdf4 <HAL_DMA_Init+0x68c>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d027      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a47      	ldr	r2, [pc, #284]	@ (800bdf8 <HAL_DMA_Init+0x690>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d022      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a45      	ldr	r2, [pc, #276]	@ (800bdfc <HAL_DMA_Init+0x694>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d01d      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a44      	ldr	r2, [pc, #272]	@ (800be00 <HAL_DMA_Init+0x698>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d018      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a42      	ldr	r2, [pc, #264]	@ (800be04 <HAL_DMA_Init+0x69c>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d013      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a41      	ldr	r2, [pc, #260]	@ (800be08 <HAL_DMA_Init+0x6a0>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d00e      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a3f      	ldr	r2, [pc, #252]	@ (800be0c <HAL_DMA_Init+0x6a4>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d009      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a3e      	ldr	r2, [pc, #248]	@ (800be10 <HAL_DMA_Init+0x6a8>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d004      	beq.n	800bd26 <HAL_DMA_Init+0x5be>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a3c      	ldr	r2, [pc, #240]	@ (800be14 <HAL_DMA_Init+0x6ac>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d101      	bne.n	800bd2a <HAL_DMA_Init+0x5c2>
 800bd26:	2301      	movs	r3, #1
 800bd28:	e000      	b.n	800bd2c <HAL_DMA_Init+0x5c4>
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d032      	beq.n	800bd96 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f002 fa5d 	bl	800e1f0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	2b80      	cmp	r3, #128	@ 0x80
 800bd3c:	d102      	bne.n	800bd44 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	685a      	ldr	r2, [r3, #4]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd4c:	b2d2      	uxtb	r2, r2
 800bd4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800bd58:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d010      	beq.n	800bd84 <HAL_DMA_Init+0x61c>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	2b08      	cmp	r3, #8
 800bd68:	d80c      	bhi.n	800bd84 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f002 fada 	bl	800e324 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd74:	2200      	movs	r2, #0
 800bd76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bd80:	605a      	str	r2, [r3, #4]
 800bd82:	e008      	b.n	800bd96 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800bda4:	2300      	movs	r3, #0
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3718      	adds	r7, #24
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	a7fdabf8 	.word	0xa7fdabf8
 800bdb4:	cccccccd 	.word	0xcccccccd
 800bdb8:	40020010 	.word	0x40020010
 800bdbc:	40020028 	.word	0x40020028
 800bdc0:	40020040 	.word	0x40020040
 800bdc4:	40020058 	.word	0x40020058
 800bdc8:	40020070 	.word	0x40020070
 800bdcc:	40020088 	.word	0x40020088
 800bdd0:	400200a0 	.word	0x400200a0
 800bdd4:	400200b8 	.word	0x400200b8
 800bdd8:	40020410 	.word	0x40020410
 800bddc:	40020428 	.word	0x40020428
 800bde0:	40020440 	.word	0x40020440
 800bde4:	40020458 	.word	0x40020458
 800bde8:	40020470 	.word	0x40020470
 800bdec:	40020488 	.word	0x40020488
 800bdf0:	400204a0 	.word	0x400204a0
 800bdf4:	400204b8 	.word	0x400204b8
 800bdf8:	58025408 	.word	0x58025408
 800bdfc:	5802541c 	.word	0x5802541c
 800be00:	58025430 	.word	0x58025430
 800be04:	58025444 	.word	0x58025444
 800be08:	58025458 	.word	0x58025458
 800be0c:	5802546c 	.word	0x5802546c
 800be10:	58025480 	.word	0x58025480
 800be14:	58025494 	.word	0x58025494

0800be18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b086      	sub	sp, #24
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	607a      	str	r2, [r7, #4]
 800be24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d101      	bne.n	800be34 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800be30:	2301      	movs	r3, #1
 800be32:	e226      	b.n	800c282 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d101      	bne.n	800be42 <HAL_DMA_Start_IT+0x2a>
 800be3e:	2302      	movs	r3, #2
 800be40:	e21f      	b.n	800c282 <HAL_DMA_Start_IT+0x46a>
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800be50:	b2db      	uxtb	r3, r3
 800be52:	2b01      	cmp	r3, #1
 800be54:	f040 820a 	bne.w	800c26c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2202      	movs	r2, #2
 800be5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a68      	ldr	r2, [pc, #416]	@ (800c00c <HAL_DMA_Start_IT+0x1f4>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d04a      	beq.n	800bf06 <HAL_DMA_Start_IT+0xee>
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a66      	ldr	r2, [pc, #408]	@ (800c010 <HAL_DMA_Start_IT+0x1f8>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d045      	beq.n	800bf06 <HAL_DMA_Start_IT+0xee>
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4a65      	ldr	r2, [pc, #404]	@ (800c014 <HAL_DMA_Start_IT+0x1fc>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d040      	beq.n	800bf06 <HAL_DMA_Start_IT+0xee>
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a63      	ldr	r2, [pc, #396]	@ (800c018 <HAL_DMA_Start_IT+0x200>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d03b      	beq.n	800bf06 <HAL_DMA_Start_IT+0xee>
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4a62      	ldr	r2, [pc, #392]	@ (800c01c <HAL_DMA_Start_IT+0x204>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d036      	beq.n	800bf06 <HAL_DMA_Start_IT+0xee>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4a60      	ldr	r2, [pc, #384]	@ (800c020 <HAL_DMA_Start_IT+0x208>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d031      	beq.n	800bf06 <HAL_DMA_Start_IT+0xee>
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4a5f      	ldr	r2, [pc, #380]	@ (800c024 <HAL_DMA_Start_IT+0x20c>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d02c      	beq.n	800bf06 <HAL_DMA_Start_IT+0xee>
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a5d      	ldr	r2, [pc, #372]	@ (800c028 <HAL_DMA_Start_IT+0x210>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d027      	beq.n	800bf06 <HAL_DMA_Start_IT+0xee>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4a5c      	ldr	r2, [pc, #368]	@ (800c02c <HAL_DMA_Start_IT+0x214>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d022      	beq.n	800bf06 <HAL_DMA_Start_IT+0xee>
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a5a      	ldr	r2, [pc, #360]	@ (800c030 <HAL_DMA_Start_IT+0x218>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d01d      	beq.n	800bf06 <HAL_DMA_Start_IT+0xee>
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a59      	ldr	r2, [pc, #356]	@ (800c034 <HAL_DMA_Start_IT+0x21c>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d018      	beq.n	800bf06 <HAL_DMA_Start_IT+0xee>
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4a57      	ldr	r2, [pc, #348]	@ (800c038 <HAL_DMA_Start_IT+0x220>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d013      	beq.n	800bf06 <HAL_DMA_Start_IT+0xee>
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a56      	ldr	r2, [pc, #344]	@ (800c03c <HAL_DMA_Start_IT+0x224>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d00e      	beq.n	800bf06 <HAL_DMA_Start_IT+0xee>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a54      	ldr	r2, [pc, #336]	@ (800c040 <HAL_DMA_Start_IT+0x228>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d009      	beq.n	800bf06 <HAL_DMA_Start_IT+0xee>
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a53      	ldr	r2, [pc, #332]	@ (800c044 <HAL_DMA_Start_IT+0x22c>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d004      	beq.n	800bf06 <HAL_DMA_Start_IT+0xee>
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a51      	ldr	r2, [pc, #324]	@ (800c048 <HAL_DMA_Start_IT+0x230>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d108      	bne.n	800bf18 <HAL_DMA_Start_IT+0x100>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f022 0201 	bic.w	r2, r2, #1
 800bf14:	601a      	str	r2, [r3, #0]
 800bf16:	e007      	b.n	800bf28 <HAL_DMA_Start_IT+0x110>
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f022 0201 	bic.w	r2, r2, #1
 800bf26:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	68b9      	ldr	r1, [r7, #8]
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f001 fe84 	bl	800dc3c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a34      	ldr	r2, [pc, #208]	@ (800c00c <HAL_DMA_Start_IT+0x1f4>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d04a      	beq.n	800bfd4 <HAL_DMA_Start_IT+0x1bc>
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4a33      	ldr	r2, [pc, #204]	@ (800c010 <HAL_DMA_Start_IT+0x1f8>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d045      	beq.n	800bfd4 <HAL_DMA_Start_IT+0x1bc>
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a31      	ldr	r2, [pc, #196]	@ (800c014 <HAL_DMA_Start_IT+0x1fc>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d040      	beq.n	800bfd4 <HAL_DMA_Start_IT+0x1bc>
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a30      	ldr	r2, [pc, #192]	@ (800c018 <HAL_DMA_Start_IT+0x200>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d03b      	beq.n	800bfd4 <HAL_DMA_Start_IT+0x1bc>
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a2e      	ldr	r2, [pc, #184]	@ (800c01c <HAL_DMA_Start_IT+0x204>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d036      	beq.n	800bfd4 <HAL_DMA_Start_IT+0x1bc>
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a2d      	ldr	r2, [pc, #180]	@ (800c020 <HAL_DMA_Start_IT+0x208>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d031      	beq.n	800bfd4 <HAL_DMA_Start_IT+0x1bc>
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4a2b      	ldr	r2, [pc, #172]	@ (800c024 <HAL_DMA_Start_IT+0x20c>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d02c      	beq.n	800bfd4 <HAL_DMA_Start_IT+0x1bc>
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4a2a      	ldr	r2, [pc, #168]	@ (800c028 <HAL_DMA_Start_IT+0x210>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d027      	beq.n	800bfd4 <HAL_DMA_Start_IT+0x1bc>
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4a28      	ldr	r2, [pc, #160]	@ (800c02c <HAL_DMA_Start_IT+0x214>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d022      	beq.n	800bfd4 <HAL_DMA_Start_IT+0x1bc>
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a27      	ldr	r2, [pc, #156]	@ (800c030 <HAL_DMA_Start_IT+0x218>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d01d      	beq.n	800bfd4 <HAL_DMA_Start_IT+0x1bc>
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a25      	ldr	r2, [pc, #148]	@ (800c034 <HAL_DMA_Start_IT+0x21c>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d018      	beq.n	800bfd4 <HAL_DMA_Start_IT+0x1bc>
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a24      	ldr	r2, [pc, #144]	@ (800c038 <HAL_DMA_Start_IT+0x220>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d013      	beq.n	800bfd4 <HAL_DMA_Start_IT+0x1bc>
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a22      	ldr	r2, [pc, #136]	@ (800c03c <HAL_DMA_Start_IT+0x224>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d00e      	beq.n	800bfd4 <HAL_DMA_Start_IT+0x1bc>
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a21      	ldr	r2, [pc, #132]	@ (800c040 <HAL_DMA_Start_IT+0x228>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d009      	beq.n	800bfd4 <HAL_DMA_Start_IT+0x1bc>
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a1f      	ldr	r2, [pc, #124]	@ (800c044 <HAL_DMA_Start_IT+0x22c>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d004      	beq.n	800bfd4 <HAL_DMA_Start_IT+0x1bc>
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4a1e      	ldr	r2, [pc, #120]	@ (800c048 <HAL_DMA_Start_IT+0x230>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d101      	bne.n	800bfd8 <HAL_DMA_Start_IT+0x1c0>
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	e000      	b.n	800bfda <HAL_DMA_Start_IT+0x1c2>
 800bfd8:	2300      	movs	r3, #0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d036      	beq.n	800c04c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f023 021e 	bic.w	r2, r3, #30
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f042 0216 	orr.w	r2, r2, #22
 800bff0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d03e      	beq.n	800c078 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f042 0208 	orr.w	r2, r2, #8
 800c008:	601a      	str	r2, [r3, #0]
 800c00a:	e035      	b.n	800c078 <HAL_DMA_Start_IT+0x260>
 800c00c:	40020010 	.word	0x40020010
 800c010:	40020028 	.word	0x40020028
 800c014:	40020040 	.word	0x40020040
 800c018:	40020058 	.word	0x40020058
 800c01c:	40020070 	.word	0x40020070
 800c020:	40020088 	.word	0x40020088
 800c024:	400200a0 	.word	0x400200a0
 800c028:	400200b8 	.word	0x400200b8
 800c02c:	40020410 	.word	0x40020410
 800c030:	40020428 	.word	0x40020428
 800c034:	40020440 	.word	0x40020440
 800c038:	40020458 	.word	0x40020458
 800c03c:	40020470 	.word	0x40020470
 800c040:	40020488 	.word	0x40020488
 800c044:	400204a0 	.word	0x400204a0
 800c048:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f023 020e 	bic.w	r2, r3, #14
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f042 020a 	orr.w	r2, r2, #10
 800c05e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c064:	2b00      	cmp	r3, #0
 800c066:	d007      	beq.n	800c078 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f042 0204 	orr.w	r2, r2, #4
 800c076:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a83      	ldr	r2, [pc, #524]	@ (800c28c <HAL_DMA_Start_IT+0x474>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d072      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a82      	ldr	r2, [pc, #520]	@ (800c290 <HAL_DMA_Start_IT+0x478>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d06d      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a80      	ldr	r2, [pc, #512]	@ (800c294 <HAL_DMA_Start_IT+0x47c>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d068      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a7f      	ldr	r2, [pc, #508]	@ (800c298 <HAL_DMA_Start_IT+0x480>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d063      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a7d      	ldr	r2, [pc, #500]	@ (800c29c <HAL_DMA_Start_IT+0x484>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d05e      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4a7c      	ldr	r2, [pc, #496]	@ (800c2a0 <HAL_DMA_Start_IT+0x488>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d059      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a7a      	ldr	r2, [pc, #488]	@ (800c2a4 <HAL_DMA_Start_IT+0x48c>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d054      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a79      	ldr	r2, [pc, #484]	@ (800c2a8 <HAL_DMA_Start_IT+0x490>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d04f      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a77      	ldr	r2, [pc, #476]	@ (800c2ac <HAL_DMA_Start_IT+0x494>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d04a      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a76      	ldr	r2, [pc, #472]	@ (800c2b0 <HAL_DMA_Start_IT+0x498>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d045      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a74      	ldr	r2, [pc, #464]	@ (800c2b4 <HAL_DMA_Start_IT+0x49c>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d040      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a73      	ldr	r2, [pc, #460]	@ (800c2b8 <HAL_DMA_Start_IT+0x4a0>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d03b      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a71      	ldr	r2, [pc, #452]	@ (800c2bc <HAL_DMA_Start_IT+0x4a4>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d036      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a70      	ldr	r2, [pc, #448]	@ (800c2c0 <HAL_DMA_Start_IT+0x4a8>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d031      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a6e      	ldr	r2, [pc, #440]	@ (800c2c4 <HAL_DMA_Start_IT+0x4ac>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d02c      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4a6d      	ldr	r2, [pc, #436]	@ (800c2c8 <HAL_DMA_Start_IT+0x4b0>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d027      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a6b      	ldr	r2, [pc, #428]	@ (800c2cc <HAL_DMA_Start_IT+0x4b4>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d022      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a6a      	ldr	r2, [pc, #424]	@ (800c2d0 <HAL_DMA_Start_IT+0x4b8>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d01d      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a68      	ldr	r2, [pc, #416]	@ (800c2d4 <HAL_DMA_Start_IT+0x4bc>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d018      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a67      	ldr	r2, [pc, #412]	@ (800c2d8 <HAL_DMA_Start_IT+0x4c0>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d013      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a65      	ldr	r2, [pc, #404]	@ (800c2dc <HAL_DMA_Start_IT+0x4c4>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d00e      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a64      	ldr	r2, [pc, #400]	@ (800c2e0 <HAL_DMA_Start_IT+0x4c8>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d009      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a62      	ldr	r2, [pc, #392]	@ (800c2e4 <HAL_DMA_Start_IT+0x4cc>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d004      	beq.n	800c168 <HAL_DMA_Start_IT+0x350>
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a61      	ldr	r2, [pc, #388]	@ (800c2e8 <HAL_DMA_Start_IT+0x4d0>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d101      	bne.n	800c16c <HAL_DMA_Start_IT+0x354>
 800c168:	2301      	movs	r3, #1
 800c16a:	e000      	b.n	800c16e <HAL_DMA_Start_IT+0x356>
 800c16c:	2300      	movs	r3, #0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d01a      	beq.n	800c1a8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d007      	beq.n	800c190 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c18a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c18e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c194:	2b00      	cmp	r3, #0
 800c196:	d007      	beq.n	800c1a8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c1a6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a37      	ldr	r2, [pc, #220]	@ (800c28c <HAL_DMA_Start_IT+0x474>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d04a      	beq.n	800c248 <HAL_DMA_Start_IT+0x430>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a36      	ldr	r2, [pc, #216]	@ (800c290 <HAL_DMA_Start_IT+0x478>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d045      	beq.n	800c248 <HAL_DMA_Start_IT+0x430>
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a34      	ldr	r2, [pc, #208]	@ (800c294 <HAL_DMA_Start_IT+0x47c>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d040      	beq.n	800c248 <HAL_DMA_Start_IT+0x430>
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a33      	ldr	r2, [pc, #204]	@ (800c298 <HAL_DMA_Start_IT+0x480>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d03b      	beq.n	800c248 <HAL_DMA_Start_IT+0x430>
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4a31      	ldr	r2, [pc, #196]	@ (800c29c <HAL_DMA_Start_IT+0x484>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d036      	beq.n	800c248 <HAL_DMA_Start_IT+0x430>
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4a30      	ldr	r2, [pc, #192]	@ (800c2a0 <HAL_DMA_Start_IT+0x488>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d031      	beq.n	800c248 <HAL_DMA_Start_IT+0x430>
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4a2e      	ldr	r2, [pc, #184]	@ (800c2a4 <HAL_DMA_Start_IT+0x48c>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d02c      	beq.n	800c248 <HAL_DMA_Start_IT+0x430>
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a2d      	ldr	r2, [pc, #180]	@ (800c2a8 <HAL_DMA_Start_IT+0x490>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d027      	beq.n	800c248 <HAL_DMA_Start_IT+0x430>
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a2b      	ldr	r2, [pc, #172]	@ (800c2ac <HAL_DMA_Start_IT+0x494>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d022      	beq.n	800c248 <HAL_DMA_Start_IT+0x430>
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4a2a      	ldr	r2, [pc, #168]	@ (800c2b0 <HAL_DMA_Start_IT+0x498>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d01d      	beq.n	800c248 <HAL_DMA_Start_IT+0x430>
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a28      	ldr	r2, [pc, #160]	@ (800c2b4 <HAL_DMA_Start_IT+0x49c>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d018      	beq.n	800c248 <HAL_DMA_Start_IT+0x430>
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a27      	ldr	r2, [pc, #156]	@ (800c2b8 <HAL_DMA_Start_IT+0x4a0>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d013      	beq.n	800c248 <HAL_DMA_Start_IT+0x430>
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4a25      	ldr	r2, [pc, #148]	@ (800c2bc <HAL_DMA_Start_IT+0x4a4>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d00e      	beq.n	800c248 <HAL_DMA_Start_IT+0x430>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a24      	ldr	r2, [pc, #144]	@ (800c2c0 <HAL_DMA_Start_IT+0x4a8>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d009      	beq.n	800c248 <HAL_DMA_Start_IT+0x430>
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a22      	ldr	r2, [pc, #136]	@ (800c2c4 <HAL_DMA_Start_IT+0x4ac>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d004      	beq.n	800c248 <HAL_DMA_Start_IT+0x430>
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4a21      	ldr	r2, [pc, #132]	@ (800c2c8 <HAL_DMA_Start_IT+0x4b0>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d108      	bne.n	800c25a <HAL_DMA_Start_IT+0x442>
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	681a      	ldr	r2, [r3, #0]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f042 0201 	orr.w	r2, r2, #1
 800c256:	601a      	str	r2, [r3, #0]
 800c258:	e012      	b.n	800c280 <HAL_DMA_Start_IT+0x468>
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f042 0201 	orr.w	r2, r2, #1
 800c268:	601a      	str	r2, [r3, #0]
 800c26a:	e009      	b.n	800c280 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c272:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2200      	movs	r2, #0
 800c278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c280:	7dfb      	ldrb	r3, [r7, #23]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3718      	adds	r7, #24
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	40020010 	.word	0x40020010
 800c290:	40020028 	.word	0x40020028
 800c294:	40020040 	.word	0x40020040
 800c298:	40020058 	.word	0x40020058
 800c29c:	40020070 	.word	0x40020070
 800c2a0:	40020088 	.word	0x40020088
 800c2a4:	400200a0 	.word	0x400200a0
 800c2a8:	400200b8 	.word	0x400200b8
 800c2ac:	40020410 	.word	0x40020410
 800c2b0:	40020428 	.word	0x40020428
 800c2b4:	40020440 	.word	0x40020440
 800c2b8:	40020458 	.word	0x40020458
 800c2bc:	40020470 	.word	0x40020470
 800c2c0:	40020488 	.word	0x40020488
 800c2c4:	400204a0 	.word	0x400204a0
 800c2c8:	400204b8 	.word	0x400204b8
 800c2cc:	58025408 	.word	0x58025408
 800c2d0:	5802541c 	.word	0x5802541c
 800c2d4:	58025430 	.word	0x58025430
 800c2d8:	58025444 	.word	0x58025444
 800c2dc:	58025458 	.word	0x58025458
 800c2e0:	5802546c 	.word	0x5802546c
 800c2e4:	58025480 	.word	0x58025480
 800c2e8:	58025494 	.word	0x58025494

0800c2ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b086      	sub	sp, #24
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800c2f4:	f7fd f902 	bl	80094fc <HAL_GetTick>
 800c2f8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d101      	bne.n	800c304 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800c300:	2301      	movs	r3, #1
 800c302:	e2dc      	b.n	800c8be <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	2b02      	cmp	r3, #2
 800c30e:	d008      	beq.n	800c322 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2280      	movs	r2, #128	@ 0x80
 800c314:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800c31e:	2301      	movs	r3, #1
 800c320:	e2cd      	b.n	800c8be <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a76      	ldr	r2, [pc, #472]	@ (800c500 <HAL_DMA_Abort+0x214>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d04a      	beq.n	800c3c2 <HAL_DMA_Abort+0xd6>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a74      	ldr	r2, [pc, #464]	@ (800c504 <HAL_DMA_Abort+0x218>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d045      	beq.n	800c3c2 <HAL_DMA_Abort+0xd6>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a73      	ldr	r2, [pc, #460]	@ (800c508 <HAL_DMA_Abort+0x21c>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d040      	beq.n	800c3c2 <HAL_DMA_Abort+0xd6>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a71      	ldr	r2, [pc, #452]	@ (800c50c <HAL_DMA_Abort+0x220>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d03b      	beq.n	800c3c2 <HAL_DMA_Abort+0xd6>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a70      	ldr	r2, [pc, #448]	@ (800c510 <HAL_DMA_Abort+0x224>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d036      	beq.n	800c3c2 <HAL_DMA_Abort+0xd6>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a6e      	ldr	r2, [pc, #440]	@ (800c514 <HAL_DMA_Abort+0x228>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d031      	beq.n	800c3c2 <HAL_DMA_Abort+0xd6>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a6d      	ldr	r2, [pc, #436]	@ (800c518 <HAL_DMA_Abort+0x22c>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d02c      	beq.n	800c3c2 <HAL_DMA_Abort+0xd6>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a6b      	ldr	r2, [pc, #428]	@ (800c51c <HAL_DMA_Abort+0x230>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d027      	beq.n	800c3c2 <HAL_DMA_Abort+0xd6>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a6a      	ldr	r2, [pc, #424]	@ (800c520 <HAL_DMA_Abort+0x234>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d022      	beq.n	800c3c2 <HAL_DMA_Abort+0xd6>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a68      	ldr	r2, [pc, #416]	@ (800c524 <HAL_DMA_Abort+0x238>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d01d      	beq.n	800c3c2 <HAL_DMA_Abort+0xd6>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a67      	ldr	r2, [pc, #412]	@ (800c528 <HAL_DMA_Abort+0x23c>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d018      	beq.n	800c3c2 <HAL_DMA_Abort+0xd6>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a65      	ldr	r2, [pc, #404]	@ (800c52c <HAL_DMA_Abort+0x240>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d013      	beq.n	800c3c2 <HAL_DMA_Abort+0xd6>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a64      	ldr	r2, [pc, #400]	@ (800c530 <HAL_DMA_Abort+0x244>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d00e      	beq.n	800c3c2 <HAL_DMA_Abort+0xd6>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a62      	ldr	r2, [pc, #392]	@ (800c534 <HAL_DMA_Abort+0x248>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d009      	beq.n	800c3c2 <HAL_DMA_Abort+0xd6>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a61      	ldr	r2, [pc, #388]	@ (800c538 <HAL_DMA_Abort+0x24c>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d004      	beq.n	800c3c2 <HAL_DMA_Abort+0xd6>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a5f      	ldr	r2, [pc, #380]	@ (800c53c <HAL_DMA_Abort+0x250>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d101      	bne.n	800c3c6 <HAL_DMA_Abort+0xda>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e000      	b.n	800c3c8 <HAL_DMA_Abort+0xdc>
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d013      	beq.n	800c3f4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f022 021e 	bic.w	r2, r2, #30
 800c3da:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	695a      	ldr	r2, [r3, #20]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c3ea:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	617b      	str	r3, [r7, #20]
 800c3f2:	e00a      	b.n	800c40a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f022 020e 	bic.w	r2, r2, #14
 800c402:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a3c      	ldr	r2, [pc, #240]	@ (800c500 <HAL_DMA_Abort+0x214>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d072      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a3a      	ldr	r2, [pc, #232]	@ (800c504 <HAL_DMA_Abort+0x218>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d06d      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a39      	ldr	r2, [pc, #228]	@ (800c508 <HAL_DMA_Abort+0x21c>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d068      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a37      	ldr	r2, [pc, #220]	@ (800c50c <HAL_DMA_Abort+0x220>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d063      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a36      	ldr	r2, [pc, #216]	@ (800c510 <HAL_DMA_Abort+0x224>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d05e      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a34      	ldr	r2, [pc, #208]	@ (800c514 <HAL_DMA_Abort+0x228>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d059      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a33      	ldr	r2, [pc, #204]	@ (800c518 <HAL_DMA_Abort+0x22c>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d054      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a31      	ldr	r2, [pc, #196]	@ (800c51c <HAL_DMA_Abort+0x230>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d04f      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a30      	ldr	r2, [pc, #192]	@ (800c520 <HAL_DMA_Abort+0x234>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d04a      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a2e      	ldr	r2, [pc, #184]	@ (800c524 <HAL_DMA_Abort+0x238>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d045      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a2d      	ldr	r2, [pc, #180]	@ (800c528 <HAL_DMA_Abort+0x23c>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d040      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a2b      	ldr	r2, [pc, #172]	@ (800c52c <HAL_DMA_Abort+0x240>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d03b      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a2a      	ldr	r2, [pc, #168]	@ (800c530 <HAL_DMA_Abort+0x244>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d036      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a28      	ldr	r2, [pc, #160]	@ (800c534 <HAL_DMA_Abort+0x248>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d031      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a27      	ldr	r2, [pc, #156]	@ (800c538 <HAL_DMA_Abort+0x24c>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d02c      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a25      	ldr	r2, [pc, #148]	@ (800c53c <HAL_DMA_Abort+0x250>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d027      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4a24      	ldr	r2, [pc, #144]	@ (800c540 <HAL_DMA_Abort+0x254>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d022      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a22      	ldr	r2, [pc, #136]	@ (800c544 <HAL_DMA_Abort+0x258>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d01d      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a21      	ldr	r2, [pc, #132]	@ (800c548 <HAL_DMA_Abort+0x25c>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d018      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a1f      	ldr	r2, [pc, #124]	@ (800c54c <HAL_DMA_Abort+0x260>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d013      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a1e      	ldr	r2, [pc, #120]	@ (800c550 <HAL_DMA_Abort+0x264>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d00e      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a1c      	ldr	r2, [pc, #112]	@ (800c554 <HAL_DMA_Abort+0x268>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d009      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a1b      	ldr	r2, [pc, #108]	@ (800c558 <HAL_DMA_Abort+0x26c>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d004      	beq.n	800c4fa <HAL_DMA_Abort+0x20e>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a19      	ldr	r2, [pc, #100]	@ (800c55c <HAL_DMA_Abort+0x270>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d132      	bne.n	800c560 <HAL_DMA_Abort+0x274>
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	e031      	b.n	800c562 <HAL_DMA_Abort+0x276>
 800c4fe:	bf00      	nop
 800c500:	40020010 	.word	0x40020010
 800c504:	40020028 	.word	0x40020028
 800c508:	40020040 	.word	0x40020040
 800c50c:	40020058 	.word	0x40020058
 800c510:	40020070 	.word	0x40020070
 800c514:	40020088 	.word	0x40020088
 800c518:	400200a0 	.word	0x400200a0
 800c51c:	400200b8 	.word	0x400200b8
 800c520:	40020410 	.word	0x40020410
 800c524:	40020428 	.word	0x40020428
 800c528:	40020440 	.word	0x40020440
 800c52c:	40020458 	.word	0x40020458
 800c530:	40020470 	.word	0x40020470
 800c534:	40020488 	.word	0x40020488
 800c538:	400204a0 	.word	0x400204a0
 800c53c:	400204b8 	.word	0x400204b8
 800c540:	58025408 	.word	0x58025408
 800c544:	5802541c 	.word	0x5802541c
 800c548:	58025430 	.word	0x58025430
 800c54c:	58025444 	.word	0x58025444
 800c550:	58025458 	.word	0x58025458
 800c554:	5802546c 	.word	0x5802546c
 800c558:	58025480 	.word	0x58025480
 800c55c:	58025494 	.word	0x58025494
 800c560:	2300      	movs	r3, #0
 800c562:	2b00      	cmp	r3, #0
 800c564:	d007      	beq.n	800c576 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c570:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c574:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a6d      	ldr	r2, [pc, #436]	@ (800c730 <HAL_DMA_Abort+0x444>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d04a      	beq.n	800c616 <HAL_DMA_Abort+0x32a>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4a6b      	ldr	r2, [pc, #428]	@ (800c734 <HAL_DMA_Abort+0x448>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d045      	beq.n	800c616 <HAL_DMA_Abort+0x32a>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4a6a      	ldr	r2, [pc, #424]	@ (800c738 <HAL_DMA_Abort+0x44c>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d040      	beq.n	800c616 <HAL_DMA_Abort+0x32a>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a68      	ldr	r2, [pc, #416]	@ (800c73c <HAL_DMA_Abort+0x450>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d03b      	beq.n	800c616 <HAL_DMA_Abort+0x32a>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4a67      	ldr	r2, [pc, #412]	@ (800c740 <HAL_DMA_Abort+0x454>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d036      	beq.n	800c616 <HAL_DMA_Abort+0x32a>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a65      	ldr	r2, [pc, #404]	@ (800c744 <HAL_DMA_Abort+0x458>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d031      	beq.n	800c616 <HAL_DMA_Abort+0x32a>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4a64      	ldr	r2, [pc, #400]	@ (800c748 <HAL_DMA_Abort+0x45c>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d02c      	beq.n	800c616 <HAL_DMA_Abort+0x32a>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a62      	ldr	r2, [pc, #392]	@ (800c74c <HAL_DMA_Abort+0x460>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d027      	beq.n	800c616 <HAL_DMA_Abort+0x32a>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a61      	ldr	r2, [pc, #388]	@ (800c750 <HAL_DMA_Abort+0x464>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d022      	beq.n	800c616 <HAL_DMA_Abort+0x32a>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a5f      	ldr	r2, [pc, #380]	@ (800c754 <HAL_DMA_Abort+0x468>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d01d      	beq.n	800c616 <HAL_DMA_Abort+0x32a>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4a5e      	ldr	r2, [pc, #376]	@ (800c758 <HAL_DMA_Abort+0x46c>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d018      	beq.n	800c616 <HAL_DMA_Abort+0x32a>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4a5c      	ldr	r2, [pc, #368]	@ (800c75c <HAL_DMA_Abort+0x470>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d013      	beq.n	800c616 <HAL_DMA_Abort+0x32a>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a5b      	ldr	r2, [pc, #364]	@ (800c760 <HAL_DMA_Abort+0x474>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d00e      	beq.n	800c616 <HAL_DMA_Abort+0x32a>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a59      	ldr	r2, [pc, #356]	@ (800c764 <HAL_DMA_Abort+0x478>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d009      	beq.n	800c616 <HAL_DMA_Abort+0x32a>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a58      	ldr	r2, [pc, #352]	@ (800c768 <HAL_DMA_Abort+0x47c>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d004      	beq.n	800c616 <HAL_DMA_Abort+0x32a>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a56      	ldr	r2, [pc, #344]	@ (800c76c <HAL_DMA_Abort+0x480>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d108      	bne.n	800c628 <HAL_DMA_Abort+0x33c>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f022 0201 	bic.w	r2, r2, #1
 800c624:	601a      	str	r2, [r3, #0]
 800c626:	e007      	b.n	800c638 <HAL_DMA_Abort+0x34c>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	681a      	ldr	r2, [r3, #0]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f022 0201 	bic.w	r2, r2, #1
 800c636:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c638:	e013      	b.n	800c662 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c63a:	f7fc ff5f 	bl	80094fc <HAL_GetTick>
 800c63e:	4602      	mov	r2, r0
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	1ad3      	subs	r3, r2, r3
 800c644:	2b05      	cmp	r3, #5
 800c646:	d90c      	bls.n	800c662 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2220      	movs	r2, #32
 800c64c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2203      	movs	r2, #3
 800c652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2200      	movs	r2, #0
 800c65a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800c65e:	2301      	movs	r3, #1
 800c660:	e12d      	b.n	800c8be <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 0301 	and.w	r3, r3, #1
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d1e5      	bne.n	800c63a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4a2f      	ldr	r2, [pc, #188]	@ (800c730 <HAL_DMA_Abort+0x444>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d04a      	beq.n	800c70e <HAL_DMA_Abort+0x422>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a2d      	ldr	r2, [pc, #180]	@ (800c734 <HAL_DMA_Abort+0x448>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d045      	beq.n	800c70e <HAL_DMA_Abort+0x422>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4a2c      	ldr	r2, [pc, #176]	@ (800c738 <HAL_DMA_Abort+0x44c>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d040      	beq.n	800c70e <HAL_DMA_Abort+0x422>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a2a      	ldr	r2, [pc, #168]	@ (800c73c <HAL_DMA_Abort+0x450>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d03b      	beq.n	800c70e <HAL_DMA_Abort+0x422>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4a29      	ldr	r2, [pc, #164]	@ (800c740 <HAL_DMA_Abort+0x454>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d036      	beq.n	800c70e <HAL_DMA_Abort+0x422>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4a27      	ldr	r2, [pc, #156]	@ (800c744 <HAL_DMA_Abort+0x458>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d031      	beq.n	800c70e <HAL_DMA_Abort+0x422>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a26      	ldr	r2, [pc, #152]	@ (800c748 <HAL_DMA_Abort+0x45c>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d02c      	beq.n	800c70e <HAL_DMA_Abort+0x422>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4a24      	ldr	r2, [pc, #144]	@ (800c74c <HAL_DMA_Abort+0x460>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d027      	beq.n	800c70e <HAL_DMA_Abort+0x422>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4a23      	ldr	r2, [pc, #140]	@ (800c750 <HAL_DMA_Abort+0x464>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d022      	beq.n	800c70e <HAL_DMA_Abort+0x422>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4a21      	ldr	r2, [pc, #132]	@ (800c754 <HAL_DMA_Abort+0x468>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d01d      	beq.n	800c70e <HAL_DMA_Abort+0x422>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4a20      	ldr	r2, [pc, #128]	@ (800c758 <HAL_DMA_Abort+0x46c>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d018      	beq.n	800c70e <HAL_DMA_Abort+0x422>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a1e      	ldr	r2, [pc, #120]	@ (800c75c <HAL_DMA_Abort+0x470>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d013      	beq.n	800c70e <HAL_DMA_Abort+0x422>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a1d      	ldr	r2, [pc, #116]	@ (800c760 <HAL_DMA_Abort+0x474>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d00e      	beq.n	800c70e <HAL_DMA_Abort+0x422>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a1b      	ldr	r2, [pc, #108]	@ (800c764 <HAL_DMA_Abort+0x478>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d009      	beq.n	800c70e <HAL_DMA_Abort+0x422>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a1a      	ldr	r2, [pc, #104]	@ (800c768 <HAL_DMA_Abort+0x47c>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d004      	beq.n	800c70e <HAL_DMA_Abort+0x422>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a18      	ldr	r2, [pc, #96]	@ (800c76c <HAL_DMA_Abort+0x480>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d101      	bne.n	800c712 <HAL_DMA_Abort+0x426>
 800c70e:	2301      	movs	r3, #1
 800c710:	e000      	b.n	800c714 <HAL_DMA_Abort+0x428>
 800c712:	2300      	movs	r3, #0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d02b      	beq.n	800c770 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c71c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c722:	f003 031f 	and.w	r3, r3, #31
 800c726:	223f      	movs	r2, #63	@ 0x3f
 800c728:	409a      	lsls	r2, r3
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	609a      	str	r2, [r3, #8]
 800c72e:	e02a      	b.n	800c786 <HAL_DMA_Abort+0x49a>
 800c730:	40020010 	.word	0x40020010
 800c734:	40020028 	.word	0x40020028
 800c738:	40020040 	.word	0x40020040
 800c73c:	40020058 	.word	0x40020058
 800c740:	40020070 	.word	0x40020070
 800c744:	40020088 	.word	0x40020088
 800c748:	400200a0 	.word	0x400200a0
 800c74c:	400200b8 	.word	0x400200b8
 800c750:	40020410 	.word	0x40020410
 800c754:	40020428 	.word	0x40020428
 800c758:	40020440 	.word	0x40020440
 800c75c:	40020458 	.word	0x40020458
 800c760:	40020470 	.word	0x40020470
 800c764:	40020488 	.word	0x40020488
 800c768:	400204a0 	.word	0x400204a0
 800c76c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c774:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c77a:	f003 031f 	and.w	r3, r3, #31
 800c77e:	2201      	movs	r2, #1
 800c780:	409a      	lsls	r2, r3
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4a4f      	ldr	r2, [pc, #316]	@ (800c8c8 <HAL_DMA_Abort+0x5dc>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d072      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a4d      	ldr	r2, [pc, #308]	@ (800c8cc <HAL_DMA_Abort+0x5e0>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d06d      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a4c      	ldr	r2, [pc, #304]	@ (800c8d0 <HAL_DMA_Abort+0x5e4>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d068      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a4a      	ldr	r2, [pc, #296]	@ (800c8d4 <HAL_DMA_Abort+0x5e8>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d063      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a49      	ldr	r2, [pc, #292]	@ (800c8d8 <HAL_DMA_Abort+0x5ec>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d05e      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a47      	ldr	r2, [pc, #284]	@ (800c8dc <HAL_DMA_Abort+0x5f0>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d059      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a46      	ldr	r2, [pc, #280]	@ (800c8e0 <HAL_DMA_Abort+0x5f4>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d054      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a44      	ldr	r2, [pc, #272]	@ (800c8e4 <HAL_DMA_Abort+0x5f8>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d04f      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4a43      	ldr	r2, [pc, #268]	@ (800c8e8 <HAL_DMA_Abort+0x5fc>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d04a      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a41      	ldr	r2, [pc, #260]	@ (800c8ec <HAL_DMA_Abort+0x600>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d045      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a40      	ldr	r2, [pc, #256]	@ (800c8f0 <HAL_DMA_Abort+0x604>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d040      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a3e      	ldr	r2, [pc, #248]	@ (800c8f4 <HAL_DMA_Abort+0x608>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d03b      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4a3d      	ldr	r2, [pc, #244]	@ (800c8f8 <HAL_DMA_Abort+0x60c>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d036      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a3b      	ldr	r2, [pc, #236]	@ (800c8fc <HAL_DMA_Abort+0x610>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d031      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a3a      	ldr	r2, [pc, #232]	@ (800c900 <HAL_DMA_Abort+0x614>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d02c      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a38      	ldr	r2, [pc, #224]	@ (800c904 <HAL_DMA_Abort+0x618>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d027      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a37      	ldr	r2, [pc, #220]	@ (800c908 <HAL_DMA_Abort+0x61c>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d022      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a35      	ldr	r2, [pc, #212]	@ (800c90c <HAL_DMA_Abort+0x620>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d01d      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4a34      	ldr	r2, [pc, #208]	@ (800c910 <HAL_DMA_Abort+0x624>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d018      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a32      	ldr	r2, [pc, #200]	@ (800c914 <HAL_DMA_Abort+0x628>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d013      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4a31      	ldr	r2, [pc, #196]	@ (800c918 <HAL_DMA_Abort+0x62c>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d00e      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a2f      	ldr	r2, [pc, #188]	@ (800c91c <HAL_DMA_Abort+0x630>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d009      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a2e      	ldr	r2, [pc, #184]	@ (800c920 <HAL_DMA_Abort+0x634>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d004      	beq.n	800c876 <HAL_DMA_Abort+0x58a>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a2c      	ldr	r2, [pc, #176]	@ (800c924 <HAL_DMA_Abort+0x638>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d101      	bne.n	800c87a <HAL_DMA_Abort+0x58e>
 800c876:	2301      	movs	r3, #1
 800c878:	e000      	b.n	800c87c <HAL_DMA_Abort+0x590>
 800c87a:	2300      	movs	r3, #0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d015      	beq.n	800c8ac <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c888:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00c      	beq.n	800c8ac <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c89c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c8a0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c8aa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3718      	adds	r7, #24
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	40020010 	.word	0x40020010
 800c8cc:	40020028 	.word	0x40020028
 800c8d0:	40020040 	.word	0x40020040
 800c8d4:	40020058 	.word	0x40020058
 800c8d8:	40020070 	.word	0x40020070
 800c8dc:	40020088 	.word	0x40020088
 800c8e0:	400200a0 	.word	0x400200a0
 800c8e4:	400200b8 	.word	0x400200b8
 800c8e8:	40020410 	.word	0x40020410
 800c8ec:	40020428 	.word	0x40020428
 800c8f0:	40020440 	.word	0x40020440
 800c8f4:	40020458 	.word	0x40020458
 800c8f8:	40020470 	.word	0x40020470
 800c8fc:	40020488 	.word	0x40020488
 800c900:	400204a0 	.word	0x400204a0
 800c904:	400204b8 	.word	0x400204b8
 800c908:	58025408 	.word	0x58025408
 800c90c:	5802541c 	.word	0x5802541c
 800c910:	58025430 	.word	0x58025430
 800c914:	58025444 	.word	0x58025444
 800c918:	58025458 	.word	0x58025458
 800c91c:	5802546c 	.word	0x5802546c
 800c920:	58025480 	.word	0x58025480
 800c924:	58025494 	.word	0x58025494

0800c928 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d101      	bne.n	800c93a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800c936:	2301      	movs	r3, #1
 800c938:	e237      	b.n	800cdaa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c940:	b2db      	uxtb	r3, r3
 800c942:	2b02      	cmp	r3, #2
 800c944:	d004      	beq.n	800c950 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2280      	movs	r2, #128	@ 0x80
 800c94a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800c94c:	2301      	movs	r3, #1
 800c94e:	e22c      	b.n	800cdaa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a5c      	ldr	r2, [pc, #368]	@ (800cac8 <HAL_DMA_Abort_IT+0x1a0>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d04a      	beq.n	800c9f0 <HAL_DMA_Abort_IT+0xc8>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a5b      	ldr	r2, [pc, #364]	@ (800cacc <HAL_DMA_Abort_IT+0x1a4>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d045      	beq.n	800c9f0 <HAL_DMA_Abort_IT+0xc8>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a59      	ldr	r2, [pc, #356]	@ (800cad0 <HAL_DMA_Abort_IT+0x1a8>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d040      	beq.n	800c9f0 <HAL_DMA_Abort_IT+0xc8>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4a58      	ldr	r2, [pc, #352]	@ (800cad4 <HAL_DMA_Abort_IT+0x1ac>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d03b      	beq.n	800c9f0 <HAL_DMA_Abort_IT+0xc8>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a56      	ldr	r2, [pc, #344]	@ (800cad8 <HAL_DMA_Abort_IT+0x1b0>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d036      	beq.n	800c9f0 <HAL_DMA_Abort_IT+0xc8>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a55      	ldr	r2, [pc, #340]	@ (800cadc <HAL_DMA_Abort_IT+0x1b4>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d031      	beq.n	800c9f0 <HAL_DMA_Abort_IT+0xc8>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a53      	ldr	r2, [pc, #332]	@ (800cae0 <HAL_DMA_Abort_IT+0x1b8>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d02c      	beq.n	800c9f0 <HAL_DMA_Abort_IT+0xc8>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4a52      	ldr	r2, [pc, #328]	@ (800cae4 <HAL_DMA_Abort_IT+0x1bc>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d027      	beq.n	800c9f0 <HAL_DMA_Abort_IT+0xc8>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a50      	ldr	r2, [pc, #320]	@ (800cae8 <HAL_DMA_Abort_IT+0x1c0>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d022      	beq.n	800c9f0 <HAL_DMA_Abort_IT+0xc8>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4a4f      	ldr	r2, [pc, #316]	@ (800caec <HAL_DMA_Abort_IT+0x1c4>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d01d      	beq.n	800c9f0 <HAL_DMA_Abort_IT+0xc8>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a4d      	ldr	r2, [pc, #308]	@ (800caf0 <HAL_DMA_Abort_IT+0x1c8>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d018      	beq.n	800c9f0 <HAL_DMA_Abort_IT+0xc8>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4a4c      	ldr	r2, [pc, #304]	@ (800caf4 <HAL_DMA_Abort_IT+0x1cc>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d013      	beq.n	800c9f0 <HAL_DMA_Abort_IT+0xc8>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a4a      	ldr	r2, [pc, #296]	@ (800caf8 <HAL_DMA_Abort_IT+0x1d0>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d00e      	beq.n	800c9f0 <HAL_DMA_Abort_IT+0xc8>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a49      	ldr	r2, [pc, #292]	@ (800cafc <HAL_DMA_Abort_IT+0x1d4>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d009      	beq.n	800c9f0 <HAL_DMA_Abort_IT+0xc8>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a47      	ldr	r2, [pc, #284]	@ (800cb00 <HAL_DMA_Abort_IT+0x1d8>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d004      	beq.n	800c9f0 <HAL_DMA_Abort_IT+0xc8>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a46      	ldr	r2, [pc, #280]	@ (800cb04 <HAL_DMA_Abort_IT+0x1dc>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d101      	bne.n	800c9f4 <HAL_DMA_Abort_IT+0xcc>
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e000      	b.n	800c9f6 <HAL_DMA_Abort_IT+0xce>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f000 8086 	beq.w	800cb08 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2204      	movs	r2, #4
 800ca00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a2f      	ldr	r2, [pc, #188]	@ (800cac8 <HAL_DMA_Abort_IT+0x1a0>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d04a      	beq.n	800caa4 <HAL_DMA_Abort_IT+0x17c>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4a2e      	ldr	r2, [pc, #184]	@ (800cacc <HAL_DMA_Abort_IT+0x1a4>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d045      	beq.n	800caa4 <HAL_DMA_Abort_IT+0x17c>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a2c      	ldr	r2, [pc, #176]	@ (800cad0 <HAL_DMA_Abort_IT+0x1a8>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d040      	beq.n	800caa4 <HAL_DMA_Abort_IT+0x17c>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a2b      	ldr	r2, [pc, #172]	@ (800cad4 <HAL_DMA_Abort_IT+0x1ac>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d03b      	beq.n	800caa4 <HAL_DMA_Abort_IT+0x17c>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a29      	ldr	r2, [pc, #164]	@ (800cad8 <HAL_DMA_Abort_IT+0x1b0>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d036      	beq.n	800caa4 <HAL_DMA_Abort_IT+0x17c>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4a28      	ldr	r2, [pc, #160]	@ (800cadc <HAL_DMA_Abort_IT+0x1b4>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d031      	beq.n	800caa4 <HAL_DMA_Abort_IT+0x17c>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4a26      	ldr	r2, [pc, #152]	@ (800cae0 <HAL_DMA_Abort_IT+0x1b8>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d02c      	beq.n	800caa4 <HAL_DMA_Abort_IT+0x17c>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a25      	ldr	r2, [pc, #148]	@ (800cae4 <HAL_DMA_Abort_IT+0x1bc>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d027      	beq.n	800caa4 <HAL_DMA_Abort_IT+0x17c>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a23      	ldr	r2, [pc, #140]	@ (800cae8 <HAL_DMA_Abort_IT+0x1c0>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d022      	beq.n	800caa4 <HAL_DMA_Abort_IT+0x17c>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a22      	ldr	r2, [pc, #136]	@ (800caec <HAL_DMA_Abort_IT+0x1c4>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d01d      	beq.n	800caa4 <HAL_DMA_Abort_IT+0x17c>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4a20      	ldr	r2, [pc, #128]	@ (800caf0 <HAL_DMA_Abort_IT+0x1c8>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d018      	beq.n	800caa4 <HAL_DMA_Abort_IT+0x17c>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a1f      	ldr	r2, [pc, #124]	@ (800caf4 <HAL_DMA_Abort_IT+0x1cc>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d013      	beq.n	800caa4 <HAL_DMA_Abort_IT+0x17c>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a1d      	ldr	r2, [pc, #116]	@ (800caf8 <HAL_DMA_Abort_IT+0x1d0>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d00e      	beq.n	800caa4 <HAL_DMA_Abort_IT+0x17c>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4a1c      	ldr	r2, [pc, #112]	@ (800cafc <HAL_DMA_Abort_IT+0x1d4>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d009      	beq.n	800caa4 <HAL_DMA_Abort_IT+0x17c>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a1a      	ldr	r2, [pc, #104]	@ (800cb00 <HAL_DMA_Abort_IT+0x1d8>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d004      	beq.n	800caa4 <HAL_DMA_Abort_IT+0x17c>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a19      	ldr	r2, [pc, #100]	@ (800cb04 <HAL_DMA_Abort_IT+0x1dc>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d108      	bne.n	800cab6 <HAL_DMA_Abort_IT+0x18e>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f022 0201 	bic.w	r2, r2, #1
 800cab2:	601a      	str	r2, [r3, #0]
 800cab4:	e178      	b.n	800cda8 <HAL_DMA_Abort_IT+0x480>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f022 0201 	bic.w	r2, r2, #1
 800cac4:	601a      	str	r2, [r3, #0]
 800cac6:	e16f      	b.n	800cda8 <HAL_DMA_Abort_IT+0x480>
 800cac8:	40020010 	.word	0x40020010
 800cacc:	40020028 	.word	0x40020028
 800cad0:	40020040 	.word	0x40020040
 800cad4:	40020058 	.word	0x40020058
 800cad8:	40020070 	.word	0x40020070
 800cadc:	40020088 	.word	0x40020088
 800cae0:	400200a0 	.word	0x400200a0
 800cae4:	400200b8 	.word	0x400200b8
 800cae8:	40020410 	.word	0x40020410
 800caec:	40020428 	.word	0x40020428
 800caf0:	40020440 	.word	0x40020440
 800caf4:	40020458 	.word	0x40020458
 800caf8:	40020470 	.word	0x40020470
 800cafc:	40020488 	.word	0x40020488
 800cb00:	400204a0 	.word	0x400204a0
 800cb04:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f022 020e 	bic.w	r2, r2, #14
 800cb16:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a6c      	ldr	r2, [pc, #432]	@ (800ccd0 <HAL_DMA_Abort_IT+0x3a8>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d04a      	beq.n	800cbb8 <HAL_DMA_Abort_IT+0x290>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4a6b      	ldr	r2, [pc, #428]	@ (800ccd4 <HAL_DMA_Abort_IT+0x3ac>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d045      	beq.n	800cbb8 <HAL_DMA_Abort_IT+0x290>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a69      	ldr	r2, [pc, #420]	@ (800ccd8 <HAL_DMA_Abort_IT+0x3b0>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d040      	beq.n	800cbb8 <HAL_DMA_Abort_IT+0x290>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a68      	ldr	r2, [pc, #416]	@ (800ccdc <HAL_DMA_Abort_IT+0x3b4>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d03b      	beq.n	800cbb8 <HAL_DMA_Abort_IT+0x290>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a66      	ldr	r2, [pc, #408]	@ (800cce0 <HAL_DMA_Abort_IT+0x3b8>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d036      	beq.n	800cbb8 <HAL_DMA_Abort_IT+0x290>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4a65      	ldr	r2, [pc, #404]	@ (800cce4 <HAL_DMA_Abort_IT+0x3bc>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d031      	beq.n	800cbb8 <HAL_DMA_Abort_IT+0x290>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a63      	ldr	r2, [pc, #396]	@ (800cce8 <HAL_DMA_Abort_IT+0x3c0>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d02c      	beq.n	800cbb8 <HAL_DMA_Abort_IT+0x290>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a62      	ldr	r2, [pc, #392]	@ (800ccec <HAL_DMA_Abort_IT+0x3c4>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d027      	beq.n	800cbb8 <HAL_DMA_Abort_IT+0x290>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a60      	ldr	r2, [pc, #384]	@ (800ccf0 <HAL_DMA_Abort_IT+0x3c8>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d022      	beq.n	800cbb8 <HAL_DMA_Abort_IT+0x290>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a5f      	ldr	r2, [pc, #380]	@ (800ccf4 <HAL_DMA_Abort_IT+0x3cc>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d01d      	beq.n	800cbb8 <HAL_DMA_Abort_IT+0x290>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a5d      	ldr	r2, [pc, #372]	@ (800ccf8 <HAL_DMA_Abort_IT+0x3d0>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d018      	beq.n	800cbb8 <HAL_DMA_Abort_IT+0x290>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a5c      	ldr	r2, [pc, #368]	@ (800ccfc <HAL_DMA_Abort_IT+0x3d4>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d013      	beq.n	800cbb8 <HAL_DMA_Abort_IT+0x290>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4a5a      	ldr	r2, [pc, #360]	@ (800cd00 <HAL_DMA_Abort_IT+0x3d8>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d00e      	beq.n	800cbb8 <HAL_DMA_Abort_IT+0x290>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4a59      	ldr	r2, [pc, #356]	@ (800cd04 <HAL_DMA_Abort_IT+0x3dc>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d009      	beq.n	800cbb8 <HAL_DMA_Abort_IT+0x290>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a57      	ldr	r2, [pc, #348]	@ (800cd08 <HAL_DMA_Abort_IT+0x3e0>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d004      	beq.n	800cbb8 <HAL_DMA_Abort_IT+0x290>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4a56      	ldr	r2, [pc, #344]	@ (800cd0c <HAL_DMA_Abort_IT+0x3e4>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d108      	bne.n	800cbca <HAL_DMA_Abort_IT+0x2a2>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f022 0201 	bic.w	r2, r2, #1
 800cbc6:	601a      	str	r2, [r3, #0]
 800cbc8:	e007      	b.n	800cbda <HAL_DMA_Abort_IT+0x2b2>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f022 0201 	bic.w	r2, r2, #1
 800cbd8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4a3c      	ldr	r2, [pc, #240]	@ (800ccd0 <HAL_DMA_Abort_IT+0x3a8>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d072      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4a3a      	ldr	r2, [pc, #232]	@ (800ccd4 <HAL_DMA_Abort_IT+0x3ac>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d06d      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a39      	ldr	r2, [pc, #228]	@ (800ccd8 <HAL_DMA_Abort_IT+0x3b0>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d068      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a37      	ldr	r2, [pc, #220]	@ (800ccdc <HAL_DMA_Abort_IT+0x3b4>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d063      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4a36      	ldr	r2, [pc, #216]	@ (800cce0 <HAL_DMA_Abort_IT+0x3b8>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d05e      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a34      	ldr	r2, [pc, #208]	@ (800cce4 <HAL_DMA_Abort_IT+0x3bc>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d059      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a33      	ldr	r2, [pc, #204]	@ (800cce8 <HAL_DMA_Abort_IT+0x3c0>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d054      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4a31      	ldr	r2, [pc, #196]	@ (800ccec <HAL_DMA_Abort_IT+0x3c4>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d04f      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	4a30      	ldr	r2, [pc, #192]	@ (800ccf0 <HAL_DMA_Abort_IT+0x3c8>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d04a      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a2e      	ldr	r2, [pc, #184]	@ (800ccf4 <HAL_DMA_Abort_IT+0x3cc>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d045      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4a2d      	ldr	r2, [pc, #180]	@ (800ccf8 <HAL_DMA_Abort_IT+0x3d0>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d040      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a2b      	ldr	r2, [pc, #172]	@ (800ccfc <HAL_DMA_Abort_IT+0x3d4>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d03b      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4a2a      	ldr	r2, [pc, #168]	@ (800cd00 <HAL_DMA_Abort_IT+0x3d8>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d036      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a28      	ldr	r2, [pc, #160]	@ (800cd04 <HAL_DMA_Abort_IT+0x3dc>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d031      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4a27      	ldr	r2, [pc, #156]	@ (800cd08 <HAL_DMA_Abort_IT+0x3e0>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d02c      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4a25      	ldr	r2, [pc, #148]	@ (800cd0c <HAL_DMA_Abort_IT+0x3e4>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d027      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a24      	ldr	r2, [pc, #144]	@ (800cd10 <HAL_DMA_Abort_IT+0x3e8>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d022      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a22      	ldr	r2, [pc, #136]	@ (800cd14 <HAL_DMA_Abort_IT+0x3ec>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d01d      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a21      	ldr	r2, [pc, #132]	@ (800cd18 <HAL_DMA_Abort_IT+0x3f0>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d018      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a1f      	ldr	r2, [pc, #124]	@ (800cd1c <HAL_DMA_Abort_IT+0x3f4>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d013      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a1e      	ldr	r2, [pc, #120]	@ (800cd20 <HAL_DMA_Abort_IT+0x3f8>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d00e      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a1c      	ldr	r2, [pc, #112]	@ (800cd24 <HAL_DMA_Abort_IT+0x3fc>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d009      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a1b      	ldr	r2, [pc, #108]	@ (800cd28 <HAL_DMA_Abort_IT+0x400>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d004      	beq.n	800ccca <HAL_DMA_Abort_IT+0x3a2>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a19      	ldr	r2, [pc, #100]	@ (800cd2c <HAL_DMA_Abort_IT+0x404>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d132      	bne.n	800cd30 <HAL_DMA_Abort_IT+0x408>
 800ccca:	2301      	movs	r3, #1
 800cccc:	e031      	b.n	800cd32 <HAL_DMA_Abort_IT+0x40a>
 800ccce:	bf00      	nop
 800ccd0:	40020010 	.word	0x40020010
 800ccd4:	40020028 	.word	0x40020028
 800ccd8:	40020040 	.word	0x40020040
 800ccdc:	40020058 	.word	0x40020058
 800cce0:	40020070 	.word	0x40020070
 800cce4:	40020088 	.word	0x40020088
 800cce8:	400200a0 	.word	0x400200a0
 800ccec:	400200b8 	.word	0x400200b8
 800ccf0:	40020410 	.word	0x40020410
 800ccf4:	40020428 	.word	0x40020428
 800ccf8:	40020440 	.word	0x40020440
 800ccfc:	40020458 	.word	0x40020458
 800cd00:	40020470 	.word	0x40020470
 800cd04:	40020488 	.word	0x40020488
 800cd08:	400204a0 	.word	0x400204a0
 800cd0c:	400204b8 	.word	0x400204b8
 800cd10:	58025408 	.word	0x58025408
 800cd14:	5802541c 	.word	0x5802541c
 800cd18:	58025430 	.word	0x58025430
 800cd1c:	58025444 	.word	0x58025444
 800cd20:	58025458 	.word	0x58025458
 800cd24:	5802546c 	.word	0x5802546c
 800cd28:	58025480 	.word	0x58025480
 800cd2c:	58025494 	.word	0x58025494
 800cd30:	2300      	movs	r3, #0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d028      	beq.n	800cd88 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd44:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd4a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd50:	f003 031f 	and.w	r3, r3, #31
 800cd54:	2201      	movs	r2, #1
 800cd56:	409a      	lsls	r2, r3
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800cd64:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d00c      	beq.n	800cd88 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd7c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800cd86:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d003      	beq.n	800cda8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800cda8:	2300      	movs	r3, #0
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3710      	adds	r7, #16
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop

0800cdb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b08a      	sub	sp, #40	@ 0x28
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800cdc0:	4b67      	ldr	r3, [pc, #412]	@ (800cf60 <HAL_DMA_IRQHandler+0x1ac>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a67      	ldr	r2, [pc, #412]	@ (800cf64 <HAL_DMA_IRQHandler+0x1b0>)
 800cdc6:	fba2 2303 	umull	r2, r3, r2, r3
 800cdca:	0a9b      	lsrs	r3, r3, #10
 800cdcc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdd2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdd8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800cdda:	6a3b      	ldr	r3, [r7, #32]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a5f      	ldr	r2, [pc, #380]	@ (800cf68 <HAL_DMA_IRQHandler+0x1b4>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d04a      	beq.n	800ce86 <HAL_DMA_IRQHandler+0xd2>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a5d      	ldr	r2, [pc, #372]	@ (800cf6c <HAL_DMA_IRQHandler+0x1b8>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d045      	beq.n	800ce86 <HAL_DMA_IRQHandler+0xd2>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4a5c      	ldr	r2, [pc, #368]	@ (800cf70 <HAL_DMA_IRQHandler+0x1bc>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d040      	beq.n	800ce86 <HAL_DMA_IRQHandler+0xd2>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a5a      	ldr	r2, [pc, #360]	@ (800cf74 <HAL_DMA_IRQHandler+0x1c0>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d03b      	beq.n	800ce86 <HAL_DMA_IRQHandler+0xd2>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4a59      	ldr	r2, [pc, #356]	@ (800cf78 <HAL_DMA_IRQHandler+0x1c4>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d036      	beq.n	800ce86 <HAL_DMA_IRQHandler+0xd2>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a57      	ldr	r2, [pc, #348]	@ (800cf7c <HAL_DMA_IRQHandler+0x1c8>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d031      	beq.n	800ce86 <HAL_DMA_IRQHandler+0xd2>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4a56      	ldr	r2, [pc, #344]	@ (800cf80 <HAL_DMA_IRQHandler+0x1cc>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d02c      	beq.n	800ce86 <HAL_DMA_IRQHandler+0xd2>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a54      	ldr	r2, [pc, #336]	@ (800cf84 <HAL_DMA_IRQHandler+0x1d0>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d027      	beq.n	800ce86 <HAL_DMA_IRQHandler+0xd2>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a53      	ldr	r2, [pc, #332]	@ (800cf88 <HAL_DMA_IRQHandler+0x1d4>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d022      	beq.n	800ce86 <HAL_DMA_IRQHandler+0xd2>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4a51      	ldr	r2, [pc, #324]	@ (800cf8c <HAL_DMA_IRQHandler+0x1d8>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d01d      	beq.n	800ce86 <HAL_DMA_IRQHandler+0xd2>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4a50      	ldr	r2, [pc, #320]	@ (800cf90 <HAL_DMA_IRQHandler+0x1dc>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d018      	beq.n	800ce86 <HAL_DMA_IRQHandler+0xd2>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a4e      	ldr	r2, [pc, #312]	@ (800cf94 <HAL_DMA_IRQHandler+0x1e0>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d013      	beq.n	800ce86 <HAL_DMA_IRQHandler+0xd2>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a4d      	ldr	r2, [pc, #308]	@ (800cf98 <HAL_DMA_IRQHandler+0x1e4>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d00e      	beq.n	800ce86 <HAL_DMA_IRQHandler+0xd2>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4a4b      	ldr	r2, [pc, #300]	@ (800cf9c <HAL_DMA_IRQHandler+0x1e8>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d009      	beq.n	800ce86 <HAL_DMA_IRQHandler+0xd2>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a4a      	ldr	r2, [pc, #296]	@ (800cfa0 <HAL_DMA_IRQHandler+0x1ec>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d004      	beq.n	800ce86 <HAL_DMA_IRQHandler+0xd2>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4a48      	ldr	r2, [pc, #288]	@ (800cfa4 <HAL_DMA_IRQHandler+0x1f0>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d101      	bne.n	800ce8a <HAL_DMA_IRQHandler+0xd6>
 800ce86:	2301      	movs	r3, #1
 800ce88:	e000      	b.n	800ce8c <HAL_DMA_IRQHandler+0xd8>
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f000 842b 	beq.w	800d6e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce96:	f003 031f 	and.w	r3, r3, #31
 800ce9a:	2208      	movs	r2, #8
 800ce9c:	409a      	lsls	r2, r3
 800ce9e:	69bb      	ldr	r3, [r7, #24]
 800cea0:	4013      	ands	r3, r2
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f000 80a2 	beq.w	800cfec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a2e      	ldr	r2, [pc, #184]	@ (800cf68 <HAL_DMA_IRQHandler+0x1b4>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d04a      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x194>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a2d      	ldr	r2, [pc, #180]	@ (800cf6c <HAL_DMA_IRQHandler+0x1b8>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d045      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x194>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a2b      	ldr	r2, [pc, #172]	@ (800cf70 <HAL_DMA_IRQHandler+0x1bc>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d040      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x194>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a2a      	ldr	r2, [pc, #168]	@ (800cf74 <HAL_DMA_IRQHandler+0x1c0>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d03b      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x194>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a28      	ldr	r2, [pc, #160]	@ (800cf78 <HAL_DMA_IRQHandler+0x1c4>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d036      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x194>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4a27      	ldr	r2, [pc, #156]	@ (800cf7c <HAL_DMA_IRQHandler+0x1c8>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d031      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x194>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a25      	ldr	r2, [pc, #148]	@ (800cf80 <HAL_DMA_IRQHandler+0x1cc>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d02c      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x194>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4a24      	ldr	r2, [pc, #144]	@ (800cf84 <HAL_DMA_IRQHandler+0x1d0>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d027      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x194>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a22      	ldr	r2, [pc, #136]	@ (800cf88 <HAL_DMA_IRQHandler+0x1d4>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d022      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x194>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4a21      	ldr	r2, [pc, #132]	@ (800cf8c <HAL_DMA_IRQHandler+0x1d8>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d01d      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x194>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a1f      	ldr	r2, [pc, #124]	@ (800cf90 <HAL_DMA_IRQHandler+0x1dc>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d018      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x194>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4a1e      	ldr	r2, [pc, #120]	@ (800cf94 <HAL_DMA_IRQHandler+0x1e0>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d013      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x194>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a1c      	ldr	r2, [pc, #112]	@ (800cf98 <HAL_DMA_IRQHandler+0x1e4>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d00e      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x194>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4a1b      	ldr	r2, [pc, #108]	@ (800cf9c <HAL_DMA_IRQHandler+0x1e8>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d009      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x194>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a19      	ldr	r2, [pc, #100]	@ (800cfa0 <HAL_DMA_IRQHandler+0x1ec>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d004      	beq.n	800cf48 <HAL_DMA_IRQHandler+0x194>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a18      	ldr	r2, [pc, #96]	@ (800cfa4 <HAL_DMA_IRQHandler+0x1f0>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d12f      	bne.n	800cfa8 <HAL_DMA_IRQHandler+0x1f4>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f003 0304 	and.w	r3, r3, #4
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	bf14      	ite	ne
 800cf56:	2301      	movne	r3, #1
 800cf58:	2300      	moveq	r3, #0
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	e02e      	b.n	800cfbc <HAL_DMA_IRQHandler+0x208>
 800cf5e:	bf00      	nop
 800cf60:	24000004 	.word	0x24000004
 800cf64:	1b4e81b5 	.word	0x1b4e81b5
 800cf68:	40020010 	.word	0x40020010
 800cf6c:	40020028 	.word	0x40020028
 800cf70:	40020040 	.word	0x40020040
 800cf74:	40020058 	.word	0x40020058
 800cf78:	40020070 	.word	0x40020070
 800cf7c:	40020088 	.word	0x40020088
 800cf80:	400200a0 	.word	0x400200a0
 800cf84:	400200b8 	.word	0x400200b8
 800cf88:	40020410 	.word	0x40020410
 800cf8c:	40020428 	.word	0x40020428
 800cf90:	40020440 	.word	0x40020440
 800cf94:	40020458 	.word	0x40020458
 800cf98:	40020470 	.word	0x40020470
 800cf9c:	40020488 	.word	0x40020488
 800cfa0:	400204a0 	.word	0x400204a0
 800cfa4:	400204b8 	.word	0x400204b8
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f003 0308 	and.w	r3, r3, #8
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	bf14      	ite	ne
 800cfb6:	2301      	movne	r3, #1
 800cfb8:	2300      	moveq	r3, #0
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d015      	beq.n	800cfec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f022 0204 	bic.w	r2, r2, #4
 800cfce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfd4:	f003 031f 	and.w	r3, r3, #31
 800cfd8:	2208      	movs	r2, #8
 800cfda:	409a      	lsls	r2, r3
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfe4:	f043 0201 	orr.w	r2, r3, #1
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cff0:	f003 031f 	and.w	r3, r3, #31
 800cff4:	69ba      	ldr	r2, [r7, #24]
 800cff6:	fa22 f303 	lsr.w	r3, r2, r3
 800cffa:	f003 0301 	and.w	r3, r3, #1
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d06e      	beq.n	800d0e0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4a69      	ldr	r2, [pc, #420]	@ (800d1ac <HAL_DMA_IRQHandler+0x3f8>)
 800d008:	4293      	cmp	r3, r2
 800d00a:	d04a      	beq.n	800d0a2 <HAL_DMA_IRQHandler+0x2ee>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a67      	ldr	r2, [pc, #412]	@ (800d1b0 <HAL_DMA_IRQHandler+0x3fc>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d045      	beq.n	800d0a2 <HAL_DMA_IRQHandler+0x2ee>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4a66      	ldr	r2, [pc, #408]	@ (800d1b4 <HAL_DMA_IRQHandler+0x400>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d040      	beq.n	800d0a2 <HAL_DMA_IRQHandler+0x2ee>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a64      	ldr	r2, [pc, #400]	@ (800d1b8 <HAL_DMA_IRQHandler+0x404>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d03b      	beq.n	800d0a2 <HAL_DMA_IRQHandler+0x2ee>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4a63      	ldr	r2, [pc, #396]	@ (800d1bc <HAL_DMA_IRQHandler+0x408>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d036      	beq.n	800d0a2 <HAL_DMA_IRQHandler+0x2ee>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4a61      	ldr	r2, [pc, #388]	@ (800d1c0 <HAL_DMA_IRQHandler+0x40c>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d031      	beq.n	800d0a2 <HAL_DMA_IRQHandler+0x2ee>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4a60      	ldr	r2, [pc, #384]	@ (800d1c4 <HAL_DMA_IRQHandler+0x410>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d02c      	beq.n	800d0a2 <HAL_DMA_IRQHandler+0x2ee>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a5e      	ldr	r2, [pc, #376]	@ (800d1c8 <HAL_DMA_IRQHandler+0x414>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d027      	beq.n	800d0a2 <HAL_DMA_IRQHandler+0x2ee>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a5d      	ldr	r2, [pc, #372]	@ (800d1cc <HAL_DMA_IRQHandler+0x418>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d022      	beq.n	800d0a2 <HAL_DMA_IRQHandler+0x2ee>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a5b      	ldr	r2, [pc, #364]	@ (800d1d0 <HAL_DMA_IRQHandler+0x41c>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d01d      	beq.n	800d0a2 <HAL_DMA_IRQHandler+0x2ee>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a5a      	ldr	r2, [pc, #360]	@ (800d1d4 <HAL_DMA_IRQHandler+0x420>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d018      	beq.n	800d0a2 <HAL_DMA_IRQHandler+0x2ee>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a58      	ldr	r2, [pc, #352]	@ (800d1d8 <HAL_DMA_IRQHandler+0x424>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d013      	beq.n	800d0a2 <HAL_DMA_IRQHandler+0x2ee>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4a57      	ldr	r2, [pc, #348]	@ (800d1dc <HAL_DMA_IRQHandler+0x428>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d00e      	beq.n	800d0a2 <HAL_DMA_IRQHandler+0x2ee>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a55      	ldr	r2, [pc, #340]	@ (800d1e0 <HAL_DMA_IRQHandler+0x42c>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d009      	beq.n	800d0a2 <HAL_DMA_IRQHandler+0x2ee>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4a54      	ldr	r2, [pc, #336]	@ (800d1e4 <HAL_DMA_IRQHandler+0x430>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d004      	beq.n	800d0a2 <HAL_DMA_IRQHandler+0x2ee>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a52      	ldr	r2, [pc, #328]	@ (800d1e8 <HAL_DMA_IRQHandler+0x434>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d10a      	bne.n	800d0b8 <HAL_DMA_IRQHandler+0x304>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	695b      	ldr	r3, [r3, #20]
 800d0a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	bf14      	ite	ne
 800d0b0:	2301      	movne	r3, #1
 800d0b2:	2300      	moveq	r3, #0
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	e003      	b.n	800d0c0 <HAL_DMA_IRQHandler+0x30c>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	2300      	movs	r3, #0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00d      	beq.n	800d0e0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0c8:	f003 031f 	and.w	r3, r3, #31
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	409a      	lsls	r2, r3
 800d0d0:	6a3b      	ldr	r3, [r7, #32]
 800d0d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0d8:	f043 0202 	orr.w	r2, r3, #2
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0e4:	f003 031f 	and.w	r3, r3, #31
 800d0e8:	2204      	movs	r2, #4
 800d0ea:	409a      	lsls	r2, r3
 800d0ec:	69bb      	ldr	r3, [r7, #24]
 800d0ee:	4013      	ands	r3, r2
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f000 808f 	beq.w	800d214 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	4a2c      	ldr	r2, [pc, #176]	@ (800d1ac <HAL_DMA_IRQHandler+0x3f8>)
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	d04a      	beq.n	800d196 <HAL_DMA_IRQHandler+0x3e2>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a2a      	ldr	r2, [pc, #168]	@ (800d1b0 <HAL_DMA_IRQHandler+0x3fc>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d045      	beq.n	800d196 <HAL_DMA_IRQHandler+0x3e2>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4a29      	ldr	r2, [pc, #164]	@ (800d1b4 <HAL_DMA_IRQHandler+0x400>)
 800d110:	4293      	cmp	r3, r2
 800d112:	d040      	beq.n	800d196 <HAL_DMA_IRQHandler+0x3e2>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4a27      	ldr	r2, [pc, #156]	@ (800d1b8 <HAL_DMA_IRQHandler+0x404>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d03b      	beq.n	800d196 <HAL_DMA_IRQHandler+0x3e2>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4a26      	ldr	r2, [pc, #152]	@ (800d1bc <HAL_DMA_IRQHandler+0x408>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d036      	beq.n	800d196 <HAL_DMA_IRQHandler+0x3e2>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4a24      	ldr	r2, [pc, #144]	@ (800d1c0 <HAL_DMA_IRQHandler+0x40c>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d031      	beq.n	800d196 <HAL_DMA_IRQHandler+0x3e2>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	4a23      	ldr	r2, [pc, #140]	@ (800d1c4 <HAL_DMA_IRQHandler+0x410>)
 800d138:	4293      	cmp	r3, r2
 800d13a:	d02c      	beq.n	800d196 <HAL_DMA_IRQHandler+0x3e2>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a21      	ldr	r2, [pc, #132]	@ (800d1c8 <HAL_DMA_IRQHandler+0x414>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d027      	beq.n	800d196 <HAL_DMA_IRQHandler+0x3e2>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4a20      	ldr	r2, [pc, #128]	@ (800d1cc <HAL_DMA_IRQHandler+0x418>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d022      	beq.n	800d196 <HAL_DMA_IRQHandler+0x3e2>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4a1e      	ldr	r2, [pc, #120]	@ (800d1d0 <HAL_DMA_IRQHandler+0x41c>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d01d      	beq.n	800d196 <HAL_DMA_IRQHandler+0x3e2>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	4a1d      	ldr	r2, [pc, #116]	@ (800d1d4 <HAL_DMA_IRQHandler+0x420>)
 800d160:	4293      	cmp	r3, r2
 800d162:	d018      	beq.n	800d196 <HAL_DMA_IRQHandler+0x3e2>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a1b      	ldr	r2, [pc, #108]	@ (800d1d8 <HAL_DMA_IRQHandler+0x424>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d013      	beq.n	800d196 <HAL_DMA_IRQHandler+0x3e2>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4a1a      	ldr	r2, [pc, #104]	@ (800d1dc <HAL_DMA_IRQHandler+0x428>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d00e      	beq.n	800d196 <HAL_DMA_IRQHandler+0x3e2>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a18      	ldr	r2, [pc, #96]	@ (800d1e0 <HAL_DMA_IRQHandler+0x42c>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d009      	beq.n	800d196 <HAL_DMA_IRQHandler+0x3e2>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4a17      	ldr	r2, [pc, #92]	@ (800d1e4 <HAL_DMA_IRQHandler+0x430>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d004      	beq.n	800d196 <HAL_DMA_IRQHandler+0x3e2>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a15      	ldr	r2, [pc, #84]	@ (800d1e8 <HAL_DMA_IRQHandler+0x434>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d12a      	bne.n	800d1ec <HAL_DMA_IRQHandler+0x438>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f003 0302 	and.w	r3, r3, #2
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	bf14      	ite	ne
 800d1a4:	2301      	movne	r3, #1
 800d1a6:	2300      	moveq	r3, #0
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	e023      	b.n	800d1f4 <HAL_DMA_IRQHandler+0x440>
 800d1ac:	40020010 	.word	0x40020010
 800d1b0:	40020028 	.word	0x40020028
 800d1b4:	40020040 	.word	0x40020040
 800d1b8:	40020058 	.word	0x40020058
 800d1bc:	40020070 	.word	0x40020070
 800d1c0:	40020088 	.word	0x40020088
 800d1c4:	400200a0 	.word	0x400200a0
 800d1c8:	400200b8 	.word	0x400200b8
 800d1cc:	40020410 	.word	0x40020410
 800d1d0:	40020428 	.word	0x40020428
 800d1d4:	40020440 	.word	0x40020440
 800d1d8:	40020458 	.word	0x40020458
 800d1dc:	40020470 	.word	0x40020470
 800d1e0:	40020488 	.word	0x40020488
 800d1e4:	400204a0 	.word	0x400204a0
 800d1e8:	400204b8 	.word	0x400204b8
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d00d      	beq.n	800d214 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1fc:	f003 031f 	and.w	r3, r3, #31
 800d200:	2204      	movs	r2, #4
 800d202:	409a      	lsls	r2, r3
 800d204:	6a3b      	ldr	r3, [r7, #32]
 800d206:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d20c:	f043 0204 	orr.w	r2, r3, #4
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d218:	f003 031f 	and.w	r3, r3, #31
 800d21c:	2210      	movs	r2, #16
 800d21e:	409a      	lsls	r2, r3
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	4013      	ands	r3, r2
 800d224:	2b00      	cmp	r3, #0
 800d226:	f000 80a6 	beq.w	800d376 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	4a85      	ldr	r2, [pc, #532]	@ (800d444 <HAL_DMA_IRQHandler+0x690>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d04a      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x516>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4a83      	ldr	r2, [pc, #524]	@ (800d448 <HAL_DMA_IRQHandler+0x694>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d045      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x516>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4a82      	ldr	r2, [pc, #520]	@ (800d44c <HAL_DMA_IRQHandler+0x698>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d040      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x516>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4a80      	ldr	r2, [pc, #512]	@ (800d450 <HAL_DMA_IRQHandler+0x69c>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d03b      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x516>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a7f      	ldr	r2, [pc, #508]	@ (800d454 <HAL_DMA_IRQHandler+0x6a0>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d036      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x516>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a7d      	ldr	r2, [pc, #500]	@ (800d458 <HAL_DMA_IRQHandler+0x6a4>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d031      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x516>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a7c      	ldr	r2, [pc, #496]	@ (800d45c <HAL_DMA_IRQHandler+0x6a8>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d02c      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x516>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a7a      	ldr	r2, [pc, #488]	@ (800d460 <HAL_DMA_IRQHandler+0x6ac>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d027      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x516>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4a79      	ldr	r2, [pc, #484]	@ (800d464 <HAL_DMA_IRQHandler+0x6b0>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d022      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x516>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a77      	ldr	r2, [pc, #476]	@ (800d468 <HAL_DMA_IRQHandler+0x6b4>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d01d      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x516>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a76      	ldr	r2, [pc, #472]	@ (800d46c <HAL_DMA_IRQHandler+0x6b8>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d018      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x516>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a74      	ldr	r2, [pc, #464]	@ (800d470 <HAL_DMA_IRQHandler+0x6bc>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d013      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x516>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4a73      	ldr	r2, [pc, #460]	@ (800d474 <HAL_DMA_IRQHandler+0x6c0>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d00e      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x516>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a71      	ldr	r2, [pc, #452]	@ (800d478 <HAL_DMA_IRQHandler+0x6c4>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d009      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x516>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a70      	ldr	r2, [pc, #448]	@ (800d47c <HAL_DMA_IRQHandler+0x6c8>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d004      	beq.n	800d2ca <HAL_DMA_IRQHandler+0x516>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a6e      	ldr	r2, [pc, #440]	@ (800d480 <HAL_DMA_IRQHandler+0x6cc>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d10a      	bne.n	800d2e0 <HAL_DMA_IRQHandler+0x52c>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f003 0308 	and.w	r3, r3, #8
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	bf14      	ite	ne
 800d2d8:	2301      	movne	r3, #1
 800d2da:	2300      	moveq	r3, #0
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	e009      	b.n	800d2f4 <HAL_DMA_IRQHandler+0x540>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f003 0304 	and.w	r3, r3, #4
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	bf14      	ite	ne
 800d2ee:	2301      	movne	r3, #1
 800d2f0:	2300      	moveq	r3, #0
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d03e      	beq.n	800d376 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d2fc:	f003 031f 	and.w	r3, r3, #31
 800d300:	2210      	movs	r2, #16
 800d302:	409a      	lsls	r2, r3
 800d304:	6a3b      	ldr	r3, [r7, #32]
 800d306:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d312:	2b00      	cmp	r3, #0
 800d314:	d018      	beq.n	800d348 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d320:	2b00      	cmp	r3, #0
 800d322:	d108      	bne.n	800d336 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d024      	beq.n	800d376 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	4798      	blx	r3
 800d334:	e01f      	b.n	800d376 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d01b      	beq.n	800d376 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	4798      	blx	r3
 800d346:	e016      	b.n	800d376 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d352:	2b00      	cmp	r3, #0
 800d354:	d107      	bne.n	800d366 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f022 0208 	bic.w	r2, r2, #8
 800d364:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d003      	beq.n	800d376 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d37a:	f003 031f 	and.w	r3, r3, #31
 800d37e:	2220      	movs	r2, #32
 800d380:	409a      	lsls	r2, r3
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	4013      	ands	r3, r2
 800d386:	2b00      	cmp	r3, #0
 800d388:	f000 8110 	beq.w	800d5ac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a2c      	ldr	r2, [pc, #176]	@ (800d444 <HAL_DMA_IRQHandler+0x690>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d04a      	beq.n	800d42c <HAL_DMA_IRQHandler+0x678>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4a2b      	ldr	r2, [pc, #172]	@ (800d448 <HAL_DMA_IRQHandler+0x694>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d045      	beq.n	800d42c <HAL_DMA_IRQHandler+0x678>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	4a29      	ldr	r2, [pc, #164]	@ (800d44c <HAL_DMA_IRQHandler+0x698>)
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d040      	beq.n	800d42c <HAL_DMA_IRQHandler+0x678>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4a28      	ldr	r2, [pc, #160]	@ (800d450 <HAL_DMA_IRQHandler+0x69c>)
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d03b      	beq.n	800d42c <HAL_DMA_IRQHandler+0x678>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a26      	ldr	r2, [pc, #152]	@ (800d454 <HAL_DMA_IRQHandler+0x6a0>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d036      	beq.n	800d42c <HAL_DMA_IRQHandler+0x678>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	4a25      	ldr	r2, [pc, #148]	@ (800d458 <HAL_DMA_IRQHandler+0x6a4>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d031      	beq.n	800d42c <HAL_DMA_IRQHandler+0x678>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a23      	ldr	r2, [pc, #140]	@ (800d45c <HAL_DMA_IRQHandler+0x6a8>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d02c      	beq.n	800d42c <HAL_DMA_IRQHandler+0x678>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4a22      	ldr	r2, [pc, #136]	@ (800d460 <HAL_DMA_IRQHandler+0x6ac>)
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	d027      	beq.n	800d42c <HAL_DMA_IRQHandler+0x678>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4a20      	ldr	r2, [pc, #128]	@ (800d464 <HAL_DMA_IRQHandler+0x6b0>)
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d022      	beq.n	800d42c <HAL_DMA_IRQHandler+0x678>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4a1f      	ldr	r2, [pc, #124]	@ (800d468 <HAL_DMA_IRQHandler+0x6b4>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d01d      	beq.n	800d42c <HAL_DMA_IRQHandler+0x678>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4a1d      	ldr	r2, [pc, #116]	@ (800d46c <HAL_DMA_IRQHandler+0x6b8>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d018      	beq.n	800d42c <HAL_DMA_IRQHandler+0x678>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	4a1c      	ldr	r2, [pc, #112]	@ (800d470 <HAL_DMA_IRQHandler+0x6bc>)
 800d400:	4293      	cmp	r3, r2
 800d402:	d013      	beq.n	800d42c <HAL_DMA_IRQHandler+0x678>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a1a      	ldr	r2, [pc, #104]	@ (800d474 <HAL_DMA_IRQHandler+0x6c0>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d00e      	beq.n	800d42c <HAL_DMA_IRQHandler+0x678>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	4a19      	ldr	r2, [pc, #100]	@ (800d478 <HAL_DMA_IRQHandler+0x6c4>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d009      	beq.n	800d42c <HAL_DMA_IRQHandler+0x678>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	4a17      	ldr	r2, [pc, #92]	@ (800d47c <HAL_DMA_IRQHandler+0x6c8>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d004      	beq.n	800d42c <HAL_DMA_IRQHandler+0x678>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a16      	ldr	r2, [pc, #88]	@ (800d480 <HAL_DMA_IRQHandler+0x6cc>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d12b      	bne.n	800d484 <HAL_DMA_IRQHandler+0x6d0>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f003 0310 	and.w	r3, r3, #16
 800d436:	2b00      	cmp	r3, #0
 800d438:	bf14      	ite	ne
 800d43a:	2301      	movne	r3, #1
 800d43c:	2300      	moveq	r3, #0
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	e02a      	b.n	800d498 <HAL_DMA_IRQHandler+0x6e4>
 800d442:	bf00      	nop
 800d444:	40020010 	.word	0x40020010
 800d448:	40020028 	.word	0x40020028
 800d44c:	40020040 	.word	0x40020040
 800d450:	40020058 	.word	0x40020058
 800d454:	40020070 	.word	0x40020070
 800d458:	40020088 	.word	0x40020088
 800d45c:	400200a0 	.word	0x400200a0
 800d460:	400200b8 	.word	0x400200b8
 800d464:	40020410 	.word	0x40020410
 800d468:	40020428 	.word	0x40020428
 800d46c:	40020440 	.word	0x40020440
 800d470:	40020458 	.word	0x40020458
 800d474:	40020470 	.word	0x40020470
 800d478:	40020488 	.word	0x40020488
 800d47c:	400204a0 	.word	0x400204a0
 800d480:	400204b8 	.word	0x400204b8
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f003 0302 	and.w	r3, r3, #2
 800d48e:	2b00      	cmp	r3, #0
 800d490:	bf14      	ite	ne
 800d492:	2301      	movne	r3, #1
 800d494:	2300      	moveq	r3, #0
 800d496:	b2db      	uxtb	r3, r3
 800d498:	2b00      	cmp	r3, #0
 800d49a:	f000 8087 	beq.w	800d5ac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4a2:	f003 031f 	and.w	r3, r3, #31
 800d4a6:	2220      	movs	r2, #32
 800d4a8:	409a      	lsls	r2, r3
 800d4aa:	6a3b      	ldr	r3, [r7, #32]
 800d4ac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	2b04      	cmp	r3, #4
 800d4b8:	d139      	bne.n	800d52e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	681a      	ldr	r2, [r3, #0]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f022 0216 	bic.w	r2, r2, #22
 800d4c8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	695a      	ldr	r2, [r3, #20]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d4d8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d103      	bne.n	800d4ea <HAL_DMA_IRQHandler+0x736>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d007      	beq.n	800d4fa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f022 0208 	bic.w	r2, r2, #8
 800d4f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4fe:	f003 031f 	and.w	r3, r3, #31
 800d502:	223f      	movs	r2, #63	@ 0x3f
 800d504:	409a      	lsls	r2, r3
 800d506:	6a3b      	ldr	r3, [r7, #32]
 800d508:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2201      	movs	r2, #1
 800d50e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2200      	movs	r2, #0
 800d516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d51e:	2b00      	cmp	r3, #0
 800d520:	f000 834a 	beq.w	800dbb8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	4798      	blx	r3
          }
          return;
 800d52c:	e344      	b.n	800dbb8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d018      	beq.n	800d56e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d546:	2b00      	cmp	r3, #0
 800d548:	d108      	bne.n	800d55c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d02c      	beq.n	800d5ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	4798      	blx	r3
 800d55a:	e027      	b.n	800d5ac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d560:	2b00      	cmp	r3, #0
 800d562:	d023      	beq.n	800d5ac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	4798      	blx	r3
 800d56c:	e01e      	b.n	800d5ac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d10f      	bne.n	800d59c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f022 0210 	bic.w	r2, r2, #16
 800d58a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2201      	movs	r2, #1
 800d590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2200      	movs	r2, #0
 800d598:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d003      	beq.n	800d5ac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	f000 8306 	beq.w	800dbc2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5ba:	f003 0301 	and.w	r3, r3, #1
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	f000 8088 	beq.w	800d6d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2204      	movs	r2, #4
 800d5c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4a7a      	ldr	r2, [pc, #488]	@ (800d7bc <HAL_DMA_IRQHandler+0xa08>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d04a      	beq.n	800d66c <HAL_DMA_IRQHandler+0x8b8>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a79      	ldr	r2, [pc, #484]	@ (800d7c0 <HAL_DMA_IRQHandler+0xa0c>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d045      	beq.n	800d66c <HAL_DMA_IRQHandler+0x8b8>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a77      	ldr	r2, [pc, #476]	@ (800d7c4 <HAL_DMA_IRQHandler+0xa10>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d040      	beq.n	800d66c <HAL_DMA_IRQHandler+0x8b8>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4a76      	ldr	r2, [pc, #472]	@ (800d7c8 <HAL_DMA_IRQHandler+0xa14>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d03b      	beq.n	800d66c <HAL_DMA_IRQHandler+0x8b8>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	4a74      	ldr	r2, [pc, #464]	@ (800d7cc <HAL_DMA_IRQHandler+0xa18>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d036      	beq.n	800d66c <HAL_DMA_IRQHandler+0x8b8>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	4a73      	ldr	r2, [pc, #460]	@ (800d7d0 <HAL_DMA_IRQHandler+0xa1c>)
 800d604:	4293      	cmp	r3, r2
 800d606:	d031      	beq.n	800d66c <HAL_DMA_IRQHandler+0x8b8>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4a71      	ldr	r2, [pc, #452]	@ (800d7d4 <HAL_DMA_IRQHandler+0xa20>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d02c      	beq.n	800d66c <HAL_DMA_IRQHandler+0x8b8>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a70      	ldr	r2, [pc, #448]	@ (800d7d8 <HAL_DMA_IRQHandler+0xa24>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d027      	beq.n	800d66c <HAL_DMA_IRQHandler+0x8b8>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a6e      	ldr	r2, [pc, #440]	@ (800d7dc <HAL_DMA_IRQHandler+0xa28>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d022      	beq.n	800d66c <HAL_DMA_IRQHandler+0x8b8>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4a6d      	ldr	r2, [pc, #436]	@ (800d7e0 <HAL_DMA_IRQHandler+0xa2c>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d01d      	beq.n	800d66c <HAL_DMA_IRQHandler+0x8b8>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a6b      	ldr	r2, [pc, #428]	@ (800d7e4 <HAL_DMA_IRQHandler+0xa30>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d018      	beq.n	800d66c <HAL_DMA_IRQHandler+0x8b8>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4a6a      	ldr	r2, [pc, #424]	@ (800d7e8 <HAL_DMA_IRQHandler+0xa34>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d013      	beq.n	800d66c <HAL_DMA_IRQHandler+0x8b8>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4a68      	ldr	r2, [pc, #416]	@ (800d7ec <HAL_DMA_IRQHandler+0xa38>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d00e      	beq.n	800d66c <HAL_DMA_IRQHandler+0x8b8>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4a67      	ldr	r2, [pc, #412]	@ (800d7f0 <HAL_DMA_IRQHandler+0xa3c>)
 800d654:	4293      	cmp	r3, r2
 800d656:	d009      	beq.n	800d66c <HAL_DMA_IRQHandler+0x8b8>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	4a65      	ldr	r2, [pc, #404]	@ (800d7f4 <HAL_DMA_IRQHandler+0xa40>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	d004      	beq.n	800d66c <HAL_DMA_IRQHandler+0x8b8>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	4a64      	ldr	r2, [pc, #400]	@ (800d7f8 <HAL_DMA_IRQHandler+0xa44>)
 800d668:	4293      	cmp	r3, r2
 800d66a:	d108      	bne.n	800d67e <HAL_DMA_IRQHandler+0x8ca>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f022 0201 	bic.w	r2, r2, #1
 800d67a:	601a      	str	r2, [r3, #0]
 800d67c:	e007      	b.n	800d68e <HAL_DMA_IRQHandler+0x8da>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f022 0201 	bic.w	r2, r2, #1
 800d68c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	3301      	adds	r3, #1
 800d692:	60fb      	str	r3, [r7, #12]
 800d694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d696:	429a      	cmp	r2, r3
 800d698:	d307      	bcc.n	800d6aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f003 0301 	and.w	r3, r3, #1
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d1f2      	bne.n	800d68e <HAL_DMA_IRQHandler+0x8da>
 800d6a8:	e000      	b.n	800d6ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 800d6aa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	f003 0301 	and.w	r3, r3, #1
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d004      	beq.n	800d6c4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2203      	movs	r2, #3
 800d6be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800d6c2:	e003      	b.n	800d6cc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	f000 8272 	beq.w	800dbc2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	4798      	blx	r3
 800d6e6:	e26c      	b.n	800dbc2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4a43      	ldr	r2, [pc, #268]	@ (800d7fc <HAL_DMA_IRQHandler+0xa48>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d022      	beq.n	800d738 <HAL_DMA_IRQHandler+0x984>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a42      	ldr	r2, [pc, #264]	@ (800d800 <HAL_DMA_IRQHandler+0xa4c>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d01d      	beq.n	800d738 <HAL_DMA_IRQHandler+0x984>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a40      	ldr	r2, [pc, #256]	@ (800d804 <HAL_DMA_IRQHandler+0xa50>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d018      	beq.n	800d738 <HAL_DMA_IRQHandler+0x984>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a3f      	ldr	r2, [pc, #252]	@ (800d808 <HAL_DMA_IRQHandler+0xa54>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d013      	beq.n	800d738 <HAL_DMA_IRQHandler+0x984>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4a3d      	ldr	r2, [pc, #244]	@ (800d80c <HAL_DMA_IRQHandler+0xa58>)
 800d716:	4293      	cmp	r3, r2
 800d718:	d00e      	beq.n	800d738 <HAL_DMA_IRQHandler+0x984>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4a3c      	ldr	r2, [pc, #240]	@ (800d810 <HAL_DMA_IRQHandler+0xa5c>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d009      	beq.n	800d738 <HAL_DMA_IRQHandler+0x984>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4a3a      	ldr	r2, [pc, #232]	@ (800d814 <HAL_DMA_IRQHandler+0xa60>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d004      	beq.n	800d738 <HAL_DMA_IRQHandler+0x984>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4a39      	ldr	r2, [pc, #228]	@ (800d818 <HAL_DMA_IRQHandler+0xa64>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d101      	bne.n	800d73c <HAL_DMA_IRQHandler+0x988>
 800d738:	2301      	movs	r3, #1
 800d73a:	e000      	b.n	800d73e <HAL_DMA_IRQHandler+0x98a>
 800d73c:	2300      	movs	r3, #0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	f000 823f 	beq.w	800dbc2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d750:	f003 031f 	and.w	r3, r3, #31
 800d754:	2204      	movs	r2, #4
 800d756:	409a      	lsls	r2, r3
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	4013      	ands	r3, r2
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f000 80cd 	beq.w	800d8fc <HAL_DMA_IRQHandler+0xb48>
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	f003 0304 	and.w	r3, r3, #4
 800d768:	2b00      	cmp	r3, #0
 800d76a:	f000 80c7 	beq.w	800d8fc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d772:	f003 031f 	and.w	r3, r3, #31
 800d776:	2204      	movs	r2, #4
 800d778:	409a      	lsls	r2, r3
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d784:	2b00      	cmp	r3, #0
 800d786:	d049      	beq.n	800d81c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d109      	bne.n	800d7a6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d796:	2b00      	cmp	r3, #0
 800d798:	f000 8210 	beq.w	800dbbc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d7a4:	e20a      	b.n	800dbbc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	f000 8206 	beq.w	800dbbc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d7b8:	e200      	b.n	800dbbc <HAL_DMA_IRQHandler+0xe08>
 800d7ba:	bf00      	nop
 800d7bc:	40020010 	.word	0x40020010
 800d7c0:	40020028 	.word	0x40020028
 800d7c4:	40020040 	.word	0x40020040
 800d7c8:	40020058 	.word	0x40020058
 800d7cc:	40020070 	.word	0x40020070
 800d7d0:	40020088 	.word	0x40020088
 800d7d4:	400200a0 	.word	0x400200a0
 800d7d8:	400200b8 	.word	0x400200b8
 800d7dc:	40020410 	.word	0x40020410
 800d7e0:	40020428 	.word	0x40020428
 800d7e4:	40020440 	.word	0x40020440
 800d7e8:	40020458 	.word	0x40020458
 800d7ec:	40020470 	.word	0x40020470
 800d7f0:	40020488 	.word	0x40020488
 800d7f4:	400204a0 	.word	0x400204a0
 800d7f8:	400204b8 	.word	0x400204b8
 800d7fc:	58025408 	.word	0x58025408
 800d800:	5802541c 	.word	0x5802541c
 800d804:	58025430 	.word	0x58025430
 800d808:	58025444 	.word	0x58025444
 800d80c:	58025458 	.word	0x58025458
 800d810:	5802546c 	.word	0x5802546c
 800d814:	58025480 	.word	0x58025480
 800d818:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	f003 0320 	and.w	r3, r3, #32
 800d822:	2b00      	cmp	r3, #0
 800d824:	d160      	bne.n	800d8e8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4a7f      	ldr	r2, [pc, #508]	@ (800da28 <HAL_DMA_IRQHandler+0xc74>)
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d04a      	beq.n	800d8c6 <HAL_DMA_IRQHandler+0xb12>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a7d      	ldr	r2, [pc, #500]	@ (800da2c <HAL_DMA_IRQHandler+0xc78>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d045      	beq.n	800d8c6 <HAL_DMA_IRQHandler+0xb12>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4a7c      	ldr	r2, [pc, #496]	@ (800da30 <HAL_DMA_IRQHandler+0xc7c>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d040      	beq.n	800d8c6 <HAL_DMA_IRQHandler+0xb12>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	4a7a      	ldr	r2, [pc, #488]	@ (800da34 <HAL_DMA_IRQHandler+0xc80>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d03b      	beq.n	800d8c6 <HAL_DMA_IRQHandler+0xb12>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	4a79      	ldr	r2, [pc, #484]	@ (800da38 <HAL_DMA_IRQHandler+0xc84>)
 800d854:	4293      	cmp	r3, r2
 800d856:	d036      	beq.n	800d8c6 <HAL_DMA_IRQHandler+0xb12>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4a77      	ldr	r2, [pc, #476]	@ (800da3c <HAL_DMA_IRQHandler+0xc88>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d031      	beq.n	800d8c6 <HAL_DMA_IRQHandler+0xb12>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	4a76      	ldr	r2, [pc, #472]	@ (800da40 <HAL_DMA_IRQHandler+0xc8c>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d02c      	beq.n	800d8c6 <HAL_DMA_IRQHandler+0xb12>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4a74      	ldr	r2, [pc, #464]	@ (800da44 <HAL_DMA_IRQHandler+0xc90>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d027      	beq.n	800d8c6 <HAL_DMA_IRQHandler+0xb12>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4a73      	ldr	r2, [pc, #460]	@ (800da48 <HAL_DMA_IRQHandler+0xc94>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d022      	beq.n	800d8c6 <HAL_DMA_IRQHandler+0xb12>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4a71      	ldr	r2, [pc, #452]	@ (800da4c <HAL_DMA_IRQHandler+0xc98>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d01d      	beq.n	800d8c6 <HAL_DMA_IRQHandler+0xb12>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	4a70      	ldr	r2, [pc, #448]	@ (800da50 <HAL_DMA_IRQHandler+0xc9c>)
 800d890:	4293      	cmp	r3, r2
 800d892:	d018      	beq.n	800d8c6 <HAL_DMA_IRQHandler+0xb12>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a6e      	ldr	r2, [pc, #440]	@ (800da54 <HAL_DMA_IRQHandler+0xca0>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d013      	beq.n	800d8c6 <HAL_DMA_IRQHandler+0xb12>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4a6d      	ldr	r2, [pc, #436]	@ (800da58 <HAL_DMA_IRQHandler+0xca4>)
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	d00e      	beq.n	800d8c6 <HAL_DMA_IRQHandler+0xb12>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a6b      	ldr	r2, [pc, #428]	@ (800da5c <HAL_DMA_IRQHandler+0xca8>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d009      	beq.n	800d8c6 <HAL_DMA_IRQHandler+0xb12>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4a6a      	ldr	r2, [pc, #424]	@ (800da60 <HAL_DMA_IRQHandler+0xcac>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d004      	beq.n	800d8c6 <HAL_DMA_IRQHandler+0xb12>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a68      	ldr	r2, [pc, #416]	@ (800da64 <HAL_DMA_IRQHandler+0xcb0>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d108      	bne.n	800d8d8 <HAL_DMA_IRQHandler+0xb24>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f022 0208 	bic.w	r2, r2, #8
 800d8d4:	601a      	str	r2, [r3, #0]
 800d8d6:	e007      	b.n	800d8e8 <HAL_DMA_IRQHandler+0xb34>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f022 0204 	bic.w	r2, r2, #4
 800d8e6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f000 8165 	beq.w	800dbbc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d8fa:	e15f      	b.n	800dbbc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d900:	f003 031f 	and.w	r3, r3, #31
 800d904:	2202      	movs	r2, #2
 800d906:	409a      	lsls	r2, r3
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	4013      	ands	r3, r2
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	f000 80c5 	beq.w	800da9c <HAL_DMA_IRQHandler+0xce8>
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	f003 0302 	and.w	r3, r3, #2
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f000 80bf 	beq.w	800da9c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d922:	f003 031f 	and.w	r3, r3, #31
 800d926:	2202      	movs	r2, #2
 800d928:	409a      	lsls	r2, r3
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d934:	2b00      	cmp	r3, #0
 800d936:	d018      	beq.n	800d96a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d109      	bne.n	800d956 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d946:	2b00      	cmp	r3, #0
 800d948:	f000 813a 	beq.w	800dbc0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d954:	e134      	b.n	800dbc0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	f000 8130 	beq.w	800dbc0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d968:	e12a      	b.n	800dbc0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	f003 0320 	and.w	r3, r3, #32
 800d970:	2b00      	cmp	r3, #0
 800d972:	f040 8089 	bne.w	800da88 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4a2b      	ldr	r2, [pc, #172]	@ (800da28 <HAL_DMA_IRQHandler+0xc74>)
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d04a      	beq.n	800da16 <HAL_DMA_IRQHandler+0xc62>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4a29      	ldr	r2, [pc, #164]	@ (800da2c <HAL_DMA_IRQHandler+0xc78>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d045      	beq.n	800da16 <HAL_DMA_IRQHandler+0xc62>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	4a28      	ldr	r2, [pc, #160]	@ (800da30 <HAL_DMA_IRQHandler+0xc7c>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d040      	beq.n	800da16 <HAL_DMA_IRQHandler+0xc62>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	4a26      	ldr	r2, [pc, #152]	@ (800da34 <HAL_DMA_IRQHandler+0xc80>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d03b      	beq.n	800da16 <HAL_DMA_IRQHandler+0xc62>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4a25      	ldr	r2, [pc, #148]	@ (800da38 <HAL_DMA_IRQHandler+0xc84>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d036      	beq.n	800da16 <HAL_DMA_IRQHandler+0xc62>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a23      	ldr	r2, [pc, #140]	@ (800da3c <HAL_DMA_IRQHandler+0xc88>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d031      	beq.n	800da16 <HAL_DMA_IRQHandler+0xc62>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	4a22      	ldr	r2, [pc, #136]	@ (800da40 <HAL_DMA_IRQHandler+0xc8c>)
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d02c      	beq.n	800da16 <HAL_DMA_IRQHandler+0xc62>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4a20      	ldr	r2, [pc, #128]	@ (800da44 <HAL_DMA_IRQHandler+0xc90>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d027      	beq.n	800da16 <HAL_DMA_IRQHandler+0xc62>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4a1f      	ldr	r2, [pc, #124]	@ (800da48 <HAL_DMA_IRQHandler+0xc94>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d022      	beq.n	800da16 <HAL_DMA_IRQHandler+0xc62>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4a1d      	ldr	r2, [pc, #116]	@ (800da4c <HAL_DMA_IRQHandler+0xc98>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d01d      	beq.n	800da16 <HAL_DMA_IRQHandler+0xc62>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4a1c      	ldr	r2, [pc, #112]	@ (800da50 <HAL_DMA_IRQHandler+0xc9c>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d018      	beq.n	800da16 <HAL_DMA_IRQHandler+0xc62>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4a1a      	ldr	r2, [pc, #104]	@ (800da54 <HAL_DMA_IRQHandler+0xca0>)
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d013      	beq.n	800da16 <HAL_DMA_IRQHandler+0xc62>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4a19      	ldr	r2, [pc, #100]	@ (800da58 <HAL_DMA_IRQHandler+0xca4>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d00e      	beq.n	800da16 <HAL_DMA_IRQHandler+0xc62>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4a17      	ldr	r2, [pc, #92]	@ (800da5c <HAL_DMA_IRQHandler+0xca8>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d009      	beq.n	800da16 <HAL_DMA_IRQHandler+0xc62>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	4a16      	ldr	r2, [pc, #88]	@ (800da60 <HAL_DMA_IRQHandler+0xcac>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	d004      	beq.n	800da16 <HAL_DMA_IRQHandler+0xc62>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a14      	ldr	r2, [pc, #80]	@ (800da64 <HAL_DMA_IRQHandler+0xcb0>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d128      	bne.n	800da68 <HAL_DMA_IRQHandler+0xcb4>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	681a      	ldr	r2, [r3, #0]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f022 0214 	bic.w	r2, r2, #20
 800da24:	601a      	str	r2, [r3, #0]
 800da26:	e027      	b.n	800da78 <HAL_DMA_IRQHandler+0xcc4>
 800da28:	40020010 	.word	0x40020010
 800da2c:	40020028 	.word	0x40020028
 800da30:	40020040 	.word	0x40020040
 800da34:	40020058 	.word	0x40020058
 800da38:	40020070 	.word	0x40020070
 800da3c:	40020088 	.word	0x40020088
 800da40:	400200a0 	.word	0x400200a0
 800da44:	400200b8 	.word	0x400200b8
 800da48:	40020410 	.word	0x40020410
 800da4c:	40020428 	.word	0x40020428
 800da50:	40020440 	.word	0x40020440
 800da54:	40020458 	.word	0x40020458
 800da58:	40020470 	.word	0x40020470
 800da5c:	40020488 	.word	0x40020488
 800da60:	400204a0 	.word	0x400204a0
 800da64:	400204b8 	.word	0x400204b8
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f022 020a 	bic.w	r2, r2, #10
 800da76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2201      	movs	r2, #1
 800da7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2200      	movs	r2, #0
 800da84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	f000 8097 	beq.w	800dbc0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800da9a:	e091      	b.n	800dbc0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800daa0:	f003 031f 	and.w	r3, r3, #31
 800daa4:	2208      	movs	r2, #8
 800daa6:	409a      	lsls	r2, r3
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	4013      	ands	r3, r2
 800daac:	2b00      	cmp	r3, #0
 800daae:	f000 8088 	beq.w	800dbc2 <HAL_DMA_IRQHandler+0xe0e>
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	f003 0308 	and.w	r3, r3, #8
 800dab8:	2b00      	cmp	r3, #0
 800daba:	f000 8082 	beq.w	800dbc2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4a41      	ldr	r2, [pc, #260]	@ (800dbc8 <HAL_DMA_IRQHandler+0xe14>)
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d04a      	beq.n	800db5e <HAL_DMA_IRQHandler+0xdaa>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a3f      	ldr	r2, [pc, #252]	@ (800dbcc <HAL_DMA_IRQHandler+0xe18>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d045      	beq.n	800db5e <HAL_DMA_IRQHandler+0xdaa>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a3e      	ldr	r2, [pc, #248]	@ (800dbd0 <HAL_DMA_IRQHandler+0xe1c>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d040      	beq.n	800db5e <HAL_DMA_IRQHandler+0xdaa>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4a3c      	ldr	r2, [pc, #240]	@ (800dbd4 <HAL_DMA_IRQHandler+0xe20>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d03b      	beq.n	800db5e <HAL_DMA_IRQHandler+0xdaa>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a3b      	ldr	r2, [pc, #236]	@ (800dbd8 <HAL_DMA_IRQHandler+0xe24>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d036      	beq.n	800db5e <HAL_DMA_IRQHandler+0xdaa>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4a39      	ldr	r2, [pc, #228]	@ (800dbdc <HAL_DMA_IRQHandler+0xe28>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d031      	beq.n	800db5e <HAL_DMA_IRQHandler+0xdaa>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	4a38      	ldr	r2, [pc, #224]	@ (800dbe0 <HAL_DMA_IRQHandler+0xe2c>)
 800db00:	4293      	cmp	r3, r2
 800db02:	d02c      	beq.n	800db5e <HAL_DMA_IRQHandler+0xdaa>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4a36      	ldr	r2, [pc, #216]	@ (800dbe4 <HAL_DMA_IRQHandler+0xe30>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d027      	beq.n	800db5e <HAL_DMA_IRQHandler+0xdaa>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4a35      	ldr	r2, [pc, #212]	@ (800dbe8 <HAL_DMA_IRQHandler+0xe34>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d022      	beq.n	800db5e <HAL_DMA_IRQHandler+0xdaa>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4a33      	ldr	r2, [pc, #204]	@ (800dbec <HAL_DMA_IRQHandler+0xe38>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d01d      	beq.n	800db5e <HAL_DMA_IRQHandler+0xdaa>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4a32      	ldr	r2, [pc, #200]	@ (800dbf0 <HAL_DMA_IRQHandler+0xe3c>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d018      	beq.n	800db5e <HAL_DMA_IRQHandler+0xdaa>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a30      	ldr	r2, [pc, #192]	@ (800dbf4 <HAL_DMA_IRQHandler+0xe40>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d013      	beq.n	800db5e <HAL_DMA_IRQHandler+0xdaa>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4a2f      	ldr	r2, [pc, #188]	@ (800dbf8 <HAL_DMA_IRQHandler+0xe44>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d00e      	beq.n	800db5e <HAL_DMA_IRQHandler+0xdaa>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a2d      	ldr	r2, [pc, #180]	@ (800dbfc <HAL_DMA_IRQHandler+0xe48>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d009      	beq.n	800db5e <HAL_DMA_IRQHandler+0xdaa>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a2c      	ldr	r2, [pc, #176]	@ (800dc00 <HAL_DMA_IRQHandler+0xe4c>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d004      	beq.n	800db5e <HAL_DMA_IRQHandler+0xdaa>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4a2a      	ldr	r2, [pc, #168]	@ (800dc04 <HAL_DMA_IRQHandler+0xe50>)
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d108      	bne.n	800db70 <HAL_DMA_IRQHandler+0xdbc>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f022 021c 	bic.w	r2, r2, #28
 800db6c:	601a      	str	r2, [r3, #0]
 800db6e:	e007      	b.n	800db80 <HAL_DMA_IRQHandler+0xdcc>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f022 020e 	bic.w	r2, r2, #14
 800db7e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db84:	f003 031f 	and.w	r3, r3, #31
 800db88:	2201      	movs	r2, #1
 800db8a:	409a      	lsls	r2, r3
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2201      	movs	r2, #1
 800db94:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2201      	movs	r2, #1
 800db9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2200      	movs	r2, #0
 800dba2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d009      	beq.n	800dbc2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	4798      	blx	r3
 800dbb6:	e004      	b.n	800dbc2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800dbb8:	bf00      	nop
 800dbba:	e002      	b.n	800dbc2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dbbc:	bf00      	nop
 800dbbe:	e000      	b.n	800dbc2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dbc0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800dbc2:	3728      	adds	r7, #40	@ 0x28
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	40020010 	.word	0x40020010
 800dbcc:	40020028 	.word	0x40020028
 800dbd0:	40020040 	.word	0x40020040
 800dbd4:	40020058 	.word	0x40020058
 800dbd8:	40020070 	.word	0x40020070
 800dbdc:	40020088 	.word	0x40020088
 800dbe0:	400200a0 	.word	0x400200a0
 800dbe4:	400200b8 	.word	0x400200b8
 800dbe8:	40020410 	.word	0x40020410
 800dbec:	40020428 	.word	0x40020428
 800dbf0:	40020440 	.word	0x40020440
 800dbf4:	40020458 	.word	0x40020458
 800dbf8:	40020470 	.word	0x40020470
 800dbfc:	40020488 	.word	0x40020488
 800dc00:	400204a0 	.word	0x400204a0
 800dc04:	400204b8 	.word	0x400204b8

0800dc08 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dc16:	b2db      	uxtb	r3, r3
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr

0800dc3c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b087      	sub	sp, #28
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
 800dc48:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc4e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc54:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	4a7f      	ldr	r2, [pc, #508]	@ (800de58 <DMA_SetConfig+0x21c>)
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d072      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4a7d      	ldr	r2, [pc, #500]	@ (800de5c <DMA_SetConfig+0x220>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d06d      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	4a7c      	ldr	r2, [pc, #496]	@ (800de60 <DMA_SetConfig+0x224>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d068      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a7a      	ldr	r2, [pc, #488]	@ (800de64 <DMA_SetConfig+0x228>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d063      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	4a79      	ldr	r2, [pc, #484]	@ (800de68 <DMA_SetConfig+0x22c>)
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d05e      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4a77      	ldr	r2, [pc, #476]	@ (800de6c <DMA_SetConfig+0x230>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d059      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	4a76      	ldr	r2, [pc, #472]	@ (800de70 <DMA_SetConfig+0x234>)
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d054      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a74      	ldr	r2, [pc, #464]	@ (800de74 <DMA_SetConfig+0x238>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d04f      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a73      	ldr	r2, [pc, #460]	@ (800de78 <DMA_SetConfig+0x23c>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d04a      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a71      	ldr	r2, [pc, #452]	@ (800de7c <DMA_SetConfig+0x240>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d045      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	4a70      	ldr	r2, [pc, #448]	@ (800de80 <DMA_SetConfig+0x244>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d040      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	4a6e      	ldr	r2, [pc, #440]	@ (800de84 <DMA_SetConfig+0x248>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d03b      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4a6d      	ldr	r2, [pc, #436]	@ (800de88 <DMA_SetConfig+0x24c>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d036      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a6b      	ldr	r2, [pc, #428]	@ (800de8c <DMA_SetConfig+0x250>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d031      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4a6a      	ldr	r2, [pc, #424]	@ (800de90 <DMA_SetConfig+0x254>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d02c      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a68      	ldr	r2, [pc, #416]	@ (800de94 <DMA_SetConfig+0x258>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d027      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4a67      	ldr	r2, [pc, #412]	@ (800de98 <DMA_SetConfig+0x25c>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d022      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4a65      	ldr	r2, [pc, #404]	@ (800de9c <DMA_SetConfig+0x260>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d01d      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4a64      	ldr	r2, [pc, #400]	@ (800dea0 <DMA_SetConfig+0x264>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d018      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4a62      	ldr	r2, [pc, #392]	@ (800dea4 <DMA_SetConfig+0x268>)
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	d013      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4a61      	ldr	r2, [pc, #388]	@ (800dea8 <DMA_SetConfig+0x26c>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d00e      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a5f      	ldr	r2, [pc, #380]	@ (800deac <DMA_SetConfig+0x270>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d009      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4a5e      	ldr	r2, [pc, #376]	@ (800deb0 <DMA_SetConfig+0x274>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d004      	beq.n	800dd46 <DMA_SetConfig+0x10a>
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4a5c      	ldr	r2, [pc, #368]	@ (800deb4 <DMA_SetConfig+0x278>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d101      	bne.n	800dd4a <DMA_SetConfig+0x10e>
 800dd46:	2301      	movs	r3, #1
 800dd48:	e000      	b.n	800dd4c <DMA_SetConfig+0x110>
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d00d      	beq.n	800dd6c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd54:	68fa      	ldr	r2, [r7, #12]
 800dd56:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800dd58:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d004      	beq.n	800dd6c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd66:	68fa      	ldr	r2, [r7, #12]
 800dd68:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800dd6a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4a39      	ldr	r2, [pc, #228]	@ (800de58 <DMA_SetConfig+0x21c>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d04a      	beq.n	800de0c <DMA_SetConfig+0x1d0>
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4a38      	ldr	r2, [pc, #224]	@ (800de5c <DMA_SetConfig+0x220>)
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d045      	beq.n	800de0c <DMA_SetConfig+0x1d0>
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4a36      	ldr	r2, [pc, #216]	@ (800de60 <DMA_SetConfig+0x224>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d040      	beq.n	800de0c <DMA_SetConfig+0x1d0>
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4a35      	ldr	r2, [pc, #212]	@ (800de64 <DMA_SetConfig+0x228>)
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d03b      	beq.n	800de0c <DMA_SetConfig+0x1d0>
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	4a33      	ldr	r2, [pc, #204]	@ (800de68 <DMA_SetConfig+0x22c>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d036      	beq.n	800de0c <DMA_SetConfig+0x1d0>
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4a32      	ldr	r2, [pc, #200]	@ (800de6c <DMA_SetConfig+0x230>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d031      	beq.n	800de0c <DMA_SetConfig+0x1d0>
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	4a30      	ldr	r2, [pc, #192]	@ (800de70 <DMA_SetConfig+0x234>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d02c      	beq.n	800de0c <DMA_SetConfig+0x1d0>
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	4a2f      	ldr	r2, [pc, #188]	@ (800de74 <DMA_SetConfig+0x238>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d027      	beq.n	800de0c <DMA_SetConfig+0x1d0>
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a2d      	ldr	r2, [pc, #180]	@ (800de78 <DMA_SetConfig+0x23c>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d022      	beq.n	800de0c <DMA_SetConfig+0x1d0>
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4a2c      	ldr	r2, [pc, #176]	@ (800de7c <DMA_SetConfig+0x240>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d01d      	beq.n	800de0c <DMA_SetConfig+0x1d0>
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a2a      	ldr	r2, [pc, #168]	@ (800de80 <DMA_SetConfig+0x244>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d018      	beq.n	800de0c <DMA_SetConfig+0x1d0>
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4a29      	ldr	r2, [pc, #164]	@ (800de84 <DMA_SetConfig+0x248>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d013      	beq.n	800de0c <DMA_SetConfig+0x1d0>
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	4a27      	ldr	r2, [pc, #156]	@ (800de88 <DMA_SetConfig+0x24c>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d00e      	beq.n	800de0c <DMA_SetConfig+0x1d0>
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	4a26      	ldr	r2, [pc, #152]	@ (800de8c <DMA_SetConfig+0x250>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d009      	beq.n	800de0c <DMA_SetConfig+0x1d0>
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4a24      	ldr	r2, [pc, #144]	@ (800de90 <DMA_SetConfig+0x254>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d004      	beq.n	800de0c <DMA_SetConfig+0x1d0>
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4a23      	ldr	r2, [pc, #140]	@ (800de94 <DMA_SetConfig+0x258>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d101      	bne.n	800de10 <DMA_SetConfig+0x1d4>
 800de0c:	2301      	movs	r3, #1
 800de0e:	e000      	b.n	800de12 <DMA_SetConfig+0x1d6>
 800de10:	2300      	movs	r3, #0
 800de12:	2b00      	cmp	r3, #0
 800de14:	d059      	beq.n	800deca <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de1a:	f003 031f 	and.w	r3, r3, #31
 800de1e:	223f      	movs	r2, #63	@ 0x3f
 800de20:	409a      	lsls	r2, r3
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800de34:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	683a      	ldr	r2, [r7, #0]
 800de3c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	689b      	ldr	r3, [r3, #8]
 800de42:	2b40      	cmp	r3, #64	@ 0x40
 800de44:	d138      	bne.n	800deb8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	68ba      	ldr	r2, [r7, #8]
 800de54:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800de56:	e086      	b.n	800df66 <DMA_SetConfig+0x32a>
 800de58:	40020010 	.word	0x40020010
 800de5c:	40020028 	.word	0x40020028
 800de60:	40020040 	.word	0x40020040
 800de64:	40020058 	.word	0x40020058
 800de68:	40020070 	.word	0x40020070
 800de6c:	40020088 	.word	0x40020088
 800de70:	400200a0 	.word	0x400200a0
 800de74:	400200b8 	.word	0x400200b8
 800de78:	40020410 	.word	0x40020410
 800de7c:	40020428 	.word	0x40020428
 800de80:	40020440 	.word	0x40020440
 800de84:	40020458 	.word	0x40020458
 800de88:	40020470 	.word	0x40020470
 800de8c:	40020488 	.word	0x40020488
 800de90:	400204a0 	.word	0x400204a0
 800de94:	400204b8 	.word	0x400204b8
 800de98:	58025408 	.word	0x58025408
 800de9c:	5802541c 	.word	0x5802541c
 800dea0:	58025430 	.word	0x58025430
 800dea4:	58025444 	.word	0x58025444
 800dea8:	58025458 	.word	0x58025458
 800deac:	5802546c 	.word	0x5802546c
 800deb0:	58025480 	.word	0x58025480
 800deb4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	68ba      	ldr	r2, [r7, #8]
 800debe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	687a      	ldr	r2, [r7, #4]
 800dec6:	60da      	str	r2, [r3, #12]
}
 800dec8:	e04d      	b.n	800df66 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	4a29      	ldr	r2, [pc, #164]	@ (800df74 <DMA_SetConfig+0x338>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d022      	beq.n	800df1a <DMA_SetConfig+0x2de>
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a27      	ldr	r2, [pc, #156]	@ (800df78 <DMA_SetConfig+0x33c>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d01d      	beq.n	800df1a <DMA_SetConfig+0x2de>
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4a26      	ldr	r2, [pc, #152]	@ (800df7c <DMA_SetConfig+0x340>)
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d018      	beq.n	800df1a <DMA_SetConfig+0x2de>
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	4a24      	ldr	r2, [pc, #144]	@ (800df80 <DMA_SetConfig+0x344>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d013      	beq.n	800df1a <DMA_SetConfig+0x2de>
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4a23      	ldr	r2, [pc, #140]	@ (800df84 <DMA_SetConfig+0x348>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d00e      	beq.n	800df1a <DMA_SetConfig+0x2de>
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4a21      	ldr	r2, [pc, #132]	@ (800df88 <DMA_SetConfig+0x34c>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d009      	beq.n	800df1a <DMA_SetConfig+0x2de>
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4a20      	ldr	r2, [pc, #128]	@ (800df8c <DMA_SetConfig+0x350>)
 800df0c:	4293      	cmp	r3, r2
 800df0e:	d004      	beq.n	800df1a <DMA_SetConfig+0x2de>
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4a1e      	ldr	r2, [pc, #120]	@ (800df90 <DMA_SetConfig+0x354>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d101      	bne.n	800df1e <DMA_SetConfig+0x2e2>
 800df1a:	2301      	movs	r3, #1
 800df1c:	e000      	b.n	800df20 <DMA_SetConfig+0x2e4>
 800df1e:	2300      	movs	r3, #0
 800df20:	2b00      	cmp	r3, #0
 800df22:	d020      	beq.n	800df66 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df28:	f003 031f 	and.w	r3, r3, #31
 800df2c:	2201      	movs	r2, #1
 800df2e:	409a      	lsls	r2, r3
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	683a      	ldr	r2, [r7, #0]
 800df3a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	689b      	ldr	r3, [r3, #8]
 800df40:	2b40      	cmp	r3, #64	@ 0x40
 800df42:	d108      	bne.n	800df56 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	60da      	str	r2, [r3, #12]
}
 800df54:	e007      	b.n	800df66 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	68ba      	ldr	r2, [r7, #8]
 800df5c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	60da      	str	r2, [r3, #12]
}
 800df66:	bf00      	nop
 800df68:	371c      	adds	r7, #28
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop
 800df74:	58025408 	.word	0x58025408
 800df78:	5802541c 	.word	0x5802541c
 800df7c:	58025430 	.word	0x58025430
 800df80:	58025444 	.word	0x58025444
 800df84:	58025458 	.word	0x58025458
 800df88:	5802546c 	.word	0x5802546c
 800df8c:	58025480 	.word	0x58025480
 800df90:	58025494 	.word	0x58025494

0800df94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800df94:	b480      	push	{r7}
 800df96:	b085      	sub	sp, #20
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4a42      	ldr	r2, [pc, #264]	@ (800e0ac <DMA_CalcBaseAndBitshift+0x118>)
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d04a      	beq.n	800e03c <DMA_CalcBaseAndBitshift+0xa8>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a41      	ldr	r2, [pc, #260]	@ (800e0b0 <DMA_CalcBaseAndBitshift+0x11c>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d045      	beq.n	800e03c <DMA_CalcBaseAndBitshift+0xa8>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4a3f      	ldr	r2, [pc, #252]	@ (800e0b4 <DMA_CalcBaseAndBitshift+0x120>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d040      	beq.n	800e03c <DMA_CalcBaseAndBitshift+0xa8>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4a3e      	ldr	r2, [pc, #248]	@ (800e0b8 <DMA_CalcBaseAndBitshift+0x124>)
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d03b      	beq.n	800e03c <DMA_CalcBaseAndBitshift+0xa8>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4a3c      	ldr	r2, [pc, #240]	@ (800e0bc <DMA_CalcBaseAndBitshift+0x128>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d036      	beq.n	800e03c <DMA_CalcBaseAndBitshift+0xa8>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	4a3b      	ldr	r2, [pc, #236]	@ (800e0c0 <DMA_CalcBaseAndBitshift+0x12c>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d031      	beq.n	800e03c <DMA_CalcBaseAndBitshift+0xa8>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4a39      	ldr	r2, [pc, #228]	@ (800e0c4 <DMA_CalcBaseAndBitshift+0x130>)
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	d02c      	beq.n	800e03c <DMA_CalcBaseAndBitshift+0xa8>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4a38      	ldr	r2, [pc, #224]	@ (800e0c8 <DMA_CalcBaseAndBitshift+0x134>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d027      	beq.n	800e03c <DMA_CalcBaseAndBitshift+0xa8>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4a36      	ldr	r2, [pc, #216]	@ (800e0cc <DMA_CalcBaseAndBitshift+0x138>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d022      	beq.n	800e03c <DMA_CalcBaseAndBitshift+0xa8>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4a35      	ldr	r2, [pc, #212]	@ (800e0d0 <DMA_CalcBaseAndBitshift+0x13c>)
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d01d      	beq.n	800e03c <DMA_CalcBaseAndBitshift+0xa8>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4a33      	ldr	r2, [pc, #204]	@ (800e0d4 <DMA_CalcBaseAndBitshift+0x140>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d018      	beq.n	800e03c <DMA_CalcBaseAndBitshift+0xa8>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	4a32      	ldr	r2, [pc, #200]	@ (800e0d8 <DMA_CalcBaseAndBitshift+0x144>)
 800e010:	4293      	cmp	r3, r2
 800e012:	d013      	beq.n	800e03c <DMA_CalcBaseAndBitshift+0xa8>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	4a30      	ldr	r2, [pc, #192]	@ (800e0dc <DMA_CalcBaseAndBitshift+0x148>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d00e      	beq.n	800e03c <DMA_CalcBaseAndBitshift+0xa8>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	4a2f      	ldr	r2, [pc, #188]	@ (800e0e0 <DMA_CalcBaseAndBitshift+0x14c>)
 800e024:	4293      	cmp	r3, r2
 800e026:	d009      	beq.n	800e03c <DMA_CalcBaseAndBitshift+0xa8>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4a2d      	ldr	r2, [pc, #180]	@ (800e0e4 <DMA_CalcBaseAndBitshift+0x150>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d004      	beq.n	800e03c <DMA_CalcBaseAndBitshift+0xa8>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	4a2c      	ldr	r2, [pc, #176]	@ (800e0e8 <DMA_CalcBaseAndBitshift+0x154>)
 800e038:	4293      	cmp	r3, r2
 800e03a:	d101      	bne.n	800e040 <DMA_CalcBaseAndBitshift+0xac>
 800e03c:	2301      	movs	r3, #1
 800e03e:	e000      	b.n	800e042 <DMA_CalcBaseAndBitshift+0xae>
 800e040:	2300      	movs	r3, #0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d024      	beq.n	800e090 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	3b10      	subs	r3, #16
 800e04e:	4a27      	ldr	r2, [pc, #156]	@ (800e0ec <DMA_CalcBaseAndBitshift+0x158>)
 800e050:	fba2 2303 	umull	r2, r3, r2, r3
 800e054:	091b      	lsrs	r3, r3, #4
 800e056:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f003 0307 	and.w	r3, r3, #7
 800e05e:	4a24      	ldr	r2, [pc, #144]	@ (800e0f0 <DMA_CalcBaseAndBitshift+0x15c>)
 800e060:	5cd3      	ldrb	r3, [r2, r3]
 800e062:	461a      	mov	r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2b03      	cmp	r3, #3
 800e06c:	d908      	bls.n	800e080 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	461a      	mov	r2, r3
 800e074:	4b1f      	ldr	r3, [pc, #124]	@ (800e0f4 <DMA_CalcBaseAndBitshift+0x160>)
 800e076:	4013      	ands	r3, r2
 800e078:	1d1a      	adds	r2, r3, #4
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	659a      	str	r2, [r3, #88]	@ 0x58
 800e07e:	e00d      	b.n	800e09c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	461a      	mov	r2, r3
 800e086:	4b1b      	ldr	r3, [pc, #108]	@ (800e0f4 <DMA_CalcBaseAndBitshift+0x160>)
 800e088:	4013      	ands	r3, r2
 800e08a:	687a      	ldr	r2, [r7, #4]
 800e08c:	6593      	str	r3, [r2, #88]	@ 0x58
 800e08e:	e005      	b.n	800e09c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3714      	adds	r7, #20
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0aa:	4770      	bx	lr
 800e0ac:	40020010 	.word	0x40020010
 800e0b0:	40020028 	.word	0x40020028
 800e0b4:	40020040 	.word	0x40020040
 800e0b8:	40020058 	.word	0x40020058
 800e0bc:	40020070 	.word	0x40020070
 800e0c0:	40020088 	.word	0x40020088
 800e0c4:	400200a0 	.word	0x400200a0
 800e0c8:	400200b8 	.word	0x400200b8
 800e0cc:	40020410 	.word	0x40020410
 800e0d0:	40020428 	.word	0x40020428
 800e0d4:	40020440 	.word	0x40020440
 800e0d8:	40020458 	.word	0x40020458
 800e0dc:	40020470 	.word	0x40020470
 800e0e0:	40020488 	.word	0x40020488
 800e0e4:	400204a0 	.word	0x400204a0
 800e0e8:	400204b8 	.word	0x400204b8
 800e0ec:	aaaaaaab 	.word	0xaaaaaaab
 800e0f0:	0801e9f4 	.word	0x0801e9f4
 800e0f4:	fffffc00 	.word	0xfffffc00

0800e0f8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b085      	sub	sp, #20
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e100:	2300      	movs	r3, #0
 800e102:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	699b      	ldr	r3, [r3, #24]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d120      	bne.n	800e14e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e110:	2b03      	cmp	r3, #3
 800e112:	d858      	bhi.n	800e1c6 <DMA_CheckFifoParam+0xce>
 800e114:	a201      	add	r2, pc, #4	@ (adr r2, 800e11c <DMA_CheckFifoParam+0x24>)
 800e116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e11a:	bf00      	nop
 800e11c:	0800e12d 	.word	0x0800e12d
 800e120:	0800e13f 	.word	0x0800e13f
 800e124:	0800e12d 	.word	0x0800e12d
 800e128:	0800e1c7 	.word	0x0800e1c7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e130:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e134:	2b00      	cmp	r3, #0
 800e136:	d048      	beq.n	800e1ca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800e138:	2301      	movs	r3, #1
 800e13a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e13c:	e045      	b.n	800e1ca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e142:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e146:	d142      	bne.n	800e1ce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800e148:	2301      	movs	r3, #1
 800e14a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e14c:	e03f      	b.n	800e1ce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	699b      	ldr	r3, [r3, #24]
 800e152:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e156:	d123      	bne.n	800e1a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e15c:	2b03      	cmp	r3, #3
 800e15e:	d838      	bhi.n	800e1d2 <DMA_CheckFifoParam+0xda>
 800e160:	a201      	add	r2, pc, #4	@ (adr r2, 800e168 <DMA_CheckFifoParam+0x70>)
 800e162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e166:	bf00      	nop
 800e168:	0800e179 	.word	0x0800e179
 800e16c:	0800e17f 	.word	0x0800e17f
 800e170:	0800e179 	.word	0x0800e179
 800e174:	0800e191 	.word	0x0800e191
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800e178:	2301      	movs	r3, #1
 800e17a:	73fb      	strb	r3, [r7, #15]
        break;
 800e17c:	e030      	b.n	800e1e0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e182:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e186:	2b00      	cmp	r3, #0
 800e188:	d025      	beq.n	800e1d6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800e18a:	2301      	movs	r3, #1
 800e18c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e18e:	e022      	b.n	800e1d6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e194:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e198:	d11f      	bne.n	800e1da <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800e19a:	2301      	movs	r3, #1
 800e19c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e19e:	e01c      	b.n	800e1da <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1a4:	2b02      	cmp	r3, #2
 800e1a6:	d902      	bls.n	800e1ae <DMA_CheckFifoParam+0xb6>
 800e1a8:	2b03      	cmp	r3, #3
 800e1aa:	d003      	beq.n	800e1b4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800e1ac:	e018      	b.n	800e1e0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	73fb      	strb	r3, [r7, #15]
        break;
 800e1b2:	e015      	b.n	800e1e0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00e      	beq.n	800e1de <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	73fb      	strb	r3, [r7, #15]
    break;
 800e1c4:	e00b      	b.n	800e1de <DMA_CheckFifoParam+0xe6>
        break;
 800e1c6:	bf00      	nop
 800e1c8:	e00a      	b.n	800e1e0 <DMA_CheckFifoParam+0xe8>
        break;
 800e1ca:	bf00      	nop
 800e1cc:	e008      	b.n	800e1e0 <DMA_CheckFifoParam+0xe8>
        break;
 800e1ce:	bf00      	nop
 800e1d0:	e006      	b.n	800e1e0 <DMA_CheckFifoParam+0xe8>
        break;
 800e1d2:	bf00      	nop
 800e1d4:	e004      	b.n	800e1e0 <DMA_CheckFifoParam+0xe8>
        break;
 800e1d6:	bf00      	nop
 800e1d8:	e002      	b.n	800e1e0 <DMA_CheckFifoParam+0xe8>
        break;
 800e1da:	bf00      	nop
 800e1dc:	e000      	b.n	800e1e0 <DMA_CheckFifoParam+0xe8>
    break;
 800e1de:	bf00      	nop
    }
  }

  return status;
 800e1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3714      	adds	r7, #20
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ec:	4770      	bx	lr
 800e1ee:	bf00      	nop

0800e1f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b085      	sub	sp, #20
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	4a38      	ldr	r2, [pc, #224]	@ (800e2e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800e204:	4293      	cmp	r3, r2
 800e206:	d022      	beq.n	800e24e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4a36      	ldr	r2, [pc, #216]	@ (800e2e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d01d      	beq.n	800e24e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4a35      	ldr	r2, [pc, #212]	@ (800e2ec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800e218:	4293      	cmp	r3, r2
 800e21a:	d018      	beq.n	800e24e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a33      	ldr	r2, [pc, #204]	@ (800e2f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d013      	beq.n	800e24e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a32      	ldr	r2, [pc, #200]	@ (800e2f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d00e      	beq.n	800e24e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a30      	ldr	r2, [pc, #192]	@ (800e2f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d009      	beq.n	800e24e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	4a2f      	ldr	r2, [pc, #188]	@ (800e2fc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d004      	beq.n	800e24e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a2d      	ldr	r2, [pc, #180]	@ (800e300 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d101      	bne.n	800e252 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800e24e:	2301      	movs	r3, #1
 800e250:	e000      	b.n	800e254 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800e252:	2300      	movs	r3, #0
 800e254:	2b00      	cmp	r3, #0
 800e256:	d01a      	beq.n	800e28e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	3b08      	subs	r3, #8
 800e260:	4a28      	ldr	r2, [pc, #160]	@ (800e304 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800e262:	fba2 2303 	umull	r2, r3, r2, r3
 800e266:	091b      	lsrs	r3, r3, #4
 800e268:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e26a:	68fa      	ldr	r2, [r7, #12]
 800e26c:	4b26      	ldr	r3, [pc, #152]	@ (800e308 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800e26e:	4413      	add	r3, r2
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	461a      	mov	r2, r3
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	4a24      	ldr	r2, [pc, #144]	@ (800e30c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800e27c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	f003 031f 	and.w	r3, r3, #31
 800e284:	2201      	movs	r2, #1
 800e286:	409a      	lsls	r2, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800e28c:	e024      	b.n	800e2d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	b2db      	uxtb	r3, r3
 800e294:	3b10      	subs	r3, #16
 800e296:	4a1e      	ldr	r2, [pc, #120]	@ (800e310 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800e298:	fba2 2303 	umull	r2, r3, r2, r3
 800e29c:	091b      	lsrs	r3, r3, #4
 800e29e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	4a1c      	ldr	r2, [pc, #112]	@ (800e314 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d806      	bhi.n	800e2b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	4a1b      	ldr	r2, [pc, #108]	@ (800e318 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d902      	bls.n	800e2b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	3308      	adds	r3, #8
 800e2b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e2b6:	68fa      	ldr	r2, [r7, #12]
 800e2b8:	4b18      	ldr	r3, [pc, #96]	@ (800e31c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800e2ba:	4413      	add	r3, r2
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	461a      	mov	r2, r3
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	4a16      	ldr	r2, [pc, #88]	@ (800e320 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800e2c8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f003 031f 	and.w	r3, r3, #31
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	409a      	lsls	r2, r3
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800e2d8:	bf00      	nop
 800e2da:	3714      	adds	r7, #20
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr
 800e2e4:	58025408 	.word	0x58025408
 800e2e8:	5802541c 	.word	0x5802541c
 800e2ec:	58025430 	.word	0x58025430
 800e2f0:	58025444 	.word	0x58025444
 800e2f4:	58025458 	.word	0x58025458
 800e2f8:	5802546c 	.word	0x5802546c
 800e2fc:	58025480 	.word	0x58025480
 800e300:	58025494 	.word	0x58025494
 800e304:	cccccccd 	.word	0xcccccccd
 800e308:	16009600 	.word	0x16009600
 800e30c:	58025880 	.word	0x58025880
 800e310:	aaaaaaab 	.word	0xaaaaaaab
 800e314:	400204b8 	.word	0x400204b8
 800e318:	4002040f 	.word	0x4002040f
 800e31c:	10008200 	.word	0x10008200
 800e320:	40020880 	.word	0x40020880

0800e324 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e324:	b480      	push	{r7}
 800e326:	b085      	sub	sp, #20
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	b2db      	uxtb	r3, r3
 800e332:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d04a      	beq.n	800e3d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2b08      	cmp	r3, #8
 800e33e:	d847      	bhi.n	800e3d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4a25      	ldr	r2, [pc, #148]	@ (800e3dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d022      	beq.n	800e390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4a24      	ldr	r2, [pc, #144]	@ (800e3e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800e350:	4293      	cmp	r3, r2
 800e352:	d01d      	beq.n	800e390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4a22      	ldr	r2, [pc, #136]	@ (800e3e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d018      	beq.n	800e390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	4a21      	ldr	r2, [pc, #132]	@ (800e3e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800e364:	4293      	cmp	r3, r2
 800e366:	d013      	beq.n	800e390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a1f      	ldr	r2, [pc, #124]	@ (800e3ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d00e      	beq.n	800e390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	4a1e      	ldr	r2, [pc, #120]	@ (800e3f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800e378:	4293      	cmp	r3, r2
 800e37a:	d009      	beq.n	800e390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4a1c      	ldr	r2, [pc, #112]	@ (800e3f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800e382:	4293      	cmp	r3, r2
 800e384:	d004      	beq.n	800e390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	4a1b      	ldr	r2, [pc, #108]	@ (800e3f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800e38c:	4293      	cmp	r3, r2
 800e38e:	d101      	bne.n	800e394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800e390:	2301      	movs	r3, #1
 800e392:	e000      	b.n	800e396 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800e394:	2300      	movs	r3, #0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d00a      	beq.n	800e3b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e39a:	68fa      	ldr	r2, [r7, #12]
 800e39c:	4b17      	ldr	r3, [pc, #92]	@ (800e3fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800e39e:	4413      	add	r3, r2
 800e3a0:	009b      	lsls	r3, r3, #2
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	4a15      	ldr	r2, [pc, #84]	@ (800e400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800e3ac:	671a      	str	r2, [r3, #112]	@ 0x70
 800e3ae:	e009      	b.n	800e3c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	4b14      	ldr	r3, [pc, #80]	@ (800e404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800e3b4:	4413      	add	r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4a11      	ldr	r2, [pc, #68]	@ (800e408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800e3c2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	3b01      	subs	r3, #1
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	409a      	lsls	r2, r3
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800e3d0:	bf00      	nop
 800e3d2:	3714      	adds	r7, #20
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr
 800e3dc:	58025408 	.word	0x58025408
 800e3e0:	5802541c 	.word	0x5802541c
 800e3e4:	58025430 	.word	0x58025430
 800e3e8:	58025444 	.word	0x58025444
 800e3ec:	58025458 	.word	0x58025458
 800e3f0:	5802546c 	.word	0x5802546c
 800e3f4:	58025480 	.word	0x58025480
 800e3f8:	58025494 	.word	0x58025494
 800e3fc:	1600963f 	.word	0x1600963f
 800e400:	58025940 	.word	0x58025940
 800e404:	1000823f 	.word	0x1000823f
 800e408:	40020940 	.word	0x40020940

0800e40c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b089      	sub	sp, #36	@ 0x24
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e416:	2300      	movs	r3, #0
 800e418:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800e41a:	4b86      	ldr	r3, [pc, #536]	@ (800e634 <HAL_GPIO_Init+0x228>)
 800e41c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e41e:	e18c      	b.n	800e73a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	681a      	ldr	r2, [r3, #0]
 800e424:	2101      	movs	r1, #1
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	fa01 f303 	lsl.w	r3, r1, r3
 800e42c:	4013      	ands	r3, r2
 800e42e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	2b00      	cmp	r3, #0
 800e434:	f000 817e 	beq.w	800e734 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	f003 0303 	and.w	r3, r3, #3
 800e440:	2b01      	cmp	r3, #1
 800e442:	d005      	beq.n	800e450 <HAL_GPIO_Init+0x44>
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	f003 0303 	and.w	r3, r3, #3
 800e44c:	2b02      	cmp	r3, #2
 800e44e:	d130      	bne.n	800e4b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	689b      	ldr	r3, [r3, #8]
 800e454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e456:	69fb      	ldr	r3, [r7, #28]
 800e458:	005b      	lsls	r3, r3, #1
 800e45a:	2203      	movs	r2, #3
 800e45c:	fa02 f303 	lsl.w	r3, r2, r3
 800e460:	43db      	mvns	r3, r3
 800e462:	69ba      	ldr	r2, [r7, #24]
 800e464:	4013      	ands	r3, r2
 800e466:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	68da      	ldr	r2, [r3, #12]
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	005b      	lsls	r3, r3, #1
 800e470:	fa02 f303 	lsl.w	r3, r2, r3
 800e474:	69ba      	ldr	r2, [r7, #24]
 800e476:	4313      	orrs	r3, r2
 800e478:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	69ba      	ldr	r2, [r7, #24]
 800e47e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e486:	2201      	movs	r2, #1
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	fa02 f303 	lsl.w	r3, r2, r3
 800e48e:	43db      	mvns	r3, r3
 800e490:	69ba      	ldr	r2, [r7, #24]
 800e492:	4013      	ands	r3, r2
 800e494:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	091b      	lsrs	r3, r3, #4
 800e49c:	f003 0201 	and.w	r2, r3, #1
 800e4a0:	69fb      	ldr	r3, [r7, #28]
 800e4a2:	fa02 f303 	lsl.w	r3, r2, r3
 800e4a6:	69ba      	ldr	r2, [r7, #24]
 800e4a8:	4313      	orrs	r3, r2
 800e4aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	69ba      	ldr	r2, [r7, #24]
 800e4b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	f003 0303 	and.w	r3, r3, #3
 800e4ba:	2b03      	cmp	r3, #3
 800e4bc:	d017      	beq.n	800e4ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	68db      	ldr	r3, [r3, #12]
 800e4c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	005b      	lsls	r3, r3, #1
 800e4c8:	2203      	movs	r2, #3
 800e4ca:	fa02 f303 	lsl.w	r3, r2, r3
 800e4ce:	43db      	mvns	r3, r3
 800e4d0:	69ba      	ldr	r2, [r7, #24]
 800e4d2:	4013      	ands	r3, r2
 800e4d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	689a      	ldr	r2, [r3, #8]
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	005b      	lsls	r3, r3, #1
 800e4de:	fa02 f303 	lsl.w	r3, r2, r3
 800e4e2:	69ba      	ldr	r2, [r7, #24]
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	69ba      	ldr	r2, [r7, #24]
 800e4ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	f003 0303 	and.w	r3, r3, #3
 800e4f6:	2b02      	cmp	r3, #2
 800e4f8:	d123      	bne.n	800e542 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e4fa:	69fb      	ldr	r3, [r7, #28]
 800e4fc:	08da      	lsrs	r2, r3, #3
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	3208      	adds	r2, #8
 800e502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	f003 0307 	and.w	r3, r3, #7
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	220f      	movs	r2, #15
 800e512:	fa02 f303 	lsl.w	r3, r2, r3
 800e516:	43db      	mvns	r3, r3
 800e518:	69ba      	ldr	r2, [r7, #24]
 800e51a:	4013      	ands	r3, r2
 800e51c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	691a      	ldr	r2, [r3, #16]
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	f003 0307 	and.w	r3, r3, #7
 800e528:	009b      	lsls	r3, r3, #2
 800e52a:	fa02 f303 	lsl.w	r3, r2, r3
 800e52e:	69ba      	ldr	r2, [r7, #24]
 800e530:	4313      	orrs	r3, r2
 800e532:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	08da      	lsrs	r2, r3, #3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	3208      	adds	r2, #8
 800e53c:	69b9      	ldr	r1, [r7, #24]
 800e53e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	005b      	lsls	r3, r3, #1
 800e54c:	2203      	movs	r2, #3
 800e54e:	fa02 f303 	lsl.w	r3, r2, r3
 800e552:	43db      	mvns	r3, r3
 800e554:	69ba      	ldr	r2, [r7, #24]
 800e556:	4013      	ands	r3, r2
 800e558:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	f003 0203 	and.w	r2, r3, #3
 800e562:	69fb      	ldr	r3, [r7, #28]
 800e564:	005b      	lsls	r3, r3, #1
 800e566:	fa02 f303 	lsl.w	r3, r2, r3
 800e56a:	69ba      	ldr	r2, [r7, #24]
 800e56c:	4313      	orrs	r3, r2
 800e56e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	69ba      	ldr	r2, [r7, #24]
 800e574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e57e:	2b00      	cmp	r3, #0
 800e580:	f000 80d8 	beq.w	800e734 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e584:	4b2c      	ldr	r3, [pc, #176]	@ (800e638 <HAL_GPIO_Init+0x22c>)
 800e586:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e58a:	4a2b      	ldr	r2, [pc, #172]	@ (800e638 <HAL_GPIO_Init+0x22c>)
 800e58c:	f043 0302 	orr.w	r3, r3, #2
 800e590:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800e594:	4b28      	ldr	r3, [pc, #160]	@ (800e638 <HAL_GPIO_Init+0x22c>)
 800e596:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e59a:	f003 0302 	and.w	r3, r3, #2
 800e59e:	60fb      	str	r3, [r7, #12]
 800e5a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e5a2:	4a26      	ldr	r2, [pc, #152]	@ (800e63c <HAL_GPIO_Init+0x230>)
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	089b      	lsrs	r3, r3, #2
 800e5a8:	3302      	adds	r3, #2
 800e5aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	f003 0303 	and.w	r3, r3, #3
 800e5b6:	009b      	lsls	r3, r3, #2
 800e5b8:	220f      	movs	r2, #15
 800e5ba:	fa02 f303 	lsl.w	r3, r2, r3
 800e5be:	43db      	mvns	r3, r3
 800e5c0:	69ba      	ldr	r2, [r7, #24]
 800e5c2:	4013      	ands	r3, r2
 800e5c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4a1d      	ldr	r2, [pc, #116]	@ (800e640 <HAL_GPIO_Init+0x234>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d04a      	beq.n	800e664 <HAL_GPIO_Init+0x258>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	4a1c      	ldr	r2, [pc, #112]	@ (800e644 <HAL_GPIO_Init+0x238>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d02b      	beq.n	800e62e <HAL_GPIO_Init+0x222>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	4a1b      	ldr	r2, [pc, #108]	@ (800e648 <HAL_GPIO_Init+0x23c>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d025      	beq.n	800e62a <HAL_GPIO_Init+0x21e>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	4a1a      	ldr	r2, [pc, #104]	@ (800e64c <HAL_GPIO_Init+0x240>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d01f      	beq.n	800e626 <HAL_GPIO_Init+0x21a>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	4a19      	ldr	r2, [pc, #100]	@ (800e650 <HAL_GPIO_Init+0x244>)
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d019      	beq.n	800e622 <HAL_GPIO_Init+0x216>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	4a18      	ldr	r2, [pc, #96]	@ (800e654 <HAL_GPIO_Init+0x248>)
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	d013      	beq.n	800e61e <HAL_GPIO_Init+0x212>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	4a17      	ldr	r2, [pc, #92]	@ (800e658 <HAL_GPIO_Init+0x24c>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d00d      	beq.n	800e61a <HAL_GPIO_Init+0x20e>
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	4a16      	ldr	r2, [pc, #88]	@ (800e65c <HAL_GPIO_Init+0x250>)
 800e602:	4293      	cmp	r3, r2
 800e604:	d007      	beq.n	800e616 <HAL_GPIO_Init+0x20a>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	4a15      	ldr	r2, [pc, #84]	@ (800e660 <HAL_GPIO_Init+0x254>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d101      	bne.n	800e612 <HAL_GPIO_Init+0x206>
 800e60e:	2309      	movs	r3, #9
 800e610:	e029      	b.n	800e666 <HAL_GPIO_Init+0x25a>
 800e612:	230a      	movs	r3, #10
 800e614:	e027      	b.n	800e666 <HAL_GPIO_Init+0x25a>
 800e616:	2307      	movs	r3, #7
 800e618:	e025      	b.n	800e666 <HAL_GPIO_Init+0x25a>
 800e61a:	2306      	movs	r3, #6
 800e61c:	e023      	b.n	800e666 <HAL_GPIO_Init+0x25a>
 800e61e:	2305      	movs	r3, #5
 800e620:	e021      	b.n	800e666 <HAL_GPIO_Init+0x25a>
 800e622:	2304      	movs	r3, #4
 800e624:	e01f      	b.n	800e666 <HAL_GPIO_Init+0x25a>
 800e626:	2303      	movs	r3, #3
 800e628:	e01d      	b.n	800e666 <HAL_GPIO_Init+0x25a>
 800e62a:	2302      	movs	r3, #2
 800e62c:	e01b      	b.n	800e666 <HAL_GPIO_Init+0x25a>
 800e62e:	2301      	movs	r3, #1
 800e630:	e019      	b.n	800e666 <HAL_GPIO_Init+0x25a>
 800e632:	bf00      	nop
 800e634:	58000080 	.word	0x58000080
 800e638:	58024400 	.word	0x58024400
 800e63c:	58000400 	.word	0x58000400
 800e640:	58020000 	.word	0x58020000
 800e644:	58020400 	.word	0x58020400
 800e648:	58020800 	.word	0x58020800
 800e64c:	58020c00 	.word	0x58020c00
 800e650:	58021000 	.word	0x58021000
 800e654:	58021400 	.word	0x58021400
 800e658:	58021800 	.word	0x58021800
 800e65c:	58021c00 	.word	0x58021c00
 800e660:	58022400 	.word	0x58022400
 800e664:	2300      	movs	r3, #0
 800e666:	69fa      	ldr	r2, [r7, #28]
 800e668:	f002 0203 	and.w	r2, r2, #3
 800e66c:	0092      	lsls	r2, r2, #2
 800e66e:	4093      	lsls	r3, r2
 800e670:	69ba      	ldr	r2, [r7, #24]
 800e672:	4313      	orrs	r3, r2
 800e674:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e676:	4938      	ldr	r1, [pc, #224]	@ (800e758 <HAL_GPIO_Init+0x34c>)
 800e678:	69fb      	ldr	r3, [r7, #28]
 800e67a:	089b      	lsrs	r3, r3, #2
 800e67c:	3302      	adds	r3, #2
 800e67e:	69ba      	ldr	r2, [r7, #24]
 800e680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	43db      	mvns	r3, r3
 800e690:	69ba      	ldr	r2, [r7, #24]
 800e692:	4013      	ands	r3, r2
 800e694:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	685b      	ldr	r3, [r3, #4]
 800e69a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d003      	beq.n	800e6aa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800e6a2:	69ba      	ldr	r2, [r7, #24]
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	4313      	orrs	r3, r2
 800e6a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800e6aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e6b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6b6:	685b      	ldr	r3, [r3, #4]
 800e6b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	43db      	mvns	r3, r3
 800e6be:	69ba      	ldr	r2, [r7, #24]
 800e6c0:	4013      	ands	r3, r2
 800e6c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d003      	beq.n	800e6d8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800e6d0:	69ba      	ldr	r2, [r7, #24]
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800e6d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e6dc:	69bb      	ldr	r3, [r7, #24]
 800e6de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	43db      	mvns	r3, r3
 800e6ea:	69ba      	ldr	r2, [r7, #24]
 800e6ec:	4013      	ands	r3, r2
 800e6ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d003      	beq.n	800e704 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800e6fc:	69ba      	ldr	r2, [r7, #24]
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	4313      	orrs	r3, r2
 800e702:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	69ba      	ldr	r2, [r7, #24]
 800e708:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	43db      	mvns	r3, r3
 800e714:	69ba      	ldr	r2, [r7, #24]
 800e716:	4013      	ands	r3, r2
 800e718:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	685b      	ldr	r3, [r3, #4]
 800e71e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e722:	2b00      	cmp	r3, #0
 800e724:	d003      	beq.n	800e72e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800e726:	69ba      	ldr	r2, [r7, #24]
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	4313      	orrs	r3, r2
 800e72c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	69ba      	ldr	r2, [r7, #24]
 800e732:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	3301      	adds	r3, #1
 800e738:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	681a      	ldr	r2, [r3, #0]
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	fa22 f303 	lsr.w	r3, r2, r3
 800e744:	2b00      	cmp	r3, #0
 800e746:	f47f ae6b 	bne.w	800e420 <HAL_GPIO_Init+0x14>
  }
}
 800e74a:	bf00      	nop
 800e74c:	bf00      	nop
 800e74e:	3724      	adds	r7, #36	@ 0x24
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr
 800e758:	58000400 	.word	0x58000400

0800e75c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b085      	sub	sp, #20
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	460b      	mov	r3, r1
 800e766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	691a      	ldr	r2, [r3, #16]
 800e76c:	887b      	ldrh	r3, [r7, #2]
 800e76e:	4013      	ands	r3, r2
 800e770:	2b00      	cmp	r3, #0
 800e772:	d002      	beq.n	800e77a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e774:	2301      	movs	r3, #1
 800e776:	73fb      	strb	r3, [r7, #15]
 800e778:	e001      	b.n	800e77e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e77a:	2300      	movs	r3, #0
 800e77c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e77e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3714      	adds	r7, #20
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b083      	sub	sp, #12
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	460b      	mov	r3, r1
 800e796:	807b      	strh	r3, [r7, #2]
 800e798:	4613      	mov	r3, r2
 800e79a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e79c:	787b      	ldrb	r3, [r7, #1]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d003      	beq.n	800e7aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e7a2:	887a      	ldrh	r2, [r7, #2]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800e7a8:	e003      	b.n	800e7b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e7aa:	887b      	ldrh	r3, [r7, #2]
 800e7ac:	041a      	lsls	r2, r3, #16
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	619a      	str	r2, [r3, #24]
}
 800e7b2:	bf00      	nop
 800e7b4:	370c      	adds	r7, #12
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr

0800e7be <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e7be:	b580      	push	{r7, lr}
 800e7c0:	b082      	sub	sp, #8
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800e7c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e7d0:	88fb      	ldrh	r3, [r7, #6]
 800e7d2:	4013      	ands	r3, r2
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d008      	beq.n	800e7ea <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e7d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e7dc:	88fb      	ldrh	r3, [r7, #6]
 800e7de:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e7e2:	88fb      	ldrh	r3, [r7, #6]
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7f7 fd51 	bl	800628c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800e7ea:	bf00      	nop
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
	...

0800e7f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b082      	sub	sp, #8
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d101      	bne.n	800e806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e802:	2301      	movs	r3, #1
 800e804:	e08b      	b.n	800e91e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d106      	bne.n	800e820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2200      	movs	r2, #0
 800e816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f7f6 fafc 	bl	8004e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2224      	movs	r2, #36	@ 0x24
 800e824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f022 0201 	bic.w	r2, r2, #1
 800e836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	685a      	ldr	r2, [r3, #4]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e844:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	689a      	ldr	r2, [r3, #8]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e854:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	68db      	ldr	r3, [r3, #12]
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	d107      	bne.n	800e86e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	689a      	ldr	r2, [r3, #8]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e86a:	609a      	str	r2, [r3, #8]
 800e86c:	e006      	b.n	800e87c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	689a      	ldr	r2, [r3, #8]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e87a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	68db      	ldr	r3, [r3, #12]
 800e880:	2b02      	cmp	r3, #2
 800e882:	d108      	bne.n	800e896 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	685a      	ldr	r2, [r3, #4]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e892:	605a      	str	r2, [r3, #4]
 800e894:	e007      	b.n	800e8a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	685a      	ldr	r2, [r3, #4]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e8a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	6859      	ldr	r1, [r3, #4]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	4b1d      	ldr	r3, [pc, #116]	@ (800e928 <HAL_I2C_Init+0x134>)
 800e8b2:	430b      	orrs	r3, r1
 800e8b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	68da      	ldr	r2, [r3, #12]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e8c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	691a      	ldr	r2, [r3, #16]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	695b      	ldr	r3, [r3, #20]
 800e8ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	699b      	ldr	r3, [r3, #24]
 800e8d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	430a      	orrs	r2, r1
 800e8de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	69d9      	ldr	r1, [r3, #28]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6a1a      	ldr	r2, [r3, #32]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	430a      	orrs	r2, r1
 800e8ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	681a      	ldr	r2, [r3, #0]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f042 0201 	orr.w	r2, r2, #1
 800e8fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2200      	movs	r2, #0
 800e904:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2220      	movs	r2, #32
 800e90a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2200      	movs	r2, #0
 800e912:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2200      	movs	r2, #0
 800e918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e91c:	2300      	movs	r3, #0
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3708      	adds	r7, #8
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	02008000 	.word	0x02008000

0800e92c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b088      	sub	sp, #32
 800e930:	af02      	add	r7, sp, #8
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	4608      	mov	r0, r1
 800e936:	4611      	mov	r1, r2
 800e938:	461a      	mov	r2, r3
 800e93a:	4603      	mov	r3, r0
 800e93c:	817b      	strh	r3, [r7, #10]
 800e93e:	460b      	mov	r3, r1
 800e940:	813b      	strh	r3, [r7, #8]
 800e942:	4613      	mov	r3, r2
 800e944:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e94c:	b2db      	uxtb	r3, r3
 800e94e:	2b20      	cmp	r3, #32
 800e950:	f040 80f9 	bne.w	800eb46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e954:	6a3b      	ldr	r3, [r7, #32]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d002      	beq.n	800e960 <HAL_I2C_Mem_Write+0x34>
 800e95a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d105      	bne.n	800e96c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e966:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e968:	2301      	movs	r3, #1
 800e96a:	e0ed      	b.n	800eb48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e972:	2b01      	cmp	r3, #1
 800e974:	d101      	bne.n	800e97a <HAL_I2C_Mem_Write+0x4e>
 800e976:	2302      	movs	r3, #2
 800e978:	e0e6      	b.n	800eb48 <HAL_I2C_Mem_Write+0x21c>
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2201      	movs	r2, #1
 800e97e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e982:	f7fa fdbb 	bl	80094fc <HAL_GetTick>
 800e986:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	9300      	str	r3, [sp, #0]
 800e98c:	2319      	movs	r3, #25
 800e98e:	2201      	movs	r2, #1
 800e990:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e994:	68f8      	ldr	r0, [r7, #12]
 800e996:	f002 f818 	bl	80109ca <I2C_WaitOnFlagUntilTimeout>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d001      	beq.n	800e9a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	e0d1      	b.n	800eb48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2221      	movs	r2, #33	@ 0x21
 800e9a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2240      	movs	r2, #64	@ 0x40
 800e9b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	6a3a      	ldr	r2, [r7, #32]
 800e9be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e9c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e9cc:	88f8      	ldrh	r0, [r7, #6]
 800e9ce:	893a      	ldrh	r2, [r7, #8]
 800e9d0:	8979      	ldrh	r1, [r7, #10]
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	9301      	str	r3, [sp, #4]
 800e9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9d8:	9300      	str	r3, [sp, #0]
 800e9da:	4603      	mov	r3, r0
 800e9dc:	68f8      	ldr	r0, [r7, #12]
 800e9de:	f001 f965 	bl	800fcac <I2C_RequestMemoryWrite>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d005      	beq.n	800e9f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e0a9      	b.n	800eb48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	2bff      	cmp	r3, #255	@ 0xff
 800e9fc:	d90e      	bls.n	800ea1c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	22ff      	movs	r2, #255	@ 0xff
 800ea02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea08:	b2da      	uxtb	r2, r3
 800ea0a:	8979      	ldrh	r1, [r7, #10]
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	9300      	str	r3, [sp, #0]
 800ea10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ea14:	68f8      	ldr	r0, [r7, #12]
 800ea16:	f002 f99b 	bl	8010d50 <I2C_TransferConfig>
 800ea1a:	e00f      	b.n	800ea3c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea20:	b29a      	uxth	r2, r3
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea2a:	b2da      	uxtb	r2, r3
 800ea2c:	8979      	ldrh	r1, [r7, #10]
 800ea2e:	2300      	movs	r3, #0
 800ea30:	9300      	str	r3, [sp, #0]
 800ea32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ea36:	68f8      	ldr	r0, [r7, #12]
 800ea38:	f002 f98a 	bl	8010d50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ea3c:	697a      	ldr	r2, [r7, #20]
 800ea3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea40:	68f8      	ldr	r0, [r7, #12]
 800ea42:	f002 f81b 	bl	8010a7c <I2C_WaitOnTXISFlagUntilTimeout>
 800ea46:	4603      	mov	r3, r0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d001      	beq.n	800ea50 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	e07b      	b.n	800eb48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea54:	781a      	ldrb	r2, [r3, #0]
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea60:	1c5a      	adds	r2, r3, #1
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	3b01      	subs	r3, #1
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea78:	3b01      	subs	r3, #1
 800ea7a:	b29a      	uxth	r2, r3
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d034      	beq.n	800eaf4 <HAL_I2C_Mem_Write+0x1c8>
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d130      	bne.n	800eaf4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	9300      	str	r3, [sp, #0]
 800ea96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea98:	2200      	movs	r2, #0
 800ea9a:	2180      	movs	r1, #128	@ 0x80
 800ea9c:	68f8      	ldr	r0, [r7, #12]
 800ea9e:	f001 ff94 	bl	80109ca <I2C_WaitOnFlagUntilTimeout>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d001      	beq.n	800eaac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	e04d      	b.n	800eb48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	2bff      	cmp	r3, #255	@ 0xff
 800eab4:	d90e      	bls.n	800ead4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	22ff      	movs	r2, #255	@ 0xff
 800eaba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eac0:	b2da      	uxtb	r2, r3
 800eac2:	8979      	ldrh	r1, [r7, #10]
 800eac4:	2300      	movs	r3, #0
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f002 f93f 	bl	8010d50 <I2C_TransferConfig>
 800ead2:	e00f      	b.n	800eaf4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ead8:	b29a      	uxth	r2, r3
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eae2:	b2da      	uxtb	r2, r3
 800eae4:	8979      	ldrh	r1, [r7, #10]
 800eae6:	2300      	movs	r3, #0
 800eae8:	9300      	str	r3, [sp, #0]
 800eaea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eaee:	68f8      	ldr	r0, [r7, #12]
 800eaf0:	f002 f92e 	bl	8010d50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d19e      	bne.n	800ea3c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eafe:	697a      	ldr	r2, [r7, #20]
 800eb00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb02:	68f8      	ldr	r0, [r7, #12]
 800eb04:	f002 f801 	bl	8010b0a <I2C_WaitOnSTOPFlagUntilTimeout>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d001      	beq.n	800eb12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800eb0e:	2301      	movs	r3, #1
 800eb10:	e01a      	b.n	800eb48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	2220      	movs	r2, #32
 800eb18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	6859      	ldr	r1, [r3, #4]
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	4b0a      	ldr	r3, [pc, #40]	@ (800eb50 <HAL_I2C_Mem_Write+0x224>)
 800eb26:	400b      	ands	r3, r1
 800eb28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	2220      	movs	r2, #32
 800eb2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2200      	movs	r2, #0
 800eb36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800eb42:	2300      	movs	r3, #0
 800eb44:	e000      	b.n	800eb48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800eb46:	2302      	movs	r3, #2
  }
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3718      	adds	r7, #24
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	fe00e800 	.word	0xfe00e800

0800eb54 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b088      	sub	sp, #32
 800eb58:	af02      	add	r7, sp, #8
 800eb5a:	60f8      	str	r0, [r7, #12]
 800eb5c:	4608      	mov	r0, r1
 800eb5e:	4611      	mov	r1, r2
 800eb60:	461a      	mov	r2, r3
 800eb62:	4603      	mov	r3, r0
 800eb64:	817b      	strh	r3, [r7, #10]
 800eb66:	460b      	mov	r3, r1
 800eb68:	813b      	strh	r3, [r7, #8]
 800eb6a:	4613      	mov	r3, r2
 800eb6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	2b20      	cmp	r3, #32
 800eb78:	f040 80fd 	bne.w	800ed76 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb7c:	6a3b      	ldr	r3, [r7, #32]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d002      	beq.n	800eb88 <HAL_I2C_Mem_Read+0x34>
 800eb82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d105      	bne.n	800eb94 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb8e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800eb90:	2301      	movs	r3, #1
 800eb92:	e0f1      	b.n	800ed78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d101      	bne.n	800eba2 <HAL_I2C_Mem_Read+0x4e>
 800eb9e:	2302      	movs	r3, #2
 800eba0:	e0ea      	b.n	800ed78 <HAL_I2C_Mem_Read+0x224>
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2201      	movs	r2, #1
 800eba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ebaa:	f7fa fca7 	bl	80094fc <HAL_GetTick>
 800ebae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	9300      	str	r3, [sp, #0]
 800ebb4:	2319      	movs	r3, #25
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ebbc:	68f8      	ldr	r0, [r7, #12]
 800ebbe:	f001 ff04 	bl	80109ca <I2C_WaitOnFlagUntilTimeout>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d001      	beq.n	800ebcc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	e0d5      	b.n	800ed78 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2222      	movs	r2, #34	@ 0x22
 800ebd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2240      	movs	r2, #64	@ 0x40
 800ebd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	6a3a      	ldr	r2, [r7, #32]
 800ebe6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ebec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ebf4:	88f8      	ldrh	r0, [r7, #6]
 800ebf6:	893a      	ldrh	r2, [r7, #8]
 800ebf8:	8979      	ldrh	r1, [r7, #10]
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	9301      	str	r3, [sp, #4]
 800ebfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec00:	9300      	str	r3, [sp, #0]
 800ec02:	4603      	mov	r3, r0
 800ec04:	68f8      	ldr	r0, [r7, #12]
 800ec06:	f001 f8a5 	bl	800fd54 <I2C_RequestMemoryRead>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d005      	beq.n	800ec1c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2200      	movs	r2, #0
 800ec14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ec18:	2301      	movs	r3, #1
 800ec1a:	e0ad      	b.n	800ed78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	2bff      	cmp	r3, #255	@ 0xff
 800ec24:	d90e      	bls.n	800ec44 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	22ff      	movs	r2, #255	@ 0xff
 800ec2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	8979      	ldrh	r1, [r7, #10]
 800ec34:	4b52      	ldr	r3, [pc, #328]	@ (800ed80 <HAL_I2C_Mem_Read+0x22c>)
 800ec36:	9300      	str	r3, [sp, #0]
 800ec38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ec3c:	68f8      	ldr	r0, [r7, #12]
 800ec3e:	f002 f887 	bl	8010d50 <I2C_TransferConfig>
 800ec42:	e00f      	b.n	800ec64 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec48:	b29a      	uxth	r2, r3
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec52:	b2da      	uxtb	r2, r3
 800ec54:	8979      	ldrh	r1, [r7, #10]
 800ec56:	4b4a      	ldr	r3, [pc, #296]	@ (800ed80 <HAL_I2C_Mem_Read+0x22c>)
 800ec58:	9300      	str	r3, [sp, #0]
 800ec5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ec5e:	68f8      	ldr	r0, [r7, #12]
 800ec60:	f002 f876 	bl	8010d50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	9300      	str	r3, [sp, #0]
 800ec68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	2104      	movs	r1, #4
 800ec6e:	68f8      	ldr	r0, [r7, #12]
 800ec70:	f001 feab 	bl	80109ca <I2C_WaitOnFlagUntilTimeout>
 800ec74:	4603      	mov	r3, r0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d001      	beq.n	800ec7e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	e07c      	b.n	800ed78 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec88:	b2d2      	uxtb	r2, r2
 800ec8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec90:	1c5a      	adds	r2, r3, #1
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec9a:	3b01      	subs	r3, #1
 800ec9c:	b29a      	uxth	r2, r3
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	3b01      	subs	r3, #1
 800ecaa:	b29a      	uxth	r2, r3
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d034      	beq.n	800ed24 <HAL_I2C_Mem_Read+0x1d0>
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d130      	bne.n	800ed24 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	9300      	str	r3, [sp, #0]
 800ecc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecc8:	2200      	movs	r2, #0
 800ecca:	2180      	movs	r1, #128	@ 0x80
 800eccc:	68f8      	ldr	r0, [r7, #12]
 800ecce:	f001 fe7c 	bl	80109ca <I2C_WaitOnFlagUntilTimeout>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d001      	beq.n	800ecdc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e04d      	b.n	800ed78 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ece0:	b29b      	uxth	r3, r3
 800ece2:	2bff      	cmp	r3, #255	@ 0xff
 800ece4:	d90e      	bls.n	800ed04 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	22ff      	movs	r2, #255	@ 0xff
 800ecea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecf0:	b2da      	uxtb	r2, r3
 800ecf2:	8979      	ldrh	r1, [r7, #10]
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ecfc:	68f8      	ldr	r0, [r7, #12]
 800ecfe:	f002 f827 	bl	8010d50 <I2C_TransferConfig>
 800ed02:	e00f      	b.n	800ed24 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed08:	b29a      	uxth	r2, r3
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed12:	b2da      	uxtb	r2, r3
 800ed14:	8979      	ldrh	r1, [r7, #10]
 800ed16:	2300      	movs	r3, #0
 800ed18:	9300      	str	r3, [sp, #0]
 800ed1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ed1e:	68f8      	ldr	r0, [r7, #12]
 800ed20:	f002 f816 	bl	8010d50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d19a      	bne.n	800ec64 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ed2e:	697a      	ldr	r2, [r7, #20]
 800ed30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed32:	68f8      	ldr	r0, [r7, #12]
 800ed34:	f001 fee9 	bl	8010b0a <I2C_WaitOnSTOPFlagUntilTimeout>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d001      	beq.n	800ed42 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ed3e:	2301      	movs	r3, #1
 800ed40:	e01a      	b.n	800ed78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	2220      	movs	r2, #32
 800ed48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	6859      	ldr	r1, [r3, #4]
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681a      	ldr	r2, [r3, #0]
 800ed54:	4b0b      	ldr	r3, [pc, #44]	@ (800ed84 <HAL_I2C_Mem_Read+0x230>)
 800ed56:	400b      	ands	r3, r1
 800ed58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	2220      	movs	r2, #32
 800ed5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2200      	movs	r2, #0
 800ed66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ed72:	2300      	movs	r3, #0
 800ed74:	e000      	b.n	800ed78 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ed76:	2302      	movs	r3, #2
  }
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3718      	adds	r7, #24
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	80002400 	.word	0x80002400
 800ed84:	fe00e800 	.word	0xfe00e800

0800ed88 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b086      	sub	sp, #24
 800ed8c:	af02      	add	r7, sp, #8
 800ed8e:	60f8      	str	r0, [r7, #12]
 800ed90:	4608      	mov	r0, r1
 800ed92:	4611      	mov	r1, r2
 800ed94:	461a      	mov	r2, r3
 800ed96:	4603      	mov	r3, r0
 800ed98:	817b      	strh	r3, [r7, #10]
 800ed9a:	460b      	mov	r3, r1
 800ed9c:	813b      	strh	r3, [r7, #8]
 800ed9e:	4613      	mov	r3, r2
 800eda0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	2b20      	cmp	r3, #32
 800edac:	d16a      	bne.n	800ee84 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800edae:	69bb      	ldr	r3, [r7, #24]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d002      	beq.n	800edba <HAL_I2C_Mem_Write_IT+0x32>
 800edb4:	8bbb      	ldrh	r3, [r7, #28]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d105      	bne.n	800edc6 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800edc0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800edc2:	2301      	movs	r3, #1
 800edc4:	e05f      	b.n	800ee86 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	699b      	ldr	r3, [r3, #24]
 800edcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800edd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800edd4:	d101      	bne.n	800edda <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800edd6:	2302      	movs	r3, #2
 800edd8:	e055      	b.n	800ee86 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d101      	bne.n	800ede8 <HAL_I2C_Mem_Write_IT+0x60>
 800ede4:	2302      	movs	r3, #2
 800ede6:	e04e      	b.n	800ee86 <HAL_I2C_Mem_Write_IT+0xfe>
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2201      	movs	r2, #1
 800edec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2221      	movs	r2, #33	@ 0x21
 800edf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2240      	movs	r2, #64	@ 0x40
 800edfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	2200      	movs	r2, #0
 800ee04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	69ba      	ldr	r2, [r7, #24]
 800ee10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	8bba      	ldrh	r2, [r7, #28]
 800ee16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	4a1d      	ldr	r2, [pc, #116]	@ (800ee90 <HAL_I2C_Mem_Write_IT+0x108>)
 800ee1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	4a1c      	ldr	r2, [pc, #112]	@ (800ee94 <HAL_I2C_Mem_Write_IT+0x10c>)
 800ee22:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800ee24:	897a      	ldrh	r2, [r7, #10]
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ee2a:	88fb      	ldrh	r3, [r7, #6]
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d109      	bne.n	800ee44 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ee30:	893b      	ldrh	r3, [r7, #8]
 800ee32:	b2da      	uxtb	r2, r3
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ee40:	651a      	str	r2, [r3, #80]	@ 0x50
 800ee42:	e00b      	b.n	800ee5c <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ee44:	893b      	ldrh	r3, [r7, #8]
 800ee46:	0a1b      	lsrs	r3, r3, #8
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	b2da      	uxtb	r2, r3
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800ee52:	893b      	ldrh	r3, [r7, #8]
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	461a      	mov	r2, r3
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ee5c:	88fb      	ldrh	r3, [r7, #6]
 800ee5e:	b2da      	uxtb	r2, r3
 800ee60:	8979      	ldrh	r1, [r7, #10]
 800ee62:	4b0d      	ldr	r3, [pc, #52]	@ (800ee98 <HAL_I2C_Mem_Write_IT+0x110>)
 800ee64:	9300      	str	r3, [sp, #0]
 800ee66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ee6a:	68f8      	ldr	r0, [r7, #12]
 800ee6c:	f001 ff70 	bl	8010d50 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2200      	movs	r2, #0
 800ee74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ee78:	2101      	movs	r1, #1
 800ee7a:	68f8      	ldr	r0, [r7, #12]
 800ee7c:	f001 ff9a 	bl	8010db4 <I2C_Enable_IRQ>

    return HAL_OK;
 800ee80:	2300      	movs	r3, #0
 800ee82:	e000      	b.n	800ee86 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800ee84:	2302      	movs	r3, #2
  }
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3710      	adds	r7, #16
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	ffff0000 	.word	0xffff0000
 800ee94:	0800f099 	.word	0x0800f099
 800ee98:	80002000 	.word	0x80002000

0800ee9c <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b086      	sub	sp, #24
 800eea0:	af02      	add	r7, sp, #8
 800eea2:	60f8      	str	r0, [r7, #12]
 800eea4:	4608      	mov	r0, r1
 800eea6:	4611      	mov	r1, r2
 800eea8:	461a      	mov	r2, r3
 800eeaa:	4603      	mov	r3, r0
 800eeac:	817b      	strh	r3, [r7, #10]
 800eeae:	460b      	mov	r3, r1
 800eeb0:	813b      	strh	r3, [r7, #8]
 800eeb2:	4613      	mov	r3, r2
 800eeb4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eebc:	b2db      	uxtb	r3, r3
 800eebe:	2b20      	cmp	r3, #32
 800eec0:	d166      	bne.n	800ef90 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800eec2:	69bb      	ldr	r3, [r7, #24]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d002      	beq.n	800eece <HAL_I2C_Mem_Read_IT+0x32>
 800eec8:	8bbb      	ldrh	r3, [r7, #28]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d105      	bne.n	800eeda <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eed4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800eed6:	2301      	movs	r3, #1
 800eed8:	e05b      	b.n	800ef92 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	699b      	ldr	r3, [r3, #24]
 800eee0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eee8:	d101      	bne.n	800eeee <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800eeea:	2302      	movs	r3, #2
 800eeec:	e051      	b.n	800ef92 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d101      	bne.n	800eefc <HAL_I2C_Mem_Read_IT+0x60>
 800eef8:	2302      	movs	r3, #2
 800eefa:	e04a      	b.n	800ef92 <HAL_I2C_Mem_Read_IT+0xf6>
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2201      	movs	r2, #1
 800ef00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2222      	movs	r2, #34	@ 0x22
 800ef08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2240      	movs	r2, #64	@ 0x40
 800ef10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2200      	movs	r2, #0
 800ef18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	69ba      	ldr	r2, [r7, #24]
 800ef1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	8bba      	ldrh	r2, [r7, #28]
 800ef24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	4a1c      	ldr	r2, [pc, #112]	@ (800ef9c <HAL_I2C_Mem_Read_IT+0x100>)
 800ef2a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	4a1c      	ldr	r2, [pc, #112]	@ (800efa0 <HAL_I2C_Mem_Read_IT+0x104>)
 800ef30:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800ef32:	897a      	ldrh	r2, [r7, #10]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ef38:	88fb      	ldrh	r3, [r7, #6]
 800ef3a:	2b01      	cmp	r3, #1
 800ef3c:	d109      	bne.n	800ef52 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ef3e:	893b      	ldrh	r3, [r7, #8]
 800ef40:	b2da      	uxtb	r2, r3
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef4e:	651a      	str	r2, [r3, #80]	@ 0x50
 800ef50:	e00b      	b.n	800ef6a <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ef52:	893b      	ldrh	r3, [r7, #8]
 800ef54:	0a1b      	lsrs	r3, r3, #8
 800ef56:	b29b      	uxth	r3, r3
 800ef58:	b2da      	uxtb	r2, r3
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800ef60:	893b      	ldrh	r3, [r7, #8]
 800ef62:	b2db      	uxtb	r3, r3
 800ef64:	461a      	mov	r2, r3
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ef6a:	88fb      	ldrh	r3, [r7, #6]
 800ef6c:	b2da      	uxtb	r2, r3
 800ef6e:	8979      	ldrh	r1, [r7, #10]
 800ef70:	4b0c      	ldr	r3, [pc, #48]	@ (800efa4 <HAL_I2C_Mem_Read_IT+0x108>)
 800ef72:	9300      	str	r3, [sp, #0]
 800ef74:	2300      	movs	r3, #0
 800ef76:	68f8      	ldr	r0, [r7, #12]
 800ef78:	f001 feea 	bl	8010d50 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ef84:	2101      	movs	r1, #1
 800ef86:	68f8      	ldr	r0, [r7, #12]
 800ef88:	f001 ff14 	bl	8010db4 <I2C_Enable_IRQ>

    return HAL_OK;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	e000      	b.n	800ef92 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800ef90:	2302      	movs	r3, #2
  }
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3710      	adds	r7, #16
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	ffff0000 	.word	0xffff0000
 800efa0:	0800f099 	.word	0x0800f099
 800efa4:	80002000 	.word	0x80002000

0800efa8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	699b      	ldr	r3, [r3, #24]
 800efb6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d005      	beq.n	800efd4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efcc:	68ba      	ldr	r2, [r7, #8]
 800efce:	68f9      	ldr	r1, [r7, #12]
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	4798      	blx	r3
  }
}
 800efd4:	bf00      	nop
 800efd6:	3710      	adds	r7, #16
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800efdc:	b480      	push	{r7}
 800efde:	b083      	sub	sp, #12
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800efe4:	bf00      	nop
 800efe6:	370c      	adds	r7, #12
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr

0800eff0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b083      	sub	sp, #12
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800eff8:	bf00      	nop
 800effa:	370c      	adds	r7, #12
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr

0800f004 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f004:	b480      	push	{r7}
 800f006:	b083      	sub	sp, #12
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f00c:	bf00      	nop
 800f00e:	370c      	adds	r7, #12
 800f010:	46bd      	mov	sp, r7
 800f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f016:	4770      	bx	lr

0800f018 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f018:	b480      	push	{r7}
 800f01a:	b083      	sub	sp, #12
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f020:	bf00      	nop
 800f022:	370c      	adds	r7, #12
 800f024:	46bd      	mov	sp, r7
 800f026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02a:	4770      	bx	lr

0800f02c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f02c:	b480      	push	{r7}
 800f02e:	b083      	sub	sp, #12
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	460b      	mov	r3, r1
 800f036:	70fb      	strb	r3, [r7, #3]
 800f038:	4613      	mov	r3, r2
 800f03a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f03c:	bf00      	nop
 800f03e:	370c      	adds	r7, #12
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr

0800f048 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f048:	b480      	push	{r7}
 800f04a:	b083      	sub	sp, #12
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800f050:	bf00      	nop
 800f052:	370c      	adds	r7, #12
 800f054:	46bd      	mov	sp, r7
 800f056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05a:	4770      	bx	lr

0800f05c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800f064:	bf00      	nop
 800f066:	370c      	adds	r7, #12
 800f068:	46bd      	mov	sp, r7
 800f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06e:	4770      	bx	lr

0800f070 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f070:	b480      	push	{r7}
 800f072:	b083      	sub	sp, #12
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f078:	bf00      	nop
 800f07a:	370c      	adds	r7, #12
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr

0800f084 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f08c:	bf00      	nop
 800f08e:	370c      	adds	r7, #12
 800f090:	46bd      	mov	sp, r7
 800f092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f096:	4770      	bx	lr

0800f098 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b088      	sub	sp, #32
 800f09c:	af02      	add	r7, sp, #8
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	60b9      	str	r1, [r7, #8]
 800f0a2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f0a4:	4b8d      	ldr	r3, [pc, #564]	@ (800f2dc <I2C_Mem_ISR_IT+0x244>)
 800f0a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d101      	bne.n	800f0ba <I2C_Mem_ISR_IT+0x22>
 800f0b6:	2302      	movs	r3, #2
 800f0b8:	e10c      	b.n	800f2d4 <I2C_Mem_ISR_IT+0x23c>
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2201      	movs	r2, #1
 800f0be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	f003 0310 	and.w	r3, r3, #16
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d012      	beq.n	800f0f2 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d00d      	beq.n	800f0f2 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	2210      	movs	r2, #16
 800f0dc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0e2:	f043 0204 	orr.w	r2, r3, #4
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f0ea:	68f8      	ldr	r0, [r7, #12]
 800f0ec:	f001 fc2b 	bl	8010946 <I2C_Flush_TXDR>
 800f0f0:	e0dd      	b.n	800f2ae <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f0f2:	693b      	ldr	r3, [r7, #16]
 800f0f4:	f003 0304 	and.w	r3, r3, #4
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d022      	beq.n	800f142 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f102:	2b00      	cmp	r3, #0
 800f104:	d01d      	beq.n	800f142 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	f023 0304 	bic.w	r3, r3, #4
 800f10c:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f118:	b2d2      	uxtb	r2, r2
 800f11a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f120:	1c5a      	adds	r2, r3, #1
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f12a:	3b01      	subs	r3, #1
 800f12c:	b29a      	uxth	r2, r3
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f136:	b29b      	uxth	r3, r3
 800f138:	3b01      	subs	r3, #1
 800f13a:	b29a      	uxth	r2, r3
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f140:	e0b5      	b.n	800f2ae <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	f003 0302 	and.w	r3, r3, #2
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d02c      	beq.n	800f1a6 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f152:	2b00      	cmp	r3, #0
 800f154:	d027      	beq.n	800f1a6 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f15e:	d118      	bne.n	800f192 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f164:	781a      	ldrb	r2, [r3, #0]
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f170:	1c5a      	adds	r2, r3, #1
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f17a:	3b01      	subs	r3, #1
 800f17c:	b29a      	uxth	r2, r3
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f186:	b29b      	uxth	r3, r3
 800f188:	3b01      	subs	r3, #1
 800f18a:	b29a      	uxth	r2, r3
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f190:	e08d      	b.n	800f2ae <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	68fa      	ldr	r2, [r7, #12]
 800f198:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f19a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f04f 32ff 	mov.w	r2, #4294967295
 800f1a2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f1a4:	e083      	b.n	800f2ae <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d03c      	beq.n	800f22a <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d037      	beq.n	800f22a <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1be:	b29b      	uxth	r3, r3
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d02c      	beq.n	800f21e <I2C_Mem_ISR_IT+0x186>
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d128      	bne.n	800f21e <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1d0:	b29b      	uxth	r3, r3
 800f1d2:	2bff      	cmp	r3, #255	@ 0xff
 800f1d4:	d910      	bls.n	800f1f8 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	22ff      	movs	r2, #255	@ 0xff
 800f1da:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1e0:	b299      	uxth	r1, r3
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1e6:	b2da      	uxtb	r2, r3
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	9300      	str	r3, [sp, #0]
 800f1ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f1f0:	68f8      	ldr	r0, [r7, #12]
 800f1f2:	f001 fdad 	bl	8010d50 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f1f6:	e017      	b.n	800f228 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1fc:	b29a      	uxth	r2, r3
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f206:	b299      	uxth	r1, r3
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f20c:	b2da      	uxtb	r2, r3
 800f20e:	2300      	movs	r3, #0
 800f210:	9300      	str	r3, [sp, #0]
 800f212:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f216:	68f8      	ldr	r0, [r7, #12]
 800f218:	f001 fd9a 	bl	8010d50 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f21c:	e004      	b.n	800f228 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f21e:	2140      	movs	r1, #64	@ 0x40
 800f220:	68f8      	ldr	r0, [r7, #12]
 800f222:	f001 fa79 	bl	8010718 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f226:	e042      	b.n	800f2ae <I2C_Mem_ISR_IT+0x216>
 800f228:	e041      	b.n	800f2ae <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f230:	2b00      	cmp	r3, #0
 800f232:	d03c      	beq.n	800f2ae <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d037      	beq.n	800f2ae <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f23e:	2101      	movs	r1, #1
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	f001 fe3b 	bl	8010ebc <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f246:	2102      	movs	r1, #2
 800f248:	68f8      	ldr	r0, [r7, #12]
 800f24a:	f001 fdb3 	bl	8010db4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f254:	b2db      	uxtb	r3, r3
 800f256:	2b22      	cmp	r3, #34	@ 0x22
 800f258:	d101      	bne.n	800f25e <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800f25a:	4b21      	ldr	r3, [pc, #132]	@ (800f2e0 <I2C_Mem_ISR_IT+0x248>)
 800f25c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f262:	b29b      	uxth	r3, r3
 800f264:	2bff      	cmp	r3, #255	@ 0xff
 800f266:	d910      	bls.n	800f28a <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	22ff      	movs	r2, #255	@ 0xff
 800f26c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f272:	b299      	uxth	r1, r3
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f278:	b2da      	uxtb	r2, r3
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	9300      	str	r3, [sp, #0]
 800f27e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f282:	68f8      	ldr	r0, [r7, #12]
 800f284:	f001 fd64 	bl	8010d50 <I2C_TransferConfig>
 800f288:	e011      	b.n	800f2ae <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f28e:	b29a      	uxth	r2, r3
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f298:	b299      	uxth	r1, r3
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f29e:	b2da      	uxtb	r2, r3
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f2a8:	68f8      	ldr	r0, [r7, #12]
 800f2aa:	f001 fd51 	bl	8010d50 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	f003 0320 	and.w	r3, r3, #32
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d008      	beq.n	800f2ca <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d003      	beq.n	800f2ca <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800f2c2:	6939      	ldr	r1, [r7, #16]
 800f2c4:	68f8      	ldr	r0, [r7, #12]
 800f2c6:	f000 feb7 	bl	8010038 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f2d2:	2300      	movs	r3, #0
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3718      	adds	r7, #24
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}
 800f2dc:	80002000 	.word	0x80002000
 800f2e0:	80002400 	.word	0x80002400

0800f2e4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b086      	sub	sp, #24
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	60f8      	str	r0, [r7, #12]
 800f2ec:	60b9      	str	r1, [r7, #8]
 800f2ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f300:	2b01      	cmp	r3, #1
 800f302:	d101      	bne.n	800f308 <I2C_Slave_ISR_IT+0x24>
 800f304:	2302      	movs	r3, #2
 800f306:	e0e2      	b.n	800f4ce <I2C_Slave_ISR_IT+0x1ea>
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2201      	movs	r2, #1
 800f30c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	f003 0320 	and.w	r3, r3, #32
 800f316:	2b00      	cmp	r3, #0
 800f318:	d009      	beq.n	800f32e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f320:	2b00      	cmp	r3, #0
 800f322:	d004      	beq.n	800f32e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f324:	6939      	ldr	r1, [r7, #16]
 800f326:	68f8      	ldr	r0, [r7, #12]
 800f328:	f000 ff4e 	bl	80101c8 <I2C_ITSlaveCplt>
 800f32c:	e0ca      	b.n	800f4c4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	f003 0310 	and.w	r3, r3, #16
 800f334:	2b00      	cmp	r3, #0
 800f336:	d04b      	beq.n	800f3d0 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d046      	beq.n	800f3d0 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f346:	b29b      	uxth	r3, r3
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d128      	bne.n	800f39e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f352:	b2db      	uxtb	r3, r3
 800f354:	2b28      	cmp	r3, #40	@ 0x28
 800f356:	d108      	bne.n	800f36a <I2C_Slave_ISR_IT+0x86>
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f35e:	d104      	bne.n	800f36a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f360:	6939      	ldr	r1, [r7, #16]
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f001 f984 	bl	8010670 <I2C_ITListenCplt>
 800f368:	e031      	b.n	800f3ce <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f370:	b2db      	uxtb	r3, r3
 800f372:	2b29      	cmp	r3, #41	@ 0x29
 800f374:	d10e      	bne.n	800f394 <I2C_Slave_ISR_IT+0xb0>
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f37c:	d00a      	beq.n	800f394 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	2210      	movs	r2, #16
 800f384:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f386:	68f8      	ldr	r0, [r7, #12]
 800f388:	f001 fadd 	bl	8010946 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f38c:	68f8      	ldr	r0, [r7, #12]
 800f38e:	f000 fdf6 	bl	800ff7e <I2C_ITSlaveSeqCplt>
 800f392:	e01c      	b.n	800f3ce <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	2210      	movs	r2, #16
 800f39a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f39c:	e08f      	b.n	800f4be <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	2210      	movs	r2, #16
 800f3a4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3aa:	f043 0204 	orr.w	r2, r3, #4
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d003      	beq.n	800f3c0 <I2C_Slave_ISR_IT+0xdc>
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f3be:	d17e      	bne.n	800f4be <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	68f8      	ldr	r0, [r7, #12]
 800f3c8:	f001 f9a6 	bl	8010718 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f3cc:	e077      	b.n	800f4be <I2C_Slave_ISR_IT+0x1da>
 800f3ce:	e076      	b.n	800f4be <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	f003 0304 	and.w	r3, r3, #4
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d02f      	beq.n	800f43a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d02a      	beq.n	800f43a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3e8:	b29b      	uxth	r3, r3
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d018      	beq.n	800f420 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3f8:	b2d2      	uxtb	r2, r2
 800f3fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f400:	1c5a      	adds	r2, r3, #1
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f40a:	3b01      	subs	r3, #1
 800f40c:	b29a      	uxth	r2, r3
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f416:	b29b      	uxth	r3, r3
 800f418:	3b01      	subs	r3, #1
 800f41a:	b29a      	uxth	r2, r3
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f424:	b29b      	uxth	r3, r3
 800f426:	2b00      	cmp	r3, #0
 800f428:	d14b      	bne.n	800f4c2 <I2C_Slave_ISR_IT+0x1de>
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f430:	d047      	beq.n	800f4c2 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800f432:	68f8      	ldr	r0, [r7, #12]
 800f434:	f000 fda3 	bl	800ff7e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800f438:	e043      	b.n	800f4c2 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	f003 0308 	and.w	r3, r3, #8
 800f440:	2b00      	cmp	r3, #0
 800f442:	d009      	beq.n	800f458 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d004      	beq.n	800f458 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f44e:	6939      	ldr	r1, [r7, #16]
 800f450:	68f8      	ldr	r0, [r7, #12]
 800f452:	f000 fcd3 	bl	800fdfc <I2C_ITAddrCplt>
 800f456:	e035      	b.n	800f4c4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	f003 0302 	and.w	r3, r3, #2
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d030      	beq.n	800f4c4 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d02b      	beq.n	800f4c4 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f470:	b29b      	uxth	r3, r3
 800f472:	2b00      	cmp	r3, #0
 800f474:	d018      	beq.n	800f4a8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f47a:	781a      	ldrb	r2, [r3, #0]
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f486:	1c5a      	adds	r2, r3, #1
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f490:	b29b      	uxth	r3, r3
 800f492:	3b01      	subs	r3, #1
 800f494:	b29a      	uxth	r2, r3
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	b29a      	uxth	r2, r3
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f4a6:	e00d      	b.n	800f4c4 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f4ae:	d002      	beq.n	800f4b6 <I2C_Slave_ISR_IT+0x1d2>
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d106      	bne.n	800f4c4 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f4b6:	68f8      	ldr	r0, [r7, #12]
 800f4b8:	f000 fd61 	bl	800ff7e <I2C_ITSlaveSeqCplt>
 800f4bc:	e002      	b.n	800f4c4 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800f4be:	bf00      	nop
 800f4c0:	e000      	b.n	800f4c4 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800f4c2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f4cc:	2300      	movs	r3, #0
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3718      	adds	r7, #24
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}

0800f4d6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800f4d6:	b580      	push	{r7, lr}
 800f4d8:	b088      	sub	sp, #32
 800f4da:	af02      	add	r7, sp, #8
 800f4dc:	60f8      	str	r0, [r7, #12]
 800f4de:	60b9      	str	r1, [r7, #8]
 800f4e0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d101      	bne.n	800f4f0 <I2C_Master_ISR_DMA+0x1a>
 800f4ec:	2302      	movs	r3, #2
 800f4ee:	e0d9      	b.n	800f6a4 <I2C_Master_ISR_DMA+0x1ce>
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	f003 0310 	and.w	r3, r3, #16
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d016      	beq.n	800f530 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d011      	beq.n	800f530 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	2210      	movs	r2, #16
 800f512:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f518:	f043 0204 	orr.w	r2, r3, #4
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f520:	2120      	movs	r1, #32
 800f522:	68f8      	ldr	r0, [r7, #12]
 800f524:	f001 fc46 	bl	8010db4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f528:	68f8      	ldr	r0, [r7, #12]
 800f52a:	f001 fa0c 	bl	8010946 <I2C_Flush_TXDR>
 800f52e:	e0b4      	b.n	800f69a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f536:	2b00      	cmp	r3, #0
 800f538:	d071      	beq.n	800f61e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f540:	2b00      	cmp	r3, #0
 800f542:	d06c      	beq.n	800f61e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f552:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f558:	b29b      	uxth	r3, r3
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d04e      	beq.n	800f5fc <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	685b      	ldr	r3, [r3, #4]
 800f564:	b29b      	uxth	r3, r3
 800f566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f56a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f570:	b29b      	uxth	r3, r3
 800f572:	2bff      	cmp	r3, #255	@ 0xff
 800f574:	d906      	bls.n	800f584 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	22ff      	movs	r2, #255	@ 0xff
 800f57a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800f57c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f580:	617b      	str	r3, [r7, #20]
 800f582:	e010      	b.n	800f5a6 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f588:	b29a      	uxth	r2, r3
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f592:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f596:	d003      	beq.n	800f5a0 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f59c:	617b      	str	r3, [r7, #20]
 800f59e:	e002      	b.n	800f5a6 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800f5a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f5a4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f5aa:	b2da      	uxtb	r2, r3
 800f5ac:	8a79      	ldrh	r1, [r7, #18]
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	9300      	str	r3, [sp, #0]
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	68f8      	ldr	r0, [r7, #12]
 800f5b6:	f001 fbcb 	bl	8010d50 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5be:	b29a      	uxth	r2, r3
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f5c4:	1ad3      	subs	r3, r2, r3
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	2b22      	cmp	r3, #34	@ 0x22
 800f5d6:	d108      	bne.n	800f5ea <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	681a      	ldr	r2, [r3, #0]
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f5e6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f5e8:	e057      	b.n	800f69a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f5f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f5fa:	e04e      	b.n	800f69a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f606:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f60a:	d003      	beq.n	800f614 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f60c:	68f8      	ldr	r0, [r7, #12]
 800f60e:	f000 fc79 	bl	800ff04 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800f612:	e042      	b.n	800f69a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f614:	2140      	movs	r1, #64	@ 0x40
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	f001 f87e 	bl	8010718 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f61c:	e03d      	b.n	800f69a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f624:	2b00      	cmp	r3, #0
 800f626:	d028      	beq.n	800f67a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d023      	beq.n	800f67a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f636:	b29b      	uxth	r3, r3
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d119      	bne.n	800f670 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	685b      	ldr	r3, [r3, #4]
 800f642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f646:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f64a:	d025      	beq.n	800f698 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f650:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f654:	d108      	bne.n	800f668 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	685a      	ldr	r2, [r3, #4]
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f664:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800f666:	e017      	b.n	800f698 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f668:	68f8      	ldr	r0, [r7, #12]
 800f66a:	f000 fc4b 	bl	800ff04 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800f66e:	e013      	b.n	800f698 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f670:	2140      	movs	r1, #64	@ 0x40
 800f672:	68f8      	ldr	r0, [r7, #12]
 800f674:	f001 f850 	bl	8010718 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f678:	e00e      	b.n	800f698 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	f003 0320 	and.w	r3, r3, #32
 800f680:	2b00      	cmp	r3, #0
 800f682:	d00a      	beq.n	800f69a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d005      	beq.n	800f69a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f68e:	68b9      	ldr	r1, [r7, #8]
 800f690:	68f8      	ldr	r0, [r7, #12]
 800f692:	f000 fcd1 	bl	8010038 <I2C_ITMasterCplt>
 800f696:	e000      	b.n	800f69a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800f698:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2200      	movs	r2, #0
 800f69e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f6a2:	2300      	movs	r3, #0
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3718      	adds	r7, #24
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b088      	sub	sp, #32
 800f6b0:	af02      	add	r7, sp, #8
 800f6b2:	60f8      	str	r0, [r7, #12]
 800f6b4:	60b9      	str	r1, [r7, #8]
 800f6b6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f6b8:	4b8d      	ldr	r3, [pc, #564]	@ (800f8f0 <I2C_Mem_ISR_DMA+0x244>)
 800f6ba:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d101      	bne.n	800f6ca <I2C_Mem_ISR_DMA+0x1e>
 800f6c6:	2302      	movs	r3, #2
 800f6c8:	e10e      	b.n	800f8e8 <I2C_Mem_ISR_DMA+0x23c>
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	f003 0310 	and.w	r3, r3, #16
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d016      	beq.n	800f70a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d011      	beq.n	800f70a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	2210      	movs	r2, #16
 800f6ec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6f2:	f043 0204 	orr.w	r2, r3, #4
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f6fa:	2120      	movs	r1, #32
 800f6fc:	68f8      	ldr	r0, [r7, #12]
 800f6fe:	f001 fb59 	bl	8010db4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f702:	68f8      	ldr	r0, [r7, #12]
 800f704:	f001 f91f 	bl	8010946 <I2C_Flush_TXDR>
 800f708:	e0e9      	b.n	800f8de <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	f003 0302 	and.w	r3, r3, #2
 800f710:	2b00      	cmp	r3, #0
 800f712:	d00e      	beq.n	800f732 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d009      	beq.n	800f732 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	68fa      	ldr	r2, [r7, #12]
 800f724:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f726:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f04f 32ff 	mov.w	r2, #4294967295
 800f72e:	651a      	str	r2, [r3, #80]	@ 0x50
 800f730:	e0d5      	b.n	800f8de <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d05f      	beq.n	800f7fc <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f742:	2b00      	cmp	r3, #0
 800f744:	d05a      	beq.n	800f7fc <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f746:	2101      	movs	r1, #1
 800f748:	68f8      	ldr	r0, [r7, #12]
 800f74a:	f001 fbb7 	bl	8010ebc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f74e:	2110      	movs	r1, #16
 800f750:	68f8      	ldr	r0, [r7, #12]
 800f752:	f001 fb2f 	bl	8010db4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d048      	beq.n	800f7f2 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f764:	b29b      	uxth	r3, r3
 800f766:	2bff      	cmp	r3, #255	@ 0xff
 800f768:	d910      	bls.n	800f78c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	22ff      	movs	r2, #255	@ 0xff
 800f76e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f774:	b299      	uxth	r1, r3
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f77a:	b2da      	uxtb	r2, r3
 800f77c:	2300      	movs	r3, #0
 800f77e:	9300      	str	r3, [sp, #0]
 800f780:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f784:	68f8      	ldr	r0, [r7, #12]
 800f786:	f001 fae3 	bl	8010d50 <I2C_TransferConfig>
 800f78a:	e011      	b.n	800f7b0 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f790:	b29a      	uxth	r2, r3
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f79a:	b299      	uxth	r1, r3
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7a0:	b2da      	uxtb	r2, r3
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	9300      	str	r3, [sp, #0]
 800f7a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f7aa:	68f8      	ldr	r0, [r7, #12]
 800f7ac:	f001 fad0 	bl	8010d50 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7b4:	b29a      	uxth	r2, r3
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7ba:	1ad3      	subs	r3, r2, r3
 800f7bc:	b29a      	uxth	r2, r3
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	2b22      	cmp	r3, #34	@ 0x22
 800f7cc:	d108      	bne.n	800f7e0 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f7dc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f7de:	e07e      	b.n	800f8de <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	681a      	ldr	r2, [r3, #0]
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f7ee:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f7f0:	e075      	b.n	800f8de <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f7f2:	2140      	movs	r1, #64	@ 0x40
 800f7f4:	68f8      	ldr	r0, [r7, #12]
 800f7f6:	f000 ff8f 	bl	8010718 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f7fa:	e070      	b.n	800f8de <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f802:	2b00      	cmp	r3, #0
 800f804:	d05d      	beq.n	800f8c2 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d058      	beq.n	800f8c2 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f810:	2101      	movs	r1, #1
 800f812:	68f8      	ldr	r0, [r7, #12]
 800f814:	f001 fb52 	bl	8010ebc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f818:	2110      	movs	r1, #16
 800f81a:	68f8      	ldr	r0, [r7, #12]
 800f81c:	f001 faca 	bl	8010db4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f826:	b2db      	uxtb	r3, r3
 800f828:	2b22      	cmp	r3, #34	@ 0x22
 800f82a:	d101      	bne.n	800f830 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800f82c:	4b31      	ldr	r3, [pc, #196]	@ (800f8f4 <I2C_Mem_ISR_DMA+0x248>)
 800f82e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f834:	b29b      	uxth	r3, r3
 800f836:	2bff      	cmp	r3, #255	@ 0xff
 800f838:	d910      	bls.n	800f85c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	22ff      	movs	r2, #255	@ 0xff
 800f83e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f844:	b299      	uxth	r1, r3
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f84a:	b2da      	uxtb	r2, r3
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	9300      	str	r3, [sp, #0]
 800f850:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f854:	68f8      	ldr	r0, [r7, #12]
 800f856:	f001 fa7b 	bl	8010d50 <I2C_TransferConfig>
 800f85a:	e011      	b.n	800f880 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f860:	b29a      	uxth	r2, r3
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f86a:	b299      	uxth	r1, r3
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f870:	b2da      	uxtb	r2, r3
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	9300      	str	r3, [sp, #0]
 800f876:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	f001 fa68 	bl	8010d50 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f884:	b29a      	uxth	r2, r3
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f88a:	1ad3      	subs	r3, r2, r3
 800f88c:	b29a      	uxth	r2, r3
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	2b22      	cmp	r3, #34	@ 0x22
 800f89c:	d108      	bne.n	800f8b0 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	681a      	ldr	r2, [r3, #0]
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f8ac:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f8ae:	e016      	b.n	800f8de <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f8be:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f8c0:	e00d      	b.n	800f8de <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	f003 0320 	and.w	r3, r3, #32
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d008      	beq.n	800f8de <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d003      	beq.n	800f8de <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f8d6:	68b9      	ldr	r1, [r7, #8]
 800f8d8:	68f8      	ldr	r0, [r7, #12]
 800f8da:	f000 fbad 	bl	8010038 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f8e6:	2300      	movs	r3, #0
}
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	3718      	adds	r7, #24
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bd80      	pop	{r7, pc}
 800f8f0:	80002000 	.word	0x80002000
 800f8f4:	80002400 	.word	0x80002400

0800f8f8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b088      	sub	sp, #32
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	60f8      	str	r0, [r7, #12]
 800f900:	60b9      	str	r1, [r7, #8]
 800f902:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f908:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800f90a:	2300      	movs	r3, #0
 800f90c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f914:	2b01      	cmp	r3, #1
 800f916:	d101      	bne.n	800f91c <I2C_Slave_ISR_DMA+0x24>
 800f918:	2302      	movs	r3, #2
 800f91a:	e1c2      	b.n	800fca2 <I2C_Slave_ISR_DMA+0x3aa>
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	2201      	movs	r2, #1
 800f920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	f003 0320 	and.w	r3, r3, #32
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d009      	beq.n	800f942 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f934:	2b00      	cmp	r3, #0
 800f936:	d004      	beq.n	800f942 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800f938:	68b9      	ldr	r1, [r7, #8]
 800f93a:	68f8      	ldr	r0, [r7, #12]
 800f93c:	f000 fc44 	bl	80101c8 <I2C_ITSlaveCplt>
 800f940:	e1aa      	b.n	800fc98 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	f003 0310 	and.w	r3, r3, #16
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f000 8197 	beq.w	800fc7c <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f954:	2b00      	cmp	r3, #0
 800f956:	f000 8191 	beq.w	800fc7c <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f960:	2b00      	cmp	r3, #0
 800f962:	d105      	bne.n	800f970 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f000 817f 	beq.w	800fc6e <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f974:	2b00      	cmp	r3, #0
 800f976:	d07b      	beq.n	800fa70 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d076      	beq.n	800fa70 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a74      	ldr	r2, [pc, #464]	@ (800fb5c <I2C_Slave_ISR_DMA+0x264>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d059      	beq.n	800fa42 <I2C_Slave_ISR_DMA+0x14a>
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	4a72      	ldr	r2, [pc, #456]	@ (800fb60 <I2C_Slave_ISR_DMA+0x268>)
 800f996:	4293      	cmp	r3, r2
 800f998:	d053      	beq.n	800fa42 <I2C_Slave_ISR_DMA+0x14a>
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4a70      	ldr	r2, [pc, #448]	@ (800fb64 <I2C_Slave_ISR_DMA+0x26c>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d04d      	beq.n	800fa42 <I2C_Slave_ISR_DMA+0x14a>
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	4a6e      	ldr	r2, [pc, #440]	@ (800fb68 <I2C_Slave_ISR_DMA+0x270>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d047      	beq.n	800fa42 <I2C_Slave_ISR_DMA+0x14a>
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4a6c      	ldr	r2, [pc, #432]	@ (800fb6c <I2C_Slave_ISR_DMA+0x274>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d041      	beq.n	800fa42 <I2C_Slave_ISR_DMA+0x14a>
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	4a6a      	ldr	r2, [pc, #424]	@ (800fb70 <I2C_Slave_ISR_DMA+0x278>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d03b      	beq.n	800fa42 <I2C_Slave_ISR_DMA+0x14a>
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	4a68      	ldr	r2, [pc, #416]	@ (800fb74 <I2C_Slave_ISR_DMA+0x27c>)
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	d035      	beq.n	800fa42 <I2C_Slave_ISR_DMA+0x14a>
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	4a66      	ldr	r2, [pc, #408]	@ (800fb78 <I2C_Slave_ISR_DMA+0x280>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d02f      	beq.n	800fa42 <I2C_Slave_ISR_DMA+0x14a>
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4a64      	ldr	r2, [pc, #400]	@ (800fb7c <I2C_Slave_ISR_DMA+0x284>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d029      	beq.n	800fa42 <I2C_Slave_ISR_DMA+0x14a>
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a62      	ldr	r2, [pc, #392]	@ (800fb80 <I2C_Slave_ISR_DMA+0x288>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d023      	beq.n	800fa42 <I2C_Slave_ISR_DMA+0x14a>
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4a60      	ldr	r2, [pc, #384]	@ (800fb84 <I2C_Slave_ISR_DMA+0x28c>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d01d      	beq.n	800fa42 <I2C_Slave_ISR_DMA+0x14a>
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4a5e      	ldr	r2, [pc, #376]	@ (800fb88 <I2C_Slave_ISR_DMA+0x290>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d017      	beq.n	800fa42 <I2C_Slave_ISR_DMA+0x14a>
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4a5c      	ldr	r2, [pc, #368]	@ (800fb8c <I2C_Slave_ISR_DMA+0x294>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d011      	beq.n	800fa42 <I2C_Slave_ISR_DMA+0x14a>
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	4a5a      	ldr	r2, [pc, #360]	@ (800fb90 <I2C_Slave_ISR_DMA+0x298>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d00b      	beq.n	800fa42 <I2C_Slave_ISR_DMA+0x14a>
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	4a58      	ldr	r2, [pc, #352]	@ (800fb94 <I2C_Slave_ISR_DMA+0x29c>)
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d005      	beq.n	800fa42 <I2C_Slave_ISR_DMA+0x14a>
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4a56      	ldr	r2, [pc, #344]	@ (800fb98 <I2C_Slave_ISR_DMA+0x2a0>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d109      	bne.n	800fa56 <I2C_Slave_ISR_DMA+0x15e>
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	bf0c      	ite	eq
 800fa4e:	2301      	moveq	r3, #1
 800fa50:	2300      	movne	r3, #0
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	e008      	b.n	800fa68 <I2C_Slave_ISR_DMA+0x170>
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	685b      	ldr	r3, [r3, #4]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	bf0c      	ite	eq
 800fa62:	2301      	moveq	r3, #1
 800fa64:	2300      	movne	r3, #0
 800fa66:	b2db      	uxtb	r3, r3
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d001      	beq.n	800fa70 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	f000 809e 	beq.w	800fbb6 <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	f000 8098 	beq.w	800fbb6 <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4a33      	ldr	r2, [pc, #204]	@ (800fb5c <I2C_Slave_ISR_DMA+0x264>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d059      	beq.n	800fb46 <I2C_Slave_ISR_DMA+0x24e>
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a31      	ldr	r2, [pc, #196]	@ (800fb60 <I2C_Slave_ISR_DMA+0x268>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d053      	beq.n	800fb46 <I2C_Slave_ISR_DMA+0x24e>
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4a2f      	ldr	r2, [pc, #188]	@ (800fb64 <I2C_Slave_ISR_DMA+0x26c>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d04d      	beq.n	800fb46 <I2C_Slave_ISR_DMA+0x24e>
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	4a2d      	ldr	r2, [pc, #180]	@ (800fb68 <I2C_Slave_ISR_DMA+0x270>)
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d047      	beq.n	800fb46 <I2C_Slave_ISR_DMA+0x24e>
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a2b      	ldr	r2, [pc, #172]	@ (800fb6c <I2C_Slave_ISR_DMA+0x274>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d041      	beq.n	800fb46 <I2C_Slave_ISR_DMA+0x24e>
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4a29      	ldr	r2, [pc, #164]	@ (800fb70 <I2C_Slave_ISR_DMA+0x278>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d03b      	beq.n	800fb46 <I2C_Slave_ISR_DMA+0x24e>
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	4a27      	ldr	r2, [pc, #156]	@ (800fb74 <I2C_Slave_ISR_DMA+0x27c>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d035      	beq.n	800fb46 <I2C_Slave_ISR_DMA+0x24e>
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4a25      	ldr	r2, [pc, #148]	@ (800fb78 <I2C_Slave_ISR_DMA+0x280>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d02f      	beq.n	800fb46 <I2C_Slave_ISR_DMA+0x24e>
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	4a23      	ldr	r2, [pc, #140]	@ (800fb7c <I2C_Slave_ISR_DMA+0x284>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d029      	beq.n	800fb46 <I2C_Slave_ISR_DMA+0x24e>
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4a21      	ldr	r2, [pc, #132]	@ (800fb80 <I2C_Slave_ISR_DMA+0x288>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d023      	beq.n	800fb46 <I2C_Slave_ISR_DMA+0x24e>
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4a1f      	ldr	r2, [pc, #124]	@ (800fb84 <I2C_Slave_ISR_DMA+0x28c>)
 800fb06:	4293      	cmp	r3, r2
 800fb08:	d01d      	beq.n	800fb46 <I2C_Slave_ISR_DMA+0x24e>
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	4a1d      	ldr	r2, [pc, #116]	@ (800fb88 <I2C_Slave_ISR_DMA+0x290>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d017      	beq.n	800fb46 <I2C_Slave_ISR_DMA+0x24e>
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	4a1b      	ldr	r2, [pc, #108]	@ (800fb8c <I2C_Slave_ISR_DMA+0x294>)
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d011      	beq.n	800fb46 <I2C_Slave_ISR_DMA+0x24e>
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	4a19      	ldr	r2, [pc, #100]	@ (800fb90 <I2C_Slave_ISR_DMA+0x298>)
 800fb2a:	4293      	cmp	r3, r2
 800fb2c:	d00b      	beq.n	800fb46 <I2C_Slave_ISR_DMA+0x24e>
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4a17      	ldr	r2, [pc, #92]	@ (800fb94 <I2C_Slave_ISR_DMA+0x29c>)
 800fb36:	4293      	cmp	r3, r2
 800fb38:	d005      	beq.n	800fb46 <I2C_Slave_ISR_DMA+0x24e>
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	4a15      	ldr	r2, [pc, #84]	@ (800fb98 <I2C_Slave_ISR_DMA+0x2a0>)
 800fb42:	4293      	cmp	r3, r2
 800fb44:	d12a      	bne.n	800fb9c <I2C_Slave_ISR_DMA+0x2a4>
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	bf0c      	ite	eq
 800fb52:	2301      	moveq	r3, #1
 800fb54:	2300      	movne	r3, #0
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	e029      	b.n	800fbae <I2C_Slave_ISR_DMA+0x2b6>
 800fb5a:	bf00      	nop
 800fb5c:	40020010 	.word	0x40020010
 800fb60:	40020028 	.word	0x40020028
 800fb64:	40020040 	.word	0x40020040
 800fb68:	40020058 	.word	0x40020058
 800fb6c:	40020070 	.word	0x40020070
 800fb70:	40020088 	.word	0x40020088
 800fb74:	400200a0 	.word	0x400200a0
 800fb78:	400200b8 	.word	0x400200b8
 800fb7c:	40020410 	.word	0x40020410
 800fb80:	40020428 	.word	0x40020428
 800fb84:	40020440 	.word	0x40020440
 800fb88:	40020458 	.word	0x40020458
 800fb8c:	40020470 	.word	0x40020470
 800fb90:	40020488 	.word	0x40020488
 800fb94:	400204a0 	.word	0x400204a0
 800fb98:	400204b8 	.word	0x400204b8
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	bf0c      	ite	eq
 800fba8:	2301      	moveq	r3, #1
 800fbaa:	2300      	movne	r3, #0
 800fbac:	b2db      	uxtb	r3, r3
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d001      	beq.n	800fbb6 <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800fbb6:	69fb      	ldr	r3, [r7, #28]
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	d128      	bne.n	800fc0e <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	2b28      	cmp	r3, #40	@ 0x28
 800fbc6:	d108      	bne.n	800fbda <I2C_Slave_ISR_DMA+0x2e2>
 800fbc8:	69bb      	ldr	r3, [r7, #24]
 800fbca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fbce:	d104      	bne.n	800fbda <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800fbd0:	68b9      	ldr	r1, [r7, #8]
 800fbd2:	68f8      	ldr	r0, [r7, #12]
 800fbd4:	f000 fd4c 	bl	8010670 <I2C_ITListenCplt>
 800fbd8:	e048      	b.n	800fc6c <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fbe0:	b2db      	uxtb	r3, r3
 800fbe2:	2b29      	cmp	r3, #41	@ 0x29
 800fbe4:	d10e      	bne.n	800fc04 <I2C_Slave_ISR_DMA+0x30c>
 800fbe6:	69bb      	ldr	r3, [r7, #24]
 800fbe8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800fbec:	d00a      	beq.n	800fc04 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	2210      	movs	r2, #16
 800fbf4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800fbf6:	68f8      	ldr	r0, [r7, #12]
 800fbf8:	f000 fea5 	bl	8010946 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800fbfc:	68f8      	ldr	r0, [r7, #12]
 800fbfe:	f000 f9be 	bl	800ff7e <I2C_ITSlaveSeqCplt>
 800fc02:	e033      	b.n	800fc6c <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	2210      	movs	r2, #16
 800fc0a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800fc0c:	e034      	b.n	800fc78 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	2210      	movs	r2, #16
 800fc14:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc1a:	f043 0204 	orr.w	r2, r3, #4
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc28:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800fc2a:	69bb      	ldr	r3, [r7, #24]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d003      	beq.n	800fc38 <I2C_Slave_ISR_DMA+0x340>
 800fc30:	69bb      	ldr	r3, [r7, #24]
 800fc32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fc36:	d11f      	bne.n	800fc78 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800fc38:	7dfb      	ldrb	r3, [r7, #23]
 800fc3a:	2b21      	cmp	r3, #33	@ 0x21
 800fc3c:	d002      	beq.n	800fc44 <I2C_Slave_ISR_DMA+0x34c>
 800fc3e:	7dfb      	ldrb	r3, [r7, #23]
 800fc40:	2b29      	cmp	r3, #41	@ 0x29
 800fc42:	d103      	bne.n	800fc4c <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	2221      	movs	r2, #33	@ 0x21
 800fc48:	631a      	str	r2, [r3, #48]	@ 0x30
 800fc4a:	e008      	b.n	800fc5e <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800fc4c:	7dfb      	ldrb	r3, [r7, #23]
 800fc4e:	2b22      	cmp	r3, #34	@ 0x22
 800fc50:	d002      	beq.n	800fc58 <I2C_Slave_ISR_DMA+0x360>
 800fc52:	7dfb      	ldrb	r3, [r7, #23]
 800fc54:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc56:	d102      	bne.n	800fc5e <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	2222      	movs	r2, #34	@ 0x22
 800fc5c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc62:	4619      	mov	r1, r3
 800fc64:	68f8      	ldr	r0, [r7, #12]
 800fc66:	f000 fd57 	bl	8010718 <I2C_ITError>
      if (treatdmanack == 1U)
 800fc6a:	e005      	b.n	800fc78 <I2C_Slave_ISR_DMA+0x380>
 800fc6c:	e004      	b.n	800fc78 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	2210      	movs	r2, #16
 800fc74:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fc76:	e00f      	b.n	800fc98 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800fc78:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fc7a:	e00d      	b.n	800fc98 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	f003 0308 	and.w	r3, r3, #8
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d008      	beq.n	800fc98 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d003      	beq.n	800fc98 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800fc90:	68b9      	ldr	r1, [r7, #8]
 800fc92:	68f8      	ldr	r0, [r7, #12]
 800fc94:	f000 f8b2 	bl	800fdfc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fca0:	2300      	movs	r3, #0
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3720      	adds	r7, #32
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
 800fcaa:	bf00      	nop

0800fcac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b086      	sub	sp, #24
 800fcb0:	af02      	add	r7, sp, #8
 800fcb2:	60f8      	str	r0, [r7, #12]
 800fcb4:	4608      	mov	r0, r1
 800fcb6:	4611      	mov	r1, r2
 800fcb8:	461a      	mov	r2, r3
 800fcba:	4603      	mov	r3, r0
 800fcbc:	817b      	strh	r3, [r7, #10]
 800fcbe:	460b      	mov	r3, r1
 800fcc0:	813b      	strh	r3, [r7, #8]
 800fcc2:	4613      	mov	r3, r2
 800fcc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800fcc6:	88fb      	ldrh	r3, [r7, #6]
 800fcc8:	b2da      	uxtb	r2, r3
 800fcca:	8979      	ldrh	r1, [r7, #10]
 800fccc:	4b20      	ldr	r3, [pc, #128]	@ (800fd50 <I2C_RequestMemoryWrite+0xa4>)
 800fcce:	9300      	str	r3, [sp, #0]
 800fcd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800fcd4:	68f8      	ldr	r0, [r7, #12]
 800fcd6:	f001 f83b 	bl	8010d50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fcda:	69fa      	ldr	r2, [r7, #28]
 800fcdc:	69b9      	ldr	r1, [r7, #24]
 800fcde:	68f8      	ldr	r0, [r7, #12]
 800fce0:	f000 fecc 	bl	8010a7c <I2C_WaitOnTXISFlagUntilTimeout>
 800fce4:	4603      	mov	r3, r0
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d001      	beq.n	800fcee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800fcea:	2301      	movs	r3, #1
 800fcec:	e02c      	b.n	800fd48 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fcee:	88fb      	ldrh	r3, [r7, #6]
 800fcf0:	2b01      	cmp	r3, #1
 800fcf2:	d105      	bne.n	800fd00 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fcf4:	893b      	ldrh	r3, [r7, #8]
 800fcf6:	b2da      	uxtb	r2, r3
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	629a      	str	r2, [r3, #40]	@ 0x28
 800fcfe:	e015      	b.n	800fd2c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fd00:	893b      	ldrh	r3, [r7, #8]
 800fd02:	0a1b      	lsrs	r3, r3, #8
 800fd04:	b29b      	uxth	r3, r3
 800fd06:	b2da      	uxtb	r2, r3
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd0e:	69fa      	ldr	r2, [r7, #28]
 800fd10:	69b9      	ldr	r1, [r7, #24]
 800fd12:	68f8      	ldr	r0, [r7, #12]
 800fd14:	f000 feb2 	bl	8010a7c <I2C_WaitOnTXISFlagUntilTimeout>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d001      	beq.n	800fd22 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800fd1e:	2301      	movs	r3, #1
 800fd20:	e012      	b.n	800fd48 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fd22:	893b      	ldrh	r3, [r7, #8]
 800fd24:	b2da      	uxtb	r2, r3
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800fd2c:	69fb      	ldr	r3, [r7, #28]
 800fd2e:	9300      	str	r3, [sp, #0]
 800fd30:	69bb      	ldr	r3, [r7, #24]
 800fd32:	2200      	movs	r2, #0
 800fd34:	2180      	movs	r1, #128	@ 0x80
 800fd36:	68f8      	ldr	r0, [r7, #12]
 800fd38:	f000 fe47 	bl	80109ca <I2C_WaitOnFlagUntilTimeout>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d001      	beq.n	800fd46 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800fd42:	2301      	movs	r3, #1
 800fd44:	e000      	b.n	800fd48 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800fd46:	2300      	movs	r3, #0
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3710      	adds	r7, #16
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}
 800fd50:	80002000 	.word	0x80002000

0800fd54 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b086      	sub	sp, #24
 800fd58:	af02      	add	r7, sp, #8
 800fd5a:	60f8      	str	r0, [r7, #12]
 800fd5c:	4608      	mov	r0, r1
 800fd5e:	4611      	mov	r1, r2
 800fd60:	461a      	mov	r2, r3
 800fd62:	4603      	mov	r3, r0
 800fd64:	817b      	strh	r3, [r7, #10]
 800fd66:	460b      	mov	r3, r1
 800fd68:	813b      	strh	r3, [r7, #8]
 800fd6a:	4613      	mov	r3, r2
 800fd6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800fd6e:	88fb      	ldrh	r3, [r7, #6]
 800fd70:	b2da      	uxtb	r2, r3
 800fd72:	8979      	ldrh	r1, [r7, #10]
 800fd74:	4b20      	ldr	r3, [pc, #128]	@ (800fdf8 <I2C_RequestMemoryRead+0xa4>)
 800fd76:	9300      	str	r3, [sp, #0]
 800fd78:	2300      	movs	r3, #0
 800fd7a:	68f8      	ldr	r0, [r7, #12]
 800fd7c:	f000 ffe8 	bl	8010d50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd80:	69fa      	ldr	r2, [r7, #28]
 800fd82:	69b9      	ldr	r1, [r7, #24]
 800fd84:	68f8      	ldr	r0, [r7, #12]
 800fd86:	f000 fe79 	bl	8010a7c <I2C_WaitOnTXISFlagUntilTimeout>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d001      	beq.n	800fd94 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800fd90:	2301      	movs	r3, #1
 800fd92:	e02c      	b.n	800fdee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fd94:	88fb      	ldrh	r3, [r7, #6]
 800fd96:	2b01      	cmp	r3, #1
 800fd98:	d105      	bne.n	800fda6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fd9a:	893b      	ldrh	r3, [r7, #8]
 800fd9c:	b2da      	uxtb	r2, r3
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	629a      	str	r2, [r3, #40]	@ 0x28
 800fda4:	e015      	b.n	800fdd2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fda6:	893b      	ldrh	r3, [r7, #8]
 800fda8:	0a1b      	lsrs	r3, r3, #8
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	b2da      	uxtb	r2, r3
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fdb4:	69fa      	ldr	r2, [r7, #28]
 800fdb6:	69b9      	ldr	r1, [r7, #24]
 800fdb8:	68f8      	ldr	r0, [r7, #12]
 800fdba:	f000 fe5f 	bl	8010a7c <I2C_WaitOnTXISFlagUntilTimeout>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d001      	beq.n	800fdc8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	e012      	b.n	800fdee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fdc8:	893b      	ldrh	r3, [r7, #8]
 800fdca:	b2da      	uxtb	r2, r3
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800fdd2:	69fb      	ldr	r3, [r7, #28]
 800fdd4:	9300      	str	r3, [sp, #0]
 800fdd6:	69bb      	ldr	r3, [r7, #24]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	2140      	movs	r1, #64	@ 0x40
 800fddc:	68f8      	ldr	r0, [r7, #12]
 800fdde:	f000 fdf4 	bl	80109ca <I2C_WaitOnFlagUntilTimeout>
 800fde2:	4603      	mov	r3, r0
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d001      	beq.n	800fdec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800fde8:	2301      	movs	r3, #1
 800fdea:	e000      	b.n	800fdee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800fdec:	2300      	movs	r3, #0
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3710      	adds	r7, #16
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
 800fdf6:	bf00      	nop
 800fdf8:	80002000 	.word	0x80002000

0800fdfc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800fe12:	2b28      	cmp	r3, #40	@ 0x28
 800fe14:	d16a      	bne.n	800feec <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	699b      	ldr	r3, [r3, #24]
 800fe1c:	0c1b      	lsrs	r3, r3, #16
 800fe1e:	b2db      	uxtb	r3, r3
 800fe20:	f003 0301 	and.w	r3, r3, #1
 800fe24:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	699b      	ldr	r3, [r3, #24]
 800fe2c:	0c1b      	lsrs	r3, r3, #16
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fe34:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	689b      	ldr	r3, [r3, #8]
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fe42:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	68db      	ldr	r3, [r3, #12]
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fe50:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	68db      	ldr	r3, [r3, #12]
 800fe56:	2b02      	cmp	r3, #2
 800fe58:	d138      	bne.n	800fecc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800fe5a:	897b      	ldrh	r3, [r7, #10]
 800fe5c:	09db      	lsrs	r3, r3, #7
 800fe5e:	b29a      	uxth	r2, r3
 800fe60:	89bb      	ldrh	r3, [r7, #12]
 800fe62:	4053      	eors	r3, r2
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	f003 0306 	and.w	r3, r3, #6
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d11c      	bne.n	800fea8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800fe6e:	897b      	ldrh	r3, [r7, #10]
 800fe70:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fe76:	1c5a      	adds	r2, r3, #1
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fe80:	2b02      	cmp	r3, #2
 800fe82:	d13b      	bne.n	800fefc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2200      	movs	r2, #0
 800fe88:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	2208      	movs	r2, #8
 800fe90:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2200      	movs	r2, #0
 800fe96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fe9a:	89ba      	ldrh	r2, [r7, #12]
 800fe9c:	7bfb      	ldrb	r3, [r7, #15]
 800fe9e:	4619      	mov	r1, r3
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f7ff f8c3 	bl	800f02c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800fea6:	e029      	b.n	800fefc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800fea8:	893b      	ldrh	r3, [r7, #8]
 800feaa:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800feac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f001 f803 	bl	8010ebc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2200      	movs	r2, #0
 800feba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800febe:	89ba      	ldrh	r2, [r7, #12]
 800fec0:	7bfb      	ldrb	r3, [r7, #15]
 800fec2:	4619      	mov	r1, r3
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f7ff f8b1 	bl	800f02c <HAL_I2C_AddrCallback>
}
 800feca:	e017      	b.n	800fefc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fecc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f000 fff3 	bl	8010ebc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2200      	movs	r2, #0
 800feda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fede:	89ba      	ldrh	r2, [r7, #12]
 800fee0:	7bfb      	ldrb	r3, [r7, #15]
 800fee2:	4619      	mov	r1, r3
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f7ff f8a1 	bl	800f02c <HAL_I2C_AddrCallback>
}
 800feea:	e007      	b.n	800fefc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	2208      	movs	r2, #8
 800fef2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2200      	movs	r2, #0
 800fef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800fefc:	bf00      	nop
 800fefe:	3710      	adds	r7, #16
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}

0800ff04 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b082      	sub	sp, #8
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ff1a:	b2db      	uxtb	r3, r3
 800ff1c:	2b21      	cmp	r3, #33	@ 0x21
 800ff1e:	d115      	bne.n	800ff4c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2220      	movs	r2, #32
 800ff24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2211      	movs	r2, #17
 800ff2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2200      	movs	r2, #0
 800ff32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ff34:	2101      	movs	r1, #1
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f000 ffc0 	bl	8010ebc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f7ff f849 	bl	800efdc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ff4a:	e014      	b.n	800ff76 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2220      	movs	r2, #32
 800ff50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2212      	movs	r2, #18
 800ff58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ff60:	2102      	movs	r1, #2
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f000 ffaa 	bl	8010ebc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f7ff f83d 	bl	800eff0 <HAL_I2C_MasterRxCpltCallback>
}
 800ff76:	bf00      	nop
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b084      	sub	sp, #16
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2200      	movs	r2, #0
 800ff92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d008      	beq.n	800ffb2 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	681a      	ldr	r2, [r3, #0]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ffae:	601a      	str	r2, [r3, #0]
 800ffb0:	e00c      	b.n	800ffcc <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d007      	beq.n	800ffcc <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	681a      	ldr	r2, [r3, #0]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ffca:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ffd2:	b2db      	uxtb	r3, r3
 800ffd4:	2b29      	cmp	r3, #41	@ 0x29
 800ffd6:	d112      	bne.n	800fffe <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2228      	movs	r2, #40	@ 0x28
 800ffdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2221      	movs	r2, #33	@ 0x21
 800ffe4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ffe6:	2101      	movs	r1, #1
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f000 ff67 	bl	8010ebc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2200      	movs	r2, #0
 800fff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f7ff f804 	bl	800f004 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800fffc:	e017      	b.n	801002e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010004:	b2db      	uxtb	r3, r3
 8010006:	2b2a      	cmp	r3, #42	@ 0x2a
 8010008:	d111      	bne.n	801002e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2228      	movs	r2, #40	@ 0x28
 801000e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2222      	movs	r2, #34	@ 0x22
 8010016:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010018:	2102      	movs	r1, #2
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f000 ff4e 	bl	8010ebc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2200      	movs	r2, #0
 8010024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f7fe fff5 	bl	800f018 <HAL_I2C_SlaveRxCpltCallback>
}
 801002e:	bf00      	nop
 8010030:	3710      	adds	r7, #16
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}
	...

08010038 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b086      	sub	sp, #24
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	2220      	movs	r2, #32
 801004c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010054:	b2db      	uxtb	r3, r3
 8010056:	2b21      	cmp	r3, #33	@ 0x21
 8010058:	d107      	bne.n	801006a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801005a:	2101      	movs	r1, #1
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f000 ff2d 	bl	8010ebc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2211      	movs	r2, #17
 8010066:	631a      	str	r2, [r3, #48]	@ 0x30
 8010068:	e00c      	b.n	8010084 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010070:	b2db      	uxtb	r3, r3
 8010072:	2b22      	cmp	r3, #34	@ 0x22
 8010074:	d106      	bne.n	8010084 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010076:	2102      	movs	r1, #2
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f000 ff1f 	bl	8010ebc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2212      	movs	r2, #18
 8010082:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	6859      	ldr	r1, [r3, #4]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	4b4c      	ldr	r3, [pc, #304]	@ (80101c0 <I2C_ITMasterCplt+0x188>)
 8010090:	400b      	ands	r3, r1
 8010092:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2200      	movs	r2, #0
 8010098:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	4a49      	ldr	r2, [pc, #292]	@ (80101c4 <I2C_ITMasterCplt+0x18c>)
 801009e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	f003 0310 	and.w	r3, r3, #16
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d009      	beq.n	80100be <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	2210      	movs	r2, #16
 80100b0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100b6:	f043 0204 	orr.w	r2, r3, #4
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100c4:	b2db      	uxtb	r3, r3
 80100c6:	2b60      	cmp	r3, #96	@ 0x60
 80100c8:	d10a      	bne.n	80100e0 <I2C_ITMasterCplt+0xa8>
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	f003 0304 	and.w	r3, r3, #4
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d005      	beq.n	80100e0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80100de:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f000 fc30 	bl	8010946 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100ea:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100f2:	b2db      	uxtb	r3, r3
 80100f4:	2b60      	cmp	r3, #96	@ 0x60
 80100f6:	d002      	beq.n	80100fe <I2C_ITMasterCplt+0xc6>
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d006      	beq.n	801010c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010102:	4619      	mov	r1, r3
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f000 fb07 	bl	8010718 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 801010a:	e054      	b.n	80101b6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010112:	b2db      	uxtb	r3, r3
 8010114:	2b21      	cmp	r3, #33	@ 0x21
 8010116:	d124      	bne.n	8010162 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2220      	movs	r2, #32
 801011c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2200      	movs	r2, #0
 8010124:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801012c:	b2db      	uxtb	r3, r3
 801012e:	2b40      	cmp	r3, #64	@ 0x40
 8010130:	d10b      	bne.n	801014a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2200      	movs	r2, #0
 8010136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2200      	movs	r2, #0
 801013e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f7fe ff8a 	bl	800f05c <HAL_I2C_MemTxCpltCallback>
}
 8010148:	e035      	b.n	80101b6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2200      	movs	r2, #0
 801014e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2200      	movs	r2, #0
 8010156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f7fe ff3e 	bl	800efdc <HAL_I2C_MasterTxCpltCallback>
}
 8010160:	e029      	b.n	80101b6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010168:	b2db      	uxtb	r3, r3
 801016a:	2b22      	cmp	r3, #34	@ 0x22
 801016c:	d123      	bne.n	80101b6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2220      	movs	r2, #32
 8010172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2200      	movs	r2, #0
 801017a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010182:	b2db      	uxtb	r3, r3
 8010184:	2b40      	cmp	r3, #64	@ 0x40
 8010186:	d10b      	bne.n	80101a0 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2200      	movs	r2, #0
 801018c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2200      	movs	r2, #0
 8010194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f7f6 fa3d 	bl	8006618 <HAL_I2C_MemRxCpltCallback>
}
 801019e:	e00a      	b.n	80101b6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2200      	movs	r2, #0
 80101a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2200      	movs	r2, #0
 80101ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f7fe ff1d 	bl	800eff0 <HAL_I2C_MasterRxCpltCallback>
}
 80101b6:	bf00      	nop
 80101b8:	3718      	adds	r7, #24
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	fe00e800 	.word	0xfe00e800
 80101c4:	ffff0000 	.word	0xffff0000

080101c8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b086      	sub	sp, #24
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101e2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80101ea:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	2220      	movs	r2, #32
 80101f2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80101f4:	7afb      	ldrb	r3, [r7, #11]
 80101f6:	2b21      	cmp	r3, #33	@ 0x21
 80101f8:	d002      	beq.n	8010200 <I2C_ITSlaveCplt+0x38>
 80101fa:	7afb      	ldrb	r3, [r7, #11]
 80101fc:	2b29      	cmp	r3, #41	@ 0x29
 80101fe:	d108      	bne.n	8010212 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8010200:	f248 0101 	movw	r1, #32769	@ 0x8001
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f000 fe59 	bl	8010ebc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2221      	movs	r2, #33	@ 0x21
 801020e:	631a      	str	r2, [r3, #48]	@ 0x30
 8010210:	e019      	b.n	8010246 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010212:	7afb      	ldrb	r3, [r7, #11]
 8010214:	2b22      	cmp	r3, #34	@ 0x22
 8010216:	d002      	beq.n	801021e <I2C_ITSlaveCplt+0x56>
 8010218:	7afb      	ldrb	r3, [r7, #11]
 801021a:	2b2a      	cmp	r3, #42	@ 0x2a
 801021c:	d108      	bne.n	8010230 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 801021e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8010222:	6878      	ldr	r0, [r7, #4]
 8010224:	f000 fe4a 	bl	8010ebc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2222      	movs	r2, #34	@ 0x22
 801022c:	631a      	str	r2, [r3, #48]	@ 0x30
 801022e:	e00a      	b.n	8010246 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8010230:	7afb      	ldrb	r3, [r7, #11]
 8010232:	2b28      	cmp	r3, #40	@ 0x28
 8010234:	d107      	bne.n	8010246 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8010236:	f248 0103 	movw	r1, #32771	@ 0x8003
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f000 fe3e 	bl	8010ebc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2200      	movs	r2, #0
 8010244:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	685a      	ldr	r2, [r3, #4]
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010254:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	6859      	ldr	r1, [r3, #4]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	4b7f      	ldr	r3, [pc, #508]	@ (8010460 <I2C_ITSlaveCplt+0x298>)
 8010262:	400b      	ands	r3, r1
 8010264:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f000 fb6d 	bl	8010946 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801026c:	693b      	ldr	r3, [r7, #16]
 801026e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010272:	2b00      	cmp	r3, #0
 8010274:	d07a      	beq.n	801036c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	681a      	ldr	r2, [r3, #0]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010284:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801028a:	2b00      	cmp	r3, #0
 801028c:	f000 8111 	beq.w	80104b2 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	4a73      	ldr	r2, [pc, #460]	@ (8010464 <I2C_ITSlaveCplt+0x29c>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d059      	beq.n	8010350 <I2C_ITSlaveCplt+0x188>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	4a71      	ldr	r2, [pc, #452]	@ (8010468 <I2C_ITSlaveCplt+0x2a0>)
 80102a4:	4293      	cmp	r3, r2
 80102a6:	d053      	beq.n	8010350 <I2C_ITSlaveCplt+0x188>
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	4a6f      	ldr	r2, [pc, #444]	@ (801046c <I2C_ITSlaveCplt+0x2a4>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d04d      	beq.n	8010350 <I2C_ITSlaveCplt+0x188>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	4a6d      	ldr	r2, [pc, #436]	@ (8010470 <I2C_ITSlaveCplt+0x2a8>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d047      	beq.n	8010350 <I2C_ITSlaveCplt+0x188>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	4a6b      	ldr	r2, [pc, #428]	@ (8010474 <I2C_ITSlaveCplt+0x2ac>)
 80102c8:	4293      	cmp	r3, r2
 80102ca:	d041      	beq.n	8010350 <I2C_ITSlaveCplt+0x188>
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	4a69      	ldr	r2, [pc, #420]	@ (8010478 <I2C_ITSlaveCplt+0x2b0>)
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d03b      	beq.n	8010350 <I2C_ITSlaveCplt+0x188>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	4a67      	ldr	r2, [pc, #412]	@ (801047c <I2C_ITSlaveCplt+0x2b4>)
 80102e0:	4293      	cmp	r3, r2
 80102e2:	d035      	beq.n	8010350 <I2C_ITSlaveCplt+0x188>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	4a65      	ldr	r2, [pc, #404]	@ (8010480 <I2C_ITSlaveCplt+0x2b8>)
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d02f      	beq.n	8010350 <I2C_ITSlaveCplt+0x188>
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	4a63      	ldr	r2, [pc, #396]	@ (8010484 <I2C_ITSlaveCplt+0x2bc>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d029      	beq.n	8010350 <I2C_ITSlaveCplt+0x188>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	4a61      	ldr	r2, [pc, #388]	@ (8010488 <I2C_ITSlaveCplt+0x2c0>)
 8010304:	4293      	cmp	r3, r2
 8010306:	d023      	beq.n	8010350 <I2C_ITSlaveCplt+0x188>
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	4a5f      	ldr	r2, [pc, #380]	@ (801048c <I2C_ITSlaveCplt+0x2c4>)
 8010310:	4293      	cmp	r3, r2
 8010312:	d01d      	beq.n	8010350 <I2C_ITSlaveCplt+0x188>
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	4a5d      	ldr	r2, [pc, #372]	@ (8010490 <I2C_ITSlaveCplt+0x2c8>)
 801031c:	4293      	cmp	r3, r2
 801031e:	d017      	beq.n	8010350 <I2C_ITSlaveCplt+0x188>
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4a5b      	ldr	r2, [pc, #364]	@ (8010494 <I2C_ITSlaveCplt+0x2cc>)
 8010328:	4293      	cmp	r3, r2
 801032a:	d011      	beq.n	8010350 <I2C_ITSlaveCplt+0x188>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	4a59      	ldr	r2, [pc, #356]	@ (8010498 <I2C_ITSlaveCplt+0x2d0>)
 8010334:	4293      	cmp	r3, r2
 8010336:	d00b      	beq.n	8010350 <I2C_ITSlaveCplt+0x188>
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	4a57      	ldr	r2, [pc, #348]	@ (801049c <I2C_ITSlaveCplt+0x2d4>)
 8010340:	4293      	cmp	r3, r2
 8010342:	d005      	beq.n	8010350 <I2C_ITSlaveCplt+0x188>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	4a55      	ldr	r2, [pc, #340]	@ (80104a0 <I2C_ITSlaveCplt+0x2d8>)
 801034c:	4293      	cmp	r3, r2
 801034e:	d105      	bne.n	801035c <I2C_ITSlaveCplt+0x194>
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	685b      	ldr	r3, [r3, #4]
 8010358:	b29b      	uxth	r3, r3
 801035a:	e004      	b.n	8010366 <I2C_ITSlaveCplt+0x19e>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	b29b      	uxth	r3, r3
 8010366:	687a      	ldr	r2, [r7, #4]
 8010368:	8553      	strh	r3, [r2, #42]	@ 0x2a
 801036a:	e0a2      	b.n	80104b2 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801036c:	693b      	ldr	r3, [r7, #16]
 801036e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010372:	2b00      	cmp	r3, #0
 8010374:	f000 809d 	beq.w	80104b2 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	681a      	ldr	r2, [r3, #0]
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010386:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801038c:	2b00      	cmp	r3, #0
 801038e:	f000 8090 	beq.w	80104b2 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	4a32      	ldr	r2, [pc, #200]	@ (8010464 <I2C_ITSlaveCplt+0x29c>)
 801039a:	4293      	cmp	r3, r2
 801039c:	d059      	beq.n	8010452 <I2C_ITSlaveCplt+0x28a>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	4a30      	ldr	r2, [pc, #192]	@ (8010468 <I2C_ITSlaveCplt+0x2a0>)
 80103a6:	4293      	cmp	r3, r2
 80103a8:	d053      	beq.n	8010452 <I2C_ITSlaveCplt+0x28a>
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4a2e      	ldr	r2, [pc, #184]	@ (801046c <I2C_ITSlaveCplt+0x2a4>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d04d      	beq.n	8010452 <I2C_ITSlaveCplt+0x28a>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	4a2c      	ldr	r2, [pc, #176]	@ (8010470 <I2C_ITSlaveCplt+0x2a8>)
 80103be:	4293      	cmp	r3, r2
 80103c0:	d047      	beq.n	8010452 <I2C_ITSlaveCplt+0x28a>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	4a2a      	ldr	r2, [pc, #168]	@ (8010474 <I2C_ITSlaveCplt+0x2ac>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d041      	beq.n	8010452 <I2C_ITSlaveCplt+0x28a>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	4a28      	ldr	r2, [pc, #160]	@ (8010478 <I2C_ITSlaveCplt+0x2b0>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d03b      	beq.n	8010452 <I2C_ITSlaveCplt+0x28a>
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	4a26      	ldr	r2, [pc, #152]	@ (801047c <I2C_ITSlaveCplt+0x2b4>)
 80103e2:	4293      	cmp	r3, r2
 80103e4:	d035      	beq.n	8010452 <I2C_ITSlaveCplt+0x28a>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	4a24      	ldr	r2, [pc, #144]	@ (8010480 <I2C_ITSlaveCplt+0x2b8>)
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d02f      	beq.n	8010452 <I2C_ITSlaveCplt+0x28a>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4a22      	ldr	r2, [pc, #136]	@ (8010484 <I2C_ITSlaveCplt+0x2bc>)
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d029      	beq.n	8010452 <I2C_ITSlaveCplt+0x28a>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	4a20      	ldr	r2, [pc, #128]	@ (8010488 <I2C_ITSlaveCplt+0x2c0>)
 8010406:	4293      	cmp	r3, r2
 8010408:	d023      	beq.n	8010452 <I2C_ITSlaveCplt+0x28a>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4a1e      	ldr	r2, [pc, #120]	@ (801048c <I2C_ITSlaveCplt+0x2c4>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d01d      	beq.n	8010452 <I2C_ITSlaveCplt+0x28a>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	4a1c      	ldr	r2, [pc, #112]	@ (8010490 <I2C_ITSlaveCplt+0x2c8>)
 801041e:	4293      	cmp	r3, r2
 8010420:	d017      	beq.n	8010452 <I2C_ITSlaveCplt+0x28a>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4a1a      	ldr	r2, [pc, #104]	@ (8010494 <I2C_ITSlaveCplt+0x2cc>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d011      	beq.n	8010452 <I2C_ITSlaveCplt+0x28a>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4a18      	ldr	r2, [pc, #96]	@ (8010498 <I2C_ITSlaveCplt+0x2d0>)
 8010436:	4293      	cmp	r3, r2
 8010438:	d00b      	beq.n	8010452 <I2C_ITSlaveCplt+0x28a>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	4a16      	ldr	r2, [pc, #88]	@ (801049c <I2C_ITSlaveCplt+0x2d4>)
 8010442:	4293      	cmp	r3, r2
 8010444:	d005      	beq.n	8010452 <I2C_ITSlaveCplt+0x28a>
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4a14      	ldr	r2, [pc, #80]	@ (80104a0 <I2C_ITSlaveCplt+0x2d8>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d128      	bne.n	80104a4 <I2C_ITSlaveCplt+0x2dc>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	b29b      	uxth	r3, r3
 801045c:	e027      	b.n	80104ae <I2C_ITSlaveCplt+0x2e6>
 801045e:	bf00      	nop
 8010460:	fe00e800 	.word	0xfe00e800
 8010464:	40020010 	.word	0x40020010
 8010468:	40020028 	.word	0x40020028
 801046c:	40020040 	.word	0x40020040
 8010470:	40020058 	.word	0x40020058
 8010474:	40020070 	.word	0x40020070
 8010478:	40020088 	.word	0x40020088
 801047c:	400200a0 	.word	0x400200a0
 8010480:	400200b8 	.word	0x400200b8
 8010484:	40020410 	.word	0x40020410
 8010488:	40020428 	.word	0x40020428
 801048c:	40020440 	.word	0x40020440
 8010490:	40020458 	.word	0x40020458
 8010494:	40020470 	.word	0x40020470
 8010498:	40020488 	.word	0x40020488
 801049c:	400204a0 	.word	0x400204a0
 80104a0:	400204b8 	.word	0x400204b8
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	685b      	ldr	r3, [r3, #4]
 80104ac:	b29b      	uxth	r3, r3
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	f003 0304 	and.w	r3, r3, #4
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d020      	beq.n	80104fe <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	f023 0304 	bic.w	r3, r3, #4
 80104c2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104ce:	b2d2      	uxtb	r2, r2
 80104d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104d6:	1c5a      	adds	r2, r3, #1
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d00c      	beq.n	80104fe <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104e8:	3b01      	subs	r3, #1
 80104ea:	b29a      	uxth	r2, r3
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104f4:	b29b      	uxth	r3, r3
 80104f6:	3b01      	subs	r3, #1
 80104f8:	b29a      	uxth	r2, r3
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010502:	b29b      	uxth	r3, r3
 8010504:	2b00      	cmp	r3, #0
 8010506:	d005      	beq.n	8010514 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801050c:	f043 0204 	orr.w	r2, r3, #4
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	f003 0310 	and.w	r3, r3, #16
 801051a:	2b00      	cmp	r3, #0
 801051c:	d049      	beq.n	80105b2 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 801051e:	693b      	ldr	r3, [r7, #16]
 8010520:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010524:	2b00      	cmp	r3, #0
 8010526:	d044      	beq.n	80105b2 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801052c:	b29b      	uxth	r3, r3
 801052e:	2b00      	cmp	r3, #0
 8010530:	d128      	bne.n	8010584 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010538:	b2db      	uxtb	r3, r3
 801053a:	2b28      	cmp	r3, #40	@ 0x28
 801053c:	d108      	bne.n	8010550 <I2C_ITSlaveCplt+0x388>
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010544:	d104      	bne.n	8010550 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8010546:	6979      	ldr	r1, [r7, #20]
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f000 f891 	bl	8010670 <I2C_ITListenCplt>
 801054e:	e030      	b.n	80105b2 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010556:	b2db      	uxtb	r3, r3
 8010558:	2b29      	cmp	r3, #41	@ 0x29
 801055a:	d10e      	bne.n	801057a <I2C_ITSlaveCplt+0x3b2>
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8010562:	d00a      	beq.n	801057a <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2210      	movs	r2, #16
 801056a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801056c:	6878      	ldr	r0, [r7, #4]
 801056e:	f000 f9ea 	bl	8010946 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f7ff fd03 	bl	800ff7e <I2C_ITSlaveSeqCplt>
 8010578:	e01b      	b.n	80105b2 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	2210      	movs	r2, #16
 8010580:	61da      	str	r2, [r3, #28]
 8010582:	e016      	b.n	80105b2 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	2210      	movs	r2, #16
 801058a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010590:	f043 0204 	orr.w	r2, r3, #4
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d003      	beq.n	80105a6 <I2C_ITSlaveCplt+0x3de>
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80105a4:	d105      	bne.n	80105b2 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105aa:	4619      	mov	r1, r3
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f000 f8b3 	bl	8010718 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2200      	movs	r2, #0
 80105b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2200      	movs	r2, #0
 80105be:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d010      	beq.n	80105ea <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105cc:	4619      	mov	r1, r3
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f000 f8a2 	bl	8010718 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	2b28      	cmp	r3, #40	@ 0x28
 80105de:	d141      	bne.n	8010664 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80105e0:	6979      	ldr	r1, [r7, #20]
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	f000 f844 	bl	8010670 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80105e8:	e03c      	b.n	8010664 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80105f2:	d014      	beq.n	801061e <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	f7ff fcc2 	bl	800ff7e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	4a1b      	ldr	r2, [pc, #108]	@ (801066c <I2C_ITSlaveCplt+0x4a4>)
 80105fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2220      	movs	r2, #32
 8010604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2200      	movs	r2, #0
 801060c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2200      	movs	r2, #0
 8010612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f7fe fd16 	bl	800f048 <HAL_I2C_ListenCpltCallback>
}
 801061c:	e022      	b.n	8010664 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010624:	b2db      	uxtb	r3, r3
 8010626:	2b22      	cmp	r3, #34	@ 0x22
 8010628:	d10e      	bne.n	8010648 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2220      	movs	r2, #32
 801062e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2200      	movs	r2, #0
 8010636:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2200      	movs	r2, #0
 801063c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f7fe fce9 	bl	800f018 <HAL_I2C_SlaveRxCpltCallback>
}
 8010646:	e00d      	b.n	8010664 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2220      	movs	r2, #32
 801064c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2200      	movs	r2, #0
 8010654:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2200      	movs	r2, #0
 801065a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f7fe fcd0 	bl	800f004 <HAL_I2C_SlaveTxCpltCallback>
}
 8010664:	bf00      	nop
 8010666:	3718      	adds	r7, #24
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}
 801066c:	ffff0000 	.word	0xffff0000

08010670 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b082      	sub	sp, #8
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	4a25      	ldr	r2, [pc, #148]	@ (8010714 <I2C_ITListenCplt+0xa4>)
 801067e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2200      	movs	r2, #0
 8010684:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2220      	movs	r2, #32
 801068a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2200      	movs	r2, #0
 8010692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2200      	movs	r2, #0
 801069a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	f003 0304 	and.w	r3, r3, #4
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d022      	beq.n	80106ec <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106b0:	b2d2      	uxtb	r2, r2
 80106b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106b8:	1c5a      	adds	r2, r3, #1
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d012      	beq.n	80106ec <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106ca:	3b01      	subs	r3, #1
 80106cc:	b29a      	uxth	r2, r3
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	3b01      	subs	r3, #1
 80106da:	b29a      	uxth	r2, r3
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106e4:	f043 0204 	orr.w	r2, r3, #4
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80106ec:	f248 0103 	movw	r1, #32771	@ 0x8003
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f000 fbe3 	bl	8010ebc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	2210      	movs	r2, #16
 80106fc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2200      	movs	r2, #0
 8010702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f7fe fc9e 	bl	800f048 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801070c:	bf00      	nop
 801070e:	3708      	adds	r7, #8
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}
 8010714:	ffff0000 	.word	0xffff0000

08010718 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010728:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2200      	movs	r2, #0
 801072e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	4a6d      	ldr	r2, [pc, #436]	@ (80108ec <I2C_ITError+0x1d4>)
 8010736:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2200      	movs	r2, #0
 801073c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	431a      	orrs	r2, r3
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801074a:	7bfb      	ldrb	r3, [r7, #15]
 801074c:	2b28      	cmp	r3, #40	@ 0x28
 801074e:	d005      	beq.n	801075c <I2C_ITError+0x44>
 8010750:	7bfb      	ldrb	r3, [r7, #15]
 8010752:	2b29      	cmp	r3, #41	@ 0x29
 8010754:	d002      	beq.n	801075c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8010756:	7bfb      	ldrb	r3, [r7, #15]
 8010758:	2b2a      	cmp	r3, #42	@ 0x2a
 801075a:	d10b      	bne.n	8010774 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801075c:	2103      	movs	r1, #3
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f000 fbac 	bl	8010ebc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2228      	movs	r2, #40	@ 0x28
 8010768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	4a60      	ldr	r2, [pc, #384]	@ (80108f0 <I2C_ITError+0x1d8>)
 8010770:	635a      	str	r2, [r3, #52]	@ 0x34
 8010772:	e030      	b.n	80107d6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010774:	f248 0103 	movw	r1, #32771	@ 0x8003
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f000 fb9f 	bl	8010ebc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f000 f8e1 	bl	8010946 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801078a:	b2db      	uxtb	r3, r3
 801078c:	2b60      	cmp	r3, #96	@ 0x60
 801078e:	d01f      	beq.n	80107d0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2220      	movs	r2, #32
 8010794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	699b      	ldr	r3, [r3, #24]
 801079e:	f003 0320 	and.w	r3, r3, #32
 80107a2:	2b20      	cmp	r3, #32
 80107a4:	d114      	bne.n	80107d0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	699b      	ldr	r3, [r3, #24]
 80107ac:	f003 0310 	and.w	r3, r3, #16
 80107b0:	2b10      	cmp	r3, #16
 80107b2:	d109      	bne.n	80107c8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	2210      	movs	r2, #16
 80107ba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107c0:	f043 0204 	orr.w	r2, r3, #4
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	2220      	movs	r2, #32
 80107ce:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2200      	movs	r2, #0
 80107d4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107da:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d039      	beq.n	8010858 <I2C_ITError+0x140>
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	2b11      	cmp	r3, #17
 80107e8:	d002      	beq.n	80107f0 <I2C_ITError+0xd8>
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	2b21      	cmp	r3, #33	@ 0x21
 80107ee:	d133      	bne.n	8010858 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80107fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80107fe:	d107      	bne.n	8010810 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801080e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010814:	4618      	mov	r0, r3
 8010816:	f7fd f9f7 	bl	800dc08 <HAL_DMA_GetState>
 801081a:	4603      	mov	r3, r0
 801081c:	2b01      	cmp	r3, #1
 801081e:	d017      	beq.n	8010850 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010824:	4a33      	ldr	r2, [pc, #204]	@ (80108f4 <I2C_ITError+0x1dc>)
 8010826:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2200      	movs	r2, #0
 801082c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010834:	4618      	mov	r0, r3
 8010836:	f7fc f877 	bl	800c928 <HAL_DMA_Abort_IT>
 801083a:	4603      	mov	r3, r0
 801083c:	2b00      	cmp	r3, #0
 801083e:	d04d      	beq.n	80108dc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 801084a:	4610      	mov	r0, r2
 801084c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801084e:	e045      	b.n	80108dc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f000 f851 	bl	80108f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010856:	e041      	b.n	80108dc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801085c:	2b00      	cmp	r3, #0
 801085e:	d039      	beq.n	80108d4 <I2C_ITError+0x1bc>
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	2b12      	cmp	r3, #18
 8010864:	d002      	beq.n	801086c <I2C_ITError+0x154>
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	2b22      	cmp	r3, #34	@ 0x22
 801086a:	d133      	bne.n	80108d4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010876:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801087a:	d107      	bne.n	801088c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	681a      	ldr	r2, [r3, #0]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801088a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010890:	4618      	mov	r0, r3
 8010892:	f7fd f9b9 	bl	800dc08 <HAL_DMA_GetState>
 8010896:	4603      	mov	r3, r0
 8010898:	2b01      	cmp	r3, #1
 801089a:	d017      	beq.n	80108cc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108a0:	4a14      	ldr	r2, [pc, #80]	@ (80108f4 <I2C_ITError+0x1dc>)
 80108a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2200      	movs	r2, #0
 80108a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7fc f839 	bl	800c928 <HAL_DMA_Abort_IT>
 80108b6:	4603      	mov	r3, r0
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d011      	beq.n	80108e0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80108c2:	687a      	ldr	r2, [r7, #4]
 80108c4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80108c6:	4610      	mov	r0, r2
 80108c8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80108ca:	e009      	b.n	80108e0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	f000 f813 	bl	80108f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80108d2:	e005      	b.n	80108e0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f000 f80f 	bl	80108f8 <I2C_TreatErrorCallback>
  }
}
 80108da:	e002      	b.n	80108e2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80108dc:	bf00      	nop
 80108de:	e000      	b.n	80108e2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80108e0:	bf00      	nop
}
 80108e2:	bf00      	nop
 80108e4:	3710      	adds	r7, #16
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}
 80108ea:	bf00      	nop
 80108ec:	ffff0000 	.word	0xffff0000
 80108f0:	0800f2e5 	.word	0x0800f2e5
 80108f4:	0801098f 	.word	0x0801098f

080108f8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010906:	b2db      	uxtb	r3, r3
 8010908:	2b60      	cmp	r3, #96	@ 0x60
 801090a:	d10e      	bne.n	801092a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2220      	movs	r2, #32
 8010910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2200      	movs	r2, #0
 8010918:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2200      	movs	r2, #0
 801091e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f7fe fbae 	bl	800f084 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010928:	e009      	b.n	801093e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2200      	movs	r2, #0
 801092e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2200      	movs	r2, #0
 8010934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f7fe fb99 	bl	800f070 <HAL_I2C_ErrorCallback>
}
 801093e:	bf00      	nop
 8010940:	3708      	adds	r7, #8
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}

08010946 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8010946:	b480      	push	{r7}
 8010948:	b083      	sub	sp, #12
 801094a:	af00      	add	r7, sp, #0
 801094c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	699b      	ldr	r3, [r3, #24]
 8010954:	f003 0302 	and.w	r3, r3, #2
 8010958:	2b02      	cmp	r3, #2
 801095a:	d103      	bne.n	8010964 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	2200      	movs	r2, #0
 8010962:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	699b      	ldr	r3, [r3, #24]
 801096a:	f003 0301 	and.w	r3, r3, #1
 801096e:	2b01      	cmp	r3, #1
 8010970:	d007      	beq.n	8010982 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	699a      	ldr	r2, [r3, #24]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	f042 0201 	orr.w	r2, r2, #1
 8010980:	619a      	str	r2, [r3, #24]
  }
}
 8010982:	bf00      	nop
 8010984:	370c      	adds	r7, #12
 8010986:	46bd      	mov	sp, r7
 8010988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098c:	4770      	bx	lr

0801098e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801098e:	b580      	push	{r7, lr}
 8010990:	b084      	sub	sp, #16
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801099a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d003      	beq.n	80109ac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109a8:	2200      	movs	r2, #0
 80109aa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d003      	beq.n	80109bc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80109b8:	2200      	movs	r2, #0
 80109ba:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80109bc:	68f8      	ldr	r0, [r7, #12]
 80109be:	f7ff ff9b 	bl	80108f8 <I2C_TreatErrorCallback>
}
 80109c2:	bf00      	nop
 80109c4:	3710      	adds	r7, #16
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}

080109ca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80109ca:	b580      	push	{r7, lr}
 80109cc:	b084      	sub	sp, #16
 80109ce:	af00      	add	r7, sp, #0
 80109d0:	60f8      	str	r0, [r7, #12]
 80109d2:	60b9      	str	r1, [r7, #8]
 80109d4:	603b      	str	r3, [r7, #0]
 80109d6:	4613      	mov	r3, r2
 80109d8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80109da:	e03b      	b.n	8010a54 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80109dc:	69ba      	ldr	r2, [r7, #24]
 80109de:	6839      	ldr	r1, [r7, #0]
 80109e0:	68f8      	ldr	r0, [r7, #12]
 80109e2:	f000 f8d5 	bl	8010b90 <I2C_IsErrorOccurred>
 80109e6:	4603      	mov	r3, r0
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d001      	beq.n	80109f0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80109ec:	2301      	movs	r3, #1
 80109ee:	e041      	b.n	8010a74 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109f6:	d02d      	beq.n	8010a54 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80109f8:	f7f8 fd80 	bl	80094fc <HAL_GetTick>
 80109fc:	4602      	mov	r2, r0
 80109fe:	69bb      	ldr	r3, [r7, #24]
 8010a00:	1ad3      	subs	r3, r2, r3
 8010a02:	683a      	ldr	r2, [r7, #0]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d302      	bcc.n	8010a0e <I2C_WaitOnFlagUntilTimeout+0x44>
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d122      	bne.n	8010a54 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	699a      	ldr	r2, [r3, #24]
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	4013      	ands	r3, r2
 8010a18:	68ba      	ldr	r2, [r7, #8]
 8010a1a:	429a      	cmp	r2, r3
 8010a1c:	bf0c      	ite	eq
 8010a1e:	2301      	moveq	r3, #1
 8010a20:	2300      	movne	r3, #0
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	461a      	mov	r2, r3
 8010a26:	79fb      	ldrb	r3, [r7, #7]
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	d113      	bne.n	8010a54 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a30:	f043 0220 	orr.w	r2, r3, #32
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	2220      	movs	r2, #32
 8010a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	2200      	movs	r2, #0
 8010a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8010a50:	2301      	movs	r3, #1
 8010a52:	e00f      	b.n	8010a74 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	699a      	ldr	r2, [r3, #24]
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	4013      	ands	r3, r2
 8010a5e:	68ba      	ldr	r2, [r7, #8]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	bf0c      	ite	eq
 8010a64:	2301      	moveq	r3, #1
 8010a66:	2300      	movne	r3, #0
 8010a68:	b2db      	uxtb	r3, r3
 8010a6a:	461a      	mov	r2, r3
 8010a6c:	79fb      	ldrb	r3, [r7, #7]
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	d0b4      	beq.n	80109dc <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010a72:	2300      	movs	r3, #0
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3710      	adds	r7, #16
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b084      	sub	sp, #16
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	60f8      	str	r0, [r7, #12]
 8010a84:	60b9      	str	r1, [r7, #8]
 8010a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010a88:	e033      	b.n	8010af2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010a8a:	687a      	ldr	r2, [r7, #4]
 8010a8c:	68b9      	ldr	r1, [r7, #8]
 8010a8e:	68f8      	ldr	r0, [r7, #12]
 8010a90:	f000 f87e 	bl	8010b90 <I2C_IsErrorOccurred>
 8010a94:	4603      	mov	r3, r0
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d001      	beq.n	8010a9e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	e031      	b.n	8010b02 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aa4:	d025      	beq.n	8010af2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010aa6:	f7f8 fd29 	bl	80094fc <HAL_GetTick>
 8010aaa:	4602      	mov	r2, r0
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	1ad3      	subs	r3, r2, r3
 8010ab0:	68ba      	ldr	r2, [r7, #8]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d302      	bcc.n	8010abc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d11a      	bne.n	8010af2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	699b      	ldr	r3, [r3, #24]
 8010ac2:	f003 0302 	and.w	r3, r3, #2
 8010ac6:	2b02      	cmp	r3, #2
 8010ac8:	d013      	beq.n	8010af2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ace:	f043 0220 	orr.w	r2, r3, #32
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2220      	movs	r2, #32
 8010ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	2200      	movs	r2, #0
 8010aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010aee:	2301      	movs	r3, #1
 8010af0:	e007      	b.n	8010b02 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	699b      	ldr	r3, [r3, #24]
 8010af8:	f003 0302 	and.w	r3, r3, #2
 8010afc:	2b02      	cmp	r3, #2
 8010afe:	d1c4      	bne.n	8010a8a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8010b00:	2300      	movs	r3, #0
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	3710      	adds	r7, #16
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}

08010b0a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010b0a:	b580      	push	{r7, lr}
 8010b0c:	b084      	sub	sp, #16
 8010b0e:	af00      	add	r7, sp, #0
 8010b10:	60f8      	str	r0, [r7, #12]
 8010b12:	60b9      	str	r1, [r7, #8]
 8010b14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010b16:	e02f      	b.n	8010b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b18:	687a      	ldr	r2, [r7, #4]
 8010b1a:	68b9      	ldr	r1, [r7, #8]
 8010b1c:	68f8      	ldr	r0, [r7, #12]
 8010b1e:	f000 f837 	bl	8010b90 <I2C_IsErrorOccurred>
 8010b22:	4603      	mov	r3, r0
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d001      	beq.n	8010b2c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010b28:	2301      	movs	r3, #1
 8010b2a:	e02d      	b.n	8010b88 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b2c:	f7f8 fce6 	bl	80094fc <HAL_GetTick>
 8010b30:	4602      	mov	r2, r0
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	1ad3      	subs	r3, r2, r3
 8010b36:	68ba      	ldr	r2, [r7, #8]
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d302      	bcc.n	8010b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d11a      	bne.n	8010b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	699b      	ldr	r3, [r3, #24]
 8010b48:	f003 0320 	and.w	r3, r3, #32
 8010b4c:	2b20      	cmp	r3, #32
 8010b4e:	d013      	beq.n	8010b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b54:	f043 0220 	orr.w	r2, r3, #32
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	2220      	movs	r2, #32
 8010b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	2200      	movs	r2, #0
 8010b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8010b74:	2301      	movs	r3, #1
 8010b76:	e007      	b.n	8010b88 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	699b      	ldr	r3, [r3, #24]
 8010b7e:	f003 0320 	and.w	r3, r3, #32
 8010b82:	2b20      	cmp	r3, #32
 8010b84:	d1c8      	bne.n	8010b18 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010b86:	2300      	movs	r3, #0
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3710      	adds	r7, #16
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}

08010b90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b08a      	sub	sp, #40	@ 0x28
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	60f8      	str	r0, [r7, #12]
 8010b98:	60b9      	str	r1, [r7, #8]
 8010b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	699b      	ldr	r3, [r3, #24]
 8010ba8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8010baa:	2300      	movs	r3, #0
 8010bac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8010bb2:	69bb      	ldr	r3, [r7, #24]
 8010bb4:	f003 0310 	and.w	r3, r3, #16
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d068      	beq.n	8010c8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	2210      	movs	r2, #16
 8010bc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010bc4:	e049      	b.n	8010c5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010bc6:	68bb      	ldr	r3, [r7, #8]
 8010bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bcc:	d045      	beq.n	8010c5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010bce:	f7f8 fc95 	bl	80094fc <HAL_GetTick>
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	69fb      	ldr	r3, [r7, #28]
 8010bd6:	1ad3      	subs	r3, r2, r3
 8010bd8:	68ba      	ldr	r2, [r7, #8]
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d302      	bcc.n	8010be4 <I2C_IsErrorOccurred+0x54>
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d13a      	bne.n	8010c5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	685b      	ldr	r3, [r3, #4]
 8010bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010bee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010bf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	699b      	ldr	r3, [r3, #24]
 8010bfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010c02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010c06:	d121      	bne.n	8010c4c <I2C_IsErrorOccurred+0xbc>
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010c0e:	d01d      	beq.n	8010c4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8010c10:	7cfb      	ldrb	r3, [r7, #19]
 8010c12:	2b20      	cmp	r3, #32
 8010c14:	d01a      	beq.n	8010c4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	685a      	ldr	r2, [r3, #4]
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010c24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8010c26:	f7f8 fc69 	bl	80094fc <HAL_GetTick>
 8010c2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010c2c:	e00e      	b.n	8010c4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8010c2e:	f7f8 fc65 	bl	80094fc <HAL_GetTick>
 8010c32:	4602      	mov	r2, r0
 8010c34:	69fb      	ldr	r3, [r7, #28]
 8010c36:	1ad3      	subs	r3, r2, r3
 8010c38:	2b19      	cmp	r3, #25
 8010c3a:	d907      	bls.n	8010c4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8010c3c:	6a3b      	ldr	r3, [r7, #32]
 8010c3e:	f043 0320 	orr.w	r3, r3, #32
 8010c42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8010c44:	2301      	movs	r3, #1
 8010c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8010c4a:	e006      	b.n	8010c5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	699b      	ldr	r3, [r3, #24]
 8010c52:	f003 0320 	and.w	r3, r3, #32
 8010c56:	2b20      	cmp	r3, #32
 8010c58:	d1e9      	bne.n	8010c2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	699b      	ldr	r3, [r3, #24]
 8010c60:	f003 0320 	and.w	r3, r3, #32
 8010c64:	2b20      	cmp	r3, #32
 8010c66:	d003      	beq.n	8010c70 <I2C_IsErrorOccurred+0xe0>
 8010c68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d0aa      	beq.n	8010bc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8010c70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d103      	bne.n	8010c80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	2220      	movs	r2, #32
 8010c7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8010c80:	6a3b      	ldr	r3, [r7, #32]
 8010c82:	f043 0304 	orr.w	r3, r3, #4
 8010c86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8010c88:	2301      	movs	r3, #1
 8010c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	699b      	ldr	r3, [r3, #24]
 8010c94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8010c96:	69bb      	ldr	r3, [r7, #24]
 8010c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d00b      	beq.n	8010cb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010ca0:	6a3b      	ldr	r3, [r7, #32]
 8010ca2:	f043 0301 	orr.w	r3, r3, #1
 8010ca6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010cb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010cb2:	2301      	movs	r3, #1
 8010cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010cb8:	69bb      	ldr	r3, [r7, #24]
 8010cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d00b      	beq.n	8010cda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010cc2:	6a3b      	ldr	r3, [r7, #32]
 8010cc4:	f043 0308 	orr.w	r3, r3, #8
 8010cc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010cd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010cda:	69bb      	ldr	r3, [r7, #24]
 8010cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d00b      	beq.n	8010cfc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010ce4:	6a3b      	ldr	r3, [r7, #32]
 8010ce6:	f043 0302 	orr.w	r3, r3, #2
 8010cea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010cf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8010cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d01c      	beq.n	8010d3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010d04:	68f8      	ldr	r0, [r7, #12]
 8010d06:	f7ff fe1e 	bl	8010946 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	6859      	ldr	r1, [r3, #4]
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	681a      	ldr	r2, [r3, #0]
 8010d14:	4b0d      	ldr	r3, [pc, #52]	@ (8010d4c <I2C_IsErrorOccurred+0x1bc>)
 8010d16:	400b      	ands	r3, r1
 8010d18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010d1e:	6a3b      	ldr	r3, [r7, #32]
 8010d20:	431a      	orrs	r2, r3
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	2220      	movs	r2, #32
 8010d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	2200      	movs	r2, #0
 8010d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8010d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3728      	adds	r7, #40	@ 0x28
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	fe00e800 	.word	0xfe00e800

08010d50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8010d50:	b480      	push	{r7}
 8010d52:	b087      	sub	sp, #28
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	60f8      	str	r0, [r7, #12]
 8010d58:	607b      	str	r3, [r7, #4]
 8010d5a:	460b      	mov	r3, r1
 8010d5c:	817b      	strh	r3, [r7, #10]
 8010d5e:	4613      	mov	r3, r2
 8010d60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010d62:	897b      	ldrh	r3, [r7, #10]
 8010d64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010d68:	7a7b      	ldrb	r3, [r7, #9]
 8010d6a:	041b      	lsls	r3, r3, #16
 8010d6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010d70:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010d76:	6a3b      	ldr	r3, [r7, #32]
 8010d78:	4313      	orrs	r3, r2
 8010d7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010d7e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	685a      	ldr	r2, [r3, #4]
 8010d86:	6a3b      	ldr	r3, [r7, #32]
 8010d88:	0d5b      	lsrs	r3, r3, #21
 8010d8a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8010d8e:	4b08      	ldr	r3, [pc, #32]	@ (8010db0 <I2C_TransferConfig+0x60>)
 8010d90:	430b      	orrs	r3, r1
 8010d92:	43db      	mvns	r3, r3
 8010d94:	ea02 0103 	and.w	r1, r2, r3
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	697a      	ldr	r2, [r7, #20]
 8010d9e:	430a      	orrs	r2, r1
 8010da0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010da2:	bf00      	nop
 8010da4:	371c      	adds	r7, #28
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr
 8010dae:	bf00      	nop
 8010db0:	03ff63ff 	.word	0x03ff63ff

08010db4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b085      	sub	sp, #20
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
 8010dbc:	460b      	mov	r3, r1
 8010dbe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010dc8:	4a39      	ldr	r2, [pc, #228]	@ (8010eb0 <I2C_Enable_IRQ+0xfc>)
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	d032      	beq.n	8010e34 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010dd2:	4a38      	ldr	r2, [pc, #224]	@ (8010eb4 <I2C_Enable_IRQ+0x100>)
 8010dd4:	4293      	cmp	r3, r2
 8010dd6:	d02d      	beq.n	8010e34 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010ddc:	4a36      	ldr	r2, [pc, #216]	@ (8010eb8 <I2C_Enable_IRQ+0x104>)
 8010dde:	4293      	cmp	r3, r2
 8010de0:	d028      	beq.n	8010e34 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010de2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	da03      	bge.n	8010df2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010df0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010df2:	887b      	ldrh	r3, [r7, #2]
 8010df4:	f003 0301 	and.w	r3, r3, #1
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d003      	beq.n	8010e04 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010e02:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010e04:	887b      	ldrh	r3, [r7, #2]
 8010e06:	f003 0302 	and.w	r3, r3, #2
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d003      	beq.n	8010e16 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010e14:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010e16:	887b      	ldrh	r3, [r7, #2]
 8010e18:	2b10      	cmp	r3, #16
 8010e1a:	d103      	bne.n	8010e24 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010e22:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010e24:	887b      	ldrh	r3, [r7, #2]
 8010e26:	2b20      	cmp	r3, #32
 8010e28:	d133      	bne.n	8010e92 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	f043 0320 	orr.w	r3, r3, #32
 8010e30:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010e32:	e02e      	b.n	8010e92 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010e34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	da03      	bge.n	8010e44 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010e42:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010e44:	887b      	ldrh	r3, [r7, #2]
 8010e46:	f003 0301 	and.w	r3, r3, #1
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d003      	beq.n	8010e56 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010e54:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010e56:	887b      	ldrh	r3, [r7, #2]
 8010e58:	f003 0302 	and.w	r3, r3, #2
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d003      	beq.n	8010e68 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010e66:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010e68:	887b      	ldrh	r3, [r7, #2]
 8010e6a:	2b10      	cmp	r3, #16
 8010e6c:	d103      	bne.n	8010e76 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010e74:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010e76:	887b      	ldrh	r3, [r7, #2]
 8010e78:	2b20      	cmp	r3, #32
 8010e7a:	d103      	bne.n	8010e84 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010e82:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010e84:	887b      	ldrh	r3, [r7, #2]
 8010e86:	2b40      	cmp	r3, #64	@ 0x40
 8010e88:	d103      	bne.n	8010e92 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e90:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	6819      	ldr	r1, [r3, #0]
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	68fa      	ldr	r2, [r7, #12]
 8010e9e:	430a      	orrs	r2, r1
 8010ea0:	601a      	str	r2, [r3, #0]
}
 8010ea2:	bf00      	nop
 8010ea4:	3714      	adds	r7, #20
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eac:	4770      	bx	lr
 8010eae:	bf00      	nop
 8010eb0:	0800f4d7 	.word	0x0800f4d7
 8010eb4:	0800f8f9 	.word	0x0800f8f9
 8010eb8:	0800f6ad 	.word	0x0800f6ad

08010ebc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010ebc:	b480      	push	{r7}
 8010ebe:	b085      	sub	sp, #20
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
 8010ec4:	460b      	mov	r3, r1
 8010ec6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010ecc:	887b      	ldrh	r3, [r7, #2]
 8010ece:	f003 0301 	and.w	r3, r3, #1
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d00f      	beq.n	8010ef6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8010edc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010eea:	2b28      	cmp	r3, #40	@ 0x28
 8010eec:	d003      	beq.n	8010ef6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010ef4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010ef6:	887b      	ldrh	r3, [r7, #2]
 8010ef8:	f003 0302 	and.w	r3, r3, #2
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d00f      	beq.n	8010f20 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8010f06:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010f0e:	b2db      	uxtb	r3, r3
 8010f10:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010f14:	2b28      	cmp	r3, #40	@ 0x28
 8010f16:	d003      	beq.n	8010f20 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010f1e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010f20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	da03      	bge.n	8010f30 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010f2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010f30:	887b      	ldrh	r3, [r7, #2]
 8010f32:	2b10      	cmp	r3, #16
 8010f34:	d103      	bne.n	8010f3e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010f3c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010f3e:	887b      	ldrh	r3, [r7, #2]
 8010f40:	2b20      	cmp	r3, #32
 8010f42:	d103      	bne.n	8010f4c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	f043 0320 	orr.w	r3, r3, #32
 8010f4a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010f4c:	887b      	ldrh	r3, [r7, #2]
 8010f4e:	2b40      	cmp	r3, #64	@ 0x40
 8010f50:	d103      	bne.n	8010f5a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f58:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	6819      	ldr	r1, [r3, #0]
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	43da      	mvns	r2, r3
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	400a      	ands	r2, r1
 8010f6a:	601a      	str	r2, [r3, #0]
}
 8010f6c:	bf00      	nop
 8010f6e:	3714      	adds	r7, #20
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr

08010f78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010f78:	b480      	push	{r7}
 8010f7a:	b083      	sub	sp, #12
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010f88:	b2db      	uxtb	r3, r3
 8010f8a:	2b20      	cmp	r3, #32
 8010f8c:	d138      	bne.n	8011000 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010f94:	2b01      	cmp	r3, #1
 8010f96:	d101      	bne.n	8010f9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010f98:	2302      	movs	r3, #2
 8010f9a:	e032      	b.n	8011002 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2224      	movs	r2, #36	@ 0x24
 8010fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	681a      	ldr	r2, [r3, #0]
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	f022 0201 	bic.w	r2, r2, #1
 8010fba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010fca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	6819      	ldr	r1, [r3, #0]
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	683a      	ldr	r2, [r7, #0]
 8010fd8:	430a      	orrs	r2, r1
 8010fda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	681a      	ldr	r2, [r3, #0]
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f042 0201 	orr.w	r2, r2, #1
 8010fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2220      	movs	r2, #32
 8010ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	e000      	b.n	8011002 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011000:	2302      	movs	r3, #2
  }
}
 8011002:	4618      	mov	r0, r3
 8011004:	370c      	adds	r7, #12
 8011006:	46bd      	mov	sp, r7
 8011008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100c:	4770      	bx	lr

0801100e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801100e:	b480      	push	{r7}
 8011010:	b085      	sub	sp, #20
 8011012:	af00      	add	r7, sp, #0
 8011014:	6078      	str	r0, [r7, #4]
 8011016:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801101e:	b2db      	uxtb	r3, r3
 8011020:	2b20      	cmp	r3, #32
 8011022:	d139      	bne.n	8011098 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801102a:	2b01      	cmp	r3, #1
 801102c:	d101      	bne.n	8011032 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801102e:	2302      	movs	r3, #2
 8011030:	e033      	b.n	801109a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2201      	movs	r2, #1
 8011036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2224      	movs	r2, #36	@ 0x24
 801103e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	f022 0201 	bic.w	r2, r2, #1
 8011050:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8011060:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	021b      	lsls	r3, r3, #8
 8011066:	68fa      	ldr	r2, [r7, #12]
 8011068:	4313      	orrs	r3, r2
 801106a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	68fa      	ldr	r2, [r7, #12]
 8011072:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	681a      	ldr	r2, [r3, #0]
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	f042 0201 	orr.w	r2, r2, #1
 8011082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2220      	movs	r2, #32
 8011088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2200      	movs	r2, #0
 8011090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8011094:	2300      	movs	r3, #0
 8011096:	e000      	b.n	801109a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011098:	2302      	movs	r3, #2
  }
}
 801109a:	4618      	mov	r0, r3
 801109c:	3714      	adds	r7, #20
 801109e:	46bd      	mov	sp, r7
 80110a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a4:	4770      	bx	lr
	...

080110a8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b085      	sub	sp, #20
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80110b0:	4b0d      	ldr	r3, [pc, #52]	@ (80110e8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80110b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80110b6:	4a0c      	ldr	r2, [pc, #48]	@ (80110e8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80110b8:	f043 0302 	orr.w	r3, r3, #2
 80110bc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80110c0:	4b09      	ldr	r3, [pc, #36]	@ (80110e8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80110c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80110c6:	f003 0302 	and.w	r3, r3, #2
 80110ca:	60fb      	str	r3, [r7, #12]
 80110cc:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80110ce:	4b07      	ldr	r3, [pc, #28]	@ (80110ec <HAL_I2CEx_EnableFastModePlus+0x44>)
 80110d0:	685a      	ldr	r2, [r3, #4]
 80110d2:	4906      	ldr	r1, [pc, #24]	@ (80110ec <HAL_I2CEx_EnableFastModePlus+0x44>)
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	4313      	orrs	r3, r2
 80110d8:	604b      	str	r3, [r1, #4]
}
 80110da:	bf00      	nop
 80110dc:	3714      	adds	r7, #20
 80110de:	46bd      	mov	sp, r7
 80110e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e4:	4770      	bx	lr
 80110e6:	bf00      	nop
 80110e8:	58024400 	.word	0x58024400
 80110ec:	58000400 	.word	0x58000400

080110f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80110f8:	4b19      	ldr	r3, [pc, #100]	@ (8011160 <HAL_PWREx_ConfigSupply+0x70>)
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	f003 0304 	and.w	r3, r3, #4
 8011100:	2b04      	cmp	r3, #4
 8011102:	d00a      	beq.n	801111a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8011104:	4b16      	ldr	r3, [pc, #88]	@ (8011160 <HAL_PWREx_ConfigSupply+0x70>)
 8011106:	68db      	ldr	r3, [r3, #12]
 8011108:	f003 0307 	and.w	r3, r3, #7
 801110c:	687a      	ldr	r2, [r7, #4]
 801110e:	429a      	cmp	r2, r3
 8011110:	d001      	beq.n	8011116 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8011112:	2301      	movs	r3, #1
 8011114:	e01f      	b.n	8011156 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8011116:	2300      	movs	r3, #0
 8011118:	e01d      	b.n	8011156 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801111a:	4b11      	ldr	r3, [pc, #68]	@ (8011160 <HAL_PWREx_ConfigSupply+0x70>)
 801111c:	68db      	ldr	r3, [r3, #12]
 801111e:	f023 0207 	bic.w	r2, r3, #7
 8011122:	490f      	ldr	r1, [pc, #60]	@ (8011160 <HAL_PWREx_ConfigSupply+0x70>)
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	4313      	orrs	r3, r2
 8011128:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801112a:	f7f8 f9e7 	bl	80094fc <HAL_GetTick>
 801112e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011130:	e009      	b.n	8011146 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8011132:	f7f8 f9e3 	bl	80094fc <HAL_GetTick>
 8011136:	4602      	mov	r2, r0
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	1ad3      	subs	r3, r2, r3
 801113c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011140:	d901      	bls.n	8011146 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8011142:	2301      	movs	r3, #1
 8011144:	e007      	b.n	8011156 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011146:	4b06      	ldr	r3, [pc, #24]	@ (8011160 <HAL_PWREx_ConfigSupply+0x70>)
 8011148:	685b      	ldr	r3, [r3, #4]
 801114a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801114e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011152:	d1ee      	bne.n	8011132 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8011154:	2300      	movs	r3, #0
}
 8011156:	4618      	mov	r0, r3
 8011158:	3710      	adds	r7, #16
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}
 801115e:	bf00      	nop
 8011160:	58024800 	.word	0x58024800

08011164 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b08c      	sub	sp, #48	@ 0x30
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d101      	bne.n	8011176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011172:	2301      	movs	r3, #1
 8011174:	e3c8      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	f003 0301 	and.w	r3, r3, #1
 801117e:	2b00      	cmp	r3, #0
 8011180:	f000 8087 	beq.w	8011292 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011184:	4b88      	ldr	r3, [pc, #544]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 8011186:	691b      	ldr	r3, [r3, #16]
 8011188:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801118e:	4b86      	ldr	r3, [pc, #536]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 8011190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011192:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8011194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011196:	2b10      	cmp	r3, #16
 8011198:	d007      	beq.n	80111aa <HAL_RCC_OscConfig+0x46>
 801119a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801119c:	2b18      	cmp	r3, #24
 801119e:	d110      	bne.n	80111c2 <HAL_RCC_OscConfig+0x5e>
 80111a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111a2:	f003 0303 	and.w	r3, r3, #3
 80111a6:	2b02      	cmp	r3, #2
 80111a8:	d10b      	bne.n	80111c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80111aa:	4b7f      	ldr	r3, [pc, #508]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d06c      	beq.n	8011290 <HAL_RCC_OscConfig+0x12c>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	685b      	ldr	r3, [r3, #4]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d168      	bne.n	8011290 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80111be:	2301      	movs	r3, #1
 80111c0:	e3a2      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80111ca:	d106      	bne.n	80111da <HAL_RCC_OscConfig+0x76>
 80111cc:	4b76      	ldr	r3, [pc, #472]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	4a75      	ldr	r2, [pc, #468]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 80111d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80111d6:	6013      	str	r3, [r2, #0]
 80111d8:	e02e      	b.n	8011238 <HAL_RCC_OscConfig+0xd4>
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d10c      	bne.n	80111fc <HAL_RCC_OscConfig+0x98>
 80111e2:	4b71      	ldr	r3, [pc, #452]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	4a70      	ldr	r2, [pc, #448]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 80111e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80111ec:	6013      	str	r3, [r2, #0]
 80111ee:	4b6e      	ldr	r3, [pc, #440]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	4a6d      	ldr	r2, [pc, #436]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 80111f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80111f8:	6013      	str	r3, [r2, #0]
 80111fa:	e01d      	b.n	8011238 <HAL_RCC_OscConfig+0xd4>
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	685b      	ldr	r3, [r3, #4]
 8011200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011204:	d10c      	bne.n	8011220 <HAL_RCC_OscConfig+0xbc>
 8011206:	4b68      	ldr	r3, [pc, #416]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	4a67      	ldr	r2, [pc, #412]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 801120c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011210:	6013      	str	r3, [r2, #0]
 8011212:	4b65      	ldr	r3, [pc, #404]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	4a64      	ldr	r2, [pc, #400]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 8011218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801121c:	6013      	str	r3, [r2, #0]
 801121e:	e00b      	b.n	8011238 <HAL_RCC_OscConfig+0xd4>
 8011220:	4b61      	ldr	r3, [pc, #388]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	4a60      	ldr	r2, [pc, #384]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 8011226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801122a:	6013      	str	r3, [r2, #0]
 801122c:	4b5e      	ldr	r3, [pc, #376]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	4a5d      	ldr	r2, [pc, #372]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 8011232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	685b      	ldr	r3, [r3, #4]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d013      	beq.n	8011268 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011240:	f7f8 f95c 	bl	80094fc <HAL_GetTick>
 8011244:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011246:	e008      	b.n	801125a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011248:	f7f8 f958 	bl	80094fc <HAL_GetTick>
 801124c:	4602      	mov	r2, r0
 801124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011250:	1ad3      	subs	r3, r2, r3
 8011252:	2b64      	cmp	r3, #100	@ 0x64
 8011254:	d901      	bls.n	801125a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8011256:	2303      	movs	r3, #3
 8011258:	e356      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801125a:	4b53      	ldr	r3, [pc, #332]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011262:	2b00      	cmp	r3, #0
 8011264:	d0f0      	beq.n	8011248 <HAL_RCC_OscConfig+0xe4>
 8011266:	e014      	b.n	8011292 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011268:	f7f8 f948 	bl	80094fc <HAL_GetTick>
 801126c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801126e:	e008      	b.n	8011282 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011270:	f7f8 f944 	bl	80094fc <HAL_GetTick>
 8011274:	4602      	mov	r2, r0
 8011276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011278:	1ad3      	subs	r3, r2, r3
 801127a:	2b64      	cmp	r3, #100	@ 0x64
 801127c:	d901      	bls.n	8011282 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801127e:	2303      	movs	r3, #3
 8011280:	e342      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011282:	4b49      	ldr	r3, [pc, #292]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801128a:	2b00      	cmp	r3, #0
 801128c:	d1f0      	bne.n	8011270 <HAL_RCC_OscConfig+0x10c>
 801128e:	e000      	b.n	8011292 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	f003 0302 	and.w	r3, r3, #2
 801129a:	2b00      	cmp	r3, #0
 801129c:	f000 808c 	beq.w	80113b8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80112a0:	4b41      	ldr	r3, [pc, #260]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 80112a2:	691b      	ldr	r3, [r3, #16]
 80112a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80112a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80112aa:	4b3f      	ldr	r3, [pc, #252]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 80112ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80112b0:	6a3b      	ldr	r3, [r7, #32]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d007      	beq.n	80112c6 <HAL_RCC_OscConfig+0x162>
 80112b6:	6a3b      	ldr	r3, [r7, #32]
 80112b8:	2b18      	cmp	r3, #24
 80112ba:	d137      	bne.n	801132c <HAL_RCC_OscConfig+0x1c8>
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	f003 0303 	and.w	r3, r3, #3
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d132      	bne.n	801132c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80112c6:	4b38      	ldr	r3, [pc, #224]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f003 0304 	and.w	r3, r3, #4
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d005      	beq.n	80112de <HAL_RCC_OscConfig+0x17a>
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	68db      	ldr	r3, [r3, #12]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d101      	bne.n	80112de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80112da:	2301      	movs	r3, #1
 80112dc:	e314      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80112de:	4b32      	ldr	r3, [pc, #200]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	f023 0219 	bic.w	r2, r3, #25
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	68db      	ldr	r3, [r3, #12]
 80112ea:	492f      	ldr	r1, [pc, #188]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 80112ec:	4313      	orrs	r3, r2
 80112ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112f0:	f7f8 f904 	bl	80094fc <HAL_GetTick>
 80112f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80112f6:	e008      	b.n	801130a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80112f8:	f7f8 f900 	bl	80094fc <HAL_GetTick>
 80112fc:	4602      	mov	r2, r0
 80112fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011300:	1ad3      	subs	r3, r2, r3
 8011302:	2b02      	cmp	r3, #2
 8011304:	d901      	bls.n	801130a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8011306:	2303      	movs	r3, #3
 8011308:	e2fe      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801130a:	4b27      	ldr	r3, [pc, #156]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	f003 0304 	and.w	r3, r3, #4
 8011312:	2b00      	cmp	r3, #0
 8011314:	d0f0      	beq.n	80112f8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011316:	4b24      	ldr	r3, [pc, #144]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 8011318:	685b      	ldr	r3, [r3, #4]
 801131a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	691b      	ldr	r3, [r3, #16]
 8011322:	061b      	lsls	r3, r3, #24
 8011324:	4920      	ldr	r1, [pc, #128]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 8011326:	4313      	orrs	r3, r2
 8011328:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801132a:	e045      	b.n	80113b8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	68db      	ldr	r3, [r3, #12]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d026      	beq.n	8011382 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011334:	4b1c      	ldr	r3, [pc, #112]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	f023 0219 	bic.w	r2, r3, #25
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	4919      	ldr	r1, [pc, #100]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 8011342:	4313      	orrs	r3, r2
 8011344:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011346:	f7f8 f8d9 	bl	80094fc <HAL_GetTick>
 801134a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801134c:	e008      	b.n	8011360 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801134e:	f7f8 f8d5 	bl	80094fc <HAL_GetTick>
 8011352:	4602      	mov	r2, r0
 8011354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011356:	1ad3      	subs	r3, r2, r3
 8011358:	2b02      	cmp	r3, #2
 801135a:	d901      	bls.n	8011360 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 801135c:	2303      	movs	r3, #3
 801135e:	e2d3      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011360:	4b11      	ldr	r3, [pc, #68]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	f003 0304 	and.w	r3, r3, #4
 8011368:	2b00      	cmp	r3, #0
 801136a:	d0f0      	beq.n	801134e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801136c:	4b0e      	ldr	r3, [pc, #56]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 801136e:	685b      	ldr	r3, [r3, #4]
 8011370:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	691b      	ldr	r3, [r3, #16]
 8011378:	061b      	lsls	r3, r3, #24
 801137a:	490b      	ldr	r1, [pc, #44]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 801137c:	4313      	orrs	r3, r2
 801137e:	604b      	str	r3, [r1, #4]
 8011380:	e01a      	b.n	80113b8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011382:	4b09      	ldr	r3, [pc, #36]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	4a08      	ldr	r2, [pc, #32]	@ (80113a8 <HAL_RCC_OscConfig+0x244>)
 8011388:	f023 0301 	bic.w	r3, r3, #1
 801138c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801138e:	f7f8 f8b5 	bl	80094fc <HAL_GetTick>
 8011392:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011394:	e00a      	b.n	80113ac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011396:	f7f8 f8b1 	bl	80094fc <HAL_GetTick>
 801139a:	4602      	mov	r2, r0
 801139c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801139e:	1ad3      	subs	r3, r2, r3
 80113a0:	2b02      	cmp	r3, #2
 80113a2:	d903      	bls.n	80113ac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80113a4:	2303      	movs	r3, #3
 80113a6:	e2af      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
 80113a8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80113ac:	4b96      	ldr	r3, [pc, #600]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f003 0304 	and.w	r3, r3, #4
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d1ee      	bne.n	8011396 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	f003 0310 	and.w	r3, r3, #16
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d06a      	beq.n	801149a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80113c4:	4b90      	ldr	r3, [pc, #576]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 80113c6:	691b      	ldr	r3, [r3, #16]
 80113c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80113cc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80113ce:	4b8e      	ldr	r3, [pc, #568]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 80113d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113d2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80113d4:	69bb      	ldr	r3, [r7, #24]
 80113d6:	2b08      	cmp	r3, #8
 80113d8:	d007      	beq.n	80113ea <HAL_RCC_OscConfig+0x286>
 80113da:	69bb      	ldr	r3, [r7, #24]
 80113dc:	2b18      	cmp	r3, #24
 80113de:	d11b      	bne.n	8011418 <HAL_RCC_OscConfig+0x2b4>
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	f003 0303 	and.w	r3, r3, #3
 80113e6:	2b01      	cmp	r3, #1
 80113e8:	d116      	bne.n	8011418 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80113ea:	4b87      	ldr	r3, [pc, #540]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d005      	beq.n	8011402 <HAL_RCC_OscConfig+0x29e>
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	69db      	ldr	r3, [r3, #28]
 80113fa:	2b80      	cmp	r3, #128	@ 0x80
 80113fc:	d001      	beq.n	8011402 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80113fe:	2301      	movs	r3, #1
 8011400:	e282      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011402:	4b81      	ldr	r3, [pc, #516]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 8011404:	68db      	ldr	r3, [r3, #12]
 8011406:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6a1b      	ldr	r3, [r3, #32]
 801140e:	061b      	lsls	r3, r3, #24
 8011410:	497d      	ldr	r1, [pc, #500]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 8011412:	4313      	orrs	r3, r2
 8011414:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011416:	e040      	b.n	801149a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	69db      	ldr	r3, [r3, #28]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d023      	beq.n	8011468 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8011420:	4b79      	ldr	r3, [pc, #484]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	4a78      	ldr	r2, [pc, #480]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 8011426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801142a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801142c:	f7f8 f866 	bl	80094fc <HAL_GetTick>
 8011430:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011432:	e008      	b.n	8011446 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8011434:	f7f8 f862 	bl	80094fc <HAL_GetTick>
 8011438:	4602      	mov	r2, r0
 801143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801143c:	1ad3      	subs	r3, r2, r3
 801143e:	2b02      	cmp	r3, #2
 8011440:	d901      	bls.n	8011446 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8011442:	2303      	movs	r3, #3
 8011444:	e260      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011446:	4b70      	ldr	r3, [pc, #448]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801144e:	2b00      	cmp	r3, #0
 8011450:	d0f0      	beq.n	8011434 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011452:	4b6d      	ldr	r3, [pc, #436]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6a1b      	ldr	r3, [r3, #32]
 801145e:	061b      	lsls	r3, r3, #24
 8011460:	4969      	ldr	r1, [pc, #420]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 8011462:	4313      	orrs	r3, r2
 8011464:	60cb      	str	r3, [r1, #12]
 8011466:	e018      	b.n	801149a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8011468:	4b67      	ldr	r3, [pc, #412]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	4a66      	ldr	r2, [pc, #408]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 801146e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011474:	f7f8 f842 	bl	80094fc <HAL_GetTick>
 8011478:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801147a:	e008      	b.n	801148e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801147c:	f7f8 f83e 	bl	80094fc <HAL_GetTick>
 8011480:	4602      	mov	r2, r0
 8011482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011484:	1ad3      	subs	r3, r2, r3
 8011486:	2b02      	cmp	r3, #2
 8011488:	d901      	bls.n	801148e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 801148a:	2303      	movs	r3, #3
 801148c:	e23c      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801148e:	4b5e      	ldr	r3, [pc, #376]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011496:	2b00      	cmp	r3, #0
 8011498:	d1f0      	bne.n	801147c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	f003 0308 	and.w	r3, r3, #8
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d036      	beq.n	8011514 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	695b      	ldr	r3, [r3, #20]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d019      	beq.n	80114e2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80114ae:	4b56      	ldr	r3, [pc, #344]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 80114b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114b2:	4a55      	ldr	r2, [pc, #340]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 80114b4:	f043 0301 	orr.w	r3, r3, #1
 80114b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80114ba:	f7f8 f81f 	bl	80094fc <HAL_GetTick>
 80114be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80114c0:	e008      	b.n	80114d4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80114c2:	f7f8 f81b 	bl	80094fc <HAL_GetTick>
 80114c6:	4602      	mov	r2, r0
 80114c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114ca:	1ad3      	subs	r3, r2, r3
 80114cc:	2b02      	cmp	r3, #2
 80114ce:	d901      	bls.n	80114d4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80114d0:	2303      	movs	r3, #3
 80114d2:	e219      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80114d4:	4b4c      	ldr	r3, [pc, #304]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 80114d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114d8:	f003 0302 	and.w	r3, r3, #2
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d0f0      	beq.n	80114c2 <HAL_RCC_OscConfig+0x35e>
 80114e0:	e018      	b.n	8011514 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80114e2:	4b49      	ldr	r3, [pc, #292]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 80114e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114e6:	4a48      	ldr	r2, [pc, #288]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 80114e8:	f023 0301 	bic.w	r3, r3, #1
 80114ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80114ee:	f7f8 f805 	bl	80094fc <HAL_GetTick>
 80114f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80114f4:	e008      	b.n	8011508 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80114f6:	f7f8 f801 	bl	80094fc <HAL_GetTick>
 80114fa:	4602      	mov	r2, r0
 80114fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114fe:	1ad3      	subs	r3, r2, r3
 8011500:	2b02      	cmp	r3, #2
 8011502:	d901      	bls.n	8011508 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8011504:	2303      	movs	r3, #3
 8011506:	e1ff      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011508:	4b3f      	ldr	r3, [pc, #252]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 801150a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801150c:	f003 0302 	and.w	r3, r3, #2
 8011510:	2b00      	cmp	r3, #0
 8011512:	d1f0      	bne.n	80114f6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	f003 0320 	and.w	r3, r3, #32
 801151c:	2b00      	cmp	r3, #0
 801151e:	d036      	beq.n	801158e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	699b      	ldr	r3, [r3, #24]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d019      	beq.n	801155c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8011528:	4b37      	ldr	r3, [pc, #220]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	4a36      	ldr	r2, [pc, #216]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 801152e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8011532:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011534:	f7f7 ffe2 	bl	80094fc <HAL_GetTick>
 8011538:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801153a:	e008      	b.n	801154e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801153c:	f7f7 ffde 	bl	80094fc <HAL_GetTick>
 8011540:	4602      	mov	r2, r0
 8011542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011544:	1ad3      	subs	r3, r2, r3
 8011546:	2b02      	cmp	r3, #2
 8011548:	d901      	bls.n	801154e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 801154a:	2303      	movs	r3, #3
 801154c:	e1dc      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801154e:	4b2e      	ldr	r3, [pc, #184]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011556:	2b00      	cmp	r3, #0
 8011558:	d0f0      	beq.n	801153c <HAL_RCC_OscConfig+0x3d8>
 801155a:	e018      	b.n	801158e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801155c:	4b2a      	ldr	r3, [pc, #168]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	4a29      	ldr	r2, [pc, #164]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 8011562:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011566:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011568:	f7f7 ffc8 	bl	80094fc <HAL_GetTick>
 801156c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801156e:	e008      	b.n	8011582 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011570:	f7f7 ffc4 	bl	80094fc <HAL_GetTick>
 8011574:	4602      	mov	r2, r0
 8011576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011578:	1ad3      	subs	r3, r2, r3
 801157a:	2b02      	cmp	r3, #2
 801157c:	d901      	bls.n	8011582 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 801157e:	2303      	movs	r3, #3
 8011580:	e1c2      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011582:	4b21      	ldr	r3, [pc, #132]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801158a:	2b00      	cmp	r3, #0
 801158c:	d1f0      	bne.n	8011570 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	f003 0304 	and.w	r3, r3, #4
 8011596:	2b00      	cmp	r3, #0
 8011598:	f000 8086 	beq.w	80116a8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801159c:	4b1b      	ldr	r3, [pc, #108]	@ (801160c <HAL_RCC_OscConfig+0x4a8>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	4a1a      	ldr	r2, [pc, #104]	@ (801160c <HAL_RCC_OscConfig+0x4a8>)
 80115a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80115a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80115a8:	f7f7 ffa8 	bl	80094fc <HAL_GetTick>
 80115ac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80115ae:	e008      	b.n	80115c2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80115b0:	f7f7 ffa4 	bl	80094fc <HAL_GetTick>
 80115b4:	4602      	mov	r2, r0
 80115b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115b8:	1ad3      	subs	r3, r2, r3
 80115ba:	2b64      	cmp	r3, #100	@ 0x64
 80115bc:	d901      	bls.n	80115c2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80115be:	2303      	movs	r3, #3
 80115c0:	e1a2      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80115c2:	4b12      	ldr	r3, [pc, #72]	@ (801160c <HAL_RCC_OscConfig+0x4a8>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d0f0      	beq.n	80115b0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	689b      	ldr	r3, [r3, #8]
 80115d2:	2b01      	cmp	r3, #1
 80115d4:	d106      	bne.n	80115e4 <HAL_RCC_OscConfig+0x480>
 80115d6:	4b0c      	ldr	r3, [pc, #48]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 80115d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115da:	4a0b      	ldr	r2, [pc, #44]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 80115dc:	f043 0301 	orr.w	r3, r3, #1
 80115e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80115e2:	e032      	b.n	801164a <HAL_RCC_OscConfig+0x4e6>
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	689b      	ldr	r3, [r3, #8]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d111      	bne.n	8011610 <HAL_RCC_OscConfig+0x4ac>
 80115ec:	4b06      	ldr	r3, [pc, #24]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 80115ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115f0:	4a05      	ldr	r2, [pc, #20]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 80115f2:	f023 0301 	bic.w	r3, r3, #1
 80115f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80115f8:	4b03      	ldr	r3, [pc, #12]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 80115fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115fc:	4a02      	ldr	r2, [pc, #8]	@ (8011608 <HAL_RCC_OscConfig+0x4a4>)
 80115fe:	f023 0304 	bic.w	r3, r3, #4
 8011602:	6713      	str	r3, [r2, #112]	@ 0x70
 8011604:	e021      	b.n	801164a <HAL_RCC_OscConfig+0x4e6>
 8011606:	bf00      	nop
 8011608:	58024400 	.word	0x58024400
 801160c:	58024800 	.word	0x58024800
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	689b      	ldr	r3, [r3, #8]
 8011614:	2b05      	cmp	r3, #5
 8011616:	d10c      	bne.n	8011632 <HAL_RCC_OscConfig+0x4ce>
 8011618:	4b83      	ldr	r3, [pc, #524]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 801161a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801161c:	4a82      	ldr	r2, [pc, #520]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 801161e:	f043 0304 	orr.w	r3, r3, #4
 8011622:	6713      	str	r3, [r2, #112]	@ 0x70
 8011624:	4b80      	ldr	r3, [pc, #512]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 8011626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011628:	4a7f      	ldr	r2, [pc, #508]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 801162a:	f043 0301 	orr.w	r3, r3, #1
 801162e:	6713      	str	r3, [r2, #112]	@ 0x70
 8011630:	e00b      	b.n	801164a <HAL_RCC_OscConfig+0x4e6>
 8011632:	4b7d      	ldr	r3, [pc, #500]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 8011634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011636:	4a7c      	ldr	r2, [pc, #496]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 8011638:	f023 0301 	bic.w	r3, r3, #1
 801163c:	6713      	str	r3, [r2, #112]	@ 0x70
 801163e:	4b7a      	ldr	r3, [pc, #488]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 8011640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011642:	4a79      	ldr	r2, [pc, #484]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 8011644:	f023 0304 	bic.w	r3, r3, #4
 8011648:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	689b      	ldr	r3, [r3, #8]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d015      	beq.n	801167e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011652:	f7f7 ff53 	bl	80094fc <HAL_GetTick>
 8011656:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011658:	e00a      	b.n	8011670 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801165a:	f7f7 ff4f 	bl	80094fc <HAL_GetTick>
 801165e:	4602      	mov	r2, r0
 8011660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011662:	1ad3      	subs	r3, r2, r3
 8011664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011668:	4293      	cmp	r3, r2
 801166a:	d901      	bls.n	8011670 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 801166c:	2303      	movs	r3, #3
 801166e:	e14b      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011670:	4b6d      	ldr	r3, [pc, #436]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 8011672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011674:	f003 0302 	and.w	r3, r3, #2
 8011678:	2b00      	cmp	r3, #0
 801167a:	d0ee      	beq.n	801165a <HAL_RCC_OscConfig+0x4f6>
 801167c:	e014      	b.n	80116a8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801167e:	f7f7 ff3d 	bl	80094fc <HAL_GetTick>
 8011682:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011684:	e00a      	b.n	801169c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011686:	f7f7 ff39 	bl	80094fc <HAL_GetTick>
 801168a:	4602      	mov	r2, r0
 801168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801168e:	1ad3      	subs	r3, r2, r3
 8011690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011694:	4293      	cmp	r3, r2
 8011696:	d901      	bls.n	801169c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8011698:	2303      	movs	r3, #3
 801169a:	e135      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801169c:	4b62      	ldr	r3, [pc, #392]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 801169e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116a0:	f003 0302 	and.w	r3, r3, #2
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d1ee      	bne.n	8011686 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	f000 812a 	beq.w	8011906 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80116b2:	4b5d      	ldr	r3, [pc, #372]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 80116b4:	691b      	ldr	r3, [r3, #16]
 80116b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80116ba:	2b18      	cmp	r3, #24
 80116bc:	f000 80ba 	beq.w	8011834 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116c4:	2b02      	cmp	r3, #2
 80116c6:	f040 8095 	bne.w	80117f4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80116ca:	4b57      	ldr	r3, [pc, #348]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	4a56      	ldr	r2, [pc, #344]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 80116d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80116d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80116d6:	f7f7 ff11 	bl	80094fc <HAL_GetTick>
 80116da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80116dc:	e008      	b.n	80116f0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80116de:	f7f7 ff0d 	bl	80094fc <HAL_GetTick>
 80116e2:	4602      	mov	r2, r0
 80116e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116e6:	1ad3      	subs	r3, r2, r3
 80116e8:	2b02      	cmp	r3, #2
 80116ea:	d901      	bls.n	80116f0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80116ec:	2303      	movs	r3, #3
 80116ee:	e10b      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80116f0:	4b4d      	ldr	r3, [pc, #308]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d1f0      	bne.n	80116de <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80116fc:	4b4a      	ldr	r3, [pc, #296]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 80116fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011700:	4b4a      	ldr	r3, [pc, #296]	@ (801182c <HAL_RCC_OscConfig+0x6c8>)
 8011702:	4013      	ands	r3, r2
 8011704:	687a      	ldr	r2, [r7, #4]
 8011706:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8011708:	687a      	ldr	r2, [r7, #4]
 801170a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801170c:	0112      	lsls	r2, r2, #4
 801170e:	430a      	orrs	r2, r1
 8011710:	4945      	ldr	r1, [pc, #276]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 8011712:	4313      	orrs	r3, r2
 8011714:	628b      	str	r3, [r1, #40]	@ 0x28
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801171a:	3b01      	subs	r3, #1
 801171c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011724:	3b01      	subs	r3, #1
 8011726:	025b      	lsls	r3, r3, #9
 8011728:	b29b      	uxth	r3, r3
 801172a:	431a      	orrs	r2, r3
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011730:	3b01      	subs	r3, #1
 8011732:	041b      	lsls	r3, r3, #16
 8011734:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8011738:	431a      	orrs	r2, r3
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801173e:	3b01      	subs	r3, #1
 8011740:	061b      	lsls	r3, r3, #24
 8011742:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8011746:	4938      	ldr	r1, [pc, #224]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 8011748:	4313      	orrs	r3, r2
 801174a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801174c:	4b36      	ldr	r3, [pc, #216]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 801174e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011750:	4a35      	ldr	r2, [pc, #212]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 8011752:	f023 0301 	bic.w	r3, r3, #1
 8011756:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011758:	4b33      	ldr	r3, [pc, #204]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 801175a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801175c:	4b34      	ldr	r3, [pc, #208]	@ (8011830 <HAL_RCC_OscConfig+0x6cc>)
 801175e:	4013      	ands	r3, r2
 8011760:	687a      	ldr	r2, [r7, #4]
 8011762:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8011764:	00d2      	lsls	r2, r2, #3
 8011766:	4930      	ldr	r1, [pc, #192]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 8011768:	4313      	orrs	r3, r2
 801176a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801176c:	4b2e      	ldr	r3, [pc, #184]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 801176e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011770:	f023 020c 	bic.w	r2, r3, #12
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011778:	492b      	ldr	r1, [pc, #172]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 801177a:	4313      	orrs	r3, r2
 801177c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801177e:	4b2a      	ldr	r3, [pc, #168]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 8011780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011782:	f023 0202 	bic.w	r2, r3, #2
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801178a:	4927      	ldr	r1, [pc, #156]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 801178c:	4313      	orrs	r3, r2
 801178e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8011790:	4b25      	ldr	r3, [pc, #148]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 8011792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011794:	4a24      	ldr	r2, [pc, #144]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 8011796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801179a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801179c:	4b22      	ldr	r3, [pc, #136]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 801179e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117a0:	4a21      	ldr	r2, [pc, #132]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 80117a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80117a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80117a8:	4b1f      	ldr	r3, [pc, #124]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 80117aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117ac:	4a1e      	ldr	r2, [pc, #120]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 80117ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80117b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80117b4:	4b1c      	ldr	r3, [pc, #112]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 80117b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117b8:	4a1b      	ldr	r2, [pc, #108]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 80117ba:	f043 0301 	orr.w	r3, r3, #1
 80117be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80117c0:	4b19      	ldr	r3, [pc, #100]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	4a18      	ldr	r2, [pc, #96]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 80117c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80117ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80117cc:	f7f7 fe96 	bl	80094fc <HAL_GetTick>
 80117d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80117d2:	e008      	b.n	80117e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80117d4:	f7f7 fe92 	bl	80094fc <HAL_GetTick>
 80117d8:	4602      	mov	r2, r0
 80117da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117dc:	1ad3      	subs	r3, r2, r3
 80117de:	2b02      	cmp	r3, #2
 80117e0:	d901      	bls.n	80117e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80117e2:	2303      	movs	r3, #3
 80117e4:	e090      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80117e6:	4b10      	ldr	r3, [pc, #64]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d0f0      	beq.n	80117d4 <HAL_RCC_OscConfig+0x670>
 80117f2:	e088      	b.n	8011906 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80117f4:	4b0c      	ldr	r3, [pc, #48]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	4a0b      	ldr	r2, [pc, #44]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 80117fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80117fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011800:	f7f7 fe7c 	bl	80094fc <HAL_GetTick>
 8011804:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011806:	e008      	b.n	801181a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011808:	f7f7 fe78 	bl	80094fc <HAL_GetTick>
 801180c:	4602      	mov	r2, r0
 801180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011810:	1ad3      	subs	r3, r2, r3
 8011812:	2b02      	cmp	r3, #2
 8011814:	d901      	bls.n	801181a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8011816:	2303      	movs	r3, #3
 8011818:	e076      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801181a:	4b03      	ldr	r3, [pc, #12]	@ (8011828 <HAL_RCC_OscConfig+0x6c4>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011822:	2b00      	cmp	r3, #0
 8011824:	d1f0      	bne.n	8011808 <HAL_RCC_OscConfig+0x6a4>
 8011826:	e06e      	b.n	8011906 <HAL_RCC_OscConfig+0x7a2>
 8011828:	58024400 	.word	0x58024400
 801182c:	fffffc0c 	.word	0xfffffc0c
 8011830:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8011834:	4b36      	ldr	r3, [pc, #216]	@ (8011910 <HAL_RCC_OscConfig+0x7ac>)
 8011836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011838:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801183a:	4b35      	ldr	r3, [pc, #212]	@ (8011910 <HAL_RCC_OscConfig+0x7ac>)
 801183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801183e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011844:	2b01      	cmp	r3, #1
 8011846:	d031      	beq.n	80118ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	f003 0203 	and.w	r2, r3, #3
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011852:	429a      	cmp	r2, r3
 8011854:	d12a      	bne.n	80118ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011856:	693b      	ldr	r3, [r7, #16]
 8011858:	091b      	lsrs	r3, r3, #4
 801185a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011862:	429a      	cmp	r2, r3
 8011864:	d122      	bne.n	80118ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011870:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011872:	429a      	cmp	r2, r3
 8011874:	d11a      	bne.n	80118ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	0a5b      	lsrs	r3, r3, #9
 801187a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011882:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011884:	429a      	cmp	r2, r3
 8011886:	d111      	bne.n	80118ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	0c1b      	lsrs	r3, r3, #16
 801188c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011894:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011896:	429a      	cmp	r2, r3
 8011898:	d108      	bne.n	80118ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	0e1b      	lsrs	r3, r3, #24
 801189e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80118a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80118a8:	429a      	cmp	r2, r3
 80118aa:	d001      	beq.n	80118b0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80118ac:	2301      	movs	r3, #1
 80118ae:	e02b      	b.n	8011908 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80118b0:	4b17      	ldr	r3, [pc, #92]	@ (8011910 <HAL_RCC_OscConfig+0x7ac>)
 80118b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80118b4:	08db      	lsrs	r3, r3, #3
 80118b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80118ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80118c0:	693a      	ldr	r2, [r7, #16]
 80118c2:	429a      	cmp	r2, r3
 80118c4:	d01f      	beq.n	8011906 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80118c6:	4b12      	ldr	r3, [pc, #72]	@ (8011910 <HAL_RCC_OscConfig+0x7ac>)
 80118c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118ca:	4a11      	ldr	r2, [pc, #68]	@ (8011910 <HAL_RCC_OscConfig+0x7ac>)
 80118cc:	f023 0301 	bic.w	r3, r3, #1
 80118d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80118d2:	f7f7 fe13 	bl	80094fc <HAL_GetTick>
 80118d6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80118d8:	bf00      	nop
 80118da:	f7f7 fe0f 	bl	80094fc <HAL_GetTick>
 80118de:	4602      	mov	r2, r0
 80118e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118e2:	4293      	cmp	r3, r2
 80118e4:	d0f9      	beq.n	80118da <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80118e6:	4b0a      	ldr	r3, [pc, #40]	@ (8011910 <HAL_RCC_OscConfig+0x7ac>)
 80118e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80118ea:	4b0a      	ldr	r3, [pc, #40]	@ (8011914 <HAL_RCC_OscConfig+0x7b0>)
 80118ec:	4013      	ands	r3, r2
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80118f2:	00d2      	lsls	r2, r2, #3
 80118f4:	4906      	ldr	r1, [pc, #24]	@ (8011910 <HAL_RCC_OscConfig+0x7ac>)
 80118f6:	4313      	orrs	r3, r2
 80118f8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80118fa:	4b05      	ldr	r3, [pc, #20]	@ (8011910 <HAL_RCC_OscConfig+0x7ac>)
 80118fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118fe:	4a04      	ldr	r2, [pc, #16]	@ (8011910 <HAL_RCC_OscConfig+0x7ac>)
 8011900:	f043 0301 	orr.w	r3, r3, #1
 8011904:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8011906:	2300      	movs	r3, #0
}
 8011908:	4618      	mov	r0, r3
 801190a:	3730      	adds	r7, #48	@ 0x30
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}
 8011910:	58024400 	.word	0x58024400
 8011914:	ffff0007 	.word	0xffff0007

08011918 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b086      	sub	sp, #24
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d101      	bne.n	801192c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011928:	2301      	movs	r3, #1
 801192a:	e19c      	b.n	8011c66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801192c:	4b8a      	ldr	r3, [pc, #552]	@ (8011b58 <HAL_RCC_ClockConfig+0x240>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	f003 030f 	and.w	r3, r3, #15
 8011934:	683a      	ldr	r2, [r7, #0]
 8011936:	429a      	cmp	r2, r3
 8011938:	d910      	bls.n	801195c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801193a:	4b87      	ldr	r3, [pc, #540]	@ (8011b58 <HAL_RCC_ClockConfig+0x240>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	f023 020f 	bic.w	r2, r3, #15
 8011942:	4985      	ldr	r1, [pc, #532]	@ (8011b58 <HAL_RCC_ClockConfig+0x240>)
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	4313      	orrs	r3, r2
 8011948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801194a:	4b83      	ldr	r3, [pc, #524]	@ (8011b58 <HAL_RCC_ClockConfig+0x240>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	f003 030f 	and.w	r3, r3, #15
 8011952:	683a      	ldr	r2, [r7, #0]
 8011954:	429a      	cmp	r2, r3
 8011956:	d001      	beq.n	801195c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011958:	2301      	movs	r3, #1
 801195a:	e184      	b.n	8011c66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	f003 0304 	and.w	r3, r3, #4
 8011964:	2b00      	cmp	r3, #0
 8011966:	d010      	beq.n	801198a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	691a      	ldr	r2, [r3, #16]
 801196c:	4b7b      	ldr	r3, [pc, #492]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 801196e:	699b      	ldr	r3, [r3, #24]
 8011970:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011974:	429a      	cmp	r2, r3
 8011976:	d908      	bls.n	801198a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011978:	4b78      	ldr	r3, [pc, #480]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 801197a:	699b      	ldr	r3, [r3, #24]
 801197c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	691b      	ldr	r3, [r3, #16]
 8011984:	4975      	ldr	r1, [pc, #468]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011986:	4313      	orrs	r3, r2
 8011988:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	f003 0308 	and.w	r3, r3, #8
 8011992:	2b00      	cmp	r3, #0
 8011994:	d010      	beq.n	80119b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	695a      	ldr	r2, [r3, #20]
 801199a:	4b70      	ldr	r3, [pc, #448]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 801199c:	69db      	ldr	r3, [r3, #28]
 801199e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80119a2:	429a      	cmp	r2, r3
 80119a4:	d908      	bls.n	80119b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80119a6:	4b6d      	ldr	r3, [pc, #436]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 80119a8:	69db      	ldr	r3, [r3, #28]
 80119aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	695b      	ldr	r3, [r3, #20]
 80119b2:	496a      	ldr	r1, [pc, #424]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 80119b4:	4313      	orrs	r3, r2
 80119b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	f003 0310 	and.w	r3, r3, #16
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d010      	beq.n	80119e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	699a      	ldr	r2, [r3, #24]
 80119c8:	4b64      	ldr	r3, [pc, #400]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 80119ca:	69db      	ldr	r3, [r3, #28]
 80119cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80119d0:	429a      	cmp	r2, r3
 80119d2:	d908      	bls.n	80119e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80119d4:	4b61      	ldr	r3, [pc, #388]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 80119d6:	69db      	ldr	r3, [r3, #28]
 80119d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	699b      	ldr	r3, [r3, #24]
 80119e0:	495e      	ldr	r1, [pc, #376]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 80119e2:	4313      	orrs	r3, r2
 80119e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	f003 0320 	and.w	r3, r3, #32
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d010      	beq.n	8011a14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	69da      	ldr	r2, [r3, #28]
 80119f6:	4b59      	ldr	r3, [pc, #356]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 80119f8:	6a1b      	ldr	r3, [r3, #32]
 80119fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80119fe:	429a      	cmp	r2, r3
 8011a00:	d908      	bls.n	8011a14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011a02:	4b56      	ldr	r3, [pc, #344]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011a04:	6a1b      	ldr	r3, [r3, #32]
 8011a06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	69db      	ldr	r3, [r3, #28]
 8011a0e:	4953      	ldr	r1, [pc, #332]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011a10:	4313      	orrs	r3, r2
 8011a12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	f003 0302 	and.w	r3, r3, #2
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d010      	beq.n	8011a42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	68da      	ldr	r2, [r3, #12]
 8011a24:	4b4d      	ldr	r3, [pc, #308]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011a26:	699b      	ldr	r3, [r3, #24]
 8011a28:	f003 030f 	and.w	r3, r3, #15
 8011a2c:	429a      	cmp	r2, r3
 8011a2e:	d908      	bls.n	8011a42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011a30:	4b4a      	ldr	r3, [pc, #296]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011a32:	699b      	ldr	r3, [r3, #24]
 8011a34:	f023 020f 	bic.w	r2, r3, #15
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	68db      	ldr	r3, [r3, #12]
 8011a3c:	4947      	ldr	r1, [pc, #284]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011a3e:	4313      	orrs	r3, r2
 8011a40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	f003 0301 	and.w	r3, r3, #1
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d055      	beq.n	8011afa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011a4e:	4b43      	ldr	r3, [pc, #268]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011a50:	699b      	ldr	r3, [r3, #24]
 8011a52:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	689b      	ldr	r3, [r3, #8]
 8011a5a:	4940      	ldr	r1, [pc, #256]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011a5c:	4313      	orrs	r3, r2
 8011a5e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	2b02      	cmp	r3, #2
 8011a66:	d107      	bne.n	8011a78 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011a68:	4b3c      	ldr	r3, [pc, #240]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d121      	bne.n	8011ab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011a74:	2301      	movs	r3, #1
 8011a76:	e0f6      	b.n	8011c66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	2b03      	cmp	r3, #3
 8011a7e:	d107      	bne.n	8011a90 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011a80:	4b36      	ldr	r3, [pc, #216]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d115      	bne.n	8011ab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	e0ea      	b.n	8011c66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	685b      	ldr	r3, [r3, #4]
 8011a94:	2b01      	cmp	r3, #1
 8011a96:	d107      	bne.n	8011aa8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011a98:	4b30      	ldr	r3, [pc, #192]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d109      	bne.n	8011ab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	e0de      	b.n	8011c66 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	f003 0304 	and.w	r3, r3, #4
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d101      	bne.n	8011ab8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011ab4:	2301      	movs	r3, #1
 8011ab6:	e0d6      	b.n	8011c66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011ab8:	4b28      	ldr	r3, [pc, #160]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011aba:	691b      	ldr	r3, [r3, #16]
 8011abc:	f023 0207 	bic.w	r2, r3, #7
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	685b      	ldr	r3, [r3, #4]
 8011ac4:	4925      	ldr	r1, [pc, #148]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011ac6:	4313      	orrs	r3, r2
 8011ac8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011aca:	f7f7 fd17 	bl	80094fc <HAL_GetTick>
 8011ace:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011ad0:	e00a      	b.n	8011ae8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011ad2:	f7f7 fd13 	bl	80094fc <HAL_GetTick>
 8011ad6:	4602      	mov	r2, r0
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	1ad3      	subs	r3, r2, r3
 8011adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011ae0:	4293      	cmp	r3, r2
 8011ae2:	d901      	bls.n	8011ae8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8011ae4:	2303      	movs	r3, #3
 8011ae6:	e0be      	b.n	8011c66 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011aea:	691b      	ldr	r3, [r3, #16]
 8011aec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	00db      	lsls	r3, r3, #3
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d1eb      	bne.n	8011ad2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	f003 0302 	and.w	r3, r3, #2
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d010      	beq.n	8011b28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	68da      	ldr	r2, [r3, #12]
 8011b0a:	4b14      	ldr	r3, [pc, #80]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011b0c:	699b      	ldr	r3, [r3, #24]
 8011b0e:	f003 030f 	and.w	r3, r3, #15
 8011b12:	429a      	cmp	r2, r3
 8011b14:	d208      	bcs.n	8011b28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011b16:	4b11      	ldr	r3, [pc, #68]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011b18:	699b      	ldr	r3, [r3, #24]
 8011b1a:	f023 020f 	bic.w	r2, r3, #15
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	68db      	ldr	r3, [r3, #12]
 8011b22:	490e      	ldr	r1, [pc, #56]	@ (8011b5c <HAL_RCC_ClockConfig+0x244>)
 8011b24:	4313      	orrs	r3, r2
 8011b26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011b28:	4b0b      	ldr	r3, [pc, #44]	@ (8011b58 <HAL_RCC_ClockConfig+0x240>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	f003 030f 	and.w	r3, r3, #15
 8011b30:	683a      	ldr	r2, [r7, #0]
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d214      	bcs.n	8011b60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011b36:	4b08      	ldr	r3, [pc, #32]	@ (8011b58 <HAL_RCC_ClockConfig+0x240>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	f023 020f 	bic.w	r2, r3, #15
 8011b3e:	4906      	ldr	r1, [pc, #24]	@ (8011b58 <HAL_RCC_ClockConfig+0x240>)
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	4313      	orrs	r3, r2
 8011b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011b46:	4b04      	ldr	r3, [pc, #16]	@ (8011b58 <HAL_RCC_ClockConfig+0x240>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	f003 030f 	and.w	r3, r3, #15
 8011b4e:	683a      	ldr	r2, [r7, #0]
 8011b50:	429a      	cmp	r2, r3
 8011b52:	d005      	beq.n	8011b60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8011b54:	2301      	movs	r3, #1
 8011b56:	e086      	b.n	8011c66 <HAL_RCC_ClockConfig+0x34e>
 8011b58:	52002000 	.word	0x52002000
 8011b5c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	f003 0304 	and.w	r3, r3, #4
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d010      	beq.n	8011b8e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	691a      	ldr	r2, [r3, #16]
 8011b70:	4b3f      	ldr	r3, [pc, #252]	@ (8011c70 <HAL_RCC_ClockConfig+0x358>)
 8011b72:	699b      	ldr	r3, [r3, #24]
 8011b74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011b78:	429a      	cmp	r2, r3
 8011b7a:	d208      	bcs.n	8011b8e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011b7c:	4b3c      	ldr	r3, [pc, #240]	@ (8011c70 <HAL_RCC_ClockConfig+0x358>)
 8011b7e:	699b      	ldr	r3, [r3, #24]
 8011b80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	691b      	ldr	r3, [r3, #16]
 8011b88:	4939      	ldr	r1, [pc, #228]	@ (8011c70 <HAL_RCC_ClockConfig+0x358>)
 8011b8a:	4313      	orrs	r3, r2
 8011b8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	f003 0308 	and.w	r3, r3, #8
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d010      	beq.n	8011bbc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	695a      	ldr	r2, [r3, #20]
 8011b9e:	4b34      	ldr	r3, [pc, #208]	@ (8011c70 <HAL_RCC_ClockConfig+0x358>)
 8011ba0:	69db      	ldr	r3, [r3, #28]
 8011ba2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	d208      	bcs.n	8011bbc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011baa:	4b31      	ldr	r3, [pc, #196]	@ (8011c70 <HAL_RCC_ClockConfig+0x358>)
 8011bac:	69db      	ldr	r3, [r3, #28]
 8011bae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	695b      	ldr	r3, [r3, #20]
 8011bb6:	492e      	ldr	r1, [pc, #184]	@ (8011c70 <HAL_RCC_ClockConfig+0x358>)
 8011bb8:	4313      	orrs	r3, r2
 8011bba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	f003 0310 	and.w	r3, r3, #16
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d010      	beq.n	8011bea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	699a      	ldr	r2, [r3, #24]
 8011bcc:	4b28      	ldr	r3, [pc, #160]	@ (8011c70 <HAL_RCC_ClockConfig+0x358>)
 8011bce:	69db      	ldr	r3, [r3, #28]
 8011bd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d208      	bcs.n	8011bea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011bd8:	4b25      	ldr	r3, [pc, #148]	@ (8011c70 <HAL_RCC_ClockConfig+0x358>)
 8011bda:	69db      	ldr	r3, [r3, #28]
 8011bdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	699b      	ldr	r3, [r3, #24]
 8011be4:	4922      	ldr	r1, [pc, #136]	@ (8011c70 <HAL_RCC_ClockConfig+0x358>)
 8011be6:	4313      	orrs	r3, r2
 8011be8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	f003 0320 	and.w	r3, r3, #32
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d010      	beq.n	8011c18 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	69da      	ldr	r2, [r3, #28]
 8011bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8011c70 <HAL_RCC_ClockConfig+0x358>)
 8011bfc:	6a1b      	ldr	r3, [r3, #32]
 8011bfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011c02:	429a      	cmp	r2, r3
 8011c04:	d208      	bcs.n	8011c18 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011c06:	4b1a      	ldr	r3, [pc, #104]	@ (8011c70 <HAL_RCC_ClockConfig+0x358>)
 8011c08:	6a1b      	ldr	r3, [r3, #32]
 8011c0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	69db      	ldr	r3, [r3, #28]
 8011c12:	4917      	ldr	r1, [pc, #92]	@ (8011c70 <HAL_RCC_ClockConfig+0x358>)
 8011c14:	4313      	orrs	r3, r2
 8011c16:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011c18:	f000 f834 	bl	8011c84 <HAL_RCC_GetSysClockFreq>
 8011c1c:	4602      	mov	r2, r0
 8011c1e:	4b14      	ldr	r3, [pc, #80]	@ (8011c70 <HAL_RCC_ClockConfig+0x358>)
 8011c20:	699b      	ldr	r3, [r3, #24]
 8011c22:	0a1b      	lsrs	r3, r3, #8
 8011c24:	f003 030f 	and.w	r3, r3, #15
 8011c28:	4912      	ldr	r1, [pc, #72]	@ (8011c74 <HAL_RCC_ClockConfig+0x35c>)
 8011c2a:	5ccb      	ldrb	r3, [r1, r3]
 8011c2c:	f003 031f 	and.w	r3, r3, #31
 8011c30:	fa22 f303 	lsr.w	r3, r2, r3
 8011c34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011c36:	4b0e      	ldr	r3, [pc, #56]	@ (8011c70 <HAL_RCC_ClockConfig+0x358>)
 8011c38:	699b      	ldr	r3, [r3, #24]
 8011c3a:	f003 030f 	and.w	r3, r3, #15
 8011c3e:	4a0d      	ldr	r2, [pc, #52]	@ (8011c74 <HAL_RCC_ClockConfig+0x35c>)
 8011c40:	5cd3      	ldrb	r3, [r2, r3]
 8011c42:	f003 031f 	and.w	r3, r3, #31
 8011c46:	693a      	ldr	r2, [r7, #16]
 8011c48:	fa22 f303 	lsr.w	r3, r2, r3
 8011c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8011c78 <HAL_RCC_ClockConfig+0x360>)
 8011c4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011c50:	4a0a      	ldr	r2, [pc, #40]	@ (8011c7c <HAL_RCC_ClockConfig+0x364>)
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8011c56:	4b0a      	ldr	r3, [pc, #40]	@ (8011c80 <HAL_RCC_ClockConfig+0x368>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f7f7 fc04 	bl	8009468 <HAL_InitTick>
 8011c60:	4603      	mov	r3, r0
 8011c62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8011c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	3718      	adds	r7, #24
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}
 8011c6e:	bf00      	nop
 8011c70:	58024400 	.word	0x58024400
 8011c74:	0801e9e4 	.word	0x0801e9e4
 8011c78:	24000008 	.word	0x24000008
 8011c7c:	24000004 	.word	0x24000004
 8011c80:	2400000c 	.word	0x2400000c

08011c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011c84:	b480      	push	{r7}
 8011c86:	b089      	sub	sp, #36	@ 0x24
 8011c88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011c8a:	4bb3      	ldr	r3, [pc, #716]	@ (8011f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011c8c:	691b      	ldr	r3, [r3, #16]
 8011c8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011c92:	2b18      	cmp	r3, #24
 8011c94:	f200 8155 	bhi.w	8011f42 <HAL_RCC_GetSysClockFreq+0x2be>
 8011c98:	a201      	add	r2, pc, #4	@ (adr r2, 8011ca0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8011c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c9e:	bf00      	nop
 8011ca0:	08011d05 	.word	0x08011d05
 8011ca4:	08011f43 	.word	0x08011f43
 8011ca8:	08011f43 	.word	0x08011f43
 8011cac:	08011f43 	.word	0x08011f43
 8011cb0:	08011f43 	.word	0x08011f43
 8011cb4:	08011f43 	.word	0x08011f43
 8011cb8:	08011f43 	.word	0x08011f43
 8011cbc:	08011f43 	.word	0x08011f43
 8011cc0:	08011d2b 	.word	0x08011d2b
 8011cc4:	08011f43 	.word	0x08011f43
 8011cc8:	08011f43 	.word	0x08011f43
 8011ccc:	08011f43 	.word	0x08011f43
 8011cd0:	08011f43 	.word	0x08011f43
 8011cd4:	08011f43 	.word	0x08011f43
 8011cd8:	08011f43 	.word	0x08011f43
 8011cdc:	08011f43 	.word	0x08011f43
 8011ce0:	08011d31 	.word	0x08011d31
 8011ce4:	08011f43 	.word	0x08011f43
 8011ce8:	08011f43 	.word	0x08011f43
 8011cec:	08011f43 	.word	0x08011f43
 8011cf0:	08011f43 	.word	0x08011f43
 8011cf4:	08011f43 	.word	0x08011f43
 8011cf8:	08011f43 	.word	0x08011f43
 8011cfc:	08011f43 	.word	0x08011f43
 8011d00:	08011d37 	.word	0x08011d37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011d04:	4b94      	ldr	r3, [pc, #592]	@ (8011f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	f003 0320 	and.w	r3, r3, #32
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d009      	beq.n	8011d24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011d10:	4b91      	ldr	r3, [pc, #580]	@ (8011f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	08db      	lsrs	r3, r3, #3
 8011d16:	f003 0303 	and.w	r3, r3, #3
 8011d1a:	4a90      	ldr	r2, [pc, #576]	@ (8011f5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8011d20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8011d22:	e111      	b.n	8011f48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011d24:	4b8d      	ldr	r3, [pc, #564]	@ (8011f5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011d26:	61bb      	str	r3, [r7, #24]
      break;
 8011d28:	e10e      	b.n	8011f48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8011d2a:	4b8d      	ldr	r3, [pc, #564]	@ (8011f60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011d2c:	61bb      	str	r3, [r7, #24]
      break;
 8011d2e:	e10b      	b.n	8011f48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8011d30:	4b8c      	ldr	r3, [pc, #560]	@ (8011f64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011d32:	61bb      	str	r3, [r7, #24]
      break;
 8011d34:	e108      	b.n	8011f48 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011d36:	4b88      	ldr	r3, [pc, #544]	@ (8011f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d3a:	f003 0303 	and.w	r3, r3, #3
 8011d3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8011d40:	4b85      	ldr	r3, [pc, #532]	@ (8011f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d44:	091b      	lsrs	r3, r3, #4
 8011d46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011d4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8011d4c:	4b82      	ldr	r3, [pc, #520]	@ (8011f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d50:	f003 0301 	and.w	r3, r3, #1
 8011d54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011d56:	4b80      	ldr	r3, [pc, #512]	@ (8011f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011d5a:	08db      	lsrs	r3, r3, #3
 8011d5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011d60:	68fa      	ldr	r2, [r7, #12]
 8011d62:	fb02 f303 	mul.w	r3, r2, r3
 8011d66:	ee07 3a90 	vmov	s15, r3
 8011d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011d6e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8011d72:	693b      	ldr	r3, [r7, #16]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	f000 80e1 	beq.w	8011f3c <HAL_RCC_GetSysClockFreq+0x2b8>
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	2b02      	cmp	r3, #2
 8011d7e:	f000 8083 	beq.w	8011e88 <HAL_RCC_GetSysClockFreq+0x204>
 8011d82:	697b      	ldr	r3, [r7, #20]
 8011d84:	2b02      	cmp	r3, #2
 8011d86:	f200 80a1 	bhi.w	8011ecc <HAL_RCC_GetSysClockFreq+0x248>
 8011d8a:	697b      	ldr	r3, [r7, #20]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d003      	beq.n	8011d98 <HAL_RCC_GetSysClockFreq+0x114>
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	2b01      	cmp	r3, #1
 8011d94:	d056      	beq.n	8011e44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8011d96:	e099      	b.n	8011ecc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011d98:	4b6f      	ldr	r3, [pc, #444]	@ (8011f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	f003 0320 	and.w	r3, r3, #32
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d02d      	beq.n	8011e00 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011da4:	4b6c      	ldr	r3, [pc, #432]	@ (8011f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	08db      	lsrs	r3, r3, #3
 8011daa:	f003 0303 	and.w	r3, r3, #3
 8011dae:	4a6b      	ldr	r2, [pc, #428]	@ (8011f5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011db0:	fa22 f303 	lsr.w	r3, r2, r3
 8011db4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	ee07 3a90 	vmov	s15, r3
 8011dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011dc0:	693b      	ldr	r3, [r7, #16]
 8011dc2:	ee07 3a90 	vmov	s15, r3
 8011dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011dce:	4b62      	ldr	r3, [pc, #392]	@ (8011f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011dd6:	ee07 3a90 	vmov	s15, r3
 8011dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011dde:	ed97 6a02 	vldr	s12, [r7, #8]
 8011de2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8011f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011dfa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8011dfe:	e087      	b.n	8011f10 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011e00:	693b      	ldr	r3, [r7, #16]
 8011e02:	ee07 3a90 	vmov	s15, r3
 8011e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e0a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8011f6c <HAL_RCC_GetSysClockFreq+0x2e8>
 8011e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011e12:	4b51      	ldr	r3, [pc, #324]	@ (8011f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e1a:	ee07 3a90 	vmov	s15, r3
 8011e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8011e26:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8011f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011e32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011e42:	e065      	b.n	8011f10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	ee07 3a90 	vmov	s15, r3
 8011e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e4e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8011f70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011e56:	4b40      	ldr	r3, [pc, #256]	@ (8011f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e5e:	ee07 3a90 	vmov	s15, r3
 8011e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8011e6a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011e76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011e86:	e043      	b.n	8011f10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011e88:	693b      	ldr	r3, [r7, #16]
 8011e8a:	ee07 3a90 	vmov	s15, r3
 8011e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e92:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8011f74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8011e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8011f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ea2:	ee07 3a90 	vmov	s15, r3
 8011ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8011eae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8011f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ec6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011eca:	e021      	b.n	8011f10 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011ecc:	693b      	ldr	r3, [r7, #16]
 8011ece:	ee07 3a90 	vmov	s15, r3
 8011ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ed6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011f70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011ede:	4b1e      	ldr	r3, [pc, #120]	@ (8011f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ee6:	ee07 3a90 	vmov	s15, r3
 8011eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8011ef2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8011f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011f0e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8011f10:	4b11      	ldr	r3, [pc, #68]	@ (8011f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f14:	0a5b      	lsrs	r3, r3, #9
 8011f16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f1a:	3301      	adds	r3, #1
 8011f1c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	ee07 3a90 	vmov	s15, r3
 8011f24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011f28:	edd7 6a07 	vldr	s13, [r7, #28]
 8011f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011f34:	ee17 3a90 	vmov	r3, s15
 8011f38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8011f3a:	e005      	b.n	8011f48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	61bb      	str	r3, [r7, #24]
      break;
 8011f40:	e002      	b.n	8011f48 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8011f42:	4b07      	ldr	r3, [pc, #28]	@ (8011f60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011f44:	61bb      	str	r3, [r7, #24]
      break;
 8011f46:	bf00      	nop
  }

  return sysclockfreq;
 8011f48:	69bb      	ldr	r3, [r7, #24]
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3724      	adds	r7, #36	@ 0x24
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f54:	4770      	bx	lr
 8011f56:	bf00      	nop
 8011f58:	58024400 	.word	0x58024400
 8011f5c:	03d09000 	.word	0x03d09000
 8011f60:	003d0900 	.word	0x003d0900
 8011f64:	016e3600 	.word	0x016e3600
 8011f68:	46000000 	.word	0x46000000
 8011f6c:	4c742400 	.word	0x4c742400
 8011f70:	4a742400 	.word	0x4a742400
 8011f74:	4bb71b00 	.word	0x4bb71b00

08011f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8011f7e:	f7ff fe81 	bl	8011c84 <HAL_RCC_GetSysClockFreq>
 8011f82:	4602      	mov	r2, r0
 8011f84:	4b10      	ldr	r3, [pc, #64]	@ (8011fc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8011f86:	699b      	ldr	r3, [r3, #24]
 8011f88:	0a1b      	lsrs	r3, r3, #8
 8011f8a:	f003 030f 	and.w	r3, r3, #15
 8011f8e:	490f      	ldr	r1, [pc, #60]	@ (8011fcc <HAL_RCC_GetHCLKFreq+0x54>)
 8011f90:	5ccb      	ldrb	r3, [r1, r3]
 8011f92:	f003 031f 	and.w	r3, r3, #31
 8011f96:	fa22 f303 	lsr.w	r3, r2, r3
 8011f9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8011fc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8011f9e:	699b      	ldr	r3, [r3, #24]
 8011fa0:	f003 030f 	and.w	r3, r3, #15
 8011fa4:	4a09      	ldr	r2, [pc, #36]	@ (8011fcc <HAL_RCC_GetHCLKFreq+0x54>)
 8011fa6:	5cd3      	ldrb	r3, [r2, r3]
 8011fa8:	f003 031f 	and.w	r3, r3, #31
 8011fac:	687a      	ldr	r2, [r7, #4]
 8011fae:	fa22 f303 	lsr.w	r3, r2, r3
 8011fb2:	4a07      	ldr	r2, [pc, #28]	@ (8011fd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8011fb4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011fb6:	4a07      	ldr	r2, [pc, #28]	@ (8011fd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8011fbc:	4b04      	ldr	r3, [pc, #16]	@ (8011fd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
}
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	3708      	adds	r7, #8
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}
 8011fc8:	58024400 	.word	0x58024400
 8011fcc:	0801e9e4 	.word	0x0801e9e4
 8011fd0:	24000008 	.word	0x24000008
 8011fd4:	24000004 	.word	0x24000004

08011fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8011fdc:	f7ff ffcc 	bl	8011f78 <HAL_RCC_GetHCLKFreq>
 8011fe0:	4602      	mov	r2, r0
 8011fe2:	4b06      	ldr	r3, [pc, #24]	@ (8011ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8011fe4:	69db      	ldr	r3, [r3, #28]
 8011fe6:	091b      	lsrs	r3, r3, #4
 8011fe8:	f003 0307 	and.w	r3, r3, #7
 8011fec:	4904      	ldr	r1, [pc, #16]	@ (8012000 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011fee:	5ccb      	ldrb	r3, [r1, r3]
 8011ff0:	f003 031f 	and.w	r3, r3, #31
 8011ff4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	bd80      	pop	{r7, pc}
 8011ffc:	58024400 	.word	0x58024400
 8012000:	0801e9e4 	.word	0x0801e9e4

08012004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8012008:	f7ff ffb6 	bl	8011f78 <HAL_RCC_GetHCLKFreq>
 801200c:	4602      	mov	r2, r0
 801200e:	4b06      	ldr	r3, [pc, #24]	@ (8012028 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012010:	69db      	ldr	r3, [r3, #28]
 8012012:	0a1b      	lsrs	r3, r3, #8
 8012014:	f003 0307 	and.w	r3, r3, #7
 8012018:	4904      	ldr	r1, [pc, #16]	@ (801202c <HAL_RCC_GetPCLK2Freq+0x28>)
 801201a:	5ccb      	ldrb	r3, [r1, r3]
 801201c:	f003 031f 	and.w	r3, r3, #31
 8012020:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8012024:	4618      	mov	r0, r3
 8012026:	bd80      	pop	{r7, pc}
 8012028:	58024400 	.word	0x58024400
 801202c:	0801e9e4 	.word	0x0801e9e4

08012030 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012034:	b0c6      	sub	sp, #280	@ 0x118
 8012036:	af00      	add	r7, sp, #0
 8012038:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801203c:	2300      	movs	r3, #0
 801203e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8012042:	2300      	movs	r3, #0
 8012044:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8012048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012050:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8012054:	2500      	movs	r5, #0
 8012056:	ea54 0305 	orrs.w	r3, r4, r5
 801205a:	d049      	beq.n	80120f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801205c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012062:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012066:	d02f      	beq.n	80120c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8012068:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801206c:	d828      	bhi.n	80120c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801206e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012072:	d01a      	beq.n	80120aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8012074:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012078:	d822      	bhi.n	80120c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801207a:	2b00      	cmp	r3, #0
 801207c:	d003      	beq.n	8012086 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801207e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012082:	d007      	beq.n	8012094 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8012084:	e01c      	b.n	80120c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012086:	4bab      	ldr	r3, [pc, #684]	@ (8012334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801208a:	4aaa      	ldr	r2, [pc, #680]	@ (8012334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801208c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012090:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012092:	e01a      	b.n	80120ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012098:	3308      	adds	r3, #8
 801209a:	2102      	movs	r1, #2
 801209c:	4618      	mov	r0, r3
 801209e:	f002 fa49 	bl	8014534 <RCCEx_PLL2_Config>
 80120a2:	4603      	mov	r3, r0
 80120a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80120a8:	e00f      	b.n	80120ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80120aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120ae:	3328      	adds	r3, #40	@ 0x28
 80120b0:	2102      	movs	r1, #2
 80120b2:	4618      	mov	r0, r3
 80120b4:	f002 faf0 	bl	8014698 <RCCEx_PLL3_Config>
 80120b8:	4603      	mov	r3, r0
 80120ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80120be:	e004      	b.n	80120ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80120c0:	2301      	movs	r3, #1
 80120c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80120c6:	e000      	b.n	80120ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80120c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80120ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d10a      	bne.n	80120e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80120d2:	4b98      	ldr	r3, [pc, #608]	@ (8012334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80120d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80120d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80120da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80120e0:	4a94      	ldr	r2, [pc, #592]	@ (8012334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80120e2:	430b      	orrs	r3, r1
 80120e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80120e6:	e003      	b.n	80120f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80120e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80120ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80120f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80120fc:	f04f 0900 	mov.w	r9, #0
 8012100:	ea58 0309 	orrs.w	r3, r8, r9
 8012104:	d047      	beq.n	8012196 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8012106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801210c:	2b04      	cmp	r3, #4
 801210e:	d82a      	bhi.n	8012166 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8012110:	a201      	add	r2, pc, #4	@ (adr r2, 8012118 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8012112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012116:	bf00      	nop
 8012118:	0801212d 	.word	0x0801212d
 801211c:	0801213b 	.word	0x0801213b
 8012120:	08012151 	.word	0x08012151
 8012124:	0801216f 	.word	0x0801216f
 8012128:	0801216f 	.word	0x0801216f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801212c:	4b81      	ldr	r3, [pc, #516]	@ (8012334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801212e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012130:	4a80      	ldr	r2, [pc, #512]	@ (8012334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012138:	e01a      	b.n	8012170 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801213a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801213e:	3308      	adds	r3, #8
 8012140:	2100      	movs	r1, #0
 8012142:	4618      	mov	r0, r3
 8012144:	f002 f9f6 	bl	8014534 <RCCEx_PLL2_Config>
 8012148:	4603      	mov	r3, r0
 801214a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801214e:	e00f      	b.n	8012170 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012154:	3328      	adds	r3, #40	@ 0x28
 8012156:	2100      	movs	r1, #0
 8012158:	4618      	mov	r0, r3
 801215a:	f002 fa9d 	bl	8014698 <RCCEx_PLL3_Config>
 801215e:	4603      	mov	r3, r0
 8012160:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012164:	e004      	b.n	8012170 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012166:	2301      	movs	r3, #1
 8012168:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801216c:	e000      	b.n	8012170 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801216e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012170:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012174:	2b00      	cmp	r3, #0
 8012176:	d10a      	bne.n	801218e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8012178:	4b6e      	ldr	r3, [pc, #440]	@ (8012334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801217a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801217c:	f023 0107 	bic.w	r1, r3, #7
 8012180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012186:	4a6b      	ldr	r2, [pc, #428]	@ (8012334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012188:	430b      	orrs	r3, r1
 801218a:	6513      	str	r3, [r2, #80]	@ 0x50
 801218c:	e003      	b.n	8012196 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801218e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012192:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8012196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801219e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80121a2:	f04f 0b00 	mov.w	fp, #0
 80121a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80121aa:	d05b      	beq.n	8012264 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80121ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80121b4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80121b8:	d03b      	beq.n	8012232 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80121ba:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80121be:	d834      	bhi.n	801222a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80121c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80121c4:	d037      	beq.n	8012236 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80121c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80121ca:	d82e      	bhi.n	801222a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80121cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80121d0:	d033      	beq.n	801223a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80121d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80121d6:	d828      	bhi.n	801222a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80121d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80121dc:	d01a      	beq.n	8012214 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80121de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80121e2:	d822      	bhi.n	801222a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d003      	beq.n	80121f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80121e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80121ec:	d007      	beq.n	80121fe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80121ee:	e01c      	b.n	801222a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80121f0:	4b50      	ldr	r3, [pc, #320]	@ (8012334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80121f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121f4:	4a4f      	ldr	r2, [pc, #316]	@ (8012334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80121f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80121fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80121fc:	e01e      	b.n	801223c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80121fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012202:	3308      	adds	r3, #8
 8012204:	2100      	movs	r1, #0
 8012206:	4618      	mov	r0, r3
 8012208:	f002 f994 	bl	8014534 <RCCEx_PLL2_Config>
 801220c:	4603      	mov	r3, r0
 801220e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8012212:	e013      	b.n	801223c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012218:	3328      	adds	r3, #40	@ 0x28
 801221a:	2100      	movs	r1, #0
 801221c:	4618      	mov	r0, r3
 801221e:	f002 fa3b 	bl	8014698 <RCCEx_PLL3_Config>
 8012222:	4603      	mov	r3, r0
 8012224:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012228:	e008      	b.n	801223c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801222a:	2301      	movs	r3, #1
 801222c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012230:	e004      	b.n	801223c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8012232:	bf00      	nop
 8012234:	e002      	b.n	801223c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8012236:	bf00      	nop
 8012238:	e000      	b.n	801223c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801223a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801223c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012240:	2b00      	cmp	r3, #0
 8012242:	d10b      	bne.n	801225c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8012244:	4b3b      	ldr	r3, [pc, #236]	@ (8012334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012248:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801224c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012250:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012254:	4a37      	ldr	r2, [pc, #220]	@ (8012334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012256:	430b      	orrs	r3, r1
 8012258:	6593      	str	r3, [r2, #88]	@ 0x58
 801225a:	e003      	b.n	8012264 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801225c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012260:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8012264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8012270:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8012274:	2300      	movs	r3, #0
 8012276:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801227a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801227e:	460b      	mov	r3, r1
 8012280:	4313      	orrs	r3, r2
 8012282:	d05d      	beq.n	8012340 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8012284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012288:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801228c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8012290:	d03b      	beq.n	801230a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8012292:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8012296:	d834      	bhi.n	8012302 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012298:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801229c:	d037      	beq.n	801230e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 801229e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80122a2:	d82e      	bhi.n	8012302 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80122a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80122a8:	d033      	beq.n	8012312 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80122aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80122ae:	d828      	bhi.n	8012302 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80122b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80122b4:	d01a      	beq.n	80122ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80122b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80122ba:	d822      	bhi.n	8012302 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d003      	beq.n	80122c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80122c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80122c4:	d007      	beq.n	80122d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80122c6:	e01c      	b.n	8012302 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80122c8:	4b1a      	ldr	r3, [pc, #104]	@ (8012334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80122ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122cc:	4a19      	ldr	r2, [pc, #100]	@ (8012334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80122ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80122d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80122d4:	e01e      	b.n	8012314 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80122d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122da:	3308      	adds	r3, #8
 80122dc:	2100      	movs	r1, #0
 80122de:	4618      	mov	r0, r3
 80122e0:	f002 f928 	bl	8014534 <RCCEx_PLL2_Config>
 80122e4:	4603      	mov	r3, r0
 80122e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80122ea:	e013      	b.n	8012314 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80122ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122f0:	3328      	adds	r3, #40	@ 0x28
 80122f2:	2100      	movs	r1, #0
 80122f4:	4618      	mov	r0, r3
 80122f6:	f002 f9cf 	bl	8014698 <RCCEx_PLL3_Config>
 80122fa:	4603      	mov	r3, r0
 80122fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012300:	e008      	b.n	8012314 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8012302:	2301      	movs	r3, #1
 8012304:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012308:	e004      	b.n	8012314 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801230a:	bf00      	nop
 801230c:	e002      	b.n	8012314 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801230e:	bf00      	nop
 8012310:	e000      	b.n	8012314 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8012312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012314:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012318:	2b00      	cmp	r3, #0
 801231a:	d10d      	bne.n	8012338 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801231c:	4b05      	ldr	r3, [pc, #20]	@ (8012334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801231e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012320:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8012324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012328:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801232c:	4a01      	ldr	r2, [pc, #4]	@ (8012334 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801232e:	430b      	orrs	r3, r1
 8012330:	6593      	str	r3, [r2, #88]	@ 0x58
 8012332:	e005      	b.n	8012340 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8012334:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012338:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801233c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8012340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012348:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801234c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8012350:	2300      	movs	r3, #0
 8012352:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8012356:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801235a:	460b      	mov	r3, r1
 801235c:	4313      	orrs	r3, r2
 801235e:	d03a      	beq.n	80123d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8012360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012366:	2b30      	cmp	r3, #48	@ 0x30
 8012368:	d01f      	beq.n	80123aa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 801236a:	2b30      	cmp	r3, #48	@ 0x30
 801236c:	d819      	bhi.n	80123a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 801236e:	2b20      	cmp	r3, #32
 8012370:	d00c      	beq.n	801238c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8012372:	2b20      	cmp	r3, #32
 8012374:	d815      	bhi.n	80123a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8012376:	2b00      	cmp	r3, #0
 8012378:	d019      	beq.n	80123ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801237a:	2b10      	cmp	r3, #16
 801237c:	d111      	bne.n	80123a2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801237e:	4baa      	ldr	r3, [pc, #680]	@ (8012628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012382:	4aa9      	ldr	r2, [pc, #676]	@ (8012628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012388:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801238a:	e011      	b.n	80123b0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801238c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012390:	3308      	adds	r3, #8
 8012392:	2102      	movs	r1, #2
 8012394:	4618      	mov	r0, r3
 8012396:	f002 f8cd 	bl	8014534 <RCCEx_PLL2_Config>
 801239a:	4603      	mov	r3, r0
 801239c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80123a0:	e006      	b.n	80123b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80123a2:	2301      	movs	r3, #1
 80123a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80123a8:	e002      	b.n	80123b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80123aa:	bf00      	nop
 80123ac:	e000      	b.n	80123b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80123ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80123b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d10a      	bne.n	80123ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80123b8:	4b9b      	ldr	r3, [pc, #620]	@ (8012628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80123ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123bc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80123c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123c6:	4a98      	ldr	r2, [pc, #608]	@ (8012628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80123c8:	430b      	orrs	r3, r1
 80123ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80123cc:	e003      	b.n	80123d6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80123ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80123d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80123d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123de:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80123e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80123e6:	2300      	movs	r3, #0
 80123e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80123ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80123f0:	460b      	mov	r3, r1
 80123f2:	4313      	orrs	r3, r2
 80123f4:	d051      	beq.n	801249a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80123f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80123fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012400:	d035      	beq.n	801246e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8012402:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012406:	d82e      	bhi.n	8012466 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012408:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801240c:	d031      	beq.n	8012472 <HAL_RCCEx_PeriphCLKConfig+0x442>
 801240e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012412:	d828      	bhi.n	8012466 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012414:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012418:	d01a      	beq.n	8012450 <HAL_RCCEx_PeriphCLKConfig+0x420>
 801241a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801241e:	d822      	bhi.n	8012466 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012420:	2b00      	cmp	r3, #0
 8012422:	d003      	beq.n	801242c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8012424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012428:	d007      	beq.n	801243a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 801242a:	e01c      	b.n	8012466 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801242c:	4b7e      	ldr	r3, [pc, #504]	@ (8012628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801242e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012430:	4a7d      	ldr	r2, [pc, #500]	@ (8012628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012436:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012438:	e01c      	b.n	8012474 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801243a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801243e:	3308      	adds	r3, #8
 8012440:	2100      	movs	r1, #0
 8012442:	4618      	mov	r0, r3
 8012444:	f002 f876 	bl	8014534 <RCCEx_PLL2_Config>
 8012448:	4603      	mov	r3, r0
 801244a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801244e:	e011      	b.n	8012474 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012454:	3328      	adds	r3, #40	@ 0x28
 8012456:	2100      	movs	r1, #0
 8012458:	4618      	mov	r0, r3
 801245a:	f002 f91d 	bl	8014698 <RCCEx_PLL3_Config>
 801245e:	4603      	mov	r3, r0
 8012460:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012464:	e006      	b.n	8012474 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012466:	2301      	movs	r3, #1
 8012468:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801246c:	e002      	b.n	8012474 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801246e:	bf00      	nop
 8012470:	e000      	b.n	8012474 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8012472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012474:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012478:	2b00      	cmp	r3, #0
 801247a:	d10a      	bne.n	8012492 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801247c:	4b6a      	ldr	r3, [pc, #424]	@ (8012628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801247e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012480:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8012484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801248a:	4a67      	ldr	r2, [pc, #412]	@ (8012628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801248c:	430b      	orrs	r3, r1
 801248e:	6513      	str	r3, [r2, #80]	@ 0x50
 8012490:	e003      	b.n	801249a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012492:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012496:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801249a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80124a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80124aa:	2300      	movs	r3, #0
 80124ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80124b0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80124b4:	460b      	mov	r3, r1
 80124b6:	4313      	orrs	r3, r2
 80124b8:	d053      	beq.n	8012562 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80124ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80124c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80124c4:	d033      	beq.n	801252e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80124c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80124ca:	d82c      	bhi.n	8012526 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80124cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80124d0:	d02f      	beq.n	8012532 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80124d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80124d6:	d826      	bhi.n	8012526 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80124d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80124dc:	d02b      	beq.n	8012536 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80124de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80124e2:	d820      	bhi.n	8012526 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80124e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80124e8:	d012      	beq.n	8012510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80124ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80124ee:	d81a      	bhi.n	8012526 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d022      	beq.n	801253a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80124f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80124f8:	d115      	bne.n	8012526 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80124fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124fe:	3308      	adds	r3, #8
 8012500:	2101      	movs	r1, #1
 8012502:	4618      	mov	r0, r3
 8012504:	f002 f816 	bl	8014534 <RCCEx_PLL2_Config>
 8012508:	4603      	mov	r3, r0
 801250a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801250e:	e015      	b.n	801253c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012514:	3328      	adds	r3, #40	@ 0x28
 8012516:	2101      	movs	r1, #1
 8012518:	4618      	mov	r0, r3
 801251a:	f002 f8bd 	bl	8014698 <RCCEx_PLL3_Config>
 801251e:	4603      	mov	r3, r0
 8012520:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8012524:	e00a      	b.n	801253c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012526:	2301      	movs	r3, #1
 8012528:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801252c:	e006      	b.n	801253c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801252e:	bf00      	nop
 8012530:	e004      	b.n	801253c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8012532:	bf00      	nop
 8012534:	e002      	b.n	801253c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8012536:	bf00      	nop
 8012538:	e000      	b.n	801253c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801253a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801253c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012540:	2b00      	cmp	r3, #0
 8012542:	d10a      	bne.n	801255a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8012544:	4b38      	ldr	r3, [pc, #224]	@ (8012628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012548:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801254c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012552:	4a35      	ldr	r2, [pc, #212]	@ (8012628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012554:	430b      	orrs	r3, r1
 8012556:	6513      	str	r3, [r2, #80]	@ 0x50
 8012558:	e003      	b.n	8012562 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801255a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801255e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8012562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801256a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801256e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012572:	2300      	movs	r3, #0
 8012574:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8012578:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801257c:	460b      	mov	r3, r1
 801257e:	4313      	orrs	r3, r2
 8012580:	d058      	beq.n	8012634 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8012582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012586:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801258a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801258e:	d033      	beq.n	80125f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8012590:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012594:	d82c      	bhi.n	80125f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801259a:	d02f      	beq.n	80125fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 801259c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80125a0:	d826      	bhi.n	80125f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80125a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80125a6:	d02b      	beq.n	8012600 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80125a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80125ac:	d820      	bhi.n	80125f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80125ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80125b2:	d012      	beq.n	80125da <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80125b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80125b8:	d81a      	bhi.n	80125f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d022      	beq.n	8012604 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80125be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80125c2:	d115      	bne.n	80125f0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80125c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125c8:	3308      	adds	r3, #8
 80125ca:	2101      	movs	r1, #1
 80125cc:	4618      	mov	r0, r3
 80125ce:	f001 ffb1 	bl	8014534 <RCCEx_PLL2_Config>
 80125d2:	4603      	mov	r3, r0
 80125d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80125d8:	e015      	b.n	8012606 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80125da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125de:	3328      	adds	r3, #40	@ 0x28
 80125e0:	2101      	movs	r1, #1
 80125e2:	4618      	mov	r0, r3
 80125e4:	f002 f858 	bl	8014698 <RCCEx_PLL3_Config>
 80125e8:	4603      	mov	r3, r0
 80125ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80125ee:	e00a      	b.n	8012606 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80125f0:	2301      	movs	r3, #1
 80125f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80125f6:	e006      	b.n	8012606 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80125f8:	bf00      	nop
 80125fa:	e004      	b.n	8012606 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80125fc:	bf00      	nop
 80125fe:	e002      	b.n	8012606 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012600:	bf00      	nop
 8012602:	e000      	b.n	8012606 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012606:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801260a:	2b00      	cmp	r3, #0
 801260c:	d10e      	bne.n	801262c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801260e:	4b06      	ldr	r3, [pc, #24]	@ (8012628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012612:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801261a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801261e:	4a02      	ldr	r2, [pc, #8]	@ (8012628 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012620:	430b      	orrs	r3, r1
 8012622:	6593      	str	r3, [r2, #88]	@ 0x58
 8012624:	e006      	b.n	8012634 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8012626:	bf00      	nop
 8012628:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801262c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012630:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8012634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801263c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8012640:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012644:	2300      	movs	r3, #0
 8012646:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801264a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801264e:	460b      	mov	r3, r1
 8012650:	4313      	orrs	r3, r2
 8012652:	d037      	beq.n	80126c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8012654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801265a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801265e:	d00e      	beq.n	801267e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8012660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012664:	d816      	bhi.n	8012694 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8012666:	2b00      	cmp	r3, #0
 8012668:	d018      	beq.n	801269c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 801266a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801266e:	d111      	bne.n	8012694 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012670:	4bc4      	ldr	r3, [pc, #784]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012674:	4ac3      	ldr	r2, [pc, #780]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012676:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801267a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801267c:	e00f      	b.n	801269e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801267e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012682:	3308      	adds	r3, #8
 8012684:	2101      	movs	r1, #1
 8012686:	4618      	mov	r0, r3
 8012688:	f001 ff54 	bl	8014534 <RCCEx_PLL2_Config>
 801268c:	4603      	mov	r3, r0
 801268e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012692:	e004      	b.n	801269e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012694:	2301      	movs	r3, #1
 8012696:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801269a:	e000      	b.n	801269e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 801269c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801269e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d10a      	bne.n	80126bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80126a6:	4bb7      	ldr	r3, [pc, #732]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80126a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80126aa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80126ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126b4:	4ab3      	ldr	r2, [pc, #716]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80126b6:	430b      	orrs	r3, r1
 80126b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80126ba:	e003      	b.n	80126c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80126bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80126c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80126c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126cc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80126d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80126d4:	2300      	movs	r3, #0
 80126d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80126da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80126de:	460b      	mov	r3, r1
 80126e0:	4313      	orrs	r3, r2
 80126e2:	d039      	beq.n	8012758 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80126e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80126ea:	2b03      	cmp	r3, #3
 80126ec:	d81c      	bhi.n	8012728 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80126ee:	a201      	add	r2, pc, #4	@ (adr r2, 80126f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80126f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126f4:	08012731 	.word	0x08012731
 80126f8:	08012705 	.word	0x08012705
 80126fc:	08012713 	.word	0x08012713
 8012700:	08012731 	.word	0x08012731
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012704:	4b9f      	ldr	r3, [pc, #636]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012708:	4a9e      	ldr	r2, [pc, #632]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801270a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801270e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012710:	e00f      	b.n	8012732 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012716:	3308      	adds	r3, #8
 8012718:	2102      	movs	r1, #2
 801271a:	4618      	mov	r0, r3
 801271c:	f001 ff0a 	bl	8014534 <RCCEx_PLL2_Config>
 8012720:	4603      	mov	r3, r0
 8012722:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012726:	e004      	b.n	8012732 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8012728:	2301      	movs	r3, #1
 801272a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801272e:	e000      	b.n	8012732 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8012730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012732:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012736:	2b00      	cmp	r3, #0
 8012738:	d10a      	bne.n	8012750 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801273a:	4b92      	ldr	r3, [pc, #584]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801273c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801273e:	f023 0103 	bic.w	r1, r3, #3
 8012742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012748:	4a8e      	ldr	r2, [pc, #568]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801274a:	430b      	orrs	r3, r1
 801274c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801274e:	e003      	b.n	8012758 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012750:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012754:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012760:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8012764:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012768:	2300      	movs	r3, #0
 801276a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801276e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8012772:	460b      	mov	r3, r1
 8012774:	4313      	orrs	r3, r2
 8012776:	f000 8099 	beq.w	80128ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801277a:	4b83      	ldr	r3, [pc, #524]	@ (8012988 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	4a82      	ldr	r2, [pc, #520]	@ (8012988 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012784:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012786:	f7f6 feb9 	bl	80094fc <HAL_GetTick>
 801278a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801278e:	e00b      	b.n	80127a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012790:	f7f6 feb4 	bl	80094fc <HAL_GetTick>
 8012794:	4602      	mov	r2, r0
 8012796:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801279a:	1ad3      	subs	r3, r2, r3
 801279c:	2b64      	cmp	r3, #100	@ 0x64
 801279e:	d903      	bls.n	80127a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80127a0:	2303      	movs	r3, #3
 80127a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80127a6:	e005      	b.n	80127b4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80127a8:	4b77      	ldr	r3, [pc, #476]	@ (8012988 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d0ed      	beq.n	8012790 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80127b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d173      	bne.n	80128a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80127bc:	4b71      	ldr	r3, [pc, #452]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80127c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80127c8:	4053      	eors	r3, r2
 80127ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d015      	beq.n	80127fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80127d2:	4b6c      	ldr	r3, [pc, #432]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80127da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80127de:	4b69      	ldr	r3, [pc, #420]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127e2:	4a68      	ldr	r2, [pc, #416]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80127e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80127ea:	4b66      	ldr	r3, [pc, #408]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127ee:	4a65      	ldr	r2, [pc, #404]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80127f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80127f6:	4a63      	ldr	r2, [pc, #396]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80127fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80127fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012802:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801280a:	d118      	bne.n	801283e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801280c:	f7f6 fe76 	bl	80094fc <HAL_GetTick>
 8012810:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012814:	e00d      	b.n	8012832 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012816:	f7f6 fe71 	bl	80094fc <HAL_GetTick>
 801281a:	4602      	mov	r2, r0
 801281c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012820:	1ad2      	subs	r2, r2, r3
 8012822:	f241 3388 	movw	r3, #5000	@ 0x1388
 8012826:	429a      	cmp	r2, r3
 8012828:	d903      	bls.n	8012832 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 801282a:	2303      	movs	r3, #3
 801282c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8012830:	e005      	b.n	801283e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012832:	4b54      	ldr	r3, [pc, #336]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012836:	f003 0302 	and.w	r3, r3, #2
 801283a:	2b00      	cmp	r3, #0
 801283c:	d0eb      	beq.n	8012816 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 801283e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012842:	2b00      	cmp	r3, #0
 8012844:	d129      	bne.n	801289a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801284a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801284e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012856:	d10e      	bne.n	8012876 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8012858:	4b4a      	ldr	r3, [pc, #296]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801285a:	691b      	ldr	r3, [r3, #16]
 801285c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8012860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012864:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012868:	091a      	lsrs	r2, r3, #4
 801286a:	4b48      	ldr	r3, [pc, #288]	@ (801298c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801286c:	4013      	ands	r3, r2
 801286e:	4a45      	ldr	r2, [pc, #276]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012870:	430b      	orrs	r3, r1
 8012872:	6113      	str	r3, [r2, #16]
 8012874:	e005      	b.n	8012882 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8012876:	4b43      	ldr	r3, [pc, #268]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012878:	691b      	ldr	r3, [r3, #16]
 801287a:	4a42      	ldr	r2, [pc, #264]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801287c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012880:	6113      	str	r3, [r2, #16]
 8012882:	4b40      	ldr	r3, [pc, #256]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012884:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801288a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801288e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012892:	4a3c      	ldr	r2, [pc, #240]	@ (8012984 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012894:	430b      	orrs	r3, r1
 8012896:	6713      	str	r3, [r2, #112]	@ 0x70
 8012898:	e008      	b.n	80128ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801289a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801289e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80128a2:	e003      	b.n	80128ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80128a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80128a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80128ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b4:	f002 0301 	and.w	r3, r2, #1
 80128b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80128bc:	2300      	movs	r3, #0
 80128be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80128c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80128c6:	460b      	mov	r3, r1
 80128c8:	4313      	orrs	r3, r2
 80128ca:	f000 808f 	beq.w	80129ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80128ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80128d4:	2b28      	cmp	r3, #40	@ 0x28
 80128d6:	d871      	bhi.n	80129bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80128d8:	a201      	add	r2, pc, #4	@ (adr r2, 80128e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80128da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128de:	bf00      	nop
 80128e0:	080129c5 	.word	0x080129c5
 80128e4:	080129bd 	.word	0x080129bd
 80128e8:	080129bd 	.word	0x080129bd
 80128ec:	080129bd 	.word	0x080129bd
 80128f0:	080129bd 	.word	0x080129bd
 80128f4:	080129bd 	.word	0x080129bd
 80128f8:	080129bd 	.word	0x080129bd
 80128fc:	080129bd 	.word	0x080129bd
 8012900:	08012991 	.word	0x08012991
 8012904:	080129bd 	.word	0x080129bd
 8012908:	080129bd 	.word	0x080129bd
 801290c:	080129bd 	.word	0x080129bd
 8012910:	080129bd 	.word	0x080129bd
 8012914:	080129bd 	.word	0x080129bd
 8012918:	080129bd 	.word	0x080129bd
 801291c:	080129bd 	.word	0x080129bd
 8012920:	080129a7 	.word	0x080129a7
 8012924:	080129bd 	.word	0x080129bd
 8012928:	080129bd 	.word	0x080129bd
 801292c:	080129bd 	.word	0x080129bd
 8012930:	080129bd 	.word	0x080129bd
 8012934:	080129bd 	.word	0x080129bd
 8012938:	080129bd 	.word	0x080129bd
 801293c:	080129bd 	.word	0x080129bd
 8012940:	080129c5 	.word	0x080129c5
 8012944:	080129bd 	.word	0x080129bd
 8012948:	080129bd 	.word	0x080129bd
 801294c:	080129bd 	.word	0x080129bd
 8012950:	080129bd 	.word	0x080129bd
 8012954:	080129bd 	.word	0x080129bd
 8012958:	080129bd 	.word	0x080129bd
 801295c:	080129bd 	.word	0x080129bd
 8012960:	080129c5 	.word	0x080129c5
 8012964:	080129bd 	.word	0x080129bd
 8012968:	080129bd 	.word	0x080129bd
 801296c:	080129bd 	.word	0x080129bd
 8012970:	080129bd 	.word	0x080129bd
 8012974:	080129bd 	.word	0x080129bd
 8012978:	080129bd 	.word	0x080129bd
 801297c:	080129bd 	.word	0x080129bd
 8012980:	080129c5 	.word	0x080129c5
 8012984:	58024400 	.word	0x58024400
 8012988:	58024800 	.word	0x58024800
 801298c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012994:	3308      	adds	r3, #8
 8012996:	2101      	movs	r1, #1
 8012998:	4618      	mov	r0, r3
 801299a:	f001 fdcb 	bl	8014534 <RCCEx_PLL2_Config>
 801299e:	4603      	mov	r3, r0
 80129a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80129a4:	e00f      	b.n	80129c6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80129a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129aa:	3328      	adds	r3, #40	@ 0x28
 80129ac:	2101      	movs	r1, #1
 80129ae:	4618      	mov	r0, r3
 80129b0:	f001 fe72 	bl	8014698 <RCCEx_PLL3_Config>
 80129b4:	4603      	mov	r3, r0
 80129b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80129ba:	e004      	b.n	80129c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80129bc:	2301      	movs	r3, #1
 80129be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80129c2:	e000      	b.n	80129c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80129c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80129c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d10a      	bne.n	80129e4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80129ce:	4bbf      	ldr	r3, [pc, #764]	@ (8012ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80129d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129d2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80129d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80129dc:	4abb      	ldr	r2, [pc, #748]	@ (8012ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80129de:	430b      	orrs	r3, r1
 80129e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80129e2:	e003      	b.n	80129ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80129e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80129e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80129ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129f4:	f002 0302 	and.w	r3, r2, #2
 80129f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80129fc:	2300      	movs	r3, #0
 80129fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012a02:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8012a06:	460b      	mov	r3, r1
 8012a08:	4313      	orrs	r3, r2
 8012a0a:	d041      	beq.n	8012a90 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8012a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012a12:	2b05      	cmp	r3, #5
 8012a14:	d824      	bhi.n	8012a60 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8012a16:	a201      	add	r2, pc, #4	@ (adr r2, 8012a1c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8012a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a1c:	08012a69 	.word	0x08012a69
 8012a20:	08012a35 	.word	0x08012a35
 8012a24:	08012a4b 	.word	0x08012a4b
 8012a28:	08012a69 	.word	0x08012a69
 8012a2c:	08012a69 	.word	0x08012a69
 8012a30:	08012a69 	.word	0x08012a69
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a38:	3308      	adds	r3, #8
 8012a3a:	2101      	movs	r1, #1
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f001 fd79 	bl	8014534 <RCCEx_PLL2_Config>
 8012a42:	4603      	mov	r3, r0
 8012a44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012a48:	e00f      	b.n	8012a6a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a4e:	3328      	adds	r3, #40	@ 0x28
 8012a50:	2101      	movs	r1, #1
 8012a52:	4618      	mov	r0, r3
 8012a54:	f001 fe20 	bl	8014698 <RCCEx_PLL3_Config>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012a5e:	e004      	b.n	8012a6a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012a60:	2301      	movs	r3, #1
 8012a62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012a66:	e000      	b.n	8012a6a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8012a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012a6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d10a      	bne.n	8012a88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8012a72:	4b96      	ldr	r3, [pc, #600]	@ (8012ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a76:	f023 0107 	bic.w	r1, r3, #7
 8012a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012a80:	4a92      	ldr	r2, [pc, #584]	@ (8012ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012a82:	430b      	orrs	r3, r1
 8012a84:	6553      	str	r3, [r2, #84]	@ 0x54
 8012a86:	e003      	b.n	8012a90 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a98:	f002 0304 	and.w	r3, r2, #4
 8012a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012aa6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8012aaa:	460b      	mov	r3, r1
 8012aac:	4313      	orrs	r3, r2
 8012aae:	d044      	beq.n	8012b3a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8012ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012ab8:	2b05      	cmp	r3, #5
 8012aba:	d825      	bhi.n	8012b08 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8012abc:	a201      	add	r2, pc, #4	@ (adr r2, 8012ac4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8012abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ac2:	bf00      	nop
 8012ac4:	08012b11 	.word	0x08012b11
 8012ac8:	08012add 	.word	0x08012add
 8012acc:	08012af3 	.word	0x08012af3
 8012ad0:	08012b11 	.word	0x08012b11
 8012ad4:	08012b11 	.word	0x08012b11
 8012ad8:	08012b11 	.word	0x08012b11
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ae0:	3308      	adds	r3, #8
 8012ae2:	2101      	movs	r1, #1
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f001 fd25 	bl	8014534 <RCCEx_PLL2_Config>
 8012aea:	4603      	mov	r3, r0
 8012aec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012af0:	e00f      	b.n	8012b12 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012af6:	3328      	adds	r3, #40	@ 0x28
 8012af8:	2101      	movs	r1, #1
 8012afa:	4618      	mov	r0, r3
 8012afc:	f001 fdcc 	bl	8014698 <RCCEx_PLL3_Config>
 8012b00:	4603      	mov	r3, r0
 8012b02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012b06:	e004      	b.n	8012b12 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012b08:	2301      	movs	r3, #1
 8012b0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012b0e:	e000      	b.n	8012b12 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8012b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012b12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d10b      	bne.n	8012b32 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012b1a:	4b6c      	ldr	r3, [pc, #432]	@ (8012ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b1e:	f023 0107 	bic.w	r1, r3, #7
 8012b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b2a:	4a68      	ldr	r2, [pc, #416]	@ (8012ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012b2c:	430b      	orrs	r3, r1
 8012b2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8012b30:	e003      	b.n	8012b3a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b42:	f002 0320 	and.w	r3, r2, #32
 8012b46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012b50:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8012b54:	460b      	mov	r3, r1
 8012b56:	4313      	orrs	r3, r2
 8012b58:	d055      	beq.n	8012c06 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8012b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012b66:	d033      	beq.n	8012bd0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8012b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012b6c:	d82c      	bhi.n	8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012b72:	d02f      	beq.n	8012bd4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8012b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012b78:	d826      	bhi.n	8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012b7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012b7e:	d02b      	beq.n	8012bd8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8012b80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012b84:	d820      	bhi.n	8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012b86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012b8a:	d012      	beq.n	8012bb2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8012b8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012b90:	d81a      	bhi.n	8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d022      	beq.n	8012bdc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8012b96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012b9a:	d115      	bne.n	8012bc8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ba0:	3308      	adds	r3, #8
 8012ba2:	2100      	movs	r1, #0
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f001 fcc5 	bl	8014534 <RCCEx_PLL2_Config>
 8012baa:	4603      	mov	r3, r0
 8012bac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012bb0:	e015      	b.n	8012bde <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bb6:	3328      	adds	r3, #40	@ 0x28
 8012bb8:	2102      	movs	r1, #2
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f001 fd6c 	bl	8014698 <RCCEx_PLL3_Config>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012bc6:	e00a      	b.n	8012bde <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012bc8:	2301      	movs	r3, #1
 8012bca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012bce:	e006      	b.n	8012bde <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012bd0:	bf00      	nop
 8012bd2:	e004      	b.n	8012bde <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012bd4:	bf00      	nop
 8012bd6:	e002      	b.n	8012bde <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012bd8:	bf00      	nop
 8012bda:	e000      	b.n	8012bde <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012bde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d10b      	bne.n	8012bfe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8012be6:	4b39      	ldr	r3, [pc, #228]	@ (8012ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012bea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012bf6:	4a35      	ldr	r2, [pc, #212]	@ (8012ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012bf8:	430b      	orrs	r3, r1
 8012bfa:	6553      	str	r3, [r2, #84]	@ 0x54
 8012bfc:	e003      	b.n	8012c06 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012bfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8012c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c0e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8012c12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012c16:	2300      	movs	r3, #0
 8012c18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012c1c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8012c20:	460b      	mov	r3, r1
 8012c22:	4313      	orrs	r3, r2
 8012c24:	d058      	beq.n	8012cd8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8012c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012c2e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012c32:	d033      	beq.n	8012c9c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8012c34:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012c38:	d82c      	bhi.n	8012c94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012c3e:	d02f      	beq.n	8012ca0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8012c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012c44:	d826      	bhi.n	8012c94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012c46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012c4a:	d02b      	beq.n	8012ca4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8012c4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012c50:	d820      	bhi.n	8012c94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012c52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012c56:	d012      	beq.n	8012c7e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8012c58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012c5c:	d81a      	bhi.n	8012c94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d022      	beq.n	8012ca8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8012c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012c66:	d115      	bne.n	8012c94 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c6c:	3308      	adds	r3, #8
 8012c6e:	2100      	movs	r1, #0
 8012c70:	4618      	mov	r0, r3
 8012c72:	f001 fc5f 	bl	8014534 <RCCEx_PLL2_Config>
 8012c76:	4603      	mov	r3, r0
 8012c78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012c7c:	e015      	b.n	8012caa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c82:	3328      	adds	r3, #40	@ 0x28
 8012c84:	2102      	movs	r1, #2
 8012c86:	4618      	mov	r0, r3
 8012c88:	f001 fd06 	bl	8014698 <RCCEx_PLL3_Config>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012c92:	e00a      	b.n	8012caa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012c94:	2301      	movs	r3, #1
 8012c96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012c9a:	e006      	b.n	8012caa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012c9c:	bf00      	nop
 8012c9e:	e004      	b.n	8012caa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012ca0:	bf00      	nop
 8012ca2:	e002      	b.n	8012caa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012ca4:	bf00      	nop
 8012ca6:	e000      	b.n	8012caa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012caa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d10e      	bne.n	8012cd0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8012cb2:	4b06      	ldr	r3, [pc, #24]	@ (8012ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012cb6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8012cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012cc2:	4a02      	ldr	r2, [pc, #8]	@ (8012ccc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012cc4:	430b      	orrs	r3, r1
 8012cc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8012cc8:	e006      	b.n	8012cd8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8012cca:	bf00      	nop
 8012ccc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012cd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012cd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8012cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ce0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8012ce4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012ce8:	2300      	movs	r3, #0
 8012cea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012cee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8012cf2:	460b      	mov	r3, r1
 8012cf4:	4313      	orrs	r3, r2
 8012cf6:	d055      	beq.n	8012da4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8012cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012d00:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012d04:	d033      	beq.n	8012d6e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8012d06:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012d0a:	d82c      	bhi.n	8012d66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012d10:	d02f      	beq.n	8012d72 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8012d12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012d16:	d826      	bhi.n	8012d66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012d18:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012d1c:	d02b      	beq.n	8012d76 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8012d1e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012d22:	d820      	bhi.n	8012d66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012d24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012d28:	d012      	beq.n	8012d50 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8012d2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012d2e:	d81a      	bhi.n	8012d66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d022      	beq.n	8012d7a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8012d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012d38:	d115      	bne.n	8012d66 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d3e:	3308      	adds	r3, #8
 8012d40:	2100      	movs	r1, #0
 8012d42:	4618      	mov	r0, r3
 8012d44:	f001 fbf6 	bl	8014534 <RCCEx_PLL2_Config>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012d4e:	e015      	b.n	8012d7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d54:	3328      	adds	r3, #40	@ 0x28
 8012d56:	2102      	movs	r1, #2
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f001 fc9d 	bl	8014698 <RCCEx_PLL3_Config>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012d64:	e00a      	b.n	8012d7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012d66:	2301      	movs	r3, #1
 8012d68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012d6c:	e006      	b.n	8012d7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012d6e:	bf00      	nop
 8012d70:	e004      	b.n	8012d7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012d72:	bf00      	nop
 8012d74:	e002      	b.n	8012d7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012d76:	bf00      	nop
 8012d78:	e000      	b.n	8012d7c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012d7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d10b      	bne.n	8012d9c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8012d84:	4ba0      	ldr	r3, [pc, #640]	@ (8013008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d88:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8012d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012d94:	4a9c      	ldr	r2, [pc, #624]	@ (8013008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012d96:	430b      	orrs	r3, r1
 8012d98:	6593      	str	r3, [r2, #88]	@ 0x58
 8012d9a:	e003      	b.n	8012da4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012da0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8012da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dac:	f002 0308 	and.w	r3, r2, #8
 8012db0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012db4:	2300      	movs	r3, #0
 8012db6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012dba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8012dbe:	460b      	mov	r3, r1
 8012dc0:	4313      	orrs	r3, r2
 8012dc2:	d01e      	beq.n	8012e02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8012dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012dd0:	d10c      	bne.n	8012dec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dd6:	3328      	adds	r3, #40	@ 0x28
 8012dd8:	2102      	movs	r1, #2
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f001 fc5c 	bl	8014698 <RCCEx_PLL3_Config>
 8012de0:	4603      	mov	r3, r0
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d002      	beq.n	8012dec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8012de6:	2301      	movs	r3, #1
 8012de8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8012dec:	4b86      	ldr	r3, [pc, #536]	@ (8013008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012df0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012dfc:	4a82      	ldr	r2, [pc, #520]	@ (8013008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012dfe:	430b      	orrs	r3, r1
 8012e00:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8012e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e0a:	f002 0310 	and.w	r3, r2, #16
 8012e0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012e12:	2300      	movs	r3, #0
 8012e14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012e18:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8012e1c:	460b      	mov	r3, r1
 8012e1e:	4313      	orrs	r3, r2
 8012e20:	d01e      	beq.n	8012e60 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8012e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012e2e:	d10c      	bne.n	8012e4a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e34:	3328      	adds	r3, #40	@ 0x28
 8012e36:	2102      	movs	r1, #2
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f001 fc2d 	bl	8014698 <RCCEx_PLL3_Config>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d002      	beq.n	8012e4a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8012e44:	2301      	movs	r3, #1
 8012e46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8012e4a:	4b6f      	ldr	r3, [pc, #444]	@ (8013008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012e5a:	4a6b      	ldr	r2, [pc, #428]	@ (8013008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e5c:	430b      	orrs	r3, r1
 8012e5e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e68:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8012e6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012e6e:	2300      	movs	r3, #0
 8012e70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012e72:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8012e76:	460b      	mov	r3, r1
 8012e78:	4313      	orrs	r3, r2
 8012e7a:	d03e      	beq.n	8012efa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8012e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012e84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012e88:	d022      	beq.n	8012ed0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8012e8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012e8e:	d81b      	bhi.n	8012ec8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d003      	beq.n	8012e9c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8012e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012e98:	d00b      	beq.n	8012eb2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8012e9a:	e015      	b.n	8012ec8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ea0:	3308      	adds	r3, #8
 8012ea2:	2100      	movs	r1, #0
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f001 fb45 	bl	8014534 <RCCEx_PLL2_Config>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012eb0:	e00f      	b.n	8012ed2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012eb6:	3328      	adds	r3, #40	@ 0x28
 8012eb8:	2102      	movs	r1, #2
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f001 fbec 	bl	8014698 <RCCEx_PLL3_Config>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012ec6:	e004      	b.n	8012ed2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012ec8:	2301      	movs	r3, #1
 8012eca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012ece:	e000      	b.n	8012ed2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8012ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012ed2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d10b      	bne.n	8012ef2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012eda:	4b4b      	ldr	r3, [pc, #300]	@ (8013008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ede:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8012ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ee6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012eea:	4a47      	ldr	r2, [pc, #284]	@ (8013008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012eec:	430b      	orrs	r3, r1
 8012eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8012ef0:	e003      	b.n	8012efa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012ef2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ef6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f02:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8012f06:	673b      	str	r3, [r7, #112]	@ 0x70
 8012f08:	2300      	movs	r3, #0
 8012f0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8012f0c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8012f10:	460b      	mov	r3, r1
 8012f12:	4313      	orrs	r3, r2
 8012f14:	d03b      	beq.n	8012f8e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8012f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012f1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012f22:	d01f      	beq.n	8012f64 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8012f24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012f28:	d818      	bhi.n	8012f5c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8012f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012f2e:	d003      	beq.n	8012f38 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8012f30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012f34:	d007      	beq.n	8012f46 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8012f36:	e011      	b.n	8012f5c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012f38:	4b33      	ldr	r3, [pc, #204]	@ (8013008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f3c:	4a32      	ldr	r2, [pc, #200]	@ (8013008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012f42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8012f44:	e00f      	b.n	8012f66 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f4a:	3328      	adds	r3, #40	@ 0x28
 8012f4c:	2101      	movs	r1, #1
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f001 fba2 	bl	8014698 <RCCEx_PLL3_Config>
 8012f54:	4603      	mov	r3, r0
 8012f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8012f5a:	e004      	b.n	8012f66 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012f5c:	2301      	movs	r3, #1
 8012f5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012f62:	e000      	b.n	8012f66 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8012f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012f66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d10b      	bne.n	8012f86 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012f6e:	4b26      	ldr	r3, [pc, #152]	@ (8013008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8012f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012f7e:	4a22      	ldr	r2, [pc, #136]	@ (8013008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f80:	430b      	orrs	r3, r1
 8012f82:	6553      	str	r3, [r2, #84]	@ 0x54
 8012f84:	e003      	b.n	8012f8e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8012f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f96:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8012f9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012fa0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8012fa4:	460b      	mov	r3, r1
 8012fa6:	4313      	orrs	r3, r2
 8012fa8:	d034      	beq.n	8013014 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8012faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d003      	beq.n	8012fbc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8012fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012fb8:	d007      	beq.n	8012fca <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8012fba:	e011      	b.n	8012fe0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012fbc:	4b12      	ldr	r3, [pc, #72]	@ (8013008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fc0:	4a11      	ldr	r2, [pc, #68]	@ (8013008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012fc8:	e00e      	b.n	8012fe8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fce:	3308      	adds	r3, #8
 8012fd0:	2102      	movs	r1, #2
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f001 faae 	bl	8014534 <RCCEx_PLL2_Config>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012fde:	e003      	b.n	8012fe8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012fe8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d10d      	bne.n	801300c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8012ff0:	4b05      	ldr	r3, [pc, #20]	@ (8013008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012ff4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012ffe:	4a02      	ldr	r2, [pc, #8]	@ (8013008 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013000:	430b      	orrs	r3, r1
 8013002:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8013004:	e006      	b.n	8013014 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8013006:	bf00      	nop
 8013008:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801300c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013010:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8013014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801301c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8013020:	663b      	str	r3, [r7, #96]	@ 0x60
 8013022:	2300      	movs	r3, #0
 8013024:	667b      	str	r3, [r7, #100]	@ 0x64
 8013026:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801302a:	460b      	mov	r3, r1
 801302c:	4313      	orrs	r3, r2
 801302e:	d00c      	beq.n	801304a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8013030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013034:	3328      	adds	r3, #40	@ 0x28
 8013036:	2102      	movs	r1, #2
 8013038:	4618      	mov	r0, r3
 801303a:	f001 fb2d 	bl	8014698 <RCCEx_PLL3_Config>
 801303e:	4603      	mov	r3, r0
 8013040:	2b00      	cmp	r3, #0
 8013042:	d002      	beq.n	801304a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8013044:	2301      	movs	r3, #1
 8013046:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801304a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013052:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8013056:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013058:	2300      	movs	r3, #0
 801305a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801305c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8013060:	460b      	mov	r3, r1
 8013062:	4313      	orrs	r3, r2
 8013064:	d036      	beq.n	80130d4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8013066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801306a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801306c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013070:	d018      	beq.n	80130a4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8013072:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013076:	d811      	bhi.n	801309c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8013078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801307c:	d014      	beq.n	80130a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 801307e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013082:	d80b      	bhi.n	801309c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8013084:	2b00      	cmp	r3, #0
 8013086:	d011      	beq.n	80130ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8013088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801308c:	d106      	bne.n	801309c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801308e:	4bb7      	ldr	r3, [pc, #732]	@ (801336c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013092:	4ab6      	ldr	r2, [pc, #728]	@ (801336c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013098:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801309a:	e008      	b.n	80130ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801309c:	2301      	movs	r3, #1
 801309e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80130a2:	e004      	b.n	80130ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80130a4:	bf00      	nop
 80130a6:	e002      	b.n	80130ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80130a8:	bf00      	nop
 80130aa:	e000      	b.n	80130ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80130ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80130ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d10a      	bne.n	80130cc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80130b6:	4bad      	ldr	r3, [pc, #692]	@ (801336c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80130b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80130ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80130be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80130c4:	4aa9      	ldr	r2, [pc, #676]	@ (801336c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80130c6:	430b      	orrs	r3, r1
 80130c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80130ca:	e003      	b.n	80130d4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80130cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80130d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80130d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80130e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80130e2:	2300      	movs	r3, #0
 80130e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80130e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80130ea:	460b      	mov	r3, r1
 80130ec:	4313      	orrs	r3, r2
 80130ee:	d009      	beq.n	8013104 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80130f0:	4b9e      	ldr	r3, [pc, #632]	@ (801336c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80130f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80130f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80130f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80130fe:	4a9b      	ldr	r2, [pc, #620]	@ (801336c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013100:	430b      	orrs	r3, r1
 8013102:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8013104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801310c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8013110:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013112:	2300      	movs	r3, #0
 8013114:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013116:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801311a:	460b      	mov	r3, r1
 801311c:	4313      	orrs	r3, r2
 801311e:	d009      	beq.n	8013134 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8013120:	4b92      	ldr	r3, [pc, #584]	@ (801336c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013124:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8013128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801312c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801312e:	4a8f      	ldr	r2, [pc, #572]	@ (801336c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013130:	430b      	orrs	r3, r1
 8013132:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8013134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801313c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8013140:	643b      	str	r3, [r7, #64]	@ 0x40
 8013142:	2300      	movs	r3, #0
 8013144:	647b      	str	r3, [r7, #68]	@ 0x44
 8013146:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801314a:	460b      	mov	r3, r1
 801314c:	4313      	orrs	r3, r2
 801314e:	d00e      	beq.n	801316e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8013150:	4b86      	ldr	r3, [pc, #536]	@ (801336c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013152:	691b      	ldr	r3, [r3, #16]
 8013154:	4a85      	ldr	r2, [pc, #532]	@ (801336c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013156:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801315a:	6113      	str	r3, [r2, #16]
 801315c:	4b83      	ldr	r3, [pc, #524]	@ (801336c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801315e:	6919      	ldr	r1, [r3, #16]
 8013160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013164:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8013168:	4a80      	ldr	r2, [pc, #512]	@ (801336c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801316a:	430b      	orrs	r3, r1
 801316c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801316e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013176:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801317a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801317c:	2300      	movs	r3, #0
 801317e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013180:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8013184:	460b      	mov	r3, r1
 8013186:	4313      	orrs	r3, r2
 8013188:	d009      	beq.n	801319e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801318a:	4b78      	ldr	r3, [pc, #480]	@ (801336c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801318c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801318e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8013192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013198:	4a74      	ldr	r2, [pc, #464]	@ (801336c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801319a:	430b      	orrs	r3, r1
 801319c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801319e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80131aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80131ac:	2300      	movs	r3, #0
 80131ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80131b0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80131b4:	460b      	mov	r3, r1
 80131b6:	4313      	orrs	r3, r2
 80131b8:	d00a      	beq.n	80131d0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80131ba:	4b6c      	ldr	r3, [pc, #432]	@ (801336c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80131be:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80131c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80131ca:	4a68      	ldr	r2, [pc, #416]	@ (801336c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131cc:	430b      	orrs	r3, r1
 80131ce:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80131d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d8:	2100      	movs	r1, #0
 80131da:	62b9      	str	r1, [r7, #40]	@ 0x28
 80131dc:	f003 0301 	and.w	r3, r3, #1
 80131e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80131e2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80131e6:	460b      	mov	r3, r1
 80131e8:	4313      	orrs	r3, r2
 80131ea:	d011      	beq.n	8013210 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80131ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131f0:	3308      	adds	r3, #8
 80131f2:	2100      	movs	r1, #0
 80131f4:	4618      	mov	r0, r3
 80131f6:	f001 f99d 	bl	8014534 <RCCEx_PLL2_Config>
 80131fa:	4603      	mov	r3, r0
 80131fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013200:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013204:	2b00      	cmp	r3, #0
 8013206:	d003      	beq.n	8013210 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013208:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801320c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8013210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013218:	2100      	movs	r1, #0
 801321a:	6239      	str	r1, [r7, #32]
 801321c:	f003 0302 	and.w	r3, r3, #2
 8013220:	627b      	str	r3, [r7, #36]	@ 0x24
 8013222:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8013226:	460b      	mov	r3, r1
 8013228:	4313      	orrs	r3, r2
 801322a:	d011      	beq.n	8013250 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801322c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013230:	3308      	adds	r3, #8
 8013232:	2101      	movs	r1, #1
 8013234:	4618      	mov	r0, r3
 8013236:	f001 f97d 	bl	8014534 <RCCEx_PLL2_Config>
 801323a:	4603      	mov	r3, r0
 801323c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013240:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013244:	2b00      	cmp	r3, #0
 8013246:	d003      	beq.n	8013250 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013248:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801324c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8013250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013258:	2100      	movs	r1, #0
 801325a:	61b9      	str	r1, [r7, #24]
 801325c:	f003 0304 	and.w	r3, r3, #4
 8013260:	61fb      	str	r3, [r7, #28]
 8013262:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8013266:	460b      	mov	r3, r1
 8013268:	4313      	orrs	r3, r2
 801326a:	d011      	beq.n	8013290 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801326c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013270:	3308      	adds	r3, #8
 8013272:	2102      	movs	r1, #2
 8013274:	4618      	mov	r0, r3
 8013276:	f001 f95d 	bl	8014534 <RCCEx_PLL2_Config>
 801327a:	4603      	mov	r3, r0
 801327c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013280:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013284:	2b00      	cmp	r3, #0
 8013286:	d003      	beq.n	8013290 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013288:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801328c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8013290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013298:	2100      	movs	r1, #0
 801329a:	6139      	str	r1, [r7, #16]
 801329c:	f003 0308 	and.w	r3, r3, #8
 80132a0:	617b      	str	r3, [r7, #20]
 80132a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80132a6:	460b      	mov	r3, r1
 80132a8:	4313      	orrs	r3, r2
 80132aa:	d011      	beq.n	80132d0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80132ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132b0:	3328      	adds	r3, #40	@ 0x28
 80132b2:	2100      	movs	r1, #0
 80132b4:	4618      	mov	r0, r3
 80132b6:	f001 f9ef 	bl	8014698 <RCCEx_PLL3_Config>
 80132ba:	4603      	mov	r3, r0
 80132bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80132c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d003      	beq.n	80132d0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80132c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80132d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d8:	2100      	movs	r1, #0
 80132da:	60b9      	str	r1, [r7, #8]
 80132dc:	f003 0310 	and.w	r3, r3, #16
 80132e0:	60fb      	str	r3, [r7, #12]
 80132e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80132e6:	460b      	mov	r3, r1
 80132e8:	4313      	orrs	r3, r2
 80132ea:	d011      	beq.n	8013310 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80132ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132f0:	3328      	adds	r3, #40	@ 0x28
 80132f2:	2101      	movs	r1, #1
 80132f4:	4618      	mov	r0, r3
 80132f6:	f001 f9cf 	bl	8014698 <RCCEx_PLL3_Config>
 80132fa:	4603      	mov	r3, r0
 80132fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013300:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013304:	2b00      	cmp	r3, #0
 8013306:	d003      	beq.n	8013310 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013308:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801330c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8013310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013318:	2100      	movs	r1, #0
 801331a:	6039      	str	r1, [r7, #0]
 801331c:	f003 0320 	and.w	r3, r3, #32
 8013320:	607b      	str	r3, [r7, #4]
 8013322:	e9d7 1200 	ldrd	r1, r2, [r7]
 8013326:	460b      	mov	r3, r1
 8013328:	4313      	orrs	r3, r2
 801332a:	d011      	beq.n	8013350 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801332c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013330:	3328      	adds	r3, #40	@ 0x28
 8013332:	2102      	movs	r1, #2
 8013334:	4618      	mov	r0, r3
 8013336:	f001 f9af 	bl	8014698 <RCCEx_PLL3_Config>
 801333a:	4603      	mov	r3, r0
 801333c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013344:	2b00      	cmp	r3, #0
 8013346:	d003      	beq.n	8013350 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013348:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801334c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8013350:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8013354:	2b00      	cmp	r3, #0
 8013356:	d101      	bne.n	801335c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8013358:	2300      	movs	r3, #0
 801335a:	e000      	b.n	801335e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 801335c:	2301      	movs	r3, #1
}
 801335e:	4618      	mov	r0, r3
 8013360:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8013364:	46bd      	mov	sp, r7
 8013366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801336a:	bf00      	nop
 801336c:	58024400 	.word	0x58024400

08013370 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b090      	sub	sp, #64	@ 0x40
 8013374:	af00      	add	r7, sp, #0
 8013376:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801337a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801337e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8013382:	430b      	orrs	r3, r1
 8013384:	f040 8094 	bne.w	80134b0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8013388:	4b9b      	ldr	r3, [pc, #620]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801338a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801338c:	f003 0307 	and.w	r3, r3, #7
 8013390:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8013392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013394:	2b04      	cmp	r3, #4
 8013396:	f200 8087 	bhi.w	80134a8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801339a:	a201      	add	r2, pc, #4	@ (adr r2, 80133a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133a0:	080133b5 	.word	0x080133b5
 80133a4:	080133dd 	.word	0x080133dd
 80133a8:	08013405 	.word	0x08013405
 80133ac:	080134a1 	.word	0x080134a1
 80133b0:	0801342d 	.word	0x0801342d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80133b4:	4b90      	ldr	r3, [pc, #576]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80133bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80133c0:	d108      	bne.n	80133d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80133c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80133c6:	4618      	mov	r0, r3
 80133c8:	f000 ff62 	bl	8014290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80133cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80133d0:	f000 bc93 	b.w	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80133d4:	2300      	movs	r3, #0
 80133d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80133d8:	f000 bc8f 	b.w	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80133dc:	4b86      	ldr	r3, [pc, #536]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80133e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80133e8:	d108      	bne.n	80133fc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80133ea:	f107 0318 	add.w	r3, r7, #24
 80133ee:	4618      	mov	r0, r3
 80133f0:	f000 fca6 	bl	8013d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80133f4:	69bb      	ldr	r3, [r7, #24]
 80133f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80133f8:	f000 bc7f 	b.w	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80133fc:	2300      	movs	r3, #0
 80133fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013400:	f000 bc7b 	b.w	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013404:	4b7c      	ldr	r3, [pc, #496]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801340c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013410:	d108      	bne.n	8013424 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013412:	f107 030c 	add.w	r3, r7, #12
 8013416:	4618      	mov	r0, r3
 8013418:	f000 fde6 	bl	8013fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013420:	f000 bc6b 	b.w	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013424:	2300      	movs	r3, #0
 8013426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013428:	f000 bc67 	b.w	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801342c:	4b72      	ldr	r3, [pc, #456]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801342e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013430:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013434:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013436:	4b70      	ldr	r3, [pc, #448]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	f003 0304 	and.w	r3, r3, #4
 801343e:	2b04      	cmp	r3, #4
 8013440:	d10c      	bne.n	801345c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8013442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013444:	2b00      	cmp	r3, #0
 8013446:	d109      	bne.n	801345c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013448:	4b6b      	ldr	r3, [pc, #428]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	08db      	lsrs	r3, r3, #3
 801344e:	f003 0303 	and.w	r3, r3, #3
 8013452:	4a6a      	ldr	r2, [pc, #424]	@ (80135fc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8013454:	fa22 f303 	lsr.w	r3, r2, r3
 8013458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801345a:	e01f      	b.n	801349c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801345c:	4b66      	ldr	r3, [pc, #408]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013464:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013468:	d106      	bne.n	8013478 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801346a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801346c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013470:	d102      	bne.n	8013478 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013472:	4b63      	ldr	r3, [pc, #396]	@ (8013600 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8013474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013476:	e011      	b.n	801349c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013478:	4b5f      	ldr	r3, [pc, #380]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013480:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013484:	d106      	bne.n	8013494 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8013486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801348c:	d102      	bne.n	8013494 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801348e:	4b5d      	ldr	r3, [pc, #372]	@ (8013604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013492:	e003      	b.n	801349c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013494:	2300      	movs	r3, #0
 8013496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013498:	f000 bc2f 	b.w	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801349c:	f000 bc2d 	b.w	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80134a0:	4b59      	ldr	r3, [pc, #356]	@ (8013608 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80134a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134a4:	f000 bc29 	b.w	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80134a8:	2300      	movs	r3, #0
 80134aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134ac:	f000 bc25 	b.w	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80134b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80134b4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80134b8:	430b      	orrs	r3, r1
 80134ba:	f040 80a7 	bne.w	801360c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80134be:	4b4e      	ldr	r3, [pc, #312]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80134c2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80134c6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80134c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80134ce:	d054      	beq.n	801357a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80134d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80134d6:	f200 808b 	bhi.w	80135f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80134da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134dc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80134e0:	f000 8083 	beq.w	80135ea <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80134e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80134ea:	f200 8081 	bhi.w	80135f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80134ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80134f4:	d02f      	beq.n	8013556 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80134f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80134fc:	d878      	bhi.n	80135f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80134fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013500:	2b00      	cmp	r3, #0
 8013502:	d004      	beq.n	801350e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8013504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013506:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801350a:	d012      	beq.n	8013532 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 801350c:	e070      	b.n	80135f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801350e:	4b3a      	ldr	r3, [pc, #232]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013516:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801351a:	d107      	bne.n	801352c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801351c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013520:	4618      	mov	r0, r3
 8013522:	f000 feb5 	bl	8014290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801352a:	e3e6      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801352c:	2300      	movs	r3, #0
 801352e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013530:	e3e3      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013532:	4b31      	ldr	r3, [pc, #196]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801353a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801353e:	d107      	bne.n	8013550 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013540:	f107 0318 	add.w	r3, r7, #24
 8013544:	4618      	mov	r0, r3
 8013546:	f000 fbfb 	bl	8013d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801354a:	69bb      	ldr	r3, [r7, #24]
 801354c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801354e:	e3d4      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013550:	2300      	movs	r3, #0
 8013552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013554:	e3d1      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013556:	4b28      	ldr	r3, [pc, #160]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801355e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013562:	d107      	bne.n	8013574 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013564:	f107 030c 	add.w	r3, r7, #12
 8013568:	4618      	mov	r0, r3
 801356a:	f000 fd3d 	bl	8013fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013572:	e3c2      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013574:	2300      	movs	r3, #0
 8013576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013578:	e3bf      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801357a:	4b1f      	ldr	r3, [pc, #124]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801357c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801357e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013582:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013584:	4b1c      	ldr	r3, [pc, #112]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	f003 0304 	and.w	r3, r3, #4
 801358c:	2b04      	cmp	r3, #4
 801358e:	d10c      	bne.n	80135aa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8013590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013592:	2b00      	cmp	r3, #0
 8013594:	d109      	bne.n	80135aa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013596:	4b18      	ldr	r3, [pc, #96]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	08db      	lsrs	r3, r3, #3
 801359c:	f003 0303 	and.w	r3, r3, #3
 80135a0:	4a16      	ldr	r2, [pc, #88]	@ (80135fc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80135a2:	fa22 f303 	lsr.w	r3, r2, r3
 80135a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135a8:	e01e      	b.n	80135e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80135aa:	4b13      	ldr	r3, [pc, #76]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80135b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80135b6:	d106      	bne.n	80135c6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80135b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80135be:	d102      	bne.n	80135c6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80135c0:	4b0f      	ldr	r3, [pc, #60]	@ (8013600 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80135c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135c4:	e010      	b.n	80135e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80135c6:	4b0c      	ldr	r3, [pc, #48]	@ (80135f8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80135ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80135d2:	d106      	bne.n	80135e2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80135d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80135da:	d102      	bne.n	80135e2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80135dc:	4b09      	ldr	r3, [pc, #36]	@ (8013604 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80135de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135e0:	e002      	b.n	80135e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80135e2:	2300      	movs	r3, #0
 80135e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80135e6:	e388      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80135e8:	e387      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80135ea:	4b07      	ldr	r3, [pc, #28]	@ (8013608 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80135ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135ee:	e384      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80135f0:	2300      	movs	r3, #0
 80135f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135f4:	e381      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80135f6:	bf00      	nop
 80135f8:	58024400 	.word	0x58024400
 80135fc:	03d09000 	.word	0x03d09000
 8013600:	003d0900 	.word	0x003d0900
 8013604:	016e3600 	.word	0x016e3600
 8013608:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801360c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013610:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8013614:	430b      	orrs	r3, r1
 8013616:	f040 809c 	bne.w	8013752 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801361a:	4b9e      	ldr	r3, [pc, #632]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801361e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8013622:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8013624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013626:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801362a:	d054      	beq.n	80136d6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 801362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801362e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013632:	f200 808b 	bhi.w	801374c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8013636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013638:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801363c:	f000 8083 	beq.w	8013746 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8013640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013642:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8013646:	f200 8081 	bhi.w	801374c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801364a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801364c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013650:	d02f      	beq.n	80136b2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8013652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013654:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013658:	d878      	bhi.n	801374c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801365c:	2b00      	cmp	r3, #0
 801365e:	d004      	beq.n	801366a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8013660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013662:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013666:	d012      	beq.n	801368e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8013668:	e070      	b.n	801374c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801366a:	4b8a      	ldr	r3, [pc, #552]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013672:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013676:	d107      	bne.n	8013688 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801367c:	4618      	mov	r0, r3
 801367e:	f000 fe07 	bl	8014290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013686:	e338      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013688:	2300      	movs	r3, #0
 801368a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801368c:	e335      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801368e:	4b81      	ldr	r3, [pc, #516]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801369a:	d107      	bne.n	80136ac <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801369c:	f107 0318 	add.w	r3, r7, #24
 80136a0:	4618      	mov	r0, r3
 80136a2:	f000 fb4d 	bl	8013d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80136a6:	69bb      	ldr	r3, [r7, #24]
 80136a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80136aa:	e326      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80136ac:	2300      	movs	r3, #0
 80136ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136b0:	e323      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80136b2:	4b78      	ldr	r3, [pc, #480]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80136ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80136be:	d107      	bne.n	80136d0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80136c0:	f107 030c 	add.w	r3, r7, #12
 80136c4:	4618      	mov	r0, r3
 80136c6:	f000 fc8f 	bl	8013fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80136ce:	e314      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80136d0:	2300      	movs	r3, #0
 80136d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136d4:	e311      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80136d6:	4b6f      	ldr	r3, [pc, #444]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80136d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80136da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80136de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80136e0:	4b6c      	ldr	r3, [pc, #432]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	f003 0304 	and.w	r3, r3, #4
 80136e8:	2b04      	cmp	r3, #4
 80136ea:	d10c      	bne.n	8013706 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80136ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d109      	bne.n	8013706 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80136f2:	4b68      	ldr	r3, [pc, #416]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	08db      	lsrs	r3, r3, #3
 80136f8:	f003 0303 	and.w	r3, r3, #3
 80136fc:	4a66      	ldr	r2, [pc, #408]	@ (8013898 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80136fe:	fa22 f303 	lsr.w	r3, r2, r3
 8013702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013704:	e01e      	b.n	8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013706:	4b63      	ldr	r3, [pc, #396]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801370e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013712:	d106      	bne.n	8013722 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8013714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013716:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801371a:	d102      	bne.n	8013722 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801371c:	4b5f      	ldr	r3, [pc, #380]	@ (801389c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801371e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013720:	e010      	b.n	8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013722:	4b5c      	ldr	r3, [pc, #368]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801372a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801372e:	d106      	bne.n	801373e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8013730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013736:	d102      	bne.n	801373e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013738:	4b59      	ldr	r3, [pc, #356]	@ (80138a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801373a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801373c:	e002      	b.n	8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801373e:	2300      	movs	r3, #0
 8013740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013742:	e2da      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013744:	e2d9      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013746:	4b57      	ldr	r3, [pc, #348]	@ (80138a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801374a:	e2d6      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801374c:	2300      	movs	r3, #0
 801374e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013750:	e2d3      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8013752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013756:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 801375a:	430b      	orrs	r3, r1
 801375c:	f040 80a7 	bne.w	80138ae <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8013760:	4b4c      	ldr	r3, [pc, #304]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013764:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8013768:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801376a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801376c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013770:	d055      	beq.n	801381e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8013772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013778:	f200 8096 	bhi.w	80138a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801377c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801377e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013782:	f000 8084 	beq.w	801388e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8013786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013788:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801378c:	f200 808c 	bhi.w	80138a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013796:	d030      	beq.n	80137fa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8013798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801379a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801379e:	f200 8083 	bhi.w	80138a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80137a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d004      	beq.n	80137b2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80137a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80137ae:	d012      	beq.n	80137d6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80137b0:	e07a      	b.n	80138a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80137b2:	4b38      	ldr	r3, [pc, #224]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80137ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80137be:	d107      	bne.n	80137d0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80137c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80137c4:	4618      	mov	r0, r3
 80137c6:	f000 fd63 	bl	8014290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80137ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80137ce:	e294      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80137d0:	2300      	movs	r3, #0
 80137d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137d4:	e291      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80137d6:	4b2f      	ldr	r3, [pc, #188]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80137de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80137e2:	d107      	bne.n	80137f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80137e4:	f107 0318 	add.w	r3, r7, #24
 80137e8:	4618      	mov	r0, r3
 80137ea:	f000 faa9 	bl	8013d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80137ee:	69bb      	ldr	r3, [r7, #24]
 80137f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80137f2:	e282      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80137f4:	2300      	movs	r3, #0
 80137f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137f8:	e27f      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80137fa:	4b26      	ldr	r3, [pc, #152]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013802:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013806:	d107      	bne.n	8013818 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013808:	f107 030c 	add.w	r3, r7, #12
 801380c:	4618      	mov	r0, r3
 801380e:	f000 fbeb 	bl	8013fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013816:	e270      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013818:	2300      	movs	r3, #0
 801381a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801381c:	e26d      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801381e:	4b1d      	ldr	r3, [pc, #116]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013822:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013826:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013828:	4b1a      	ldr	r3, [pc, #104]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	f003 0304 	and.w	r3, r3, #4
 8013830:	2b04      	cmp	r3, #4
 8013832:	d10c      	bne.n	801384e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8013834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013836:	2b00      	cmp	r3, #0
 8013838:	d109      	bne.n	801384e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801383a:	4b16      	ldr	r3, [pc, #88]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	08db      	lsrs	r3, r3, #3
 8013840:	f003 0303 	and.w	r3, r3, #3
 8013844:	4a14      	ldr	r2, [pc, #80]	@ (8013898 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8013846:	fa22 f303 	lsr.w	r3, r2, r3
 801384a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801384c:	e01e      	b.n	801388c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801384e:	4b11      	ldr	r3, [pc, #68]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801385a:	d106      	bne.n	801386a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 801385c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801385e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013862:	d102      	bne.n	801386a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013864:	4b0d      	ldr	r3, [pc, #52]	@ (801389c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8013866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013868:	e010      	b.n	801388c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801386a:	4b0a      	ldr	r3, [pc, #40]	@ (8013894 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013872:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013876:	d106      	bne.n	8013886 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8013878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801387a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801387e:	d102      	bne.n	8013886 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013880:	4b07      	ldr	r3, [pc, #28]	@ (80138a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013884:	e002      	b.n	801388c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013886:	2300      	movs	r3, #0
 8013888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801388a:	e236      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801388c:	e235      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801388e:	4b05      	ldr	r3, [pc, #20]	@ (80138a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013892:	e232      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013894:	58024400 	.word	0x58024400
 8013898:	03d09000 	.word	0x03d09000
 801389c:	003d0900 	.word	0x003d0900
 80138a0:	016e3600 	.word	0x016e3600
 80138a4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80138a8:	2300      	movs	r3, #0
 80138aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80138ac:	e225      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80138ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80138b2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80138b6:	430b      	orrs	r3, r1
 80138b8:	f040 8085 	bne.w	80139c6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80138bc:	4b9c      	ldr	r3, [pc, #624]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80138be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80138c0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80138c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80138c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80138cc:	d06b      	beq.n	80139a6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80138ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80138d4:	d874      	bhi.n	80139c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80138d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80138dc:	d056      	beq.n	801398c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80138de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80138e4:	d86c      	bhi.n	80139c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80138e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80138ec:	d03b      	beq.n	8013966 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80138ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80138f4:	d864      	bhi.n	80139c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80138f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80138fc:	d021      	beq.n	8013942 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80138fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013900:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013904:	d85c      	bhi.n	80139c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8013906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013908:	2b00      	cmp	r3, #0
 801390a:	d004      	beq.n	8013916 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 801390c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801390e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013912:	d004      	beq.n	801391e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8013914:	e054      	b.n	80139c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8013916:	f7fe fb5f 	bl	8011fd8 <HAL_RCC_GetPCLK1Freq>
 801391a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801391c:	e1ed      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801391e:	4b84      	ldr	r3, [pc, #528]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013926:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801392a:	d107      	bne.n	801393c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801392c:	f107 0318 	add.w	r3, r7, #24
 8013930:	4618      	mov	r0, r3
 8013932:	f000 fa05 	bl	8013d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013936:	69fb      	ldr	r3, [r7, #28]
 8013938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801393a:	e1de      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801393c:	2300      	movs	r3, #0
 801393e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013940:	e1db      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013942:	4b7b      	ldr	r3, [pc, #492]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801394a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801394e:	d107      	bne.n	8013960 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013950:	f107 030c 	add.w	r3, r7, #12
 8013954:	4618      	mov	r0, r3
 8013956:	f000 fb47 	bl	8013fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801395e:	e1cc      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013960:	2300      	movs	r3, #0
 8013962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013964:	e1c9      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013966:	4b72      	ldr	r3, [pc, #456]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	f003 0304 	and.w	r3, r3, #4
 801396e:	2b04      	cmp	r3, #4
 8013970:	d109      	bne.n	8013986 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013972:	4b6f      	ldr	r3, [pc, #444]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	08db      	lsrs	r3, r3, #3
 8013978:	f003 0303 	and.w	r3, r3, #3
 801397c:	4a6d      	ldr	r2, [pc, #436]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801397e:	fa22 f303 	lsr.w	r3, r2, r3
 8013982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013984:	e1b9      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013986:	2300      	movs	r3, #0
 8013988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801398a:	e1b6      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801398c:	4b68      	ldr	r3, [pc, #416]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013998:	d102      	bne.n	80139a0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 801399a:	4b67      	ldr	r3, [pc, #412]	@ (8013b38 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801399c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801399e:	e1ac      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139a0:	2300      	movs	r3, #0
 80139a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139a4:	e1a9      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80139a6:	4b62      	ldr	r3, [pc, #392]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80139ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80139b2:	d102      	bne.n	80139ba <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80139b4:	4b61      	ldr	r3, [pc, #388]	@ (8013b3c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80139b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139b8:	e19f      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139ba:	2300      	movs	r3, #0
 80139bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139be:	e19c      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80139c0:	2300      	movs	r3, #0
 80139c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139c4:	e199      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80139c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80139ca:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80139ce:	430b      	orrs	r3, r1
 80139d0:	d173      	bne.n	8013aba <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80139d2:	4b57      	ldr	r3, [pc, #348]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80139d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80139da:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80139dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80139e2:	d02f      	beq.n	8013a44 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80139e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80139ea:	d863      	bhi.n	8013ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80139ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d004      	beq.n	80139fc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80139f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80139f8:	d012      	beq.n	8013a20 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80139fa:	e05b      	b.n	8013ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80139fc:	4b4c      	ldr	r3, [pc, #304]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013a04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013a08:	d107      	bne.n	8013a1a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013a0a:	f107 0318 	add.w	r3, r7, #24
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f000 f996 	bl	8013d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013a14:	69bb      	ldr	r3, [r7, #24]
 8013a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a18:	e16f      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a1e:	e16c      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013a20:	4b43      	ldr	r3, [pc, #268]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013a28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013a2c:	d107      	bne.n	8013a3e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013a2e:	f107 030c 	add.w	r3, r7, #12
 8013a32:	4618      	mov	r0, r3
 8013a34:	f000 fad8 	bl	8013fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8013a38:	697b      	ldr	r3, [r7, #20]
 8013a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a3c:	e15d      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a42:	e15a      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013a44:	4b3a      	ldr	r3, [pc, #232]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013a48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013a4c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013a4e:	4b38      	ldr	r3, [pc, #224]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	f003 0304 	and.w	r3, r3, #4
 8013a56:	2b04      	cmp	r3, #4
 8013a58:	d10c      	bne.n	8013a74 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8013a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d109      	bne.n	8013a74 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013a60:	4b33      	ldr	r3, [pc, #204]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	08db      	lsrs	r3, r3, #3
 8013a66:	f003 0303 	and.w	r3, r3, #3
 8013a6a:	4a32      	ldr	r2, [pc, #200]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8013a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8013a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a72:	e01e      	b.n	8013ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013a74:	4b2e      	ldr	r3, [pc, #184]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013a80:	d106      	bne.n	8013a90 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8013a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013a88:	d102      	bne.n	8013a90 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8013b38 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a8e:	e010      	b.n	8013ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013a90:	4b27      	ldr	r3, [pc, #156]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013a98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a9c:	d106      	bne.n	8013aac <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8013a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013aa4:	d102      	bne.n	8013aac <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013aa6:	4b25      	ldr	r3, [pc, #148]	@ (8013b3c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013aaa:	e002      	b.n	8013ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013aac:	2300      	movs	r3, #0
 8013aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013ab0:	e123      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013ab2:	e122      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ab8:	e11f      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8013aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013abe:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8013ac2:	430b      	orrs	r3, r1
 8013ac4:	d13c      	bne.n	8013b40 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8013ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013aca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013ace:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d004      	beq.n	8013ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8013ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013adc:	d012      	beq.n	8013b04 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8013ade:	e023      	b.n	8013b28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013ae0:	4b13      	ldr	r3, [pc, #76]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013ae8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013aec:	d107      	bne.n	8013afe <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013af2:	4618      	mov	r0, r3
 8013af4:	f000 fbcc 	bl	8014290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013afc:	e0fd      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013afe:	2300      	movs	r3, #0
 8013b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b02:	e0fa      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013b04:	4b0a      	ldr	r3, [pc, #40]	@ (8013b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013b0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013b10:	d107      	bne.n	8013b22 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013b12:	f107 0318 	add.w	r3, r7, #24
 8013b16:	4618      	mov	r0, r3
 8013b18:	f000 f912 	bl	8013d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8013b1c:	6a3b      	ldr	r3, [r7, #32]
 8013b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013b20:	e0eb      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013b22:	2300      	movs	r3, #0
 8013b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b26:	e0e8      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013b28:	2300      	movs	r3, #0
 8013b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b2c:	e0e5      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013b2e:	bf00      	nop
 8013b30:	58024400 	.word	0x58024400
 8013b34:	03d09000 	.word	0x03d09000
 8013b38:	003d0900 	.word	0x003d0900
 8013b3c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8013b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b44:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8013b48:	430b      	orrs	r3, r1
 8013b4a:	f040 8085 	bne.w	8013c58 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8013b4e:	4b6d      	ldr	r3, [pc, #436]	@ (8013d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013b52:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8013b56:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013b5e:	d06b      	beq.n	8013c38 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8013b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013b66:	d874      	bhi.n	8013c52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b6e:	d056      	beq.n	8013c1e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8013b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b76:	d86c      	bhi.n	8013c52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013b7e:	d03b      	beq.n	8013bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8013b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013b86:	d864      	bhi.n	8013c52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013b8e:	d021      	beq.n	8013bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8013b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013b96:	d85c      	bhi.n	8013c52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d004      	beq.n	8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8013b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ba0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013ba4:	d004      	beq.n	8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8013ba6:	e054      	b.n	8013c52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8013ba8:	f000 f8b4 	bl	8013d14 <HAL_RCCEx_GetD3PCLK1Freq>
 8013bac:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013bae:	e0a4      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013bb0:	4b54      	ldr	r3, [pc, #336]	@ (8013d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013bb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013bbc:	d107      	bne.n	8013bce <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013bbe:	f107 0318 	add.w	r3, r7, #24
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f000 f8bc 	bl	8013d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013bc8:	69fb      	ldr	r3, [r7, #28]
 8013bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013bcc:	e095      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013bce:	2300      	movs	r3, #0
 8013bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013bd2:	e092      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8013d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013be0:	d107      	bne.n	8013bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013be2:	f107 030c 	add.w	r3, r7, #12
 8013be6:	4618      	mov	r0, r3
 8013be8:	f000 f9fe 	bl	8013fe8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013bec:	693b      	ldr	r3, [r7, #16]
 8013bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013bf0:	e083      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013bf6:	e080      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013bf8:	4b42      	ldr	r3, [pc, #264]	@ (8013d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	f003 0304 	and.w	r3, r3, #4
 8013c00:	2b04      	cmp	r3, #4
 8013c02:	d109      	bne.n	8013c18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013c04:	4b3f      	ldr	r3, [pc, #252]	@ (8013d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	08db      	lsrs	r3, r3, #3
 8013c0a:	f003 0303 	and.w	r3, r3, #3
 8013c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8013d08 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8013c10:	fa22 f303 	lsr.w	r3, r2, r3
 8013c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c16:	e070      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c1c:	e06d      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013c1e:	4b39      	ldr	r3, [pc, #228]	@ (8013d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013c2a:	d102      	bne.n	8013c32 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8013c2c:	4b37      	ldr	r3, [pc, #220]	@ (8013d0c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8013c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c30:	e063      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c32:	2300      	movs	r3, #0
 8013c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c36:	e060      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013c38:	4b32      	ldr	r3, [pc, #200]	@ (8013d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013c40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013c44:	d102      	bne.n	8013c4c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8013c46:	4b32      	ldr	r3, [pc, #200]	@ (8013d10 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c4a:	e056      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c50:	e053      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8013c52:	2300      	movs	r3, #0
 8013c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c56:	e050      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8013c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c5c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8013c60:	430b      	orrs	r3, r1
 8013c62:	d148      	bne.n	8013cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8013c64:	4b27      	ldr	r3, [pc, #156]	@ (8013d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013c68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013c6c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c74:	d02a      	beq.n	8013ccc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8013c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c7c:	d838      	bhi.n	8013cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8013c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d004      	beq.n	8013c8e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8013c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013c8a:	d00d      	beq.n	8013ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8013c8c:	e030      	b.n	8013cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8013d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013c96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013c9a:	d102      	bne.n	8013ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8013c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8013d10 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013ca0:	e02b      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ca6:	e028      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013ca8:	4b16      	ldr	r3, [pc, #88]	@ (8013d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013cb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013cb4:	d107      	bne.n	8013cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013cba:	4618      	mov	r0, r3
 8013cbc:	f000 fae8 	bl	8014290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013cc4:	e019      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cca:	e016      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8013d04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013cd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013cd8:	d107      	bne.n	8013cea <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013cda:	f107 0318 	add.w	r3, r7, #24
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f000 f82e 	bl	8013d40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013ce4:	69fb      	ldr	r3, [r7, #28]
 8013ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013ce8:	e007      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013cea:	2300      	movs	r3, #0
 8013cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cee:	e004      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cf4:	e001      	b.n	8013cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8013cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3740      	adds	r7, #64	@ 0x40
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}
 8013d04:	58024400 	.word	0x58024400
 8013d08:	03d09000 	.word	0x03d09000
 8013d0c:	003d0900 	.word	0x003d0900
 8013d10:	016e3600 	.word	0x016e3600

08013d14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013d18:	f7fe f92e 	bl	8011f78 <HAL_RCC_GetHCLKFreq>
 8013d1c:	4602      	mov	r2, r0
 8013d1e:	4b06      	ldr	r3, [pc, #24]	@ (8013d38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013d20:	6a1b      	ldr	r3, [r3, #32]
 8013d22:	091b      	lsrs	r3, r3, #4
 8013d24:	f003 0307 	and.w	r3, r3, #7
 8013d28:	4904      	ldr	r1, [pc, #16]	@ (8013d3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013d2a:	5ccb      	ldrb	r3, [r1, r3]
 8013d2c:	f003 031f 	and.w	r3, r3, #31
 8013d30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013d34:	4618      	mov	r0, r3
 8013d36:	bd80      	pop	{r7, pc}
 8013d38:	58024400 	.word	0x58024400
 8013d3c:	0801e9e4 	.word	0x0801e9e4

08013d40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8013d40:	b480      	push	{r7}
 8013d42:	b089      	sub	sp, #36	@ 0x24
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013d48:	4ba1      	ldr	r3, [pc, #644]	@ (8013fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d4c:	f003 0303 	and.w	r3, r3, #3
 8013d50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8013d52:	4b9f      	ldr	r3, [pc, #636]	@ (8013fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d56:	0b1b      	lsrs	r3, r3, #12
 8013d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013d5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013d5e:	4b9c      	ldr	r3, [pc, #624]	@ (8013fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d62:	091b      	lsrs	r3, r3, #4
 8013d64:	f003 0301 	and.w	r3, r3, #1
 8013d68:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8013d6a:	4b99      	ldr	r3, [pc, #612]	@ (8013fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013d6e:	08db      	lsrs	r3, r3, #3
 8013d70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d74:	693a      	ldr	r2, [r7, #16]
 8013d76:	fb02 f303 	mul.w	r3, r2, r3
 8013d7a:	ee07 3a90 	vmov	s15, r3
 8013d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	f000 8111 	beq.w	8013fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8013d8e:	69bb      	ldr	r3, [r7, #24]
 8013d90:	2b02      	cmp	r3, #2
 8013d92:	f000 8083 	beq.w	8013e9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013d96:	69bb      	ldr	r3, [r7, #24]
 8013d98:	2b02      	cmp	r3, #2
 8013d9a:	f200 80a1 	bhi.w	8013ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013d9e:	69bb      	ldr	r3, [r7, #24]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d003      	beq.n	8013dac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013da4:	69bb      	ldr	r3, [r7, #24]
 8013da6:	2b01      	cmp	r3, #1
 8013da8:	d056      	beq.n	8013e58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013daa:	e099      	b.n	8013ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013dac:	4b88      	ldr	r3, [pc, #544]	@ (8013fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	f003 0320 	and.w	r3, r3, #32
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d02d      	beq.n	8013e14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013db8:	4b85      	ldr	r3, [pc, #532]	@ (8013fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	08db      	lsrs	r3, r3, #3
 8013dbe:	f003 0303 	and.w	r3, r3, #3
 8013dc2:	4a84      	ldr	r2, [pc, #528]	@ (8013fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8013dc8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	ee07 3a90 	vmov	s15, r3
 8013dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013dd4:	697b      	ldr	r3, [r7, #20]
 8013dd6:	ee07 3a90 	vmov	s15, r3
 8013dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013de2:	4b7b      	ldr	r3, [pc, #492]	@ (8013fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013dea:	ee07 3a90 	vmov	s15, r3
 8013dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8013df6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013e12:	e087      	b.n	8013f24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	ee07 3a90 	vmov	s15, r3
 8013e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013fdc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e26:	4b6a      	ldr	r3, [pc, #424]	@ (8013fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e2e:	ee07 3a90 	vmov	s15, r3
 8013e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013e56:	e065      	b.n	8013f24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013e58:	697b      	ldr	r3, [r7, #20]
 8013e5a:	ee07 3a90 	vmov	s15, r3
 8013e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e6a:	4b59      	ldr	r3, [pc, #356]	@ (8013fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e72:	ee07 3a90 	vmov	s15, r3
 8013e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013e9a:	e043      	b.n	8013f24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	ee07 3a90 	vmov	s15, r3
 8013ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ea6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013eae:	4b48      	ldr	r3, [pc, #288]	@ (8013fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013eb6:	ee07 3a90 	vmov	s15, r3
 8013eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8013ec2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013ede:	e021      	b.n	8013f24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013ee0:	697b      	ldr	r3, [r7, #20]
 8013ee2:	ee07 3a90 	vmov	s15, r3
 8013ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013eea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ef2:	4b37      	ldr	r3, [pc, #220]	@ (8013fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013efa:	ee07 3a90 	vmov	s15, r3
 8013efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013f22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8013f24:	4b2a      	ldr	r3, [pc, #168]	@ (8013fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f28:	0a5b      	lsrs	r3, r3, #9
 8013f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f2e:	ee07 3a90 	vmov	s15, r3
 8013f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013f3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f4a:	ee17 2a90 	vmov	r2, s15
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8013f52:	4b1f      	ldr	r3, [pc, #124]	@ (8013fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f56:	0c1b      	lsrs	r3, r3, #16
 8013f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f5c:	ee07 3a90 	vmov	s15, r3
 8013f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013f68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f78:	ee17 2a90 	vmov	r2, s15
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8013f80:	4b13      	ldr	r3, [pc, #76]	@ (8013fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f84:	0e1b      	lsrs	r3, r3, #24
 8013f86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f8a:	ee07 3a90 	vmov	s15, r3
 8013f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013f96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013fa6:	ee17 2a90 	vmov	r2, s15
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8013fae:	e008      	b.n	8013fc2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	2200      	movs	r2, #0
 8013fba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	609a      	str	r2, [r3, #8]
}
 8013fc2:	bf00      	nop
 8013fc4:	3724      	adds	r7, #36	@ 0x24
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fcc:	4770      	bx	lr
 8013fce:	bf00      	nop
 8013fd0:	58024400 	.word	0x58024400
 8013fd4:	03d09000 	.word	0x03d09000
 8013fd8:	46000000 	.word	0x46000000
 8013fdc:	4c742400 	.word	0x4c742400
 8013fe0:	4a742400 	.word	0x4a742400
 8013fe4:	4bb71b00 	.word	0x4bb71b00

08013fe8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8013fe8:	b480      	push	{r7}
 8013fea:	b089      	sub	sp, #36	@ 0x24
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013ff0:	4ba1      	ldr	r3, [pc, #644]	@ (8014278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ff4:	f003 0303 	and.w	r3, r3, #3
 8013ff8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8013ffa:	4b9f      	ldr	r3, [pc, #636]	@ (8014278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ffe:	0d1b      	lsrs	r3, r3, #20
 8014000:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014004:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8014006:	4b9c      	ldr	r3, [pc, #624]	@ (8014278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801400a:	0a1b      	lsrs	r3, r3, #8
 801400c:	f003 0301 	and.w	r3, r3, #1
 8014010:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8014012:	4b99      	ldr	r3, [pc, #612]	@ (8014278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014016:	08db      	lsrs	r3, r3, #3
 8014018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801401c:	693a      	ldr	r2, [r7, #16]
 801401e:	fb02 f303 	mul.w	r3, r2, r3
 8014022:	ee07 3a90 	vmov	s15, r3
 8014026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801402a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	2b00      	cmp	r3, #0
 8014032:	f000 8111 	beq.w	8014258 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8014036:	69bb      	ldr	r3, [r7, #24]
 8014038:	2b02      	cmp	r3, #2
 801403a:	f000 8083 	beq.w	8014144 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801403e:	69bb      	ldr	r3, [r7, #24]
 8014040:	2b02      	cmp	r3, #2
 8014042:	f200 80a1 	bhi.w	8014188 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8014046:	69bb      	ldr	r3, [r7, #24]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d003      	beq.n	8014054 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801404c:	69bb      	ldr	r3, [r7, #24]
 801404e:	2b01      	cmp	r3, #1
 8014050:	d056      	beq.n	8014100 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8014052:	e099      	b.n	8014188 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014054:	4b88      	ldr	r3, [pc, #544]	@ (8014278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	f003 0320 	and.w	r3, r3, #32
 801405c:	2b00      	cmp	r3, #0
 801405e:	d02d      	beq.n	80140bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8014060:	4b85      	ldr	r3, [pc, #532]	@ (8014278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	08db      	lsrs	r3, r3, #3
 8014066:	f003 0303 	and.w	r3, r3, #3
 801406a:	4a84      	ldr	r2, [pc, #528]	@ (801427c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801406c:	fa22 f303 	lsr.w	r3, r2, r3
 8014070:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014072:	68bb      	ldr	r3, [r7, #8]
 8014074:	ee07 3a90 	vmov	s15, r3
 8014078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801407c:	697b      	ldr	r3, [r7, #20]
 801407e:	ee07 3a90 	vmov	s15, r3
 8014082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801408a:	4b7b      	ldr	r3, [pc, #492]	@ (8014278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801408e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014092:	ee07 3a90 	vmov	s15, r3
 8014096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801409a:	ed97 6a03 	vldr	s12, [r7, #12]
 801409e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8014280 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80140a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80140a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80140aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80140ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80140b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80140ba:	e087      	b.n	80141cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80140bc:	697b      	ldr	r3, [r7, #20]
 80140be:	ee07 3a90 	vmov	s15, r3
 80140c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8014284 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80140ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80140ce:	4b6a      	ldr	r3, [pc, #424]	@ (8014278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80140d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140d6:	ee07 3a90 	vmov	s15, r3
 80140da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140de:	ed97 6a03 	vldr	s12, [r7, #12]
 80140e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8014280 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80140e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80140ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80140ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80140f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80140f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80140fe:	e065      	b.n	80141cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014100:	697b      	ldr	r3, [r7, #20]
 8014102:	ee07 3a90 	vmov	s15, r3
 8014106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801410a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8014288 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801410e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014112:	4b59      	ldr	r3, [pc, #356]	@ (8014278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801411a:	ee07 3a90 	vmov	s15, r3
 801411e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014122:	ed97 6a03 	vldr	s12, [r7, #12]
 8014126:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8014280 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801412a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801412e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801413a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801413e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014142:	e043      	b.n	80141cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014144:	697b      	ldr	r3, [r7, #20]
 8014146:	ee07 3a90 	vmov	s15, r3
 801414a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801414e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801428c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8014152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014156:	4b48      	ldr	r3, [pc, #288]	@ (8014278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801415a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801415e:	ee07 3a90 	vmov	s15, r3
 8014162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014166:	ed97 6a03 	vldr	s12, [r7, #12]
 801416a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8014280 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801416e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801417a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801417e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014186:	e021      	b.n	80141cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014188:	697b      	ldr	r3, [r7, #20]
 801418a:	ee07 3a90 	vmov	s15, r3
 801418e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014192:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8014288 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8014196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801419a:	4b37      	ldr	r3, [pc, #220]	@ (8014278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801419e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141a2:	ee07 3a90 	vmov	s15, r3
 80141a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80141aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80141ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8014280 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80141b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80141b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80141ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80141be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80141ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80141cc:	4b2a      	ldr	r3, [pc, #168]	@ (8014278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80141ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141d0:	0a5b      	lsrs	r3, r3, #9
 80141d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80141d6:	ee07 3a90 	vmov	s15, r3
 80141da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80141e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80141e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80141ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80141ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80141f2:	ee17 2a90 	vmov	r2, s15
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80141fa:	4b1f      	ldr	r3, [pc, #124]	@ (8014278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80141fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141fe:	0c1b      	lsrs	r3, r3, #16
 8014200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014204:	ee07 3a90 	vmov	s15, r3
 8014208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801420c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014210:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014214:	edd7 6a07 	vldr	s13, [r7, #28]
 8014218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801421c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014220:	ee17 2a90 	vmov	r2, s15
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8014228:	4b13      	ldr	r3, [pc, #76]	@ (8014278 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801422a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801422c:	0e1b      	lsrs	r3, r3, #24
 801422e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014232:	ee07 3a90 	vmov	s15, r3
 8014236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801423a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801423e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014242:	edd7 6a07 	vldr	s13, [r7, #28]
 8014246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801424a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801424e:	ee17 2a90 	vmov	r2, s15
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8014256:	e008      	b.n	801426a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	2200      	movs	r2, #0
 801425c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	2200      	movs	r2, #0
 8014262:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2200      	movs	r2, #0
 8014268:	609a      	str	r2, [r3, #8]
}
 801426a:	bf00      	nop
 801426c:	3724      	adds	r7, #36	@ 0x24
 801426e:	46bd      	mov	sp, r7
 8014270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014274:	4770      	bx	lr
 8014276:	bf00      	nop
 8014278:	58024400 	.word	0x58024400
 801427c:	03d09000 	.word	0x03d09000
 8014280:	46000000 	.word	0x46000000
 8014284:	4c742400 	.word	0x4c742400
 8014288:	4a742400 	.word	0x4a742400
 801428c:	4bb71b00 	.word	0x4bb71b00

08014290 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8014290:	b480      	push	{r7}
 8014292:	b089      	sub	sp, #36	@ 0x24
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014298:	4ba0      	ldr	r3, [pc, #640]	@ (801451c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801429a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801429c:	f003 0303 	and.w	r3, r3, #3
 80142a0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80142a2:	4b9e      	ldr	r3, [pc, #632]	@ (801451c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80142a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142a6:	091b      	lsrs	r3, r3, #4
 80142a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80142ac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80142ae:	4b9b      	ldr	r3, [pc, #620]	@ (801451c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80142b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142b2:	f003 0301 	and.w	r3, r3, #1
 80142b6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80142b8:	4b98      	ldr	r3, [pc, #608]	@ (801451c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80142ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80142bc:	08db      	lsrs	r3, r3, #3
 80142be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80142c2:	693a      	ldr	r2, [r7, #16]
 80142c4:	fb02 f303 	mul.w	r3, r2, r3
 80142c8:	ee07 3a90 	vmov	s15, r3
 80142cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80142d0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	f000 8111 	beq.w	80144fe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80142dc:	69bb      	ldr	r3, [r7, #24]
 80142de:	2b02      	cmp	r3, #2
 80142e0:	f000 8083 	beq.w	80143ea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80142e4:	69bb      	ldr	r3, [r7, #24]
 80142e6:	2b02      	cmp	r3, #2
 80142e8:	f200 80a1 	bhi.w	801442e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80142ec:	69bb      	ldr	r3, [r7, #24]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d003      	beq.n	80142fa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80142f2:	69bb      	ldr	r3, [r7, #24]
 80142f4:	2b01      	cmp	r3, #1
 80142f6:	d056      	beq.n	80143a6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80142f8:	e099      	b.n	801442e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80142fa:	4b88      	ldr	r3, [pc, #544]	@ (801451c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	f003 0320 	and.w	r3, r3, #32
 8014302:	2b00      	cmp	r3, #0
 8014304:	d02d      	beq.n	8014362 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8014306:	4b85      	ldr	r3, [pc, #532]	@ (801451c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	08db      	lsrs	r3, r3, #3
 801430c:	f003 0303 	and.w	r3, r3, #3
 8014310:	4a83      	ldr	r2, [pc, #524]	@ (8014520 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8014312:	fa22 f303 	lsr.w	r3, r2, r3
 8014316:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014318:	68bb      	ldr	r3, [r7, #8]
 801431a:	ee07 3a90 	vmov	s15, r3
 801431e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	ee07 3a90 	vmov	s15, r3
 8014328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801432c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014330:	4b7a      	ldr	r3, [pc, #488]	@ (801451c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014338:	ee07 3a90 	vmov	s15, r3
 801433c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014340:	ed97 6a03 	vldr	s12, [r7, #12]
 8014344:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8014524 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014348:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801434c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014350:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014354:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014358:	ee67 7a27 	vmul.f32	s15, s14, s15
 801435c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8014360:	e087      	b.n	8014472 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014362:	697b      	ldr	r3, [r7, #20]
 8014364:	ee07 3a90 	vmov	s15, r3
 8014368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801436c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8014528 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8014370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014374:	4b69      	ldr	r3, [pc, #420]	@ (801451c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801437c:	ee07 3a90 	vmov	s15, r3
 8014380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014384:	ed97 6a03 	vldr	s12, [r7, #12]
 8014388:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8014524 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801438c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014390:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014394:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014398:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801439c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80143a4:	e065      	b.n	8014472 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80143a6:	697b      	ldr	r3, [r7, #20]
 80143a8:	ee07 3a90 	vmov	s15, r3
 80143ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80143b0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 801452c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80143b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80143b8:	4b58      	ldr	r3, [pc, #352]	@ (801451c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80143ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143c0:	ee07 3a90 	vmov	s15, r3
 80143c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80143c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80143cc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8014524 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80143d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80143d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80143d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80143dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80143e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80143e8:	e043      	b.n	8014472 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80143ea:	697b      	ldr	r3, [r7, #20]
 80143ec:	ee07 3a90 	vmov	s15, r3
 80143f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80143f4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8014530 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80143f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80143fc:	4b47      	ldr	r3, [pc, #284]	@ (801451c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80143fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014404:	ee07 3a90 	vmov	s15, r3
 8014408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801440c:	ed97 6a03 	vldr	s12, [r7, #12]
 8014410:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8014524 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014414:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014418:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801441c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014420:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014428:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801442c:	e021      	b.n	8014472 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801442e:	697b      	ldr	r3, [r7, #20]
 8014430:	ee07 3a90 	vmov	s15, r3
 8014434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014438:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8014528 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801443c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014440:	4b36      	ldr	r3, [pc, #216]	@ (801451c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014448:	ee07 3a90 	vmov	s15, r3
 801444c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014450:	ed97 6a03 	vldr	s12, [r7, #12]
 8014454:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8014524 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014458:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801445c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014460:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014468:	ee67 7a27 	vmul.f32	s15, s14, s15
 801446c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014470:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8014472:	4b2a      	ldr	r3, [pc, #168]	@ (801451c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014476:	0a5b      	lsrs	r3, r3, #9
 8014478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801447c:	ee07 3a90 	vmov	s15, r3
 8014480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014484:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014488:	ee37 7a87 	vadd.f32	s14, s15, s14
 801448c:	edd7 6a07 	vldr	s13, [r7, #28]
 8014490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014498:	ee17 2a90 	vmov	r2, s15
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80144a0:	4b1e      	ldr	r3, [pc, #120]	@ (801451c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80144a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144a4:	0c1b      	lsrs	r3, r3, #16
 80144a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80144aa:	ee07 3a90 	vmov	s15, r3
 80144ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80144b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80144b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80144ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80144be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80144c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80144c6:	ee17 2a90 	vmov	r2, s15
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80144ce:	4b13      	ldr	r3, [pc, #76]	@ (801451c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80144d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144d2:	0e1b      	lsrs	r3, r3, #24
 80144d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80144d8:	ee07 3a90 	vmov	s15, r3
 80144dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80144e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80144e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80144e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80144ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80144f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80144f4:	ee17 2a90 	vmov	r2, s15
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80144fc:	e008      	b.n	8014510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	2200      	movs	r2, #0
 8014502:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	2200      	movs	r2, #0
 8014508:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2200      	movs	r2, #0
 801450e:	609a      	str	r2, [r3, #8]
}
 8014510:	bf00      	nop
 8014512:	3724      	adds	r7, #36	@ 0x24
 8014514:	46bd      	mov	sp, r7
 8014516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451a:	4770      	bx	lr
 801451c:	58024400 	.word	0x58024400
 8014520:	03d09000 	.word	0x03d09000
 8014524:	46000000 	.word	0x46000000
 8014528:	4c742400 	.word	0x4c742400
 801452c:	4a742400 	.word	0x4a742400
 8014530:	4bb71b00 	.word	0x4bb71b00

08014534 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b084      	sub	sp, #16
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
 801453c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801453e:	2300      	movs	r3, #0
 8014540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8014542:	4b53      	ldr	r3, [pc, #332]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 8014544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014546:	f003 0303 	and.w	r3, r3, #3
 801454a:	2b03      	cmp	r3, #3
 801454c:	d101      	bne.n	8014552 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801454e:	2301      	movs	r3, #1
 8014550:	e099      	b.n	8014686 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8014552:	4b4f      	ldr	r3, [pc, #316]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	4a4e      	ldr	r2, [pc, #312]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 8014558:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801455c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801455e:	f7f4 ffcd 	bl	80094fc <HAL_GetTick>
 8014562:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014564:	e008      	b.n	8014578 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8014566:	f7f4 ffc9 	bl	80094fc <HAL_GetTick>
 801456a:	4602      	mov	r2, r0
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	1ad3      	subs	r3, r2, r3
 8014570:	2b02      	cmp	r3, #2
 8014572:	d901      	bls.n	8014578 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014574:	2303      	movs	r3, #3
 8014576:	e086      	b.n	8014686 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014578:	4b45      	ldr	r3, [pc, #276]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014580:	2b00      	cmp	r3, #0
 8014582:	d1f0      	bne.n	8014566 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8014584:	4b42      	ldr	r3, [pc, #264]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 8014586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014588:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	031b      	lsls	r3, r3, #12
 8014592:	493f      	ldr	r1, [pc, #252]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 8014594:	4313      	orrs	r3, r2
 8014596:	628b      	str	r3, [r1, #40]	@ 0x28
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	685b      	ldr	r3, [r3, #4]
 801459c:	3b01      	subs	r3, #1
 801459e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	689b      	ldr	r3, [r3, #8]
 80145a6:	3b01      	subs	r3, #1
 80145a8:	025b      	lsls	r3, r3, #9
 80145aa:	b29b      	uxth	r3, r3
 80145ac:	431a      	orrs	r2, r3
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	68db      	ldr	r3, [r3, #12]
 80145b2:	3b01      	subs	r3, #1
 80145b4:	041b      	lsls	r3, r3, #16
 80145b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80145ba:	431a      	orrs	r2, r3
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	691b      	ldr	r3, [r3, #16]
 80145c0:	3b01      	subs	r3, #1
 80145c2:	061b      	lsls	r3, r3, #24
 80145c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80145c8:	4931      	ldr	r1, [pc, #196]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 80145ca:	4313      	orrs	r3, r2
 80145cc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80145ce:	4b30      	ldr	r3, [pc, #192]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 80145d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	695b      	ldr	r3, [r3, #20]
 80145da:	492d      	ldr	r1, [pc, #180]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 80145dc:	4313      	orrs	r3, r2
 80145de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80145e0:	4b2b      	ldr	r3, [pc, #172]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 80145e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145e4:	f023 0220 	bic.w	r2, r3, #32
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	699b      	ldr	r3, [r3, #24]
 80145ec:	4928      	ldr	r1, [pc, #160]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 80145ee:	4313      	orrs	r3, r2
 80145f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80145f2:	4b27      	ldr	r3, [pc, #156]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 80145f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145f6:	4a26      	ldr	r2, [pc, #152]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 80145f8:	f023 0310 	bic.w	r3, r3, #16
 80145fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80145fe:	4b24      	ldr	r3, [pc, #144]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 8014600:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014602:	4b24      	ldr	r3, [pc, #144]	@ (8014694 <RCCEx_PLL2_Config+0x160>)
 8014604:	4013      	ands	r3, r2
 8014606:	687a      	ldr	r2, [r7, #4]
 8014608:	69d2      	ldr	r2, [r2, #28]
 801460a:	00d2      	lsls	r2, r2, #3
 801460c:	4920      	ldr	r1, [pc, #128]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 801460e:	4313      	orrs	r3, r2
 8014610:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8014612:	4b1f      	ldr	r3, [pc, #124]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 8014614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014616:	4a1e      	ldr	r2, [pc, #120]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 8014618:	f043 0310 	orr.w	r3, r3, #16
 801461c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d106      	bne.n	8014632 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8014624:	4b1a      	ldr	r3, [pc, #104]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 8014626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014628:	4a19      	ldr	r2, [pc, #100]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 801462a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801462e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014630:	e00f      	b.n	8014652 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	2b01      	cmp	r3, #1
 8014636:	d106      	bne.n	8014646 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8014638:	4b15      	ldr	r3, [pc, #84]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 801463a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801463c:	4a14      	ldr	r2, [pc, #80]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 801463e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014642:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014644:	e005      	b.n	8014652 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8014646:	4b12      	ldr	r3, [pc, #72]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 8014648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801464a:	4a11      	ldr	r2, [pc, #68]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 801464c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8014650:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8014652:	4b0f      	ldr	r3, [pc, #60]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	4a0e      	ldr	r2, [pc, #56]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 8014658:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801465c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801465e:	f7f4 ff4d 	bl	80094fc <HAL_GetTick>
 8014662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014664:	e008      	b.n	8014678 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8014666:	f7f4 ff49 	bl	80094fc <HAL_GetTick>
 801466a:	4602      	mov	r2, r0
 801466c:	68bb      	ldr	r3, [r7, #8]
 801466e:	1ad3      	subs	r3, r2, r3
 8014670:	2b02      	cmp	r3, #2
 8014672:	d901      	bls.n	8014678 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014674:	2303      	movs	r3, #3
 8014676:	e006      	b.n	8014686 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014678:	4b05      	ldr	r3, [pc, #20]	@ (8014690 <RCCEx_PLL2_Config+0x15c>)
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014680:	2b00      	cmp	r3, #0
 8014682:	d0f0      	beq.n	8014666 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8014684:	7bfb      	ldrb	r3, [r7, #15]
}
 8014686:	4618      	mov	r0, r3
 8014688:	3710      	adds	r7, #16
 801468a:	46bd      	mov	sp, r7
 801468c:	bd80      	pop	{r7, pc}
 801468e:	bf00      	nop
 8014690:	58024400 	.word	0x58024400
 8014694:	ffff0007 	.word	0xffff0007

08014698 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b084      	sub	sp, #16
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
 80146a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80146a2:	2300      	movs	r3, #0
 80146a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80146a6:	4b53      	ldr	r3, [pc, #332]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 80146a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146aa:	f003 0303 	and.w	r3, r3, #3
 80146ae:	2b03      	cmp	r3, #3
 80146b0:	d101      	bne.n	80146b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80146b2:	2301      	movs	r3, #1
 80146b4:	e099      	b.n	80147ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80146b6:	4b4f      	ldr	r3, [pc, #316]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	4a4e      	ldr	r2, [pc, #312]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 80146bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80146c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80146c2:	f7f4 ff1b 	bl	80094fc <HAL_GetTick>
 80146c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80146c8:	e008      	b.n	80146dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80146ca:	f7f4 ff17 	bl	80094fc <HAL_GetTick>
 80146ce:	4602      	mov	r2, r0
 80146d0:	68bb      	ldr	r3, [r7, #8]
 80146d2:	1ad3      	subs	r3, r2, r3
 80146d4:	2b02      	cmp	r3, #2
 80146d6:	d901      	bls.n	80146dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80146d8:	2303      	movs	r3, #3
 80146da:	e086      	b.n	80147ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80146dc:	4b45      	ldr	r3, [pc, #276]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d1f0      	bne.n	80146ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80146e8:	4b42      	ldr	r3, [pc, #264]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 80146ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146ec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	051b      	lsls	r3, r3, #20
 80146f6:	493f      	ldr	r1, [pc, #252]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 80146f8:	4313      	orrs	r3, r2
 80146fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	685b      	ldr	r3, [r3, #4]
 8014700:	3b01      	subs	r3, #1
 8014702:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	689b      	ldr	r3, [r3, #8]
 801470a:	3b01      	subs	r3, #1
 801470c:	025b      	lsls	r3, r3, #9
 801470e:	b29b      	uxth	r3, r3
 8014710:	431a      	orrs	r2, r3
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	68db      	ldr	r3, [r3, #12]
 8014716:	3b01      	subs	r3, #1
 8014718:	041b      	lsls	r3, r3, #16
 801471a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801471e:	431a      	orrs	r2, r3
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	691b      	ldr	r3, [r3, #16]
 8014724:	3b01      	subs	r3, #1
 8014726:	061b      	lsls	r3, r3, #24
 8014728:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801472c:	4931      	ldr	r1, [pc, #196]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 801472e:	4313      	orrs	r3, r2
 8014730:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8014732:	4b30      	ldr	r3, [pc, #192]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 8014734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014736:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	695b      	ldr	r3, [r3, #20]
 801473e:	492d      	ldr	r1, [pc, #180]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 8014740:	4313      	orrs	r3, r2
 8014742:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8014744:	4b2b      	ldr	r3, [pc, #172]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 8014746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014748:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	699b      	ldr	r3, [r3, #24]
 8014750:	4928      	ldr	r1, [pc, #160]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 8014752:	4313      	orrs	r3, r2
 8014754:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8014756:	4b27      	ldr	r3, [pc, #156]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 8014758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801475a:	4a26      	ldr	r2, [pc, #152]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 801475c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014760:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8014762:	4b24      	ldr	r3, [pc, #144]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 8014764:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014766:	4b24      	ldr	r3, [pc, #144]	@ (80147f8 <RCCEx_PLL3_Config+0x160>)
 8014768:	4013      	ands	r3, r2
 801476a:	687a      	ldr	r2, [r7, #4]
 801476c:	69d2      	ldr	r2, [r2, #28]
 801476e:	00d2      	lsls	r2, r2, #3
 8014770:	4920      	ldr	r1, [pc, #128]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 8014772:	4313      	orrs	r3, r2
 8014774:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8014776:	4b1f      	ldr	r3, [pc, #124]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 8014778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801477a:	4a1e      	ldr	r2, [pc, #120]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 801477c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014780:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014782:	683b      	ldr	r3, [r7, #0]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d106      	bne.n	8014796 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8014788:	4b1a      	ldr	r3, [pc, #104]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 801478a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801478c:	4a19      	ldr	r2, [pc, #100]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 801478e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8014792:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014794:	e00f      	b.n	80147b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8014796:	683b      	ldr	r3, [r7, #0]
 8014798:	2b01      	cmp	r3, #1
 801479a:	d106      	bne.n	80147aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801479c:	4b15      	ldr	r3, [pc, #84]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 801479e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147a0:	4a14      	ldr	r2, [pc, #80]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 80147a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80147a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80147a8:	e005      	b.n	80147b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80147aa:	4b12      	ldr	r3, [pc, #72]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 80147ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147ae:	4a11      	ldr	r2, [pc, #68]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 80147b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80147b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80147b6:	4b0f      	ldr	r3, [pc, #60]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	4a0e      	ldr	r2, [pc, #56]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 80147bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80147c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80147c2:	f7f4 fe9b 	bl	80094fc <HAL_GetTick>
 80147c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80147c8:	e008      	b.n	80147dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80147ca:	f7f4 fe97 	bl	80094fc <HAL_GetTick>
 80147ce:	4602      	mov	r2, r0
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	1ad3      	subs	r3, r2, r3
 80147d4:	2b02      	cmp	r3, #2
 80147d6:	d901      	bls.n	80147dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80147d8:	2303      	movs	r3, #3
 80147da:	e006      	b.n	80147ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80147dc:	4b05      	ldr	r3, [pc, #20]	@ (80147f4 <RCCEx_PLL3_Config+0x15c>)
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d0f0      	beq.n	80147ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80147e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3710      	adds	r7, #16
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}
 80147f2:	bf00      	nop
 80147f4:	58024400 	.word	0x58024400
 80147f8:	ffff0007 	.word	0xffff0007

080147fc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b084      	sub	sp, #16
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d101      	bne.n	801480e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801480a:	2301      	movs	r3, #1
 801480c:	e10f      	b.n	8014a2e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	2200      	movs	r2, #0
 8014812:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	4a87      	ldr	r2, [pc, #540]	@ (8014a38 <HAL_SPI_Init+0x23c>)
 801481a:	4293      	cmp	r3, r2
 801481c:	d00f      	beq.n	801483e <HAL_SPI_Init+0x42>
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	4a86      	ldr	r2, [pc, #536]	@ (8014a3c <HAL_SPI_Init+0x240>)
 8014824:	4293      	cmp	r3, r2
 8014826:	d00a      	beq.n	801483e <HAL_SPI_Init+0x42>
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	4a84      	ldr	r2, [pc, #528]	@ (8014a40 <HAL_SPI_Init+0x244>)
 801482e:	4293      	cmp	r3, r2
 8014830:	d005      	beq.n	801483e <HAL_SPI_Init+0x42>
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	68db      	ldr	r3, [r3, #12]
 8014836:	2b0f      	cmp	r3, #15
 8014838:	d901      	bls.n	801483e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801483a:	2301      	movs	r3, #1
 801483c:	e0f7      	b.n	8014a2e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f001 fd22 	bl	8016288 <SPI_GetPacketSize>
 8014844:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	4a7b      	ldr	r2, [pc, #492]	@ (8014a38 <HAL_SPI_Init+0x23c>)
 801484c:	4293      	cmp	r3, r2
 801484e:	d00c      	beq.n	801486a <HAL_SPI_Init+0x6e>
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	4a79      	ldr	r2, [pc, #484]	@ (8014a3c <HAL_SPI_Init+0x240>)
 8014856:	4293      	cmp	r3, r2
 8014858:	d007      	beq.n	801486a <HAL_SPI_Init+0x6e>
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	4a78      	ldr	r2, [pc, #480]	@ (8014a40 <HAL_SPI_Init+0x244>)
 8014860:	4293      	cmp	r3, r2
 8014862:	d002      	beq.n	801486a <HAL_SPI_Init+0x6e>
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	2b08      	cmp	r3, #8
 8014868:	d811      	bhi.n	801488e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801486e:	4a72      	ldr	r2, [pc, #456]	@ (8014a38 <HAL_SPI_Init+0x23c>)
 8014870:	4293      	cmp	r3, r2
 8014872:	d009      	beq.n	8014888 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	4a70      	ldr	r2, [pc, #448]	@ (8014a3c <HAL_SPI_Init+0x240>)
 801487a:	4293      	cmp	r3, r2
 801487c:	d004      	beq.n	8014888 <HAL_SPI_Init+0x8c>
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	4a6f      	ldr	r2, [pc, #444]	@ (8014a40 <HAL_SPI_Init+0x244>)
 8014884:	4293      	cmp	r3, r2
 8014886:	d104      	bne.n	8014892 <HAL_SPI_Init+0x96>
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	2b10      	cmp	r3, #16
 801488c:	d901      	bls.n	8014892 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801488e:	2301      	movs	r3, #1
 8014890:	e0cd      	b.n	8014a2e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014898:	b2db      	uxtb	r3, r3
 801489a:	2b00      	cmp	r3, #0
 801489c:	d106      	bne.n	80148ac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	2200      	movs	r2, #0
 80148a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f7f3 fb7c 	bl	8007fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2202      	movs	r2, #2
 80148b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	681a      	ldr	r2, [r3, #0]
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	f022 0201 	bic.w	r2, r2, #1
 80148c2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	689b      	ldr	r3, [r3, #8]
 80148ca:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80148ce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	699b      	ldr	r3, [r3, #24]
 80148d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80148d8:	d119      	bne.n	801490e <HAL_SPI_Init+0x112>
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	685b      	ldr	r3, [r3, #4]
 80148de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80148e2:	d103      	bne.n	80148ec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d008      	beq.n	80148fe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d10c      	bne.n	801490e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80148f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80148fc:	d107      	bne.n	801490e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	681a      	ldr	r2, [r3, #0]
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801490c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	685b      	ldr	r3, [r3, #4]
 8014912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014916:	2b00      	cmp	r3, #0
 8014918:	d00f      	beq.n	801493a <HAL_SPI_Init+0x13e>
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	68db      	ldr	r3, [r3, #12]
 801491e:	2b06      	cmp	r3, #6
 8014920:	d90b      	bls.n	801493a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	430a      	orrs	r2, r1
 8014936:	601a      	str	r2, [r3, #0]
 8014938:	e007      	b.n	801494a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	681a      	ldr	r2, [r3, #0]
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8014948:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	69da      	ldr	r2, [r3, #28]
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014952:	431a      	orrs	r2, r3
 8014954:	68bb      	ldr	r3, [r7, #8]
 8014956:	431a      	orrs	r2, r3
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801495c:	ea42 0103 	orr.w	r1, r2, r3
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	68da      	ldr	r2, [r3, #12]
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	430a      	orrs	r2, r1
 801496a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014974:	431a      	orrs	r2, r3
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801497a:	431a      	orrs	r2, r3
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	699b      	ldr	r3, [r3, #24]
 8014980:	431a      	orrs	r2, r3
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	691b      	ldr	r3, [r3, #16]
 8014986:	431a      	orrs	r2, r3
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	695b      	ldr	r3, [r3, #20]
 801498c:	431a      	orrs	r2, r3
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	6a1b      	ldr	r3, [r3, #32]
 8014992:	431a      	orrs	r2, r3
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	685b      	ldr	r3, [r3, #4]
 8014998:	431a      	orrs	r2, r3
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801499e:	431a      	orrs	r2, r3
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	689b      	ldr	r3, [r3, #8]
 80149a4:	431a      	orrs	r2, r3
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80149aa:	ea42 0103 	orr.w	r1, r2, r3
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	430a      	orrs	r2, r1
 80149b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	685b      	ldr	r3, [r3, #4]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d113      	bne.n	80149ea <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	689b      	ldr	r3, [r3, #8]
 80149c8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80149d4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	689b      	ldr	r3, [r3, #8]
 80149dc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80149e8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	f022 0201 	bic.w	r2, r2, #1
 80149f8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	685b      	ldr	r3, [r3, #4]
 80149fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d00a      	beq.n	8014a1c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	68db      	ldr	r3, [r3, #12]
 8014a0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	430a      	orrs	r2, r1
 8014a1a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	2200      	movs	r2, #0
 8014a20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2201      	movs	r2, #1
 8014a28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8014a2c:	2300      	movs	r3, #0
}
 8014a2e:	4618      	mov	r0, r3
 8014a30:	3710      	adds	r7, #16
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd80      	pop	{r7, pc}
 8014a36:	bf00      	nop
 8014a38:	40013000 	.word	0x40013000
 8014a3c:	40003800 	.word	0x40003800
 8014a40:	40003c00 	.word	0x40003c00

08014a44 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b088      	sub	sp, #32
 8014a48:	af02      	add	r7, sp, #8
 8014a4a:	60f8      	str	r0, [r7, #12]
 8014a4c:	60b9      	str	r1, [r7, #8]
 8014a4e:	603b      	str	r3, [r7, #0]
 8014a50:	4613      	mov	r3, r2
 8014a52:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	3320      	adds	r3, #32
 8014a5a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014a5c:	f7f4 fd4e 	bl	80094fc <HAL_GetTick>
 8014a60:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014a68:	b2db      	uxtb	r3, r3
 8014a6a:	2b01      	cmp	r3, #1
 8014a6c:	d001      	beq.n	8014a72 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8014a6e:	2302      	movs	r3, #2
 8014a70:	e1d1      	b.n	8014e16 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014a72:	68bb      	ldr	r3, [r7, #8]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d002      	beq.n	8014a7e <HAL_SPI_Transmit+0x3a>
 8014a78:	88fb      	ldrh	r3, [r7, #6]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d101      	bne.n	8014a82 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8014a7e:	2301      	movs	r3, #1
 8014a80:	e1c9      	b.n	8014e16 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014a88:	2b01      	cmp	r3, #1
 8014a8a:	d101      	bne.n	8014a90 <HAL_SPI_Transmit+0x4c>
 8014a8c:	2302      	movs	r3, #2
 8014a8e:	e1c2      	b.n	8014e16 <HAL_SPI_Transmit+0x3d2>
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	2201      	movs	r2, #1
 8014a94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	2203      	movs	r2, #3
 8014a9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	68ba      	ldr	r2, [r7, #8]
 8014aac:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	88fa      	ldrh	r2, [r7, #6]
 8014ab2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	88fa      	ldrh	r2, [r7, #6]
 8014aba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	2200      	movs	r2, #0
 8014ac2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	2200      	movs	r2, #0
 8014ac8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	2200      	movs	r2, #0
 8014ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	2200      	movs	r2, #0
 8014ade:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	689b      	ldr	r3, [r3, #8]
 8014ae4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014ae8:	d108      	bne.n	8014afc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	681a      	ldr	r2, [r3, #0]
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014af8:	601a      	str	r2, [r3, #0]
 8014afa:	e009      	b.n	8014b10 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	68db      	ldr	r3, [r3, #12]
 8014b02:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014b0e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	685a      	ldr	r2, [r3, #4]
 8014b16:	4b96      	ldr	r3, [pc, #600]	@ (8014d70 <HAL_SPI_Transmit+0x32c>)
 8014b18:	4013      	ands	r3, r2
 8014b1a:	88f9      	ldrh	r1, [r7, #6]
 8014b1c:	68fa      	ldr	r2, [r7, #12]
 8014b1e:	6812      	ldr	r2, [r2, #0]
 8014b20:	430b      	orrs	r3, r1
 8014b22:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	681a      	ldr	r2, [r3, #0]
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	f042 0201 	orr.w	r2, r2, #1
 8014b32:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	685b      	ldr	r3, [r3, #4]
 8014b38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014b3c:	d107      	bne.n	8014b4e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	681a      	ldr	r2, [r3, #0]
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014b4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	68db      	ldr	r3, [r3, #12]
 8014b52:	2b0f      	cmp	r3, #15
 8014b54:	d947      	bls.n	8014be6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014b56:	e03f      	b.n	8014bd8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	695b      	ldr	r3, [r3, #20]
 8014b5e:	f003 0302 	and.w	r3, r3, #2
 8014b62:	2b02      	cmp	r3, #2
 8014b64:	d114      	bne.n	8014b90 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	6812      	ldr	r2, [r2, #0]
 8014b70:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014b76:	1d1a      	adds	r2, r3, #4
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014b82:	b29b      	uxth	r3, r3
 8014b84:	3b01      	subs	r3, #1
 8014b86:	b29a      	uxth	r2, r3
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014b8e:	e023      	b.n	8014bd8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014b90:	f7f4 fcb4 	bl	80094fc <HAL_GetTick>
 8014b94:	4602      	mov	r2, r0
 8014b96:	693b      	ldr	r3, [r7, #16]
 8014b98:	1ad3      	subs	r3, r2, r3
 8014b9a:	683a      	ldr	r2, [r7, #0]
 8014b9c:	429a      	cmp	r2, r3
 8014b9e:	d803      	bhi.n	8014ba8 <HAL_SPI_Transmit+0x164>
 8014ba0:	683b      	ldr	r3, [r7, #0]
 8014ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ba6:	d102      	bne.n	8014bae <HAL_SPI_Transmit+0x16a>
 8014ba8:	683b      	ldr	r3, [r7, #0]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d114      	bne.n	8014bd8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014bae:	68f8      	ldr	r0, [r7, #12]
 8014bb0:	f001 fa9c 	bl	80160ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014bba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	2201      	movs	r2, #1
 8014bc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	2200      	movs	r2, #0
 8014bd0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014bd4:	2303      	movs	r3, #3
 8014bd6:	e11e      	b.n	8014e16 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014bde:	b29b      	uxth	r3, r3
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d1b9      	bne.n	8014b58 <HAL_SPI_Transmit+0x114>
 8014be4:	e0f1      	b.n	8014dca <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	68db      	ldr	r3, [r3, #12]
 8014bea:	2b07      	cmp	r3, #7
 8014bec:	f240 80e6 	bls.w	8014dbc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014bf0:	e05d      	b.n	8014cae <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	695b      	ldr	r3, [r3, #20]
 8014bf8:	f003 0302 	and.w	r3, r3, #2
 8014bfc:	2b02      	cmp	r3, #2
 8014bfe:	d132      	bne.n	8014c66 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c06:	b29b      	uxth	r3, r3
 8014c08:	2b01      	cmp	r3, #1
 8014c0a:	d918      	bls.n	8014c3e <HAL_SPI_Transmit+0x1fa>
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d014      	beq.n	8014c3e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	6812      	ldr	r2, [r2, #0]
 8014c1e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014c24:	1d1a      	adds	r2, r3, #4
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c30:	b29b      	uxth	r3, r3
 8014c32:	3b02      	subs	r3, #2
 8014c34:	b29a      	uxth	r2, r3
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014c3c:	e037      	b.n	8014cae <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014c42:	881a      	ldrh	r2, [r3, #0]
 8014c44:	697b      	ldr	r3, [r7, #20]
 8014c46:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014c4c:	1c9a      	adds	r2, r3, #2
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c58:	b29b      	uxth	r3, r3
 8014c5a:	3b01      	subs	r3, #1
 8014c5c:	b29a      	uxth	r2, r3
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014c64:	e023      	b.n	8014cae <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014c66:	f7f4 fc49 	bl	80094fc <HAL_GetTick>
 8014c6a:	4602      	mov	r2, r0
 8014c6c:	693b      	ldr	r3, [r7, #16]
 8014c6e:	1ad3      	subs	r3, r2, r3
 8014c70:	683a      	ldr	r2, [r7, #0]
 8014c72:	429a      	cmp	r2, r3
 8014c74:	d803      	bhi.n	8014c7e <HAL_SPI_Transmit+0x23a>
 8014c76:	683b      	ldr	r3, [r7, #0]
 8014c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c7c:	d102      	bne.n	8014c84 <HAL_SPI_Transmit+0x240>
 8014c7e:	683b      	ldr	r3, [r7, #0]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d114      	bne.n	8014cae <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014c84:	68f8      	ldr	r0, [r7, #12]
 8014c86:	f001 fa31 	bl	80160ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014c90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	2201      	movs	r2, #1
 8014c9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014caa:	2303      	movs	r3, #3
 8014cac:	e0b3      	b.n	8014e16 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014cb4:	b29b      	uxth	r3, r3
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d19b      	bne.n	8014bf2 <HAL_SPI_Transmit+0x1ae>
 8014cba:	e086      	b.n	8014dca <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	695b      	ldr	r3, [r3, #20]
 8014cc2:	f003 0302 	and.w	r3, r3, #2
 8014cc6:	2b02      	cmp	r3, #2
 8014cc8:	d154      	bne.n	8014d74 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014cd0:	b29b      	uxth	r3, r3
 8014cd2:	2b03      	cmp	r3, #3
 8014cd4:	d918      	bls.n	8014d08 <HAL_SPI_Transmit+0x2c4>
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014cda:	2b40      	cmp	r3, #64	@ 0x40
 8014cdc:	d914      	bls.n	8014d08 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	6812      	ldr	r2, [r2, #0]
 8014ce8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014cee:	1d1a      	adds	r2, r3, #4
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014cfa:	b29b      	uxth	r3, r3
 8014cfc:	3b04      	subs	r3, #4
 8014cfe:	b29a      	uxth	r2, r3
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014d06:	e059      	b.n	8014dbc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d0e:	b29b      	uxth	r3, r3
 8014d10:	2b01      	cmp	r3, #1
 8014d12:	d917      	bls.n	8014d44 <HAL_SPI_Transmit+0x300>
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d013      	beq.n	8014d44 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d20:	881a      	ldrh	r2, [r3, #0]
 8014d22:	697b      	ldr	r3, [r7, #20]
 8014d24:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d2a:	1c9a      	adds	r2, r3, #2
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d36:	b29b      	uxth	r3, r3
 8014d38:	3b02      	subs	r3, #2
 8014d3a:	b29a      	uxth	r2, r3
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014d42:	e03b      	b.n	8014dbc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	3320      	adds	r3, #32
 8014d4e:	7812      	ldrb	r2, [r2, #0]
 8014d50:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d56:	1c5a      	adds	r2, r3, #1
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d62:	b29b      	uxth	r3, r3
 8014d64:	3b01      	subs	r3, #1
 8014d66:	b29a      	uxth	r2, r3
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014d6e:	e025      	b.n	8014dbc <HAL_SPI_Transmit+0x378>
 8014d70:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014d74:	f7f4 fbc2 	bl	80094fc <HAL_GetTick>
 8014d78:	4602      	mov	r2, r0
 8014d7a:	693b      	ldr	r3, [r7, #16]
 8014d7c:	1ad3      	subs	r3, r2, r3
 8014d7e:	683a      	ldr	r2, [r7, #0]
 8014d80:	429a      	cmp	r2, r3
 8014d82:	d803      	bhi.n	8014d8c <HAL_SPI_Transmit+0x348>
 8014d84:	683b      	ldr	r3, [r7, #0]
 8014d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d8a:	d102      	bne.n	8014d92 <HAL_SPI_Transmit+0x34e>
 8014d8c:	683b      	ldr	r3, [r7, #0]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d114      	bne.n	8014dbc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014d92:	68f8      	ldr	r0, [r7, #12]
 8014d94:	f001 f9aa 	bl	80160ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014d9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	2201      	movs	r2, #1
 8014dac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	2200      	movs	r2, #0
 8014db4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014db8:	2303      	movs	r3, #3
 8014dba:	e02c      	b.n	8014e16 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014dc2:	b29b      	uxth	r3, r3
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	f47f af79 	bne.w	8014cbc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8014dca:	693b      	ldr	r3, [r7, #16]
 8014dcc:	9300      	str	r3, [sp, #0]
 8014dce:	683b      	ldr	r3, [r7, #0]
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	2108      	movs	r1, #8
 8014dd4:	68f8      	ldr	r0, [r7, #12]
 8014dd6:	f001 fa29 	bl	801622c <SPI_WaitOnFlagUntilTimeout>
 8014dda:	4603      	mov	r3, r0
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d007      	beq.n	8014df0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014de6:	f043 0220 	orr.w	r2, r3, #32
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014df0:	68f8      	ldr	r0, [r7, #12]
 8014df2:	f001 f97b 	bl	80160ec <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	2201      	movs	r2, #1
 8014dfa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	2200      	movs	r2, #0
 8014e02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d001      	beq.n	8014e14 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8014e10:	2301      	movs	r3, #1
 8014e12:	e000      	b.n	8014e16 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8014e14:	2300      	movs	r3, #0
  }
}
 8014e16:	4618      	mov	r0, r3
 8014e18:	3718      	adds	r7, #24
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	bd80      	pop	{r7, pc}
 8014e1e:	bf00      	nop

08014e20 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b088      	sub	sp, #32
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	60f8      	str	r0, [r7, #12]
 8014e28:	60b9      	str	r1, [r7, #8]
 8014e2a:	603b      	str	r3, [r7, #0]
 8014e2c:	4613      	mov	r3, r2
 8014e2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e34:	095b      	lsrs	r3, r3, #5
 8014e36:	b29b      	uxth	r3, r3
 8014e38:	3301      	adds	r3, #1
 8014e3a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	3330      	adds	r3, #48	@ 0x30
 8014e42:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014e44:	f7f4 fb5a 	bl	80094fc <HAL_GetTick>
 8014e48:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014e50:	b2db      	uxtb	r3, r3
 8014e52:	2b01      	cmp	r3, #1
 8014e54:	d001      	beq.n	8014e5a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8014e56:	2302      	movs	r3, #2
 8014e58:	e250      	b.n	80152fc <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014e5a:	68bb      	ldr	r3, [r7, #8]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d002      	beq.n	8014e66 <HAL_SPI_Receive+0x46>
 8014e60:	88fb      	ldrh	r3, [r7, #6]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d101      	bne.n	8014e6a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8014e66:	2301      	movs	r3, #1
 8014e68:	e248      	b.n	80152fc <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014e70:	2b01      	cmp	r3, #1
 8014e72:	d101      	bne.n	8014e78 <HAL_SPI_Receive+0x58>
 8014e74:	2302      	movs	r3, #2
 8014e76:	e241      	b.n	80152fc <HAL_SPI_Receive+0x4dc>
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	2201      	movs	r2, #1
 8014e7c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	2204      	movs	r2, #4
 8014e84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	68ba      	ldr	r2, [r7, #8]
 8014e94:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	88fa      	ldrh	r2, [r7, #6]
 8014e9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	88fa      	ldrh	r2, [r7, #6]
 8014ea2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	2200      	movs	r2, #0
 8014eaa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	2200      	movs	r2, #0
 8014eb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	689b      	ldr	r3, [r3, #8]
 8014ecc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014ed0:	d108      	bne.n	8014ee4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	681a      	ldr	r2, [r3, #0]
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014ee0:	601a      	str	r2, [r3, #0]
 8014ee2:	e009      	b.n	8014ef8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	68db      	ldr	r3, [r3, #12]
 8014eea:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014ef6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	685a      	ldr	r2, [r3, #4]
 8014efe:	4b95      	ldr	r3, [pc, #596]	@ (8015154 <HAL_SPI_Receive+0x334>)
 8014f00:	4013      	ands	r3, r2
 8014f02:	88f9      	ldrh	r1, [r7, #6]
 8014f04:	68fa      	ldr	r2, [r7, #12]
 8014f06:	6812      	ldr	r2, [r2, #0]
 8014f08:	430b      	orrs	r3, r1
 8014f0a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	681a      	ldr	r2, [r3, #0]
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	f042 0201 	orr.w	r2, r2, #1
 8014f1a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	685b      	ldr	r3, [r3, #4]
 8014f20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014f24:	d107      	bne.n	8014f36 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	681a      	ldr	r2, [r3, #0]
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014f34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	68db      	ldr	r3, [r3, #12]
 8014f3a:	2b0f      	cmp	r3, #15
 8014f3c:	d96c      	bls.n	8015018 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014f3e:	e064      	b.n	801500a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	695b      	ldr	r3, [r3, #20]
 8014f46:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	695b      	ldr	r3, [r3, #20]
 8014f4e:	f003 0301 	and.w	r3, r3, #1
 8014f52:	2b01      	cmp	r3, #1
 8014f54:	d114      	bne.n	8014f80 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	681a      	ldr	r2, [r3, #0]
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f5e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014f60:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f66:	1d1a      	adds	r2, r3, #4
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f72:	b29b      	uxth	r3, r3
 8014f74:	3b01      	subs	r3, #1
 8014f76:	b29a      	uxth	r2, r3
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014f7e:	e044      	b.n	801500a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f86:	b29b      	uxth	r3, r3
 8014f88:	8bfa      	ldrh	r2, [r7, #30]
 8014f8a:	429a      	cmp	r2, r3
 8014f8c:	d919      	bls.n	8014fc2 <HAL_SPI_Receive+0x1a2>
 8014f8e:	693b      	ldr	r3, [r7, #16]
 8014f90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d014      	beq.n	8014fc2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	681a      	ldr	r2, [r3, #0]
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014fa0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014fa2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014fa8:	1d1a      	adds	r2, r3, #4
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014fb4:	b29b      	uxth	r3, r3
 8014fb6:	3b01      	subs	r3, #1
 8014fb8:	b29a      	uxth	r2, r3
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014fc0:	e023      	b.n	801500a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014fc2:	f7f4 fa9b 	bl	80094fc <HAL_GetTick>
 8014fc6:	4602      	mov	r2, r0
 8014fc8:	697b      	ldr	r3, [r7, #20]
 8014fca:	1ad3      	subs	r3, r2, r3
 8014fcc:	683a      	ldr	r2, [r7, #0]
 8014fce:	429a      	cmp	r2, r3
 8014fd0:	d803      	bhi.n	8014fda <HAL_SPI_Receive+0x1ba>
 8014fd2:	683b      	ldr	r3, [r7, #0]
 8014fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fd8:	d102      	bne.n	8014fe0 <HAL_SPI_Receive+0x1c0>
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d114      	bne.n	801500a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014fe0:	68f8      	ldr	r0, [r7, #12]
 8014fe2:	f001 f883 	bl	80160ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014fec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	2201      	movs	r2, #1
 8014ffa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	2200      	movs	r2, #0
 8015002:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8015006:	2303      	movs	r3, #3
 8015008:	e178      	b.n	80152fc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015010:	b29b      	uxth	r3, r3
 8015012:	2b00      	cmp	r3, #0
 8015014:	d194      	bne.n	8014f40 <HAL_SPI_Receive+0x120>
 8015016:	e15e      	b.n	80152d6 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	68db      	ldr	r3, [r3, #12]
 801501c:	2b07      	cmp	r3, #7
 801501e:	f240 8153 	bls.w	80152c8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8015022:	e08f      	b.n	8015144 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	695b      	ldr	r3, [r3, #20]
 801502a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	695b      	ldr	r3, [r3, #20]
 8015032:	f003 0301 	and.w	r3, r3, #1
 8015036:	2b01      	cmp	r3, #1
 8015038:	d114      	bne.n	8015064 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801503e:	69ba      	ldr	r2, [r7, #24]
 8015040:	8812      	ldrh	r2, [r2, #0]
 8015042:	b292      	uxth	r2, r2
 8015044:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801504a:	1c9a      	adds	r2, r3, #2
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015056:	b29b      	uxth	r3, r3
 8015058:	3b01      	subs	r3, #1
 801505a:	b29a      	uxth	r2, r3
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015062:	e06f      	b.n	8015144 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801506a:	b29b      	uxth	r3, r3
 801506c:	8bfa      	ldrh	r2, [r7, #30]
 801506e:	429a      	cmp	r2, r3
 8015070:	d924      	bls.n	80150bc <HAL_SPI_Receive+0x29c>
 8015072:	693b      	ldr	r3, [r7, #16]
 8015074:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015078:	2b00      	cmp	r3, #0
 801507a:	d01f      	beq.n	80150bc <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015080:	69ba      	ldr	r2, [r7, #24]
 8015082:	8812      	ldrh	r2, [r2, #0]
 8015084:	b292      	uxth	r2, r2
 8015086:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801508c:	1c9a      	adds	r2, r3, #2
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015096:	69ba      	ldr	r2, [r7, #24]
 8015098:	8812      	ldrh	r2, [r2, #0]
 801509a:	b292      	uxth	r2, r2
 801509c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150a2:	1c9a      	adds	r2, r3, #2
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150ae:	b29b      	uxth	r3, r3
 80150b0:	3b02      	subs	r3, #2
 80150b2:	b29a      	uxth	r2, r3
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80150ba:	e043      	b.n	8015144 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150c2:	b29b      	uxth	r3, r3
 80150c4:	2b01      	cmp	r3, #1
 80150c6:	d119      	bne.n	80150fc <HAL_SPI_Receive+0x2dc>
 80150c8:	693b      	ldr	r3, [r7, #16]
 80150ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d014      	beq.n	80150fc <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150d6:	69ba      	ldr	r2, [r7, #24]
 80150d8:	8812      	ldrh	r2, [r2, #0]
 80150da:	b292      	uxth	r2, r2
 80150dc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150e2:	1c9a      	adds	r2, r3, #2
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150ee:	b29b      	uxth	r3, r3
 80150f0:	3b01      	subs	r3, #1
 80150f2:	b29a      	uxth	r2, r3
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80150fa:	e023      	b.n	8015144 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80150fc:	f7f4 f9fe 	bl	80094fc <HAL_GetTick>
 8015100:	4602      	mov	r2, r0
 8015102:	697b      	ldr	r3, [r7, #20]
 8015104:	1ad3      	subs	r3, r2, r3
 8015106:	683a      	ldr	r2, [r7, #0]
 8015108:	429a      	cmp	r2, r3
 801510a:	d803      	bhi.n	8015114 <HAL_SPI_Receive+0x2f4>
 801510c:	683b      	ldr	r3, [r7, #0]
 801510e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015112:	d102      	bne.n	801511a <HAL_SPI_Receive+0x2fa>
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d114      	bne.n	8015144 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801511a:	68f8      	ldr	r0, [r7, #12]
 801511c:	f000 ffe6 	bl	80160ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015126:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	2201      	movs	r2, #1
 8015134:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	2200      	movs	r2, #0
 801513c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8015140:	2303      	movs	r3, #3
 8015142:	e0db      	b.n	80152fc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801514a:	b29b      	uxth	r3, r3
 801514c:	2b00      	cmp	r3, #0
 801514e:	f47f af69 	bne.w	8015024 <HAL_SPI_Receive+0x204>
 8015152:	e0c0      	b.n	80152d6 <HAL_SPI_Receive+0x4b6>
 8015154:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	695b      	ldr	r3, [r3, #20]
 801515e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	695b      	ldr	r3, [r3, #20]
 8015166:	f003 0301 	and.w	r3, r3, #1
 801516a:	2b01      	cmp	r3, #1
 801516c:	d117      	bne.n	801519e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801517a:	7812      	ldrb	r2, [r2, #0]
 801517c:	b2d2      	uxtb	r2, r2
 801517e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015184:	1c5a      	adds	r2, r3, #1
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015190:	b29b      	uxth	r3, r3
 8015192:	3b01      	subs	r3, #1
 8015194:	b29a      	uxth	r2, r3
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801519c:	e094      	b.n	80152c8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80151a4:	b29b      	uxth	r3, r3
 80151a6:	8bfa      	ldrh	r2, [r7, #30]
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d946      	bls.n	801523a <HAL_SPI_Receive+0x41a>
 80151ac:	693b      	ldr	r3, [r7, #16]
 80151ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d041      	beq.n	801523a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151c2:	7812      	ldrb	r2, [r2, #0]
 80151c4:	b2d2      	uxtb	r2, r2
 80151c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151cc:	1c5a      	adds	r2, r3, #1
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151de:	7812      	ldrb	r2, [r2, #0]
 80151e0:	b2d2      	uxtb	r2, r2
 80151e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151e8:	1c5a      	adds	r2, r3, #1
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151fa:	7812      	ldrb	r2, [r2, #0]
 80151fc:	b2d2      	uxtb	r2, r2
 80151fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015204:	1c5a      	adds	r2, r3, #1
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015216:	7812      	ldrb	r2, [r2, #0]
 8015218:	b2d2      	uxtb	r2, r2
 801521a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015220:	1c5a      	adds	r2, r3, #1
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801522c:	b29b      	uxth	r3, r3
 801522e:	3b04      	subs	r3, #4
 8015230:	b29a      	uxth	r2, r3
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015238:	e046      	b.n	80152c8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015240:	b29b      	uxth	r3, r3
 8015242:	2b03      	cmp	r3, #3
 8015244:	d81c      	bhi.n	8015280 <HAL_SPI_Receive+0x460>
 8015246:	693b      	ldr	r3, [r7, #16]
 8015248:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 801524c:	2b00      	cmp	r3, #0
 801524e:	d017      	beq.n	8015280 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801525c:	7812      	ldrb	r2, [r2, #0]
 801525e:	b2d2      	uxtb	r2, r2
 8015260:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015266:	1c5a      	adds	r2, r3, #1
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015272:	b29b      	uxth	r3, r3
 8015274:	3b01      	subs	r3, #1
 8015276:	b29a      	uxth	r2, r3
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801527e:	e023      	b.n	80152c8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015280:	f7f4 f93c 	bl	80094fc <HAL_GetTick>
 8015284:	4602      	mov	r2, r0
 8015286:	697b      	ldr	r3, [r7, #20]
 8015288:	1ad3      	subs	r3, r2, r3
 801528a:	683a      	ldr	r2, [r7, #0]
 801528c:	429a      	cmp	r2, r3
 801528e:	d803      	bhi.n	8015298 <HAL_SPI_Receive+0x478>
 8015290:	683b      	ldr	r3, [r7, #0]
 8015292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015296:	d102      	bne.n	801529e <HAL_SPI_Receive+0x47e>
 8015298:	683b      	ldr	r3, [r7, #0]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d114      	bne.n	80152c8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801529e:	68f8      	ldr	r0, [r7, #12]
 80152a0:	f000 ff24 	bl	80160ec <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80152aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	2201      	movs	r2, #1
 80152b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	2200      	movs	r2, #0
 80152c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80152c4:	2303      	movs	r3, #3
 80152c6:	e019      	b.n	80152fc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152ce:	b29b      	uxth	r3, r3
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	f47f af41 	bne.w	8015158 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80152d6:	68f8      	ldr	r0, [r7, #12]
 80152d8:	f000 ff08 	bl	80160ec <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	2201      	movs	r2, #1
 80152e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	2200      	movs	r2, #0
 80152e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d001      	beq.n	80152fa <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80152f6:	2301      	movs	r3, #1
 80152f8:	e000      	b.n	80152fc <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80152fa:	2300      	movs	r3, #0
  }
}
 80152fc:	4618      	mov	r0, r3
 80152fe:	3720      	adds	r7, #32
 8015300:	46bd      	mov	sp, r7
 8015302:	bd80      	pop	{r7, pc}

08015304 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015304:	b580      	push	{r7, lr}
 8015306:	b08e      	sub	sp, #56	@ 0x38
 8015308:	af02      	add	r7, sp, #8
 801530a:	60f8      	str	r0, [r7, #12]
 801530c:	60b9      	str	r1, [r7, #8]
 801530e:	607a      	str	r2, [r7, #4]
 8015310:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	3320      	adds	r3, #32
 8015318:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	3330      	adds	r3, #48	@ 0x30
 8015320:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015326:	095b      	lsrs	r3, r3, #5
 8015328:	b29b      	uxth	r3, r3
 801532a:	3301      	adds	r3, #1
 801532c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801532e:	f7f4 f8e5 	bl	80094fc <HAL_GetTick>
 8015332:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8015334:	887b      	ldrh	r3, [r7, #2]
 8015336:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8015338:	887b      	ldrh	r3, [r7, #2]
 801533a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015342:	b2db      	uxtb	r3, r3
 8015344:	2b01      	cmp	r3, #1
 8015346:	d001      	beq.n	801534c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8015348:	2302      	movs	r3, #2
 801534a:	e310      	b.n	801596e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 801534c:	68bb      	ldr	r3, [r7, #8]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d005      	beq.n	801535e <HAL_SPI_TransmitReceive+0x5a>
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d002      	beq.n	801535e <HAL_SPI_TransmitReceive+0x5a>
 8015358:	887b      	ldrh	r3, [r7, #2]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d101      	bne.n	8015362 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 801535e:	2301      	movs	r3, #1
 8015360:	e305      	b.n	801596e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015368:	2b01      	cmp	r3, #1
 801536a:	d101      	bne.n	8015370 <HAL_SPI_TransmitReceive+0x6c>
 801536c:	2302      	movs	r3, #2
 801536e:	e2fe      	b.n	801596e <HAL_SPI_TransmitReceive+0x66a>
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	2201      	movs	r2, #1
 8015374:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	2205      	movs	r2, #5
 801537c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	2200      	movs	r2, #0
 8015384:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	687a      	ldr	r2, [r7, #4]
 801538c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	887a      	ldrh	r2, [r7, #2]
 8015392:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	887a      	ldrh	r2, [r7, #2]
 801539a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	68ba      	ldr	r2, [r7, #8]
 80153a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	887a      	ldrh	r2, [r7, #2]
 80153a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	887a      	ldrh	r2, [r7, #2]
 80153b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	2200      	movs	r2, #0
 80153b8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	2200      	movs	r2, #0
 80153be:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	68da      	ldr	r2, [r3, #12]
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80153ce:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	4a70      	ldr	r2, [pc, #448]	@ (8015598 <HAL_SPI_TransmitReceive+0x294>)
 80153d6:	4293      	cmp	r3, r2
 80153d8:	d009      	beq.n	80153ee <HAL_SPI_TransmitReceive+0xea>
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	4a6f      	ldr	r2, [pc, #444]	@ (801559c <HAL_SPI_TransmitReceive+0x298>)
 80153e0:	4293      	cmp	r3, r2
 80153e2:	d004      	beq.n	80153ee <HAL_SPI_TransmitReceive+0xea>
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	4a6d      	ldr	r2, [pc, #436]	@ (80155a0 <HAL_SPI_TransmitReceive+0x29c>)
 80153ea:	4293      	cmp	r3, r2
 80153ec:	d102      	bne.n	80153f4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80153ee:	2310      	movs	r3, #16
 80153f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80153f2:	e001      	b.n	80153f8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80153f4:	2308      	movs	r3, #8
 80153f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	685a      	ldr	r2, [r3, #4]
 80153fe:	4b69      	ldr	r3, [pc, #420]	@ (80155a4 <HAL_SPI_TransmitReceive+0x2a0>)
 8015400:	4013      	ands	r3, r2
 8015402:	8879      	ldrh	r1, [r7, #2]
 8015404:	68fa      	ldr	r2, [r7, #12]
 8015406:	6812      	ldr	r2, [r2, #0]
 8015408:	430b      	orrs	r3, r1
 801540a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	681a      	ldr	r2, [r3, #0]
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	f042 0201 	orr.w	r2, r2, #1
 801541a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	685b      	ldr	r3, [r3, #4]
 8015420:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015424:	d107      	bne.n	8015436 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	681a      	ldr	r2, [r3, #0]
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015434:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	68db      	ldr	r3, [r3, #12]
 801543a:	2b0f      	cmp	r3, #15
 801543c:	f240 80a2 	bls.w	8015584 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8015440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015442:	089b      	lsrs	r3, r3, #2
 8015444:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015446:	e094      	b.n	8015572 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	695b      	ldr	r3, [r3, #20]
 801544e:	f003 0302 	and.w	r3, r3, #2
 8015452:	2b02      	cmp	r3, #2
 8015454:	d120      	bne.n	8015498 <HAL_SPI_TransmitReceive+0x194>
 8015456:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015458:	2b00      	cmp	r3, #0
 801545a:	d01d      	beq.n	8015498 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 801545c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801545e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015462:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015464:	429a      	cmp	r2, r3
 8015466:	d217      	bcs.n	8015498 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	6812      	ldr	r2, [r2, #0]
 8015472:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015478:	1d1a      	adds	r2, r3, #4
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015484:	b29b      	uxth	r3, r3
 8015486:	3b01      	subs	r3, #1
 8015488:	b29a      	uxth	r2, r3
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015496:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	695b      	ldr	r3, [r3, #20]
 801549e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80154a0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d065      	beq.n	8015572 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	695b      	ldr	r3, [r3, #20]
 80154ac:	f003 0301 	and.w	r3, r3, #1
 80154b0:	2b01      	cmp	r3, #1
 80154b2:	d118      	bne.n	80154e6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	681a      	ldr	r2, [r3, #0]
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80154be:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154c4:	1d1a      	adds	r2, r3, #4
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80154d0:	b29b      	uxth	r3, r3
 80154d2:	3b01      	subs	r3, #1
 80154d4:	b29a      	uxth	r2, r3
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80154e2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80154e4:	e045      	b.n	8015572 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80154e6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80154e8:	8bfb      	ldrh	r3, [r7, #30]
 80154ea:	429a      	cmp	r2, r3
 80154ec:	d21d      	bcs.n	801552a <HAL_SPI_TransmitReceive+0x226>
 80154ee:	697b      	ldr	r3, [r7, #20]
 80154f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d018      	beq.n	801552a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	681a      	ldr	r2, [r3, #0]
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015500:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015502:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015508:	1d1a      	adds	r2, r3, #4
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015514:	b29b      	uxth	r3, r3
 8015516:	3b01      	subs	r3, #1
 8015518:	b29a      	uxth	r2, r3
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015526:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015528:	e023      	b.n	8015572 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801552a:	f7f3 ffe7 	bl	80094fc <HAL_GetTick>
 801552e:	4602      	mov	r2, r0
 8015530:	69bb      	ldr	r3, [r7, #24]
 8015532:	1ad3      	subs	r3, r2, r3
 8015534:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015536:	429a      	cmp	r2, r3
 8015538:	d803      	bhi.n	8015542 <HAL_SPI_TransmitReceive+0x23e>
 801553a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801553c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015540:	d102      	bne.n	8015548 <HAL_SPI_TransmitReceive+0x244>
 8015542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015544:	2b00      	cmp	r3, #0
 8015546:	d114      	bne.n	8015572 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015548:	68f8      	ldr	r0, [r7, #12]
 801554a:	f000 fdcf 	bl	80160ec <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015554:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	2201      	movs	r2, #1
 8015562:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	2200      	movs	r2, #0
 801556a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 801556e:	2303      	movs	r3, #3
 8015570:	e1fd      	b.n	801596e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015572:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015574:	2b00      	cmp	r3, #0
 8015576:	f47f af67 	bne.w	8015448 <HAL_SPI_TransmitReceive+0x144>
 801557a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801557c:	2b00      	cmp	r3, #0
 801557e:	f47f af63 	bne.w	8015448 <HAL_SPI_TransmitReceive+0x144>
 8015582:	e1ce      	b.n	8015922 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	68db      	ldr	r3, [r3, #12]
 8015588:	2b07      	cmp	r3, #7
 801558a:	f240 81c2 	bls.w	8015912 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 801558e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015590:	085b      	lsrs	r3, r3, #1
 8015592:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015594:	e0c9      	b.n	801572a <HAL_SPI_TransmitReceive+0x426>
 8015596:	bf00      	nop
 8015598:	40013000 	.word	0x40013000
 801559c:	40003800 	.word	0x40003800
 80155a0:	40003c00 	.word	0x40003c00
 80155a4:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	695b      	ldr	r3, [r3, #20]
 80155ae:	f003 0302 	and.w	r3, r3, #2
 80155b2:	2b02      	cmp	r3, #2
 80155b4:	d11f      	bne.n	80155f6 <HAL_SPI_TransmitReceive+0x2f2>
 80155b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d01c      	beq.n	80155f6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80155bc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80155be:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80155c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155c2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80155c4:	429a      	cmp	r2, r3
 80155c6:	d216      	bcs.n	80155f6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80155cc:	881a      	ldrh	r2, [r3, #0]
 80155ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155d0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80155d6:	1c9a      	adds	r2, r3, #2
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80155e2:	b29b      	uxth	r3, r3
 80155e4:	3b01      	subs	r3, #1
 80155e6:	b29a      	uxth	r2, r3
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80155f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	695b      	ldr	r3, [r3, #20]
 80155fc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80155fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015600:	2b00      	cmp	r3, #0
 8015602:	f000 8092 	beq.w	801572a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	695b      	ldr	r3, [r3, #20]
 801560c:	f003 0301 	and.w	r3, r3, #1
 8015610:	2b01      	cmp	r3, #1
 8015612:	d118      	bne.n	8015646 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015618:	6a3a      	ldr	r2, [r7, #32]
 801561a:	8812      	ldrh	r2, [r2, #0]
 801561c:	b292      	uxth	r2, r2
 801561e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015624:	1c9a      	adds	r2, r3, #2
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015630:	b29b      	uxth	r3, r3
 8015632:	3b01      	subs	r3, #1
 8015634:	b29a      	uxth	r2, r3
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015642:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015644:	e071      	b.n	801572a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015646:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015648:	8bfb      	ldrh	r3, [r7, #30]
 801564a:	429a      	cmp	r2, r3
 801564c:	d228      	bcs.n	80156a0 <HAL_SPI_TransmitReceive+0x39c>
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015654:	2b00      	cmp	r3, #0
 8015656:	d023      	beq.n	80156a0 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801565c:	6a3a      	ldr	r2, [r7, #32]
 801565e:	8812      	ldrh	r2, [r2, #0]
 8015660:	b292      	uxth	r2, r2
 8015662:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015668:	1c9a      	adds	r2, r3, #2
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015672:	6a3a      	ldr	r2, [r7, #32]
 8015674:	8812      	ldrh	r2, [r2, #0]
 8015676:	b292      	uxth	r2, r2
 8015678:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801567e:	1c9a      	adds	r2, r3, #2
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801568a:	b29b      	uxth	r3, r3
 801568c:	3b02      	subs	r3, #2
 801568e:	b29a      	uxth	r2, r3
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801569c:	853b      	strh	r3, [r7, #40]	@ 0x28
 801569e:	e044      	b.n	801572a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80156a0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80156a2:	2b01      	cmp	r3, #1
 80156a4:	d11d      	bne.n	80156e2 <HAL_SPI_TransmitReceive+0x3de>
 80156a6:	697b      	ldr	r3, [r7, #20]
 80156a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d018      	beq.n	80156e2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156b4:	6a3a      	ldr	r2, [r7, #32]
 80156b6:	8812      	ldrh	r2, [r2, #0]
 80156b8:	b292      	uxth	r2, r2
 80156ba:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156c0:	1c9a      	adds	r2, r3, #2
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80156cc:	b29b      	uxth	r3, r3
 80156ce:	3b01      	subs	r3, #1
 80156d0:	b29a      	uxth	r2, r3
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80156de:	853b      	strh	r3, [r7, #40]	@ 0x28
 80156e0:	e023      	b.n	801572a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80156e2:	f7f3 ff0b 	bl	80094fc <HAL_GetTick>
 80156e6:	4602      	mov	r2, r0
 80156e8:	69bb      	ldr	r3, [r7, #24]
 80156ea:	1ad3      	subs	r3, r2, r3
 80156ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80156ee:	429a      	cmp	r2, r3
 80156f0:	d803      	bhi.n	80156fa <HAL_SPI_TransmitReceive+0x3f6>
 80156f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156f8:	d102      	bne.n	8015700 <HAL_SPI_TransmitReceive+0x3fc>
 80156fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d114      	bne.n	801572a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015700:	68f8      	ldr	r0, [r7, #12]
 8015702:	f000 fcf3 	bl	80160ec <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801570c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	2201      	movs	r2, #1
 801571a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	2200      	movs	r2, #0
 8015722:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8015726:	2303      	movs	r3, #3
 8015728:	e121      	b.n	801596e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801572a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801572c:	2b00      	cmp	r3, #0
 801572e:	f47f af3b 	bne.w	80155a8 <HAL_SPI_TransmitReceive+0x2a4>
 8015732:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015734:	2b00      	cmp	r3, #0
 8015736:	f47f af37 	bne.w	80155a8 <HAL_SPI_TransmitReceive+0x2a4>
 801573a:	e0f2      	b.n	8015922 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	695b      	ldr	r3, [r3, #20]
 8015742:	f003 0302 	and.w	r3, r3, #2
 8015746:	2b02      	cmp	r3, #2
 8015748:	d121      	bne.n	801578e <HAL_SPI_TransmitReceive+0x48a>
 801574a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801574c:	2b00      	cmp	r3, #0
 801574e:	d01e      	beq.n	801578e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8015750:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015752:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015756:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015758:	429a      	cmp	r2, r3
 801575a:	d218      	bcs.n	801578e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	3320      	adds	r3, #32
 8015766:	7812      	ldrb	r2, [r2, #0]
 8015768:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801576e:	1c5a      	adds	r2, r3, #1
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801577a:	b29b      	uxth	r3, r3
 801577c:	3b01      	subs	r3, #1
 801577e:	b29a      	uxth	r2, r3
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801578c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	695b      	ldr	r3, [r3, #20]
 8015794:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015796:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015798:	2b00      	cmp	r3, #0
 801579a:	f000 80ba 	beq.w	8015912 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	695b      	ldr	r3, [r3, #20]
 80157a4:	f003 0301 	and.w	r3, r3, #1
 80157a8:	2b01      	cmp	r3, #1
 80157aa:	d11b      	bne.n	80157e4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157b8:	7812      	ldrb	r2, [r2, #0]
 80157ba:	b2d2      	uxtb	r2, r2
 80157bc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157c2:	1c5a      	adds	r2, r3, #1
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80157ce:	b29b      	uxth	r3, r3
 80157d0:	3b01      	subs	r3, #1
 80157d2:	b29a      	uxth	r2, r3
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80157e0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80157e2:	e096      	b.n	8015912 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80157e4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80157e6:	8bfb      	ldrh	r3, [r7, #30]
 80157e8:	429a      	cmp	r2, r3
 80157ea:	d24a      	bcs.n	8015882 <HAL_SPI_TransmitReceive+0x57e>
 80157ec:	697b      	ldr	r3, [r7, #20]
 80157ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d045      	beq.n	8015882 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015802:	7812      	ldrb	r2, [r2, #0]
 8015804:	b2d2      	uxtb	r2, r2
 8015806:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801580c:	1c5a      	adds	r2, r3, #1
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801581e:	7812      	ldrb	r2, [r2, #0]
 8015820:	b2d2      	uxtb	r2, r2
 8015822:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015828:	1c5a      	adds	r2, r3, #1
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801583a:	7812      	ldrb	r2, [r2, #0]
 801583c:	b2d2      	uxtb	r2, r2
 801583e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015844:	1c5a      	adds	r2, r3, #1
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015856:	7812      	ldrb	r2, [r2, #0]
 8015858:	b2d2      	uxtb	r2, r2
 801585a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015860:	1c5a      	adds	r2, r3, #1
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801586c:	b29b      	uxth	r3, r3
 801586e:	3b04      	subs	r3, #4
 8015870:	b29a      	uxth	r2, r3
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801587e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015880:	e047      	b.n	8015912 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8015882:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015884:	2b03      	cmp	r3, #3
 8015886:	d820      	bhi.n	80158ca <HAL_SPI_TransmitReceive+0x5c6>
 8015888:	697b      	ldr	r3, [r7, #20]
 801588a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 801588e:	2b00      	cmp	r3, #0
 8015890:	d01b      	beq.n	80158ca <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801589e:	7812      	ldrb	r2, [r2, #0]
 80158a0:	b2d2      	uxtb	r2, r2
 80158a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158a8:	1c5a      	adds	r2, r3, #1
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80158b4:	b29b      	uxth	r3, r3
 80158b6:	3b01      	subs	r3, #1
 80158b8:	b29a      	uxth	r2, r3
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80158c6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80158c8:	e023      	b.n	8015912 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80158ca:	f7f3 fe17 	bl	80094fc <HAL_GetTick>
 80158ce:	4602      	mov	r2, r0
 80158d0:	69bb      	ldr	r3, [r7, #24]
 80158d2:	1ad3      	subs	r3, r2, r3
 80158d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80158d6:	429a      	cmp	r2, r3
 80158d8:	d803      	bhi.n	80158e2 <HAL_SPI_TransmitReceive+0x5de>
 80158da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158e0:	d102      	bne.n	80158e8 <HAL_SPI_TransmitReceive+0x5e4>
 80158e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d114      	bne.n	8015912 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80158e8:	68f8      	ldr	r0, [r7, #12]
 80158ea:	f000 fbff 	bl	80160ec <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80158f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	2201      	movs	r2, #1
 8015902:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	2200      	movs	r2, #0
 801590a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 801590e:	2303      	movs	r3, #3
 8015910:	e02d      	b.n	801596e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015912:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015914:	2b00      	cmp	r3, #0
 8015916:	f47f af11 	bne.w	801573c <HAL_SPI_TransmitReceive+0x438>
 801591a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801591c:	2b00      	cmp	r3, #0
 801591e:	f47f af0d 	bne.w	801573c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8015922:	69bb      	ldr	r3, [r7, #24]
 8015924:	9300      	str	r3, [sp, #0]
 8015926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015928:	2200      	movs	r2, #0
 801592a:	2108      	movs	r1, #8
 801592c:	68f8      	ldr	r0, [r7, #12]
 801592e:	f000 fc7d 	bl	801622c <SPI_WaitOnFlagUntilTimeout>
 8015932:	4603      	mov	r3, r0
 8015934:	2b00      	cmp	r3, #0
 8015936:	d007      	beq.n	8015948 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801593e:	f043 0220 	orr.w	r2, r3, #32
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8015948:	68f8      	ldr	r0, [r7, #12]
 801594a:	f000 fbcf 	bl	80160ec <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	2201      	movs	r2, #1
 8015952:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	2200      	movs	r2, #0
 801595a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015964:	2b00      	cmp	r3, #0
 8015966:	d001      	beq.n	801596c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8015968:	2301      	movs	r3, #1
 801596a:	e000      	b.n	801596e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 801596c:	2300      	movs	r3, #0
  }
}
 801596e:	4618      	mov	r0, r3
 8015970:	3730      	adds	r7, #48	@ 0x30
 8015972:	46bd      	mov	sp, r7
 8015974:	bd80      	pop	{r7, pc}
 8015976:	bf00      	nop

08015978 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b084      	sub	sp, #16
 801597c:	af00      	add	r7, sp, #0
 801597e:	60f8      	str	r0, [r7, #12]
 8015980:	60b9      	str	r1, [r7, #8]
 8015982:	4613      	mov	r3, r2
 8015984:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801598c:	b2db      	uxtb	r3, r3
 801598e:	2b01      	cmp	r3, #1
 8015990:	d001      	beq.n	8015996 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8015992:	2302      	movs	r3, #2
 8015994:	e126      	b.n	8015be4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8015996:	68bb      	ldr	r3, [r7, #8]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d002      	beq.n	80159a2 <HAL_SPI_Transmit_DMA+0x2a>
 801599c:	88fb      	ldrh	r3, [r7, #6]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d101      	bne.n	80159a6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80159a2:	2301      	movs	r3, #1
 80159a4:	e11e      	b.n	8015be4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80159ac:	2b01      	cmp	r3, #1
 80159ae:	d101      	bne.n	80159b4 <HAL_SPI_Transmit_DMA+0x3c>
 80159b0:	2302      	movs	r3, #2
 80159b2:	e117      	b.n	8015be4 <HAL_SPI_Transmit_DMA+0x26c>
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	2201      	movs	r2, #1
 80159b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	2203      	movs	r2, #3
 80159c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	2200      	movs	r2, #0
 80159c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	68ba      	ldr	r2, [r7, #8]
 80159d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	88fa      	ldrh	r2, [r7, #6]
 80159d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	88fa      	ldrh	r2, [r7, #6]
 80159de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	2200      	movs	r2, #0
 80159e6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	2200      	movs	r2, #0
 80159ec:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	2200      	movs	r2, #0
 80159f2:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	2200      	movs	r2, #0
 80159f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	2200      	movs	r2, #0
 8015a00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	689b      	ldr	r3, [r3, #8]
 8015a08:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8015a0c:	d108      	bne.n	8015a20 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	681a      	ldr	r2, [r3, #0]
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015a1c:	601a      	str	r2, [r3, #0]
 8015a1e:	e009      	b.n	8015a34 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	68db      	ldr	r3, [r3, #12]
 8015a26:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8015a32:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	2b0f      	cmp	r3, #15
 8015a3a:	d905      	bls.n	8015a48 <HAL_SPI_Transmit_DMA+0xd0>
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015a40:	699b      	ldr	r3, [r3, #24]
 8015a42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015a46:	d10f      	bne.n	8015a68 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015a4c:	2b07      	cmp	r3, #7
 8015a4e:	d911      	bls.n	8015a74 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015a54:	699b      	ldr	r3, [r3, #24]
 8015a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015a5a:	d00b      	beq.n	8015a74 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015a60:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015a62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015a66:	d005      	beq.n	8015a74 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8015a70:	2301      	movs	r3, #1
 8015a72:	e0b7      	b.n	8015be4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	68db      	ldr	r3, [r3, #12]
 8015a78:	2b07      	cmp	r3, #7
 8015a7a:	d820      	bhi.n	8015abe <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015a80:	699b      	ldr	r3, [r3, #24]
 8015a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015a86:	d109      	bne.n	8015a9c <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015a8e:	b29b      	uxth	r3, r3
 8015a90:	3301      	adds	r3, #1
 8015a92:	105b      	asrs	r3, r3, #1
 8015a94:	b29a      	uxth	r2, r3
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015aa0:	699b      	ldr	r3, [r3, #24]
 8015aa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015aa6:	d11e      	bne.n	8015ae6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015aae:	b29b      	uxth	r3, r3
 8015ab0:	3303      	adds	r3, #3
 8015ab2:	109b      	asrs	r3, r3, #2
 8015ab4:	b29a      	uxth	r2, r3
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015abc:	e013      	b.n	8015ae6 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	68db      	ldr	r3, [r3, #12]
 8015ac2:	2b0f      	cmp	r3, #15
 8015ac4:	d80f      	bhi.n	8015ae6 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015aca:	699b      	ldr	r3, [r3, #24]
 8015acc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015ad0:	d109      	bne.n	8015ae6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015ad8:	b29b      	uxth	r3, r3
 8015ada:	3301      	adds	r3, #1
 8015adc:	105b      	asrs	r3, r3, #1
 8015ade:	b29a      	uxth	r2, r3
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015aea:	4a40      	ldr	r2, [pc, #256]	@ (8015bec <HAL_SPI_Transmit_DMA+0x274>)
 8015aec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015af2:	4a3f      	ldr	r2, [pc, #252]	@ (8015bf0 <HAL_SPI_Transmit_DMA+0x278>)
 8015af4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015afa:	4a3e      	ldr	r2, [pc, #248]	@ (8015bf4 <HAL_SPI_Transmit_DMA+0x27c>)
 8015afc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b02:	2200      	movs	r2, #0
 8015b04:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	689a      	ldr	r2, [r3, #8]
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015b14:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015b1e:	4619      	mov	r1, r3
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	3320      	adds	r3, #32
 8015b26:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015b2e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015b30:	f7f6 f972 	bl	800be18 <HAL_DMA_Start_IT>
 8015b34:	4603      	mov	r3, r0
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d011      	beq.n	8015b5e <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015b40:	f043 0210 	orr.w	r2, r3, #16
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	2201      	movs	r2, #1
 8015b4e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	2200      	movs	r2, #0
 8015b56:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	e042      	b.n	8015be4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b62:	69db      	ldr	r3, [r3, #28]
 8015b64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015b68:	d108      	bne.n	8015b7c <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	6859      	ldr	r1, [r3, #4]
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	681a      	ldr	r2, [r3, #0]
 8015b74:	4b20      	ldr	r3, [pc, #128]	@ (8015bf8 <HAL_SPI_Transmit_DMA+0x280>)
 8015b76:	400b      	ands	r3, r1
 8015b78:	6053      	str	r3, [r2, #4]
 8015b7a:	e009      	b.n	8015b90 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	685a      	ldr	r2, [r3, #4]
 8015b82:	4b1d      	ldr	r3, [pc, #116]	@ (8015bf8 <HAL_SPI_Transmit_DMA+0x280>)
 8015b84:	4013      	ands	r3, r2
 8015b86:	88f9      	ldrh	r1, [r7, #6]
 8015b88:	68fa      	ldr	r2, [r7, #12]
 8015b8a:	6812      	ldr	r2, [r2, #0]
 8015b8c:	430b      	orrs	r3, r1
 8015b8e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	689a      	ldr	r2, [r3, #8]
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015b9e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	691a      	ldr	r2, [r3, #16]
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8015bae:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	681a      	ldr	r2, [r3, #0]
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	f042 0201 	orr.w	r2, r2, #1
 8015bbe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	685b      	ldr	r3, [r3, #4]
 8015bc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015bc8:	d107      	bne.n	8015bda <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	681a      	ldr	r2, [r3, #0]
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015bd8:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	2200      	movs	r2, #0
 8015bde:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8015be2:	2300      	movs	r3, #0
}
 8015be4:	4618      	mov	r0, r3
 8015be6:	3710      	adds	r7, #16
 8015be8:	46bd      	mov	sp, r7
 8015bea:	bd80      	pop	{r7, pc}
 8015bec:	08016057 	.word	0x08016057
 8015bf0:	08016011 	.word	0x08016011
 8015bf4:	08016073 	.word	0x08016073
 8015bf8:	ffff0000 	.word	0xffff0000

08015bfc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b08a      	sub	sp, #40	@ 0x28
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	691b      	ldr	r3, [r3, #16]
 8015c0a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	695b      	ldr	r3, [r3, #20]
 8015c12:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8015c14:	6a3a      	ldr	r2, [r7, #32]
 8015c16:	69fb      	ldr	r3, [r7, #28]
 8015c18:	4013      	ands	r3, r2
 8015c1a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	689b      	ldr	r3, [r3, #8]
 8015c22:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8015c24:	2300      	movs	r3, #0
 8015c26:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015c2e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	3330      	adds	r3, #48	@ 0x30
 8015c36:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8015c38:	69fb      	ldr	r3, [r7, #28]
 8015c3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d010      	beq.n	8015c64 <HAL_SPI_IRQHandler+0x68>
 8015c42:	6a3b      	ldr	r3, [r7, #32]
 8015c44:	f003 0308 	and.w	r3, r3, #8
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d00b      	beq.n	8015c64 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	699a      	ldr	r2, [r3, #24]
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015c5a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8015c5c:	6878      	ldr	r0, [r7, #4]
 8015c5e:	f000 f9cd 	bl	8015ffc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8015c62:	e192      	b.n	8015f8a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015c64:	69bb      	ldr	r3, [r7, #24]
 8015c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d113      	bne.n	8015c96 <HAL_SPI_IRQHandler+0x9a>
 8015c6e:	69bb      	ldr	r3, [r7, #24]
 8015c70:	f003 0320 	and.w	r3, r3, #32
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d10e      	bne.n	8015c96 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8015c78:	69bb      	ldr	r3, [r7, #24]
 8015c7a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d009      	beq.n	8015c96 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015c86:	6878      	ldr	r0, [r7, #4]
 8015c88:	4798      	blx	r3
    hspi->RxISR(hspi);
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015c8e:	6878      	ldr	r0, [r7, #4]
 8015c90:	4798      	blx	r3
    handled = 1UL;
 8015c92:	2301      	movs	r3, #1
 8015c94:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015c96:	69bb      	ldr	r3, [r7, #24]
 8015c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d10f      	bne.n	8015cc0 <HAL_SPI_IRQHandler+0xc4>
 8015ca0:	69bb      	ldr	r3, [r7, #24]
 8015ca2:	f003 0301 	and.w	r3, r3, #1
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d00a      	beq.n	8015cc0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015caa:	69bb      	ldr	r3, [r7, #24]
 8015cac:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d105      	bne.n	8015cc0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	4798      	blx	r3
    handled = 1UL;
 8015cbc:	2301      	movs	r3, #1
 8015cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015cc0:	69bb      	ldr	r3, [r7, #24]
 8015cc2:	f003 0320 	and.w	r3, r3, #32
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d10f      	bne.n	8015cea <HAL_SPI_IRQHandler+0xee>
 8015cca:	69bb      	ldr	r3, [r7, #24]
 8015ccc:	f003 0302 	and.w	r3, r3, #2
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d00a      	beq.n	8015cea <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015cd4:	69bb      	ldr	r3, [r7, #24]
 8015cd6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d105      	bne.n	8015cea <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015ce2:	6878      	ldr	r0, [r7, #4]
 8015ce4:	4798      	blx	r3
    handled = 1UL;
 8015ce6:	2301      	movs	r3, #1
 8015ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8015cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	f040 8147 	bne.w	8015f80 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8015cf2:	69bb      	ldr	r3, [r7, #24]
 8015cf4:	f003 0308 	and.w	r3, r3, #8
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	f000 808b 	beq.w	8015e14 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	699a      	ldr	r2, [r3, #24]
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	f042 0208 	orr.w	r2, r2, #8
 8015d0c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	699a      	ldr	r2, [r3, #24]
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	f042 0210 	orr.w	r2, r2, #16
 8015d1c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	699a      	ldr	r2, [r3, #24]
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015d2c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	691a      	ldr	r2, [r3, #16]
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	f022 0208 	bic.w	r2, r2, #8
 8015d3c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	689b      	ldr	r3, [r3, #8]
 8015d44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d13d      	bne.n	8015dc8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8015d4c:	e036      	b.n	8015dbc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	68db      	ldr	r3, [r3, #12]
 8015d52:	2b0f      	cmp	r3, #15
 8015d54:	d90b      	bls.n	8015d6e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	681a      	ldr	r2, [r3, #0]
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015d5e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015d60:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015d66:	1d1a      	adds	r2, r3, #4
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	665a      	str	r2, [r3, #100]	@ 0x64
 8015d6c:	e01d      	b.n	8015daa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	68db      	ldr	r3, [r3, #12]
 8015d72:	2b07      	cmp	r3, #7
 8015d74:	d90b      	bls.n	8015d8e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015d7a:	68fa      	ldr	r2, [r7, #12]
 8015d7c:	8812      	ldrh	r2, [r2, #0]
 8015d7e:	b292      	uxth	r2, r2
 8015d80:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015d86:	1c9a      	adds	r2, r3, #2
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	665a      	str	r2, [r3, #100]	@ 0x64
 8015d8c:	e00d      	b.n	8015daa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015d9a:	7812      	ldrb	r2, [r2, #0]
 8015d9c:	b2d2      	uxtb	r2, r2
 8015d9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015da4:	1c5a      	adds	r2, r3, #1
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015db0:	b29b      	uxth	r3, r3
 8015db2:	3b01      	subs	r3, #1
 8015db4:	b29a      	uxth	r2, r3
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015dc2:	b29b      	uxth	r3, r3
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d1c2      	bne.n	8015d4e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8015dc8:	6878      	ldr	r0, [r7, #4]
 8015dca:	f000 f98f 	bl	80160ec <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	2201      	movs	r2, #1
 8015dd2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d003      	beq.n	8015de8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8015de0:	6878      	ldr	r0, [r7, #4]
 8015de2:	f000 f901 	bl	8015fe8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8015de6:	e0d0      	b.n	8015f8a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8015de8:	7cfb      	ldrb	r3, [r7, #19]
 8015dea:	2b05      	cmp	r3, #5
 8015dec:	d103      	bne.n	8015df6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8015dee:	6878      	ldr	r0, [r7, #4]
 8015df0:	f000 f8e6 	bl	8015fc0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8015df4:	e0c6      	b.n	8015f84 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8015df6:	7cfb      	ldrb	r3, [r7, #19]
 8015df8:	2b04      	cmp	r3, #4
 8015dfa:	d103      	bne.n	8015e04 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8015dfc:	6878      	ldr	r0, [r7, #4]
 8015dfe:	f000 f8d5 	bl	8015fac <HAL_SPI_RxCpltCallback>
    return;
 8015e02:	e0bf      	b.n	8015f84 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8015e04:	7cfb      	ldrb	r3, [r7, #19]
 8015e06:	2b03      	cmp	r3, #3
 8015e08:	f040 80bc 	bne.w	8015f84 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8015e0c:	6878      	ldr	r0, [r7, #4]
 8015e0e:	f000 f8c3 	bl	8015f98 <HAL_SPI_TxCpltCallback>
    return;
 8015e12:	e0b7      	b.n	8015f84 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8015e14:	69bb      	ldr	r3, [r7, #24]
 8015e16:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	f000 80b5 	beq.w	8015f8a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8015e20:	69bb      	ldr	r3, [r7, #24]
 8015e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d00f      	beq.n	8015e4a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e30:	f043 0204 	orr.w	r2, r3, #4
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	699a      	ldr	r2, [r3, #24]
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015e48:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8015e4a:	69bb      	ldr	r3, [r7, #24]
 8015e4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d00f      	beq.n	8015e74 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e5a:	f043 0201 	orr.w	r2, r3, #1
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	699a      	ldr	r2, [r3, #24]
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015e72:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8015e74:	69bb      	ldr	r3, [r7, #24]
 8015e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d00f      	beq.n	8015e9e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e84:	f043 0208 	orr.w	r2, r3, #8
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	699a      	ldr	r2, [r3, #24]
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015e9c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8015e9e:	69bb      	ldr	r3, [r7, #24]
 8015ea0:	f003 0320 	and.w	r3, r3, #32
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d00f      	beq.n	8015ec8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015eae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	699a      	ldr	r2, [r3, #24]
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	f042 0220 	orr.w	r2, r2, #32
 8015ec6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d05a      	beq.n	8015f88 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	681a      	ldr	r2, [r3, #0]
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	f022 0201 	bic.w	r2, r2, #1
 8015ee0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	6919      	ldr	r1, [r3, #16]
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	681a      	ldr	r2, [r3, #0]
 8015eec:	4b28      	ldr	r3, [pc, #160]	@ (8015f90 <HAL_SPI_IRQHandler+0x394>)
 8015eee:	400b      	ands	r3, r1
 8015ef0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015ef2:	697b      	ldr	r3, [r7, #20]
 8015ef4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015ef8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8015efc:	d138      	bne.n	8015f70 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	689a      	ldr	r2, [r3, #8]
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015f0c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d013      	beq.n	8015f3e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8015f94 <HAL_SPI_IRQHandler+0x398>)
 8015f1c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f22:	4618      	mov	r0, r3
 8015f24:	f7f6 fd00 	bl	800c928 <HAL_DMA_Abort_IT>
 8015f28:	4603      	mov	r3, r0
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d007      	beq.n	8015f3e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d020      	beq.n	8015f88 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015f4a:	4a12      	ldr	r2, [pc, #72]	@ (8015f94 <HAL_SPI_IRQHandler+0x398>)
 8015f4c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015f52:	4618      	mov	r0, r3
 8015f54:	f7f6 fce8 	bl	800c928 <HAL_DMA_Abort_IT>
 8015f58:	4603      	mov	r3, r0
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d014      	beq.n	8015f88 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8015f6e:	e00b      	b.n	8015f88 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	2201      	movs	r2, #1
 8015f74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8015f78:	6878      	ldr	r0, [r7, #4]
 8015f7a:	f000 f835 	bl	8015fe8 <HAL_SPI_ErrorCallback>
    return;
 8015f7e:	e003      	b.n	8015f88 <HAL_SPI_IRQHandler+0x38c>
    return;
 8015f80:	bf00      	nop
 8015f82:	e002      	b.n	8015f8a <HAL_SPI_IRQHandler+0x38e>
    return;
 8015f84:	bf00      	nop
 8015f86:	e000      	b.n	8015f8a <HAL_SPI_IRQHandler+0x38e>
    return;
 8015f88:	bf00      	nop
  }
}
 8015f8a:	3728      	adds	r7, #40	@ 0x28
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}
 8015f90:	fffffc94 	.word	0xfffffc94
 8015f94:	080160b9 	.word	0x080160b9

08015f98 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015f98:	b480      	push	{r7}
 8015f9a:	b083      	sub	sp, #12
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8015fa0:	bf00      	nop
 8015fa2:	370c      	adds	r7, #12
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015faa:	4770      	bx	lr

08015fac <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015fac:	b480      	push	{r7}
 8015fae:	b083      	sub	sp, #12
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8015fb4:	bf00      	nop
 8015fb6:	370c      	adds	r7, #12
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fbe:	4770      	bx	lr

08015fc0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015fc0:	b480      	push	{r7}
 8015fc2:	b083      	sub	sp, #12
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8015fc8:	bf00      	nop
 8015fca:	370c      	adds	r7, #12
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd2:	4770      	bx	lr

08015fd4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015fd4:	b480      	push	{r7}
 8015fd6:	b083      	sub	sp, #12
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8015fdc:	bf00      	nop
 8015fde:	370c      	adds	r7, #12
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe6:	4770      	bx	lr

08015fe8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015fe8:	b480      	push	{r7}
 8015fea:	b083      	sub	sp, #12
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8015ff0:	bf00      	nop
 8015ff2:	370c      	adds	r7, #12
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ffa:	4770      	bx	lr

08015ffc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015ffc:	b480      	push	{r7}
 8015ffe:	b083      	sub	sp, #12
 8016000:	af00      	add	r7, sp, #0
 8016002:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8016004:	bf00      	nop
 8016006:	370c      	adds	r7, #12
 8016008:	46bd      	mov	sp, r7
 801600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801600e:	4770      	bx	lr

08016010 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b084      	sub	sp, #16
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801601c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8016024:	b2db      	uxtb	r3, r3
 8016026:	2b07      	cmp	r3, #7
 8016028:	d011      	beq.n	801604e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801602e:	69db      	ldr	r3, [r3, #28]
 8016030:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016034:	d103      	bne.n	801603e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8016036:	68f8      	ldr	r0, [r7, #12]
 8016038:	f7ff ffae 	bl	8015f98 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 801603c:	e007      	b.n	801604e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	691a      	ldr	r2, [r3, #16]
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	f042 0208 	orr.w	r2, r2, #8
 801604c:	611a      	str	r2, [r3, #16]
}
 801604e:	bf00      	nop
 8016050:	3710      	adds	r7, #16
 8016052:	46bd      	mov	sp, r7
 8016054:	bd80      	pop	{r7, pc}

08016056 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016056:	b580      	push	{r7, lr}
 8016058:	b084      	sub	sp, #16
 801605a:	af00      	add	r7, sp, #0
 801605c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016062:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8016064:	68f8      	ldr	r0, [r7, #12]
 8016066:	f7ff ffb5 	bl	8015fd4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801606a:	bf00      	nop
 801606c:	3710      	adds	r7, #16
 801606e:	46bd      	mov	sp, r7
 8016070:	bd80      	pop	{r7, pc}

08016072 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8016072:	b580      	push	{r7, lr}
 8016074:	b084      	sub	sp, #16
 8016076:	af00      	add	r7, sp, #0
 8016078:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801607e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f7f7 fdcf 	bl	800dc24 <HAL_DMA_GetError>
 8016086:	4603      	mov	r3, r0
 8016088:	2b02      	cmp	r3, #2
 801608a:	d011      	beq.n	80160b0 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 801608c:	68f8      	ldr	r0, [r7, #12]
 801608e:	f000 f82d 	bl	80160ec <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016098:	f043 0210 	orr.w	r2, r3, #16
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	2201      	movs	r2, #1
 80160a6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80160aa:	68f8      	ldr	r0, [r7, #12]
 80160ac:	f7ff ff9c 	bl	8015fe8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80160b0:	bf00      	nop
 80160b2:	3710      	adds	r7, #16
 80160b4:	46bd      	mov	sp, r7
 80160b6:	bd80      	pop	{r7, pc}

080160b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b084      	sub	sp, #16
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	2200      	movs	r2, #0
 80160ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	2200      	movs	r2, #0
 80160d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	2201      	movs	r2, #1
 80160da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80160de:	68f8      	ldr	r0, [r7, #12]
 80160e0:	f7ff ff82 	bl	8015fe8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80160e4:	bf00      	nop
 80160e6:	3710      	adds	r7, #16
 80160e8:	46bd      	mov	sp, r7
 80160ea:	bd80      	pop	{r7, pc}

080160ec <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80160ec:	b480      	push	{r7}
 80160ee:	b085      	sub	sp, #20
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	695b      	ldr	r3, [r3, #20]
 80160fa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	699a      	ldr	r2, [r3, #24]
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	f042 0208 	orr.w	r2, r2, #8
 801610a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	699a      	ldr	r2, [r3, #24]
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	f042 0210 	orr.w	r2, r2, #16
 801611a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	681a      	ldr	r2, [r3, #0]
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	f022 0201 	bic.w	r2, r2, #1
 801612a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	6919      	ldr	r1, [r3, #16]
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	681a      	ldr	r2, [r3, #0]
 8016136:	4b3c      	ldr	r3, [pc, #240]	@ (8016228 <SPI_CloseTransfer+0x13c>)
 8016138:	400b      	ands	r3, r1
 801613a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	689a      	ldr	r2, [r3, #8]
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801614a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8016152:	b2db      	uxtb	r3, r3
 8016154:	2b04      	cmp	r3, #4
 8016156:	d014      	beq.n	8016182 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	f003 0320 	and.w	r3, r3, #32
 801615e:	2b00      	cmp	r3, #0
 8016160:	d00f      	beq.n	8016182 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016168:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	699a      	ldr	r2, [r3, #24]
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	f042 0220 	orr.w	r2, r2, #32
 8016180:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8016188:	b2db      	uxtb	r3, r3
 801618a:	2b03      	cmp	r3, #3
 801618c:	d014      	beq.n	80161b8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016194:	2b00      	cmp	r3, #0
 8016196:	d00f      	beq.n	80161b8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801619e:	f043 0204 	orr.w	r2, r3, #4
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	699a      	ldr	r2, [r3, #24]
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80161b6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d00f      	beq.n	80161e2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80161c8:	f043 0201 	orr.w	r2, r3, #1
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	699a      	ldr	r2, [r3, #24]
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80161e0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d00f      	beq.n	801620c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80161f2:	f043 0208 	orr.w	r2, r3, #8
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	699a      	ldr	r2, [r3, #24]
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801620a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	2200      	movs	r2, #0
 8016210:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2200      	movs	r2, #0
 8016218:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 801621c:	bf00      	nop
 801621e:	3714      	adds	r7, #20
 8016220:	46bd      	mov	sp, r7
 8016222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016226:	4770      	bx	lr
 8016228:	fffffc90 	.word	0xfffffc90

0801622c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801622c:	b580      	push	{r7, lr}
 801622e:	b084      	sub	sp, #16
 8016230:	af00      	add	r7, sp, #0
 8016232:	60f8      	str	r0, [r7, #12]
 8016234:	60b9      	str	r1, [r7, #8]
 8016236:	603b      	str	r3, [r7, #0]
 8016238:	4613      	mov	r3, r2
 801623a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 801623c:	e010      	b.n	8016260 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801623e:	f7f3 f95d 	bl	80094fc <HAL_GetTick>
 8016242:	4602      	mov	r2, r0
 8016244:	69bb      	ldr	r3, [r7, #24]
 8016246:	1ad3      	subs	r3, r2, r3
 8016248:	683a      	ldr	r2, [r7, #0]
 801624a:	429a      	cmp	r2, r3
 801624c:	d803      	bhi.n	8016256 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801624e:	683b      	ldr	r3, [r7, #0]
 8016250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016254:	d102      	bne.n	801625c <SPI_WaitOnFlagUntilTimeout+0x30>
 8016256:	683b      	ldr	r3, [r7, #0]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d101      	bne.n	8016260 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 801625c:	2303      	movs	r3, #3
 801625e:	e00f      	b.n	8016280 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	695a      	ldr	r2, [r3, #20]
 8016266:	68bb      	ldr	r3, [r7, #8]
 8016268:	4013      	ands	r3, r2
 801626a:	68ba      	ldr	r2, [r7, #8]
 801626c:	429a      	cmp	r2, r3
 801626e:	bf0c      	ite	eq
 8016270:	2301      	moveq	r3, #1
 8016272:	2300      	movne	r3, #0
 8016274:	b2db      	uxtb	r3, r3
 8016276:	461a      	mov	r2, r3
 8016278:	79fb      	ldrb	r3, [r7, #7]
 801627a:	429a      	cmp	r2, r3
 801627c:	d0df      	beq.n	801623e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801627e:	2300      	movs	r3, #0
}
 8016280:	4618      	mov	r0, r3
 8016282:	3710      	adds	r7, #16
 8016284:	46bd      	mov	sp, r7
 8016286:	bd80      	pop	{r7, pc}

08016288 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8016288:	b480      	push	{r7}
 801628a:	b085      	sub	sp, #20
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016294:	095b      	lsrs	r3, r3, #5
 8016296:	3301      	adds	r3, #1
 8016298:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	68db      	ldr	r3, [r3, #12]
 801629e:	3301      	adds	r3, #1
 80162a0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80162a2:	68bb      	ldr	r3, [r7, #8]
 80162a4:	3307      	adds	r3, #7
 80162a6:	08db      	lsrs	r3, r3, #3
 80162a8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80162aa:	68bb      	ldr	r3, [r7, #8]
 80162ac:	68fa      	ldr	r2, [r7, #12]
 80162ae:	fb02 f303 	mul.w	r3, r2, r3
}
 80162b2:	4618      	mov	r0, r3
 80162b4:	3714      	adds	r7, #20
 80162b6:	46bd      	mov	sp, r7
 80162b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162bc:	4770      	bx	lr

080162be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80162be:	b580      	push	{r7, lr}
 80162c0:	b082      	sub	sp, #8
 80162c2:	af00      	add	r7, sp, #0
 80162c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d101      	bne.n	80162d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80162cc:	2301      	movs	r3, #1
 80162ce:	e049      	b.n	8016364 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80162d6:	b2db      	uxtb	r3, r3
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d106      	bne.n	80162ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	2200      	movs	r2, #0
 80162e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80162e4:	6878      	ldr	r0, [r7, #4]
 80162e6:	f7f2 ff13 	bl	8009110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	2202      	movs	r2, #2
 80162ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	681a      	ldr	r2, [r3, #0]
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	3304      	adds	r3, #4
 80162fa:	4619      	mov	r1, r3
 80162fc:	4610      	mov	r0, r2
 80162fe:	f000 fedb 	bl	80170b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	2201      	movs	r2, #1
 8016306:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	2201      	movs	r2, #1
 801630e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	2201      	movs	r2, #1
 8016316:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	2201      	movs	r2, #1
 801631e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	2201      	movs	r2, #1
 8016326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	2201      	movs	r2, #1
 801632e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	2201      	movs	r2, #1
 8016336:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	2201      	movs	r2, #1
 801633e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	2201      	movs	r2, #1
 8016346:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	2201      	movs	r2, #1
 801634e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	2201      	movs	r2, #1
 8016356:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	2201      	movs	r2, #1
 801635e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016362:	2300      	movs	r3, #0
}
 8016364:	4618      	mov	r0, r3
 8016366:	3708      	adds	r7, #8
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}

0801636c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801636c:	b480      	push	{r7}
 801636e:	b085      	sub	sp, #20
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801637a:	b2db      	uxtb	r3, r3
 801637c:	2b01      	cmp	r3, #1
 801637e:	d001      	beq.n	8016384 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8016380:	2301      	movs	r3, #1
 8016382:	e056      	b.n	8016432 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	2202      	movs	r2, #2
 8016388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	4a2b      	ldr	r2, [pc, #172]	@ (8016440 <HAL_TIM_Base_Start+0xd4>)
 8016392:	4293      	cmp	r3, r2
 8016394:	d02c      	beq.n	80163f0 <HAL_TIM_Base_Start+0x84>
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801639e:	d027      	beq.n	80163f0 <HAL_TIM_Base_Start+0x84>
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	4a27      	ldr	r2, [pc, #156]	@ (8016444 <HAL_TIM_Base_Start+0xd8>)
 80163a6:	4293      	cmp	r3, r2
 80163a8:	d022      	beq.n	80163f0 <HAL_TIM_Base_Start+0x84>
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	4a26      	ldr	r2, [pc, #152]	@ (8016448 <HAL_TIM_Base_Start+0xdc>)
 80163b0:	4293      	cmp	r3, r2
 80163b2:	d01d      	beq.n	80163f0 <HAL_TIM_Base_Start+0x84>
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	4a24      	ldr	r2, [pc, #144]	@ (801644c <HAL_TIM_Base_Start+0xe0>)
 80163ba:	4293      	cmp	r3, r2
 80163bc:	d018      	beq.n	80163f0 <HAL_TIM_Base_Start+0x84>
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	4a23      	ldr	r2, [pc, #140]	@ (8016450 <HAL_TIM_Base_Start+0xe4>)
 80163c4:	4293      	cmp	r3, r2
 80163c6:	d013      	beq.n	80163f0 <HAL_TIM_Base_Start+0x84>
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	4a21      	ldr	r2, [pc, #132]	@ (8016454 <HAL_TIM_Base_Start+0xe8>)
 80163ce:	4293      	cmp	r3, r2
 80163d0:	d00e      	beq.n	80163f0 <HAL_TIM_Base_Start+0x84>
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	4a20      	ldr	r2, [pc, #128]	@ (8016458 <HAL_TIM_Base_Start+0xec>)
 80163d8:	4293      	cmp	r3, r2
 80163da:	d009      	beq.n	80163f0 <HAL_TIM_Base_Start+0x84>
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	4a1e      	ldr	r2, [pc, #120]	@ (801645c <HAL_TIM_Base_Start+0xf0>)
 80163e2:	4293      	cmp	r3, r2
 80163e4:	d004      	beq.n	80163f0 <HAL_TIM_Base_Start+0x84>
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	4a1d      	ldr	r2, [pc, #116]	@ (8016460 <HAL_TIM_Base_Start+0xf4>)
 80163ec:	4293      	cmp	r3, r2
 80163ee:	d115      	bne.n	801641c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	689a      	ldr	r2, [r3, #8]
 80163f6:	4b1b      	ldr	r3, [pc, #108]	@ (8016464 <HAL_TIM_Base_Start+0xf8>)
 80163f8:	4013      	ands	r3, r2
 80163fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	2b06      	cmp	r3, #6
 8016400:	d015      	beq.n	801642e <HAL_TIM_Base_Start+0xc2>
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016408:	d011      	beq.n	801642e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	681a      	ldr	r2, [r3, #0]
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	f042 0201 	orr.w	r2, r2, #1
 8016418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801641a:	e008      	b.n	801642e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	681a      	ldr	r2, [r3, #0]
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	f042 0201 	orr.w	r2, r2, #1
 801642a:	601a      	str	r2, [r3, #0]
 801642c:	e000      	b.n	8016430 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801642e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016430:	2300      	movs	r3, #0
}
 8016432:	4618      	mov	r0, r3
 8016434:	3714      	adds	r7, #20
 8016436:	46bd      	mov	sp, r7
 8016438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801643c:	4770      	bx	lr
 801643e:	bf00      	nop
 8016440:	40010000 	.word	0x40010000
 8016444:	40000400 	.word	0x40000400
 8016448:	40000800 	.word	0x40000800
 801644c:	40000c00 	.word	0x40000c00
 8016450:	40010400 	.word	0x40010400
 8016454:	40001800 	.word	0x40001800
 8016458:	40014000 	.word	0x40014000
 801645c:	4000e000 	.word	0x4000e000
 8016460:	4000e400 	.word	0x4000e400
 8016464:	00010007 	.word	0x00010007

08016468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8016468:	b480      	push	{r7}
 801646a:	b085      	sub	sp, #20
 801646c:	af00      	add	r7, sp, #0
 801646e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016476:	b2db      	uxtb	r3, r3
 8016478:	2b01      	cmp	r3, #1
 801647a:	d001      	beq.n	8016480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801647c:	2301      	movs	r3, #1
 801647e:	e05e      	b.n	801653e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	2202      	movs	r2, #2
 8016484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	68da      	ldr	r2, [r3, #12]
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	f042 0201 	orr.w	r2, r2, #1
 8016496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	4a2b      	ldr	r2, [pc, #172]	@ (801654c <HAL_TIM_Base_Start_IT+0xe4>)
 801649e:	4293      	cmp	r3, r2
 80164a0:	d02c      	beq.n	80164fc <HAL_TIM_Base_Start_IT+0x94>
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80164aa:	d027      	beq.n	80164fc <HAL_TIM_Base_Start_IT+0x94>
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	4a27      	ldr	r2, [pc, #156]	@ (8016550 <HAL_TIM_Base_Start_IT+0xe8>)
 80164b2:	4293      	cmp	r3, r2
 80164b4:	d022      	beq.n	80164fc <HAL_TIM_Base_Start_IT+0x94>
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	4a26      	ldr	r2, [pc, #152]	@ (8016554 <HAL_TIM_Base_Start_IT+0xec>)
 80164bc:	4293      	cmp	r3, r2
 80164be:	d01d      	beq.n	80164fc <HAL_TIM_Base_Start_IT+0x94>
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	4a24      	ldr	r2, [pc, #144]	@ (8016558 <HAL_TIM_Base_Start_IT+0xf0>)
 80164c6:	4293      	cmp	r3, r2
 80164c8:	d018      	beq.n	80164fc <HAL_TIM_Base_Start_IT+0x94>
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	4a23      	ldr	r2, [pc, #140]	@ (801655c <HAL_TIM_Base_Start_IT+0xf4>)
 80164d0:	4293      	cmp	r3, r2
 80164d2:	d013      	beq.n	80164fc <HAL_TIM_Base_Start_IT+0x94>
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	4a21      	ldr	r2, [pc, #132]	@ (8016560 <HAL_TIM_Base_Start_IT+0xf8>)
 80164da:	4293      	cmp	r3, r2
 80164dc:	d00e      	beq.n	80164fc <HAL_TIM_Base_Start_IT+0x94>
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	4a20      	ldr	r2, [pc, #128]	@ (8016564 <HAL_TIM_Base_Start_IT+0xfc>)
 80164e4:	4293      	cmp	r3, r2
 80164e6:	d009      	beq.n	80164fc <HAL_TIM_Base_Start_IT+0x94>
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	4a1e      	ldr	r2, [pc, #120]	@ (8016568 <HAL_TIM_Base_Start_IT+0x100>)
 80164ee:	4293      	cmp	r3, r2
 80164f0:	d004      	beq.n	80164fc <HAL_TIM_Base_Start_IT+0x94>
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	4a1d      	ldr	r2, [pc, #116]	@ (801656c <HAL_TIM_Base_Start_IT+0x104>)
 80164f8:	4293      	cmp	r3, r2
 80164fa:	d115      	bne.n	8016528 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	689a      	ldr	r2, [r3, #8]
 8016502:	4b1b      	ldr	r3, [pc, #108]	@ (8016570 <HAL_TIM_Base_Start_IT+0x108>)
 8016504:	4013      	ands	r3, r2
 8016506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	2b06      	cmp	r3, #6
 801650c:	d015      	beq.n	801653a <HAL_TIM_Base_Start_IT+0xd2>
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016514:	d011      	beq.n	801653a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	681a      	ldr	r2, [r3, #0]
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	f042 0201 	orr.w	r2, r2, #1
 8016524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016526:	e008      	b.n	801653a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	681a      	ldr	r2, [r3, #0]
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	f042 0201 	orr.w	r2, r2, #1
 8016536:	601a      	str	r2, [r3, #0]
 8016538:	e000      	b.n	801653c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801653a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801653c:	2300      	movs	r3, #0
}
 801653e:	4618      	mov	r0, r3
 8016540:	3714      	adds	r7, #20
 8016542:	46bd      	mov	sp, r7
 8016544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016548:	4770      	bx	lr
 801654a:	bf00      	nop
 801654c:	40010000 	.word	0x40010000
 8016550:	40000400 	.word	0x40000400
 8016554:	40000800 	.word	0x40000800
 8016558:	40000c00 	.word	0x40000c00
 801655c:	40010400 	.word	0x40010400
 8016560:	40001800 	.word	0x40001800
 8016564:	40014000 	.word	0x40014000
 8016568:	4000e000 	.word	0x4000e000
 801656c:	4000e400 	.word	0x4000e400
 8016570:	00010007 	.word	0x00010007

08016574 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b082      	sub	sp, #8
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d101      	bne.n	8016586 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8016582:	2301      	movs	r3, #1
 8016584:	e049      	b.n	801661a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801658c:	b2db      	uxtb	r3, r3
 801658e:	2b00      	cmp	r3, #0
 8016590:	d106      	bne.n	80165a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	2200      	movs	r2, #0
 8016596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801659a:	6878      	ldr	r0, [r7, #4]
 801659c:	f7f2 fd2e 	bl	8008ffc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	2202      	movs	r2, #2
 80165a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	681a      	ldr	r2, [r3, #0]
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	3304      	adds	r3, #4
 80165b0:	4619      	mov	r1, r3
 80165b2:	4610      	mov	r0, r2
 80165b4:	f000 fd80 	bl	80170b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	2201      	movs	r2, #1
 80165bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	2201      	movs	r2, #1
 80165c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2201      	movs	r2, #1
 80165cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	2201      	movs	r2, #1
 80165d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	2201      	movs	r2, #1
 80165dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2201      	movs	r2, #1
 80165e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	2201      	movs	r2, #1
 80165ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	2201      	movs	r2, #1
 80165f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2201      	movs	r2, #1
 80165fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	2201      	movs	r2, #1
 8016604:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	2201      	movs	r2, #1
 801660c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	2201      	movs	r2, #1
 8016614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016618:	2300      	movs	r3, #0
}
 801661a:	4618      	mov	r0, r3
 801661c:	3708      	adds	r7, #8
 801661e:	46bd      	mov	sp, r7
 8016620:	bd80      	pop	{r7, pc}
	...

08016624 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b084      	sub	sp, #16
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
 801662c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801662e:	683b      	ldr	r3, [r7, #0]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d109      	bne.n	8016648 <HAL_TIM_PWM_Start+0x24>
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801663a:	b2db      	uxtb	r3, r3
 801663c:	2b01      	cmp	r3, #1
 801663e:	bf14      	ite	ne
 8016640:	2301      	movne	r3, #1
 8016642:	2300      	moveq	r3, #0
 8016644:	b2db      	uxtb	r3, r3
 8016646:	e03c      	b.n	80166c2 <HAL_TIM_PWM_Start+0x9e>
 8016648:	683b      	ldr	r3, [r7, #0]
 801664a:	2b04      	cmp	r3, #4
 801664c:	d109      	bne.n	8016662 <HAL_TIM_PWM_Start+0x3e>
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8016654:	b2db      	uxtb	r3, r3
 8016656:	2b01      	cmp	r3, #1
 8016658:	bf14      	ite	ne
 801665a:	2301      	movne	r3, #1
 801665c:	2300      	moveq	r3, #0
 801665e:	b2db      	uxtb	r3, r3
 8016660:	e02f      	b.n	80166c2 <HAL_TIM_PWM_Start+0x9e>
 8016662:	683b      	ldr	r3, [r7, #0]
 8016664:	2b08      	cmp	r3, #8
 8016666:	d109      	bne.n	801667c <HAL_TIM_PWM_Start+0x58>
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801666e:	b2db      	uxtb	r3, r3
 8016670:	2b01      	cmp	r3, #1
 8016672:	bf14      	ite	ne
 8016674:	2301      	movne	r3, #1
 8016676:	2300      	moveq	r3, #0
 8016678:	b2db      	uxtb	r3, r3
 801667a:	e022      	b.n	80166c2 <HAL_TIM_PWM_Start+0x9e>
 801667c:	683b      	ldr	r3, [r7, #0]
 801667e:	2b0c      	cmp	r3, #12
 8016680:	d109      	bne.n	8016696 <HAL_TIM_PWM_Start+0x72>
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016688:	b2db      	uxtb	r3, r3
 801668a:	2b01      	cmp	r3, #1
 801668c:	bf14      	ite	ne
 801668e:	2301      	movne	r3, #1
 8016690:	2300      	moveq	r3, #0
 8016692:	b2db      	uxtb	r3, r3
 8016694:	e015      	b.n	80166c2 <HAL_TIM_PWM_Start+0x9e>
 8016696:	683b      	ldr	r3, [r7, #0]
 8016698:	2b10      	cmp	r3, #16
 801669a:	d109      	bne.n	80166b0 <HAL_TIM_PWM_Start+0x8c>
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80166a2:	b2db      	uxtb	r3, r3
 80166a4:	2b01      	cmp	r3, #1
 80166a6:	bf14      	ite	ne
 80166a8:	2301      	movne	r3, #1
 80166aa:	2300      	moveq	r3, #0
 80166ac:	b2db      	uxtb	r3, r3
 80166ae:	e008      	b.n	80166c2 <HAL_TIM_PWM_Start+0x9e>
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80166b6:	b2db      	uxtb	r3, r3
 80166b8:	2b01      	cmp	r3, #1
 80166ba:	bf14      	ite	ne
 80166bc:	2301      	movne	r3, #1
 80166be:	2300      	moveq	r3, #0
 80166c0:	b2db      	uxtb	r3, r3
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d001      	beq.n	80166ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80166c6:	2301      	movs	r3, #1
 80166c8:	e0ab      	b.n	8016822 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d104      	bne.n	80166da <HAL_TIM_PWM_Start+0xb6>
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	2202      	movs	r2, #2
 80166d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80166d8:	e023      	b.n	8016722 <HAL_TIM_PWM_Start+0xfe>
 80166da:	683b      	ldr	r3, [r7, #0]
 80166dc:	2b04      	cmp	r3, #4
 80166de:	d104      	bne.n	80166ea <HAL_TIM_PWM_Start+0xc6>
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	2202      	movs	r2, #2
 80166e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80166e8:	e01b      	b.n	8016722 <HAL_TIM_PWM_Start+0xfe>
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	2b08      	cmp	r3, #8
 80166ee:	d104      	bne.n	80166fa <HAL_TIM_PWM_Start+0xd6>
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	2202      	movs	r2, #2
 80166f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80166f8:	e013      	b.n	8016722 <HAL_TIM_PWM_Start+0xfe>
 80166fa:	683b      	ldr	r3, [r7, #0]
 80166fc:	2b0c      	cmp	r3, #12
 80166fe:	d104      	bne.n	801670a <HAL_TIM_PWM_Start+0xe6>
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	2202      	movs	r2, #2
 8016704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016708:	e00b      	b.n	8016722 <HAL_TIM_PWM_Start+0xfe>
 801670a:	683b      	ldr	r3, [r7, #0]
 801670c:	2b10      	cmp	r3, #16
 801670e:	d104      	bne.n	801671a <HAL_TIM_PWM_Start+0xf6>
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	2202      	movs	r2, #2
 8016714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016718:	e003      	b.n	8016722 <HAL_TIM_PWM_Start+0xfe>
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	2202      	movs	r2, #2
 801671e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	2201      	movs	r2, #1
 8016728:	6839      	ldr	r1, [r7, #0]
 801672a:	4618      	mov	r0, r3
 801672c:	f001 fa1a 	bl	8017b64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	4a3d      	ldr	r2, [pc, #244]	@ (801682c <HAL_TIM_PWM_Start+0x208>)
 8016736:	4293      	cmp	r3, r2
 8016738:	d013      	beq.n	8016762 <HAL_TIM_PWM_Start+0x13e>
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	4a3c      	ldr	r2, [pc, #240]	@ (8016830 <HAL_TIM_PWM_Start+0x20c>)
 8016740:	4293      	cmp	r3, r2
 8016742:	d00e      	beq.n	8016762 <HAL_TIM_PWM_Start+0x13e>
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	4a3a      	ldr	r2, [pc, #232]	@ (8016834 <HAL_TIM_PWM_Start+0x210>)
 801674a:	4293      	cmp	r3, r2
 801674c:	d009      	beq.n	8016762 <HAL_TIM_PWM_Start+0x13e>
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	4a39      	ldr	r2, [pc, #228]	@ (8016838 <HAL_TIM_PWM_Start+0x214>)
 8016754:	4293      	cmp	r3, r2
 8016756:	d004      	beq.n	8016762 <HAL_TIM_PWM_Start+0x13e>
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	4a37      	ldr	r2, [pc, #220]	@ (801683c <HAL_TIM_PWM_Start+0x218>)
 801675e:	4293      	cmp	r3, r2
 8016760:	d101      	bne.n	8016766 <HAL_TIM_PWM_Start+0x142>
 8016762:	2301      	movs	r3, #1
 8016764:	e000      	b.n	8016768 <HAL_TIM_PWM_Start+0x144>
 8016766:	2300      	movs	r3, #0
 8016768:	2b00      	cmp	r3, #0
 801676a:	d007      	beq.n	801677c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801677a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	4a2a      	ldr	r2, [pc, #168]	@ (801682c <HAL_TIM_PWM_Start+0x208>)
 8016782:	4293      	cmp	r3, r2
 8016784:	d02c      	beq.n	80167e0 <HAL_TIM_PWM_Start+0x1bc>
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801678e:	d027      	beq.n	80167e0 <HAL_TIM_PWM_Start+0x1bc>
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	4a2a      	ldr	r2, [pc, #168]	@ (8016840 <HAL_TIM_PWM_Start+0x21c>)
 8016796:	4293      	cmp	r3, r2
 8016798:	d022      	beq.n	80167e0 <HAL_TIM_PWM_Start+0x1bc>
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	4a29      	ldr	r2, [pc, #164]	@ (8016844 <HAL_TIM_PWM_Start+0x220>)
 80167a0:	4293      	cmp	r3, r2
 80167a2:	d01d      	beq.n	80167e0 <HAL_TIM_PWM_Start+0x1bc>
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	4a27      	ldr	r2, [pc, #156]	@ (8016848 <HAL_TIM_PWM_Start+0x224>)
 80167aa:	4293      	cmp	r3, r2
 80167ac:	d018      	beq.n	80167e0 <HAL_TIM_PWM_Start+0x1bc>
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	4a1f      	ldr	r2, [pc, #124]	@ (8016830 <HAL_TIM_PWM_Start+0x20c>)
 80167b4:	4293      	cmp	r3, r2
 80167b6:	d013      	beq.n	80167e0 <HAL_TIM_PWM_Start+0x1bc>
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	4a23      	ldr	r2, [pc, #140]	@ (801684c <HAL_TIM_PWM_Start+0x228>)
 80167be:	4293      	cmp	r3, r2
 80167c0:	d00e      	beq.n	80167e0 <HAL_TIM_PWM_Start+0x1bc>
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	4a1b      	ldr	r2, [pc, #108]	@ (8016834 <HAL_TIM_PWM_Start+0x210>)
 80167c8:	4293      	cmp	r3, r2
 80167ca:	d009      	beq.n	80167e0 <HAL_TIM_PWM_Start+0x1bc>
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	4a1f      	ldr	r2, [pc, #124]	@ (8016850 <HAL_TIM_PWM_Start+0x22c>)
 80167d2:	4293      	cmp	r3, r2
 80167d4:	d004      	beq.n	80167e0 <HAL_TIM_PWM_Start+0x1bc>
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	4a1e      	ldr	r2, [pc, #120]	@ (8016854 <HAL_TIM_PWM_Start+0x230>)
 80167dc:	4293      	cmp	r3, r2
 80167de:	d115      	bne.n	801680c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	689a      	ldr	r2, [r3, #8]
 80167e6:	4b1c      	ldr	r3, [pc, #112]	@ (8016858 <HAL_TIM_PWM_Start+0x234>)
 80167e8:	4013      	ands	r3, r2
 80167ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	2b06      	cmp	r3, #6
 80167f0:	d015      	beq.n	801681e <HAL_TIM_PWM_Start+0x1fa>
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80167f8:	d011      	beq.n	801681e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	681a      	ldr	r2, [r3, #0]
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	f042 0201 	orr.w	r2, r2, #1
 8016808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801680a:	e008      	b.n	801681e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	681a      	ldr	r2, [r3, #0]
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	f042 0201 	orr.w	r2, r2, #1
 801681a:	601a      	str	r2, [r3, #0]
 801681c:	e000      	b.n	8016820 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801681e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016820:	2300      	movs	r3, #0
}
 8016822:	4618      	mov	r0, r3
 8016824:	3710      	adds	r7, #16
 8016826:	46bd      	mov	sp, r7
 8016828:	bd80      	pop	{r7, pc}
 801682a:	bf00      	nop
 801682c:	40010000 	.word	0x40010000
 8016830:	40010400 	.word	0x40010400
 8016834:	40014000 	.word	0x40014000
 8016838:	40014400 	.word	0x40014400
 801683c:	40014800 	.word	0x40014800
 8016840:	40000400 	.word	0x40000400
 8016844:	40000800 	.word	0x40000800
 8016848:	40000c00 	.word	0x40000c00
 801684c:	40001800 	.word	0x40001800
 8016850:	4000e000 	.word	0x4000e000
 8016854:	4000e400 	.word	0x4000e400
 8016858:	00010007 	.word	0x00010007

0801685c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 801685c:	b580      	push	{r7, lr}
 801685e:	b082      	sub	sp, #8
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d101      	bne.n	801686e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801686a:	2301      	movs	r3, #1
 801686c:	e049      	b.n	8016902 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016874:	b2db      	uxtb	r3, r3
 8016876:	2b00      	cmp	r3, #0
 8016878:	d106      	bne.n	8016888 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	2200      	movs	r2, #0
 801687e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8016882:	6878      	ldr	r0, [r7, #4]
 8016884:	f7f2 fbf4 	bl	8009070 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	2202      	movs	r2, #2
 801688c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	681a      	ldr	r2, [r3, #0]
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	3304      	adds	r3, #4
 8016898:	4619      	mov	r1, r3
 801689a:	4610      	mov	r0, r2
 801689c:	f000 fc0c 	bl	80170b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	2201      	movs	r2, #1
 80168a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	2201      	movs	r2, #1
 80168ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	2201      	movs	r2, #1
 80168b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	2201      	movs	r2, #1
 80168bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	2201      	movs	r2, #1
 80168c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	2201      	movs	r2, #1
 80168cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	2201      	movs	r2, #1
 80168d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	2201      	movs	r2, #1
 80168dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	2201      	movs	r2, #1
 80168e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	2201      	movs	r2, #1
 80168ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2201      	movs	r2, #1
 80168f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	2201      	movs	r2, #1
 80168fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016900:	2300      	movs	r3, #0
}
 8016902:	4618      	mov	r0, r3
 8016904:	3708      	adds	r7, #8
 8016906:	46bd      	mov	sp, r7
 8016908:	bd80      	pop	{r7, pc}

0801690a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801690a:	b580      	push	{r7, lr}
 801690c:	b084      	sub	sp, #16
 801690e:	af00      	add	r7, sp, #0
 8016910:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	68db      	ldr	r3, [r3, #12]
 8016918:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	691b      	ldr	r3, [r3, #16]
 8016920:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8016922:	68bb      	ldr	r3, [r7, #8]
 8016924:	f003 0302 	and.w	r3, r3, #2
 8016928:	2b00      	cmp	r3, #0
 801692a:	d020      	beq.n	801696e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	f003 0302 	and.w	r3, r3, #2
 8016932:	2b00      	cmp	r3, #0
 8016934:	d01b      	beq.n	801696e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	f06f 0202 	mvn.w	r2, #2
 801693e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2201      	movs	r2, #1
 8016944:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	699b      	ldr	r3, [r3, #24]
 801694c:	f003 0303 	and.w	r3, r3, #3
 8016950:	2b00      	cmp	r3, #0
 8016952:	d003      	beq.n	801695c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8016954:	6878      	ldr	r0, [r7, #4]
 8016956:	f000 fb91 	bl	801707c <HAL_TIM_IC_CaptureCallback>
 801695a:	e005      	b.n	8016968 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801695c:	6878      	ldr	r0, [r7, #4]
 801695e:	f000 fb83 	bl	8017068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016962:	6878      	ldr	r0, [r7, #4]
 8016964:	f000 fb94 	bl	8017090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	2200      	movs	r2, #0
 801696c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801696e:	68bb      	ldr	r3, [r7, #8]
 8016970:	f003 0304 	and.w	r3, r3, #4
 8016974:	2b00      	cmp	r3, #0
 8016976:	d020      	beq.n	80169ba <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	f003 0304 	and.w	r3, r3, #4
 801697e:	2b00      	cmp	r3, #0
 8016980:	d01b      	beq.n	80169ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	f06f 0204 	mvn.w	r2, #4
 801698a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	2202      	movs	r2, #2
 8016990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	699b      	ldr	r3, [r3, #24]
 8016998:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801699c:	2b00      	cmp	r3, #0
 801699e:	d003      	beq.n	80169a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80169a0:	6878      	ldr	r0, [r7, #4]
 80169a2:	f000 fb6b 	bl	801707c <HAL_TIM_IC_CaptureCallback>
 80169a6:	e005      	b.n	80169b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80169a8:	6878      	ldr	r0, [r7, #4]
 80169aa:	f000 fb5d 	bl	8017068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80169ae:	6878      	ldr	r0, [r7, #4]
 80169b0:	f000 fb6e 	bl	8017090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	2200      	movs	r2, #0
 80169b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80169ba:	68bb      	ldr	r3, [r7, #8]
 80169bc:	f003 0308 	and.w	r3, r3, #8
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d020      	beq.n	8016a06 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	f003 0308 	and.w	r3, r3, #8
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d01b      	beq.n	8016a06 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	f06f 0208 	mvn.w	r2, #8
 80169d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	2204      	movs	r2, #4
 80169dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	69db      	ldr	r3, [r3, #28]
 80169e4:	f003 0303 	and.w	r3, r3, #3
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d003      	beq.n	80169f4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80169ec:	6878      	ldr	r0, [r7, #4]
 80169ee:	f000 fb45 	bl	801707c <HAL_TIM_IC_CaptureCallback>
 80169f2:	e005      	b.n	8016a00 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80169f4:	6878      	ldr	r0, [r7, #4]
 80169f6:	f000 fb37 	bl	8017068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80169fa:	6878      	ldr	r0, [r7, #4]
 80169fc:	f000 fb48 	bl	8017090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	2200      	movs	r2, #0
 8016a04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8016a06:	68bb      	ldr	r3, [r7, #8]
 8016a08:	f003 0310 	and.w	r3, r3, #16
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d020      	beq.n	8016a52 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	f003 0310 	and.w	r3, r3, #16
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d01b      	beq.n	8016a52 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	f06f 0210 	mvn.w	r2, #16
 8016a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	2208      	movs	r2, #8
 8016a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	69db      	ldr	r3, [r3, #28]
 8016a30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d003      	beq.n	8016a40 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016a38:	6878      	ldr	r0, [r7, #4]
 8016a3a:	f000 fb1f 	bl	801707c <HAL_TIM_IC_CaptureCallback>
 8016a3e:	e005      	b.n	8016a4c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016a40:	6878      	ldr	r0, [r7, #4]
 8016a42:	f000 fb11 	bl	8017068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016a46:	6878      	ldr	r0, [r7, #4]
 8016a48:	f000 fb22 	bl	8017090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	2200      	movs	r2, #0
 8016a50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8016a52:	68bb      	ldr	r3, [r7, #8]
 8016a54:	f003 0301 	and.w	r3, r3, #1
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d00c      	beq.n	8016a76 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	f003 0301 	and.w	r3, r3, #1
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d007      	beq.n	8016a76 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	f06f 0201 	mvn.w	r2, #1
 8016a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016a70:	6878      	ldr	r0, [r7, #4]
 8016a72:	f7ef facd 	bl	8006010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016a76:	68bb      	ldr	r3, [r7, #8]
 8016a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d104      	bne.n	8016a8a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8016a80:	68bb      	ldr	r3, [r7, #8]
 8016a82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d00c      	beq.n	8016aa4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d007      	beq.n	8016aa4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8016a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016a9e:	6878      	ldr	r0, [r7, #4]
 8016aa0:	f001 f9b8 	bl	8017e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8016aa4:	68bb      	ldr	r3, [r7, #8]
 8016aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d00c      	beq.n	8016ac8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d007      	beq.n	8016ac8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8016ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016ac2:	6878      	ldr	r0, [r7, #4]
 8016ac4:	f001 f9b0 	bl	8017e28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8016ac8:	68bb      	ldr	r3, [r7, #8]
 8016aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d00c      	beq.n	8016aec <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d007      	beq.n	8016aec <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8016ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016ae6:	6878      	ldr	r0, [r7, #4]
 8016ae8:	f000 fadc 	bl	80170a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8016aec:	68bb      	ldr	r3, [r7, #8]
 8016aee:	f003 0320 	and.w	r3, r3, #32
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d00c      	beq.n	8016b10 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	f003 0320 	and.w	r3, r3, #32
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d007      	beq.n	8016b10 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	f06f 0220 	mvn.w	r2, #32
 8016b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016b0a:	6878      	ldr	r0, [r7, #4]
 8016b0c:	f001 f978 	bl	8017e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016b10:	bf00      	nop
 8016b12:	3710      	adds	r7, #16
 8016b14:	46bd      	mov	sp, r7
 8016b16:	bd80      	pop	{r7, pc}

08016b18 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b086      	sub	sp, #24
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	60f8      	str	r0, [r7, #12]
 8016b20:	60b9      	str	r1, [r7, #8]
 8016b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016b24:	2300      	movs	r3, #0
 8016b26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016b2e:	2b01      	cmp	r3, #1
 8016b30:	d101      	bne.n	8016b36 <HAL_TIM_IC_ConfigChannel+0x1e>
 8016b32:	2302      	movs	r3, #2
 8016b34:	e088      	b.n	8016c48 <HAL_TIM_IC_ConfigChannel+0x130>
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	2201      	movs	r2, #1
 8016b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d11b      	bne.n	8016b7c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016b48:	68bb      	ldr	r3, [r7, #8]
 8016b4a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016b4c:	68bb      	ldr	r3, [r7, #8]
 8016b4e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016b50:	68bb      	ldr	r3, [r7, #8]
 8016b52:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8016b54:	f000 fe32 	bl	80177bc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	699a      	ldr	r2, [r3, #24]
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	f022 020c 	bic.w	r2, r2, #12
 8016b66:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	6999      	ldr	r1, [r3, #24]
 8016b6e:	68bb      	ldr	r3, [r7, #8]
 8016b70:	689a      	ldr	r2, [r3, #8]
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	430a      	orrs	r2, r1
 8016b78:	619a      	str	r2, [r3, #24]
 8016b7a:	e060      	b.n	8016c3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	2b04      	cmp	r3, #4
 8016b80:	d11c      	bne.n	8016bbc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016b86:	68bb      	ldr	r3, [r7, #8]
 8016b88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016b8a:	68bb      	ldr	r3, [r7, #8]
 8016b8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016b8e:	68bb      	ldr	r3, [r7, #8]
 8016b90:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8016b92:	f000 fec2 	bl	801791a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	699a      	ldr	r2, [r3, #24]
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016ba4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	6999      	ldr	r1, [r3, #24]
 8016bac:	68bb      	ldr	r3, [r7, #8]
 8016bae:	689b      	ldr	r3, [r3, #8]
 8016bb0:	021a      	lsls	r2, r3, #8
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	430a      	orrs	r2, r1
 8016bb8:	619a      	str	r2, [r3, #24]
 8016bba:	e040      	b.n	8016c3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	2b08      	cmp	r3, #8
 8016bc0:	d11b      	bne.n	8016bfa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016bc6:	68bb      	ldr	r3, [r7, #8]
 8016bc8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016bca:	68bb      	ldr	r3, [r7, #8]
 8016bcc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016bce:	68bb      	ldr	r3, [r7, #8]
 8016bd0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8016bd2:	f000 ff0f 	bl	80179f4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	69da      	ldr	r2, [r3, #28]
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	f022 020c 	bic.w	r2, r2, #12
 8016be4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	69d9      	ldr	r1, [r3, #28]
 8016bec:	68bb      	ldr	r3, [r7, #8]
 8016bee:	689a      	ldr	r2, [r3, #8]
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	430a      	orrs	r2, r1
 8016bf6:	61da      	str	r2, [r3, #28]
 8016bf8:	e021      	b.n	8016c3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	2b0c      	cmp	r3, #12
 8016bfe:	d11c      	bne.n	8016c3a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016c04:	68bb      	ldr	r3, [r7, #8]
 8016c06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016c08:	68bb      	ldr	r3, [r7, #8]
 8016c0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016c0c:	68bb      	ldr	r3, [r7, #8]
 8016c0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8016c10:	f000 ff2c 	bl	8017a6c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	69da      	ldr	r2, [r3, #28]
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016c22:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	69d9      	ldr	r1, [r3, #28]
 8016c2a:	68bb      	ldr	r3, [r7, #8]
 8016c2c:	689b      	ldr	r3, [r3, #8]
 8016c2e:	021a      	lsls	r2, r3, #8
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	430a      	orrs	r2, r1
 8016c36:	61da      	str	r2, [r3, #28]
 8016c38:	e001      	b.n	8016c3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8016c3a:	2301      	movs	r3, #1
 8016c3c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	2200      	movs	r2, #0
 8016c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c48:	4618      	mov	r0, r3
 8016c4a:	3718      	adds	r7, #24
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	bd80      	pop	{r7, pc}

08016c50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b086      	sub	sp, #24
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	60f8      	str	r0, [r7, #12]
 8016c58:	60b9      	str	r1, [r7, #8]
 8016c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016c66:	2b01      	cmp	r3, #1
 8016c68:	d101      	bne.n	8016c6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8016c6a:	2302      	movs	r3, #2
 8016c6c:	e0ff      	b.n	8016e6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	2201      	movs	r2, #1
 8016c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	2b14      	cmp	r3, #20
 8016c7a:	f200 80f0 	bhi.w	8016e5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8016c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8016c84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8016c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c84:	08016cd9 	.word	0x08016cd9
 8016c88:	08016e5f 	.word	0x08016e5f
 8016c8c:	08016e5f 	.word	0x08016e5f
 8016c90:	08016e5f 	.word	0x08016e5f
 8016c94:	08016d19 	.word	0x08016d19
 8016c98:	08016e5f 	.word	0x08016e5f
 8016c9c:	08016e5f 	.word	0x08016e5f
 8016ca0:	08016e5f 	.word	0x08016e5f
 8016ca4:	08016d5b 	.word	0x08016d5b
 8016ca8:	08016e5f 	.word	0x08016e5f
 8016cac:	08016e5f 	.word	0x08016e5f
 8016cb0:	08016e5f 	.word	0x08016e5f
 8016cb4:	08016d9b 	.word	0x08016d9b
 8016cb8:	08016e5f 	.word	0x08016e5f
 8016cbc:	08016e5f 	.word	0x08016e5f
 8016cc0:	08016e5f 	.word	0x08016e5f
 8016cc4:	08016ddd 	.word	0x08016ddd
 8016cc8:	08016e5f 	.word	0x08016e5f
 8016ccc:	08016e5f 	.word	0x08016e5f
 8016cd0:	08016e5f 	.word	0x08016e5f
 8016cd4:	08016e1d 	.word	0x08016e1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	68b9      	ldr	r1, [r7, #8]
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f000 fa96 	bl	8017210 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	699a      	ldr	r2, [r3, #24]
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	f042 0208 	orr.w	r2, r2, #8
 8016cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	699a      	ldr	r2, [r3, #24]
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	f022 0204 	bic.w	r2, r2, #4
 8016d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	6999      	ldr	r1, [r3, #24]
 8016d0a:	68bb      	ldr	r3, [r7, #8]
 8016d0c:	691a      	ldr	r2, [r3, #16]
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	430a      	orrs	r2, r1
 8016d14:	619a      	str	r2, [r3, #24]
      break;
 8016d16:	e0a5      	b.n	8016e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	68b9      	ldr	r1, [r7, #8]
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f000 fb06 	bl	8017330 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	699a      	ldr	r2, [r3, #24]
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	699a      	ldr	r2, [r3, #24]
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	6999      	ldr	r1, [r3, #24]
 8016d4a:	68bb      	ldr	r3, [r7, #8]
 8016d4c:	691b      	ldr	r3, [r3, #16]
 8016d4e:	021a      	lsls	r2, r3, #8
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	430a      	orrs	r2, r1
 8016d56:	619a      	str	r2, [r3, #24]
      break;
 8016d58:	e084      	b.n	8016e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	68b9      	ldr	r1, [r7, #8]
 8016d60:	4618      	mov	r0, r3
 8016d62:	f000 fb6f 	bl	8017444 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	69da      	ldr	r2, [r3, #28]
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	f042 0208 	orr.w	r2, r2, #8
 8016d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	69da      	ldr	r2, [r3, #28]
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	f022 0204 	bic.w	r2, r2, #4
 8016d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	69d9      	ldr	r1, [r3, #28]
 8016d8c:	68bb      	ldr	r3, [r7, #8]
 8016d8e:	691a      	ldr	r2, [r3, #16]
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	430a      	orrs	r2, r1
 8016d96:	61da      	str	r2, [r3, #28]
      break;
 8016d98:	e064      	b.n	8016e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	68b9      	ldr	r1, [r7, #8]
 8016da0:	4618      	mov	r0, r3
 8016da2:	f000 fbd7 	bl	8017554 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	69da      	ldr	r2, [r3, #28]
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	69da      	ldr	r2, [r3, #28]
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	69d9      	ldr	r1, [r3, #28]
 8016dcc:	68bb      	ldr	r3, [r7, #8]
 8016dce:	691b      	ldr	r3, [r3, #16]
 8016dd0:	021a      	lsls	r2, r3, #8
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	430a      	orrs	r2, r1
 8016dd8:	61da      	str	r2, [r3, #28]
      break;
 8016dda:	e043      	b.n	8016e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	68b9      	ldr	r1, [r7, #8]
 8016de2:	4618      	mov	r0, r3
 8016de4:	f000 fc20 	bl	8017628 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	f042 0208 	orr.w	r2, r2, #8
 8016df6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	f022 0204 	bic.w	r2, r2, #4
 8016e06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016e0e:	68bb      	ldr	r3, [r7, #8]
 8016e10:	691a      	ldr	r2, [r3, #16]
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	430a      	orrs	r2, r1
 8016e18:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016e1a:	e023      	b.n	8016e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	68b9      	ldr	r1, [r7, #8]
 8016e22:	4618      	mov	r0, r3
 8016e24:	f000 fc64 	bl	80176f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016e36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016e46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016e4e:	68bb      	ldr	r3, [r7, #8]
 8016e50:	691b      	ldr	r3, [r3, #16]
 8016e52:	021a      	lsls	r2, r3, #8
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	430a      	orrs	r2, r1
 8016e5a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016e5c:	e002      	b.n	8016e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8016e5e:	2301      	movs	r3, #1
 8016e60:	75fb      	strb	r3, [r7, #23]
      break;
 8016e62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	2200      	movs	r2, #0
 8016e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e6e:	4618      	mov	r0, r3
 8016e70:	3718      	adds	r7, #24
 8016e72:	46bd      	mov	sp, r7
 8016e74:	bd80      	pop	{r7, pc}
 8016e76:	bf00      	nop

08016e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b084      	sub	sp, #16
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]
 8016e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016e82:	2300      	movs	r3, #0
 8016e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016e8c:	2b01      	cmp	r3, #1
 8016e8e:	d101      	bne.n	8016e94 <HAL_TIM_ConfigClockSource+0x1c>
 8016e90:	2302      	movs	r3, #2
 8016e92:	e0dc      	b.n	801704e <HAL_TIM_ConfigClockSource+0x1d6>
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	2201      	movs	r2, #1
 8016e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	2202      	movs	r2, #2
 8016ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	689b      	ldr	r3, [r3, #8]
 8016eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016eac:	68ba      	ldr	r2, [r7, #8]
 8016eae:	4b6a      	ldr	r3, [pc, #424]	@ (8017058 <HAL_TIM_ConfigClockSource+0x1e0>)
 8016eb0:	4013      	ands	r3, r2
 8016eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016eb4:	68bb      	ldr	r3, [r7, #8]
 8016eb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016eba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	68ba      	ldr	r2, [r7, #8]
 8016ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016ec4:	683b      	ldr	r3, [r7, #0]
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	4a64      	ldr	r2, [pc, #400]	@ (801705c <HAL_TIM_ConfigClockSource+0x1e4>)
 8016eca:	4293      	cmp	r3, r2
 8016ecc:	f000 80a9 	beq.w	8017022 <HAL_TIM_ConfigClockSource+0x1aa>
 8016ed0:	4a62      	ldr	r2, [pc, #392]	@ (801705c <HAL_TIM_ConfigClockSource+0x1e4>)
 8016ed2:	4293      	cmp	r3, r2
 8016ed4:	f200 80ae 	bhi.w	8017034 <HAL_TIM_ConfigClockSource+0x1bc>
 8016ed8:	4a61      	ldr	r2, [pc, #388]	@ (8017060 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016eda:	4293      	cmp	r3, r2
 8016edc:	f000 80a1 	beq.w	8017022 <HAL_TIM_ConfigClockSource+0x1aa>
 8016ee0:	4a5f      	ldr	r2, [pc, #380]	@ (8017060 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016ee2:	4293      	cmp	r3, r2
 8016ee4:	f200 80a6 	bhi.w	8017034 <HAL_TIM_ConfigClockSource+0x1bc>
 8016ee8:	4a5e      	ldr	r2, [pc, #376]	@ (8017064 <HAL_TIM_ConfigClockSource+0x1ec>)
 8016eea:	4293      	cmp	r3, r2
 8016eec:	f000 8099 	beq.w	8017022 <HAL_TIM_ConfigClockSource+0x1aa>
 8016ef0:	4a5c      	ldr	r2, [pc, #368]	@ (8017064 <HAL_TIM_ConfigClockSource+0x1ec>)
 8016ef2:	4293      	cmp	r3, r2
 8016ef4:	f200 809e 	bhi.w	8017034 <HAL_TIM_ConfigClockSource+0x1bc>
 8016ef8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016efc:	f000 8091 	beq.w	8017022 <HAL_TIM_ConfigClockSource+0x1aa>
 8016f00:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016f04:	f200 8096 	bhi.w	8017034 <HAL_TIM_ConfigClockSource+0x1bc>
 8016f08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016f0c:	f000 8089 	beq.w	8017022 <HAL_TIM_ConfigClockSource+0x1aa>
 8016f10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016f14:	f200 808e 	bhi.w	8017034 <HAL_TIM_ConfigClockSource+0x1bc>
 8016f18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016f1c:	d03e      	beq.n	8016f9c <HAL_TIM_ConfigClockSource+0x124>
 8016f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016f22:	f200 8087 	bhi.w	8017034 <HAL_TIM_ConfigClockSource+0x1bc>
 8016f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016f2a:	f000 8086 	beq.w	801703a <HAL_TIM_ConfigClockSource+0x1c2>
 8016f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016f32:	d87f      	bhi.n	8017034 <HAL_TIM_ConfigClockSource+0x1bc>
 8016f34:	2b70      	cmp	r3, #112	@ 0x70
 8016f36:	d01a      	beq.n	8016f6e <HAL_TIM_ConfigClockSource+0xf6>
 8016f38:	2b70      	cmp	r3, #112	@ 0x70
 8016f3a:	d87b      	bhi.n	8017034 <HAL_TIM_ConfigClockSource+0x1bc>
 8016f3c:	2b60      	cmp	r3, #96	@ 0x60
 8016f3e:	d050      	beq.n	8016fe2 <HAL_TIM_ConfigClockSource+0x16a>
 8016f40:	2b60      	cmp	r3, #96	@ 0x60
 8016f42:	d877      	bhi.n	8017034 <HAL_TIM_ConfigClockSource+0x1bc>
 8016f44:	2b50      	cmp	r3, #80	@ 0x50
 8016f46:	d03c      	beq.n	8016fc2 <HAL_TIM_ConfigClockSource+0x14a>
 8016f48:	2b50      	cmp	r3, #80	@ 0x50
 8016f4a:	d873      	bhi.n	8017034 <HAL_TIM_ConfigClockSource+0x1bc>
 8016f4c:	2b40      	cmp	r3, #64	@ 0x40
 8016f4e:	d058      	beq.n	8017002 <HAL_TIM_ConfigClockSource+0x18a>
 8016f50:	2b40      	cmp	r3, #64	@ 0x40
 8016f52:	d86f      	bhi.n	8017034 <HAL_TIM_ConfigClockSource+0x1bc>
 8016f54:	2b30      	cmp	r3, #48	@ 0x30
 8016f56:	d064      	beq.n	8017022 <HAL_TIM_ConfigClockSource+0x1aa>
 8016f58:	2b30      	cmp	r3, #48	@ 0x30
 8016f5a:	d86b      	bhi.n	8017034 <HAL_TIM_ConfigClockSource+0x1bc>
 8016f5c:	2b20      	cmp	r3, #32
 8016f5e:	d060      	beq.n	8017022 <HAL_TIM_ConfigClockSource+0x1aa>
 8016f60:	2b20      	cmp	r3, #32
 8016f62:	d867      	bhi.n	8017034 <HAL_TIM_ConfigClockSource+0x1bc>
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d05c      	beq.n	8017022 <HAL_TIM_ConfigClockSource+0x1aa>
 8016f68:	2b10      	cmp	r3, #16
 8016f6a:	d05a      	beq.n	8017022 <HAL_TIM_ConfigClockSource+0x1aa>
 8016f6c:	e062      	b.n	8017034 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016f72:	683b      	ldr	r3, [r7, #0]
 8016f74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016f76:	683b      	ldr	r3, [r7, #0]
 8016f78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016f7a:	683b      	ldr	r3, [r7, #0]
 8016f7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016f7e:	f000 fdd1 	bl	8017b24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	689b      	ldr	r3, [r3, #8]
 8016f88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8016f8a:	68bb      	ldr	r3, [r7, #8]
 8016f8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8016f90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	68ba      	ldr	r2, [r7, #8]
 8016f98:	609a      	str	r2, [r3, #8]
      break;
 8016f9a:	e04f      	b.n	801703c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016fa0:	683b      	ldr	r3, [r7, #0]
 8016fa2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016fa4:	683b      	ldr	r3, [r7, #0]
 8016fa6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016fa8:	683b      	ldr	r3, [r7, #0]
 8016faa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016fac:	f000 fdba 	bl	8017b24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	689a      	ldr	r2, [r3, #8]
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8016fbe:	609a      	str	r2, [r3, #8]
      break;
 8016fc0:	e03c      	b.n	801703c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016fc6:	683b      	ldr	r3, [r7, #0]
 8016fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016fca:	683b      	ldr	r3, [r7, #0]
 8016fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016fce:	461a      	mov	r2, r3
 8016fd0:	f000 fc74 	bl	80178bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	2150      	movs	r1, #80	@ 0x50
 8016fda:	4618      	mov	r0, r3
 8016fdc:	f000 fd84 	bl	8017ae8 <TIM_ITRx_SetConfig>
      break;
 8016fe0:	e02c      	b.n	801703c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016fe6:	683b      	ldr	r3, [r7, #0]
 8016fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016fea:	683b      	ldr	r3, [r7, #0]
 8016fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8016fee:	461a      	mov	r2, r3
 8016ff0:	f000 fcd0 	bl	8017994 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	2160      	movs	r1, #96	@ 0x60
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	f000 fd74 	bl	8017ae8 <TIM_ITRx_SetConfig>
      break;
 8017000:	e01c      	b.n	801703c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8017006:	683b      	ldr	r3, [r7, #0]
 8017008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801700a:	683b      	ldr	r3, [r7, #0]
 801700c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801700e:	461a      	mov	r2, r3
 8017010:	f000 fc54 	bl	80178bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	2140      	movs	r1, #64	@ 0x40
 801701a:	4618      	mov	r0, r3
 801701c:	f000 fd64 	bl	8017ae8 <TIM_ITRx_SetConfig>
      break;
 8017020:	e00c      	b.n	801703c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	681a      	ldr	r2, [r3, #0]
 8017026:	683b      	ldr	r3, [r7, #0]
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	4619      	mov	r1, r3
 801702c:	4610      	mov	r0, r2
 801702e:	f000 fd5b 	bl	8017ae8 <TIM_ITRx_SetConfig>
      break;
 8017032:	e003      	b.n	801703c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8017034:	2301      	movs	r3, #1
 8017036:	73fb      	strb	r3, [r7, #15]
      break;
 8017038:	e000      	b.n	801703c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801703a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	2201      	movs	r2, #1
 8017040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	2200      	movs	r2, #0
 8017048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801704c:	7bfb      	ldrb	r3, [r7, #15]
}
 801704e:	4618      	mov	r0, r3
 8017050:	3710      	adds	r7, #16
 8017052:	46bd      	mov	sp, r7
 8017054:	bd80      	pop	{r7, pc}
 8017056:	bf00      	nop
 8017058:	ffceff88 	.word	0xffceff88
 801705c:	00100040 	.word	0x00100040
 8017060:	00100030 	.word	0x00100030
 8017064:	00100020 	.word	0x00100020

08017068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017068:	b480      	push	{r7}
 801706a:	b083      	sub	sp, #12
 801706c:	af00      	add	r7, sp, #0
 801706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8017070:	bf00      	nop
 8017072:	370c      	adds	r7, #12
 8017074:	46bd      	mov	sp, r7
 8017076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801707a:	4770      	bx	lr

0801707c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801707c:	b480      	push	{r7}
 801707e:	b083      	sub	sp, #12
 8017080:	af00      	add	r7, sp, #0
 8017082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8017084:	bf00      	nop
 8017086:	370c      	adds	r7, #12
 8017088:	46bd      	mov	sp, r7
 801708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801708e:	4770      	bx	lr

08017090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8017090:	b480      	push	{r7}
 8017092:	b083      	sub	sp, #12
 8017094:	af00      	add	r7, sp, #0
 8017096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017098:	bf00      	nop
 801709a:	370c      	adds	r7, #12
 801709c:	46bd      	mov	sp, r7
 801709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a2:	4770      	bx	lr

080170a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80170a4:	b480      	push	{r7}
 80170a6:	b083      	sub	sp, #12
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80170ac:	bf00      	nop
 80170ae:	370c      	adds	r7, #12
 80170b0:	46bd      	mov	sp, r7
 80170b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b6:	4770      	bx	lr

080170b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80170b8:	b480      	push	{r7}
 80170ba:	b085      	sub	sp, #20
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
 80170c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	4a47      	ldr	r2, [pc, #284]	@ (80171e8 <TIM_Base_SetConfig+0x130>)
 80170cc:	4293      	cmp	r3, r2
 80170ce:	d013      	beq.n	80170f8 <TIM_Base_SetConfig+0x40>
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80170d6:	d00f      	beq.n	80170f8 <TIM_Base_SetConfig+0x40>
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	4a44      	ldr	r2, [pc, #272]	@ (80171ec <TIM_Base_SetConfig+0x134>)
 80170dc:	4293      	cmp	r3, r2
 80170de:	d00b      	beq.n	80170f8 <TIM_Base_SetConfig+0x40>
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	4a43      	ldr	r2, [pc, #268]	@ (80171f0 <TIM_Base_SetConfig+0x138>)
 80170e4:	4293      	cmp	r3, r2
 80170e6:	d007      	beq.n	80170f8 <TIM_Base_SetConfig+0x40>
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	4a42      	ldr	r2, [pc, #264]	@ (80171f4 <TIM_Base_SetConfig+0x13c>)
 80170ec:	4293      	cmp	r3, r2
 80170ee:	d003      	beq.n	80170f8 <TIM_Base_SetConfig+0x40>
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	4a41      	ldr	r2, [pc, #260]	@ (80171f8 <TIM_Base_SetConfig+0x140>)
 80170f4:	4293      	cmp	r3, r2
 80170f6:	d108      	bne.n	801710a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80170fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017100:	683b      	ldr	r3, [r7, #0]
 8017102:	685b      	ldr	r3, [r3, #4]
 8017104:	68fa      	ldr	r2, [r7, #12]
 8017106:	4313      	orrs	r3, r2
 8017108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	4a36      	ldr	r2, [pc, #216]	@ (80171e8 <TIM_Base_SetConfig+0x130>)
 801710e:	4293      	cmp	r3, r2
 8017110:	d027      	beq.n	8017162 <TIM_Base_SetConfig+0xaa>
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017118:	d023      	beq.n	8017162 <TIM_Base_SetConfig+0xaa>
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	4a33      	ldr	r2, [pc, #204]	@ (80171ec <TIM_Base_SetConfig+0x134>)
 801711e:	4293      	cmp	r3, r2
 8017120:	d01f      	beq.n	8017162 <TIM_Base_SetConfig+0xaa>
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	4a32      	ldr	r2, [pc, #200]	@ (80171f0 <TIM_Base_SetConfig+0x138>)
 8017126:	4293      	cmp	r3, r2
 8017128:	d01b      	beq.n	8017162 <TIM_Base_SetConfig+0xaa>
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	4a31      	ldr	r2, [pc, #196]	@ (80171f4 <TIM_Base_SetConfig+0x13c>)
 801712e:	4293      	cmp	r3, r2
 8017130:	d017      	beq.n	8017162 <TIM_Base_SetConfig+0xaa>
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	4a30      	ldr	r2, [pc, #192]	@ (80171f8 <TIM_Base_SetConfig+0x140>)
 8017136:	4293      	cmp	r3, r2
 8017138:	d013      	beq.n	8017162 <TIM_Base_SetConfig+0xaa>
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	4a2f      	ldr	r2, [pc, #188]	@ (80171fc <TIM_Base_SetConfig+0x144>)
 801713e:	4293      	cmp	r3, r2
 8017140:	d00f      	beq.n	8017162 <TIM_Base_SetConfig+0xaa>
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	4a2e      	ldr	r2, [pc, #184]	@ (8017200 <TIM_Base_SetConfig+0x148>)
 8017146:	4293      	cmp	r3, r2
 8017148:	d00b      	beq.n	8017162 <TIM_Base_SetConfig+0xaa>
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	4a2d      	ldr	r2, [pc, #180]	@ (8017204 <TIM_Base_SetConfig+0x14c>)
 801714e:	4293      	cmp	r3, r2
 8017150:	d007      	beq.n	8017162 <TIM_Base_SetConfig+0xaa>
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	4a2c      	ldr	r2, [pc, #176]	@ (8017208 <TIM_Base_SetConfig+0x150>)
 8017156:	4293      	cmp	r3, r2
 8017158:	d003      	beq.n	8017162 <TIM_Base_SetConfig+0xaa>
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	4a2b      	ldr	r2, [pc, #172]	@ (801720c <TIM_Base_SetConfig+0x154>)
 801715e:	4293      	cmp	r3, r2
 8017160:	d108      	bne.n	8017174 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801716a:	683b      	ldr	r3, [r7, #0]
 801716c:	68db      	ldr	r3, [r3, #12]
 801716e:	68fa      	ldr	r2, [r7, #12]
 8017170:	4313      	orrs	r3, r2
 8017172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801717a:	683b      	ldr	r3, [r7, #0]
 801717c:	695b      	ldr	r3, [r3, #20]
 801717e:	4313      	orrs	r3, r2
 8017180:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017182:	683b      	ldr	r3, [r7, #0]
 8017184:	689a      	ldr	r2, [r3, #8]
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801718a:	683b      	ldr	r3, [r7, #0]
 801718c:	681a      	ldr	r2, [r3, #0]
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	4a14      	ldr	r2, [pc, #80]	@ (80171e8 <TIM_Base_SetConfig+0x130>)
 8017196:	4293      	cmp	r3, r2
 8017198:	d00f      	beq.n	80171ba <TIM_Base_SetConfig+0x102>
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	4a16      	ldr	r2, [pc, #88]	@ (80171f8 <TIM_Base_SetConfig+0x140>)
 801719e:	4293      	cmp	r3, r2
 80171a0:	d00b      	beq.n	80171ba <TIM_Base_SetConfig+0x102>
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	4a15      	ldr	r2, [pc, #84]	@ (80171fc <TIM_Base_SetConfig+0x144>)
 80171a6:	4293      	cmp	r3, r2
 80171a8:	d007      	beq.n	80171ba <TIM_Base_SetConfig+0x102>
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	4a14      	ldr	r2, [pc, #80]	@ (8017200 <TIM_Base_SetConfig+0x148>)
 80171ae:	4293      	cmp	r3, r2
 80171b0:	d003      	beq.n	80171ba <TIM_Base_SetConfig+0x102>
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	4a13      	ldr	r2, [pc, #76]	@ (8017204 <TIM_Base_SetConfig+0x14c>)
 80171b6:	4293      	cmp	r3, r2
 80171b8:	d103      	bne.n	80171c2 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80171ba:	683b      	ldr	r3, [r7, #0]
 80171bc:	691a      	ldr	r2, [r3, #16]
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	f043 0204 	orr.w	r2, r3, #4
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	2201      	movs	r2, #1
 80171d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	68fa      	ldr	r2, [r7, #12]
 80171d8:	601a      	str	r2, [r3, #0]
}
 80171da:	bf00      	nop
 80171dc:	3714      	adds	r7, #20
 80171de:	46bd      	mov	sp, r7
 80171e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e4:	4770      	bx	lr
 80171e6:	bf00      	nop
 80171e8:	40010000 	.word	0x40010000
 80171ec:	40000400 	.word	0x40000400
 80171f0:	40000800 	.word	0x40000800
 80171f4:	40000c00 	.word	0x40000c00
 80171f8:	40010400 	.word	0x40010400
 80171fc:	40014000 	.word	0x40014000
 8017200:	40014400 	.word	0x40014400
 8017204:	40014800 	.word	0x40014800
 8017208:	4000e000 	.word	0x4000e000
 801720c:	4000e400 	.word	0x4000e400

08017210 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017210:	b480      	push	{r7}
 8017212:	b087      	sub	sp, #28
 8017214:	af00      	add	r7, sp, #0
 8017216:	6078      	str	r0, [r7, #4]
 8017218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	6a1b      	ldr	r3, [r3, #32]
 801721e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	6a1b      	ldr	r3, [r3, #32]
 8017224:	f023 0201 	bic.w	r2, r3, #1
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	685b      	ldr	r3, [r3, #4]
 8017230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	699b      	ldr	r3, [r3, #24]
 8017236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8017238:	68fa      	ldr	r2, [r7, #12]
 801723a:	4b37      	ldr	r3, [pc, #220]	@ (8017318 <TIM_OC1_SetConfig+0x108>)
 801723c:	4013      	ands	r3, r2
 801723e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	f023 0303 	bic.w	r3, r3, #3
 8017246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017248:	683b      	ldr	r3, [r7, #0]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	68fa      	ldr	r2, [r7, #12]
 801724e:	4313      	orrs	r3, r2
 8017250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8017252:	697b      	ldr	r3, [r7, #20]
 8017254:	f023 0302 	bic.w	r3, r3, #2
 8017258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801725a:	683b      	ldr	r3, [r7, #0]
 801725c:	689b      	ldr	r3, [r3, #8]
 801725e:	697a      	ldr	r2, [r7, #20]
 8017260:	4313      	orrs	r3, r2
 8017262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	4a2d      	ldr	r2, [pc, #180]	@ (801731c <TIM_OC1_SetConfig+0x10c>)
 8017268:	4293      	cmp	r3, r2
 801726a:	d00f      	beq.n	801728c <TIM_OC1_SetConfig+0x7c>
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	4a2c      	ldr	r2, [pc, #176]	@ (8017320 <TIM_OC1_SetConfig+0x110>)
 8017270:	4293      	cmp	r3, r2
 8017272:	d00b      	beq.n	801728c <TIM_OC1_SetConfig+0x7c>
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	4a2b      	ldr	r2, [pc, #172]	@ (8017324 <TIM_OC1_SetConfig+0x114>)
 8017278:	4293      	cmp	r3, r2
 801727a:	d007      	beq.n	801728c <TIM_OC1_SetConfig+0x7c>
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	4a2a      	ldr	r2, [pc, #168]	@ (8017328 <TIM_OC1_SetConfig+0x118>)
 8017280:	4293      	cmp	r3, r2
 8017282:	d003      	beq.n	801728c <TIM_OC1_SetConfig+0x7c>
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	4a29      	ldr	r2, [pc, #164]	@ (801732c <TIM_OC1_SetConfig+0x11c>)
 8017288:	4293      	cmp	r3, r2
 801728a:	d10c      	bne.n	80172a6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801728c:	697b      	ldr	r3, [r7, #20]
 801728e:	f023 0308 	bic.w	r3, r3, #8
 8017292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8017294:	683b      	ldr	r3, [r7, #0]
 8017296:	68db      	ldr	r3, [r3, #12]
 8017298:	697a      	ldr	r2, [r7, #20]
 801729a:	4313      	orrs	r3, r2
 801729c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801729e:	697b      	ldr	r3, [r7, #20]
 80172a0:	f023 0304 	bic.w	r3, r3, #4
 80172a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	4a1c      	ldr	r2, [pc, #112]	@ (801731c <TIM_OC1_SetConfig+0x10c>)
 80172aa:	4293      	cmp	r3, r2
 80172ac:	d00f      	beq.n	80172ce <TIM_OC1_SetConfig+0xbe>
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	4a1b      	ldr	r2, [pc, #108]	@ (8017320 <TIM_OC1_SetConfig+0x110>)
 80172b2:	4293      	cmp	r3, r2
 80172b4:	d00b      	beq.n	80172ce <TIM_OC1_SetConfig+0xbe>
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	4a1a      	ldr	r2, [pc, #104]	@ (8017324 <TIM_OC1_SetConfig+0x114>)
 80172ba:	4293      	cmp	r3, r2
 80172bc:	d007      	beq.n	80172ce <TIM_OC1_SetConfig+0xbe>
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	4a19      	ldr	r2, [pc, #100]	@ (8017328 <TIM_OC1_SetConfig+0x118>)
 80172c2:	4293      	cmp	r3, r2
 80172c4:	d003      	beq.n	80172ce <TIM_OC1_SetConfig+0xbe>
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	4a18      	ldr	r2, [pc, #96]	@ (801732c <TIM_OC1_SetConfig+0x11c>)
 80172ca:	4293      	cmp	r3, r2
 80172cc:	d111      	bne.n	80172f2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80172ce:	693b      	ldr	r3, [r7, #16]
 80172d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80172d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80172d6:	693b      	ldr	r3, [r7, #16]
 80172d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80172dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80172de:	683b      	ldr	r3, [r7, #0]
 80172e0:	695b      	ldr	r3, [r3, #20]
 80172e2:	693a      	ldr	r2, [r7, #16]
 80172e4:	4313      	orrs	r3, r2
 80172e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80172e8:	683b      	ldr	r3, [r7, #0]
 80172ea:	699b      	ldr	r3, [r3, #24]
 80172ec:	693a      	ldr	r2, [r7, #16]
 80172ee:	4313      	orrs	r3, r2
 80172f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	693a      	ldr	r2, [r7, #16]
 80172f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	68fa      	ldr	r2, [r7, #12]
 80172fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80172fe:	683b      	ldr	r3, [r7, #0]
 8017300:	685a      	ldr	r2, [r3, #4]
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	697a      	ldr	r2, [r7, #20]
 801730a:	621a      	str	r2, [r3, #32]
}
 801730c:	bf00      	nop
 801730e:	371c      	adds	r7, #28
 8017310:	46bd      	mov	sp, r7
 8017312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017316:	4770      	bx	lr
 8017318:	fffeff8f 	.word	0xfffeff8f
 801731c:	40010000 	.word	0x40010000
 8017320:	40010400 	.word	0x40010400
 8017324:	40014000 	.word	0x40014000
 8017328:	40014400 	.word	0x40014400
 801732c:	40014800 	.word	0x40014800

08017330 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017330:	b480      	push	{r7}
 8017332:	b087      	sub	sp, #28
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
 8017338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	6a1b      	ldr	r3, [r3, #32]
 801733e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	6a1b      	ldr	r3, [r3, #32]
 8017344:	f023 0210 	bic.w	r2, r3, #16
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	685b      	ldr	r3, [r3, #4]
 8017350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	699b      	ldr	r3, [r3, #24]
 8017356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8017358:	68fa      	ldr	r2, [r7, #12]
 801735a:	4b34      	ldr	r3, [pc, #208]	@ (801742c <TIM_OC2_SetConfig+0xfc>)
 801735c:	4013      	ands	r3, r2
 801735e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017368:	683b      	ldr	r3, [r7, #0]
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	021b      	lsls	r3, r3, #8
 801736e:	68fa      	ldr	r2, [r7, #12]
 8017370:	4313      	orrs	r3, r2
 8017372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8017374:	697b      	ldr	r3, [r7, #20]
 8017376:	f023 0320 	bic.w	r3, r3, #32
 801737a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801737c:	683b      	ldr	r3, [r7, #0]
 801737e:	689b      	ldr	r3, [r3, #8]
 8017380:	011b      	lsls	r3, r3, #4
 8017382:	697a      	ldr	r2, [r7, #20]
 8017384:	4313      	orrs	r3, r2
 8017386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	4a29      	ldr	r2, [pc, #164]	@ (8017430 <TIM_OC2_SetConfig+0x100>)
 801738c:	4293      	cmp	r3, r2
 801738e:	d003      	beq.n	8017398 <TIM_OC2_SetConfig+0x68>
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	4a28      	ldr	r2, [pc, #160]	@ (8017434 <TIM_OC2_SetConfig+0x104>)
 8017394:	4293      	cmp	r3, r2
 8017396:	d10d      	bne.n	80173b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8017398:	697b      	ldr	r3, [r7, #20]
 801739a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801739e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80173a0:	683b      	ldr	r3, [r7, #0]
 80173a2:	68db      	ldr	r3, [r3, #12]
 80173a4:	011b      	lsls	r3, r3, #4
 80173a6:	697a      	ldr	r2, [r7, #20]
 80173a8:	4313      	orrs	r3, r2
 80173aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80173ac:	697b      	ldr	r3, [r7, #20]
 80173ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80173b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	4a1e      	ldr	r2, [pc, #120]	@ (8017430 <TIM_OC2_SetConfig+0x100>)
 80173b8:	4293      	cmp	r3, r2
 80173ba:	d00f      	beq.n	80173dc <TIM_OC2_SetConfig+0xac>
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	4a1d      	ldr	r2, [pc, #116]	@ (8017434 <TIM_OC2_SetConfig+0x104>)
 80173c0:	4293      	cmp	r3, r2
 80173c2:	d00b      	beq.n	80173dc <TIM_OC2_SetConfig+0xac>
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	4a1c      	ldr	r2, [pc, #112]	@ (8017438 <TIM_OC2_SetConfig+0x108>)
 80173c8:	4293      	cmp	r3, r2
 80173ca:	d007      	beq.n	80173dc <TIM_OC2_SetConfig+0xac>
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	4a1b      	ldr	r2, [pc, #108]	@ (801743c <TIM_OC2_SetConfig+0x10c>)
 80173d0:	4293      	cmp	r3, r2
 80173d2:	d003      	beq.n	80173dc <TIM_OC2_SetConfig+0xac>
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	4a1a      	ldr	r2, [pc, #104]	@ (8017440 <TIM_OC2_SetConfig+0x110>)
 80173d8:	4293      	cmp	r3, r2
 80173da:	d113      	bne.n	8017404 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80173dc:	693b      	ldr	r3, [r7, #16]
 80173de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80173e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80173e4:	693b      	ldr	r3, [r7, #16]
 80173e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80173ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80173ec:	683b      	ldr	r3, [r7, #0]
 80173ee:	695b      	ldr	r3, [r3, #20]
 80173f0:	009b      	lsls	r3, r3, #2
 80173f2:	693a      	ldr	r2, [r7, #16]
 80173f4:	4313      	orrs	r3, r2
 80173f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80173f8:	683b      	ldr	r3, [r7, #0]
 80173fa:	699b      	ldr	r3, [r3, #24]
 80173fc:	009b      	lsls	r3, r3, #2
 80173fe:	693a      	ldr	r2, [r7, #16]
 8017400:	4313      	orrs	r3, r2
 8017402:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	693a      	ldr	r2, [r7, #16]
 8017408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	68fa      	ldr	r2, [r7, #12]
 801740e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8017410:	683b      	ldr	r3, [r7, #0]
 8017412:	685a      	ldr	r2, [r3, #4]
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	697a      	ldr	r2, [r7, #20]
 801741c:	621a      	str	r2, [r3, #32]
}
 801741e:	bf00      	nop
 8017420:	371c      	adds	r7, #28
 8017422:	46bd      	mov	sp, r7
 8017424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017428:	4770      	bx	lr
 801742a:	bf00      	nop
 801742c:	feff8fff 	.word	0xfeff8fff
 8017430:	40010000 	.word	0x40010000
 8017434:	40010400 	.word	0x40010400
 8017438:	40014000 	.word	0x40014000
 801743c:	40014400 	.word	0x40014400
 8017440:	40014800 	.word	0x40014800

08017444 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017444:	b480      	push	{r7}
 8017446:	b087      	sub	sp, #28
 8017448:	af00      	add	r7, sp, #0
 801744a:	6078      	str	r0, [r7, #4]
 801744c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	6a1b      	ldr	r3, [r3, #32]
 8017452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	6a1b      	ldr	r3, [r3, #32]
 8017458:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	685b      	ldr	r3, [r3, #4]
 8017464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	69db      	ldr	r3, [r3, #28]
 801746a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801746c:	68fa      	ldr	r2, [r7, #12]
 801746e:	4b33      	ldr	r3, [pc, #204]	@ (801753c <TIM_OC3_SetConfig+0xf8>)
 8017470:	4013      	ands	r3, r2
 8017472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	f023 0303 	bic.w	r3, r3, #3
 801747a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801747c:	683b      	ldr	r3, [r7, #0]
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	68fa      	ldr	r2, [r7, #12]
 8017482:	4313      	orrs	r3, r2
 8017484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8017486:	697b      	ldr	r3, [r7, #20]
 8017488:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801748c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801748e:	683b      	ldr	r3, [r7, #0]
 8017490:	689b      	ldr	r3, [r3, #8]
 8017492:	021b      	lsls	r3, r3, #8
 8017494:	697a      	ldr	r2, [r7, #20]
 8017496:	4313      	orrs	r3, r2
 8017498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	4a28      	ldr	r2, [pc, #160]	@ (8017540 <TIM_OC3_SetConfig+0xfc>)
 801749e:	4293      	cmp	r3, r2
 80174a0:	d003      	beq.n	80174aa <TIM_OC3_SetConfig+0x66>
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	4a27      	ldr	r2, [pc, #156]	@ (8017544 <TIM_OC3_SetConfig+0x100>)
 80174a6:	4293      	cmp	r3, r2
 80174a8:	d10d      	bne.n	80174c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80174aa:	697b      	ldr	r3, [r7, #20]
 80174ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80174b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80174b2:	683b      	ldr	r3, [r7, #0]
 80174b4:	68db      	ldr	r3, [r3, #12]
 80174b6:	021b      	lsls	r3, r3, #8
 80174b8:	697a      	ldr	r2, [r7, #20]
 80174ba:	4313      	orrs	r3, r2
 80174bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80174be:	697b      	ldr	r3, [r7, #20]
 80174c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80174c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	4a1d      	ldr	r2, [pc, #116]	@ (8017540 <TIM_OC3_SetConfig+0xfc>)
 80174ca:	4293      	cmp	r3, r2
 80174cc:	d00f      	beq.n	80174ee <TIM_OC3_SetConfig+0xaa>
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	4a1c      	ldr	r2, [pc, #112]	@ (8017544 <TIM_OC3_SetConfig+0x100>)
 80174d2:	4293      	cmp	r3, r2
 80174d4:	d00b      	beq.n	80174ee <TIM_OC3_SetConfig+0xaa>
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	4a1b      	ldr	r2, [pc, #108]	@ (8017548 <TIM_OC3_SetConfig+0x104>)
 80174da:	4293      	cmp	r3, r2
 80174dc:	d007      	beq.n	80174ee <TIM_OC3_SetConfig+0xaa>
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	4a1a      	ldr	r2, [pc, #104]	@ (801754c <TIM_OC3_SetConfig+0x108>)
 80174e2:	4293      	cmp	r3, r2
 80174e4:	d003      	beq.n	80174ee <TIM_OC3_SetConfig+0xaa>
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	4a19      	ldr	r2, [pc, #100]	@ (8017550 <TIM_OC3_SetConfig+0x10c>)
 80174ea:	4293      	cmp	r3, r2
 80174ec:	d113      	bne.n	8017516 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80174ee:	693b      	ldr	r3, [r7, #16]
 80174f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80174f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80174f6:	693b      	ldr	r3, [r7, #16]
 80174f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80174fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80174fe:	683b      	ldr	r3, [r7, #0]
 8017500:	695b      	ldr	r3, [r3, #20]
 8017502:	011b      	lsls	r3, r3, #4
 8017504:	693a      	ldr	r2, [r7, #16]
 8017506:	4313      	orrs	r3, r2
 8017508:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801750a:	683b      	ldr	r3, [r7, #0]
 801750c:	699b      	ldr	r3, [r3, #24]
 801750e:	011b      	lsls	r3, r3, #4
 8017510:	693a      	ldr	r2, [r7, #16]
 8017512:	4313      	orrs	r3, r2
 8017514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	693a      	ldr	r2, [r7, #16]
 801751a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	68fa      	ldr	r2, [r7, #12]
 8017520:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8017522:	683b      	ldr	r3, [r7, #0]
 8017524:	685a      	ldr	r2, [r3, #4]
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	697a      	ldr	r2, [r7, #20]
 801752e:	621a      	str	r2, [r3, #32]
}
 8017530:	bf00      	nop
 8017532:	371c      	adds	r7, #28
 8017534:	46bd      	mov	sp, r7
 8017536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801753a:	4770      	bx	lr
 801753c:	fffeff8f 	.word	0xfffeff8f
 8017540:	40010000 	.word	0x40010000
 8017544:	40010400 	.word	0x40010400
 8017548:	40014000 	.word	0x40014000
 801754c:	40014400 	.word	0x40014400
 8017550:	40014800 	.word	0x40014800

08017554 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017554:	b480      	push	{r7}
 8017556:	b087      	sub	sp, #28
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
 801755c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	6a1b      	ldr	r3, [r3, #32]
 8017562:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	6a1b      	ldr	r3, [r3, #32]
 8017568:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	685b      	ldr	r3, [r3, #4]
 8017574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	69db      	ldr	r3, [r3, #28]
 801757a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801757c:	68fa      	ldr	r2, [r7, #12]
 801757e:	4b24      	ldr	r3, [pc, #144]	@ (8017610 <TIM_OC4_SetConfig+0xbc>)
 8017580:	4013      	ands	r3, r2
 8017582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801758a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801758c:	683b      	ldr	r3, [r7, #0]
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	021b      	lsls	r3, r3, #8
 8017592:	68fa      	ldr	r2, [r7, #12]
 8017594:	4313      	orrs	r3, r2
 8017596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017598:	693b      	ldr	r3, [r7, #16]
 801759a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801759e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80175a0:	683b      	ldr	r3, [r7, #0]
 80175a2:	689b      	ldr	r3, [r3, #8]
 80175a4:	031b      	lsls	r3, r3, #12
 80175a6:	693a      	ldr	r2, [r7, #16]
 80175a8:	4313      	orrs	r3, r2
 80175aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	4a19      	ldr	r2, [pc, #100]	@ (8017614 <TIM_OC4_SetConfig+0xc0>)
 80175b0:	4293      	cmp	r3, r2
 80175b2:	d00f      	beq.n	80175d4 <TIM_OC4_SetConfig+0x80>
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	4a18      	ldr	r2, [pc, #96]	@ (8017618 <TIM_OC4_SetConfig+0xc4>)
 80175b8:	4293      	cmp	r3, r2
 80175ba:	d00b      	beq.n	80175d4 <TIM_OC4_SetConfig+0x80>
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	4a17      	ldr	r2, [pc, #92]	@ (801761c <TIM_OC4_SetConfig+0xc8>)
 80175c0:	4293      	cmp	r3, r2
 80175c2:	d007      	beq.n	80175d4 <TIM_OC4_SetConfig+0x80>
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	4a16      	ldr	r2, [pc, #88]	@ (8017620 <TIM_OC4_SetConfig+0xcc>)
 80175c8:	4293      	cmp	r3, r2
 80175ca:	d003      	beq.n	80175d4 <TIM_OC4_SetConfig+0x80>
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	4a15      	ldr	r2, [pc, #84]	@ (8017624 <TIM_OC4_SetConfig+0xd0>)
 80175d0:	4293      	cmp	r3, r2
 80175d2:	d109      	bne.n	80175e8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80175d4:	697b      	ldr	r3, [r7, #20]
 80175d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80175da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80175dc:	683b      	ldr	r3, [r7, #0]
 80175de:	695b      	ldr	r3, [r3, #20]
 80175e0:	019b      	lsls	r3, r3, #6
 80175e2:	697a      	ldr	r2, [r7, #20]
 80175e4:	4313      	orrs	r3, r2
 80175e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	697a      	ldr	r2, [r7, #20]
 80175ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	68fa      	ldr	r2, [r7, #12]
 80175f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80175f4:	683b      	ldr	r3, [r7, #0]
 80175f6:	685a      	ldr	r2, [r3, #4]
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	693a      	ldr	r2, [r7, #16]
 8017600:	621a      	str	r2, [r3, #32]
}
 8017602:	bf00      	nop
 8017604:	371c      	adds	r7, #28
 8017606:	46bd      	mov	sp, r7
 8017608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760c:	4770      	bx	lr
 801760e:	bf00      	nop
 8017610:	feff8fff 	.word	0xfeff8fff
 8017614:	40010000 	.word	0x40010000
 8017618:	40010400 	.word	0x40010400
 801761c:	40014000 	.word	0x40014000
 8017620:	40014400 	.word	0x40014400
 8017624:	40014800 	.word	0x40014800

08017628 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017628:	b480      	push	{r7}
 801762a:	b087      	sub	sp, #28
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
 8017630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	6a1b      	ldr	r3, [r3, #32]
 8017636:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	6a1b      	ldr	r3, [r3, #32]
 801763c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	685b      	ldr	r3, [r3, #4]
 8017648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801764e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8017650:	68fa      	ldr	r2, [r7, #12]
 8017652:	4b21      	ldr	r3, [pc, #132]	@ (80176d8 <TIM_OC5_SetConfig+0xb0>)
 8017654:	4013      	ands	r3, r2
 8017656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017658:	683b      	ldr	r3, [r7, #0]
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	68fa      	ldr	r2, [r7, #12]
 801765e:	4313      	orrs	r3, r2
 8017660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8017662:	693b      	ldr	r3, [r7, #16]
 8017664:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8017668:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801766a:	683b      	ldr	r3, [r7, #0]
 801766c:	689b      	ldr	r3, [r3, #8]
 801766e:	041b      	lsls	r3, r3, #16
 8017670:	693a      	ldr	r2, [r7, #16]
 8017672:	4313      	orrs	r3, r2
 8017674:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	4a18      	ldr	r2, [pc, #96]	@ (80176dc <TIM_OC5_SetConfig+0xb4>)
 801767a:	4293      	cmp	r3, r2
 801767c:	d00f      	beq.n	801769e <TIM_OC5_SetConfig+0x76>
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	4a17      	ldr	r2, [pc, #92]	@ (80176e0 <TIM_OC5_SetConfig+0xb8>)
 8017682:	4293      	cmp	r3, r2
 8017684:	d00b      	beq.n	801769e <TIM_OC5_SetConfig+0x76>
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	4a16      	ldr	r2, [pc, #88]	@ (80176e4 <TIM_OC5_SetConfig+0xbc>)
 801768a:	4293      	cmp	r3, r2
 801768c:	d007      	beq.n	801769e <TIM_OC5_SetConfig+0x76>
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	4a15      	ldr	r2, [pc, #84]	@ (80176e8 <TIM_OC5_SetConfig+0xc0>)
 8017692:	4293      	cmp	r3, r2
 8017694:	d003      	beq.n	801769e <TIM_OC5_SetConfig+0x76>
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	4a14      	ldr	r2, [pc, #80]	@ (80176ec <TIM_OC5_SetConfig+0xc4>)
 801769a:	4293      	cmp	r3, r2
 801769c:	d109      	bne.n	80176b2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801769e:	697b      	ldr	r3, [r7, #20]
 80176a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80176a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	695b      	ldr	r3, [r3, #20]
 80176aa:	021b      	lsls	r3, r3, #8
 80176ac:	697a      	ldr	r2, [r7, #20]
 80176ae:	4313      	orrs	r3, r2
 80176b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	697a      	ldr	r2, [r7, #20]
 80176b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	68fa      	ldr	r2, [r7, #12]
 80176bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80176be:	683b      	ldr	r3, [r7, #0]
 80176c0:	685a      	ldr	r2, [r3, #4]
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	693a      	ldr	r2, [r7, #16]
 80176ca:	621a      	str	r2, [r3, #32]
}
 80176cc:	bf00      	nop
 80176ce:	371c      	adds	r7, #28
 80176d0:	46bd      	mov	sp, r7
 80176d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d6:	4770      	bx	lr
 80176d8:	fffeff8f 	.word	0xfffeff8f
 80176dc:	40010000 	.word	0x40010000
 80176e0:	40010400 	.word	0x40010400
 80176e4:	40014000 	.word	0x40014000
 80176e8:	40014400 	.word	0x40014400
 80176ec:	40014800 	.word	0x40014800

080176f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80176f0:	b480      	push	{r7}
 80176f2:	b087      	sub	sp, #28
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
 80176f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	6a1b      	ldr	r3, [r3, #32]
 80176fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	6a1b      	ldr	r3, [r3, #32]
 8017704:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	685b      	ldr	r3, [r3, #4]
 8017710:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8017718:	68fa      	ldr	r2, [r7, #12]
 801771a:	4b22      	ldr	r3, [pc, #136]	@ (80177a4 <TIM_OC6_SetConfig+0xb4>)
 801771c:	4013      	ands	r3, r2
 801771e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017720:	683b      	ldr	r3, [r7, #0]
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	021b      	lsls	r3, r3, #8
 8017726:	68fa      	ldr	r2, [r7, #12]
 8017728:	4313      	orrs	r3, r2
 801772a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801772c:	693b      	ldr	r3, [r7, #16]
 801772e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8017732:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8017734:	683b      	ldr	r3, [r7, #0]
 8017736:	689b      	ldr	r3, [r3, #8]
 8017738:	051b      	lsls	r3, r3, #20
 801773a:	693a      	ldr	r2, [r7, #16]
 801773c:	4313      	orrs	r3, r2
 801773e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	4a19      	ldr	r2, [pc, #100]	@ (80177a8 <TIM_OC6_SetConfig+0xb8>)
 8017744:	4293      	cmp	r3, r2
 8017746:	d00f      	beq.n	8017768 <TIM_OC6_SetConfig+0x78>
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	4a18      	ldr	r2, [pc, #96]	@ (80177ac <TIM_OC6_SetConfig+0xbc>)
 801774c:	4293      	cmp	r3, r2
 801774e:	d00b      	beq.n	8017768 <TIM_OC6_SetConfig+0x78>
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	4a17      	ldr	r2, [pc, #92]	@ (80177b0 <TIM_OC6_SetConfig+0xc0>)
 8017754:	4293      	cmp	r3, r2
 8017756:	d007      	beq.n	8017768 <TIM_OC6_SetConfig+0x78>
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	4a16      	ldr	r2, [pc, #88]	@ (80177b4 <TIM_OC6_SetConfig+0xc4>)
 801775c:	4293      	cmp	r3, r2
 801775e:	d003      	beq.n	8017768 <TIM_OC6_SetConfig+0x78>
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	4a15      	ldr	r2, [pc, #84]	@ (80177b8 <TIM_OC6_SetConfig+0xc8>)
 8017764:	4293      	cmp	r3, r2
 8017766:	d109      	bne.n	801777c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8017768:	697b      	ldr	r3, [r7, #20]
 801776a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801776e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8017770:	683b      	ldr	r3, [r7, #0]
 8017772:	695b      	ldr	r3, [r3, #20]
 8017774:	029b      	lsls	r3, r3, #10
 8017776:	697a      	ldr	r2, [r7, #20]
 8017778:	4313      	orrs	r3, r2
 801777a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	697a      	ldr	r2, [r7, #20]
 8017780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	68fa      	ldr	r2, [r7, #12]
 8017786:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8017788:	683b      	ldr	r3, [r7, #0]
 801778a:	685a      	ldr	r2, [r3, #4]
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	693a      	ldr	r2, [r7, #16]
 8017794:	621a      	str	r2, [r3, #32]
}
 8017796:	bf00      	nop
 8017798:	371c      	adds	r7, #28
 801779a:	46bd      	mov	sp, r7
 801779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a0:	4770      	bx	lr
 80177a2:	bf00      	nop
 80177a4:	feff8fff 	.word	0xfeff8fff
 80177a8:	40010000 	.word	0x40010000
 80177ac:	40010400 	.word	0x40010400
 80177b0:	40014000 	.word	0x40014000
 80177b4:	40014400 	.word	0x40014400
 80177b8:	40014800 	.word	0x40014800

080177bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80177bc:	b480      	push	{r7}
 80177be:	b087      	sub	sp, #28
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	60f8      	str	r0, [r7, #12]
 80177c4:	60b9      	str	r1, [r7, #8]
 80177c6:	607a      	str	r2, [r7, #4]
 80177c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	6a1b      	ldr	r3, [r3, #32]
 80177ce:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	6a1b      	ldr	r3, [r3, #32]
 80177d4:	f023 0201 	bic.w	r2, r3, #1
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	699b      	ldr	r3, [r3, #24]
 80177e0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	4a2c      	ldr	r2, [pc, #176]	@ (8017898 <TIM_TI1_SetConfig+0xdc>)
 80177e6:	4293      	cmp	r3, r2
 80177e8:	d023      	beq.n	8017832 <TIM_TI1_SetConfig+0x76>
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80177f0:	d01f      	beq.n	8017832 <TIM_TI1_SetConfig+0x76>
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	4a29      	ldr	r2, [pc, #164]	@ (801789c <TIM_TI1_SetConfig+0xe0>)
 80177f6:	4293      	cmp	r3, r2
 80177f8:	d01b      	beq.n	8017832 <TIM_TI1_SetConfig+0x76>
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	4a28      	ldr	r2, [pc, #160]	@ (80178a0 <TIM_TI1_SetConfig+0xe4>)
 80177fe:	4293      	cmp	r3, r2
 8017800:	d017      	beq.n	8017832 <TIM_TI1_SetConfig+0x76>
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	4a27      	ldr	r2, [pc, #156]	@ (80178a4 <TIM_TI1_SetConfig+0xe8>)
 8017806:	4293      	cmp	r3, r2
 8017808:	d013      	beq.n	8017832 <TIM_TI1_SetConfig+0x76>
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	4a26      	ldr	r2, [pc, #152]	@ (80178a8 <TIM_TI1_SetConfig+0xec>)
 801780e:	4293      	cmp	r3, r2
 8017810:	d00f      	beq.n	8017832 <TIM_TI1_SetConfig+0x76>
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	4a25      	ldr	r2, [pc, #148]	@ (80178ac <TIM_TI1_SetConfig+0xf0>)
 8017816:	4293      	cmp	r3, r2
 8017818:	d00b      	beq.n	8017832 <TIM_TI1_SetConfig+0x76>
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	4a24      	ldr	r2, [pc, #144]	@ (80178b0 <TIM_TI1_SetConfig+0xf4>)
 801781e:	4293      	cmp	r3, r2
 8017820:	d007      	beq.n	8017832 <TIM_TI1_SetConfig+0x76>
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	4a23      	ldr	r2, [pc, #140]	@ (80178b4 <TIM_TI1_SetConfig+0xf8>)
 8017826:	4293      	cmp	r3, r2
 8017828:	d003      	beq.n	8017832 <TIM_TI1_SetConfig+0x76>
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	4a22      	ldr	r2, [pc, #136]	@ (80178b8 <TIM_TI1_SetConfig+0xfc>)
 801782e:	4293      	cmp	r3, r2
 8017830:	d101      	bne.n	8017836 <TIM_TI1_SetConfig+0x7a>
 8017832:	2301      	movs	r3, #1
 8017834:	e000      	b.n	8017838 <TIM_TI1_SetConfig+0x7c>
 8017836:	2300      	movs	r3, #0
 8017838:	2b00      	cmp	r3, #0
 801783a:	d008      	beq.n	801784e <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801783c:	697b      	ldr	r3, [r7, #20]
 801783e:	f023 0303 	bic.w	r3, r3, #3
 8017842:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8017844:	697a      	ldr	r2, [r7, #20]
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	4313      	orrs	r3, r2
 801784a:	617b      	str	r3, [r7, #20]
 801784c:	e003      	b.n	8017856 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801784e:	697b      	ldr	r3, [r7, #20]
 8017850:	f043 0301 	orr.w	r3, r3, #1
 8017854:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017856:	697b      	ldr	r3, [r7, #20]
 8017858:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801785c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801785e:	683b      	ldr	r3, [r7, #0]
 8017860:	011b      	lsls	r3, r3, #4
 8017862:	b2db      	uxtb	r3, r3
 8017864:	697a      	ldr	r2, [r7, #20]
 8017866:	4313      	orrs	r3, r2
 8017868:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801786a:	693b      	ldr	r3, [r7, #16]
 801786c:	f023 030a 	bic.w	r3, r3, #10
 8017870:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8017872:	68bb      	ldr	r3, [r7, #8]
 8017874:	f003 030a 	and.w	r3, r3, #10
 8017878:	693a      	ldr	r2, [r7, #16]
 801787a:	4313      	orrs	r3, r2
 801787c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	697a      	ldr	r2, [r7, #20]
 8017882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	693a      	ldr	r2, [r7, #16]
 8017888:	621a      	str	r2, [r3, #32]
}
 801788a:	bf00      	nop
 801788c:	371c      	adds	r7, #28
 801788e:	46bd      	mov	sp, r7
 8017890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017894:	4770      	bx	lr
 8017896:	bf00      	nop
 8017898:	40010000 	.word	0x40010000
 801789c:	40000400 	.word	0x40000400
 80178a0:	40000800 	.word	0x40000800
 80178a4:	40000c00 	.word	0x40000c00
 80178a8:	40010400 	.word	0x40010400
 80178ac:	40001800 	.word	0x40001800
 80178b0:	40014000 	.word	0x40014000
 80178b4:	4000e000 	.word	0x4000e000
 80178b8:	4000e400 	.word	0x4000e400

080178bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80178bc:	b480      	push	{r7}
 80178be:	b087      	sub	sp, #28
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	60f8      	str	r0, [r7, #12]
 80178c4:	60b9      	str	r1, [r7, #8]
 80178c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	6a1b      	ldr	r3, [r3, #32]
 80178cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	6a1b      	ldr	r3, [r3, #32]
 80178d2:	f023 0201 	bic.w	r2, r3, #1
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	699b      	ldr	r3, [r3, #24]
 80178de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80178e0:	693b      	ldr	r3, [r7, #16]
 80178e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80178e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	011b      	lsls	r3, r3, #4
 80178ec:	693a      	ldr	r2, [r7, #16]
 80178ee:	4313      	orrs	r3, r2
 80178f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80178f2:	697b      	ldr	r3, [r7, #20]
 80178f4:	f023 030a 	bic.w	r3, r3, #10
 80178f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80178fa:	697a      	ldr	r2, [r7, #20]
 80178fc:	68bb      	ldr	r3, [r7, #8]
 80178fe:	4313      	orrs	r3, r2
 8017900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	693a      	ldr	r2, [r7, #16]
 8017906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	697a      	ldr	r2, [r7, #20]
 801790c:	621a      	str	r2, [r3, #32]
}
 801790e:	bf00      	nop
 8017910:	371c      	adds	r7, #28
 8017912:	46bd      	mov	sp, r7
 8017914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017918:	4770      	bx	lr

0801791a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801791a:	b480      	push	{r7}
 801791c:	b087      	sub	sp, #28
 801791e:	af00      	add	r7, sp, #0
 8017920:	60f8      	str	r0, [r7, #12]
 8017922:	60b9      	str	r1, [r7, #8]
 8017924:	607a      	str	r2, [r7, #4]
 8017926:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	6a1b      	ldr	r3, [r3, #32]
 801792c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	6a1b      	ldr	r3, [r3, #32]
 8017932:	f023 0210 	bic.w	r2, r3, #16
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	699b      	ldr	r3, [r3, #24]
 801793e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8017940:	693b      	ldr	r3, [r7, #16]
 8017942:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	021b      	lsls	r3, r3, #8
 801794c:	693a      	ldr	r2, [r7, #16]
 801794e:	4313      	orrs	r3, r2
 8017950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017952:	693b      	ldr	r3, [r7, #16]
 8017954:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017958:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801795a:	683b      	ldr	r3, [r7, #0]
 801795c:	031b      	lsls	r3, r3, #12
 801795e:	b29b      	uxth	r3, r3
 8017960:	693a      	ldr	r2, [r7, #16]
 8017962:	4313      	orrs	r3, r2
 8017964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017966:	697b      	ldr	r3, [r7, #20]
 8017968:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801796c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801796e:	68bb      	ldr	r3, [r7, #8]
 8017970:	011b      	lsls	r3, r3, #4
 8017972:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8017976:	697a      	ldr	r2, [r7, #20]
 8017978:	4313      	orrs	r3, r2
 801797a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	693a      	ldr	r2, [r7, #16]
 8017980:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	697a      	ldr	r2, [r7, #20]
 8017986:	621a      	str	r2, [r3, #32]
}
 8017988:	bf00      	nop
 801798a:	371c      	adds	r7, #28
 801798c:	46bd      	mov	sp, r7
 801798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017992:	4770      	bx	lr

08017994 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017994:	b480      	push	{r7}
 8017996:	b087      	sub	sp, #28
 8017998:	af00      	add	r7, sp, #0
 801799a:	60f8      	str	r0, [r7, #12]
 801799c:	60b9      	str	r1, [r7, #8]
 801799e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	6a1b      	ldr	r3, [r3, #32]
 80179a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	6a1b      	ldr	r3, [r3, #32]
 80179aa:	f023 0210 	bic.w	r2, r3, #16
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	699b      	ldr	r3, [r3, #24]
 80179b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80179b8:	693b      	ldr	r3, [r7, #16]
 80179ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80179be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	031b      	lsls	r3, r3, #12
 80179c4:	693a      	ldr	r2, [r7, #16]
 80179c6:	4313      	orrs	r3, r2
 80179c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80179ca:	697b      	ldr	r3, [r7, #20]
 80179cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80179d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80179d2:	68bb      	ldr	r3, [r7, #8]
 80179d4:	011b      	lsls	r3, r3, #4
 80179d6:	697a      	ldr	r2, [r7, #20]
 80179d8:	4313      	orrs	r3, r2
 80179da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	693a      	ldr	r2, [r7, #16]
 80179e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	697a      	ldr	r2, [r7, #20]
 80179e6:	621a      	str	r2, [r3, #32]
}
 80179e8:	bf00      	nop
 80179ea:	371c      	adds	r7, #28
 80179ec:	46bd      	mov	sp, r7
 80179ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f2:	4770      	bx	lr

080179f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80179f4:	b480      	push	{r7}
 80179f6:	b087      	sub	sp, #28
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	60f8      	str	r0, [r7, #12]
 80179fc:	60b9      	str	r1, [r7, #8]
 80179fe:	607a      	str	r2, [r7, #4]
 8017a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	6a1b      	ldr	r3, [r3, #32]
 8017a06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	6a1b      	ldr	r3, [r3, #32]
 8017a0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	69db      	ldr	r3, [r3, #28]
 8017a18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8017a1a:	693b      	ldr	r3, [r7, #16]
 8017a1c:	f023 0303 	bic.w	r3, r3, #3
 8017a20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8017a22:	693a      	ldr	r2, [r7, #16]
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	4313      	orrs	r3, r2
 8017a28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8017a2a:	693b      	ldr	r3, [r7, #16]
 8017a2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017a30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8017a32:	683b      	ldr	r3, [r7, #0]
 8017a34:	011b      	lsls	r3, r3, #4
 8017a36:	b2db      	uxtb	r3, r3
 8017a38:	693a      	ldr	r2, [r7, #16]
 8017a3a:	4313      	orrs	r3, r2
 8017a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8017a3e:	697b      	ldr	r3, [r7, #20]
 8017a40:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8017a44:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8017a46:	68bb      	ldr	r3, [r7, #8]
 8017a48:	021b      	lsls	r3, r3, #8
 8017a4a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8017a4e:	697a      	ldr	r2, [r7, #20]
 8017a50:	4313      	orrs	r3, r2
 8017a52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	693a      	ldr	r2, [r7, #16]
 8017a58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	697a      	ldr	r2, [r7, #20]
 8017a5e:	621a      	str	r2, [r3, #32]
}
 8017a60:	bf00      	nop
 8017a62:	371c      	adds	r7, #28
 8017a64:	46bd      	mov	sp, r7
 8017a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a6a:	4770      	bx	lr

08017a6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017a6c:	b480      	push	{r7}
 8017a6e:	b087      	sub	sp, #28
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	60f8      	str	r0, [r7, #12]
 8017a74:	60b9      	str	r1, [r7, #8]
 8017a76:	607a      	str	r2, [r7, #4]
 8017a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	6a1b      	ldr	r3, [r3, #32]
 8017a7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	6a1b      	ldr	r3, [r3, #32]
 8017a84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	69db      	ldr	r3, [r3, #28]
 8017a90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8017a92:	693b      	ldr	r3, [r7, #16]
 8017a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017a98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	021b      	lsls	r3, r3, #8
 8017a9e:	693a      	ldr	r2, [r7, #16]
 8017aa0:	4313      	orrs	r3, r2
 8017aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8017aa4:	693b      	ldr	r3, [r7, #16]
 8017aa6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017aaa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8017aac:	683b      	ldr	r3, [r7, #0]
 8017aae:	031b      	lsls	r3, r3, #12
 8017ab0:	b29b      	uxth	r3, r3
 8017ab2:	693a      	ldr	r2, [r7, #16]
 8017ab4:	4313      	orrs	r3, r2
 8017ab6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8017ab8:	697b      	ldr	r3, [r7, #20]
 8017aba:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8017abe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8017ac0:	68bb      	ldr	r3, [r7, #8]
 8017ac2:	031b      	lsls	r3, r3, #12
 8017ac4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8017ac8:	697a      	ldr	r2, [r7, #20]
 8017aca:	4313      	orrs	r3, r2
 8017acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	693a      	ldr	r2, [r7, #16]
 8017ad2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	697a      	ldr	r2, [r7, #20]
 8017ad8:	621a      	str	r2, [r3, #32]
}
 8017ada:	bf00      	nop
 8017adc:	371c      	adds	r7, #28
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae4:	4770      	bx	lr
	...

08017ae8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017ae8:	b480      	push	{r7}
 8017aea:	b085      	sub	sp, #20
 8017aec:	af00      	add	r7, sp, #0
 8017aee:	6078      	str	r0, [r7, #4]
 8017af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	689b      	ldr	r3, [r3, #8]
 8017af6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017af8:	68fa      	ldr	r2, [r7, #12]
 8017afa:	4b09      	ldr	r3, [pc, #36]	@ (8017b20 <TIM_ITRx_SetConfig+0x38>)
 8017afc:	4013      	ands	r3, r2
 8017afe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017b00:	683a      	ldr	r2, [r7, #0]
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	4313      	orrs	r3, r2
 8017b06:	f043 0307 	orr.w	r3, r3, #7
 8017b0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	68fa      	ldr	r2, [r7, #12]
 8017b10:	609a      	str	r2, [r3, #8]
}
 8017b12:	bf00      	nop
 8017b14:	3714      	adds	r7, #20
 8017b16:	46bd      	mov	sp, r7
 8017b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b1c:	4770      	bx	lr
 8017b1e:	bf00      	nop
 8017b20:	ffcfff8f 	.word	0xffcfff8f

08017b24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017b24:	b480      	push	{r7}
 8017b26:	b087      	sub	sp, #28
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	60f8      	str	r0, [r7, #12]
 8017b2c:	60b9      	str	r1, [r7, #8]
 8017b2e:	607a      	str	r2, [r7, #4]
 8017b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	689b      	ldr	r3, [r3, #8]
 8017b36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017b38:	697b      	ldr	r3, [r7, #20]
 8017b3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017b3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017b40:	683b      	ldr	r3, [r7, #0]
 8017b42:	021a      	lsls	r2, r3, #8
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	431a      	orrs	r2, r3
 8017b48:	68bb      	ldr	r3, [r7, #8]
 8017b4a:	4313      	orrs	r3, r2
 8017b4c:	697a      	ldr	r2, [r7, #20]
 8017b4e:	4313      	orrs	r3, r2
 8017b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	697a      	ldr	r2, [r7, #20]
 8017b56:	609a      	str	r2, [r3, #8]
}
 8017b58:	bf00      	nop
 8017b5a:	371c      	adds	r7, #28
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b62:	4770      	bx	lr

08017b64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8017b64:	b480      	push	{r7}
 8017b66:	b087      	sub	sp, #28
 8017b68:	af00      	add	r7, sp, #0
 8017b6a:	60f8      	str	r0, [r7, #12]
 8017b6c:	60b9      	str	r1, [r7, #8]
 8017b6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017b70:	68bb      	ldr	r3, [r7, #8]
 8017b72:	f003 031f 	and.w	r3, r3, #31
 8017b76:	2201      	movs	r2, #1
 8017b78:	fa02 f303 	lsl.w	r3, r2, r3
 8017b7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	6a1a      	ldr	r2, [r3, #32]
 8017b82:	697b      	ldr	r3, [r7, #20]
 8017b84:	43db      	mvns	r3, r3
 8017b86:	401a      	ands	r2, r3
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	6a1a      	ldr	r2, [r3, #32]
 8017b90:	68bb      	ldr	r3, [r7, #8]
 8017b92:	f003 031f 	and.w	r3, r3, #31
 8017b96:	6879      	ldr	r1, [r7, #4]
 8017b98:	fa01 f303 	lsl.w	r3, r1, r3
 8017b9c:	431a      	orrs	r2, r3
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	621a      	str	r2, [r3, #32]
}
 8017ba2:	bf00      	nop
 8017ba4:	371c      	adds	r7, #28
 8017ba6:	46bd      	mov	sp, r7
 8017ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bac:	4770      	bx	lr
	...

08017bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017bb0:	b480      	push	{r7}
 8017bb2:	b085      	sub	sp, #20
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	6078      	str	r0, [r7, #4]
 8017bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017bc0:	2b01      	cmp	r3, #1
 8017bc2:	d101      	bne.n	8017bc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017bc4:	2302      	movs	r3, #2
 8017bc6:	e077      	b.n	8017cb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	2201      	movs	r2, #1
 8017bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	2202      	movs	r2, #2
 8017bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	685b      	ldr	r3, [r3, #4]
 8017bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	689b      	ldr	r3, [r3, #8]
 8017be6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	4a35      	ldr	r2, [pc, #212]	@ (8017cc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017bee:	4293      	cmp	r3, r2
 8017bf0:	d004      	beq.n	8017bfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	4a34      	ldr	r2, [pc, #208]	@ (8017cc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017bf8:	4293      	cmp	r3, r2
 8017bfa:	d108      	bne.n	8017c0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8017c02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8017c04:	683b      	ldr	r3, [r7, #0]
 8017c06:	685b      	ldr	r3, [r3, #4]
 8017c08:	68fa      	ldr	r2, [r7, #12]
 8017c0a:	4313      	orrs	r3, r2
 8017c0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017c14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017c16:	683b      	ldr	r3, [r7, #0]
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	68fa      	ldr	r2, [r7, #12]
 8017c1c:	4313      	orrs	r3, r2
 8017c1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	68fa      	ldr	r2, [r7, #12]
 8017c26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	4a25      	ldr	r2, [pc, #148]	@ (8017cc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017c2e:	4293      	cmp	r3, r2
 8017c30:	d02c      	beq.n	8017c8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017c3a:	d027      	beq.n	8017c8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	4a22      	ldr	r2, [pc, #136]	@ (8017ccc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8017c42:	4293      	cmp	r3, r2
 8017c44:	d022      	beq.n	8017c8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	4a21      	ldr	r2, [pc, #132]	@ (8017cd0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8017c4c:	4293      	cmp	r3, r2
 8017c4e:	d01d      	beq.n	8017c8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	4a1f      	ldr	r2, [pc, #124]	@ (8017cd4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8017c56:	4293      	cmp	r3, r2
 8017c58:	d018      	beq.n	8017c8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8017cc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017c60:	4293      	cmp	r3, r2
 8017c62:	d013      	beq.n	8017c8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	4a1b      	ldr	r2, [pc, #108]	@ (8017cd8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8017c6a:	4293      	cmp	r3, r2
 8017c6c:	d00e      	beq.n	8017c8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	4a1a      	ldr	r2, [pc, #104]	@ (8017cdc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8017c74:	4293      	cmp	r3, r2
 8017c76:	d009      	beq.n	8017c8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	4a18      	ldr	r2, [pc, #96]	@ (8017ce0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8017c7e:	4293      	cmp	r3, r2
 8017c80:	d004      	beq.n	8017c8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	4a17      	ldr	r2, [pc, #92]	@ (8017ce4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8017c88:	4293      	cmp	r3, r2
 8017c8a:	d10c      	bne.n	8017ca6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017c8c:	68bb      	ldr	r3, [r7, #8]
 8017c8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017c92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017c94:	683b      	ldr	r3, [r7, #0]
 8017c96:	689b      	ldr	r3, [r3, #8]
 8017c98:	68ba      	ldr	r2, [r7, #8]
 8017c9a:	4313      	orrs	r3, r2
 8017c9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	68ba      	ldr	r2, [r7, #8]
 8017ca4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	2201      	movs	r2, #1
 8017caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017cb6:	2300      	movs	r3, #0
}
 8017cb8:	4618      	mov	r0, r3
 8017cba:	3714      	adds	r7, #20
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc2:	4770      	bx	lr
 8017cc4:	40010000 	.word	0x40010000
 8017cc8:	40010400 	.word	0x40010400
 8017ccc:	40000400 	.word	0x40000400
 8017cd0:	40000800 	.word	0x40000800
 8017cd4:	40000c00 	.word	0x40000c00
 8017cd8:	40001800 	.word	0x40001800
 8017cdc:	40014000 	.word	0x40014000
 8017ce0:	4000e000 	.word	0x4000e000
 8017ce4:	4000e400 	.word	0x4000e400

08017ce8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017ce8:	b480      	push	{r7}
 8017cea:	b085      	sub	sp, #20
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
 8017cf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8017cf2:	2300      	movs	r3, #0
 8017cf4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017cfc:	2b01      	cmp	r3, #1
 8017cfe:	d101      	bne.n	8017d04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017d00:	2302      	movs	r3, #2
 8017d02:	e073      	b.n	8017dec <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	2201      	movs	r2, #1
 8017d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8017d12:	683b      	ldr	r3, [r7, #0]
 8017d14:	68db      	ldr	r3, [r3, #12]
 8017d16:	4313      	orrs	r3, r2
 8017d18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017d20:	683b      	ldr	r3, [r7, #0]
 8017d22:	689b      	ldr	r3, [r3, #8]
 8017d24:	4313      	orrs	r3, r2
 8017d26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8017d2e:	683b      	ldr	r3, [r7, #0]
 8017d30:	685b      	ldr	r3, [r3, #4]
 8017d32:	4313      	orrs	r3, r2
 8017d34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8017d3c:	683b      	ldr	r3, [r7, #0]
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	4313      	orrs	r3, r2
 8017d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017d4a:	683b      	ldr	r3, [r7, #0]
 8017d4c:	691b      	ldr	r3, [r3, #16]
 8017d4e:	4313      	orrs	r3, r2
 8017d50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8017d58:	683b      	ldr	r3, [r7, #0]
 8017d5a:	695b      	ldr	r3, [r3, #20]
 8017d5c:	4313      	orrs	r3, r2
 8017d5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8017d66:	683b      	ldr	r3, [r7, #0]
 8017d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017d6a:	4313      	orrs	r3, r2
 8017d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8017d74:	683b      	ldr	r3, [r7, #0]
 8017d76:	699b      	ldr	r3, [r3, #24]
 8017d78:	041b      	lsls	r3, r3, #16
 8017d7a:	4313      	orrs	r3, r2
 8017d7c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8017d84:	683b      	ldr	r3, [r7, #0]
 8017d86:	69db      	ldr	r3, [r3, #28]
 8017d88:	4313      	orrs	r3, r2
 8017d8a:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	4a19      	ldr	r2, [pc, #100]	@ (8017df8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8017d92:	4293      	cmp	r3, r2
 8017d94:	d004      	beq.n	8017da0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	4a18      	ldr	r2, [pc, #96]	@ (8017dfc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8017d9c:	4293      	cmp	r3, r2
 8017d9e:	d11c      	bne.n	8017dda <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8017da6:	683b      	ldr	r3, [r7, #0]
 8017da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017daa:	051b      	lsls	r3, r3, #20
 8017dac:	4313      	orrs	r3, r2
 8017dae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8017db6:	683b      	ldr	r3, [r7, #0]
 8017db8:	6a1b      	ldr	r3, [r3, #32]
 8017dba:	4313      	orrs	r3, r2
 8017dbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8017dc4:	683b      	ldr	r3, [r7, #0]
 8017dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017dc8:	4313      	orrs	r3, r2
 8017dca:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8017dd2:	683b      	ldr	r3, [r7, #0]
 8017dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017dd6:	4313      	orrs	r3, r2
 8017dd8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	68fa      	ldr	r2, [r7, #12]
 8017de0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	2200      	movs	r2, #0
 8017de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017dea:	2300      	movs	r3, #0
}
 8017dec:	4618      	mov	r0, r3
 8017dee:	3714      	adds	r7, #20
 8017df0:	46bd      	mov	sp, r7
 8017df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df6:	4770      	bx	lr
 8017df8:	40010000 	.word	0x40010000
 8017dfc:	40010400 	.word	0x40010400

08017e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017e00:	b480      	push	{r7}
 8017e02:	b083      	sub	sp, #12
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017e08:	bf00      	nop
 8017e0a:	370c      	adds	r7, #12
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e12:	4770      	bx	lr

08017e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017e14:	b480      	push	{r7}
 8017e16:	b083      	sub	sp, #12
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017e1c:	bf00      	nop
 8017e1e:	370c      	adds	r7, #12
 8017e20:	46bd      	mov	sp, r7
 8017e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e26:	4770      	bx	lr

08017e28 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017e28:	b480      	push	{r7}
 8017e2a:	b083      	sub	sp, #12
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017e30:	bf00      	nop
 8017e32:	370c      	adds	r7, #12
 8017e34:	46bd      	mov	sp, r7
 8017e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3a:	4770      	bx	lr

08017e3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017e3c:	b580      	push	{r7, lr}
 8017e3e:	b082      	sub	sp, #8
 8017e40:	af00      	add	r7, sp, #0
 8017e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d101      	bne.n	8017e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017e4a:	2301      	movs	r3, #1
 8017e4c:	e042      	b.n	8017ed4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d106      	bne.n	8017e66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	2200      	movs	r2, #0
 8017e5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017e60:	6878      	ldr	r0, [r7, #4]
 8017e62:	f7f1 fa29 	bl	80092b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	2224      	movs	r2, #36	@ 0x24
 8017e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	681a      	ldr	r2, [r3, #0]
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	f022 0201 	bic.w	r2, r2, #1
 8017e7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d002      	beq.n	8017e8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8017e86:	6878      	ldr	r0, [r7, #4]
 8017e88:	f001 fbf8 	bl	801967c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017e8c:	6878      	ldr	r0, [r7, #4]
 8017e8e:	f000 fd89 	bl	80189a4 <UART_SetConfig>
 8017e92:	4603      	mov	r3, r0
 8017e94:	2b01      	cmp	r3, #1
 8017e96:	d101      	bne.n	8017e9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8017e98:	2301      	movs	r3, #1
 8017e9a:	e01b      	b.n	8017ed4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	685a      	ldr	r2, [r3, #4]
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	689a      	ldr	r2, [r3, #8]
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	681a      	ldr	r2, [r3, #0]
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	f042 0201 	orr.w	r2, r2, #1
 8017eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017ecc:	6878      	ldr	r0, [r7, #4]
 8017ece:	f001 fc77 	bl	80197c0 <UART_CheckIdleState>
 8017ed2:	4603      	mov	r3, r0
}
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	3708      	adds	r7, #8
 8017ed8:	46bd      	mov	sp, r7
 8017eda:	bd80      	pop	{r7, pc}

08017edc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b08a      	sub	sp, #40	@ 0x28
 8017ee0:	af02      	add	r7, sp, #8
 8017ee2:	60f8      	str	r0, [r7, #12]
 8017ee4:	60b9      	str	r1, [r7, #8]
 8017ee6:	603b      	str	r3, [r7, #0]
 8017ee8:	4613      	mov	r3, r2
 8017eea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017ef2:	2b20      	cmp	r3, #32
 8017ef4:	d17b      	bne.n	8017fee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8017ef6:	68bb      	ldr	r3, [r7, #8]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d002      	beq.n	8017f02 <HAL_UART_Transmit+0x26>
 8017efc:	88fb      	ldrh	r3, [r7, #6]
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d101      	bne.n	8017f06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8017f02:	2301      	movs	r3, #1
 8017f04:	e074      	b.n	8017ff0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	2200      	movs	r2, #0
 8017f0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	2221      	movs	r2, #33	@ 0x21
 8017f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017f16:	f7f1 faf1 	bl	80094fc <HAL_GetTick>
 8017f1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	88fa      	ldrh	r2, [r7, #6]
 8017f20:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	88fa      	ldrh	r2, [r7, #6]
 8017f28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	689b      	ldr	r3, [r3, #8]
 8017f30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017f34:	d108      	bne.n	8017f48 <HAL_UART_Transmit+0x6c>
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	691b      	ldr	r3, [r3, #16]
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d104      	bne.n	8017f48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8017f3e:	2300      	movs	r3, #0
 8017f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017f42:	68bb      	ldr	r3, [r7, #8]
 8017f44:	61bb      	str	r3, [r7, #24]
 8017f46:	e003      	b.n	8017f50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8017f48:	68bb      	ldr	r3, [r7, #8]
 8017f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017f50:	e030      	b.n	8017fb4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017f52:	683b      	ldr	r3, [r7, #0]
 8017f54:	9300      	str	r3, [sp, #0]
 8017f56:	697b      	ldr	r3, [r7, #20]
 8017f58:	2200      	movs	r2, #0
 8017f5a:	2180      	movs	r1, #128	@ 0x80
 8017f5c:	68f8      	ldr	r0, [r7, #12]
 8017f5e:	f001 fcd9 	bl	8019914 <UART_WaitOnFlagUntilTimeout>
 8017f62:	4603      	mov	r3, r0
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d005      	beq.n	8017f74 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	2220      	movs	r2, #32
 8017f6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8017f70:	2303      	movs	r3, #3
 8017f72:	e03d      	b.n	8017ff0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8017f74:	69fb      	ldr	r3, [r7, #28]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d10b      	bne.n	8017f92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017f7a:	69bb      	ldr	r3, [r7, #24]
 8017f7c:	881b      	ldrh	r3, [r3, #0]
 8017f7e:	461a      	mov	r2, r3
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017f88:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8017f8a:	69bb      	ldr	r3, [r7, #24]
 8017f8c:	3302      	adds	r3, #2
 8017f8e:	61bb      	str	r3, [r7, #24]
 8017f90:	e007      	b.n	8017fa2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017f92:	69fb      	ldr	r3, [r7, #28]
 8017f94:	781a      	ldrb	r2, [r3, #0]
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8017f9c:	69fb      	ldr	r3, [r7, #28]
 8017f9e:	3301      	adds	r3, #1
 8017fa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017fa8:	b29b      	uxth	r3, r3
 8017faa:	3b01      	subs	r3, #1
 8017fac:	b29a      	uxth	r2, r3
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017fba:	b29b      	uxth	r3, r3
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d1c8      	bne.n	8017f52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017fc0:	683b      	ldr	r3, [r7, #0]
 8017fc2:	9300      	str	r3, [sp, #0]
 8017fc4:	697b      	ldr	r3, [r7, #20]
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	2140      	movs	r1, #64	@ 0x40
 8017fca:	68f8      	ldr	r0, [r7, #12]
 8017fcc:	f001 fca2 	bl	8019914 <UART_WaitOnFlagUntilTimeout>
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d005      	beq.n	8017fe2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	2220      	movs	r2, #32
 8017fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8017fde:	2303      	movs	r3, #3
 8017fe0:	e006      	b.n	8017ff0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	2220      	movs	r2, #32
 8017fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8017fea:	2300      	movs	r3, #0
 8017fec:	e000      	b.n	8017ff0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8017fee:	2302      	movs	r3, #2
  }
}
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	3720      	adds	r7, #32
 8017ff4:	46bd      	mov	sp, r7
 8017ff6:	bd80      	pop	{r7, pc}

08017ff8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8017ff8:	b480      	push	{r7}
 8017ffa:	b091      	sub	sp, #68	@ 0x44
 8017ffc:	af00      	add	r7, sp, #0
 8017ffe:	60f8      	str	r0, [r7, #12]
 8018000:	60b9      	str	r1, [r7, #8]
 8018002:	4613      	mov	r3, r2
 8018004:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801800c:	2b20      	cmp	r3, #32
 801800e:	d178      	bne.n	8018102 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8018010:	68bb      	ldr	r3, [r7, #8]
 8018012:	2b00      	cmp	r3, #0
 8018014:	d002      	beq.n	801801c <HAL_UART_Transmit_IT+0x24>
 8018016:	88fb      	ldrh	r3, [r7, #6]
 8018018:	2b00      	cmp	r3, #0
 801801a:	d101      	bne.n	8018020 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 801801c:	2301      	movs	r3, #1
 801801e:	e071      	b.n	8018104 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	68ba      	ldr	r2, [r7, #8]
 8018024:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8018026:	68fb      	ldr	r3, [r7, #12]
 8018028:	88fa      	ldrh	r2, [r7, #6]
 801802a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	88fa      	ldrh	r2, [r7, #6]
 8018032:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	2200      	movs	r2, #0
 801803a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	2200      	movs	r2, #0
 8018040:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	2221      	movs	r2, #33	@ 0x21
 8018048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018050:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8018054:	d12a      	bne.n	80180ac <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	689b      	ldr	r3, [r3, #8]
 801805a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801805e:	d107      	bne.n	8018070 <HAL_UART_Transmit_IT+0x78>
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	691b      	ldr	r3, [r3, #16]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d103      	bne.n	8018070 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	4a29      	ldr	r2, [pc, #164]	@ (8018110 <HAL_UART_Transmit_IT+0x118>)
 801806c:	679a      	str	r2, [r3, #120]	@ 0x78
 801806e:	e002      	b.n	8018076 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	4a28      	ldr	r2, [pc, #160]	@ (8018114 <HAL_UART_Transmit_IT+0x11c>)
 8018074:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	3308      	adds	r3, #8
 801807c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801807e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018080:	e853 3f00 	ldrex	r3, [r3]
 8018084:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8018086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018088:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801808c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	3308      	adds	r3, #8
 8018094:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018096:	637a      	str	r2, [r7, #52]	@ 0x34
 8018098:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801809a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801809c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801809e:	e841 2300 	strex	r3, r2, [r1]
 80180a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80180a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d1e5      	bne.n	8018076 <HAL_UART_Transmit_IT+0x7e>
 80180aa:	e028      	b.n	80180fe <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	689b      	ldr	r3, [r3, #8]
 80180b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80180b4:	d107      	bne.n	80180c6 <HAL_UART_Transmit_IT+0xce>
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	691b      	ldr	r3, [r3, #16]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d103      	bne.n	80180c6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	4a15      	ldr	r2, [pc, #84]	@ (8018118 <HAL_UART_Transmit_IT+0x120>)
 80180c2:	679a      	str	r2, [r3, #120]	@ 0x78
 80180c4:	e002      	b.n	80180cc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	4a14      	ldr	r2, [pc, #80]	@ (801811c <HAL_UART_Transmit_IT+0x124>)
 80180ca:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80180cc:	68fb      	ldr	r3, [r7, #12]
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180d2:	697b      	ldr	r3, [r7, #20]
 80180d4:	e853 3f00 	ldrex	r3, [r3]
 80180d8:	613b      	str	r3, [r7, #16]
   return(result);
 80180da:	693b      	ldr	r3, [r7, #16]
 80180dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80180e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	461a      	mov	r2, r3
 80180e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180ea:	623b      	str	r3, [r7, #32]
 80180ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180ee:	69f9      	ldr	r1, [r7, #28]
 80180f0:	6a3a      	ldr	r2, [r7, #32]
 80180f2:	e841 2300 	strex	r3, r2, [r1]
 80180f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80180f8:	69bb      	ldr	r3, [r7, #24]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d1e6      	bne.n	80180cc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80180fe:	2300      	movs	r3, #0
 8018100:	e000      	b.n	8018104 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8018102:	2302      	movs	r3, #2
  }
}
 8018104:	4618      	mov	r0, r3
 8018106:	3744      	adds	r7, #68	@ 0x44
 8018108:	46bd      	mov	sp, r7
 801810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801810e:	4770      	bx	lr
 8018110:	08019f7f 	.word	0x08019f7f
 8018114:	08019e9f 	.word	0x08019e9f
 8018118:	08019ddd 	.word	0x08019ddd
 801811c:	08019d25 	.word	0x08019d25

08018120 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018120:	b580      	push	{r7, lr}
 8018122:	b08a      	sub	sp, #40	@ 0x28
 8018124:	af00      	add	r7, sp, #0
 8018126:	60f8      	str	r0, [r7, #12]
 8018128:	60b9      	str	r1, [r7, #8]
 801812a:	4613      	mov	r3, r2
 801812c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018134:	2b20      	cmp	r3, #32
 8018136:	d137      	bne.n	80181a8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8018138:	68bb      	ldr	r3, [r7, #8]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d002      	beq.n	8018144 <HAL_UART_Receive_IT+0x24>
 801813e:	88fb      	ldrh	r3, [r7, #6]
 8018140:	2b00      	cmp	r3, #0
 8018142:	d101      	bne.n	8018148 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8018144:	2301      	movs	r3, #1
 8018146:	e030      	b.n	80181aa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	2200      	movs	r2, #0
 801814c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	4a18      	ldr	r2, [pc, #96]	@ (80181b4 <HAL_UART_Receive_IT+0x94>)
 8018154:	4293      	cmp	r3, r2
 8018156:	d01f      	beq.n	8018198 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	685b      	ldr	r3, [r3, #4]
 801815e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018162:	2b00      	cmp	r3, #0
 8018164:	d018      	beq.n	8018198 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801816c:	697b      	ldr	r3, [r7, #20]
 801816e:	e853 3f00 	ldrex	r3, [r3]
 8018172:	613b      	str	r3, [r7, #16]
   return(result);
 8018174:	693b      	ldr	r3, [r7, #16]
 8018176:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801817a:	627b      	str	r3, [r7, #36]	@ 0x24
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	461a      	mov	r2, r3
 8018182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018184:	623b      	str	r3, [r7, #32]
 8018186:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018188:	69f9      	ldr	r1, [r7, #28]
 801818a:	6a3a      	ldr	r2, [r7, #32]
 801818c:	e841 2300 	strex	r3, r2, [r1]
 8018190:	61bb      	str	r3, [r7, #24]
   return(result);
 8018192:	69bb      	ldr	r3, [r7, #24]
 8018194:	2b00      	cmp	r3, #0
 8018196:	d1e6      	bne.n	8018166 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8018198:	88fb      	ldrh	r3, [r7, #6]
 801819a:	461a      	mov	r2, r3
 801819c:	68b9      	ldr	r1, [r7, #8]
 801819e:	68f8      	ldr	r0, [r7, #12]
 80181a0:	f001 fc26 	bl	80199f0 <UART_Start_Receive_IT>
 80181a4:	4603      	mov	r3, r0
 80181a6:	e000      	b.n	80181aa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80181a8:	2302      	movs	r3, #2
  }
}
 80181aa:	4618      	mov	r0, r3
 80181ac:	3728      	adds	r7, #40	@ 0x28
 80181ae:	46bd      	mov	sp, r7
 80181b0:	bd80      	pop	{r7, pc}
 80181b2:	bf00      	nop
 80181b4:	58000c00 	.word	0x58000c00

080181b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80181b8:	b580      	push	{r7, lr}
 80181ba:	b0ba      	sub	sp, #232	@ 0xe8
 80181bc:	af00      	add	r7, sp, #0
 80181be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	69db      	ldr	r3, [r3, #28]
 80181c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	689b      	ldr	r3, [r3, #8]
 80181da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80181de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80181e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80181e6:	4013      	ands	r3, r2
 80181e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80181ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d11b      	bne.n	801822c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80181f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80181f8:	f003 0320 	and.w	r3, r3, #32
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d015      	beq.n	801822c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8018200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018204:	f003 0320 	and.w	r3, r3, #32
 8018208:	2b00      	cmp	r3, #0
 801820a:	d105      	bne.n	8018218 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801820c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018214:	2b00      	cmp	r3, #0
 8018216:	d009      	beq.n	801822c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801821c:	2b00      	cmp	r3, #0
 801821e:	f000 8393 	beq.w	8018948 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018226:	6878      	ldr	r0, [r7, #4]
 8018228:	4798      	blx	r3
      }
      return;
 801822a:	e38d      	b.n	8018948 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801822c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8018230:	2b00      	cmp	r3, #0
 8018232:	f000 8123 	beq.w	801847c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8018236:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801823a:	4b8d      	ldr	r3, [pc, #564]	@ (8018470 <HAL_UART_IRQHandler+0x2b8>)
 801823c:	4013      	ands	r3, r2
 801823e:	2b00      	cmp	r3, #0
 8018240:	d106      	bne.n	8018250 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8018242:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8018246:	4b8b      	ldr	r3, [pc, #556]	@ (8018474 <HAL_UART_IRQHandler+0x2bc>)
 8018248:	4013      	ands	r3, r2
 801824a:	2b00      	cmp	r3, #0
 801824c:	f000 8116 	beq.w	801847c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8018250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018254:	f003 0301 	and.w	r3, r3, #1
 8018258:	2b00      	cmp	r3, #0
 801825a:	d011      	beq.n	8018280 <HAL_UART_IRQHandler+0xc8>
 801825c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018264:	2b00      	cmp	r3, #0
 8018266:	d00b      	beq.n	8018280 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	2201      	movs	r2, #1
 801826e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018276:	f043 0201 	orr.w	r2, r3, #1
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018284:	f003 0302 	and.w	r3, r3, #2
 8018288:	2b00      	cmp	r3, #0
 801828a:	d011      	beq.n	80182b0 <HAL_UART_IRQHandler+0xf8>
 801828c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018290:	f003 0301 	and.w	r3, r3, #1
 8018294:	2b00      	cmp	r3, #0
 8018296:	d00b      	beq.n	80182b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	2202      	movs	r2, #2
 801829e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80182a6:	f043 0204 	orr.w	r2, r3, #4
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80182b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80182b4:	f003 0304 	and.w	r3, r3, #4
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d011      	beq.n	80182e0 <HAL_UART_IRQHandler+0x128>
 80182bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80182c0:	f003 0301 	and.w	r3, r3, #1
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d00b      	beq.n	80182e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	2204      	movs	r2, #4
 80182ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80182d6:	f043 0202 	orr.w	r2, r3, #2
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80182e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80182e4:	f003 0308 	and.w	r3, r3, #8
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d017      	beq.n	801831c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80182ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80182f0:	f003 0320 	and.w	r3, r3, #32
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d105      	bne.n	8018304 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80182f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80182fc:	4b5c      	ldr	r3, [pc, #368]	@ (8018470 <HAL_UART_IRQHandler+0x2b8>)
 80182fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018300:	2b00      	cmp	r3, #0
 8018302:	d00b      	beq.n	801831c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	2208      	movs	r2, #8
 801830a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018312:	f043 0208 	orr.w	r2, r3, #8
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801831c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018324:	2b00      	cmp	r3, #0
 8018326:	d012      	beq.n	801834e <HAL_UART_IRQHandler+0x196>
 8018328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801832c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8018330:	2b00      	cmp	r3, #0
 8018332:	d00c      	beq.n	801834e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801833c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018344:	f043 0220 	orr.w	r2, r3, #32
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018354:	2b00      	cmp	r3, #0
 8018356:	f000 82f9 	beq.w	801894c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801835a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801835e:	f003 0320 	and.w	r3, r3, #32
 8018362:	2b00      	cmp	r3, #0
 8018364:	d013      	beq.n	801838e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8018366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801836a:	f003 0320 	and.w	r3, r3, #32
 801836e:	2b00      	cmp	r3, #0
 8018370:	d105      	bne.n	801837e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8018372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801837a:	2b00      	cmp	r3, #0
 801837c:	d007      	beq.n	801838e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018382:	2b00      	cmp	r3, #0
 8018384:	d003      	beq.n	801838e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801838a:	6878      	ldr	r0, [r7, #4]
 801838c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018394:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	689b      	ldr	r3, [r3, #8]
 801839e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80183a2:	2b40      	cmp	r3, #64	@ 0x40
 80183a4:	d005      	beq.n	80183b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80183a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80183aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d054      	beq.n	801845c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80183b2:	6878      	ldr	r0, [r7, #4]
 80183b4:	f001 fc3e 	bl	8019c34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	689b      	ldr	r3, [r3, #8]
 80183be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80183c2:	2b40      	cmp	r3, #64	@ 0x40
 80183c4:	d146      	bne.n	8018454 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	3308      	adds	r3, #8
 80183cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80183d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80183d4:	e853 3f00 	ldrex	r3, [r3]
 80183d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80183dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80183e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80183e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	3308      	adds	r3, #8
 80183ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80183f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80183f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80183fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80183fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8018402:	e841 2300 	strex	r3, r2, [r1]
 8018406:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801840a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801840e:	2b00      	cmp	r3, #0
 8018410:	d1d9      	bne.n	80183c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018418:	2b00      	cmp	r3, #0
 801841a:	d017      	beq.n	801844c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018422:	4a15      	ldr	r2, [pc, #84]	@ (8018478 <HAL_UART_IRQHandler+0x2c0>)
 8018424:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801842c:	4618      	mov	r0, r3
 801842e:	f7f4 fa7b 	bl	800c928 <HAL_DMA_Abort_IT>
 8018432:	4603      	mov	r3, r0
 8018434:	2b00      	cmp	r3, #0
 8018436:	d019      	beq.n	801846c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801843e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018440:	687a      	ldr	r2, [r7, #4]
 8018442:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8018446:	4610      	mov	r0, r2
 8018448:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801844a:	e00f      	b.n	801846c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801844c:	6878      	ldr	r0, [r7, #4]
 801844e:	f000 fa93 	bl	8018978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018452:	e00b      	b.n	801846c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018454:	6878      	ldr	r0, [r7, #4]
 8018456:	f000 fa8f 	bl	8018978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801845a:	e007      	b.n	801846c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801845c:	6878      	ldr	r0, [r7, #4]
 801845e:	f000 fa8b 	bl	8018978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	2200      	movs	r2, #0
 8018466:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801846a:	e26f      	b.n	801894c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801846c:	bf00      	nop
    return;
 801846e:	e26d      	b.n	801894c <HAL_UART_IRQHandler+0x794>
 8018470:	10000001 	.word	0x10000001
 8018474:	04000120 	.word	0x04000120
 8018478:	08019d01 	.word	0x08019d01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018480:	2b01      	cmp	r3, #1
 8018482:	f040 8203 	bne.w	801888c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8018486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801848a:	f003 0310 	and.w	r3, r3, #16
 801848e:	2b00      	cmp	r3, #0
 8018490:	f000 81fc 	beq.w	801888c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8018494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018498:	f003 0310 	and.w	r3, r3, #16
 801849c:	2b00      	cmp	r3, #0
 801849e:	f000 81f5 	beq.w	801888c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	2210      	movs	r2, #16
 80184a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	689b      	ldr	r3, [r3, #8]
 80184b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80184b4:	2b40      	cmp	r3, #64	@ 0x40
 80184b6:	f040 816d 	bne.w	8018794 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	4aa4      	ldr	r2, [pc, #656]	@ (8018754 <HAL_UART_IRQHandler+0x59c>)
 80184c4:	4293      	cmp	r3, r2
 80184c6:	d068      	beq.n	801859a <HAL_UART_IRQHandler+0x3e2>
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	4aa1      	ldr	r2, [pc, #644]	@ (8018758 <HAL_UART_IRQHandler+0x5a0>)
 80184d2:	4293      	cmp	r3, r2
 80184d4:	d061      	beq.n	801859a <HAL_UART_IRQHandler+0x3e2>
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	4a9f      	ldr	r2, [pc, #636]	@ (801875c <HAL_UART_IRQHandler+0x5a4>)
 80184e0:	4293      	cmp	r3, r2
 80184e2:	d05a      	beq.n	801859a <HAL_UART_IRQHandler+0x3e2>
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	4a9c      	ldr	r2, [pc, #624]	@ (8018760 <HAL_UART_IRQHandler+0x5a8>)
 80184ee:	4293      	cmp	r3, r2
 80184f0:	d053      	beq.n	801859a <HAL_UART_IRQHandler+0x3e2>
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	4a9a      	ldr	r2, [pc, #616]	@ (8018764 <HAL_UART_IRQHandler+0x5ac>)
 80184fc:	4293      	cmp	r3, r2
 80184fe:	d04c      	beq.n	801859a <HAL_UART_IRQHandler+0x3e2>
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	4a97      	ldr	r2, [pc, #604]	@ (8018768 <HAL_UART_IRQHandler+0x5b0>)
 801850a:	4293      	cmp	r3, r2
 801850c:	d045      	beq.n	801859a <HAL_UART_IRQHandler+0x3e2>
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	4a95      	ldr	r2, [pc, #596]	@ (801876c <HAL_UART_IRQHandler+0x5b4>)
 8018518:	4293      	cmp	r3, r2
 801851a:	d03e      	beq.n	801859a <HAL_UART_IRQHandler+0x3e2>
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	4a92      	ldr	r2, [pc, #584]	@ (8018770 <HAL_UART_IRQHandler+0x5b8>)
 8018526:	4293      	cmp	r3, r2
 8018528:	d037      	beq.n	801859a <HAL_UART_IRQHandler+0x3e2>
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	4a90      	ldr	r2, [pc, #576]	@ (8018774 <HAL_UART_IRQHandler+0x5bc>)
 8018534:	4293      	cmp	r3, r2
 8018536:	d030      	beq.n	801859a <HAL_UART_IRQHandler+0x3e2>
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	4a8d      	ldr	r2, [pc, #564]	@ (8018778 <HAL_UART_IRQHandler+0x5c0>)
 8018542:	4293      	cmp	r3, r2
 8018544:	d029      	beq.n	801859a <HAL_UART_IRQHandler+0x3e2>
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	4a8b      	ldr	r2, [pc, #556]	@ (801877c <HAL_UART_IRQHandler+0x5c4>)
 8018550:	4293      	cmp	r3, r2
 8018552:	d022      	beq.n	801859a <HAL_UART_IRQHandler+0x3e2>
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	4a88      	ldr	r2, [pc, #544]	@ (8018780 <HAL_UART_IRQHandler+0x5c8>)
 801855e:	4293      	cmp	r3, r2
 8018560:	d01b      	beq.n	801859a <HAL_UART_IRQHandler+0x3e2>
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	4a86      	ldr	r2, [pc, #536]	@ (8018784 <HAL_UART_IRQHandler+0x5cc>)
 801856c:	4293      	cmp	r3, r2
 801856e:	d014      	beq.n	801859a <HAL_UART_IRQHandler+0x3e2>
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	4a83      	ldr	r2, [pc, #524]	@ (8018788 <HAL_UART_IRQHandler+0x5d0>)
 801857a:	4293      	cmp	r3, r2
 801857c:	d00d      	beq.n	801859a <HAL_UART_IRQHandler+0x3e2>
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	4a81      	ldr	r2, [pc, #516]	@ (801878c <HAL_UART_IRQHandler+0x5d4>)
 8018588:	4293      	cmp	r3, r2
 801858a:	d006      	beq.n	801859a <HAL_UART_IRQHandler+0x3e2>
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	4a7e      	ldr	r2, [pc, #504]	@ (8018790 <HAL_UART_IRQHandler+0x5d8>)
 8018596:	4293      	cmp	r3, r2
 8018598:	d106      	bne.n	80185a8 <HAL_UART_IRQHandler+0x3f0>
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	685b      	ldr	r3, [r3, #4]
 80185a4:	b29b      	uxth	r3, r3
 80185a6:	e005      	b.n	80185b4 <HAL_UART_IRQHandler+0x3fc>
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	685b      	ldr	r3, [r3, #4]
 80185b2:	b29b      	uxth	r3, r3
 80185b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80185b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80185bc:	2b00      	cmp	r3, #0
 80185be:	f000 80ad 	beq.w	801871c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80185c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80185cc:	429a      	cmp	r2, r3
 80185ce:	f080 80a5 	bcs.w	801871c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80185d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185e2:	69db      	ldr	r3, [r3, #28]
 80185e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80185e8:	f000 8087 	beq.w	80186fa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80185f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80185f8:	e853 3f00 	ldrex	r3, [r3]
 80185fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8018600:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8018604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018608:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	461a      	mov	r2, r3
 8018612:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8018616:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801861a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801861e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8018622:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8018626:	e841 2300 	strex	r3, r2, [r1]
 801862a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801862e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018632:	2b00      	cmp	r3, #0
 8018634:	d1da      	bne.n	80185ec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	3308      	adds	r3, #8
 801863c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801863e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018640:	e853 3f00 	ldrex	r3, [r3]
 8018644:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8018646:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018648:	f023 0301 	bic.w	r3, r3, #1
 801864c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	3308      	adds	r3, #8
 8018656:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801865a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801865e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018660:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8018662:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8018666:	e841 2300 	strex	r3, r2, [r1]
 801866a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801866c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801866e:	2b00      	cmp	r3, #0
 8018670:	d1e1      	bne.n	8018636 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	3308      	adds	r3, #8
 8018678:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801867a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801867c:	e853 3f00 	ldrex	r3, [r3]
 8018680:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8018682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018684:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018688:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	3308      	adds	r3, #8
 8018692:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8018696:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8018698:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801869a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801869c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801869e:	e841 2300 	strex	r3, r2, [r1]
 80186a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80186a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d1e3      	bne.n	8018672 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	2220      	movs	r2, #32
 80186ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	2200      	movs	r2, #0
 80186b6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80186c0:	e853 3f00 	ldrex	r3, [r3]
 80186c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80186c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80186c8:	f023 0310 	bic.w	r3, r3, #16
 80186cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	461a      	mov	r2, r3
 80186d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80186da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80186dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80186e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80186e2:	e841 2300 	strex	r3, r2, [r1]
 80186e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80186e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d1e4      	bne.n	80186b8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80186f4:	4618      	mov	r0, r3
 80186f6:	f7f3 fdf9 	bl	800c2ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	2202      	movs	r2, #2
 80186fe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801870c:	b29b      	uxth	r3, r3
 801870e:	1ad3      	subs	r3, r2, r3
 8018710:	b29b      	uxth	r3, r3
 8018712:	4619      	mov	r1, r3
 8018714:	6878      	ldr	r0, [r7, #4]
 8018716:	f000 f939 	bl	801898c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801871a:	e119      	b.n	8018950 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018726:	429a      	cmp	r2, r3
 8018728:	f040 8112 	bne.w	8018950 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018732:	69db      	ldr	r3, [r3, #28]
 8018734:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018738:	f040 810a 	bne.w	8018950 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	2202      	movs	r2, #2
 8018740:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018748:	4619      	mov	r1, r3
 801874a:	6878      	ldr	r0, [r7, #4]
 801874c:	f000 f91e 	bl	801898c <HAL_UARTEx_RxEventCallback>
      return;
 8018750:	e0fe      	b.n	8018950 <HAL_UART_IRQHandler+0x798>
 8018752:	bf00      	nop
 8018754:	40020010 	.word	0x40020010
 8018758:	40020028 	.word	0x40020028
 801875c:	40020040 	.word	0x40020040
 8018760:	40020058 	.word	0x40020058
 8018764:	40020070 	.word	0x40020070
 8018768:	40020088 	.word	0x40020088
 801876c:	400200a0 	.word	0x400200a0
 8018770:	400200b8 	.word	0x400200b8
 8018774:	40020410 	.word	0x40020410
 8018778:	40020428 	.word	0x40020428
 801877c:	40020440 	.word	0x40020440
 8018780:	40020458 	.word	0x40020458
 8018784:	40020470 	.word	0x40020470
 8018788:	40020488 	.word	0x40020488
 801878c:	400204a0 	.word	0x400204a0
 8018790:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80187a0:	b29b      	uxth	r3, r3
 80187a2:	1ad3      	subs	r3, r2, r3
 80187a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80187ae:	b29b      	uxth	r3, r3
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	f000 80cf 	beq.w	8018954 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80187b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	f000 80ca 	beq.w	8018954 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80187c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80187c8:	e853 3f00 	ldrex	r3, [r3]
 80187cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80187ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80187d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	461a      	mov	r2, r3
 80187de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80187e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80187e4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80187e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80187e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80187ea:	e841 2300 	strex	r3, r2, [r1]
 80187ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80187f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d1e4      	bne.n	80187c0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	3308      	adds	r3, #8
 80187fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80187fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018800:	e853 3f00 	ldrex	r3, [r3]
 8018804:	623b      	str	r3, [r7, #32]
   return(result);
 8018806:	6a3a      	ldr	r2, [r7, #32]
 8018808:	4b55      	ldr	r3, [pc, #340]	@ (8018960 <HAL_UART_IRQHandler+0x7a8>)
 801880a:	4013      	ands	r3, r2
 801880c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	3308      	adds	r3, #8
 8018816:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801881a:	633a      	str	r2, [r7, #48]	@ 0x30
 801881c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801881e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018820:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018822:	e841 2300 	strex	r3, r2, [r1]
 8018826:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8018828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801882a:	2b00      	cmp	r3, #0
 801882c:	d1e3      	bne.n	80187f6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	2220      	movs	r2, #32
 8018832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	2200      	movs	r2, #0
 801883a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	2200      	movs	r2, #0
 8018840:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018848:	693b      	ldr	r3, [r7, #16]
 801884a:	e853 3f00 	ldrex	r3, [r3]
 801884e:	60fb      	str	r3, [r7, #12]
   return(result);
 8018850:	68fb      	ldr	r3, [r7, #12]
 8018852:	f023 0310 	bic.w	r3, r3, #16
 8018856:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	461a      	mov	r2, r3
 8018860:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8018864:	61fb      	str	r3, [r7, #28]
 8018866:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018868:	69b9      	ldr	r1, [r7, #24]
 801886a:	69fa      	ldr	r2, [r7, #28]
 801886c:	e841 2300 	strex	r3, r2, [r1]
 8018870:	617b      	str	r3, [r7, #20]
   return(result);
 8018872:	697b      	ldr	r3, [r7, #20]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d1e4      	bne.n	8018842 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	2202      	movs	r2, #2
 801887c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801887e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8018882:	4619      	mov	r1, r3
 8018884:	6878      	ldr	r0, [r7, #4]
 8018886:	f000 f881 	bl	801898c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801888a:	e063      	b.n	8018954 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801888c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018890:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8018894:	2b00      	cmp	r3, #0
 8018896:	d00e      	beq.n	80188b6 <HAL_UART_IRQHandler+0x6fe>
 8018898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801889c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d008      	beq.n	80188b6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80188ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80188ae:	6878      	ldr	r0, [r7, #4]
 80188b0:	f002 f926 	bl	801ab00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80188b4:	e051      	b.n	801895a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80188b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80188ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d014      	beq.n	80188ec <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80188c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80188c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d105      	bne.n	80188da <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80188ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80188d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d008      	beq.n	80188ec <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d03a      	beq.n	8018958 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80188e6:	6878      	ldr	r0, [r7, #4]
 80188e8:	4798      	blx	r3
    }
    return;
 80188ea:	e035      	b.n	8018958 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80188ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80188f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d009      	beq.n	801890c <HAL_UART_IRQHandler+0x754>
 80188f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80188fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018900:	2b00      	cmp	r3, #0
 8018902:	d003      	beq.n	801890c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8018904:	6878      	ldr	r0, [r7, #4]
 8018906:	f001 fbaf 	bl	801a068 <UART_EndTransmit_IT>
    return;
 801890a:	e026      	b.n	801895a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801890c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018910:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018914:	2b00      	cmp	r3, #0
 8018916:	d009      	beq.n	801892c <HAL_UART_IRQHandler+0x774>
 8018918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801891c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8018920:	2b00      	cmp	r3, #0
 8018922:	d003      	beq.n	801892c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8018924:	6878      	ldr	r0, [r7, #4]
 8018926:	f002 f8ff 	bl	801ab28 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801892a:	e016      	b.n	801895a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801892c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018930:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8018934:	2b00      	cmp	r3, #0
 8018936:	d010      	beq.n	801895a <HAL_UART_IRQHandler+0x7a2>
 8018938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801893c:	2b00      	cmp	r3, #0
 801893e:	da0c      	bge.n	801895a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8018940:	6878      	ldr	r0, [r7, #4]
 8018942:	f002 f8e7 	bl	801ab14 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018946:	e008      	b.n	801895a <HAL_UART_IRQHandler+0x7a2>
      return;
 8018948:	bf00      	nop
 801894a:	e006      	b.n	801895a <HAL_UART_IRQHandler+0x7a2>
    return;
 801894c:	bf00      	nop
 801894e:	e004      	b.n	801895a <HAL_UART_IRQHandler+0x7a2>
      return;
 8018950:	bf00      	nop
 8018952:	e002      	b.n	801895a <HAL_UART_IRQHandler+0x7a2>
      return;
 8018954:	bf00      	nop
 8018956:	e000      	b.n	801895a <HAL_UART_IRQHandler+0x7a2>
    return;
 8018958:	bf00      	nop
  }
}
 801895a:	37e8      	adds	r7, #232	@ 0xe8
 801895c:	46bd      	mov	sp, r7
 801895e:	bd80      	pop	{r7, pc}
 8018960:	effffffe 	.word	0xeffffffe

08018964 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8018964:	b480      	push	{r7}
 8018966:	b083      	sub	sp, #12
 8018968:	af00      	add	r7, sp, #0
 801896a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801896c:	bf00      	nop
 801896e:	370c      	adds	r7, #12
 8018970:	46bd      	mov	sp, r7
 8018972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018976:	4770      	bx	lr

08018978 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018978:	b480      	push	{r7}
 801897a:	b083      	sub	sp, #12
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8018980:	bf00      	nop
 8018982:	370c      	adds	r7, #12
 8018984:	46bd      	mov	sp, r7
 8018986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801898a:	4770      	bx	lr

0801898c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801898c:	b480      	push	{r7}
 801898e:	b083      	sub	sp, #12
 8018990:	af00      	add	r7, sp, #0
 8018992:	6078      	str	r0, [r7, #4]
 8018994:	460b      	mov	r3, r1
 8018996:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8018998:	bf00      	nop
 801899a:	370c      	adds	r7, #12
 801899c:	46bd      	mov	sp, r7
 801899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189a2:	4770      	bx	lr

080189a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80189a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80189a8:	b092      	sub	sp, #72	@ 0x48
 80189aa:	af00      	add	r7, sp, #0
 80189ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80189ae:	2300      	movs	r3, #0
 80189b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80189b4:	697b      	ldr	r3, [r7, #20]
 80189b6:	689a      	ldr	r2, [r3, #8]
 80189b8:	697b      	ldr	r3, [r7, #20]
 80189ba:	691b      	ldr	r3, [r3, #16]
 80189bc:	431a      	orrs	r2, r3
 80189be:	697b      	ldr	r3, [r7, #20]
 80189c0:	695b      	ldr	r3, [r3, #20]
 80189c2:	431a      	orrs	r2, r3
 80189c4:	697b      	ldr	r3, [r7, #20]
 80189c6:	69db      	ldr	r3, [r3, #28]
 80189c8:	4313      	orrs	r3, r2
 80189ca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80189cc:	697b      	ldr	r3, [r7, #20]
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	681a      	ldr	r2, [r3, #0]
 80189d2:	4bbe      	ldr	r3, [pc, #760]	@ (8018ccc <UART_SetConfig+0x328>)
 80189d4:	4013      	ands	r3, r2
 80189d6:	697a      	ldr	r2, [r7, #20]
 80189d8:	6812      	ldr	r2, [r2, #0]
 80189da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80189dc:	430b      	orrs	r3, r1
 80189de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80189e0:	697b      	ldr	r3, [r7, #20]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	685b      	ldr	r3, [r3, #4]
 80189e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80189ea:	697b      	ldr	r3, [r7, #20]
 80189ec:	68da      	ldr	r2, [r3, #12]
 80189ee:	697b      	ldr	r3, [r7, #20]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	430a      	orrs	r2, r1
 80189f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80189f6:	697b      	ldr	r3, [r7, #20]
 80189f8:	699b      	ldr	r3, [r3, #24]
 80189fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80189fc:	697b      	ldr	r3, [r7, #20]
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	4ab3      	ldr	r2, [pc, #716]	@ (8018cd0 <UART_SetConfig+0x32c>)
 8018a02:	4293      	cmp	r3, r2
 8018a04:	d004      	beq.n	8018a10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018a06:	697b      	ldr	r3, [r7, #20]
 8018a08:	6a1b      	ldr	r3, [r3, #32]
 8018a0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018a0c:	4313      	orrs	r3, r2
 8018a0e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018a10:	697b      	ldr	r3, [r7, #20]
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	689a      	ldr	r2, [r3, #8]
 8018a16:	4baf      	ldr	r3, [pc, #700]	@ (8018cd4 <UART_SetConfig+0x330>)
 8018a18:	4013      	ands	r3, r2
 8018a1a:	697a      	ldr	r2, [r7, #20]
 8018a1c:	6812      	ldr	r2, [r2, #0]
 8018a1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018a20:	430b      	orrs	r3, r1
 8018a22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018a24:	697b      	ldr	r3, [r7, #20]
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a2a:	f023 010f 	bic.w	r1, r3, #15
 8018a2e:	697b      	ldr	r3, [r7, #20]
 8018a30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018a32:	697b      	ldr	r3, [r7, #20]
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	430a      	orrs	r2, r1
 8018a38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018a3a:	697b      	ldr	r3, [r7, #20]
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	4aa6      	ldr	r2, [pc, #664]	@ (8018cd8 <UART_SetConfig+0x334>)
 8018a40:	4293      	cmp	r3, r2
 8018a42:	d177      	bne.n	8018b34 <UART_SetConfig+0x190>
 8018a44:	4ba5      	ldr	r3, [pc, #660]	@ (8018cdc <UART_SetConfig+0x338>)
 8018a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018a48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018a4c:	2b28      	cmp	r3, #40	@ 0x28
 8018a4e:	d86d      	bhi.n	8018b2c <UART_SetConfig+0x188>
 8018a50:	a201      	add	r2, pc, #4	@ (adr r2, 8018a58 <UART_SetConfig+0xb4>)
 8018a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a56:	bf00      	nop
 8018a58:	08018afd 	.word	0x08018afd
 8018a5c:	08018b2d 	.word	0x08018b2d
 8018a60:	08018b2d 	.word	0x08018b2d
 8018a64:	08018b2d 	.word	0x08018b2d
 8018a68:	08018b2d 	.word	0x08018b2d
 8018a6c:	08018b2d 	.word	0x08018b2d
 8018a70:	08018b2d 	.word	0x08018b2d
 8018a74:	08018b2d 	.word	0x08018b2d
 8018a78:	08018b05 	.word	0x08018b05
 8018a7c:	08018b2d 	.word	0x08018b2d
 8018a80:	08018b2d 	.word	0x08018b2d
 8018a84:	08018b2d 	.word	0x08018b2d
 8018a88:	08018b2d 	.word	0x08018b2d
 8018a8c:	08018b2d 	.word	0x08018b2d
 8018a90:	08018b2d 	.word	0x08018b2d
 8018a94:	08018b2d 	.word	0x08018b2d
 8018a98:	08018b0d 	.word	0x08018b0d
 8018a9c:	08018b2d 	.word	0x08018b2d
 8018aa0:	08018b2d 	.word	0x08018b2d
 8018aa4:	08018b2d 	.word	0x08018b2d
 8018aa8:	08018b2d 	.word	0x08018b2d
 8018aac:	08018b2d 	.word	0x08018b2d
 8018ab0:	08018b2d 	.word	0x08018b2d
 8018ab4:	08018b2d 	.word	0x08018b2d
 8018ab8:	08018b15 	.word	0x08018b15
 8018abc:	08018b2d 	.word	0x08018b2d
 8018ac0:	08018b2d 	.word	0x08018b2d
 8018ac4:	08018b2d 	.word	0x08018b2d
 8018ac8:	08018b2d 	.word	0x08018b2d
 8018acc:	08018b2d 	.word	0x08018b2d
 8018ad0:	08018b2d 	.word	0x08018b2d
 8018ad4:	08018b2d 	.word	0x08018b2d
 8018ad8:	08018b1d 	.word	0x08018b1d
 8018adc:	08018b2d 	.word	0x08018b2d
 8018ae0:	08018b2d 	.word	0x08018b2d
 8018ae4:	08018b2d 	.word	0x08018b2d
 8018ae8:	08018b2d 	.word	0x08018b2d
 8018aec:	08018b2d 	.word	0x08018b2d
 8018af0:	08018b2d 	.word	0x08018b2d
 8018af4:	08018b2d 	.word	0x08018b2d
 8018af8:	08018b25 	.word	0x08018b25
 8018afc:	2301      	movs	r3, #1
 8018afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b02:	e326      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018b04:	2304      	movs	r3, #4
 8018b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b0a:	e322      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018b0c:	2308      	movs	r3, #8
 8018b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b12:	e31e      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018b14:	2310      	movs	r3, #16
 8018b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b1a:	e31a      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018b1c:	2320      	movs	r3, #32
 8018b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b22:	e316      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018b24:	2340      	movs	r3, #64	@ 0x40
 8018b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b2a:	e312      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018b2c:	2380      	movs	r3, #128	@ 0x80
 8018b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b32:	e30e      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018b34:	697b      	ldr	r3, [r7, #20]
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	4a69      	ldr	r2, [pc, #420]	@ (8018ce0 <UART_SetConfig+0x33c>)
 8018b3a:	4293      	cmp	r3, r2
 8018b3c:	d130      	bne.n	8018ba0 <UART_SetConfig+0x1fc>
 8018b3e:	4b67      	ldr	r3, [pc, #412]	@ (8018cdc <UART_SetConfig+0x338>)
 8018b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018b42:	f003 0307 	and.w	r3, r3, #7
 8018b46:	2b05      	cmp	r3, #5
 8018b48:	d826      	bhi.n	8018b98 <UART_SetConfig+0x1f4>
 8018b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8018b50 <UART_SetConfig+0x1ac>)
 8018b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b50:	08018b69 	.word	0x08018b69
 8018b54:	08018b71 	.word	0x08018b71
 8018b58:	08018b79 	.word	0x08018b79
 8018b5c:	08018b81 	.word	0x08018b81
 8018b60:	08018b89 	.word	0x08018b89
 8018b64:	08018b91 	.word	0x08018b91
 8018b68:	2300      	movs	r3, #0
 8018b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b6e:	e2f0      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018b70:	2304      	movs	r3, #4
 8018b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b76:	e2ec      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018b78:	2308      	movs	r3, #8
 8018b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b7e:	e2e8      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018b80:	2310      	movs	r3, #16
 8018b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b86:	e2e4      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018b88:	2320      	movs	r3, #32
 8018b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b8e:	e2e0      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018b90:	2340      	movs	r3, #64	@ 0x40
 8018b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b96:	e2dc      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018b98:	2380      	movs	r3, #128	@ 0x80
 8018b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b9e:	e2d8      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018ba0:	697b      	ldr	r3, [r7, #20]
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	4a4f      	ldr	r2, [pc, #316]	@ (8018ce4 <UART_SetConfig+0x340>)
 8018ba6:	4293      	cmp	r3, r2
 8018ba8:	d130      	bne.n	8018c0c <UART_SetConfig+0x268>
 8018baa:	4b4c      	ldr	r3, [pc, #304]	@ (8018cdc <UART_SetConfig+0x338>)
 8018bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018bae:	f003 0307 	and.w	r3, r3, #7
 8018bb2:	2b05      	cmp	r3, #5
 8018bb4:	d826      	bhi.n	8018c04 <UART_SetConfig+0x260>
 8018bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8018bbc <UART_SetConfig+0x218>)
 8018bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bbc:	08018bd5 	.word	0x08018bd5
 8018bc0:	08018bdd 	.word	0x08018bdd
 8018bc4:	08018be5 	.word	0x08018be5
 8018bc8:	08018bed 	.word	0x08018bed
 8018bcc:	08018bf5 	.word	0x08018bf5
 8018bd0:	08018bfd 	.word	0x08018bfd
 8018bd4:	2300      	movs	r3, #0
 8018bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bda:	e2ba      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018bdc:	2304      	movs	r3, #4
 8018bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018be2:	e2b6      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018be4:	2308      	movs	r3, #8
 8018be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bea:	e2b2      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018bec:	2310      	movs	r3, #16
 8018bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bf2:	e2ae      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018bf4:	2320      	movs	r3, #32
 8018bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bfa:	e2aa      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018bfc:	2340      	movs	r3, #64	@ 0x40
 8018bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c02:	e2a6      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018c04:	2380      	movs	r3, #128	@ 0x80
 8018c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c0a:	e2a2      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018c0c:	697b      	ldr	r3, [r7, #20]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	4a35      	ldr	r2, [pc, #212]	@ (8018ce8 <UART_SetConfig+0x344>)
 8018c12:	4293      	cmp	r3, r2
 8018c14:	d130      	bne.n	8018c78 <UART_SetConfig+0x2d4>
 8018c16:	4b31      	ldr	r3, [pc, #196]	@ (8018cdc <UART_SetConfig+0x338>)
 8018c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c1a:	f003 0307 	and.w	r3, r3, #7
 8018c1e:	2b05      	cmp	r3, #5
 8018c20:	d826      	bhi.n	8018c70 <UART_SetConfig+0x2cc>
 8018c22:	a201      	add	r2, pc, #4	@ (adr r2, 8018c28 <UART_SetConfig+0x284>)
 8018c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c28:	08018c41 	.word	0x08018c41
 8018c2c:	08018c49 	.word	0x08018c49
 8018c30:	08018c51 	.word	0x08018c51
 8018c34:	08018c59 	.word	0x08018c59
 8018c38:	08018c61 	.word	0x08018c61
 8018c3c:	08018c69 	.word	0x08018c69
 8018c40:	2300      	movs	r3, #0
 8018c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c46:	e284      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018c48:	2304      	movs	r3, #4
 8018c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c4e:	e280      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018c50:	2308      	movs	r3, #8
 8018c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c56:	e27c      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018c58:	2310      	movs	r3, #16
 8018c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c5e:	e278      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018c60:	2320      	movs	r3, #32
 8018c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c66:	e274      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018c68:	2340      	movs	r3, #64	@ 0x40
 8018c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c6e:	e270      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018c70:	2380      	movs	r3, #128	@ 0x80
 8018c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c76:	e26c      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018c78:	697b      	ldr	r3, [r7, #20]
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8018cec <UART_SetConfig+0x348>)
 8018c7e:	4293      	cmp	r3, r2
 8018c80:	d142      	bne.n	8018d08 <UART_SetConfig+0x364>
 8018c82:	4b16      	ldr	r3, [pc, #88]	@ (8018cdc <UART_SetConfig+0x338>)
 8018c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c86:	f003 0307 	and.w	r3, r3, #7
 8018c8a:	2b05      	cmp	r3, #5
 8018c8c:	d838      	bhi.n	8018d00 <UART_SetConfig+0x35c>
 8018c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8018c94 <UART_SetConfig+0x2f0>)
 8018c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c94:	08018cad 	.word	0x08018cad
 8018c98:	08018cb5 	.word	0x08018cb5
 8018c9c:	08018cbd 	.word	0x08018cbd
 8018ca0:	08018cc5 	.word	0x08018cc5
 8018ca4:	08018cf1 	.word	0x08018cf1
 8018ca8:	08018cf9 	.word	0x08018cf9
 8018cac:	2300      	movs	r3, #0
 8018cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cb2:	e24e      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018cb4:	2304      	movs	r3, #4
 8018cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cba:	e24a      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018cbc:	2308      	movs	r3, #8
 8018cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cc2:	e246      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018cc4:	2310      	movs	r3, #16
 8018cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cca:	e242      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018ccc:	cfff69f3 	.word	0xcfff69f3
 8018cd0:	58000c00 	.word	0x58000c00
 8018cd4:	11fff4ff 	.word	0x11fff4ff
 8018cd8:	40011000 	.word	0x40011000
 8018cdc:	58024400 	.word	0x58024400
 8018ce0:	40004400 	.word	0x40004400
 8018ce4:	40004800 	.word	0x40004800
 8018ce8:	40004c00 	.word	0x40004c00
 8018cec:	40005000 	.word	0x40005000
 8018cf0:	2320      	movs	r3, #32
 8018cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cf6:	e22c      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018cf8:	2340      	movs	r3, #64	@ 0x40
 8018cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cfe:	e228      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018d00:	2380      	movs	r3, #128	@ 0x80
 8018d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d06:	e224      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018d08:	697b      	ldr	r3, [r7, #20]
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	4ab1      	ldr	r2, [pc, #708]	@ (8018fd4 <UART_SetConfig+0x630>)
 8018d0e:	4293      	cmp	r3, r2
 8018d10:	d176      	bne.n	8018e00 <UART_SetConfig+0x45c>
 8018d12:	4bb1      	ldr	r3, [pc, #708]	@ (8018fd8 <UART_SetConfig+0x634>)
 8018d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018d16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018d1a:	2b28      	cmp	r3, #40	@ 0x28
 8018d1c:	d86c      	bhi.n	8018df8 <UART_SetConfig+0x454>
 8018d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8018d24 <UART_SetConfig+0x380>)
 8018d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d24:	08018dc9 	.word	0x08018dc9
 8018d28:	08018df9 	.word	0x08018df9
 8018d2c:	08018df9 	.word	0x08018df9
 8018d30:	08018df9 	.word	0x08018df9
 8018d34:	08018df9 	.word	0x08018df9
 8018d38:	08018df9 	.word	0x08018df9
 8018d3c:	08018df9 	.word	0x08018df9
 8018d40:	08018df9 	.word	0x08018df9
 8018d44:	08018dd1 	.word	0x08018dd1
 8018d48:	08018df9 	.word	0x08018df9
 8018d4c:	08018df9 	.word	0x08018df9
 8018d50:	08018df9 	.word	0x08018df9
 8018d54:	08018df9 	.word	0x08018df9
 8018d58:	08018df9 	.word	0x08018df9
 8018d5c:	08018df9 	.word	0x08018df9
 8018d60:	08018df9 	.word	0x08018df9
 8018d64:	08018dd9 	.word	0x08018dd9
 8018d68:	08018df9 	.word	0x08018df9
 8018d6c:	08018df9 	.word	0x08018df9
 8018d70:	08018df9 	.word	0x08018df9
 8018d74:	08018df9 	.word	0x08018df9
 8018d78:	08018df9 	.word	0x08018df9
 8018d7c:	08018df9 	.word	0x08018df9
 8018d80:	08018df9 	.word	0x08018df9
 8018d84:	08018de1 	.word	0x08018de1
 8018d88:	08018df9 	.word	0x08018df9
 8018d8c:	08018df9 	.word	0x08018df9
 8018d90:	08018df9 	.word	0x08018df9
 8018d94:	08018df9 	.word	0x08018df9
 8018d98:	08018df9 	.word	0x08018df9
 8018d9c:	08018df9 	.word	0x08018df9
 8018da0:	08018df9 	.word	0x08018df9
 8018da4:	08018de9 	.word	0x08018de9
 8018da8:	08018df9 	.word	0x08018df9
 8018dac:	08018df9 	.word	0x08018df9
 8018db0:	08018df9 	.word	0x08018df9
 8018db4:	08018df9 	.word	0x08018df9
 8018db8:	08018df9 	.word	0x08018df9
 8018dbc:	08018df9 	.word	0x08018df9
 8018dc0:	08018df9 	.word	0x08018df9
 8018dc4:	08018df1 	.word	0x08018df1
 8018dc8:	2301      	movs	r3, #1
 8018dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018dce:	e1c0      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018dd0:	2304      	movs	r3, #4
 8018dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018dd6:	e1bc      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018dd8:	2308      	movs	r3, #8
 8018dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018dde:	e1b8      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018de0:	2310      	movs	r3, #16
 8018de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018de6:	e1b4      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018de8:	2320      	movs	r3, #32
 8018dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018dee:	e1b0      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018df0:	2340      	movs	r3, #64	@ 0x40
 8018df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018df6:	e1ac      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018df8:	2380      	movs	r3, #128	@ 0x80
 8018dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018dfe:	e1a8      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018e00:	697b      	ldr	r3, [r7, #20]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	4a75      	ldr	r2, [pc, #468]	@ (8018fdc <UART_SetConfig+0x638>)
 8018e06:	4293      	cmp	r3, r2
 8018e08:	d130      	bne.n	8018e6c <UART_SetConfig+0x4c8>
 8018e0a:	4b73      	ldr	r3, [pc, #460]	@ (8018fd8 <UART_SetConfig+0x634>)
 8018e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018e0e:	f003 0307 	and.w	r3, r3, #7
 8018e12:	2b05      	cmp	r3, #5
 8018e14:	d826      	bhi.n	8018e64 <UART_SetConfig+0x4c0>
 8018e16:	a201      	add	r2, pc, #4	@ (adr r2, 8018e1c <UART_SetConfig+0x478>)
 8018e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e1c:	08018e35 	.word	0x08018e35
 8018e20:	08018e3d 	.word	0x08018e3d
 8018e24:	08018e45 	.word	0x08018e45
 8018e28:	08018e4d 	.word	0x08018e4d
 8018e2c:	08018e55 	.word	0x08018e55
 8018e30:	08018e5d 	.word	0x08018e5d
 8018e34:	2300      	movs	r3, #0
 8018e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e3a:	e18a      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018e3c:	2304      	movs	r3, #4
 8018e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e42:	e186      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018e44:	2308      	movs	r3, #8
 8018e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e4a:	e182      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018e4c:	2310      	movs	r3, #16
 8018e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e52:	e17e      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018e54:	2320      	movs	r3, #32
 8018e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e5a:	e17a      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018e5c:	2340      	movs	r3, #64	@ 0x40
 8018e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e62:	e176      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018e64:	2380      	movs	r3, #128	@ 0x80
 8018e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e6a:	e172      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018e6c:	697b      	ldr	r3, [r7, #20]
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	4a5b      	ldr	r2, [pc, #364]	@ (8018fe0 <UART_SetConfig+0x63c>)
 8018e72:	4293      	cmp	r3, r2
 8018e74:	d130      	bne.n	8018ed8 <UART_SetConfig+0x534>
 8018e76:	4b58      	ldr	r3, [pc, #352]	@ (8018fd8 <UART_SetConfig+0x634>)
 8018e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018e7a:	f003 0307 	and.w	r3, r3, #7
 8018e7e:	2b05      	cmp	r3, #5
 8018e80:	d826      	bhi.n	8018ed0 <UART_SetConfig+0x52c>
 8018e82:	a201      	add	r2, pc, #4	@ (adr r2, 8018e88 <UART_SetConfig+0x4e4>)
 8018e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e88:	08018ea1 	.word	0x08018ea1
 8018e8c:	08018ea9 	.word	0x08018ea9
 8018e90:	08018eb1 	.word	0x08018eb1
 8018e94:	08018eb9 	.word	0x08018eb9
 8018e98:	08018ec1 	.word	0x08018ec1
 8018e9c:	08018ec9 	.word	0x08018ec9
 8018ea0:	2300      	movs	r3, #0
 8018ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ea6:	e154      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018ea8:	2304      	movs	r3, #4
 8018eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eae:	e150      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018eb0:	2308      	movs	r3, #8
 8018eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eb6:	e14c      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018eb8:	2310      	movs	r3, #16
 8018eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ebe:	e148      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018ec0:	2320      	movs	r3, #32
 8018ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ec6:	e144      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018ec8:	2340      	movs	r3, #64	@ 0x40
 8018eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ece:	e140      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018ed0:	2380      	movs	r3, #128	@ 0x80
 8018ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ed6:	e13c      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018ed8:	697b      	ldr	r3, [r7, #20]
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	4a41      	ldr	r2, [pc, #260]	@ (8018fe4 <UART_SetConfig+0x640>)
 8018ede:	4293      	cmp	r3, r2
 8018ee0:	f040 8082 	bne.w	8018fe8 <UART_SetConfig+0x644>
 8018ee4:	4b3c      	ldr	r3, [pc, #240]	@ (8018fd8 <UART_SetConfig+0x634>)
 8018ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ee8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018eec:	2b28      	cmp	r3, #40	@ 0x28
 8018eee:	d86d      	bhi.n	8018fcc <UART_SetConfig+0x628>
 8018ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8018ef8 <UART_SetConfig+0x554>)
 8018ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ef6:	bf00      	nop
 8018ef8:	08018f9d 	.word	0x08018f9d
 8018efc:	08018fcd 	.word	0x08018fcd
 8018f00:	08018fcd 	.word	0x08018fcd
 8018f04:	08018fcd 	.word	0x08018fcd
 8018f08:	08018fcd 	.word	0x08018fcd
 8018f0c:	08018fcd 	.word	0x08018fcd
 8018f10:	08018fcd 	.word	0x08018fcd
 8018f14:	08018fcd 	.word	0x08018fcd
 8018f18:	08018fa5 	.word	0x08018fa5
 8018f1c:	08018fcd 	.word	0x08018fcd
 8018f20:	08018fcd 	.word	0x08018fcd
 8018f24:	08018fcd 	.word	0x08018fcd
 8018f28:	08018fcd 	.word	0x08018fcd
 8018f2c:	08018fcd 	.word	0x08018fcd
 8018f30:	08018fcd 	.word	0x08018fcd
 8018f34:	08018fcd 	.word	0x08018fcd
 8018f38:	08018fad 	.word	0x08018fad
 8018f3c:	08018fcd 	.word	0x08018fcd
 8018f40:	08018fcd 	.word	0x08018fcd
 8018f44:	08018fcd 	.word	0x08018fcd
 8018f48:	08018fcd 	.word	0x08018fcd
 8018f4c:	08018fcd 	.word	0x08018fcd
 8018f50:	08018fcd 	.word	0x08018fcd
 8018f54:	08018fcd 	.word	0x08018fcd
 8018f58:	08018fb5 	.word	0x08018fb5
 8018f5c:	08018fcd 	.word	0x08018fcd
 8018f60:	08018fcd 	.word	0x08018fcd
 8018f64:	08018fcd 	.word	0x08018fcd
 8018f68:	08018fcd 	.word	0x08018fcd
 8018f6c:	08018fcd 	.word	0x08018fcd
 8018f70:	08018fcd 	.word	0x08018fcd
 8018f74:	08018fcd 	.word	0x08018fcd
 8018f78:	08018fbd 	.word	0x08018fbd
 8018f7c:	08018fcd 	.word	0x08018fcd
 8018f80:	08018fcd 	.word	0x08018fcd
 8018f84:	08018fcd 	.word	0x08018fcd
 8018f88:	08018fcd 	.word	0x08018fcd
 8018f8c:	08018fcd 	.word	0x08018fcd
 8018f90:	08018fcd 	.word	0x08018fcd
 8018f94:	08018fcd 	.word	0x08018fcd
 8018f98:	08018fc5 	.word	0x08018fc5
 8018f9c:	2301      	movs	r3, #1
 8018f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018fa2:	e0d6      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018fa4:	2304      	movs	r3, #4
 8018fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018faa:	e0d2      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018fac:	2308      	movs	r3, #8
 8018fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018fb2:	e0ce      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018fb4:	2310      	movs	r3, #16
 8018fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018fba:	e0ca      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018fbc:	2320      	movs	r3, #32
 8018fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018fc2:	e0c6      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018fc4:	2340      	movs	r3, #64	@ 0x40
 8018fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018fca:	e0c2      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018fcc:	2380      	movs	r3, #128	@ 0x80
 8018fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018fd2:	e0be      	b.n	8019152 <UART_SetConfig+0x7ae>
 8018fd4:	40011400 	.word	0x40011400
 8018fd8:	58024400 	.word	0x58024400
 8018fdc:	40007800 	.word	0x40007800
 8018fe0:	40007c00 	.word	0x40007c00
 8018fe4:	40011800 	.word	0x40011800
 8018fe8:	697b      	ldr	r3, [r7, #20]
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	4aad      	ldr	r2, [pc, #692]	@ (80192a4 <UART_SetConfig+0x900>)
 8018fee:	4293      	cmp	r3, r2
 8018ff0:	d176      	bne.n	80190e0 <UART_SetConfig+0x73c>
 8018ff2:	4bad      	ldr	r3, [pc, #692]	@ (80192a8 <UART_SetConfig+0x904>)
 8018ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ff6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018ffa:	2b28      	cmp	r3, #40	@ 0x28
 8018ffc:	d86c      	bhi.n	80190d8 <UART_SetConfig+0x734>
 8018ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8019004 <UART_SetConfig+0x660>)
 8019000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019004:	080190a9 	.word	0x080190a9
 8019008:	080190d9 	.word	0x080190d9
 801900c:	080190d9 	.word	0x080190d9
 8019010:	080190d9 	.word	0x080190d9
 8019014:	080190d9 	.word	0x080190d9
 8019018:	080190d9 	.word	0x080190d9
 801901c:	080190d9 	.word	0x080190d9
 8019020:	080190d9 	.word	0x080190d9
 8019024:	080190b1 	.word	0x080190b1
 8019028:	080190d9 	.word	0x080190d9
 801902c:	080190d9 	.word	0x080190d9
 8019030:	080190d9 	.word	0x080190d9
 8019034:	080190d9 	.word	0x080190d9
 8019038:	080190d9 	.word	0x080190d9
 801903c:	080190d9 	.word	0x080190d9
 8019040:	080190d9 	.word	0x080190d9
 8019044:	080190b9 	.word	0x080190b9
 8019048:	080190d9 	.word	0x080190d9
 801904c:	080190d9 	.word	0x080190d9
 8019050:	080190d9 	.word	0x080190d9
 8019054:	080190d9 	.word	0x080190d9
 8019058:	080190d9 	.word	0x080190d9
 801905c:	080190d9 	.word	0x080190d9
 8019060:	080190d9 	.word	0x080190d9
 8019064:	080190c1 	.word	0x080190c1
 8019068:	080190d9 	.word	0x080190d9
 801906c:	080190d9 	.word	0x080190d9
 8019070:	080190d9 	.word	0x080190d9
 8019074:	080190d9 	.word	0x080190d9
 8019078:	080190d9 	.word	0x080190d9
 801907c:	080190d9 	.word	0x080190d9
 8019080:	080190d9 	.word	0x080190d9
 8019084:	080190c9 	.word	0x080190c9
 8019088:	080190d9 	.word	0x080190d9
 801908c:	080190d9 	.word	0x080190d9
 8019090:	080190d9 	.word	0x080190d9
 8019094:	080190d9 	.word	0x080190d9
 8019098:	080190d9 	.word	0x080190d9
 801909c:	080190d9 	.word	0x080190d9
 80190a0:	080190d9 	.word	0x080190d9
 80190a4:	080190d1 	.word	0x080190d1
 80190a8:	2301      	movs	r3, #1
 80190aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190ae:	e050      	b.n	8019152 <UART_SetConfig+0x7ae>
 80190b0:	2304      	movs	r3, #4
 80190b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190b6:	e04c      	b.n	8019152 <UART_SetConfig+0x7ae>
 80190b8:	2308      	movs	r3, #8
 80190ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190be:	e048      	b.n	8019152 <UART_SetConfig+0x7ae>
 80190c0:	2310      	movs	r3, #16
 80190c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190c6:	e044      	b.n	8019152 <UART_SetConfig+0x7ae>
 80190c8:	2320      	movs	r3, #32
 80190ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190ce:	e040      	b.n	8019152 <UART_SetConfig+0x7ae>
 80190d0:	2340      	movs	r3, #64	@ 0x40
 80190d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190d6:	e03c      	b.n	8019152 <UART_SetConfig+0x7ae>
 80190d8:	2380      	movs	r3, #128	@ 0x80
 80190da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190de:	e038      	b.n	8019152 <UART_SetConfig+0x7ae>
 80190e0:	697b      	ldr	r3, [r7, #20]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	4a71      	ldr	r2, [pc, #452]	@ (80192ac <UART_SetConfig+0x908>)
 80190e6:	4293      	cmp	r3, r2
 80190e8:	d130      	bne.n	801914c <UART_SetConfig+0x7a8>
 80190ea:	4b6f      	ldr	r3, [pc, #444]	@ (80192a8 <UART_SetConfig+0x904>)
 80190ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80190ee:	f003 0307 	and.w	r3, r3, #7
 80190f2:	2b05      	cmp	r3, #5
 80190f4:	d826      	bhi.n	8019144 <UART_SetConfig+0x7a0>
 80190f6:	a201      	add	r2, pc, #4	@ (adr r2, 80190fc <UART_SetConfig+0x758>)
 80190f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190fc:	08019115 	.word	0x08019115
 8019100:	0801911d 	.word	0x0801911d
 8019104:	08019125 	.word	0x08019125
 8019108:	0801912d 	.word	0x0801912d
 801910c:	08019135 	.word	0x08019135
 8019110:	0801913d 	.word	0x0801913d
 8019114:	2302      	movs	r3, #2
 8019116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801911a:	e01a      	b.n	8019152 <UART_SetConfig+0x7ae>
 801911c:	2304      	movs	r3, #4
 801911e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019122:	e016      	b.n	8019152 <UART_SetConfig+0x7ae>
 8019124:	2308      	movs	r3, #8
 8019126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801912a:	e012      	b.n	8019152 <UART_SetConfig+0x7ae>
 801912c:	2310      	movs	r3, #16
 801912e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019132:	e00e      	b.n	8019152 <UART_SetConfig+0x7ae>
 8019134:	2320      	movs	r3, #32
 8019136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801913a:	e00a      	b.n	8019152 <UART_SetConfig+0x7ae>
 801913c:	2340      	movs	r3, #64	@ 0x40
 801913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019142:	e006      	b.n	8019152 <UART_SetConfig+0x7ae>
 8019144:	2380      	movs	r3, #128	@ 0x80
 8019146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801914a:	e002      	b.n	8019152 <UART_SetConfig+0x7ae>
 801914c:	2380      	movs	r3, #128	@ 0x80
 801914e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8019152:	697b      	ldr	r3, [r7, #20]
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	4a55      	ldr	r2, [pc, #340]	@ (80192ac <UART_SetConfig+0x908>)
 8019158:	4293      	cmp	r3, r2
 801915a:	f040 80f8 	bne.w	801934e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801915e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019162:	2b20      	cmp	r3, #32
 8019164:	dc46      	bgt.n	80191f4 <UART_SetConfig+0x850>
 8019166:	2b02      	cmp	r3, #2
 8019168:	db75      	blt.n	8019256 <UART_SetConfig+0x8b2>
 801916a:	3b02      	subs	r3, #2
 801916c:	2b1e      	cmp	r3, #30
 801916e:	d872      	bhi.n	8019256 <UART_SetConfig+0x8b2>
 8019170:	a201      	add	r2, pc, #4	@ (adr r2, 8019178 <UART_SetConfig+0x7d4>)
 8019172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019176:	bf00      	nop
 8019178:	080191fb 	.word	0x080191fb
 801917c:	08019257 	.word	0x08019257
 8019180:	08019203 	.word	0x08019203
 8019184:	08019257 	.word	0x08019257
 8019188:	08019257 	.word	0x08019257
 801918c:	08019257 	.word	0x08019257
 8019190:	08019213 	.word	0x08019213
 8019194:	08019257 	.word	0x08019257
 8019198:	08019257 	.word	0x08019257
 801919c:	08019257 	.word	0x08019257
 80191a0:	08019257 	.word	0x08019257
 80191a4:	08019257 	.word	0x08019257
 80191a8:	08019257 	.word	0x08019257
 80191ac:	08019257 	.word	0x08019257
 80191b0:	08019223 	.word	0x08019223
 80191b4:	08019257 	.word	0x08019257
 80191b8:	08019257 	.word	0x08019257
 80191bc:	08019257 	.word	0x08019257
 80191c0:	08019257 	.word	0x08019257
 80191c4:	08019257 	.word	0x08019257
 80191c8:	08019257 	.word	0x08019257
 80191cc:	08019257 	.word	0x08019257
 80191d0:	08019257 	.word	0x08019257
 80191d4:	08019257 	.word	0x08019257
 80191d8:	08019257 	.word	0x08019257
 80191dc:	08019257 	.word	0x08019257
 80191e0:	08019257 	.word	0x08019257
 80191e4:	08019257 	.word	0x08019257
 80191e8:	08019257 	.word	0x08019257
 80191ec:	08019257 	.word	0x08019257
 80191f0:	08019249 	.word	0x08019249
 80191f4:	2b40      	cmp	r3, #64	@ 0x40
 80191f6:	d02a      	beq.n	801924e <UART_SetConfig+0x8aa>
 80191f8:	e02d      	b.n	8019256 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80191fa:	f7fa fd8b 	bl	8013d14 <HAL_RCCEx_GetD3PCLK1Freq>
 80191fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019200:	e02f      	b.n	8019262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019206:	4618      	mov	r0, r3
 8019208:	f7fa fd9a 	bl	8013d40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801920c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801920e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019210:	e027      	b.n	8019262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019212:	f107 0318 	add.w	r3, r7, #24
 8019216:	4618      	mov	r0, r3
 8019218:	f7fa fee6 	bl	8013fe8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801921c:	69fb      	ldr	r3, [r7, #28]
 801921e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019220:	e01f      	b.n	8019262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019222:	4b21      	ldr	r3, [pc, #132]	@ (80192a8 <UART_SetConfig+0x904>)
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	f003 0320 	and.w	r3, r3, #32
 801922a:	2b00      	cmp	r3, #0
 801922c:	d009      	beq.n	8019242 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801922e:	4b1e      	ldr	r3, [pc, #120]	@ (80192a8 <UART_SetConfig+0x904>)
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	08db      	lsrs	r3, r3, #3
 8019234:	f003 0303 	and.w	r3, r3, #3
 8019238:	4a1d      	ldr	r2, [pc, #116]	@ (80192b0 <UART_SetConfig+0x90c>)
 801923a:	fa22 f303 	lsr.w	r3, r2, r3
 801923e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019240:	e00f      	b.n	8019262 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8019242:	4b1b      	ldr	r3, [pc, #108]	@ (80192b0 <UART_SetConfig+0x90c>)
 8019244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019246:	e00c      	b.n	8019262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8019248:	4b1a      	ldr	r3, [pc, #104]	@ (80192b4 <UART_SetConfig+0x910>)
 801924a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801924c:	e009      	b.n	8019262 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801924e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019254:	e005      	b.n	8019262 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8019256:	2300      	movs	r3, #0
 8019258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801925a:	2301      	movs	r3, #1
 801925c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8019260:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8019262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019264:	2b00      	cmp	r3, #0
 8019266:	f000 81ee 	beq.w	8019646 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801926a:	697b      	ldr	r3, [r7, #20]
 801926c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801926e:	4a12      	ldr	r2, [pc, #72]	@ (80192b8 <UART_SetConfig+0x914>)
 8019270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019274:	461a      	mov	r2, r3
 8019276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019278:	fbb3 f3f2 	udiv	r3, r3, r2
 801927c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801927e:	697b      	ldr	r3, [r7, #20]
 8019280:	685a      	ldr	r2, [r3, #4]
 8019282:	4613      	mov	r3, r2
 8019284:	005b      	lsls	r3, r3, #1
 8019286:	4413      	add	r3, r2
 8019288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801928a:	429a      	cmp	r2, r3
 801928c:	d305      	bcc.n	801929a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801928e:	697b      	ldr	r3, [r7, #20]
 8019290:	685b      	ldr	r3, [r3, #4]
 8019292:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019296:	429a      	cmp	r2, r3
 8019298:	d910      	bls.n	80192bc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801929a:	2301      	movs	r3, #1
 801929c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80192a0:	e1d1      	b.n	8019646 <UART_SetConfig+0xca2>
 80192a2:	bf00      	nop
 80192a4:	40011c00 	.word	0x40011c00
 80192a8:	58024400 	.word	0x58024400
 80192ac:	58000c00 	.word	0x58000c00
 80192b0:	03d09000 	.word	0x03d09000
 80192b4:	003d0900 	.word	0x003d0900
 80192b8:	0801e9fc 	.word	0x0801e9fc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80192bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192be:	2200      	movs	r2, #0
 80192c0:	60bb      	str	r3, [r7, #8]
 80192c2:	60fa      	str	r2, [r7, #12]
 80192c4:	697b      	ldr	r3, [r7, #20]
 80192c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192c8:	4ac0      	ldr	r2, [pc, #768]	@ (80195cc <UART_SetConfig+0xc28>)
 80192ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80192ce:	b29b      	uxth	r3, r3
 80192d0:	2200      	movs	r2, #0
 80192d2:	603b      	str	r3, [r7, #0]
 80192d4:	607a      	str	r2, [r7, #4]
 80192d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80192da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80192de:	f7e7 f867 	bl	80003b0 <__aeabi_uldivmod>
 80192e2:	4602      	mov	r2, r0
 80192e4:	460b      	mov	r3, r1
 80192e6:	4610      	mov	r0, r2
 80192e8:	4619      	mov	r1, r3
 80192ea:	f04f 0200 	mov.w	r2, #0
 80192ee:	f04f 0300 	mov.w	r3, #0
 80192f2:	020b      	lsls	r3, r1, #8
 80192f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80192f8:	0202      	lsls	r2, r0, #8
 80192fa:	6979      	ldr	r1, [r7, #20]
 80192fc:	6849      	ldr	r1, [r1, #4]
 80192fe:	0849      	lsrs	r1, r1, #1
 8019300:	2000      	movs	r0, #0
 8019302:	460c      	mov	r4, r1
 8019304:	4605      	mov	r5, r0
 8019306:	eb12 0804 	adds.w	r8, r2, r4
 801930a:	eb43 0905 	adc.w	r9, r3, r5
 801930e:	697b      	ldr	r3, [r7, #20]
 8019310:	685b      	ldr	r3, [r3, #4]
 8019312:	2200      	movs	r2, #0
 8019314:	469a      	mov	sl, r3
 8019316:	4693      	mov	fp, r2
 8019318:	4652      	mov	r2, sl
 801931a:	465b      	mov	r3, fp
 801931c:	4640      	mov	r0, r8
 801931e:	4649      	mov	r1, r9
 8019320:	f7e7 f846 	bl	80003b0 <__aeabi_uldivmod>
 8019324:	4602      	mov	r2, r0
 8019326:	460b      	mov	r3, r1
 8019328:	4613      	mov	r3, r2
 801932a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801932c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801932e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8019332:	d308      	bcc.n	8019346 <UART_SetConfig+0x9a2>
 8019334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801933a:	d204      	bcs.n	8019346 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801933c:	697b      	ldr	r3, [r7, #20]
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019342:	60da      	str	r2, [r3, #12]
 8019344:	e17f      	b.n	8019646 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8019346:	2301      	movs	r3, #1
 8019348:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801934c:	e17b      	b.n	8019646 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801934e:	697b      	ldr	r3, [r7, #20]
 8019350:	69db      	ldr	r3, [r3, #28]
 8019352:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019356:	f040 80bd 	bne.w	80194d4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801935a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801935e:	2b20      	cmp	r3, #32
 8019360:	dc48      	bgt.n	80193f4 <UART_SetConfig+0xa50>
 8019362:	2b00      	cmp	r3, #0
 8019364:	db7b      	blt.n	801945e <UART_SetConfig+0xaba>
 8019366:	2b20      	cmp	r3, #32
 8019368:	d879      	bhi.n	801945e <UART_SetConfig+0xaba>
 801936a:	a201      	add	r2, pc, #4	@ (adr r2, 8019370 <UART_SetConfig+0x9cc>)
 801936c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019370:	080193fb 	.word	0x080193fb
 8019374:	08019403 	.word	0x08019403
 8019378:	0801945f 	.word	0x0801945f
 801937c:	0801945f 	.word	0x0801945f
 8019380:	0801940b 	.word	0x0801940b
 8019384:	0801945f 	.word	0x0801945f
 8019388:	0801945f 	.word	0x0801945f
 801938c:	0801945f 	.word	0x0801945f
 8019390:	0801941b 	.word	0x0801941b
 8019394:	0801945f 	.word	0x0801945f
 8019398:	0801945f 	.word	0x0801945f
 801939c:	0801945f 	.word	0x0801945f
 80193a0:	0801945f 	.word	0x0801945f
 80193a4:	0801945f 	.word	0x0801945f
 80193a8:	0801945f 	.word	0x0801945f
 80193ac:	0801945f 	.word	0x0801945f
 80193b0:	0801942b 	.word	0x0801942b
 80193b4:	0801945f 	.word	0x0801945f
 80193b8:	0801945f 	.word	0x0801945f
 80193bc:	0801945f 	.word	0x0801945f
 80193c0:	0801945f 	.word	0x0801945f
 80193c4:	0801945f 	.word	0x0801945f
 80193c8:	0801945f 	.word	0x0801945f
 80193cc:	0801945f 	.word	0x0801945f
 80193d0:	0801945f 	.word	0x0801945f
 80193d4:	0801945f 	.word	0x0801945f
 80193d8:	0801945f 	.word	0x0801945f
 80193dc:	0801945f 	.word	0x0801945f
 80193e0:	0801945f 	.word	0x0801945f
 80193e4:	0801945f 	.word	0x0801945f
 80193e8:	0801945f 	.word	0x0801945f
 80193ec:	0801945f 	.word	0x0801945f
 80193f0:	08019451 	.word	0x08019451
 80193f4:	2b40      	cmp	r3, #64	@ 0x40
 80193f6:	d02e      	beq.n	8019456 <UART_SetConfig+0xab2>
 80193f8:	e031      	b.n	801945e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80193fa:	f7f8 fded 	bl	8011fd8 <HAL_RCC_GetPCLK1Freq>
 80193fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019400:	e033      	b.n	801946a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019402:	f7f8 fdff 	bl	8012004 <HAL_RCC_GetPCLK2Freq>
 8019406:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019408:	e02f      	b.n	801946a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801940a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801940e:	4618      	mov	r0, r3
 8019410:	f7fa fc96 	bl	8013d40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8019414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019418:	e027      	b.n	801946a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801941a:	f107 0318 	add.w	r3, r7, #24
 801941e:	4618      	mov	r0, r3
 8019420:	f7fa fde2 	bl	8013fe8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8019424:	69fb      	ldr	r3, [r7, #28]
 8019426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019428:	e01f      	b.n	801946a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801942a:	4b69      	ldr	r3, [pc, #420]	@ (80195d0 <UART_SetConfig+0xc2c>)
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	f003 0320 	and.w	r3, r3, #32
 8019432:	2b00      	cmp	r3, #0
 8019434:	d009      	beq.n	801944a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8019436:	4b66      	ldr	r3, [pc, #408]	@ (80195d0 <UART_SetConfig+0xc2c>)
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	08db      	lsrs	r3, r3, #3
 801943c:	f003 0303 	and.w	r3, r3, #3
 8019440:	4a64      	ldr	r2, [pc, #400]	@ (80195d4 <UART_SetConfig+0xc30>)
 8019442:	fa22 f303 	lsr.w	r3, r2, r3
 8019446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019448:	e00f      	b.n	801946a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801944a:	4b62      	ldr	r3, [pc, #392]	@ (80195d4 <UART_SetConfig+0xc30>)
 801944c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801944e:	e00c      	b.n	801946a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8019450:	4b61      	ldr	r3, [pc, #388]	@ (80195d8 <UART_SetConfig+0xc34>)
 8019452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019454:	e009      	b.n	801946a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801945a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801945c:	e005      	b.n	801946a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801945e:	2300      	movs	r3, #0
 8019460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8019462:	2301      	movs	r3, #1
 8019464:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8019468:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801946a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801946c:	2b00      	cmp	r3, #0
 801946e:	f000 80ea 	beq.w	8019646 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019472:	697b      	ldr	r3, [r7, #20]
 8019474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019476:	4a55      	ldr	r2, [pc, #340]	@ (80195cc <UART_SetConfig+0xc28>)
 8019478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801947c:	461a      	mov	r2, r3
 801947e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019480:	fbb3 f3f2 	udiv	r3, r3, r2
 8019484:	005a      	lsls	r2, r3, #1
 8019486:	697b      	ldr	r3, [r7, #20]
 8019488:	685b      	ldr	r3, [r3, #4]
 801948a:	085b      	lsrs	r3, r3, #1
 801948c:	441a      	add	r2, r3
 801948e:	697b      	ldr	r3, [r7, #20]
 8019490:	685b      	ldr	r3, [r3, #4]
 8019492:	fbb2 f3f3 	udiv	r3, r2, r3
 8019496:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801949a:	2b0f      	cmp	r3, #15
 801949c:	d916      	bls.n	80194cc <UART_SetConfig+0xb28>
 801949e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80194a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80194a4:	d212      	bcs.n	80194cc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80194a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80194a8:	b29b      	uxth	r3, r3
 80194aa:	f023 030f 	bic.w	r3, r3, #15
 80194ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80194b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80194b2:	085b      	lsrs	r3, r3, #1
 80194b4:	b29b      	uxth	r3, r3
 80194b6:	f003 0307 	and.w	r3, r3, #7
 80194ba:	b29a      	uxth	r2, r3
 80194bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80194be:	4313      	orrs	r3, r2
 80194c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80194c2:	697b      	ldr	r3, [r7, #20]
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80194c8:	60da      	str	r2, [r3, #12]
 80194ca:	e0bc      	b.n	8019646 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80194cc:	2301      	movs	r3, #1
 80194ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80194d2:	e0b8      	b.n	8019646 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80194d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80194d8:	2b20      	cmp	r3, #32
 80194da:	dc4b      	bgt.n	8019574 <UART_SetConfig+0xbd0>
 80194dc:	2b00      	cmp	r3, #0
 80194de:	f2c0 8087 	blt.w	80195f0 <UART_SetConfig+0xc4c>
 80194e2:	2b20      	cmp	r3, #32
 80194e4:	f200 8084 	bhi.w	80195f0 <UART_SetConfig+0xc4c>
 80194e8:	a201      	add	r2, pc, #4	@ (adr r2, 80194f0 <UART_SetConfig+0xb4c>)
 80194ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194ee:	bf00      	nop
 80194f0:	0801957b 	.word	0x0801957b
 80194f4:	08019583 	.word	0x08019583
 80194f8:	080195f1 	.word	0x080195f1
 80194fc:	080195f1 	.word	0x080195f1
 8019500:	0801958b 	.word	0x0801958b
 8019504:	080195f1 	.word	0x080195f1
 8019508:	080195f1 	.word	0x080195f1
 801950c:	080195f1 	.word	0x080195f1
 8019510:	0801959b 	.word	0x0801959b
 8019514:	080195f1 	.word	0x080195f1
 8019518:	080195f1 	.word	0x080195f1
 801951c:	080195f1 	.word	0x080195f1
 8019520:	080195f1 	.word	0x080195f1
 8019524:	080195f1 	.word	0x080195f1
 8019528:	080195f1 	.word	0x080195f1
 801952c:	080195f1 	.word	0x080195f1
 8019530:	080195ab 	.word	0x080195ab
 8019534:	080195f1 	.word	0x080195f1
 8019538:	080195f1 	.word	0x080195f1
 801953c:	080195f1 	.word	0x080195f1
 8019540:	080195f1 	.word	0x080195f1
 8019544:	080195f1 	.word	0x080195f1
 8019548:	080195f1 	.word	0x080195f1
 801954c:	080195f1 	.word	0x080195f1
 8019550:	080195f1 	.word	0x080195f1
 8019554:	080195f1 	.word	0x080195f1
 8019558:	080195f1 	.word	0x080195f1
 801955c:	080195f1 	.word	0x080195f1
 8019560:	080195f1 	.word	0x080195f1
 8019564:	080195f1 	.word	0x080195f1
 8019568:	080195f1 	.word	0x080195f1
 801956c:	080195f1 	.word	0x080195f1
 8019570:	080195e3 	.word	0x080195e3
 8019574:	2b40      	cmp	r3, #64	@ 0x40
 8019576:	d037      	beq.n	80195e8 <UART_SetConfig+0xc44>
 8019578:	e03a      	b.n	80195f0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801957a:	f7f8 fd2d 	bl	8011fd8 <HAL_RCC_GetPCLK1Freq>
 801957e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019580:	e03c      	b.n	80195fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019582:	f7f8 fd3f 	bl	8012004 <HAL_RCC_GetPCLK2Freq>
 8019586:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019588:	e038      	b.n	80195fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801958a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801958e:	4618      	mov	r0, r3
 8019590:	f7fa fbd6 	bl	8013d40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8019594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019598:	e030      	b.n	80195fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801959a:	f107 0318 	add.w	r3, r7, #24
 801959e:	4618      	mov	r0, r3
 80195a0:	f7fa fd22 	bl	8013fe8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80195a4:	69fb      	ldr	r3, [r7, #28]
 80195a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80195a8:	e028      	b.n	80195fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80195aa:	4b09      	ldr	r3, [pc, #36]	@ (80195d0 <UART_SetConfig+0xc2c>)
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	f003 0320 	and.w	r3, r3, #32
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d012      	beq.n	80195dc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80195b6:	4b06      	ldr	r3, [pc, #24]	@ (80195d0 <UART_SetConfig+0xc2c>)
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	08db      	lsrs	r3, r3, #3
 80195bc:	f003 0303 	and.w	r3, r3, #3
 80195c0:	4a04      	ldr	r2, [pc, #16]	@ (80195d4 <UART_SetConfig+0xc30>)
 80195c2:	fa22 f303 	lsr.w	r3, r2, r3
 80195c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80195c8:	e018      	b.n	80195fc <UART_SetConfig+0xc58>
 80195ca:	bf00      	nop
 80195cc:	0801e9fc 	.word	0x0801e9fc
 80195d0:	58024400 	.word	0x58024400
 80195d4:	03d09000 	.word	0x03d09000
 80195d8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80195dc:	4b24      	ldr	r3, [pc, #144]	@ (8019670 <UART_SetConfig+0xccc>)
 80195de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80195e0:	e00c      	b.n	80195fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80195e2:	4b24      	ldr	r3, [pc, #144]	@ (8019674 <UART_SetConfig+0xcd0>)
 80195e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80195e6:	e009      	b.n	80195fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80195e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80195ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80195ee:	e005      	b.n	80195fc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80195f0:	2300      	movs	r3, #0
 80195f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80195f4:	2301      	movs	r3, #1
 80195f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80195fa:	bf00      	nop
    }

    if (pclk != 0U)
 80195fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d021      	beq.n	8019646 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019602:	697b      	ldr	r3, [r7, #20]
 8019604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019606:	4a1c      	ldr	r2, [pc, #112]	@ (8019678 <UART_SetConfig+0xcd4>)
 8019608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801960c:	461a      	mov	r2, r3
 801960e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019610:	fbb3 f2f2 	udiv	r2, r3, r2
 8019614:	697b      	ldr	r3, [r7, #20]
 8019616:	685b      	ldr	r3, [r3, #4]
 8019618:	085b      	lsrs	r3, r3, #1
 801961a:	441a      	add	r2, r3
 801961c:	697b      	ldr	r3, [r7, #20]
 801961e:	685b      	ldr	r3, [r3, #4]
 8019620:	fbb2 f3f3 	udiv	r3, r2, r3
 8019624:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019628:	2b0f      	cmp	r3, #15
 801962a:	d909      	bls.n	8019640 <UART_SetConfig+0xc9c>
 801962c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801962e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019632:	d205      	bcs.n	8019640 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8019634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019636:	b29a      	uxth	r2, r3
 8019638:	697b      	ldr	r3, [r7, #20]
 801963a:	681b      	ldr	r3, [r3, #0]
 801963c:	60da      	str	r2, [r3, #12]
 801963e:	e002      	b.n	8019646 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8019640:	2301      	movs	r3, #1
 8019642:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8019646:	697b      	ldr	r3, [r7, #20]
 8019648:	2201      	movs	r2, #1
 801964a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801964e:	697b      	ldr	r3, [r7, #20]
 8019650:	2201      	movs	r2, #1
 8019652:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8019656:	697b      	ldr	r3, [r7, #20]
 8019658:	2200      	movs	r2, #0
 801965a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801965c:	697b      	ldr	r3, [r7, #20]
 801965e:	2200      	movs	r2, #0
 8019660:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8019662:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8019666:	4618      	mov	r0, r3
 8019668:	3748      	adds	r7, #72	@ 0x48
 801966a:	46bd      	mov	sp, r7
 801966c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019670:	03d09000 	.word	0x03d09000
 8019674:	003d0900 	.word	0x003d0900
 8019678:	0801e9fc 	.word	0x0801e9fc

0801967c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801967c:	b480      	push	{r7}
 801967e:	b083      	sub	sp, #12
 8019680:	af00      	add	r7, sp, #0
 8019682:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019688:	f003 0308 	and.w	r3, r3, #8
 801968c:	2b00      	cmp	r3, #0
 801968e:	d00a      	beq.n	80196a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	685b      	ldr	r3, [r3, #4]
 8019696:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	681b      	ldr	r3, [r3, #0]
 80196a2:	430a      	orrs	r2, r1
 80196a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196aa:	f003 0301 	and.w	r3, r3, #1
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d00a      	beq.n	80196c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	681b      	ldr	r3, [r3, #0]
 80196b6:	685b      	ldr	r3, [r3, #4]
 80196b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	430a      	orrs	r2, r1
 80196c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196cc:	f003 0302 	and.w	r3, r3, #2
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d00a      	beq.n	80196ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	685b      	ldr	r3, [r3, #4]
 80196da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	430a      	orrs	r2, r1
 80196e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196ee:	f003 0304 	and.w	r3, r3, #4
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d00a      	beq.n	801970c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	685b      	ldr	r3, [r3, #4]
 80196fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	681b      	ldr	r3, [r3, #0]
 8019708:	430a      	orrs	r2, r1
 801970a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019710:	f003 0310 	and.w	r3, r3, #16
 8019714:	2b00      	cmp	r3, #0
 8019716:	d00a      	beq.n	801972e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	689b      	ldr	r3, [r3, #8]
 801971e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	430a      	orrs	r2, r1
 801972c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019732:	f003 0320 	and.w	r3, r3, #32
 8019736:	2b00      	cmp	r3, #0
 8019738:	d00a      	beq.n	8019750 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	689b      	ldr	r3, [r3, #8]
 8019740:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	430a      	orrs	r2, r1
 801974e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019758:	2b00      	cmp	r3, #0
 801975a:	d01a      	beq.n	8019792 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	685b      	ldr	r3, [r3, #4]
 8019762:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	430a      	orrs	r2, r1
 8019770:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019776:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801977a:	d10a      	bne.n	8019792 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	685b      	ldr	r3, [r3, #4]
 8019782:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	430a      	orrs	r2, r1
 8019790:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801979a:	2b00      	cmp	r3, #0
 801979c:	d00a      	beq.n	80197b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	685b      	ldr	r3, [r3, #4]
 80197a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	430a      	orrs	r2, r1
 80197b2:	605a      	str	r2, [r3, #4]
  }
}
 80197b4:	bf00      	nop
 80197b6:	370c      	adds	r7, #12
 80197b8:	46bd      	mov	sp, r7
 80197ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197be:	4770      	bx	lr

080197c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80197c0:	b580      	push	{r7, lr}
 80197c2:	b098      	sub	sp, #96	@ 0x60
 80197c4:	af02      	add	r7, sp, #8
 80197c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	2200      	movs	r2, #0
 80197cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80197d0:	f7ef fe94 	bl	80094fc <HAL_GetTick>
 80197d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	f003 0308 	and.w	r3, r3, #8
 80197e0:	2b08      	cmp	r3, #8
 80197e2:	d12f      	bne.n	8019844 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80197e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80197e8:	9300      	str	r3, [sp, #0]
 80197ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80197ec:	2200      	movs	r2, #0
 80197ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80197f2:	6878      	ldr	r0, [r7, #4]
 80197f4:	f000 f88e 	bl	8019914 <UART_WaitOnFlagUntilTimeout>
 80197f8:	4603      	mov	r3, r0
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d022      	beq.n	8019844 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019806:	e853 3f00 	ldrex	r3, [r3]
 801980a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801980c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801980e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019812:	653b      	str	r3, [r7, #80]	@ 0x50
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	461a      	mov	r2, r3
 801981a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801981c:	647b      	str	r3, [r7, #68]	@ 0x44
 801981e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019820:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019822:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019824:	e841 2300 	strex	r3, r2, [r1]
 8019828:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801982a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801982c:	2b00      	cmp	r3, #0
 801982e:	d1e6      	bne.n	80197fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	2220      	movs	r2, #32
 8019834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	2200      	movs	r2, #0
 801983c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019840:	2303      	movs	r3, #3
 8019842:	e063      	b.n	801990c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	681b      	ldr	r3, [r3, #0]
 801984a:	f003 0304 	and.w	r3, r3, #4
 801984e:	2b04      	cmp	r3, #4
 8019850:	d149      	bne.n	80198e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019852:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019856:	9300      	str	r3, [sp, #0]
 8019858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801985a:	2200      	movs	r2, #0
 801985c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8019860:	6878      	ldr	r0, [r7, #4]
 8019862:	f000 f857 	bl	8019914 <UART_WaitOnFlagUntilTimeout>
 8019866:	4603      	mov	r3, r0
 8019868:	2b00      	cmp	r3, #0
 801986a:	d03c      	beq.n	80198e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019874:	e853 3f00 	ldrex	r3, [r3]
 8019878:	623b      	str	r3, [r7, #32]
   return(result);
 801987a:	6a3b      	ldr	r3, [r7, #32]
 801987c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019880:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	461a      	mov	r2, r3
 8019888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801988a:	633b      	str	r3, [r7, #48]	@ 0x30
 801988c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801988e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019892:	e841 2300 	strex	r3, r2, [r1]
 8019896:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801989a:	2b00      	cmp	r3, #0
 801989c:	d1e6      	bne.n	801986c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	3308      	adds	r3, #8
 80198a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80198a6:	693b      	ldr	r3, [r7, #16]
 80198a8:	e853 3f00 	ldrex	r3, [r3]
 80198ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	f023 0301 	bic.w	r3, r3, #1
 80198b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	3308      	adds	r3, #8
 80198bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80198be:	61fa      	str	r2, [r7, #28]
 80198c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198c2:	69b9      	ldr	r1, [r7, #24]
 80198c4:	69fa      	ldr	r2, [r7, #28]
 80198c6:	e841 2300 	strex	r3, r2, [r1]
 80198ca:	617b      	str	r3, [r7, #20]
   return(result);
 80198cc:	697b      	ldr	r3, [r7, #20]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d1e5      	bne.n	801989e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	2220      	movs	r2, #32
 80198d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	2200      	movs	r2, #0
 80198de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80198e2:	2303      	movs	r3, #3
 80198e4:	e012      	b.n	801990c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	2220      	movs	r2, #32
 80198ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	2220      	movs	r2, #32
 80198f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	2200      	movs	r2, #0
 80198fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	2200      	movs	r2, #0
 8019900:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	2200      	movs	r2, #0
 8019906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801990a:	2300      	movs	r3, #0
}
 801990c:	4618      	mov	r0, r3
 801990e:	3758      	adds	r7, #88	@ 0x58
 8019910:	46bd      	mov	sp, r7
 8019912:	bd80      	pop	{r7, pc}

08019914 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8019914:	b580      	push	{r7, lr}
 8019916:	b084      	sub	sp, #16
 8019918:	af00      	add	r7, sp, #0
 801991a:	60f8      	str	r0, [r7, #12]
 801991c:	60b9      	str	r1, [r7, #8]
 801991e:	603b      	str	r3, [r7, #0]
 8019920:	4613      	mov	r3, r2
 8019922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019924:	e04f      	b.n	80199c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019926:	69bb      	ldr	r3, [r7, #24]
 8019928:	f1b3 3fff 	cmp.w	r3, #4294967295
 801992c:	d04b      	beq.n	80199c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801992e:	f7ef fde5 	bl	80094fc <HAL_GetTick>
 8019932:	4602      	mov	r2, r0
 8019934:	683b      	ldr	r3, [r7, #0]
 8019936:	1ad3      	subs	r3, r2, r3
 8019938:	69ba      	ldr	r2, [r7, #24]
 801993a:	429a      	cmp	r2, r3
 801993c:	d302      	bcc.n	8019944 <UART_WaitOnFlagUntilTimeout+0x30>
 801993e:	69bb      	ldr	r3, [r7, #24]
 8019940:	2b00      	cmp	r3, #0
 8019942:	d101      	bne.n	8019948 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8019944:	2303      	movs	r3, #3
 8019946:	e04e      	b.n	80199e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	f003 0304 	and.w	r3, r3, #4
 8019952:	2b00      	cmp	r3, #0
 8019954:	d037      	beq.n	80199c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8019956:	68bb      	ldr	r3, [r7, #8]
 8019958:	2b80      	cmp	r3, #128	@ 0x80
 801995a:	d034      	beq.n	80199c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801995c:	68bb      	ldr	r3, [r7, #8]
 801995e:	2b40      	cmp	r3, #64	@ 0x40
 8019960:	d031      	beq.n	80199c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	69db      	ldr	r3, [r3, #28]
 8019968:	f003 0308 	and.w	r3, r3, #8
 801996c:	2b08      	cmp	r3, #8
 801996e:	d110      	bne.n	8019992 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	2208      	movs	r2, #8
 8019976:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019978:	68f8      	ldr	r0, [r7, #12]
 801997a:	f000 f95b 	bl	8019c34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801997e:	68fb      	ldr	r3, [r7, #12]
 8019980:	2208      	movs	r2, #8
 8019982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	2200      	movs	r2, #0
 801998a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801998e:	2301      	movs	r3, #1
 8019990:	e029      	b.n	80199e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	69db      	ldr	r3, [r3, #28]
 8019998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801999c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80199a0:	d111      	bne.n	80199c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80199aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80199ac:	68f8      	ldr	r0, [r7, #12]
 80199ae:	f000 f941 	bl	8019c34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	2220      	movs	r2, #32
 80199b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	2200      	movs	r2, #0
 80199be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80199c2:	2303      	movs	r3, #3
 80199c4:	e00f      	b.n	80199e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	69da      	ldr	r2, [r3, #28]
 80199cc:	68bb      	ldr	r3, [r7, #8]
 80199ce:	4013      	ands	r3, r2
 80199d0:	68ba      	ldr	r2, [r7, #8]
 80199d2:	429a      	cmp	r2, r3
 80199d4:	bf0c      	ite	eq
 80199d6:	2301      	moveq	r3, #1
 80199d8:	2300      	movne	r3, #0
 80199da:	b2db      	uxtb	r3, r3
 80199dc:	461a      	mov	r2, r3
 80199de:	79fb      	ldrb	r3, [r7, #7]
 80199e0:	429a      	cmp	r2, r3
 80199e2:	d0a0      	beq.n	8019926 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80199e4:	2300      	movs	r3, #0
}
 80199e6:	4618      	mov	r0, r3
 80199e8:	3710      	adds	r7, #16
 80199ea:	46bd      	mov	sp, r7
 80199ec:	bd80      	pop	{r7, pc}
	...

080199f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80199f0:	b480      	push	{r7}
 80199f2:	b0a3      	sub	sp, #140	@ 0x8c
 80199f4:	af00      	add	r7, sp, #0
 80199f6:	60f8      	str	r0, [r7, #12]
 80199f8:	60b9      	str	r1, [r7, #8]
 80199fa:	4613      	mov	r3, r2
 80199fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	68ba      	ldr	r2, [r7, #8]
 8019a02:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8019a04:	68fb      	ldr	r3, [r7, #12]
 8019a06:	88fa      	ldrh	r2, [r7, #6]
 8019a08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8019a0c:	68fb      	ldr	r3, [r7, #12]
 8019a0e:	88fa      	ldrh	r2, [r7, #6]
 8019a10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	2200      	movs	r2, #0
 8019a18:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	689b      	ldr	r3, [r3, #8]
 8019a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019a22:	d10e      	bne.n	8019a42 <UART_Start_Receive_IT+0x52>
 8019a24:	68fb      	ldr	r3, [r7, #12]
 8019a26:	691b      	ldr	r3, [r3, #16]
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d105      	bne.n	8019a38 <UART_Start_Receive_IT+0x48>
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8019a32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a36:	e02d      	b.n	8019a94 <UART_Start_Receive_IT+0xa4>
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	22ff      	movs	r2, #255	@ 0xff
 8019a3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a40:	e028      	b.n	8019a94 <UART_Start_Receive_IT+0xa4>
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	689b      	ldr	r3, [r3, #8]
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	d10d      	bne.n	8019a66 <UART_Start_Receive_IT+0x76>
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	691b      	ldr	r3, [r3, #16]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d104      	bne.n	8019a5c <UART_Start_Receive_IT+0x6c>
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	22ff      	movs	r2, #255	@ 0xff
 8019a56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a5a:	e01b      	b.n	8019a94 <UART_Start_Receive_IT+0xa4>
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	227f      	movs	r2, #127	@ 0x7f
 8019a60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a64:	e016      	b.n	8019a94 <UART_Start_Receive_IT+0xa4>
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	689b      	ldr	r3, [r3, #8]
 8019a6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019a6e:	d10d      	bne.n	8019a8c <UART_Start_Receive_IT+0x9c>
 8019a70:	68fb      	ldr	r3, [r7, #12]
 8019a72:	691b      	ldr	r3, [r3, #16]
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d104      	bne.n	8019a82 <UART_Start_Receive_IT+0x92>
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	227f      	movs	r2, #127	@ 0x7f
 8019a7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a80:	e008      	b.n	8019a94 <UART_Start_Receive_IT+0xa4>
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	223f      	movs	r2, #63	@ 0x3f
 8019a86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a8a:	e003      	b.n	8019a94 <UART_Start_Receive_IT+0xa4>
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	2200      	movs	r2, #0
 8019a90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	2200      	movs	r2, #0
 8019a98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	2222      	movs	r2, #34	@ 0x22
 8019aa0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	681b      	ldr	r3, [r3, #0]
 8019aa8:	3308      	adds	r3, #8
 8019aaa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019aac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019aae:	e853 3f00 	ldrex	r3, [r3]
 8019ab2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8019ab4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019ab6:	f043 0301 	orr.w	r3, r3, #1
 8019aba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8019abe:	68fb      	ldr	r3, [r7, #12]
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	3308      	adds	r3, #8
 8019ac4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019ac8:	673a      	str	r2, [r7, #112]	@ 0x70
 8019aca:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019acc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8019ace:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019ad0:	e841 2300 	strex	r3, r2, [r1]
 8019ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8019ad6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d1e3      	bne.n	8019aa4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019ae0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019ae4:	d14f      	bne.n	8019b86 <UART_Start_Receive_IT+0x196>
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019aec:	88fa      	ldrh	r2, [r7, #6]
 8019aee:	429a      	cmp	r2, r3
 8019af0:	d349      	bcc.n	8019b86 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	689b      	ldr	r3, [r3, #8]
 8019af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019afa:	d107      	bne.n	8019b0c <UART_Start_Receive_IT+0x11c>
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	691b      	ldr	r3, [r3, #16]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d103      	bne.n	8019b0c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	4a47      	ldr	r2, [pc, #284]	@ (8019c24 <UART_Start_Receive_IT+0x234>)
 8019b08:	675a      	str	r2, [r3, #116]	@ 0x74
 8019b0a:	e002      	b.n	8019b12 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	4a46      	ldr	r2, [pc, #280]	@ (8019c28 <UART_Start_Receive_IT+0x238>)
 8019b10:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	691b      	ldr	r3, [r3, #16]
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d01a      	beq.n	8019b50 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019b22:	e853 3f00 	ldrex	r3, [r3]
 8019b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019b2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	461a      	mov	r2, r3
 8019b38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019b3e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b40:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019b42:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019b44:	e841 2300 	strex	r3, r2, [r1]
 8019b48:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8019b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d1e4      	bne.n	8019b1a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	3308      	adds	r3, #8
 8019b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019b5a:	e853 3f00 	ldrex	r3, [r3]
 8019b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8019b66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019b68:	68fb      	ldr	r3, [r7, #12]
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	3308      	adds	r3, #8
 8019b6e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019b70:	64ba      	str	r2, [r7, #72]	@ 0x48
 8019b72:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b74:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019b76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019b78:	e841 2300 	strex	r3, r2, [r1]
 8019b7c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8019b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d1e5      	bne.n	8019b50 <UART_Start_Receive_IT+0x160>
 8019b84:	e046      	b.n	8019c14 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	689b      	ldr	r3, [r3, #8]
 8019b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019b8e:	d107      	bne.n	8019ba0 <UART_Start_Receive_IT+0x1b0>
 8019b90:	68fb      	ldr	r3, [r7, #12]
 8019b92:	691b      	ldr	r3, [r3, #16]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d103      	bne.n	8019ba0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	4a24      	ldr	r2, [pc, #144]	@ (8019c2c <UART_Start_Receive_IT+0x23c>)
 8019b9c:	675a      	str	r2, [r3, #116]	@ 0x74
 8019b9e:	e002      	b.n	8019ba6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8019ba0:	68fb      	ldr	r3, [r7, #12]
 8019ba2:	4a23      	ldr	r2, [pc, #140]	@ (8019c30 <UART_Start_Receive_IT+0x240>)
 8019ba4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	691b      	ldr	r3, [r3, #16]
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d019      	beq.n	8019be2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019bb6:	e853 3f00 	ldrex	r3, [r3]
 8019bba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bbe:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8019bc2:	677b      	str	r3, [r7, #116]	@ 0x74
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	461a      	mov	r2, r3
 8019bca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8019bce:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019bd0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019bd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019bd4:	e841 2300 	strex	r3, r2, [r1]
 8019bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8019bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d1e6      	bne.n	8019bae <UART_Start_Receive_IT+0x1be>
 8019be0:	e018      	b.n	8019c14 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019be2:	68fb      	ldr	r3, [r7, #12]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019be8:	697b      	ldr	r3, [r7, #20]
 8019bea:	e853 3f00 	ldrex	r3, [r3]
 8019bee:	613b      	str	r3, [r7, #16]
   return(result);
 8019bf0:	693b      	ldr	r3, [r7, #16]
 8019bf2:	f043 0320 	orr.w	r3, r3, #32
 8019bf6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	461a      	mov	r2, r3
 8019bfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019c00:	623b      	str	r3, [r7, #32]
 8019c02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c04:	69f9      	ldr	r1, [r7, #28]
 8019c06:	6a3a      	ldr	r2, [r7, #32]
 8019c08:	e841 2300 	strex	r3, r2, [r1]
 8019c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8019c0e:	69bb      	ldr	r3, [r7, #24]
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d1e6      	bne.n	8019be2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8019c14:	2300      	movs	r3, #0
}
 8019c16:	4618      	mov	r0, r3
 8019c18:	378c      	adds	r7, #140	@ 0x8c
 8019c1a:	46bd      	mov	sp, r7
 8019c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c20:	4770      	bx	lr
 8019c22:	bf00      	nop
 8019c24:	0801a795 	.word	0x0801a795
 8019c28:	0801a431 	.word	0x0801a431
 8019c2c:	0801a279 	.word	0x0801a279
 8019c30:	0801a0c1 	.word	0x0801a0c1

08019c34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019c34:	b480      	push	{r7}
 8019c36:	b095      	sub	sp, #84	@ 0x54
 8019c38:	af00      	add	r7, sp, #0
 8019c3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c44:	e853 3f00 	ldrex	r3, [r3]
 8019c48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019c50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	461a      	mov	r2, r3
 8019c58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019c5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8019c5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019c60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019c62:	e841 2300 	strex	r3, r2, [r1]
 8019c66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d1e6      	bne.n	8019c3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	3308      	adds	r3, #8
 8019c74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c76:	6a3b      	ldr	r3, [r7, #32]
 8019c78:	e853 3f00 	ldrex	r3, [r3]
 8019c7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8019c7e:	69fa      	ldr	r2, [r7, #28]
 8019c80:	4b1e      	ldr	r3, [pc, #120]	@ (8019cfc <UART_EndRxTransfer+0xc8>)
 8019c82:	4013      	ands	r3, r2
 8019c84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	3308      	adds	r3, #8
 8019c8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019c8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019c90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019c94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019c96:	e841 2300 	strex	r3, r2, [r1]
 8019c9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d1e5      	bne.n	8019c6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019ca6:	2b01      	cmp	r3, #1
 8019ca8:	d118      	bne.n	8019cdc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019cb0:	68fb      	ldr	r3, [r7, #12]
 8019cb2:	e853 3f00 	ldrex	r3, [r3]
 8019cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8019cb8:	68bb      	ldr	r3, [r7, #8]
 8019cba:	f023 0310 	bic.w	r3, r3, #16
 8019cbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	461a      	mov	r2, r3
 8019cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019cc8:	61bb      	str	r3, [r7, #24]
 8019cca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ccc:	6979      	ldr	r1, [r7, #20]
 8019cce:	69ba      	ldr	r2, [r7, #24]
 8019cd0:	e841 2300 	strex	r3, r2, [r1]
 8019cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8019cd6:	693b      	ldr	r3, [r7, #16]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d1e6      	bne.n	8019caa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	2220      	movs	r2, #32
 8019ce0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	2200      	movs	r2, #0
 8019ce8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	2200      	movs	r2, #0
 8019cee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019cf0:	bf00      	nop
 8019cf2:	3754      	adds	r7, #84	@ 0x54
 8019cf4:	46bd      	mov	sp, r7
 8019cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cfa:	4770      	bx	lr
 8019cfc:	effffffe 	.word	0xeffffffe

08019d00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019d00:	b580      	push	{r7, lr}
 8019d02:	b084      	sub	sp, #16
 8019d04:	af00      	add	r7, sp, #0
 8019d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019d0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	2200      	movs	r2, #0
 8019d12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8019d16:	68f8      	ldr	r0, [r7, #12]
 8019d18:	f7fe fe2e 	bl	8018978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019d1c:	bf00      	nop
 8019d1e:	3710      	adds	r7, #16
 8019d20:	46bd      	mov	sp, r7
 8019d22:	bd80      	pop	{r7, pc}

08019d24 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019d24:	b480      	push	{r7}
 8019d26:	b08f      	sub	sp, #60	@ 0x3c
 8019d28:	af00      	add	r7, sp, #0
 8019d2a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019d32:	2b21      	cmp	r3, #33	@ 0x21
 8019d34:	d14c      	bne.n	8019dd0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019d3c:	b29b      	uxth	r3, r3
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d132      	bne.n	8019da8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d48:	6a3b      	ldr	r3, [r7, #32]
 8019d4a:	e853 3f00 	ldrex	r3, [r3]
 8019d4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8019d50:	69fb      	ldr	r3, [r7, #28]
 8019d52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	461a      	mov	r2, r3
 8019d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019d62:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019d66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019d68:	e841 2300 	strex	r3, r2, [r1]
 8019d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d1e6      	bne.n	8019d42 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d7a:	68fb      	ldr	r3, [r7, #12]
 8019d7c:	e853 3f00 	ldrex	r3, [r3]
 8019d80:	60bb      	str	r3, [r7, #8]
   return(result);
 8019d82:	68bb      	ldr	r3, [r7, #8]
 8019d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019d88:	633b      	str	r3, [r7, #48]	@ 0x30
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	461a      	mov	r2, r3
 8019d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d92:	61bb      	str	r3, [r7, #24]
 8019d94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d96:	6979      	ldr	r1, [r7, #20]
 8019d98:	69ba      	ldr	r2, [r7, #24]
 8019d9a:	e841 2300 	strex	r3, r2, [r1]
 8019d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8019da0:	693b      	ldr	r3, [r7, #16]
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d1e6      	bne.n	8019d74 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8019da6:	e013      	b.n	8019dd0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019dac:	781a      	ldrb	r2, [r3, #0]
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019db8:	1c5a      	adds	r2, r3, #1
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019dc4:	b29b      	uxth	r3, r3
 8019dc6:	3b01      	subs	r3, #1
 8019dc8:	b29a      	uxth	r2, r3
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019dd0:	bf00      	nop
 8019dd2:	373c      	adds	r7, #60	@ 0x3c
 8019dd4:	46bd      	mov	sp, r7
 8019dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dda:	4770      	bx	lr

08019ddc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019ddc:	b480      	push	{r7}
 8019dde:	b091      	sub	sp, #68	@ 0x44
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019dea:	2b21      	cmp	r3, #33	@ 0x21
 8019dec:	d151      	bne.n	8019e92 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019df4:	b29b      	uxth	r3, r3
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	d132      	bne.n	8019e60 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e02:	e853 3f00 	ldrex	r3, [r3]
 8019e06:	623b      	str	r3, [r7, #32]
   return(result);
 8019e08:	6a3b      	ldr	r3, [r7, #32]
 8019e0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	461a      	mov	r2, r3
 8019e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8019e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019e20:	e841 2300 	strex	r3, r2, [r1]
 8019e24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d1e6      	bne.n	8019dfa <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e32:	693b      	ldr	r3, [r7, #16]
 8019e34:	e853 3f00 	ldrex	r3, [r3]
 8019e38:	60fb      	str	r3, [r7, #12]
   return(result);
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	461a      	mov	r2, r3
 8019e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e4a:	61fb      	str	r3, [r7, #28]
 8019e4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e4e:	69b9      	ldr	r1, [r7, #24]
 8019e50:	69fa      	ldr	r2, [r7, #28]
 8019e52:	e841 2300 	strex	r3, r2, [r1]
 8019e56:	617b      	str	r3, [r7, #20]
   return(result);
 8019e58:	697b      	ldr	r3, [r7, #20]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d1e6      	bne.n	8019e2c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8019e5e:	e018      	b.n	8019e92 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019e68:	881b      	ldrh	r3, [r3, #0]
 8019e6a:	461a      	mov	r2, r3
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019e74:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e7a:	1c9a      	adds	r2, r3, #2
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019e86:	b29b      	uxth	r3, r3
 8019e88:	3b01      	subs	r3, #1
 8019e8a:	b29a      	uxth	r2, r3
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019e92:	bf00      	nop
 8019e94:	3744      	adds	r7, #68	@ 0x44
 8019e96:	46bd      	mov	sp, r7
 8019e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e9c:	4770      	bx	lr

08019e9e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019e9e:	b480      	push	{r7}
 8019ea0:	b091      	sub	sp, #68	@ 0x44
 8019ea2:	af00      	add	r7, sp, #0
 8019ea4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019eac:	2b21      	cmp	r3, #33	@ 0x21
 8019eae:	d160      	bne.n	8019f72 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019eb6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019eb8:	e057      	b.n	8019f6a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019ec0:	b29b      	uxth	r3, r3
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d133      	bne.n	8019f2e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	3308      	adds	r3, #8
 8019ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ed0:	e853 3f00 	ldrex	r3, [r3]
 8019ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8019ed6:	6a3b      	ldr	r3, [r7, #32]
 8019ed8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019edc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	3308      	adds	r3, #8
 8019ee4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019ee6:	633a      	str	r2, [r7, #48]	@ 0x30
 8019ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019eea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019eee:	e841 2300 	strex	r3, r2, [r1]
 8019ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d1e5      	bne.n	8019ec6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f00:	693b      	ldr	r3, [r7, #16]
 8019f02:	e853 3f00 	ldrex	r3, [r3]
 8019f06:	60fb      	str	r3, [r7, #12]
   return(result);
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	461a      	mov	r2, r3
 8019f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019f18:	61fb      	str	r3, [r7, #28]
 8019f1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f1c:	69b9      	ldr	r1, [r7, #24]
 8019f1e:	69fa      	ldr	r2, [r7, #28]
 8019f20:	e841 2300 	strex	r3, r2, [r1]
 8019f24:	617b      	str	r3, [r7, #20]
   return(result);
 8019f26:	697b      	ldr	r3, [r7, #20]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d1e6      	bne.n	8019efa <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019f2c:	e021      	b.n	8019f72 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	69db      	ldr	r3, [r3, #28]
 8019f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019f38:	2b00      	cmp	r3, #0
 8019f3a:	d013      	beq.n	8019f64 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019f40:	781a      	ldrb	r2, [r3, #0]
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019f4c:	1c5a      	adds	r2, r3, #1
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019f58:	b29b      	uxth	r3, r3
 8019f5a:	3b01      	subs	r3, #1
 8019f5c:	b29a      	uxth	r2, r3
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019f64:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019f66:	3b01      	subs	r3, #1
 8019f68:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019f6a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d1a4      	bne.n	8019eba <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019f70:	e7ff      	b.n	8019f72 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8019f72:	bf00      	nop
 8019f74:	3744      	adds	r7, #68	@ 0x44
 8019f76:	46bd      	mov	sp, r7
 8019f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f7c:	4770      	bx	lr

08019f7e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019f7e:	b480      	push	{r7}
 8019f80:	b091      	sub	sp, #68	@ 0x44
 8019f82:	af00      	add	r7, sp, #0
 8019f84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019f8c:	2b21      	cmp	r3, #33	@ 0x21
 8019f8e:	d165      	bne.n	801a05c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019f96:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019f98:	e05c      	b.n	801a054 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019fa0:	b29b      	uxth	r3, r3
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d133      	bne.n	801a00e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	3308      	adds	r3, #8
 8019fac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019fae:	6a3b      	ldr	r3, [r7, #32]
 8019fb0:	e853 3f00 	ldrex	r3, [r3]
 8019fb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8019fb6:	69fb      	ldr	r3, [r7, #28]
 8019fb8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	3308      	adds	r3, #8
 8019fc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019fc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019fca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019fcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019fce:	e841 2300 	strex	r3, r2, [r1]
 8019fd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d1e5      	bne.n	8019fa6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	e853 3f00 	ldrex	r3, [r3]
 8019fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8019fe8:	68bb      	ldr	r3, [r7, #8]
 8019fea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019fee:	633b      	str	r3, [r7, #48]	@ 0x30
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	461a      	mov	r2, r3
 8019ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ff8:	61bb      	str	r3, [r7, #24]
 8019ffa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ffc:	6979      	ldr	r1, [r7, #20]
 8019ffe:	69ba      	ldr	r2, [r7, #24]
 801a000:	e841 2300 	strex	r3, r2, [r1]
 801a004:	613b      	str	r3, [r7, #16]
   return(result);
 801a006:	693b      	ldr	r3, [r7, #16]
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d1e6      	bne.n	8019fda <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801a00c:	e026      	b.n	801a05c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	69db      	ldr	r3, [r3, #28]
 801a014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d018      	beq.n	801a04e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a020:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801a022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a024:	881b      	ldrh	r3, [r3, #0]
 801a026:	461a      	mov	r2, r3
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801a030:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a036:	1c9a      	adds	r2, r3, #2
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a042:	b29b      	uxth	r3, r3
 801a044:	3b01      	subs	r3, #1
 801a046:	b29a      	uxth	r2, r3
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801a04e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a050:	3b01      	subs	r3, #1
 801a052:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a054:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a056:	2b00      	cmp	r3, #0
 801a058:	d19f      	bne.n	8019f9a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801a05a:	e7ff      	b.n	801a05c <UART_TxISR_16BIT_FIFOEN+0xde>
 801a05c:	bf00      	nop
 801a05e:	3744      	adds	r7, #68	@ 0x44
 801a060:	46bd      	mov	sp, r7
 801a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a066:	4770      	bx	lr

0801a068 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a068:	b580      	push	{r7, lr}
 801a06a:	b088      	sub	sp, #32
 801a06c:	af00      	add	r7, sp, #0
 801a06e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	e853 3f00 	ldrex	r3, [r3]
 801a07c:	60bb      	str	r3, [r7, #8]
   return(result);
 801a07e:	68bb      	ldr	r3, [r7, #8]
 801a080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a084:	61fb      	str	r3, [r7, #28]
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	461a      	mov	r2, r3
 801a08c:	69fb      	ldr	r3, [r7, #28]
 801a08e:	61bb      	str	r3, [r7, #24]
 801a090:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a092:	6979      	ldr	r1, [r7, #20]
 801a094:	69ba      	ldr	r2, [r7, #24]
 801a096:	e841 2300 	strex	r3, r2, [r1]
 801a09a:	613b      	str	r3, [r7, #16]
   return(result);
 801a09c:	693b      	ldr	r3, [r7, #16]
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d1e6      	bne.n	801a070 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	2220      	movs	r2, #32
 801a0a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	2200      	movs	r2, #0
 801a0ae:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801a0b0:	6878      	ldr	r0, [r7, #4]
 801a0b2:	f7fe fc57 	bl	8018964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a0b6:	bf00      	nop
 801a0b8:	3720      	adds	r7, #32
 801a0ba:	46bd      	mov	sp, r7
 801a0bc:	bd80      	pop	{r7, pc}
	...

0801a0c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801a0c0:	b580      	push	{r7, lr}
 801a0c2:	b09c      	sub	sp, #112	@ 0x70
 801a0c4:	af00      	add	r7, sp, #0
 801a0c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a0ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a0d8:	2b22      	cmp	r3, #34	@ 0x22
 801a0da:	f040 80be 	bne.w	801a25a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a0e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a0e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801a0ec:	b2d9      	uxtb	r1, r3
 801a0ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a0f2:	b2da      	uxtb	r2, r3
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a0f8:	400a      	ands	r2, r1
 801a0fa:	b2d2      	uxtb	r2, r2
 801a0fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a102:	1c5a      	adds	r2, r3, #1
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a10e:	b29b      	uxth	r3, r3
 801a110:	3b01      	subs	r3, #1
 801a112:	b29a      	uxth	r2, r3
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a120:	b29b      	uxth	r3, r3
 801a122:	2b00      	cmp	r3, #0
 801a124:	f040 80a1 	bne.w	801a26a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a12e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a130:	e853 3f00 	ldrex	r3, [r3]
 801a134:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a138:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a13c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	461a      	mov	r2, r3
 801a144:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a146:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a148:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a14a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a14c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a14e:	e841 2300 	strex	r3, r2, [r1]
 801a152:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a154:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a156:	2b00      	cmp	r3, #0
 801a158:	d1e6      	bne.n	801a128 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	3308      	adds	r3, #8
 801a160:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a164:	e853 3f00 	ldrex	r3, [r3]
 801a168:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a16a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a16c:	f023 0301 	bic.w	r3, r3, #1
 801a170:	667b      	str	r3, [r7, #100]	@ 0x64
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	3308      	adds	r3, #8
 801a178:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801a17a:	647a      	str	r2, [r7, #68]	@ 0x44
 801a17c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a17e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a180:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a182:	e841 2300 	strex	r3, r2, [r1]
 801a186:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d1e5      	bne.n	801a15a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	2220      	movs	r2, #32
 801a192:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	2200      	movs	r2, #0
 801a19a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	2200      	movs	r2, #0
 801a1a0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	4a33      	ldr	r2, [pc, #204]	@ (801a274 <UART_RxISR_8BIT+0x1b4>)
 801a1a8:	4293      	cmp	r3, r2
 801a1aa:	d01f      	beq.n	801a1ec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	685b      	ldr	r3, [r3, #4]
 801a1b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d018      	beq.n	801a1ec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1c2:	e853 3f00 	ldrex	r3, [r3]
 801a1c6:	623b      	str	r3, [r7, #32]
   return(result);
 801a1c8:	6a3b      	ldr	r3, [r7, #32]
 801a1ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a1ce:	663b      	str	r3, [r7, #96]	@ 0x60
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	461a      	mov	r2, r3
 801a1d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a1d8:	633b      	str	r3, [r7, #48]	@ 0x30
 801a1da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a1de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a1e0:	e841 2300 	strex	r3, r2, [r1]
 801a1e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d1e6      	bne.n	801a1ba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a1f0:	2b01      	cmp	r3, #1
 801a1f2:	d12e      	bne.n	801a252 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	2200      	movs	r2, #0
 801a1f8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a200:	693b      	ldr	r3, [r7, #16]
 801a202:	e853 3f00 	ldrex	r3, [r3]
 801a206:	60fb      	str	r3, [r7, #12]
   return(result);
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	f023 0310 	bic.w	r3, r3, #16
 801a20e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	461a      	mov	r2, r3
 801a216:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a218:	61fb      	str	r3, [r7, #28]
 801a21a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a21c:	69b9      	ldr	r1, [r7, #24]
 801a21e:	69fa      	ldr	r2, [r7, #28]
 801a220:	e841 2300 	strex	r3, r2, [r1]
 801a224:	617b      	str	r3, [r7, #20]
   return(result);
 801a226:	697b      	ldr	r3, [r7, #20]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d1e6      	bne.n	801a1fa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	681b      	ldr	r3, [r3, #0]
 801a230:	69db      	ldr	r3, [r3, #28]
 801a232:	f003 0310 	and.w	r3, r3, #16
 801a236:	2b10      	cmp	r3, #16
 801a238:	d103      	bne.n	801a242 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	2210      	movs	r2, #16
 801a240:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a248:	4619      	mov	r1, r3
 801a24a:	6878      	ldr	r0, [r7, #4]
 801a24c:	f7fe fb9e 	bl	801898c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a250:	e00b      	b.n	801a26a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a252:	6878      	ldr	r0, [r7, #4]
 801a254:	f7ec f986 	bl	8006564 <HAL_UART_RxCpltCallback>
}
 801a258:	e007      	b.n	801a26a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	699a      	ldr	r2, [r3, #24]
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	f042 0208 	orr.w	r2, r2, #8
 801a268:	619a      	str	r2, [r3, #24]
}
 801a26a:	bf00      	nop
 801a26c:	3770      	adds	r7, #112	@ 0x70
 801a26e:	46bd      	mov	sp, r7
 801a270:	bd80      	pop	{r7, pc}
 801a272:	bf00      	nop
 801a274:	58000c00 	.word	0x58000c00

0801a278 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801a278:	b580      	push	{r7, lr}
 801a27a:	b09c      	sub	sp, #112	@ 0x70
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a286:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a290:	2b22      	cmp	r3, #34	@ 0x22
 801a292:	f040 80be 	bne.w	801a412 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a29c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a2a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801a2a6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801a2aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a2ae:	4013      	ands	r3, r2
 801a2b0:	b29a      	uxth	r2, r3
 801a2b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a2b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a2ba:	1c9a      	adds	r2, r3, #2
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a2c6:	b29b      	uxth	r3, r3
 801a2c8:	3b01      	subs	r3, #1
 801a2ca:	b29a      	uxth	r2, r3
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a2d8:	b29b      	uxth	r3, r3
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	f040 80a1 	bne.w	801a422 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a2e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a2e8:	e853 3f00 	ldrex	r3, [r3]
 801a2ec:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a2ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a2f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a2f4:	667b      	str	r3, [r7, #100]	@ 0x64
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	461a      	mov	r2, r3
 801a2fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a2fe:	657b      	str	r3, [r7, #84]	@ 0x54
 801a300:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a302:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a304:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a306:	e841 2300 	strex	r3, r2, [r1]
 801a30a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a30c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d1e6      	bne.n	801a2e0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	3308      	adds	r3, #8
 801a318:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a31a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a31c:	e853 3f00 	ldrex	r3, [r3]
 801a320:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a324:	f023 0301 	bic.w	r3, r3, #1
 801a328:	663b      	str	r3, [r7, #96]	@ 0x60
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	3308      	adds	r3, #8
 801a330:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a332:	643a      	str	r2, [r7, #64]	@ 0x40
 801a334:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a336:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a338:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a33a:	e841 2300 	strex	r3, r2, [r1]
 801a33e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a342:	2b00      	cmp	r3, #0
 801a344:	d1e5      	bne.n	801a312 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	2220      	movs	r2, #32
 801a34a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	2200      	movs	r2, #0
 801a352:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	2200      	movs	r2, #0
 801a358:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	4a33      	ldr	r2, [pc, #204]	@ (801a42c <UART_RxISR_16BIT+0x1b4>)
 801a360:	4293      	cmp	r3, r2
 801a362:	d01f      	beq.n	801a3a4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	685b      	ldr	r3, [r3, #4]
 801a36a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d018      	beq.n	801a3a4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a378:	6a3b      	ldr	r3, [r7, #32]
 801a37a:	e853 3f00 	ldrex	r3, [r3]
 801a37e:	61fb      	str	r3, [r7, #28]
   return(result);
 801a380:	69fb      	ldr	r3, [r7, #28]
 801a382:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a386:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	461a      	mov	r2, r3
 801a38e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a390:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a392:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a394:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a398:	e841 2300 	strex	r3, r2, [r1]
 801a39c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d1e6      	bne.n	801a372 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a3a8:	2b01      	cmp	r3, #1
 801a3aa:	d12e      	bne.n	801a40a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	2200      	movs	r2, #0
 801a3b0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	e853 3f00 	ldrex	r3, [r3]
 801a3be:	60bb      	str	r3, [r7, #8]
   return(result);
 801a3c0:	68bb      	ldr	r3, [r7, #8]
 801a3c2:	f023 0310 	bic.w	r3, r3, #16
 801a3c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	681b      	ldr	r3, [r3, #0]
 801a3cc:	461a      	mov	r2, r3
 801a3ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a3d0:	61bb      	str	r3, [r7, #24]
 801a3d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a3d4:	6979      	ldr	r1, [r7, #20]
 801a3d6:	69ba      	ldr	r2, [r7, #24]
 801a3d8:	e841 2300 	strex	r3, r2, [r1]
 801a3dc:	613b      	str	r3, [r7, #16]
   return(result);
 801a3de:	693b      	ldr	r3, [r7, #16]
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d1e6      	bne.n	801a3b2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	69db      	ldr	r3, [r3, #28]
 801a3ea:	f003 0310 	and.w	r3, r3, #16
 801a3ee:	2b10      	cmp	r3, #16
 801a3f0:	d103      	bne.n	801a3fa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	2210      	movs	r2, #16
 801a3f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a400:	4619      	mov	r1, r3
 801a402:	6878      	ldr	r0, [r7, #4]
 801a404:	f7fe fac2 	bl	801898c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a408:	e00b      	b.n	801a422 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a40a:	6878      	ldr	r0, [r7, #4]
 801a40c:	f7ec f8aa 	bl	8006564 <HAL_UART_RxCpltCallback>
}
 801a410:	e007      	b.n	801a422 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	699a      	ldr	r2, [r3, #24]
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	f042 0208 	orr.w	r2, r2, #8
 801a420:	619a      	str	r2, [r3, #24]
}
 801a422:	bf00      	nop
 801a424:	3770      	adds	r7, #112	@ 0x70
 801a426:	46bd      	mov	sp, r7
 801a428:	bd80      	pop	{r7, pc}
 801a42a:	bf00      	nop
 801a42c:	58000c00 	.word	0x58000c00

0801a430 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a430:	b580      	push	{r7, lr}
 801a432:	b0ac      	sub	sp, #176	@ 0xb0
 801a434:	af00      	add	r7, sp, #0
 801a436:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a43e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	69db      	ldr	r3, [r3, #28]
 801a448:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	681b      	ldr	r3, [r3, #0]
 801a45a:	689b      	ldr	r3, [r3, #8]
 801a45c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a466:	2b22      	cmp	r3, #34	@ 0x22
 801a468:	f040 8181 	bne.w	801a76e <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a472:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a476:	e124      	b.n	801a6c2 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a47e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a482:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801a486:	b2d9      	uxtb	r1, r3
 801a488:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801a48c:	b2da      	uxtb	r2, r3
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a492:	400a      	ands	r2, r1
 801a494:	b2d2      	uxtb	r2, r2
 801a496:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a49c:	1c5a      	adds	r2, r3, #1
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a4a8:	b29b      	uxth	r3, r3
 801a4aa:	3b01      	subs	r3, #1
 801a4ac:	b29a      	uxth	r2, r3
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	69db      	ldr	r3, [r3, #28]
 801a4ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a4be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a4c2:	f003 0307 	and.w	r3, r3, #7
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d053      	beq.n	801a572 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a4ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a4ce:	f003 0301 	and.w	r3, r3, #1
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d011      	beq.n	801a4fa <UART_RxISR_8BIT_FIFOEN+0xca>
 801a4d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a4da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d00b      	beq.n	801a4fa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	681b      	ldr	r3, [r3, #0]
 801a4e6:	2201      	movs	r2, #1
 801a4e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a4f0:	f043 0201 	orr.w	r2, r3, #1
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a4fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a4fe:	f003 0302 	and.w	r3, r3, #2
 801a502:	2b00      	cmp	r3, #0
 801a504:	d011      	beq.n	801a52a <UART_RxISR_8BIT_FIFOEN+0xfa>
 801a506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a50a:	f003 0301 	and.w	r3, r3, #1
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d00b      	beq.n	801a52a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	2202      	movs	r2, #2
 801a518:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a520:	f043 0204 	orr.w	r2, r3, #4
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a52a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a52e:	f003 0304 	and.w	r3, r3, #4
 801a532:	2b00      	cmp	r3, #0
 801a534:	d011      	beq.n	801a55a <UART_RxISR_8BIT_FIFOEN+0x12a>
 801a536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a53a:	f003 0301 	and.w	r3, r3, #1
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d00b      	beq.n	801a55a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	681b      	ldr	r3, [r3, #0]
 801a546:	2204      	movs	r2, #4
 801a548:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a550:	f043 0202 	orr.w	r2, r3, #2
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a560:	2b00      	cmp	r3, #0
 801a562:	d006      	beq.n	801a572 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a564:	6878      	ldr	r0, [r7, #4]
 801a566:	f7fe fa07 	bl	8018978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	2200      	movs	r2, #0
 801a56e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a578:	b29b      	uxth	r3, r3
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	f040 80a1 	bne.w	801a6c2 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a586:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a588:	e853 3f00 	ldrex	r3, [r3]
 801a58c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801a58e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	461a      	mov	r2, r3
 801a59e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a5a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a5a4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a5a6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801a5a8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a5aa:	e841 2300 	strex	r3, r2, [r1]
 801a5ae:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801a5b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d1e4      	bne.n	801a580 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	3308      	adds	r3, #8
 801a5bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a5be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a5c0:	e853 3f00 	ldrex	r3, [r3]
 801a5c4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801a5c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a5c8:	4b6f      	ldr	r3, [pc, #444]	@ (801a788 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801a5ca:	4013      	ands	r3, r2
 801a5cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	3308      	adds	r3, #8
 801a5d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a5da:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a5dc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a5de:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801a5e0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a5e2:	e841 2300 	strex	r3, r2, [r1]
 801a5e6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801a5e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d1e3      	bne.n	801a5b6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	2220      	movs	r2, #32
 801a5f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	2200      	movs	r2, #0
 801a5fa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	2200      	movs	r2, #0
 801a600:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	4a61      	ldr	r2, [pc, #388]	@ (801a78c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801a608:	4293      	cmp	r3, r2
 801a60a:	d021      	beq.n	801a650 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	681b      	ldr	r3, [r3, #0]
 801a610:	685b      	ldr	r3, [r3, #4]
 801a612:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a616:	2b00      	cmp	r3, #0
 801a618:	d01a      	beq.n	801a650 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a620:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a622:	e853 3f00 	ldrex	r3, [r3]
 801a626:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a62a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a62e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	461a      	mov	r2, r3
 801a638:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a63c:	657b      	str	r3, [r7, #84]	@ 0x54
 801a63e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a640:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a642:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a644:	e841 2300 	strex	r3, r2, [r1]
 801a648:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a64a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d1e4      	bne.n	801a61a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a654:	2b01      	cmp	r3, #1
 801a656:	d130      	bne.n	801a6ba <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	2200      	movs	r2, #0
 801a65c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	681b      	ldr	r3, [r3, #0]
 801a662:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a666:	e853 3f00 	ldrex	r3, [r3]
 801a66a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a66e:	f023 0310 	bic.w	r3, r3, #16
 801a672:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	461a      	mov	r2, r3
 801a67c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a680:	643b      	str	r3, [r7, #64]	@ 0x40
 801a682:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a684:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a686:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a688:	e841 2300 	strex	r3, r2, [r1]
 801a68c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a690:	2b00      	cmp	r3, #0
 801a692:	d1e4      	bne.n	801a65e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	69db      	ldr	r3, [r3, #28]
 801a69a:	f003 0310 	and.w	r3, r3, #16
 801a69e:	2b10      	cmp	r3, #16
 801a6a0:	d103      	bne.n	801a6aa <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	2210      	movs	r2, #16
 801a6a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a6b0:	4619      	mov	r1, r3
 801a6b2:	6878      	ldr	r0, [r7, #4]
 801a6b4:	f7fe f96a 	bl	801898c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a6b8:	e00e      	b.n	801a6d8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 801a6ba:	6878      	ldr	r0, [r7, #4]
 801a6bc:	f7eb ff52 	bl	8006564 <HAL_UART_RxCpltCallback>
        break;
 801a6c0:	e00a      	b.n	801a6d8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a6c2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d006      	beq.n	801a6d8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 801a6ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a6ce:	f003 0320 	and.w	r3, r3, #32
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	f47f aed0 	bne.w	801a478 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a6de:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a6e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d049      	beq.n	801a77e <UART_RxISR_8BIT_FIFOEN+0x34e>
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a6f0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801a6f4:	429a      	cmp	r2, r3
 801a6f6:	d242      	bcs.n	801a77e <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	3308      	adds	r3, #8
 801a6fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a700:	6a3b      	ldr	r3, [r7, #32]
 801a702:	e853 3f00 	ldrex	r3, [r3]
 801a706:	61fb      	str	r3, [r7, #28]
   return(result);
 801a708:	69fb      	ldr	r3, [r7, #28]
 801a70a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a70e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	3308      	adds	r3, #8
 801a718:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a71c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a71e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a720:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a724:	e841 2300 	strex	r3, r2, [r1]
 801a728:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d1e3      	bne.n	801a6f8 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	4a17      	ldr	r2, [pc, #92]	@ (801a790 <UART_RxISR_8BIT_FIFOEN+0x360>)
 801a734:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a73c:	68fb      	ldr	r3, [r7, #12]
 801a73e:	e853 3f00 	ldrex	r3, [r3]
 801a742:	60bb      	str	r3, [r7, #8]
   return(result);
 801a744:	68bb      	ldr	r3, [r7, #8]
 801a746:	f043 0320 	orr.w	r3, r3, #32
 801a74a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	461a      	mov	r2, r3
 801a754:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a758:	61bb      	str	r3, [r7, #24]
 801a75a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a75c:	6979      	ldr	r1, [r7, #20]
 801a75e:	69ba      	ldr	r2, [r7, #24]
 801a760:	e841 2300 	strex	r3, r2, [r1]
 801a764:	613b      	str	r3, [r7, #16]
   return(result);
 801a766:	693b      	ldr	r3, [r7, #16]
 801a768:	2b00      	cmp	r3, #0
 801a76a:	d1e4      	bne.n	801a736 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a76c:	e007      	b.n	801a77e <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	681b      	ldr	r3, [r3, #0]
 801a772:	699a      	ldr	r2, [r3, #24]
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	f042 0208 	orr.w	r2, r2, #8
 801a77c:	619a      	str	r2, [r3, #24]
}
 801a77e:	bf00      	nop
 801a780:	37b0      	adds	r7, #176	@ 0xb0
 801a782:	46bd      	mov	sp, r7
 801a784:	bd80      	pop	{r7, pc}
 801a786:	bf00      	nop
 801a788:	effffffe 	.word	0xeffffffe
 801a78c:	58000c00 	.word	0x58000c00
 801a790:	0801a0c1 	.word	0x0801a0c1

0801a794 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a794:	b580      	push	{r7, lr}
 801a796:	b0ae      	sub	sp, #184	@ 0xb8
 801a798:	af00      	add	r7, sp, #0
 801a79a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a7a2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	69db      	ldr	r3, [r3, #28]
 801a7ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	689b      	ldr	r3, [r3, #8]
 801a7c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a7ca:	2b22      	cmp	r3, #34	@ 0x22
 801a7cc:	f040 8185 	bne.w	801aada <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a7d6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a7da:	e128      	b.n	801aa2e <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	681b      	ldr	r3, [r3, #0]
 801a7e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a7e2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a7ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801a7ee:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801a7f2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a7f6:	4013      	ands	r3, r2
 801a7f8:	b29a      	uxth	r2, r3
 801a7fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a7fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a804:	1c9a      	adds	r2, r3, #2
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a810:	b29b      	uxth	r3, r3
 801a812:	3b01      	subs	r3, #1
 801a814:	b29a      	uxth	r2, r3
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	69db      	ldr	r3, [r3, #28]
 801a822:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a826:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a82a:	f003 0307 	and.w	r3, r3, #7
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d053      	beq.n	801a8da <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a832:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a836:	f003 0301 	and.w	r3, r3, #1
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d011      	beq.n	801a862 <UART_RxISR_16BIT_FIFOEN+0xce>
 801a83e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a846:	2b00      	cmp	r3, #0
 801a848:	d00b      	beq.n	801a862 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	2201      	movs	r2, #1
 801a850:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a858:	f043 0201 	orr.w	r2, r3, #1
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a862:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a866:	f003 0302 	and.w	r3, r3, #2
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d011      	beq.n	801a892 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801a86e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a872:	f003 0301 	and.w	r3, r3, #1
 801a876:	2b00      	cmp	r3, #0
 801a878:	d00b      	beq.n	801a892 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	2202      	movs	r2, #2
 801a880:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a888:	f043 0204 	orr.w	r2, r3, #4
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a892:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a896:	f003 0304 	and.w	r3, r3, #4
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d011      	beq.n	801a8c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a89e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a8a2:	f003 0301 	and.w	r3, r3, #1
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d00b      	beq.n	801a8c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	2204      	movs	r2, #4
 801a8b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a8b8:	f043 0202 	orr.w	r2, r3, #2
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d006      	beq.n	801a8da <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a8cc:	6878      	ldr	r0, [r7, #4]
 801a8ce:	f7fe f853 	bl	8018978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	2200      	movs	r2, #0
 801a8d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a8e0:	b29b      	uxth	r3, r3
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	f040 80a3 	bne.w	801aa2e <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a8ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a8f0:	e853 3f00 	ldrex	r3, [r3]
 801a8f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801a8f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a8f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a8fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	461a      	mov	r2, r3
 801a906:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a90a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a90e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a910:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a912:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a916:	e841 2300 	strex	r3, r2, [r1]
 801a91a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a91c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d1e2      	bne.n	801a8e8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	3308      	adds	r3, #8
 801a928:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a92a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a92c:	e853 3f00 	ldrex	r3, [r3]
 801a930:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a932:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a934:	4b6f      	ldr	r3, [pc, #444]	@ (801aaf4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a936:	4013      	ands	r3, r2
 801a938:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	3308      	adds	r3, #8
 801a942:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a946:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a948:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a94a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a94c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a94e:	e841 2300 	strex	r3, r2, [r1]
 801a952:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a954:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a956:	2b00      	cmp	r3, #0
 801a958:	d1e3      	bne.n	801a922 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	2220      	movs	r2, #32
 801a95e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	2200      	movs	r2, #0
 801a966:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	2200      	movs	r2, #0
 801a96c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	4a61      	ldr	r2, [pc, #388]	@ (801aaf8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801a974:	4293      	cmp	r3, r2
 801a976:	d021      	beq.n	801a9bc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	685b      	ldr	r3, [r3, #4]
 801a97e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a982:	2b00      	cmp	r3, #0
 801a984:	d01a      	beq.n	801a9bc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a98c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a98e:	e853 3f00 	ldrex	r3, [r3]
 801a992:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a994:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a996:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a99a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	461a      	mov	r2, r3
 801a9a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a9a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a9aa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a9ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a9b0:	e841 2300 	strex	r3, r2, [r1]
 801a9b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a9b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d1e4      	bne.n	801a986 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a9c0:	2b01      	cmp	r3, #1
 801a9c2:	d130      	bne.n	801aa26 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	2200      	movs	r2, #0
 801a9c8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a9d2:	e853 3f00 	ldrex	r3, [r3]
 801a9d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a9da:	f023 0310 	bic.w	r3, r3, #16
 801a9de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	461a      	mov	r2, r3
 801a9e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a9ec:	647b      	str	r3, [r7, #68]	@ 0x44
 801a9ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a9f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a9f4:	e841 2300 	strex	r3, r2, [r1]
 801a9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a9fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d1e4      	bne.n	801a9ca <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	69db      	ldr	r3, [r3, #28]
 801aa06:	f003 0310 	and.w	r3, r3, #16
 801aa0a:	2b10      	cmp	r3, #16
 801aa0c:	d103      	bne.n	801aa16 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	2210      	movs	r2, #16
 801aa14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801aa1c:	4619      	mov	r1, r3
 801aa1e:	6878      	ldr	r0, [r7, #4]
 801aa20:	f7fd ffb4 	bl	801898c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801aa24:	e00e      	b.n	801aa44 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 801aa26:	6878      	ldr	r0, [r7, #4]
 801aa28:	f7eb fd9c 	bl	8006564 <HAL_UART_RxCpltCallback>
        break;
 801aa2c:	e00a      	b.n	801aa44 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801aa2e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d006      	beq.n	801aa44 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 801aa36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801aa3a:	f003 0320 	and.w	r3, r3, #32
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	f47f aecc 	bne.w	801a7dc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801aa4a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801aa4e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d049      	beq.n	801aaea <UART_RxISR_16BIT_FIFOEN+0x356>
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801aa5c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801aa60:	429a      	cmp	r2, r3
 801aa62:	d242      	bcs.n	801aaea <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	3308      	adds	r3, #8
 801aa6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa6e:	e853 3f00 	ldrex	r3, [r3]
 801aa72:	623b      	str	r3, [r7, #32]
   return(result);
 801aa74:	6a3b      	ldr	r3, [r7, #32]
 801aa76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801aa7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	3308      	adds	r3, #8
 801aa84:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801aa88:	633a      	str	r2, [r7, #48]	@ 0x30
 801aa8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801aa8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aa90:	e841 2300 	strex	r3, r2, [r1]
 801aa94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801aa96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d1e3      	bne.n	801aa64 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	4a17      	ldr	r2, [pc, #92]	@ (801aafc <UART_RxISR_16BIT_FIFOEN+0x368>)
 801aaa0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aaa8:	693b      	ldr	r3, [r7, #16]
 801aaaa:	e853 3f00 	ldrex	r3, [r3]
 801aaae:	60fb      	str	r3, [r7, #12]
   return(result);
 801aab0:	68fb      	ldr	r3, [r7, #12]
 801aab2:	f043 0320 	orr.w	r3, r3, #32
 801aab6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	461a      	mov	r2, r3
 801aac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801aac4:	61fb      	str	r3, [r7, #28]
 801aac6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aac8:	69b9      	ldr	r1, [r7, #24]
 801aaca:	69fa      	ldr	r2, [r7, #28]
 801aacc:	e841 2300 	strex	r3, r2, [r1]
 801aad0:	617b      	str	r3, [r7, #20]
   return(result);
 801aad2:	697b      	ldr	r3, [r7, #20]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d1e4      	bne.n	801aaa2 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801aad8:	e007      	b.n	801aaea <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	699a      	ldr	r2, [r3, #24]
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	f042 0208 	orr.w	r2, r2, #8
 801aae8:	619a      	str	r2, [r3, #24]
}
 801aaea:	bf00      	nop
 801aaec:	37b8      	adds	r7, #184	@ 0xb8
 801aaee:	46bd      	mov	sp, r7
 801aaf0:	bd80      	pop	{r7, pc}
 801aaf2:	bf00      	nop
 801aaf4:	effffffe 	.word	0xeffffffe
 801aaf8:	58000c00 	.word	0x58000c00
 801aafc:	0801a279 	.word	0x0801a279

0801ab00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801ab00:	b480      	push	{r7}
 801ab02:	b083      	sub	sp, #12
 801ab04:	af00      	add	r7, sp, #0
 801ab06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801ab08:	bf00      	nop
 801ab0a:	370c      	adds	r7, #12
 801ab0c:	46bd      	mov	sp, r7
 801ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab12:	4770      	bx	lr

0801ab14 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801ab14:	b480      	push	{r7}
 801ab16:	b083      	sub	sp, #12
 801ab18:	af00      	add	r7, sp, #0
 801ab1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801ab1c:	bf00      	nop
 801ab1e:	370c      	adds	r7, #12
 801ab20:	46bd      	mov	sp, r7
 801ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab26:	4770      	bx	lr

0801ab28 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801ab28:	b480      	push	{r7}
 801ab2a:	b083      	sub	sp, #12
 801ab2c:	af00      	add	r7, sp, #0
 801ab2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801ab30:	bf00      	nop
 801ab32:	370c      	adds	r7, #12
 801ab34:	46bd      	mov	sp, r7
 801ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab3a:	4770      	bx	lr

0801ab3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801ab3c:	b480      	push	{r7}
 801ab3e:	b085      	sub	sp, #20
 801ab40:	af00      	add	r7, sp, #0
 801ab42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801ab4a:	2b01      	cmp	r3, #1
 801ab4c:	d101      	bne.n	801ab52 <HAL_UARTEx_DisableFifoMode+0x16>
 801ab4e:	2302      	movs	r3, #2
 801ab50:	e027      	b.n	801aba2 <HAL_UARTEx_DisableFifoMode+0x66>
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	2201      	movs	r2, #1
 801ab56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	2224      	movs	r2, #36	@ 0x24
 801ab5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	681b      	ldr	r3, [r3, #0]
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	681a      	ldr	r2, [r3, #0]
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	f022 0201 	bic.w	r2, r2, #1
 801ab78:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801ab80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	2200      	movs	r2, #0
 801ab86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	68fa      	ldr	r2, [r7, #12]
 801ab8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	2220      	movs	r2, #32
 801ab94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	2200      	movs	r2, #0
 801ab9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801aba0:	2300      	movs	r3, #0
}
 801aba2:	4618      	mov	r0, r3
 801aba4:	3714      	adds	r7, #20
 801aba6:	46bd      	mov	sp, r7
 801aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abac:	4770      	bx	lr

0801abae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801abae:	b580      	push	{r7, lr}
 801abb0:	b084      	sub	sp, #16
 801abb2:	af00      	add	r7, sp, #0
 801abb4:	6078      	str	r0, [r7, #4]
 801abb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801abbe:	2b01      	cmp	r3, #1
 801abc0:	d101      	bne.n	801abc6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801abc2:	2302      	movs	r3, #2
 801abc4:	e02d      	b.n	801ac22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	2201      	movs	r2, #1
 801abca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	2224      	movs	r2, #36	@ 0x24
 801abd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	681a      	ldr	r2, [r3, #0]
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	f022 0201 	bic.w	r2, r2, #1
 801abec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	681b      	ldr	r3, [r3, #0]
 801abf2:	689b      	ldr	r3, [r3, #8]
 801abf4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	681b      	ldr	r3, [r3, #0]
 801abfc:	683a      	ldr	r2, [r7, #0]
 801abfe:	430a      	orrs	r2, r1
 801ac00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ac02:	6878      	ldr	r0, [r7, #4]
 801ac04:	f000 f850 	bl	801aca8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	68fa      	ldr	r2, [r7, #12]
 801ac0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	2220      	movs	r2, #32
 801ac14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	2200      	movs	r2, #0
 801ac1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ac20:	2300      	movs	r3, #0
}
 801ac22:	4618      	mov	r0, r3
 801ac24:	3710      	adds	r7, #16
 801ac26:	46bd      	mov	sp, r7
 801ac28:	bd80      	pop	{r7, pc}

0801ac2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ac2a:	b580      	push	{r7, lr}
 801ac2c:	b084      	sub	sp, #16
 801ac2e:	af00      	add	r7, sp, #0
 801ac30:	6078      	str	r0, [r7, #4]
 801ac32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801ac3a:	2b01      	cmp	r3, #1
 801ac3c:	d101      	bne.n	801ac42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801ac3e:	2302      	movs	r3, #2
 801ac40:	e02d      	b.n	801ac9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	2201      	movs	r2, #1
 801ac46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	2224      	movs	r2, #36	@ 0x24
 801ac4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	681a      	ldr	r2, [r3, #0]
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	f022 0201 	bic.w	r2, r2, #1
 801ac68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	681b      	ldr	r3, [r3, #0]
 801ac6e:	689b      	ldr	r3, [r3, #8]
 801ac70:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	683a      	ldr	r2, [r7, #0]
 801ac7a:	430a      	orrs	r2, r1
 801ac7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ac7e:	6878      	ldr	r0, [r7, #4]
 801ac80:	f000 f812 	bl	801aca8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	68fa      	ldr	r2, [r7, #12]
 801ac8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	2220      	movs	r2, #32
 801ac90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	2200      	movs	r2, #0
 801ac98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ac9c:	2300      	movs	r3, #0
}
 801ac9e:	4618      	mov	r0, r3
 801aca0:	3710      	adds	r7, #16
 801aca2:	46bd      	mov	sp, r7
 801aca4:	bd80      	pop	{r7, pc}
	...

0801aca8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801aca8:	b480      	push	{r7}
 801acaa:	b085      	sub	sp, #20
 801acac:	af00      	add	r7, sp, #0
 801acae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d108      	bne.n	801acca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	2201      	movs	r2, #1
 801acbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	2201      	movs	r2, #1
 801acc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801acc8:	e031      	b.n	801ad2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801acca:	2310      	movs	r3, #16
 801accc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801acce:	2310      	movs	r3, #16
 801acd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	689b      	ldr	r3, [r3, #8]
 801acd8:	0e5b      	lsrs	r3, r3, #25
 801acda:	b2db      	uxtb	r3, r3
 801acdc:	f003 0307 	and.w	r3, r3, #7
 801ace0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	681b      	ldr	r3, [r3, #0]
 801ace6:	689b      	ldr	r3, [r3, #8]
 801ace8:	0f5b      	lsrs	r3, r3, #29
 801acea:	b2db      	uxtb	r3, r3
 801acec:	f003 0307 	and.w	r3, r3, #7
 801acf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801acf2:	7bbb      	ldrb	r3, [r7, #14]
 801acf4:	7b3a      	ldrb	r2, [r7, #12]
 801acf6:	4911      	ldr	r1, [pc, #68]	@ (801ad3c <UARTEx_SetNbDataToProcess+0x94>)
 801acf8:	5c8a      	ldrb	r2, [r1, r2]
 801acfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801acfe:	7b3a      	ldrb	r2, [r7, #12]
 801ad00:	490f      	ldr	r1, [pc, #60]	@ (801ad40 <UARTEx_SetNbDataToProcess+0x98>)
 801ad02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ad04:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad08:	b29a      	uxth	r2, r3
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ad10:	7bfb      	ldrb	r3, [r7, #15]
 801ad12:	7b7a      	ldrb	r2, [r7, #13]
 801ad14:	4909      	ldr	r1, [pc, #36]	@ (801ad3c <UARTEx_SetNbDataToProcess+0x94>)
 801ad16:	5c8a      	ldrb	r2, [r1, r2]
 801ad18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801ad1c:	7b7a      	ldrb	r2, [r7, #13]
 801ad1e:	4908      	ldr	r1, [pc, #32]	@ (801ad40 <UARTEx_SetNbDataToProcess+0x98>)
 801ad20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ad22:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad26:	b29a      	uxth	r2, r3
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801ad2e:	bf00      	nop
 801ad30:	3714      	adds	r7, #20
 801ad32:	46bd      	mov	sp, r7
 801ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad38:	4770      	bx	lr
 801ad3a:	bf00      	nop
 801ad3c:	0801ea14 	.word	0x0801ea14
 801ad40:	0801ea1c 	.word	0x0801ea1c

0801ad44 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801ad44:	b580      	push	{r7, lr}
 801ad46:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801ad48:	4904      	ldr	r1, [pc, #16]	@ (801ad5c <MX_FATFS_Init+0x18>)
 801ad4a:	4805      	ldr	r0, [pc, #20]	@ (801ad60 <MX_FATFS_Init+0x1c>)
 801ad4c:	f003 f8d8 	bl	801df00 <FATFS_LinkDriver>
 801ad50:	4603      	mov	r3, r0
 801ad52:	461a      	mov	r2, r3
 801ad54:	4b03      	ldr	r3, [pc, #12]	@ (801ad64 <MX_FATFS_Init+0x20>)
 801ad56:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801ad58:	bf00      	nop
 801ad5a:	bd80      	pop	{r7, pc}
 801ad5c:	2400054c 	.word	0x2400054c
 801ad60:	24000014 	.word	0x24000014
 801ad64:	24000548 	.word	0x24000548

0801ad68 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801ad68:	b480      	push	{r7}
 801ad6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801ad6c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801ad6e:	4618      	mov	r0, r3
 801ad70:	46bd      	mov	sp, r7
 801ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad76:	4770      	bx	lr

0801ad78 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801ad78:	b580      	push	{r7, lr}
 801ad7a:	b082      	sub	sp, #8
 801ad7c:	af00      	add	r7, sp, #0
 801ad7e:	4603      	mov	r3, r0
 801ad80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801ad82:	79fb      	ldrb	r3, [r7, #7]
 801ad84:	4618      	mov	r0, r3
 801ad86:	f7e9 fbbd 	bl	8004504 <SD_disk_initialize>
 801ad8a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801ad8c:	4618      	mov	r0, r3
 801ad8e:	3708      	adds	r7, #8
 801ad90:	46bd      	mov	sp, r7
 801ad92:	bd80      	pop	{r7, pc}

0801ad94 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801ad94:	b580      	push	{r7, lr}
 801ad96:	b082      	sub	sp, #8
 801ad98:	af00      	add	r7, sp, #0
 801ad9a:	4603      	mov	r3, r0
 801ad9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801ad9e:	79fb      	ldrb	r3, [r7, #7]
 801ada0:	4618      	mov	r0, r3
 801ada2:	f7e9 fc9b 	bl	80046dc <SD_disk_status>
 801ada6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801ada8:	4618      	mov	r0, r3
 801adaa:	3708      	adds	r7, #8
 801adac:	46bd      	mov	sp, r7
 801adae:	bd80      	pop	{r7, pc}

0801adb0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801adb0:	b580      	push	{r7, lr}
 801adb2:	b084      	sub	sp, #16
 801adb4:	af00      	add	r7, sp, #0
 801adb6:	60b9      	str	r1, [r7, #8]
 801adb8:	607a      	str	r2, [r7, #4]
 801adba:	603b      	str	r3, [r7, #0]
 801adbc:	4603      	mov	r3, r0
 801adbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801adc0:	7bf8      	ldrb	r0, [r7, #15]
 801adc2:	683b      	ldr	r3, [r7, #0]
 801adc4:	687a      	ldr	r2, [r7, #4]
 801adc6:	68b9      	ldr	r1, [r7, #8]
 801adc8:	f7e9 fc9e 	bl	8004708 <SD_disk_read>
 801adcc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801adce:	4618      	mov	r0, r3
 801add0:	3710      	adds	r7, #16
 801add2:	46bd      	mov	sp, r7
 801add4:	bd80      	pop	{r7, pc}

0801add6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801add6:	b580      	push	{r7, lr}
 801add8:	b084      	sub	sp, #16
 801adda:	af00      	add	r7, sp, #0
 801addc:	60b9      	str	r1, [r7, #8]
 801adde:	607a      	str	r2, [r7, #4]
 801ade0:	603b      	str	r3, [r7, #0]
 801ade2:	4603      	mov	r3, r0
 801ade4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801ade6:	7bf8      	ldrb	r0, [r7, #15]
 801ade8:	683b      	ldr	r3, [r7, #0]
 801adea:	687a      	ldr	r2, [r7, #4]
 801adec:	68b9      	ldr	r1, [r7, #8]
 801adee:	f7e9 fcf5 	bl	80047dc <SD_disk_write>
 801adf2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801adf4:	4618      	mov	r0, r3
 801adf6:	3710      	adds	r7, #16
 801adf8:	46bd      	mov	sp, r7
 801adfa:	bd80      	pop	{r7, pc}

0801adfc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801adfc:	b580      	push	{r7, lr}
 801adfe:	b082      	sub	sp, #8
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	4603      	mov	r3, r0
 801ae04:	603a      	str	r2, [r7, #0]
 801ae06:	71fb      	strb	r3, [r7, #7]
 801ae08:	460b      	mov	r3, r1
 801ae0a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801ae0c:	79b9      	ldrb	r1, [r7, #6]
 801ae0e:	79fb      	ldrb	r3, [r7, #7]
 801ae10:	683a      	ldr	r2, [r7, #0]
 801ae12:	4618      	mov	r0, r3
 801ae14:	f7e9 fd66 	bl	80048e4 <SD_disk_ioctl>
 801ae18:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801ae1a:	4618      	mov	r0, r3
 801ae1c:	3708      	adds	r7, #8
 801ae1e:	46bd      	mov	sp, r7
 801ae20:	bd80      	pop	{r7, pc}
	...

0801ae24 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801ae24:	b580      	push	{r7, lr}
 801ae26:	b084      	sub	sp, #16
 801ae28:	af00      	add	r7, sp, #0
 801ae2a:	4603      	mov	r3, r0
 801ae2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801ae2e:	79fb      	ldrb	r3, [r7, #7]
 801ae30:	4a08      	ldr	r2, [pc, #32]	@ (801ae54 <disk_status+0x30>)
 801ae32:	009b      	lsls	r3, r3, #2
 801ae34:	4413      	add	r3, r2
 801ae36:	685b      	ldr	r3, [r3, #4]
 801ae38:	685b      	ldr	r3, [r3, #4]
 801ae3a:	79fa      	ldrb	r2, [r7, #7]
 801ae3c:	4905      	ldr	r1, [pc, #20]	@ (801ae54 <disk_status+0x30>)
 801ae3e:	440a      	add	r2, r1
 801ae40:	7a12      	ldrb	r2, [r2, #8]
 801ae42:	4610      	mov	r0, r2
 801ae44:	4798      	blx	r3
 801ae46:	4603      	mov	r3, r0
 801ae48:	73fb      	strb	r3, [r7, #15]
  return stat;
 801ae4a:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae4c:	4618      	mov	r0, r3
 801ae4e:	3710      	adds	r7, #16
 801ae50:	46bd      	mov	sp, r7
 801ae52:	bd80      	pop	{r7, pc}
 801ae54:	24000768 	.word	0x24000768

0801ae58 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801ae58:	b580      	push	{r7, lr}
 801ae5a:	b084      	sub	sp, #16
 801ae5c:	af00      	add	r7, sp, #0
 801ae5e:	4603      	mov	r3, r0
 801ae60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801ae62:	2300      	movs	r3, #0
 801ae64:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801ae66:	79fb      	ldrb	r3, [r7, #7]
 801ae68:	4a0e      	ldr	r2, [pc, #56]	@ (801aea4 <disk_initialize+0x4c>)
 801ae6a:	5cd3      	ldrb	r3, [r2, r3]
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d114      	bne.n	801ae9a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801ae70:	79fb      	ldrb	r3, [r7, #7]
 801ae72:	4a0c      	ldr	r2, [pc, #48]	@ (801aea4 <disk_initialize+0x4c>)
 801ae74:	009b      	lsls	r3, r3, #2
 801ae76:	4413      	add	r3, r2
 801ae78:	685b      	ldr	r3, [r3, #4]
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	79fa      	ldrb	r2, [r7, #7]
 801ae7e:	4909      	ldr	r1, [pc, #36]	@ (801aea4 <disk_initialize+0x4c>)
 801ae80:	440a      	add	r2, r1
 801ae82:	7a12      	ldrb	r2, [r2, #8]
 801ae84:	4610      	mov	r0, r2
 801ae86:	4798      	blx	r3
 801ae88:	4603      	mov	r3, r0
 801ae8a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801ae8c:	7bfb      	ldrb	r3, [r7, #15]
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d103      	bne.n	801ae9a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801ae92:	79fb      	ldrb	r3, [r7, #7]
 801ae94:	4a03      	ldr	r2, [pc, #12]	@ (801aea4 <disk_initialize+0x4c>)
 801ae96:	2101      	movs	r1, #1
 801ae98:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801ae9a:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae9c:	4618      	mov	r0, r3
 801ae9e:	3710      	adds	r7, #16
 801aea0:	46bd      	mov	sp, r7
 801aea2:	bd80      	pop	{r7, pc}
 801aea4:	24000768 	.word	0x24000768

0801aea8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801aea8:	b590      	push	{r4, r7, lr}
 801aeaa:	b087      	sub	sp, #28
 801aeac:	af00      	add	r7, sp, #0
 801aeae:	60b9      	str	r1, [r7, #8]
 801aeb0:	607a      	str	r2, [r7, #4]
 801aeb2:	603b      	str	r3, [r7, #0]
 801aeb4:	4603      	mov	r3, r0
 801aeb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801aeb8:	7bfb      	ldrb	r3, [r7, #15]
 801aeba:	4a0a      	ldr	r2, [pc, #40]	@ (801aee4 <disk_read+0x3c>)
 801aebc:	009b      	lsls	r3, r3, #2
 801aebe:	4413      	add	r3, r2
 801aec0:	685b      	ldr	r3, [r3, #4]
 801aec2:	689c      	ldr	r4, [r3, #8]
 801aec4:	7bfb      	ldrb	r3, [r7, #15]
 801aec6:	4a07      	ldr	r2, [pc, #28]	@ (801aee4 <disk_read+0x3c>)
 801aec8:	4413      	add	r3, r2
 801aeca:	7a18      	ldrb	r0, [r3, #8]
 801aecc:	683b      	ldr	r3, [r7, #0]
 801aece:	687a      	ldr	r2, [r7, #4]
 801aed0:	68b9      	ldr	r1, [r7, #8]
 801aed2:	47a0      	blx	r4
 801aed4:	4603      	mov	r3, r0
 801aed6:	75fb      	strb	r3, [r7, #23]
  return res;
 801aed8:	7dfb      	ldrb	r3, [r7, #23]
}
 801aeda:	4618      	mov	r0, r3
 801aedc:	371c      	adds	r7, #28
 801aede:	46bd      	mov	sp, r7
 801aee0:	bd90      	pop	{r4, r7, pc}
 801aee2:	bf00      	nop
 801aee4:	24000768 	.word	0x24000768

0801aee8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801aee8:	b590      	push	{r4, r7, lr}
 801aeea:	b087      	sub	sp, #28
 801aeec:	af00      	add	r7, sp, #0
 801aeee:	60b9      	str	r1, [r7, #8]
 801aef0:	607a      	str	r2, [r7, #4]
 801aef2:	603b      	str	r3, [r7, #0]
 801aef4:	4603      	mov	r3, r0
 801aef6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801aef8:	7bfb      	ldrb	r3, [r7, #15]
 801aefa:	4a0a      	ldr	r2, [pc, #40]	@ (801af24 <disk_write+0x3c>)
 801aefc:	009b      	lsls	r3, r3, #2
 801aefe:	4413      	add	r3, r2
 801af00:	685b      	ldr	r3, [r3, #4]
 801af02:	68dc      	ldr	r4, [r3, #12]
 801af04:	7bfb      	ldrb	r3, [r7, #15]
 801af06:	4a07      	ldr	r2, [pc, #28]	@ (801af24 <disk_write+0x3c>)
 801af08:	4413      	add	r3, r2
 801af0a:	7a18      	ldrb	r0, [r3, #8]
 801af0c:	683b      	ldr	r3, [r7, #0]
 801af0e:	687a      	ldr	r2, [r7, #4]
 801af10:	68b9      	ldr	r1, [r7, #8]
 801af12:	47a0      	blx	r4
 801af14:	4603      	mov	r3, r0
 801af16:	75fb      	strb	r3, [r7, #23]
  return res;
 801af18:	7dfb      	ldrb	r3, [r7, #23]
}
 801af1a:	4618      	mov	r0, r3
 801af1c:	371c      	adds	r7, #28
 801af1e:	46bd      	mov	sp, r7
 801af20:	bd90      	pop	{r4, r7, pc}
 801af22:	bf00      	nop
 801af24:	24000768 	.word	0x24000768

0801af28 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801af28:	b580      	push	{r7, lr}
 801af2a:	b084      	sub	sp, #16
 801af2c:	af00      	add	r7, sp, #0
 801af2e:	4603      	mov	r3, r0
 801af30:	603a      	str	r2, [r7, #0]
 801af32:	71fb      	strb	r3, [r7, #7]
 801af34:	460b      	mov	r3, r1
 801af36:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801af38:	79fb      	ldrb	r3, [r7, #7]
 801af3a:	4a09      	ldr	r2, [pc, #36]	@ (801af60 <disk_ioctl+0x38>)
 801af3c:	009b      	lsls	r3, r3, #2
 801af3e:	4413      	add	r3, r2
 801af40:	685b      	ldr	r3, [r3, #4]
 801af42:	691b      	ldr	r3, [r3, #16]
 801af44:	79fa      	ldrb	r2, [r7, #7]
 801af46:	4906      	ldr	r1, [pc, #24]	@ (801af60 <disk_ioctl+0x38>)
 801af48:	440a      	add	r2, r1
 801af4a:	7a10      	ldrb	r0, [r2, #8]
 801af4c:	79b9      	ldrb	r1, [r7, #6]
 801af4e:	683a      	ldr	r2, [r7, #0]
 801af50:	4798      	blx	r3
 801af52:	4603      	mov	r3, r0
 801af54:	73fb      	strb	r3, [r7, #15]
  return res;
 801af56:	7bfb      	ldrb	r3, [r7, #15]
}
 801af58:	4618      	mov	r0, r3
 801af5a:	3710      	adds	r7, #16
 801af5c:	46bd      	mov	sp, r7
 801af5e:	bd80      	pop	{r7, pc}
 801af60:	24000768 	.word	0x24000768

0801af64 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801af64:	b480      	push	{r7}
 801af66:	b085      	sub	sp, #20
 801af68:	af00      	add	r7, sp, #0
 801af6a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	3301      	adds	r3, #1
 801af70:	781b      	ldrb	r3, [r3, #0]
 801af72:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801af74:	89fb      	ldrh	r3, [r7, #14]
 801af76:	021b      	lsls	r3, r3, #8
 801af78:	b21a      	sxth	r2, r3
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	781b      	ldrb	r3, [r3, #0]
 801af7e:	b21b      	sxth	r3, r3
 801af80:	4313      	orrs	r3, r2
 801af82:	b21b      	sxth	r3, r3
 801af84:	81fb      	strh	r3, [r7, #14]
	return rv;
 801af86:	89fb      	ldrh	r3, [r7, #14]
}
 801af88:	4618      	mov	r0, r3
 801af8a:	3714      	adds	r7, #20
 801af8c:	46bd      	mov	sp, r7
 801af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af92:	4770      	bx	lr

0801af94 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801af94:	b480      	push	{r7}
 801af96:	b085      	sub	sp, #20
 801af98:	af00      	add	r7, sp, #0
 801af9a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	3303      	adds	r3, #3
 801afa0:	781b      	ldrb	r3, [r3, #0]
 801afa2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	021b      	lsls	r3, r3, #8
 801afa8:	687a      	ldr	r2, [r7, #4]
 801afaa:	3202      	adds	r2, #2
 801afac:	7812      	ldrb	r2, [r2, #0]
 801afae:	4313      	orrs	r3, r2
 801afb0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	021b      	lsls	r3, r3, #8
 801afb6:	687a      	ldr	r2, [r7, #4]
 801afb8:	3201      	adds	r2, #1
 801afba:	7812      	ldrb	r2, [r2, #0]
 801afbc:	4313      	orrs	r3, r2
 801afbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801afc0:	68fb      	ldr	r3, [r7, #12]
 801afc2:	021b      	lsls	r3, r3, #8
 801afc4:	687a      	ldr	r2, [r7, #4]
 801afc6:	7812      	ldrb	r2, [r2, #0]
 801afc8:	4313      	orrs	r3, r2
 801afca:	60fb      	str	r3, [r7, #12]
	return rv;
 801afcc:	68fb      	ldr	r3, [r7, #12]
}
 801afce:	4618      	mov	r0, r3
 801afd0:	3714      	adds	r7, #20
 801afd2:	46bd      	mov	sp, r7
 801afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afd8:	4770      	bx	lr

0801afda <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801afda:	b480      	push	{r7}
 801afdc:	b083      	sub	sp, #12
 801afde:	af00      	add	r7, sp, #0
 801afe0:	6078      	str	r0, [r7, #4]
 801afe2:	460b      	mov	r3, r1
 801afe4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	1c5a      	adds	r2, r3, #1
 801afea:	607a      	str	r2, [r7, #4]
 801afec:	887a      	ldrh	r2, [r7, #2]
 801afee:	b2d2      	uxtb	r2, r2
 801aff0:	701a      	strb	r2, [r3, #0]
 801aff2:	887b      	ldrh	r3, [r7, #2]
 801aff4:	0a1b      	lsrs	r3, r3, #8
 801aff6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	1c5a      	adds	r2, r3, #1
 801affc:	607a      	str	r2, [r7, #4]
 801affe:	887a      	ldrh	r2, [r7, #2]
 801b000:	b2d2      	uxtb	r2, r2
 801b002:	701a      	strb	r2, [r3, #0]
}
 801b004:	bf00      	nop
 801b006:	370c      	adds	r7, #12
 801b008:	46bd      	mov	sp, r7
 801b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b00e:	4770      	bx	lr

0801b010 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801b010:	b480      	push	{r7}
 801b012:	b083      	sub	sp, #12
 801b014:	af00      	add	r7, sp, #0
 801b016:	6078      	str	r0, [r7, #4]
 801b018:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	1c5a      	adds	r2, r3, #1
 801b01e:	607a      	str	r2, [r7, #4]
 801b020:	683a      	ldr	r2, [r7, #0]
 801b022:	b2d2      	uxtb	r2, r2
 801b024:	701a      	strb	r2, [r3, #0]
 801b026:	683b      	ldr	r3, [r7, #0]
 801b028:	0a1b      	lsrs	r3, r3, #8
 801b02a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	1c5a      	adds	r2, r3, #1
 801b030:	607a      	str	r2, [r7, #4]
 801b032:	683a      	ldr	r2, [r7, #0]
 801b034:	b2d2      	uxtb	r2, r2
 801b036:	701a      	strb	r2, [r3, #0]
 801b038:	683b      	ldr	r3, [r7, #0]
 801b03a:	0a1b      	lsrs	r3, r3, #8
 801b03c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	1c5a      	adds	r2, r3, #1
 801b042:	607a      	str	r2, [r7, #4]
 801b044:	683a      	ldr	r2, [r7, #0]
 801b046:	b2d2      	uxtb	r2, r2
 801b048:	701a      	strb	r2, [r3, #0]
 801b04a:	683b      	ldr	r3, [r7, #0]
 801b04c:	0a1b      	lsrs	r3, r3, #8
 801b04e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	1c5a      	adds	r2, r3, #1
 801b054:	607a      	str	r2, [r7, #4]
 801b056:	683a      	ldr	r2, [r7, #0]
 801b058:	b2d2      	uxtb	r2, r2
 801b05a:	701a      	strb	r2, [r3, #0]
}
 801b05c:	bf00      	nop
 801b05e:	370c      	adds	r7, #12
 801b060:	46bd      	mov	sp, r7
 801b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b066:	4770      	bx	lr

0801b068 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801b068:	b480      	push	{r7}
 801b06a:	b087      	sub	sp, #28
 801b06c:	af00      	add	r7, sp, #0
 801b06e:	60f8      	str	r0, [r7, #12]
 801b070:	60b9      	str	r1, [r7, #8]
 801b072:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b074:	68fb      	ldr	r3, [r7, #12]
 801b076:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801b078:	68bb      	ldr	r3, [r7, #8]
 801b07a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	2b00      	cmp	r3, #0
 801b080:	d00d      	beq.n	801b09e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801b082:	693a      	ldr	r2, [r7, #16]
 801b084:	1c53      	adds	r3, r2, #1
 801b086:	613b      	str	r3, [r7, #16]
 801b088:	697b      	ldr	r3, [r7, #20]
 801b08a:	1c59      	adds	r1, r3, #1
 801b08c:	6179      	str	r1, [r7, #20]
 801b08e:	7812      	ldrb	r2, [r2, #0]
 801b090:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	3b01      	subs	r3, #1
 801b096:	607b      	str	r3, [r7, #4]
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d1f1      	bne.n	801b082 <mem_cpy+0x1a>
	}
}
 801b09e:	bf00      	nop
 801b0a0:	371c      	adds	r7, #28
 801b0a2:	46bd      	mov	sp, r7
 801b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0a8:	4770      	bx	lr

0801b0aa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801b0aa:	b480      	push	{r7}
 801b0ac:	b087      	sub	sp, #28
 801b0ae:	af00      	add	r7, sp, #0
 801b0b0:	60f8      	str	r0, [r7, #12]
 801b0b2:	60b9      	str	r1, [r7, #8]
 801b0b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b0b6:	68fb      	ldr	r3, [r7, #12]
 801b0b8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801b0ba:	697b      	ldr	r3, [r7, #20]
 801b0bc:	1c5a      	adds	r2, r3, #1
 801b0be:	617a      	str	r2, [r7, #20]
 801b0c0:	68ba      	ldr	r2, [r7, #8]
 801b0c2:	b2d2      	uxtb	r2, r2
 801b0c4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	3b01      	subs	r3, #1
 801b0ca:	607b      	str	r3, [r7, #4]
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d1f3      	bne.n	801b0ba <mem_set+0x10>
}
 801b0d2:	bf00      	nop
 801b0d4:	bf00      	nop
 801b0d6:	371c      	adds	r7, #28
 801b0d8:	46bd      	mov	sp, r7
 801b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0de:	4770      	bx	lr

0801b0e0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801b0e0:	b480      	push	{r7}
 801b0e2:	b089      	sub	sp, #36	@ 0x24
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	60f8      	str	r0, [r7, #12]
 801b0e8:	60b9      	str	r1, [r7, #8]
 801b0ea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801b0ec:	68fb      	ldr	r3, [r7, #12]
 801b0ee:	61fb      	str	r3, [r7, #28]
 801b0f0:	68bb      	ldr	r3, [r7, #8]
 801b0f2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801b0f4:	2300      	movs	r3, #0
 801b0f6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801b0f8:	69fb      	ldr	r3, [r7, #28]
 801b0fa:	1c5a      	adds	r2, r3, #1
 801b0fc:	61fa      	str	r2, [r7, #28]
 801b0fe:	781b      	ldrb	r3, [r3, #0]
 801b100:	4619      	mov	r1, r3
 801b102:	69bb      	ldr	r3, [r7, #24]
 801b104:	1c5a      	adds	r2, r3, #1
 801b106:	61ba      	str	r2, [r7, #24]
 801b108:	781b      	ldrb	r3, [r3, #0]
 801b10a:	1acb      	subs	r3, r1, r3
 801b10c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	3b01      	subs	r3, #1
 801b112:	607b      	str	r3, [r7, #4]
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	2b00      	cmp	r3, #0
 801b118:	d002      	beq.n	801b120 <mem_cmp+0x40>
 801b11a:	697b      	ldr	r3, [r7, #20]
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d0eb      	beq.n	801b0f8 <mem_cmp+0x18>

	return r;
 801b120:	697b      	ldr	r3, [r7, #20]
}
 801b122:	4618      	mov	r0, r3
 801b124:	3724      	adds	r7, #36	@ 0x24
 801b126:	46bd      	mov	sp, r7
 801b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b12c:	4770      	bx	lr

0801b12e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801b12e:	b480      	push	{r7}
 801b130:	b083      	sub	sp, #12
 801b132:	af00      	add	r7, sp, #0
 801b134:	6078      	str	r0, [r7, #4]
 801b136:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801b138:	e002      	b.n	801b140 <chk_chr+0x12>
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	3301      	adds	r3, #1
 801b13e:	607b      	str	r3, [r7, #4]
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	781b      	ldrb	r3, [r3, #0]
 801b144:	2b00      	cmp	r3, #0
 801b146:	d005      	beq.n	801b154 <chk_chr+0x26>
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	781b      	ldrb	r3, [r3, #0]
 801b14c:	461a      	mov	r2, r3
 801b14e:	683b      	ldr	r3, [r7, #0]
 801b150:	4293      	cmp	r3, r2
 801b152:	d1f2      	bne.n	801b13a <chk_chr+0xc>
	return *str;
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	781b      	ldrb	r3, [r3, #0]
}
 801b158:	4618      	mov	r0, r3
 801b15a:	370c      	adds	r7, #12
 801b15c:	46bd      	mov	sp, r7
 801b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b162:	4770      	bx	lr

0801b164 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b164:	b480      	push	{r7}
 801b166:	b085      	sub	sp, #20
 801b168:	af00      	add	r7, sp, #0
 801b16a:	6078      	str	r0, [r7, #4]
 801b16c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b16e:	2300      	movs	r3, #0
 801b170:	60bb      	str	r3, [r7, #8]
 801b172:	68bb      	ldr	r3, [r7, #8]
 801b174:	60fb      	str	r3, [r7, #12]
 801b176:	e029      	b.n	801b1cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801b178:	4a27      	ldr	r2, [pc, #156]	@ (801b218 <chk_lock+0xb4>)
 801b17a:	68fb      	ldr	r3, [r7, #12]
 801b17c:	011b      	lsls	r3, r3, #4
 801b17e:	4413      	add	r3, r2
 801b180:	681b      	ldr	r3, [r3, #0]
 801b182:	2b00      	cmp	r3, #0
 801b184:	d01d      	beq.n	801b1c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b186:	4a24      	ldr	r2, [pc, #144]	@ (801b218 <chk_lock+0xb4>)
 801b188:	68fb      	ldr	r3, [r7, #12]
 801b18a:	011b      	lsls	r3, r3, #4
 801b18c:	4413      	add	r3, r2
 801b18e:	681a      	ldr	r2, [r3, #0]
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	429a      	cmp	r2, r3
 801b196:	d116      	bne.n	801b1c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801b198:	4a1f      	ldr	r2, [pc, #124]	@ (801b218 <chk_lock+0xb4>)
 801b19a:	68fb      	ldr	r3, [r7, #12]
 801b19c:	011b      	lsls	r3, r3, #4
 801b19e:	4413      	add	r3, r2
 801b1a0:	3304      	adds	r3, #4
 801b1a2:	681a      	ldr	r2, [r3, #0]
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b1a8:	429a      	cmp	r2, r3
 801b1aa:	d10c      	bne.n	801b1c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b1ac:	4a1a      	ldr	r2, [pc, #104]	@ (801b218 <chk_lock+0xb4>)
 801b1ae:	68fb      	ldr	r3, [r7, #12]
 801b1b0:	011b      	lsls	r3, r3, #4
 801b1b2:	4413      	add	r3, r2
 801b1b4:	3308      	adds	r3, #8
 801b1b6:	681a      	ldr	r2, [r3, #0]
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801b1bc:	429a      	cmp	r2, r3
 801b1be:	d102      	bne.n	801b1c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b1c0:	e007      	b.n	801b1d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801b1c2:	2301      	movs	r3, #1
 801b1c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b1c6:	68fb      	ldr	r3, [r7, #12]
 801b1c8:	3301      	adds	r3, #1
 801b1ca:	60fb      	str	r3, [r7, #12]
 801b1cc:	68fb      	ldr	r3, [r7, #12]
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	d0d2      	beq.n	801b178 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801b1d2:	68fb      	ldr	r3, [r7, #12]
 801b1d4:	2b01      	cmp	r3, #1
 801b1d6:	d109      	bne.n	801b1ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801b1d8:	68bb      	ldr	r3, [r7, #8]
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	d102      	bne.n	801b1e4 <chk_lock+0x80>
 801b1de:	683b      	ldr	r3, [r7, #0]
 801b1e0:	2b02      	cmp	r3, #2
 801b1e2:	d101      	bne.n	801b1e8 <chk_lock+0x84>
 801b1e4:	2300      	movs	r3, #0
 801b1e6:	e010      	b.n	801b20a <chk_lock+0xa6>
 801b1e8:	2312      	movs	r3, #18
 801b1ea:	e00e      	b.n	801b20a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801b1ec:	683b      	ldr	r3, [r7, #0]
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d108      	bne.n	801b204 <chk_lock+0xa0>
 801b1f2:	4a09      	ldr	r2, [pc, #36]	@ (801b218 <chk_lock+0xb4>)
 801b1f4:	68fb      	ldr	r3, [r7, #12]
 801b1f6:	011b      	lsls	r3, r3, #4
 801b1f8:	4413      	add	r3, r2
 801b1fa:	330c      	adds	r3, #12
 801b1fc:	881b      	ldrh	r3, [r3, #0]
 801b1fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b202:	d101      	bne.n	801b208 <chk_lock+0xa4>
 801b204:	2310      	movs	r3, #16
 801b206:	e000      	b.n	801b20a <chk_lock+0xa6>
 801b208:	2300      	movs	r3, #0
}
 801b20a:	4618      	mov	r0, r3
 801b20c:	3714      	adds	r7, #20
 801b20e:	46bd      	mov	sp, r7
 801b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b214:	4770      	bx	lr
 801b216:	bf00      	nop
 801b218:	24000558 	.word	0x24000558

0801b21c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801b21c:	b480      	push	{r7}
 801b21e:	b083      	sub	sp, #12
 801b220:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b222:	2300      	movs	r3, #0
 801b224:	607b      	str	r3, [r7, #4]
 801b226:	e002      	b.n	801b22e <enq_lock+0x12>
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	3301      	adds	r3, #1
 801b22c:	607b      	str	r3, [r7, #4]
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	2b00      	cmp	r3, #0
 801b232:	d106      	bne.n	801b242 <enq_lock+0x26>
 801b234:	4a09      	ldr	r2, [pc, #36]	@ (801b25c <enq_lock+0x40>)
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	011b      	lsls	r3, r3, #4
 801b23a:	4413      	add	r3, r2
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d1f2      	bne.n	801b228 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	2b01      	cmp	r3, #1
 801b246:	bf14      	ite	ne
 801b248:	2301      	movne	r3, #1
 801b24a:	2300      	moveq	r3, #0
 801b24c:	b2db      	uxtb	r3, r3
}
 801b24e:	4618      	mov	r0, r3
 801b250:	370c      	adds	r7, #12
 801b252:	46bd      	mov	sp, r7
 801b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b258:	4770      	bx	lr
 801b25a:	bf00      	nop
 801b25c:	24000558 	.word	0x24000558

0801b260 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b260:	b480      	push	{r7}
 801b262:	b085      	sub	sp, #20
 801b264:	af00      	add	r7, sp, #0
 801b266:	6078      	str	r0, [r7, #4]
 801b268:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b26a:	2300      	movs	r3, #0
 801b26c:	60fb      	str	r3, [r7, #12]
 801b26e:	e01f      	b.n	801b2b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801b270:	4a41      	ldr	r2, [pc, #260]	@ (801b378 <inc_lock+0x118>)
 801b272:	68fb      	ldr	r3, [r7, #12]
 801b274:	011b      	lsls	r3, r3, #4
 801b276:	4413      	add	r3, r2
 801b278:	681a      	ldr	r2, [r3, #0]
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	681b      	ldr	r3, [r3, #0]
 801b27e:	429a      	cmp	r2, r3
 801b280:	d113      	bne.n	801b2aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801b282:	4a3d      	ldr	r2, [pc, #244]	@ (801b378 <inc_lock+0x118>)
 801b284:	68fb      	ldr	r3, [r7, #12]
 801b286:	011b      	lsls	r3, r3, #4
 801b288:	4413      	add	r3, r2
 801b28a:	3304      	adds	r3, #4
 801b28c:	681a      	ldr	r2, [r3, #0]
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801b292:	429a      	cmp	r2, r3
 801b294:	d109      	bne.n	801b2aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801b296:	4a38      	ldr	r2, [pc, #224]	@ (801b378 <inc_lock+0x118>)
 801b298:	68fb      	ldr	r3, [r7, #12]
 801b29a:	011b      	lsls	r3, r3, #4
 801b29c:	4413      	add	r3, r2
 801b29e:	3308      	adds	r3, #8
 801b2a0:	681a      	ldr	r2, [r3, #0]
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801b2a6:	429a      	cmp	r2, r3
 801b2a8:	d006      	beq.n	801b2b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b2aa:	68fb      	ldr	r3, [r7, #12]
 801b2ac:	3301      	adds	r3, #1
 801b2ae:	60fb      	str	r3, [r7, #12]
 801b2b0:	68fb      	ldr	r3, [r7, #12]
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d0dc      	beq.n	801b270 <inc_lock+0x10>
 801b2b6:	e000      	b.n	801b2ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801b2b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801b2ba:	68fb      	ldr	r3, [r7, #12]
 801b2bc:	2b01      	cmp	r3, #1
 801b2be:	d132      	bne.n	801b326 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b2c0:	2300      	movs	r3, #0
 801b2c2:	60fb      	str	r3, [r7, #12]
 801b2c4:	e002      	b.n	801b2cc <inc_lock+0x6c>
 801b2c6:	68fb      	ldr	r3, [r7, #12]
 801b2c8:	3301      	adds	r3, #1
 801b2ca:	60fb      	str	r3, [r7, #12]
 801b2cc:	68fb      	ldr	r3, [r7, #12]
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d106      	bne.n	801b2e0 <inc_lock+0x80>
 801b2d2:	4a29      	ldr	r2, [pc, #164]	@ (801b378 <inc_lock+0x118>)
 801b2d4:	68fb      	ldr	r3, [r7, #12]
 801b2d6:	011b      	lsls	r3, r3, #4
 801b2d8:	4413      	add	r3, r2
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d1f2      	bne.n	801b2c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801b2e0:	68fb      	ldr	r3, [r7, #12]
 801b2e2:	2b01      	cmp	r3, #1
 801b2e4:	d101      	bne.n	801b2ea <inc_lock+0x8a>
 801b2e6:	2300      	movs	r3, #0
 801b2e8:	e040      	b.n	801b36c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	681a      	ldr	r2, [r3, #0]
 801b2ee:	4922      	ldr	r1, [pc, #136]	@ (801b378 <inc_lock+0x118>)
 801b2f0:	68fb      	ldr	r3, [r7, #12]
 801b2f2:	011b      	lsls	r3, r3, #4
 801b2f4:	440b      	add	r3, r1
 801b2f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	689a      	ldr	r2, [r3, #8]
 801b2fc:	491e      	ldr	r1, [pc, #120]	@ (801b378 <inc_lock+0x118>)
 801b2fe:	68fb      	ldr	r3, [r7, #12]
 801b300:	011b      	lsls	r3, r3, #4
 801b302:	440b      	add	r3, r1
 801b304:	3304      	adds	r3, #4
 801b306:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	695a      	ldr	r2, [r3, #20]
 801b30c:	491a      	ldr	r1, [pc, #104]	@ (801b378 <inc_lock+0x118>)
 801b30e:	68fb      	ldr	r3, [r7, #12]
 801b310:	011b      	lsls	r3, r3, #4
 801b312:	440b      	add	r3, r1
 801b314:	3308      	adds	r3, #8
 801b316:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801b318:	4a17      	ldr	r2, [pc, #92]	@ (801b378 <inc_lock+0x118>)
 801b31a:	68fb      	ldr	r3, [r7, #12]
 801b31c:	011b      	lsls	r3, r3, #4
 801b31e:	4413      	add	r3, r2
 801b320:	330c      	adds	r3, #12
 801b322:	2200      	movs	r2, #0
 801b324:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801b326:	683b      	ldr	r3, [r7, #0]
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d009      	beq.n	801b340 <inc_lock+0xe0>
 801b32c:	4a12      	ldr	r2, [pc, #72]	@ (801b378 <inc_lock+0x118>)
 801b32e:	68fb      	ldr	r3, [r7, #12]
 801b330:	011b      	lsls	r3, r3, #4
 801b332:	4413      	add	r3, r2
 801b334:	330c      	adds	r3, #12
 801b336:	881b      	ldrh	r3, [r3, #0]
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d001      	beq.n	801b340 <inc_lock+0xe0>
 801b33c:	2300      	movs	r3, #0
 801b33e:	e015      	b.n	801b36c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801b340:	683b      	ldr	r3, [r7, #0]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d108      	bne.n	801b358 <inc_lock+0xf8>
 801b346:	4a0c      	ldr	r2, [pc, #48]	@ (801b378 <inc_lock+0x118>)
 801b348:	68fb      	ldr	r3, [r7, #12]
 801b34a:	011b      	lsls	r3, r3, #4
 801b34c:	4413      	add	r3, r2
 801b34e:	330c      	adds	r3, #12
 801b350:	881b      	ldrh	r3, [r3, #0]
 801b352:	3301      	adds	r3, #1
 801b354:	b29a      	uxth	r2, r3
 801b356:	e001      	b.n	801b35c <inc_lock+0xfc>
 801b358:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b35c:	4906      	ldr	r1, [pc, #24]	@ (801b378 <inc_lock+0x118>)
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	011b      	lsls	r3, r3, #4
 801b362:	440b      	add	r3, r1
 801b364:	330c      	adds	r3, #12
 801b366:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801b368:	68fb      	ldr	r3, [r7, #12]
 801b36a:	3301      	adds	r3, #1
}
 801b36c:	4618      	mov	r0, r3
 801b36e:	3714      	adds	r7, #20
 801b370:	46bd      	mov	sp, r7
 801b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b376:	4770      	bx	lr
 801b378:	24000558 	.word	0x24000558

0801b37c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801b37c:	b480      	push	{r7}
 801b37e:	b085      	sub	sp, #20
 801b380:	af00      	add	r7, sp, #0
 801b382:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	3b01      	subs	r3, #1
 801b388:	607b      	str	r3, [r7, #4]
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	2b00      	cmp	r3, #0
 801b38e:	d125      	bne.n	801b3dc <dec_lock+0x60>
		n = Files[i].ctr;
 801b390:	4a17      	ldr	r2, [pc, #92]	@ (801b3f0 <dec_lock+0x74>)
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	011b      	lsls	r3, r3, #4
 801b396:	4413      	add	r3, r2
 801b398:	330c      	adds	r3, #12
 801b39a:	881b      	ldrh	r3, [r3, #0]
 801b39c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801b39e:	89fb      	ldrh	r3, [r7, #14]
 801b3a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b3a4:	d101      	bne.n	801b3aa <dec_lock+0x2e>
 801b3a6:	2300      	movs	r3, #0
 801b3a8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801b3aa:	89fb      	ldrh	r3, [r7, #14]
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d002      	beq.n	801b3b6 <dec_lock+0x3a>
 801b3b0:	89fb      	ldrh	r3, [r7, #14]
 801b3b2:	3b01      	subs	r3, #1
 801b3b4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801b3b6:	4a0e      	ldr	r2, [pc, #56]	@ (801b3f0 <dec_lock+0x74>)
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	011b      	lsls	r3, r3, #4
 801b3bc:	4413      	add	r3, r2
 801b3be:	330c      	adds	r3, #12
 801b3c0:	89fa      	ldrh	r2, [r7, #14]
 801b3c2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801b3c4:	89fb      	ldrh	r3, [r7, #14]
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d105      	bne.n	801b3d6 <dec_lock+0x5a>
 801b3ca:	4a09      	ldr	r2, [pc, #36]	@ (801b3f0 <dec_lock+0x74>)
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	011b      	lsls	r3, r3, #4
 801b3d0:	4413      	add	r3, r2
 801b3d2:	2200      	movs	r2, #0
 801b3d4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801b3d6:	2300      	movs	r3, #0
 801b3d8:	737b      	strb	r3, [r7, #13]
 801b3da:	e001      	b.n	801b3e0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801b3dc:	2302      	movs	r3, #2
 801b3de:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801b3e0:	7b7b      	ldrb	r3, [r7, #13]
}
 801b3e2:	4618      	mov	r0, r3
 801b3e4:	3714      	adds	r7, #20
 801b3e6:	46bd      	mov	sp, r7
 801b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ec:	4770      	bx	lr
 801b3ee:	bf00      	nop
 801b3f0:	24000558 	.word	0x24000558

0801b3f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801b3f4:	b480      	push	{r7}
 801b3f6:	b085      	sub	sp, #20
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801b3fc:	2300      	movs	r3, #0
 801b3fe:	60fb      	str	r3, [r7, #12]
 801b400:	e010      	b.n	801b424 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801b402:	4a0d      	ldr	r2, [pc, #52]	@ (801b438 <clear_lock+0x44>)
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	011b      	lsls	r3, r3, #4
 801b408:	4413      	add	r3, r2
 801b40a:	681b      	ldr	r3, [r3, #0]
 801b40c:	687a      	ldr	r2, [r7, #4]
 801b40e:	429a      	cmp	r2, r3
 801b410:	d105      	bne.n	801b41e <clear_lock+0x2a>
 801b412:	4a09      	ldr	r2, [pc, #36]	@ (801b438 <clear_lock+0x44>)
 801b414:	68fb      	ldr	r3, [r7, #12]
 801b416:	011b      	lsls	r3, r3, #4
 801b418:	4413      	add	r3, r2
 801b41a:	2200      	movs	r2, #0
 801b41c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801b41e:	68fb      	ldr	r3, [r7, #12]
 801b420:	3301      	adds	r3, #1
 801b422:	60fb      	str	r3, [r7, #12]
 801b424:	68fb      	ldr	r3, [r7, #12]
 801b426:	2b00      	cmp	r3, #0
 801b428:	d0eb      	beq.n	801b402 <clear_lock+0xe>
	}
}
 801b42a:	bf00      	nop
 801b42c:	bf00      	nop
 801b42e:	3714      	adds	r7, #20
 801b430:	46bd      	mov	sp, r7
 801b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b436:	4770      	bx	lr
 801b438:	24000558 	.word	0x24000558

0801b43c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801b43c:	b580      	push	{r7, lr}
 801b43e:	b086      	sub	sp, #24
 801b440:	af00      	add	r7, sp, #0
 801b442:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801b444:	2300      	movs	r3, #0
 801b446:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	78db      	ldrb	r3, [r3, #3]
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d034      	beq.n	801b4ba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b454:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	7858      	ldrb	r0, [r3, #1]
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b460:	2301      	movs	r3, #1
 801b462:	697a      	ldr	r2, [r7, #20]
 801b464:	f7ff fd40 	bl	801aee8 <disk_write>
 801b468:	4603      	mov	r3, r0
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d002      	beq.n	801b474 <sync_window+0x38>
			res = FR_DISK_ERR;
 801b46e:	2301      	movs	r3, #1
 801b470:	73fb      	strb	r3, [r7, #15]
 801b472:	e022      	b.n	801b4ba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	2200      	movs	r2, #0
 801b478:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b47e:	697a      	ldr	r2, [r7, #20]
 801b480:	1ad2      	subs	r2, r2, r3
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	6a1b      	ldr	r3, [r3, #32]
 801b486:	429a      	cmp	r2, r3
 801b488:	d217      	bcs.n	801b4ba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	789b      	ldrb	r3, [r3, #2]
 801b48e:	613b      	str	r3, [r7, #16]
 801b490:	e010      	b.n	801b4b4 <sync_window+0x78>
					wsect += fs->fsize;
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	6a1b      	ldr	r3, [r3, #32]
 801b496:	697a      	ldr	r2, [r7, #20]
 801b498:	4413      	add	r3, r2
 801b49a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	7858      	ldrb	r0, [r3, #1]
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b4a6:	2301      	movs	r3, #1
 801b4a8:	697a      	ldr	r2, [r7, #20]
 801b4aa:	f7ff fd1d 	bl	801aee8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b4ae:	693b      	ldr	r3, [r7, #16]
 801b4b0:	3b01      	subs	r3, #1
 801b4b2:	613b      	str	r3, [r7, #16]
 801b4b4:	693b      	ldr	r3, [r7, #16]
 801b4b6:	2b01      	cmp	r3, #1
 801b4b8:	d8eb      	bhi.n	801b492 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801b4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 801b4bc:	4618      	mov	r0, r3
 801b4be:	3718      	adds	r7, #24
 801b4c0:	46bd      	mov	sp, r7
 801b4c2:	bd80      	pop	{r7, pc}

0801b4c4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801b4c4:	b580      	push	{r7, lr}
 801b4c6:	b084      	sub	sp, #16
 801b4c8:	af00      	add	r7, sp, #0
 801b4ca:	6078      	str	r0, [r7, #4]
 801b4cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801b4ce:	2300      	movs	r3, #0
 801b4d0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b4d6:	683a      	ldr	r2, [r7, #0]
 801b4d8:	429a      	cmp	r2, r3
 801b4da:	d01b      	beq.n	801b514 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801b4dc:	6878      	ldr	r0, [r7, #4]
 801b4de:	f7ff ffad 	bl	801b43c <sync_window>
 801b4e2:	4603      	mov	r3, r0
 801b4e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801b4e6:	7bfb      	ldrb	r3, [r7, #15]
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d113      	bne.n	801b514 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	7858      	ldrb	r0, [r3, #1]
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b4f6:	2301      	movs	r3, #1
 801b4f8:	683a      	ldr	r2, [r7, #0]
 801b4fa:	f7ff fcd5 	bl	801aea8 <disk_read>
 801b4fe:	4603      	mov	r3, r0
 801b500:	2b00      	cmp	r3, #0
 801b502:	d004      	beq.n	801b50e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801b504:	f04f 33ff 	mov.w	r3, #4294967295
 801b508:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801b50a:	2301      	movs	r3, #1
 801b50c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	683a      	ldr	r2, [r7, #0]
 801b512:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801b514:	7bfb      	ldrb	r3, [r7, #15]
}
 801b516:	4618      	mov	r0, r3
 801b518:	3710      	adds	r7, #16
 801b51a:	46bd      	mov	sp, r7
 801b51c:	bd80      	pop	{r7, pc}
	...

0801b520 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801b520:	b580      	push	{r7, lr}
 801b522:	b084      	sub	sp, #16
 801b524:	af00      	add	r7, sp, #0
 801b526:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801b528:	6878      	ldr	r0, [r7, #4]
 801b52a:	f7ff ff87 	bl	801b43c <sync_window>
 801b52e:	4603      	mov	r3, r0
 801b530:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b532:	7bfb      	ldrb	r3, [r7, #15]
 801b534:	2b00      	cmp	r3, #0
 801b536:	d159      	bne.n	801b5ec <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	781b      	ldrb	r3, [r3, #0]
 801b53c:	2b03      	cmp	r3, #3
 801b53e:	d149      	bne.n	801b5d4 <sync_fs+0xb4>
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	791b      	ldrb	r3, [r3, #4]
 801b544:	2b01      	cmp	r3, #1
 801b546:	d145      	bne.n	801b5d4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	899b      	ldrh	r3, [r3, #12]
 801b552:	461a      	mov	r2, r3
 801b554:	2100      	movs	r1, #0
 801b556:	f7ff fda8 	bl	801b0aa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	3338      	adds	r3, #56	@ 0x38
 801b55e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b562:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801b566:	4618      	mov	r0, r3
 801b568:	f7ff fd37 	bl	801afda <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	3338      	adds	r3, #56	@ 0x38
 801b570:	4921      	ldr	r1, [pc, #132]	@ (801b5f8 <sync_fs+0xd8>)
 801b572:	4618      	mov	r0, r3
 801b574:	f7ff fd4c 	bl	801b010 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	3338      	adds	r3, #56	@ 0x38
 801b57c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b580:	491e      	ldr	r1, [pc, #120]	@ (801b5fc <sync_fs+0xdc>)
 801b582:	4618      	mov	r0, r3
 801b584:	f7ff fd44 	bl	801b010 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	3338      	adds	r3, #56	@ 0x38
 801b58c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	699b      	ldr	r3, [r3, #24]
 801b594:	4619      	mov	r1, r3
 801b596:	4610      	mov	r0, r2
 801b598:	f7ff fd3a 	bl	801b010 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	3338      	adds	r3, #56	@ 0x38
 801b5a0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	695b      	ldr	r3, [r3, #20]
 801b5a8:	4619      	mov	r1, r3
 801b5aa:	4610      	mov	r0, r2
 801b5ac:	f7ff fd30 	bl	801b010 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b5b4:	1c5a      	adds	r2, r3, #1
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	7858      	ldrb	r0, [r3, #1]
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b5c8:	2301      	movs	r3, #1
 801b5ca:	f7ff fc8d 	bl	801aee8 <disk_write>
			fs->fsi_flag = 0;
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	2200      	movs	r2, #0
 801b5d2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	785b      	ldrb	r3, [r3, #1]
 801b5d8:	2200      	movs	r2, #0
 801b5da:	2100      	movs	r1, #0
 801b5dc:	4618      	mov	r0, r3
 801b5de:	f7ff fca3 	bl	801af28 <disk_ioctl>
 801b5e2:	4603      	mov	r3, r0
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d001      	beq.n	801b5ec <sync_fs+0xcc>
 801b5e8:	2301      	movs	r3, #1
 801b5ea:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 801b5ee:	4618      	mov	r0, r3
 801b5f0:	3710      	adds	r7, #16
 801b5f2:	46bd      	mov	sp, r7
 801b5f4:	bd80      	pop	{r7, pc}
 801b5f6:	bf00      	nop
 801b5f8:	41615252 	.word	0x41615252
 801b5fc:	61417272 	.word	0x61417272

0801b600 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b600:	b480      	push	{r7}
 801b602:	b083      	sub	sp, #12
 801b604:	af00      	add	r7, sp, #0
 801b606:	6078      	str	r0, [r7, #4]
 801b608:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b60a:	683b      	ldr	r3, [r7, #0]
 801b60c:	3b02      	subs	r3, #2
 801b60e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	69db      	ldr	r3, [r3, #28]
 801b614:	3b02      	subs	r3, #2
 801b616:	683a      	ldr	r2, [r7, #0]
 801b618:	429a      	cmp	r2, r3
 801b61a:	d301      	bcc.n	801b620 <clust2sect+0x20>
 801b61c:	2300      	movs	r3, #0
 801b61e:	e008      	b.n	801b632 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	895b      	ldrh	r3, [r3, #10]
 801b624:	461a      	mov	r2, r3
 801b626:	683b      	ldr	r3, [r7, #0]
 801b628:	fb03 f202 	mul.w	r2, r3, r2
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b630:	4413      	add	r3, r2
}
 801b632:	4618      	mov	r0, r3
 801b634:	370c      	adds	r7, #12
 801b636:	46bd      	mov	sp, r7
 801b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b63c:	4770      	bx	lr

0801b63e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b63e:	b580      	push	{r7, lr}
 801b640:	b086      	sub	sp, #24
 801b642:	af00      	add	r7, sp, #0
 801b644:	6078      	str	r0, [r7, #4]
 801b646:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b64e:	683b      	ldr	r3, [r7, #0]
 801b650:	2b01      	cmp	r3, #1
 801b652:	d904      	bls.n	801b65e <get_fat+0x20>
 801b654:	693b      	ldr	r3, [r7, #16]
 801b656:	69db      	ldr	r3, [r3, #28]
 801b658:	683a      	ldr	r2, [r7, #0]
 801b65a:	429a      	cmp	r2, r3
 801b65c:	d302      	bcc.n	801b664 <get_fat+0x26>
		val = 1;	/* Internal error */
 801b65e:	2301      	movs	r3, #1
 801b660:	617b      	str	r3, [r7, #20]
 801b662:	e0ba      	b.n	801b7da <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b664:	f04f 33ff 	mov.w	r3, #4294967295
 801b668:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b66a:	693b      	ldr	r3, [r7, #16]
 801b66c:	781b      	ldrb	r3, [r3, #0]
 801b66e:	2b03      	cmp	r3, #3
 801b670:	f000 8082 	beq.w	801b778 <get_fat+0x13a>
 801b674:	2b03      	cmp	r3, #3
 801b676:	f300 80a6 	bgt.w	801b7c6 <get_fat+0x188>
 801b67a:	2b01      	cmp	r3, #1
 801b67c:	d002      	beq.n	801b684 <get_fat+0x46>
 801b67e:	2b02      	cmp	r3, #2
 801b680:	d055      	beq.n	801b72e <get_fat+0xf0>
 801b682:	e0a0      	b.n	801b7c6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b684:	683b      	ldr	r3, [r7, #0]
 801b686:	60fb      	str	r3, [r7, #12]
 801b688:	68fb      	ldr	r3, [r7, #12]
 801b68a:	085b      	lsrs	r3, r3, #1
 801b68c:	68fa      	ldr	r2, [r7, #12]
 801b68e:	4413      	add	r3, r2
 801b690:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b692:	693b      	ldr	r3, [r7, #16]
 801b694:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b696:	693b      	ldr	r3, [r7, #16]
 801b698:	899b      	ldrh	r3, [r3, #12]
 801b69a:	4619      	mov	r1, r3
 801b69c:	68fb      	ldr	r3, [r7, #12]
 801b69e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b6a2:	4413      	add	r3, r2
 801b6a4:	4619      	mov	r1, r3
 801b6a6:	6938      	ldr	r0, [r7, #16]
 801b6a8:	f7ff ff0c 	bl	801b4c4 <move_window>
 801b6ac:	4603      	mov	r3, r0
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	f040 808c 	bne.w	801b7cc <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801b6b4:	68fb      	ldr	r3, [r7, #12]
 801b6b6:	1c5a      	adds	r2, r3, #1
 801b6b8:	60fa      	str	r2, [r7, #12]
 801b6ba:	693a      	ldr	r2, [r7, #16]
 801b6bc:	8992      	ldrh	r2, [r2, #12]
 801b6be:	fbb3 f1f2 	udiv	r1, r3, r2
 801b6c2:	fb01 f202 	mul.w	r2, r1, r2
 801b6c6:	1a9b      	subs	r3, r3, r2
 801b6c8:	693a      	ldr	r2, [r7, #16]
 801b6ca:	4413      	add	r3, r2
 801b6cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b6d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b6d2:	693b      	ldr	r3, [r7, #16]
 801b6d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b6d6:	693b      	ldr	r3, [r7, #16]
 801b6d8:	899b      	ldrh	r3, [r3, #12]
 801b6da:	4619      	mov	r1, r3
 801b6dc:	68fb      	ldr	r3, [r7, #12]
 801b6de:	fbb3 f3f1 	udiv	r3, r3, r1
 801b6e2:	4413      	add	r3, r2
 801b6e4:	4619      	mov	r1, r3
 801b6e6:	6938      	ldr	r0, [r7, #16]
 801b6e8:	f7ff feec 	bl	801b4c4 <move_window>
 801b6ec:	4603      	mov	r3, r0
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d16e      	bne.n	801b7d0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b6f2:	693b      	ldr	r3, [r7, #16]
 801b6f4:	899b      	ldrh	r3, [r3, #12]
 801b6f6:	461a      	mov	r2, r3
 801b6f8:	68fb      	ldr	r3, [r7, #12]
 801b6fa:	fbb3 f1f2 	udiv	r1, r3, r2
 801b6fe:	fb01 f202 	mul.w	r2, r1, r2
 801b702:	1a9b      	subs	r3, r3, r2
 801b704:	693a      	ldr	r2, [r7, #16]
 801b706:	4413      	add	r3, r2
 801b708:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b70c:	021b      	lsls	r3, r3, #8
 801b70e:	68ba      	ldr	r2, [r7, #8]
 801b710:	4313      	orrs	r3, r2
 801b712:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b714:	683b      	ldr	r3, [r7, #0]
 801b716:	f003 0301 	and.w	r3, r3, #1
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d002      	beq.n	801b724 <get_fat+0xe6>
 801b71e:	68bb      	ldr	r3, [r7, #8]
 801b720:	091b      	lsrs	r3, r3, #4
 801b722:	e002      	b.n	801b72a <get_fat+0xec>
 801b724:	68bb      	ldr	r3, [r7, #8]
 801b726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b72a:	617b      	str	r3, [r7, #20]
			break;
 801b72c:	e055      	b.n	801b7da <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b72e:	693b      	ldr	r3, [r7, #16]
 801b730:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b732:	693b      	ldr	r3, [r7, #16]
 801b734:	899b      	ldrh	r3, [r3, #12]
 801b736:	085b      	lsrs	r3, r3, #1
 801b738:	b29b      	uxth	r3, r3
 801b73a:	4619      	mov	r1, r3
 801b73c:	683b      	ldr	r3, [r7, #0]
 801b73e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b742:	4413      	add	r3, r2
 801b744:	4619      	mov	r1, r3
 801b746:	6938      	ldr	r0, [r7, #16]
 801b748:	f7ff febc 	bl	801b4c4 <move_window>
 801b74c:	4603      	mov	r3, r0
 801b74e:	2b00      	cmp	r3, #0
 801b750:	d140      	bne.n	801b7d4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b752:	693b      	ldr	r3, [r7, #16]
 801b754:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b758:	683b      	ldr	r3, [r7, #0]
 801b75a:	005b      	lsls	r3, r3, #1
 801b75c:	693a      	ldr	r2, [r7, #16]
 801b75e:	8992      	ldrh	r2, [r2, #12]
 801b760:	fbb3 f0f2 	udiv	r0, r3, r2
 801b764:	fb00 f202 	mul.w	r2, r0, r2
 801b768:	1a9b      	subs	r3, r3, r2
 801b76a:	440b      	add	r3, r1
 801b76c:	4618      	mov	r0, r3
 801b76e:	f7ff fbf9 	bl	801af64 <ld_word>
 801b772:	4603      	mov	r3, r0
 801b774:	617b      	str	r3, [r7, #20]
			break;
 801b776:	e030      	b.n	801b7da <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b778:	693b      	ldr	r3, [r7, #16]
 801b77a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b77c:	693b      	ldr	r3, [r7, #16]
 801b77e:	899b      	ldrh	r3, [r3, #12]
 801b780:	089b      	lsrs	r3, r3, #2
 801b782:	b29b      	uxth	r3, r3
 801b784:	4619      	mov	r1, r3
 801b786:	683b      	ldr	r3, [r7, #0]
 801b788:	fbb3 f3f1 	udiv	r3, r3, r1
 801b78c:	4413      	add	r3, r2
 801b78e:	4619      	mov	r1, r3
 801b790:	6938      	ldr	r0, [r7, #16]
 801b792:	f7ff fe97 	bl	801b4c4 <move_window>
 801b796:	4603      	mov	r3, r0
 801b798:	2b00      	cmp	r3, #0
 801b79a:	d11d      	bne.n	801b7d8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b79c:	693b      	ldr	r3, [r7, #16]
 801b79e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b7a2:	683b      	ldr	r3, [r7, #0]
 801b7a4:	009b      	lsls	r3, r3, #2
 801b7a6:	693a      	ldr	r2, [r7, #16]
 801b7a8:	8992      	ldrh	r2, [r2, #12]
 801b7aa:	fbb3 f0f2 	udiv	r0, r3, r2
 801b7ae:	fb00 f202 	mul.w	r2, r0, r2
 801b7b2:	1a9b      	subs	r3, r3, r2
 801b7b4:	440b      	add	r3, r1
 801b7b6:	4618      	mov	r0, r3
 801b7b8:	f7ff fbec 	bl	801af94 <ld_dword>
 801b7bc:	4603      	mov	r3, r0
 801b7be:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801b7c2:	617b      	str	r3, [r7, #20]
			break;
 801b7c4:	e009      	b.n	801b7da <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b7c6:	2301      	movs	r3, #1
 801b7c8:	617b      	str	r3, [r7, #20]
 801b7ca:	e006      	b.n	801b7da <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b7cc:	bf00      	nop
 801b7ce:	e004      	b.n	801b7da <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b7d0:	bf00      	nop
 801b7d2:	e002      	b.n	801b7da <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b7d4:	bf00      	nop
 801b7d6:	e000      	b.n	801b7da <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b7d8:	bf00      	nop
		}
	}

	return val;
 801b7da:	697b      	ldr	r3, [r7, #20]
}
 801b7dc:	4618      	mov	r0, r3
 801b7de:	3718      	adds	r7, #24
 801b7e0:	46bd      	mov	sp, r7
 801b7e2:	bd80      	pop	{r7, pc}

0801b7e4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b7e4:	b590      	push	{r4, r7, lr}
 801b7e6:	b089      	sub	sp, #36	@ 0x24
 801b7e8:	af00      	add	r7, sp, #0
 801b7ea:	60f8      	str	r0, [r7, #12]
 801b7ec:	60b9      	str	r1, [r7, #8]
 801b7ee:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801b7f0:	2302      	movs	r3, #2
 801b7f2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801b7f4:	68bb      	ldr	r3, [r7, #8]
 801b7f6:	2b01      	cmp	r3, #1
 801b7f8:	f240 8109 	bls.w	801ba0e <put_fat+0x22a>
 801b7fc:	68fb      	ldr	r3, [r7, #12]
 801b7fe:	69db      	ldr	r3, [r3, #28]
 801b800:	68ba      	ldr	r2, [r7, #8]
 801b802:	429a      	cmp	r2, r3
 801b804:	f080 8103 	bcs.w	801ba0e <put_fat+0x22a>
		switch (fs->fs_type) {
 801b808:	68fb      	ldr	r3, [r7, #12]
 801b80a:	781b      	ldrb	r3, [r3, #0]
 801b80c:	2b03      	cmp	r3, #3
 801b80e:	f000 80b6 	beq.w	801b97e <put_fat+0x19a>
 801b812:	2b03      	cmp	r3, #3
 801b814:	f300 80fb 	bgt.w	801ba0e <put_fat+0x22a>
 801b818:	2b01      	cmp	r3, #1
 801b81a:	d003      	beq.n	801b824 <put_fat+0x40>
 801b81c:	2b02      	cmp	r3, #2
 801b81e:	f000 8083 	beq.w	801b928 <put_fat+0x144>
 801b822:	e0f4      	b.n	801ba0e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b824:	68bb      	ldr	r3, [r7, #8]
 801b826:	61bb      	str	r3, [r7, #24]
 801b828:	69bb      	ldr	r3, [r7, #24]
 801b82a:	085b      	lsrs	r3, r3, #1
 801b82c:	69ba      	ldr	r2, [r7, #24]
 801b82e:	4413      	add	r3, r2
 801b830:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b836:	68fb      	ldr	r3, [r7, #12]
 801b838:	899b      	ldrh	r3, [r3, #12]
 801b83a:	4619      	mov	r1, r3
 801b83c:	69bb      	ldr	r3, [r7, #24]
 801b83e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b842:	4413      	add	r3, r2
 801b844:	4619      	mov	r1, r3
 801b846:	68f8      	ldr	r0, [r7, #12]
 801b848:	f7ff fe3c 	bl	801b4c4 <move_window>
 801b84c:	4603      	mov	r3, r0
 801b84e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b850:	7ffb      	ldrb	r3, [r7, #31]
 801b852:	2b00      	cmp	r3, #0
 801b854:	f040 80d4 	bne.w	801ba00 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801b858:	68fb      	ldr	r3, [r7, #12]
 801b85a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b85e:	69bb      	ldr	r3, [r7, #24]
 801b860:	1c5a      	adds	r2, r3, #1
 801b862:	61ba      	str	r2, [r7, #24]
 801b864:	68fa      	ldr	r2, [r7, #12]
 801b866:	8992      	ldrh	r2, [r2, #12]
 801b868:	fbb3 f0f2 	udiv	r0, r3, r2
 801b86c:	fb00 f202 	mul.w	r2, r0, r2
 801b870:	1a9b      	subs	r3, r3, r2
 801b872:	440b      	add	r3, r1
 801b874:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b876:	68bb      	ldr	r3, [r7, #8]
 801b878:	f003 0301 	and.w	r3, r3, #1
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d00d      	beq.n	801b89c <put_fat+0xb8>
 801b880:	697b      	ldr	r3, [r7, #20]
 801b882:	781b      	ldrb	r3, [r3, #0]
 801b884:	b25b      	sxtb	r3, r3
 801b886:	f003 030f 	and.w	r3, r3, #15
 801b88a:	b25a      	sxtb	r2, r3
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	b2db      	uxtb	r3, r3
 801b890:	011b      	lsls	r3, r3, #4
 801b892:	b25b      	sxtb	r3, r3
 801b894:	4313      	orrs	r3, r2
 801b896:	b25b      	sxtb	r3, r3
 801b898:	b2db      	uxtb	r3, r3
 801b89a:	e001      	b.n	801b8a0 <put_fat+0xbc>
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	b2db      	uxtb	r3, r3
 801b8a0:	697a      	ldr	r2, [r7, #20]
 801b8a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b8a4:	68fb      	ldr	r3, [r7, #12]
 801b8a6:	2201      	movs	r2, #1
 801b8a8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b8aa:	68fb      	ldr	r3, [r7, #12]
 801b8ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b8ae:	68fb      	ldr	r3, [r7, #12]
 801b8b0:	899b      	ldrh	r3, [r3, #12]
 801b8b2:	4619      	mov	r1, r3
 801b8b4:	69bb      	ldr	r3, [r7, #24]
 801b8b6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b8ba:	4413      	add	r3, r2
 801b8bc:	4619      	mov	r1, r3
 801b8be:	68f8      	ldr	r0, [r7, #12]
 801b8c0:	f7ff fe00 	bl	801b4c4 <move_window>
 801b8c4:	4603      	mov	r3, r0
 801b8c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b8c8:	7ffb      	ldrb	r3, [r7, #31]
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	f040 809a 	bne.w	801ba04 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801b8d0:	68fb      	ldr	r3, [r7, #12]
 801b8d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b8d6:	68fb      	ldr	r3, [r7, #12]
 801b8d8:	899b      	ldrh	r3, [r3, #12]
 801b8da:	461a      	mov	r2, r3
 801b8dc:	69bb      	ldr	r3, [r7, #24]
 801b8de:	fbb3 f0f2 	udiv	r0, r3, r2
 801b8e2:	fb00 f202 	mul.w	r2, r0, r2
 801b8e6:	1a9b      	subs	r3, r3, r2
 801b8e8:	440b      	add	r3, r1
 801b8ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b8ec:	68bb      	ldr	r3, [r7, #8]
 801b8ee:	f003 0301 	and.w	r3, r3, #1
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d003      	beq.n	801b8fe <put_fat+0x11a>
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	091b      	lsrs	r3, r3, #4
 801b8fa:	b2db      	uxtb	r3, r3
 801b8fc:	e00e      	b.n	801b91c <put_fat+0x138>
 801b8fe:	697b      	ldr	r3, [r7, #20]
 801b900:	781b      	ldrb	r3, [r3, #0]
 801b902:	b25b      	sxtb	r3, r3
 801b904:	f023 030f 	bic.w	r3, r3, #15
 801b908:	b25a      	sxtb	r2, r3
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	0a1b      	lsrs	r3, r3, #8
 801b90e:	b25b      	sxtb	r3, r3
 801b910:	f003 030f 	and.w	r3, r3, #15
 801b914:	b25b      	sxtb	r3, r3
 801b916:	4313      	orrs	r3, r2
 801b918:	b25b      	sxtb	r3, r3
 801b91a:	b2db      	uxtb	r3, r3
 801b91c:	697a      	ldr	r2, [r7, #20]
 801b91e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b920:	68fb      	ldr	r3, [r7, #12]
 801b922:	2201      	movs	r2, #1
 801b924:	70da      	strb	r2, [r3, #3]
			break;
 801b926:	e072      	b.n	801ba0e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b928:	68fb      	ldr	r3, [r7, #12]
 801b92a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b92c:	68fb      	ldr	r3, [r7, #12]
 801b92e:	899b      	ldrh	r3, [r3, #12]
 801b930:	085b      	lsrs	r3, r3, #1
 801b932:	b29b      	uxth	r3, r3
 801b934:	4619      	mov	r1, r3
 801b936:	68bb      	ldr	r3, [r7, #8]
 801b938:	fbb3 f3f1 	udiv	r3, r3, r1
 801b93c:	4413      	add	r3, r2
 801b93e:	4619      	mov	r1, r3
 801b940:	68f8      	ldr	r0, [r7, #12]
 801b942:	f7ff fdbf 	bl	801b4c4 <move_window>
 801b946:	4603      	mov	r3, r0
 801b948:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b94a:	7ffb      	ldrb	r3, [r7, #31]
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d15b      	bne.n	801ba08 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b950:	68fb      	ldr	r3, [r7, #12]
 801b952:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b956:	68bb      	ldr	r3, [r7, #8]
 801b958:	005b      	lsls	r3, r3, #1
 801b95a:	68fa      	ldr	r2, [r7, #12]
 801b95c:	8992      	ldrh	r2, [r2, #12]
 801b95e:	fbb3 f0f2 	udiv	r0, r3, r2
 801b962:	fb00 f202 	mul.w	r2, r0, r2
 801b966:	1a9b      	subs	r3, r3, r2
 801b968:	440b      	add	r3, r1
 801b96a:	687a      	ldr	r2, [r7, #4]
 801b96c:	b292      	uxth	r2, r2
 801b96e:	4611      	mov	r1, r2
 801b970:	4618      	mov	r0, r3
 801b972:	f7ff fb32 	bl	801afda <st_word>
			fs->wflag = 1;
 801b976:	68fb      	ldr	r3, [r7, #12]
 801b978:	2201      	movs	r2, #1
 801b97a:	70da      	strb	r2, [r3, #3]
			break;
 801b97c:	e047      	b.n	801ba0e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b97e:	68fb      	ldr	r3, [r7, #12]
 801b980:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b982:	68fb      	ldr	r3, [r7, #12]
 801b984:	899b      	ldrh	r3, [r3, #12]
 801b986:	089b      	lsrs	r3, r3, #2
 801b988:	b29b      	uxth	r3, r3
 801b98a:	4619      	mov	r1, r3
 801b98c:	68bb      	ldr	r3, [r7, #8]
 801b98e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b992:	4413      	add	r3, r2
 801b994:	4619      	mov	r1, r3
 801b996:	68f8      	ldr	r0, [r7, #12]
 801b998:	f7ff fd94 	bl	801b4c4 <move_window>
 801b99c:	4603      	mov	r3, r0
 801b99e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b9a0:	7ffb      	ldrb	r3, [r7, #31]
 801b9a2:	2b00      	cmp	r3, #0
 801b9a4:	d132      	bne.n	801ba0c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801b9ac:	68fb      	ldr	r3, [r7, #12]
 801b9ae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b9b2:	68bb      	ldr	r3, [r7, #8]
 801b9b4:	009b      	lsls	r3, r3, #2
 801b9b6:	68fa      	ldr	r2, [r7, #12]
 801b9b8:	8992      	ldrh	r2, [r2, #12]
 801b9ba:	fbb3 f0f2 	udiv	r0, r3, r2
 801b9be:	fb00 f202 	mul.w	r2, r0, r2
 801b9c2:	1a9b      	subs	r3, r3, r2
 801b9c4:	440b      	add	r3, r1
 801b9c6:	4618      	mov	r0, r3
 801b9c8:	f7ff fae4 	bl	801af94 <ld_dword>
 801b9cc:	4603      	mov	r3, r0
 801b9ce:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801b9d2:	4323      	orrs	r3, r4
 801b9d4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801b9d6:	68fb      	ldr	r3, [r7, #12]
 801b9d8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b9dc:	68bb      	ldr	r3, [r7, #8]
 801b9de:	009b      	lsls	r3, r3, #2
 801b9e0:	68fa      	ldr	r2, [r7, #12]
 801b9e2:	8992      	ldrh	r2, [r2, #12]
 801b9e4:	fbb3 f0f2 	udiv	r0, r3, r2
 801b9e8:	fb00 f202 	mul.w	r2, r0, r2
 801b9ec:	1a9b      	subs	r3, r3, r2
 801b9ee:	440b      	add	r3, r1
 801b9f0:	6879      	ldr	r1, [r7, #4]
 801b9f2:	4618      	mov	r0, r3
 801b9f4:	f7ff fb0c 	bl	801b010 <st_dword>
			fs->wflag = 1;
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	2201      	movs	r2, #1
 801b9fc:	70da      	strb	r2, [r3, #3]
			break;
 801b9fe:	e006      	b.n	801ba0e <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba00:	bf00      	nop
 801ba02:	e004      	b.n	801ba0e <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba04:	bf00      	nop
 801ba06:	e002      	b.n	801ba0e <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba08:	bf00      	nop
 801ba0a:	e000      	b.n	801ba0e <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba0c:	bf00      	nop
		}
	}
	return res;
 801ba0e:	7ffb      	ldrb	r3, [r7, #31]
}
 801ba10:	4618      	mov	r0, r3
 801ba12:	3724      	adds	r7, #36	@ 0x24
 801ba14:	46bd      	mov	sp, r7
 801ba16:	bd90      	pop	{r4, r7, pc}

0801ba18 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801ba18:	b580      	push	{r7, lr}
 801ba1a:	b088      	sub	sp, #32
 801ba1c:	af00      	add	r7, sp, #0
 801ba1e:	60f8      	str	r0, [r7, #12]
 801ba20:	60b9      	str	r1, [r7, #8]
 801ba22:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801ba24:	2300      	movs	r3, #0
 801ba26:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801ba28:	68fb      	ldr	r3, [r7, #12]
 801ba2a:	681b      	ldr	r3, [r3, #0]
 801ba2c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801ba2e:	68bb      	ldr	r3, [r7, #8]
 801ba30:	2b01      	cmp	r3, #1
 801ba32:	d904      	bls.n	801ba3e <remove_chain+0x26>
 801ba34:	69bb      	ldr	r3, [r7, #24]
 801ba36:	69db      	ldr	r3, [r3, #28]
 801ba38:	68ba      	ldr	r2, [r7, #8]
 801ba3a:	429a      	cmp	r2, r3
 801ba3c:	d301      	bcc.n	801ba42 <remove_chain+0x2a>
 801ba3e:	2302      	movs	r3, #2
 801ba40:	e04b      	b.n	801bada <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	d00c      	beq.n	801ba62 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801ba48:	f04f 32ff 	mov.w	r2, #4294967295
 801ba4c:	6879      	ldr	r1, [r7, #4]
 801ba4e:	69b8      	ldr	r0, [r7, #24]
 801ba50:	f7ff fec8 	bl	801b7e4 <put_fat>
 801ba54:	4603      	mov	r3, r0
 801ba56:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801ba58:	7ffb      	ldrb	r3, [r7, #31]
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	d001      	beq.n	801ba62 <remove_chain+0x4a>
 801ba5e:	7ffb      	ldrb	r3, [r7, #31]
 801ba60:	e03b      	b.n	801bada <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801ba62:	68b9      	ldr	r1, [r7, #8]
 801ba64:	68f8      	ldr	r0, [r7, #12]
 801ba66:	f7ff fdea 	bl	801b63e <get_fat>
 801ba6a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801ba6c:	697b      	ldr	r3, [r7, #20]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d031      	beq.n	801bad6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801ba72:	697b      	ldr	r3, [r7, #20]
 801ba74:	2b01      	cmp	r3, #1
 801ba76:	d101      	bne.n	801ba7c <remove_chain+0x64>
 801ba78:	2302      	movs	r3, #2
 801ba7a:	e02e      	b.n	801bada <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801ba7c:	697b      	ldr	r3, [r7, #20]
 801ba7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba82:	d101      	bne.n	801ba88 <remove_chain+0x70>
 801ba84:	2301      	movs	r3, #1
 801ba86:	e028      	b.n	801bada <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801ba88:	2200      	movs	r2, #0
 801ba8a:	68b9      	ldr	r1, [r7, #8]
 801ba8c:	69b8      	ldr	r0, [r7, #24]
 801ba8e:	f7ff fea9 	bl	801b7e4 <put_fat>
 801ba92:	4603      	mov	r3, r0
 801ba94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801ba96:	7ffb      	ldrb	r3, [r7, #31]
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	d001      	beq.n	801baa0 <remove_chain+0x88>
 801ba9c:	7ffb      	ldrb	r3, [r7, #31]
 801ba9e:	e01c      	b.n	801bada <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801baa0:	69bb      	ldr	r3, [r7, #24]
 801baa2:	699a      	ldr	r2, [r3, #24]
 801baa4:	69bb      	ldr	r3, [r7, #24]
 801baa6:	69db      	ldr	r3, [r3, #28]
 801baa8:	3b02      	subs	r3, #2
 801baaa:	429a      	cmp	r2, r3
 801baac:	d20b      	bcs.n	801bac6 <remove_chain+0xae>
			fs->free_clst++;
 801baae:	69bb      	ldr	r3, [r7, #24]
 801bab0:	699b      	ldr	r3, [r3, #24]
 801bab2:	1c5a      	adds	r2, r3, #1
 801bab4:	69bb      	ldr	r3, [r7, #24]
 801bab6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801bab8:	69bb      	ldr	r3, [r7, #24]
 801baba:	791b      	ldrb	r3, [r3, #4]
 801babc:	f043 0301 	orr.w	r3, r3, #1
 801bac0:	b2da      	uxtb	r2, r3
 801bac2:	69bb      	ldr	r3, [r7, #24]
 801bac4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801bac6:	697b      	ldr	r3, [r7, #20]
 801bac8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801baca:	69bb      	ldr	r3, [r7, #24]
 801bacc:	69db      	ldr	r3, [r3, #28]
 801bace:	68ba      	ldr	r2, [r7, #8]
 801bad0:	429a      	cmp	r2, r3
 801bad2:	d3c6      	bcc.n	801ba62 <remove_chain+0x4a>
 801bad4:	e000      	b.n	801bad8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801bad6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801bad8:	2300      	movs	r3, #0
}
 801bada:	4618      	mov	r0, r3
 801badc:	3720      	adds	r7, #32
 801bade:	46bd      	mov	sp, r7
 801bae0:	bd80      	pop	{r7, pc}

0801bae2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801bae2:	b580      	push	{r7, lr}
 801bae4:	b088      	sub	sp, #32
 801bae6:	af00      	add	r7, sp, #0
 801bae8:	6078      	str	r0, [r7, #4]
 801baea:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801baf2:	683b      	ldr	r3, [r7, #0]
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	d10d      	bne.n	801bb14 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801baf8:	693b      	ldr	r3, [r7, #16]
 801bafa:	695b      	ldr	r3, [r3, #20]
 801bafc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801bafe:	69bb      	ldr	r3, [r7, #24]
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d004      	beq.n	801bb0e <create_chain+0x2c>
 801bb04:	693b      	ldr	r3, [r7, #16]
 801bb06:	69db      	ldr	r3, [r3, #28]
 801bb08:	69ba      	ldr	r2, [r7, #24]
 801bb0a:	429a      	cmp	r2, r3
 801bb0c:	d31b      	bcc.n	801bb46 <create_chain+0x64>
 801bb0e:	2301      	movs	r3, #1
 801bb10:	61bb      	str	r3, [r7, #24]
 801bb12:	e018      	b.n	801bb46 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801bb14:	6839      	ldr	r1, [r7, #0]
 801bb16:	6878      	ldr	r0, [r7, #4]
 801bb18:	f7ff fd91 	bl	801b63e <get_fat>
 801bb1c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801bb1e:	68fb      	ldr	r3, [r7, #12]
 801bb20:	2b01      	cmp	r3, #1
 801bb22:	d801      	bhi.n	801bb28 <create_chain+0x46>
 801bb24:	2301      	movs	r3, #1
 801bb26:	e070      	b.n	801bc0a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801bb28:	68fb      	ldr	r3, [r7, #12]
 801bb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb2e:	d101      	bne.n	801bb34 <create_chain+0x52>
 801bb30:	68fb      	ldr	r3, [r7, #12]
 801bb32:	e06a      	b.n	801bc0a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801bb34:	693b      	ldr	r3, [r7, #16]
 801bb36:	69db      	ldr	r3, [r3, #28]
 801bb38:	68fa      	ldr	r2, [r7, #12]
 801bb3a:	429a      	cmp	r2, r3
 801bb3c:	d201      	bcs.n	801bb42 <create_chain+0x60>
 801bb3e:	68fb      	ldr	r3, [r7, #12]
 801bb40:	e063      	b.n	801bc0a <create_chain+0x128>
		scl = clst;
 801bb42:	683b      	ldr	r3, [r7, #0]
 801bb44:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801bb46:	69bb      	ldr	r3, [r7, #24]
 801bb48:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801bb4a:	69fb      	ldr	r3, [r7, #28]
 801bb4c:	3301      	adds	r3, #1
 801bb4e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801bb50:	693b      	ldr	r3, [r7, #16]
 801bb52:	69db      	ldr	r3, [r3, #28]
 801bb54:	69fa      	ldr	r2, [r7, #28]
 801bb56:	429a      	cmp	r2, r3
 801bb58:	d307      	bcc.n	801bb6a <create_chain+0x88>
				ncl = 2;
 801bb5a:	2302      	movs	r3, #2
 801bb5c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801bb5e:	69fa      	ldr	r2, [r7, #28]
 801bb60:	69bb      	ldr	r3, [r7, #24]
 801bb62:	429a      	cmp	r2, r3
 801bb64:	d901      	bls.n	801bb6a <create_chain+0x88>
 801bb66:	2300      	movs	r3, #0
 801bb68:	e04f      	b.n	801bc0a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801bb6a:	69f9      	ldr	r1, [r7, #28]
 801bb6c:	6878      	ldr	r0, [r7, #4]
 801bb6e:	f7ff fd66 	bl	801b63e <get_fat>
 801bb72:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801bb74:	68fb      	ldr	r3, [r7, #12]
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	d00e      	beq.n	801bb98 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801bb7a:	68fb      	ldr	r3, [r7, #12]
 801bb7c:	2b01      	cmp	r3, #1
 801bb7e:	d003      	beq.n	801bb88 <create_chain+0xa6>
 801bb80:	68fb      	ldr	r3, [r7, #12]
 801bb82:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb86:	d101      	bne.n	801bb8c <create_chain+0xaa>
 801bb88:	68fb      	ldr	r3, [r7, #12]
 801bb8a:	e03e      	b.n	801bc0a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801bb8c:	69fa      	ldr	r2, [r7, #28]
 801bb8e:	69bb      	ldr	r3, [r7, #24]
 801bb90:	429a      	cmp	r2, r3
 801bb92:	d1da      	bne.n	801bb4a <create_chain+0x68>
 801bb94:	2300      	movs	r3, #0
 801bb96:	e038      	b.n	801bc0a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801bb98:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801bb9a:	f04f 32ff 	mov.w	r2, #4294967295
 801bb9e:	69f9      	ldr	r1, [r7, #28]
 801bba0:	6938      	ldr	r0, [r7, #16]
 801bba2:	f7ff fe1f 	bl	801b7e4 <put_fat>
 801bba6:	4603      	mov	r3, r0
 801bba8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801bbaa:	7dfb      	ldrb	r3, [r7, #23]
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d109      	bne.n	801bbc4 <create_chain+0xe2>
 801bbb0:	683b      	ldr	r3, [r7, #0]
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	d006      	beq.n	801bbc4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801bbb6:	69fa      	ldr	r2, [r7, #28]
 801bbb8:	6839      	ldr	r1, [r7, #0]
 801bbba:	6938      	ldr	r0, [r7, #16]
 801bbbc:	f7ff fe12 	bl	801b7e4 <put_fat>
 801bbc0:	4603      	mov	r3, r0
 801bbc2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801bbc4:	7dfb      	ldrb	r3, [r7, #23]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d116      	bne.n	801bbf8 <create_chain+0x116>
		fs->last_clst = ncl;
 801bbca:	693b      	ldr	r3, [r7, #16]
 801bbcc:	69fa      	ldr	r2, [r7, #28]
 801bbce:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801bbd0:	693b      	ldr	r3, [r7, #16]
 801bbd2:	699a      	ldr	r2, [r3, #24]
 801bbd4:	693b      	ldr	r3, [r7, #16]
 801bbd6:	69db      	ldr	r3, [r3, #28]
 801bbd8:	3b02      	subs	r3, #2
 801bbda:	429a      	cmp	r2, r3
 801bbdc:	d804      	bhi.n	801bbe8 <create_chain+0x106>
 801bbde:	693b      	ldr	r3, [r7, #16]
 801bbe0:	699b      	ldr	r3, [r3, #24]
 801bbe2:	1e5a      	subs	r2, r3, #1
 801bbe4:	693b      	ldr	r3, [r7, #16]
 801bbe6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801bbe8:	693b      	ldr	r3, [r7, #16]
 801bbea:	791b      	ldrb	r3, [r3, #4]
 801bbec:	f043 0301 	orr.w	r3, r3, #1
 801bbf0:	b2da      	uxtb	r2, r3
 801bbf2:	693b      	ldr	r3, [r7, #16]
 801bbf4:	711a      	strb	r2, [r3, #4]
 801bbf6:	e007      	b.n	801bc08 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801bbf8:	7dfb      	ldrb	r3, [r7, #23]
 801bbfa:	2b01      	cmp	r3, #1
 801bbfc:	d102      	bne.n	801bc04 <create_chain+0x122>
 801bbfe:	f04f 33ff 	mov.w	r3, #4294967295
 801bc02:	e000      	b.n	801bc06 <create_chain+0x124>
 801bc04:	2301      	movs	r3, #1
 801bc06:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801bc08:	69fb      	ldr	r3, [r7, #28]
}
 801bc0a:	4618      	mov	r0, r3
 801bc0c:	3720      	adds	r7, #32
 801bc0e:	46bd      	mov	sp, r7
 801bc10:	bd80      	pop	{r7, pc}

0801bc12 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801bc12:	b480      	push	{r7}
 801bc14:	b087      	sub	sp, #28
 801bc16:	af00      	add	r7, sp, #0
 801bc18:	6078      	str	r0, [r7, #4]
 801bc1a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	681b      	ldr	r3, [r3, #0]
 801bc20:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bc26:	3304      	adds	r3, #4
 801bc28:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801bc2a:	68fb      	ldr	r3, [r7, #12]
 801bc2c:	899b      	ldrh	r3, [r3, #12]
 801bc2e:	461a      	mov	r2, r3
 801bc30:	683b      	ldr	r3, [r7, #0]
 801bc32:	fbb3 f3f2 	udiv	r3, r3, r2
 801bc36:	68fa      	ldr	r2, [r7, #12]
 801bc38:	8952      	ldrh	r2, [r2, #10]
 801bc3a:	fbb3 f3f2 	udiv	r3, r3, r2
 801bc3e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801bc40:	693b      	ldr	r3, [r7, #16]
 801bc42:	1d1a      	adds	r2, r3, #4
 801bc44:	613a      	str	r2, [r7, #16]
 801bc46:	681b      	ldr	r3, [r3, #0]
 801bc48:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801bc4a:	68bb      	ldr	r3, [r7, #8]
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	d101      	bne.n	801bc54 <clmt_clust+0x42>
 801bc50:	2300      	movs	r3, #0
 801bc52:	e010      	b.n	801bc76 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801bc54:	697a      	ldr	r2, [r7, #20]
 801bc56:	68bb      	ldr	r3, [r7, #8]
 801bc58:	429a      	cmp	r2, r3
 801bc5a:	d307      	bcc.n	801bc6c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801bc5c:	697a      	ldr	r2, [r7, #20]
 801bc5e:	68bb      	ldr	r3, [r7, #8]
 801bc60:	1ad3      	subs	r3, r2, r3
 801bc62:	617b      	str	r3, [r7, #20]
 801bc64:	693b      	ldr	r3, [r7, #16]
 801bc66:	3304      	adds	r3, #4
 801bc68:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801bc6a:	e7e9      	b.n	801bc40 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801bc6c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801bc6e:	693b      	ldr	r3, [r7, #16]
 801bc70:	681a      	ldr	r2, [r3, #0]
 801bc72:	697b      	ldr	r3, [r7, #20]
 801bc74:	4413      	add	r3, r2
}
 801bc76:	4618      	mov	r0, r3
 801bc78:	371c      	adds	r7, #28
 801bc7a:	46bd      	mov	sp, r7
 801bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc80:	4770      	bx	lr

0801bc82 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801bc82:	b580      	push	{r7, lr}
 801bc84:	b086      	sub	sp, #24
 801bc86:	af00      	add	r7, sp, #0
 801bc88:	6078      	str	r0, [r7, #4]
 801bc8a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	681b      	ldr	r3, [r3, #0]
 801bc90:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801bc92:	683b      	ldr	r3, [r7, #0]
 801bc94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801bc98:	d204      	bcs.n	801bca4 <dir_sdi+0x22>
 801bc9a:	683b      	ldr	r3, [r7, #0]
 801bc9c:	f003 031f 	and.w	r3, r3, #31
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	d001      	beq.n	801bca8 <dir_sdi+0x26>
		return FR_INT_ERR;
 801bca4:	2302      	movs	r3, #2
 801bca6:	e071      	b.n	801bd8c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	683a      	ldr	r2, [r7, #0]
 801bcac:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	689b      	ldr	r3, [r3, #8]
 801bcb2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801bcb4:	697b      	ldr	r3, [r7, #20]
 801bcb6:	2b00      	cmp	r3, #0
 801bcb8:	d106      	bne.n	801bcc8 <dir_sdi+0x46>
 801bcba:	693b      	ldr	r3, [r7, #16]
 801bcbc:	781b      	ldrb	r3, [r3, #0]
 801bcbe:	2b02      	cmp	r3, #2
 801bcc0:	d902      	bls.n	801bcc8 <dir_sdi+0x46>
		clst = fs->dirbase;
 801bcc2:	693b      	ldr	r3, [r7, #16]
 801bcc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bcc6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801bcc8:	697b      	ldr	r3, [r7, #20]
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	d10c      	bne.n	801bce8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801bcce:	683b      	ldr	r3, [r7, #0]
 801bcd0:	095b      	lsrs	r3, r3, #5
 801bcd2:	693a      	ldr	r2, [r7, #16]
 801bcd4:	8912      	ldrh	r2, [r2, #8]
 801bcd6:	4293      	cmp	r3, r2
 801bcd8:	d301      	bcc.n	801bcde <dir_sdi+0x5c>
 801bcda:	2302      	movs	r3, #2
 801bcdc:	e056      	b.n	801bd8c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801bcde:	693b      	ldr	r3, [r7, #16]
 801bce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	61da      	str	r2, [r3, #28]
 801bce6:	e02d      	b.n	801bd44 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801bce8:	693b      	ldr	r3, [r7, #16]
 801bcea:	895b      	ldrh	r3, [r3, #10]
 801bcec:	461a      	mov	r2, r3
 801bcee:	693b      	ldr	r3, [r7, #16]
 801bcf0:	899b      	ldrh	r3, [r3, #12]
 801bcf2:	fb02 f303 	mul.w	r3, r2, r3
 801bcf6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bcf8:	e019      	b.n	801bd2e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	6979      	ldr	r1, [r7, #20]
 801bcfe:	4618      	mov	r0, r3
 801bd00:	f7ff fc9d 	bl	801b63e <get_fat>
 801bd04:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801bd06:	697b      	ldr	r3, [r7, #20]
 801bd08:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd0c:	d101      	bne.n	801bd12 <dir_sdi+0x90>
 801bd0e:	2301      	movs	r3, #1
 801bd10:	e03c      	b.n	801bd8c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801bd12:	697b      	ldr	r3, [r7, #20]
 801bd14:	2b01      	cmp	r3, #1
 801bd16:	d904      	bls.n	801bd22 <dir_sdi+0xa0>
 801bd18:	693b      	ldr	r3, [r7, #16]
 801bd1a:	69db      	ldr	r3, [r3, #28]
 801bd1c:	697a      	ldr	r2, [r7, #20]
 801bd1e:	429a      	cmp	r2, r3
 801bd20:	d301      	bcc.n	801bd26 <dir_sdi+0xa4>
 801bd22:	2302      	movs	r3, #2
 801bd24:	e032      	b.n	801bd8c <dir_sdi+0x10a>
			ofs -= csz;
 801bd26:	683a      	ldr	r2, [r7, #0]
 801bd28:	68fb      	ldr	r3, [r7, #12]
 801bd2a:	1ad3      	subs	r3, r2, r3
 801bd2c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bd2e:	683a      	ldr	r2, [r7, #0]
 801bd30:	68fb      	ldr	r3, [r7, #12]
 801bd32:	429a      	cmp	r2, r3
 801bd34:	d2e1      	bcs.n	801bcfa <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801bd36:	6979      	ldr	r1, [r7, #20]
 801bd38:	6938      	ldr	r0, [r7, #16]
 801bd3a:	f7ff fc61 	bl	801b600 <clust2sect>
 801bd3e:	4602      	mov	r2, r0
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	697a      	ldr	r2, [r7, #20]
 801bd48:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	69db      	ldr	r3, [r3, #28]
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	d101      	bne.n	801bd56 <dir_sdi+0xd4>
 801bd52:	2302      	movs	r3, #2
 801bd54:	e01a      	b.n	801bd8c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	69da      	ldr	r2, [r3, #28]
 801bd5a:	693b      	ldr	r3, [r7, #16]
 801bd5c:	899b      	ldrh	r3, [r3, #12]
 801bd5e:	4619      	mov	r1, r3
 801bd60:	683b      	ldr	r3, [r7, #0]
 801bd62:	fbb3 f3f1 	udiv	r3, r3, r1
 801bd66:	441a      	add	r2, r3
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801bd6c:	693b      	ldr	r3, [r7, #16]
 801bd6e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bd72:	693b      	ldr	r3, [r7, #16]
 801bd74:	899b      	ldrh	r3, [r3, #12]
 801bd76:	461a      	mov	r2, r3
 801bd78:	683b      	ldr	r3, [r7, #0]
 801bd7a:	fbb3 f0f2 	udiv	r0, r3, r2
 801bd7e:	fb00 f202 	mul.w	r2, r0, r2
 801bd82:	1a9b      	subs	r3, r3, r2
 801bd84:	18ca      	adds	r2, r1, r3
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bd8a:	2300      	movs	r3, #0
}
 801bd8c:	4618      	mov	r0, r3
 801bd8e:	3718      	adds	r7, #24
 801bd90:	46bd      	mov	sp, r7
 801bd92:	bd80      	pop	{r7, pc}

0801bd94 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801bd94:	b580      	push	{r7, lr}
 801bd96:	b086      	sub	sp, #24
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	6078      	str	r0, [r7, #4]
 801bd9c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	695b      	ldr	r3, [r3, #20]
 801bda8:	3320      	adds	r3, #32
 801bdaa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	69db      	ldr	r3, [r3, #28]
 801bdb0:	2b00      	cmp	r3, #0
 801bdb2:	d003      	beq.n	801bdbc <dir_next+0x28>
 801bdb4:	68bb      	ldr	r3, [r7, #8]
 801bdb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801bdba:	d301      	bcc.n	801bdc0 <dir_next+0x2c>
 801bdbc:	2304      	movs	r3, #4
 801bdbe:	e0bb      	b.n	801bf38 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801bdc0:	68fb      	ldr	r3, [r7, #12]
 801bdc2:	899b      	ldrh	r3, [r3, #12]
 801bdc4:	461a      	mov	r2, r3
 801bdc6:	68bb      	ldr	r3, [r7, #8]
 801bdc8:	fbb3 f1f2 	udiv	r1, r3, r2
 801bdcc:	fb01 f202 	mul.w	r2, r1, r2
 801bdd0:	1a9b      	subs	r3, r3, r2
 801bdd2:	2b00      	cmp	r3, #0
 801bdd4:	f040 809d 	bne.w	801bf12 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	69db      	ldr	r3, [r3, #28]
 801bddc:	1c5a      	adds	r2, r3, #1
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	699b      	ldr	r3, [r3, #24]
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	d10b      	bne.n	801be02 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801bdea:	68bb      	ldr	r3, [r7, #8]
 801bdec:	095b      	lsrs	r3, r3, #5
 801bdee:	68fa      	ldr	r2, [r7, #12]
 801bdf0:	8912      	ldrh	r2, [r2, #8]
 801bdf2:	4293      	cmp	r3, r2
 801bdf4:	f0c0 808d 	bcc.w	801bf12 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	2200      	movs	r2, #0
 801bdfc:	61da      	str	r2, [r3, #28]
 801bdfe:	2304      	movs	r3, #4
 801be00:	e09a      	b.n	801bf38 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801be02:	68fb      	ldr	r3, [r7, #12]
 801be04:	899b      	ldrh	r3, [r3, #12]
 801be06:	461a      	mov	r2, r3
 801be08:	68bb      	ldr	r3, [r7, #8]
 801be0a:	fbb3 f3f2 	udiv	r3, r3, r2
 801be0e:	68fa      	ldr	r2, [r7, #12]
 801be10:	8952      	ldrh	r2, [r2, #10]
 801be12:	3a01      	subs	r2, #1
 801be14:	4013      	ands	r3, r2
 801be16:	2b00      	cmp	r3, #0
 801be18:	d17b      	bne.n	801bf12 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801be1a:	687a      	ldr	r2, [r7, #4]
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	699b      	ldr	r3, [r3, #24]
 801be20:	4619      	mov	r1, r3
 801be22:	4610      	mov	r0, r2
 801be24:	f7ff fc0b 	bl	801b63e <get_fat>
 801be28:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801be2a:	697b      	ldr	r3, [r7, #20]
 801be2c:	2b01      	cmp	r3, #1
 801be2e:	d801      	bhi.n	801be34 <dir_next+0xa0>
 801be30:	2302      	movs	r3, #2
 801be32:	e081      	b.n	801bf38 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801be34:	697b      	ldr	r3, [r7, #20]
 801be36:	f1b3 3fff 	cmp.w	r3, #4294967295
 801be3a:	d101      	bne.n	801be40 <dir_next+0xac>
 801be3c:	2301      	movs	r3, #1
 801be3e:	e07b      	b.n	801bf38 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801be40:	68fb      	ldr	r3, [r7, #12]
 801be42:	69db      	ldr	r3, [r3, #28]
 801be44:	697a      	ldr	r2, [r7, #20]
 801be46:	429a      	cmp	r2, r3
 801be48:	d359      	bcc.n	801befe <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801be4a:	683b      	ldr	r3, [r7, #0]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d104      	bne.n	801be5a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	2200      	movs	r2, #0
 801be54:	61da      	str	r2, [r3, #28]
 801be56:	2304      	movs	r3, #4
 801be58:	e06e      	b.n	801bf38 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801be5a:	687a      	ldr	r2, [r7, #4]
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	699b      	ldr	r3, [r3, #24]
 801be60:	4619      	mov	r1, r3
 801be62:	4610      	mov	r0, r2
 801be64:	f7ff fe3d 	bl	801bae2 <create_chain>
 801be68:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801be6a:	697b      	ldr	r3, [r7, #20]
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d101      	bne.n	801be74 <dir_next+0xe0>
 801be70:	2307      	movs	r3, #7
 801be72:	e061      	b.n	801bf38 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801be74:	697b      	ldr	r3, [r7, #20]
 801be76:	2b01      	cmp	r3, #1
 801be78:	d101      	bne.n	801be7e <dir_next+0xea>
 801be7a:	2302      	movs	r3, #2
 801be7c:	e05c      	b.n	801bf38 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801be7e:	697b      	ldr	r3, [r7, #20]
 801be80:	f1b3 3fff 	cmp.w	r3, #4294967295
 801be84:	d101      	bne.n	801be8a <dir_next+0xf6>
 801be86:	2301      	movs	r3, #1
 801be88:	e056      	b.n	801bf38 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801be8a:	68f8      	ldr	r0, [r7, #12]
 801be8c:	f7ff fad6 	bl	801b43c <sync_window>
 801be90:	4603      	mov	r3, r0
 801be92:	2b00      	cmp	r3, #0
 801be94:	d001      	beq.n	801be9a <dir_next+0x106>
 801be96:	2301      	movs	r3, #1
 801be98:	e04e      	b.n	801bf38 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801bea0:	68fb      	ldr	r3, [r7, #12]
 801bea2:	899b      	ldrh	r3, [r3, #12]
 801bea4:	461a      	mov	r2, r3
 801bea6:	2100      	movs	r1, #0
 801bea8:	f7ff f8ff 	bl	801b0aa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801beac:	2300      	movs	r3, #0
 801beae:	613b      	str	r3, [r7, #16]
 801beb0:	6979      	ldr	r1, [r7, #20]
 801beb2:	68f8      	ldr	r0, [r7, #12]
 801beb4:	f7ff fba4 	bl	801b600 <clust2sect>
 801beb8:	4602      	mov	r2, r0
 801beba:	68fb      	ldr	r3, [r7, #12]
 801bebc:	635a      	str	r2, [r3, #52]	@ 0x34
 801bebe:	e012      	b.n	801bee6 <dir_next+0x152>
						fs->wflag = 1;
 801bec0:	68fb      	ldr	r3, [r7, #12]
 801bec2:	2201      	movs	r2, #1
 801bec4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801bec6:	68f8      	ldr	r0, [r7, #12]
 801bec8:	f7ff fab8 	bl	801b43c <sync_window>
 801becc:	4603      	mov	r3, r0
 801bece:	2b00      	cmp	r3, #0
 801bed0:	d001      	beq.n	801bed6 <dir_next+0x142>
 801bed2:	2301      	movs	r3, #1
 801bed4:	e030      	b.n	801bf38 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bed6:	693b      	ldr	r3, [r7, #16]
 801bed8:	3301      	adds	r3, #1
 801beda:	613b      	str	r3, [r7, #16]
 801bedc:	68fb      	ldr	r3, [r7, #12]
 801bede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bee0:	1c5a      	adds	r2, r3, #1
 801bee2:	68fb      	ldr	r3, [r7, #12]
 801bee4:	635a      	str	r2, [r3, #52]	@ 0x34
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	895b      	ldrh	r3, [r3, #10]
 801beea:	461a      	mov	r2, r3
 801beec:	693b      	ldr	r3, [r7, #16]
 801beee:	4293      	cmp	r3, r2
 801bef0:	d3e6      	bcc.n	801bec0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801bef2:	68fb      	ldr	r3, [r7, #12]
 801bef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bef6:	693b      	ldr	r3, [r7, #16]
 801bef8:	1ad2      	subs	r2, r2, r3
 801befa:	68fb      	ldr	r3, [r7, #12]
 801befc:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	697a      	ldr	r2, [r7, #20]
 801bf02:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801bf04:	6979      	ldr	r1, [r7, #20]
 801bf06:	68f8      	ldr	r0, [r7, #12]
 801bf08:	f7ff fb7a 	bl	801b600 <clust2sect>
 801bf0c:	4602      	mov	r2, r0
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	68ba      	ldr	r2, [r7, #8]
 801bf16:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801bf18:	68fb      	ldr	r3, [r7, #12]
 801bf1a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bf1e:	68fb      	ldr	r3, [r7, #12]
 801bf20:	899b      	ldrh	r3, [r3, #12]
 801bf22:	461a      	mov	r2, r3
 801bf24:	68bb      	ldr	r3, [r7, #8]
 801bf26:	fbb3 f0f2 	udiv	r0, r3, r2
 801bf2a:	fb00 f202 	mul.w	r2, r0, r2
 801bf2e:	1a9b      	subs	r3, r3, r2
 801bf30:	18ca      	adds	r2, r1, r3
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bf36:	2300      	movs	r3, #0
}
 801bf38:	4618      	mov	r0, r3
 801bf3a:	3718      	adds	r7, #24
 801bf3c:	46bd      	mov	sp, r7
 801bf3e:	bd80      	pop	{r7, pc}

0801bf40 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801bf40:	b580      	push	{r7, lr}
 801bf42:	b086      	sub	sp, #24
 801bf44:	af00      	add	r7, sp, #0
 801bf46:	6078      	str	r0, [r7, #4]
 801bf48:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801bf50:	2100      	movs	r1, #0
 801bf52:	6878      	ldr	r0, [r7, #4]
 801bf54:	f7ff fe95 	bl	801bc82 <dir_sdi>
 801bf58:	4603      	mov	r3, r0
 801bf5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bf5c:	7dfb      	ldrb	r3, [r7, #23]
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	d12b      	bne.n	801bfba <dir_alloc+0x7a>
		n = 0;
 801bf62:	2300      	movs	r3, #0
 801bf64:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	69db      	ldr	r3, [r3, #28]
 801bf6a:	4619      	mov	r1, r3
 801bf6c:	68f8      	ldr	r0, [r7, #12]
 801bf6e:	f7ff faa9 	bl	801b4c4 <move_window>
 801bf72:	4603      	mov	r3, r0
 801bf74:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801bf76:	7dfb      	ldrb	r3, [r7, #23]
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	d11d      	bne.n	801bfb8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	6a1b      	ldr	r3, [r3, #32]
 801bf80:	781b      	ldrb	r3, [r3, #0]
 801bf82:	2be5      	cmp	r3, #229	@ 0xe5
 801bf84:	d004      	beq.n	801bf90 <dir_alloc+0x50>
 801bf86:	687b      	ldr	r3, [r7, #4]
 801bf88:	6a1b      	ldr	r3, [r3, #32]
 801bf8a:	781b      	ldrb	r3, [r3, #0]
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d107      	bne.n	801bfa0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801bf90:	693b      	ldr	r3, [r7, #16]
 801bf92:	3301      	adds	r3, #1
 801bf94:	613b      	str	r3, [r7, #16]
 801bf96:	693a      	ldr	r2, [r7, #16]
 801bf98:	683b      	ldr	r3, [r7, #0]
 801bf9a:	429a      	cmp	r2, r3
 801bf9c:	d102      	bne.n	801bfa4 <dir_alloc+0x64>
 801bf9e:	e00c      	b.n	801bfba <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801bfa0:	2300      	movs	r3, #0
 801bfa2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801bfa4:	2101      	movs	r1, #1
 801bfa6:	6878      	ldr	r0, [r7, #4]
 801bfa8:	f7ff fef4 	bl	801bd94 <dir_next>
 801bfac:	4603      	mov	r3, r0
 801bfae:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801bfb0:	7dfb      	ldrb	r3, [r7, #23]
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d0d7      	beq.n	801bf66 <dir_alloc+0x26>
 801bfb6:	e000      	b.n	801bfba <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801bfb8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801bfba:	7dfb      	ldrb	r3, [r7, #23]
 801bfbc:	2b04      	cmp	r3, #4
 801bfbe:	d101      	bne.n	801bfc4 <dir_alloc+0x84>
 801bfc0:	2307      	movs	r3, #7
 801bfc2:	75fb      	strb	r3, [r7, #23]
	return res;
 801bfc4:	7dfb      	ldrb	r3, [r7, #23]
}
 801bfc6:	4618      	mov	r0, r3
 801bfc8:	3718      	adds	r7, #24
 801bfca:	46bd      	mov	sp, r7
 801bfcc:	bd80      	pop	{r7, pc}

0801bfce <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801bfce:	b580      	push	{r7, lr}
 801bfd0:	b084      	sub	sp, #16
 801bfd2:	af00      	add	r7, sp, #0
 801bfd4:	6078      	str	r0, [r7, #4]
 801bfd6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801bfd8:	683b      	ldr	r3, [r7, #0]
 801bfda:	331a      	adds	r3, #26
 801bfdc:	4618      	mov	r0, r3
 801bfde:	f7fe ffc1 	bl	801af64 <ld_word>
 801bfe2:	4603      	mov	r3, r0
 801bfe4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	781b      	ldrb	r3, [r3, #0]
 801bfea:	2b03      	cmp	r3, #3
 801bfec:	d109      	bne.n	801c002 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801bfee:	683b      	ldr	r3, [r7, #0]
 801bff0:	3314      	adds	r3, #20
 801bff2:	4618      	mov	r0, r3
 801bff4:	f7fe ffb6 	bl	801af64 <ld_word>
 801bff8:	4603      	mov	r3, r0
 801bffa:	041b      	lsls	r3, r3, #16
 801bffc:	68fa      	ldr	r2, [r7, #12]
 801bffe:	4313      	orrs	r3, r2
 801c000:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801c002:	68fb      	ldr	r3, [r7, #12]
}
 801c004:	4618      	mov	r0, r3
 801c006:	3710      	adds	r7, #16
 801c008:	46bd      	mov	sp, r7
 801c00a:	bd80      	pop	{r7, pc}

0801c00c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801c00c:	b580      	push	{r7, lr}
 801c00e:	b084      	sub	sp, #16
 801c010:	af00      	add	r7, sp, #0
 801c012:	60f8      	str	r0, [r7, #12]
 801c014:	60b9      	str	r1, [r7, #8]
 801c016:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801c018:	68bb      	ldr	r3, [r7, #8]
 801c01a:	331a      	adds	r3, #26
 801c01c:	687a      	ldr	r2, [r7, #4]
 801c01e:	b292      	uxth	r2, r2
 801c020:	4611      	mov	r1, r2
 801c022:	4618      	mov	r0, r3
 801c024:	f7fe ffd9 	bl	801afda <st_word>
	if (fs->fs_type == FS_FAT32) {
 801c028:	68fb      	ldr	r3, [r7, #12]
 801c02a:	781b      	ldrb	r3, [r3, #0]
 801c02c:	2b03      	cmp	r3, #3
 801c02e:	d109      	bne.n	801c044 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801c030:	68bb      	ldr	r3, [r7, #8]
 801c032:	f103 0214 	add.w	r2, r3, #20
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	0c1b      	lsrs	r3, r3, #16
 801c03a:	b29b      	uxth	r3, r3
 801c03c:	4619      	mov	r1, r3
 801c03e:	4610      	mov	r0, r2
 801c040:	f7fe ffcb 	bl	801afda <st_word>
	}
}
 801c044:	bf00      	nop
 801c046:	3710      	adds	r7, #16
 801c048:	46bd      	mov	sp, r7
 801c04a:	bd80      	pop	{r7, pc}

0801c04c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801c04c:	b590      	push	{r4, r7, lr}
 801c04e:	b087      	sub	sp, #28
 801c050:	af00      	add	r7, sp, #0
 801c052:	6078      	str	r0, [r7, #4]
 801c054:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801c056:	683b      	ldr	r3, [r7, #0]
 801c058:	331a      	adds	r3, #26
 801c05a:	4618      	mov	r0, r3
 801c05c:	f7fe ff82 	bl	801af64 <ld_word>
 801c060:	4603      	mov	r3, r0
 801c062:	2b00      	cmp	r3, #0
 801c064:	d001      	beq.n	801c06a <cmp_lfn+0x1e>
 801c066:	2300      	movs	r3, #0
 801c068:	e059      	b.n	801c11e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801c06a:	683b      	ldr	r3, [r7, #0]
 801c06c:	781b      	ldrb	r3, [r3, #0]
 801c06e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c072:	1e5a      	subs	r2, r3, #1
 801c074:	4613      	mov	r3, r2
 801c076:	005b      	lsls	r3, r3, #1
 801c078:	4413      	add	r3, r2
 801c07a:	009b      	lsls	r3, r3, #2
 801c07c:	4413      	add	r3, r2
 801c07e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c080:	2301      	movs	r3, #1
 801c082:	81fb      	strh	r3, [r7, #14]
 801c084:	2300      	movs	r3, #0
 801c086:	613b      	str	r3, [r7, #16]
 801c088:	e033      	b.n	801c0f2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c08a:	4a27      	ldr	r2, [pc, #156]	@ (801c128 <cmp_lfn+0xdc>)
 801c08c:	693b      	ldr	r3, [r7, #16]
 801c08e:	4413      	add	r3, r2
 801c090:	781b      	ldrb	r3, [r3, #0]
 801c092:	461a      	mov	r2, r3
 801c094:	683b      	ldr	r3, [r7, #0]
 801c096:	4413      	add	r3, r2
 801c098:	4618      	mov	r0, r3
 801c09a:	f7fe ff63 	bl	801af64 <ld_word>
 801c09e:	4603      	mov	r3, r0
 801c0a0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c0a2:	89fb      	ldrh	r3, [r7, #14]
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d01a      	beq.n	801c0de <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801c0a8:	697b      	ldr	r3, [r7, #20]
 801c0aa:	2bfe      	cmp	r3, #254	@ 0xfe
 801c0ac:	d812      	bhi.n	801c0d4 <cmp_lfn+0x88>
 801c0ae:	89bb      	ldrh	r3, [r7, #12]
 801c0b0:	4618      	mov	r0, r3
 801c0b2:	f001 ff71 	bl	801df98 <ff_wtoupper>
 801c0b6:	4603      	mov	r3, r0
 801c0b8:	461c      	mov	r4, r3
 801c0ba:	697b      	ldr	r3, [r7, #20]
 801c0bc:	1c5a      	adds	r2, r3, #1
 801c0be:	617a      	str	r2, [r7, #20]
 801c0c0:	005b      	lsls	r3, r3, #1
 801c0c2:	687a      	ldr	r2, [r7, #4]
 801c0c4:	4413      	add	r3, r2
 801c0c6:	881b      	ldrh	r3, [r3, #0]
 801c0c8:	4618      	mov	r0, r3
 801c0ca:	f001 ff65 	bl	801df98 <ff_wtoupper>
 801c0ce:	4603      	mov	r3, r0
 801c0d0:	429c      	cmp	r4, r3
 801c0d2:	d001      	beq.n	801c0d8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801c0d4:	2300      	movs	r3, #0
 801c0d6:	e022      	b.n	801c11e <cmp_lfn+0xd2>
			}
			wc = uc;
 801c0d8:	89bb      	ldrh	r3, [r7, #12]
 801c0da:	81fb      	strh	r3, [r7, #14]
 801c0dc:	e006      	b.n	801c0ec <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c0de:	89bb      	ldrh	r3, [r7, #12]
 801c0e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c0e4:	4293      	cmp	r3, r2
 801c0e6:	d001      	beq.n	801c0ec <cmp_lfn+0xa0>
 801c0e8:	2300      	movs	r3, #0
 801c0ea:	e018      	b.n	801c11e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c0ec:	693b      	ldr	r3, [r7, #16]
 801c0ee:	3301      	adds	r3, #1
 801c0f0:	613b      	str	r3, [r7, #16]
 801c0f2:	693b      	ldr	r3, [r7, #16]
 801c0f4:	2b0c      	cmp	r3, #12
 801c0f6:	d9c8      	bls.n	801c08a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801c0f8:	683b      	ldr	r3, [r7, #0]
 801c0fa:	781b      	ldrb	r3, [r3, #0]
 801c0fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c100:	2b00      	cmp	r3, #0
 801c102:	d00b      	beq.n	801c11c <cmp_lfn+0xd0>
 801c104:	89fb      	ldrh	r3, [r7, #14]
 801c106:	2b00      	cmp	r3, #0
 801c108:	d008      	beq.n	801c11c <cmp_lfn+0xd0>
 801c10a:	697b      	ldr	r3, [r7, #20]
 801c10c:	005b      	lsls	r3, r3, #1
 801c10e:	687a      	ldr	r2, [r7, #4]
 801c110:	4413      	add	r3, r2
 801c112:	881b      	ldrh	r3, [r3, #0]
 801c114:	2b00      	cmp	r3, #0
 801c116:	d001      	beq.n	801c11c <cmp_lfn+0xd0>
 801c118:	2300      	movs	r3, #0
 801c11a:	e000      	b.n	801c11e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801c11c:	2301      	movs	r3, #1
}
 801c11e:	4618      	mov	r0, r3
 801c120:	371c      	adds	r7, #28
 801c122:	46bd      	mov	sp, r7
 801c124:	bd90      	pop	{r4, r7, pc}
 801c126:	bf00      	nop
 801c128:	0801eaa4 	.word	0x0801eaa4

0801c12c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801c12c:	b580      	push	{r7, lr}
 801c12e:	b086      	sub	sp, #24
 801c130:	af00      	add	r7, sp, #0
 801c132:	6078      	str	r0, [r7, #4]
 801c134:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801c136:	683b      	ldr	r3, [r7, #0]
 801c138:	331a      	adds	r3, #26
 801c13a:	4618      	mov	r0, r3
 801c13c:	f7fe ff12 	bl	801af64 <ld_word>
 801c140:	4603      	mov	r3, r0
 801c142:	2b00      	cmp	r3, #0
 801c144:	d001      	beq.n	801c14a <pick_lfn+0x1e>
 801c146:	2300      	movs	r3, #0
 801c148:	e04d      	b.n	801c1e6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801c14a:	683b      	ldr	r3, [r7, #0]
 801c14c:	781b      	ldrb	r3, [r3, #0]
 801c14e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c152:	1e5a      	subs	r2, r3, #1
 801c154:	4613      	mov	r3, r2
 801c156:	005b      	lsls	r3, r3, #1
 801c158:	4413      	add	r3, r2
 801c15a:	009b      	lsls	r3, r3, #2
 801c15c:	4413      	add	r3, r2
 801c15e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c160:	2301      	movs	r3, #1
 801c162:	81fb      	strh	r3, [r7, #14]
 801c164:	2300      	movs	r3, #0
 801c166:	613b      	str	r3, [r7, #16]
 801c168:	e028      	b.n	801c1bc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c16a:	4a21      	ldr	r2, [pc, #132]	@ (801c1f0 <pick_lfn+0xc4>)
 801c16c:	693b      	ldr	r3, [r7, #16]
 801c16e:	4413      	add	r3, r2
 801c170:	781b      	ldrb	r3, [r3, #0]
 801c172:	461a      	mov	r2, r3
 801c174:	683b      	ldr	r3, [r7, #0]
 801c176:	4413      	add	r3, r2
 801c178:	4618      	mov	r0, r3
 801c17a:	f7fe fef3 	bl	801af64 <ld_word>
 801c17e:	4603      	mov	r3, r0
 801c180:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c182:	89fb      	ldrh	r3, [r7, #14]
 801c184:	2b00      	cmp	r3, #0
 801c186:	d00f      	beq.n	801c1a8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801c188:	697b      	ldr	r3, [r7, #20]
 801c18a:	2bfe      	cmp	r3, #254	@ 0xfe
 801c18c:	d901      	bls.n	801c192 <pick_lfn+0x66>
 801c18e:	2300      	movs	r3, #0
 801c190:	e029      	b.n	801c1e6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801c192:	89bb      	ldrh	r3, [r7, #12]
 801c194:	81fb      	strh	r3, [r7, #14]
 801c196:	697b      	ldr	r3, [r7, #20]
 801c198:	1c5a      	adds	r2, r3, #1
 801c19a:	617a      	str	r2, [r7, #20]
 801c19c:	005b      	lsls	r3, r3, #1
 801c19e:	687a      	ldr	r2, [r7, #4]
 801c1a0:	4413      	add	r3, r2
 801c1a2:	89fa      	ldrh	r2, [r7, #14]
 801c1a4:	801a      	strh	r2, [r3, #0]
 801c1a6:	e006      	b.n	801c1b6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c1a8:	89bb      	ldrh	r3, [r7, #12]
 801c1aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c1ae:	4293      	cmp	r3, r2
 801c1b0:	d001      	beq.n	801c1b6 <pick_lfn+0x8a>
 801c1b2:	2300      	movs	r3, #0
 801c1b4:	e017      	b.n	801c1e6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c1b6:	693b      	ldr	r3, [r7, #16]
 801c1b8:	3301      	adds	r3, #1
 801c1ba:	613b      	str	r3, [r7, #16]
 801c1bc:	693b      	ldr	r3, [r7, #16]
 801c1be:	2b0c      	cmp	r3, #12
 801c1c0:	d9d3      	bls.n	801c16a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801c1c2:	683b      	ldr	r3, [r7, #0]
 801c1c4:	781b      	ldrb	r3, [r3, #0]
 801c1c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d00a      	beq.n	801c1e4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801c1ce:	697b      	ldr	r3, [r7, #20]
 801c1d0:	2bfe      	cmp	r3, #254	@ 0xfe
 801c1d2:	d901      	bls.n	801c1d8 <pick_lfn+0xac>
 801c1d4:	2300      	movs	r3, #0
 801c1d6:	e006      	b.n	801c1e6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801c1d8:	697b      	ldr	r3, [r7, #20]
 801c1da:	005b      	lsls	r3, r3, #1
 801c1dc:	687a      	ldr	r2, [r7, #4]
 801c1de:	4413      	add	r3, r2
 801c1e0:	2200      	movs	r2, #0
 801c1e2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801c1e4:	2301      	movs	r3, #1
}
 801c1e6:	4618      	mov	r0, r3
 801c1e8:	3718      	adds	r7, #24
 801c1ea:	46bd      	mov	sp, r7
 801c1ec:	bd80      	pop	{r7, pc}
 801c1ee:	bf00      	nop
 801c1f0:	0801eaa4 	.word	0x0801eaa4

0801c1f4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801c1f4:	b580      	push	{r7, lr}
 801c1f6:	b088      	sub	sp, #32
 801c1f8:	af00      	add	r7, sp, #0
 801c1fa:	60f8      	str	r0, [r7, #12]
 801c1fc:	60b9      	str	r1, [r7, #8]
 801c1fe:	4611      	mov	r1, r2
 801c200:	461a      	mov	r2, r3
 801c202:	460b      	mov	r3, r1
 801c204:	71fb      	strb	r3, [r7, #7]
 801c206:	4613      	mov	r3, r2
 801c208:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801c20a:	68bb      	ldr	r3, [r7, #8]
 801c20c:	330d      	adds	r3, #13
 801c20e:	79ba      	ldrb	r2, [r7, #6]
 801c210:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801c212:	68bb      	ldr	r3, [r7, #8]
 801c214:	330b      	adds	r3, #11
 801c216:	220f      	movs	r2, #15
 801c218:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801c21a:	68bb      	ldr	r3, [r7, #8]
 801c21c:	330c      	adds	r3, #12
 801c21e:	2200      	movs	r2, #0
 801c220:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801c222:	68bb      	ldr	r3, [r7, #8]
 801c224:	331a      	adds	r3, #26
 801c226:	2100      	movs	r1, #0
 801c228:	4618      	mov	r0, r3
 801c22a:	f7fe fed6 	bl	801afda <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801c22e:	79fb      	ldrb	r3, [r7, #7]
 801c230:	1e5a      	subs	r2, r3, #1
 801c232:	4613      	mov	r3, r2
 801c234:	005b      	lsls	r3, r3, #1
 801c236:	4413      	add	r3, r2
 801c238:	009b      	lsls	r3, r3, #2
 801c23a:	4413      	add	r3, r2
 801c23c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801c23e:	2300      	movs	r3, #0
 801c240:	82fb      	strh	r3, [r7, #22]
 801c242:	2300      	movs	r3, #0
 801c244:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801c246:	8afb      	ldrh	r3, [r7, #22]
 801c248:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c24c:	4293      	cmp	r3, r2
 801c24e:	d007      	beq.n	801c260 <put_lfn+0x6c>
 801c250:	69fb      	ldr	r3, [r7, #28]
 801c252:	1c5a      	adds	r2, r3, #1
 801c254:	61fa      	str	r2, [r7, #28]
 801c256:	005b      	lsls	r3, r3, #1
 801c258:	68fa      	ldr	r2, [r7, #12]
 801c25a:	4413      	add	r3, r2
 801c25c:	881b      	ldrh	r3, [r3, #0]
 801c25e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801c260:	4a17      	ldr	r2, [pc, #92]	@ (801c2c0 <put_lfn+0xcc>)
 801c262:	69bb      	ldr	r3, [r7, #24]
 801c264:	4413      	add	r3, r2
 801c266:	781b      	ldrb	r3, [r3, #0]
 801c268:	461a      	mov	r2, r3
 801c26a:	68bb      	ldr	r3, [r7, #8]
 801c26c:	4413      	add	r3, r2
 801c26e:	8afa      	ldrh	r2, [r7, #22]
 801c270:	4611      	mov	r1, r2
 801c272:	4618      	mov	r0, r3
 801c274:	f7fe feb1 	bl	801afda <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801c278:	8afb      	ldrh	r3, [r7, #22]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d102      	bne.n	801c284 <put_lfn+0x90>
 801c27e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c282:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801c284:	69bb      	ldr	r3, [r7, #24]
 801c286:	3301      	adds	r3, #1
 801c288:	61bb      	str	r3, [r7, #24]
 801c28a:	69bb      	ldr	r3, [r7, #24]
 801c28c:	2b0c      	cmp	r3, #12
 801c28e:	d9da      	bls.n	801c246 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801c290:	8afb      	ldrh	r3, [r7, #22]
 801c292:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c296:	4293      	cmp	r3, r2
 801c298:	d006      	beq.n	801c2a8 <put_lfn+0xb4>
 801c29a:	69fb      	ldr	r3, [r7, #28]
 801c29c:	005b      	lsls	r3, r3, #1
 801c29e:	68fa      	ldr	r2, [r7, #12]
 801c2a0:	4413      	add	r3, r2
 801c2a2:	881b      	ldrh	r3, [r3, #0]
 801c2a4:	2b00      	cmp	r3, #0
 801c2a6:	d103      	bne.n	801c2b0 <put_lfn+0xbc>
 801c2a8:	79fb      	ldrb	r3, [r7, #7]
 801c2aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c2ae:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801c2b0:	68bb      	ldr	r3, [r7, #8]
 801c2b2:	79fa      	ldrb	r2, [r7, #7]
 801c2b4:	701a      	strb	r2, [r3, #0]
}
 801c2b6:	bf00      	nop
 801c2b8:	3720      	adds	r7, #32
 801c2ba:	46bd      	mov	sp, r7
 801c2bc:	bd80      	pop	{r7, pc}
 801c2be:	bf00      	nop
 801c2c0:	0801eaa4 	.word	0x0801eaa4

0801c2c4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801c2c4:	b580      	push	{r7, lr}
 801c2c6:	b08c      	sub	sp, #48	@ 0x30
 801c2c8:	af00      	add	r7, sp, #0
 801c2ca:	60f8      	str	r0, [r7, #12]
 801c2cc:	60b9      	str	r1, [r7, #8]
 801c2ce:	607a      	str	r2, [r7, #4]
 801c2d0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801c2d2:	220b      	movs	r2, #11
 801c2d4:	68b9      	ldr	r1, [r7, #8]
 801c2d6:	68f8      	ldr	r0, [r7, #12]
 801c2d8:	f7fe fec6 	bl	801b068 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801c2dc:	683b      	ldr	r3, [r7, #0]
 801c2de:	2b05      	cmp	r3, #5
 801c2e0:	d929      	bls.n	801c336 <gen_numname+0x72>
		sr = seq;
 801c2e2:	683b      	ldr	r3, [r7, #0]
 801c2e4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801c2e6:	e020      	b.n	801c32a <gen_numname+0x66>
			wc = *lfn++;
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	1c9a      	adds	r2, r3, #2
 801c2ec:	607a      	str	r2, [r7, #4]
 801c2ee:	881b      	ldrh	r3, [r3, #0]
 801c2f0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801c2f2:	2300      	movs	r3, #0
 801c2f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c2f6:	e015      	b.n	801c324 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801c2f8:	69fb      	ldr	r3, [r7, #28]
 801c2fa:	005a      	lsls	r2, r3, #1
 801c2fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c2fe:	f003 0301 	and.w	r3, r3, #1
 801c302:	4413      	add	r3, r2
 801c304:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801c306:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c308:	085b      	lsrs	r3, r3, #1
 801c30a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801c30c:	69fb      	ldr	r3, [r7, #28]
 801c30e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c312:	2b00      	cmp	r3, #0
 801c314:	d003      	beq.n	801c31e <gen_numname+0x5a>
 801c316:	69fa      	ldr	r2, [r7, #28]
 801c318:	4b30      	ldr	r3, [pc, #192]	@ (801c3dc <gen_numname+0x118>)
 801c31a:	4053      	eors	r3, r2
 801c31c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801c31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c320:	3301      	adds	r3, #1
 801c322:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c326:	2b0f      	cmp	r3, #15
 801c328:	d9e6      	bls.n	801c2f8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	881b      	ldrh	r3, [r3, #0]
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d1da      	bne.n	801c2e8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801c332:	69fb      	ldr	r3, [r7, #28]
 801c334:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801c336:	2307      	movs	r3, #7
 801c338:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801c33a:	683b      	ldr	r3, [r7, #0]
 801c33c:	b2db      	uxtb	r3, r3
 801c33e:	f003 030f 	and.w	r3, r3, #15
 801c342:	b2db      	uxtb	r3, r3
 801c344:	3330      	adds	r3, #48	@ 0x30
 801c346:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801c34a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c34e:	2b39      	cmp	r3, #57	@ 0x39
 801c350:	d904      	bls.n	801c35c <gen_numname+0x98>
 801c352:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c356:	3307      	adds	r3, #7
 801c358:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801c35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c35e:	1e5a      	subs	r2, r3, #1
 801c360:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c362:	3330      	adds	r3, #48	@ 0x30
 801c364:	443b      	add	r3, r7
 801c366:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801c36a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801c36e:	683b      	ldr	r3, [r7, #0]
 801c370:	091b      	lsrs	r3, r3, #4
 801c372:	603b      	str	r3, [r7, #0]
	} while (seq);
 801c374:	683b      	ldr	r3, [r7, #0]
 801c376:	2b00      	cmp	r3, #0
 801c378:	d1df      	bne.n	801c33a <gen_numname+0x76>
	ns[i] = '~';
 801c37a:	f107 0214 	add.w	r2, r7, #20
 801c37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c380:	4413      	add	r3, r2
 801c382:	227e      	movs	r2, #126	@ 0x7e
 801c384:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801c386:	2300      	movs	r3, #0
 801c388:	627b      	str	r3, [r7, #36]	@ 0x24
 801c38a:	e002      	b.n	801c392 <gen_numname+0xce>
 801c38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c38e:	3301      	adds	r3, #1
 801c390:	627b      	str	r3, [r7, #36]	@ 0x24
 801c392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c396:	429a      	cmp	r2, r3
 801c398:	d205      	bcs.n	801c3a6 <gen_numname+0xe2>
 801c39a:	68fa      	ldr	r2, [r7, #12]
 801c39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c39e:	4413      	add	r3, r2
 801c3a0:	781b      	ldrb	r3, [r3, #0]
 801c3a2:	2b20      	cmp	r3, #32
 801c3a4:	d1f2      	bne.n	801c38c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801c3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3a8:	2b07      	cmp	r3, #7
 801c3aa:	d807      	bhi.n	801c3bc <gen_numname+0xf8>
 801c3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3ae:	1c5a      	adds	r2, r3, #1
 801c3b0:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c3b2:	3330      	adds	r3, #48	@ 0x30
 801c3b4:	443b      	add	r3, r7
 801c3b6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801c3ba:	e000      	b.n	801c3be <gen_numname+0xfa>
 801c3bc:	2120      	movs	r1, #32
 801c3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3c0:	1c5a      	adds	r2, r3, #1
 801c3c2:	627a      	str	r2, [r7, #36]	@ 0x24
 801c3c4:	68fa      	ldr	r2, [r7, #12]
 801c3c6:	4413      	add	r3, r2
 801c3c8:	460a      	mov	r2, r1
 801c3ca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801c3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3ce:	2b07      	cmp	r3, #7
 801c3d0:	d9e9      	bls.n	801c3a6 <gen_numname+0xe2>
}
 801c3d2:	bf00      	nop
 801c3d4:	bf00      	nop
 801c3d6:	3730      	adds	r7, #48	@ 0x30
 801c3d8:	46bd      	mov	sp, r7
 801c3da:	bd80      	pop	{r7, pc}
 801c3dc:	00011021 	.word	0x00011021

0801c3e0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801c3e0:	b480      	push	{r7}
 801c3e2:	b085      	sub	sp, #20
 801c3e4:	af00      	add	r7, sp, #0
 801c3e6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801c3e8:	2300      	movs	r3, #0
 801c3ea:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801c3ec:	230b      	movs	r3, #11
 801c3ee:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801c3f0:	7bfb      	ldrb	r3, [r7, #15]
 801c3f2:	b2da      	uxtb	r2, r3
 801c3f4:	0852      	lsrs	r2, r2, #1
 801c3f6:	01db      	lsls	r3, r3, #7
 801c3f8:	4313      	orrs	r3, r2
 801c3fa:	b2da      	uxtb	r2, r3
 801c3fc:	687b      	ldr	r3, [r7, #4]
 801c3fe:	1c59      	adds	r1, r3, #1
 801c400:	6079      	str	r1, [r7, #4]
 801c402:	781b      	ldrb	r3, [r3, #0]
 801c404:	4413      	add	r3, r2
 801c406:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801c408:	68bb      	ldr	r3, [r7, #8]
 801c40a:	3b01      	subs	r3, #1
 801c40c:	60bb      	str	r3, [r7, #8]
 801c40e:	68bb      	ldr	r3, [r7, #8]
 801c410:	2b00      	cmp	r3, #0
 801c412:	d1ed      	bne.n	801c3f0 <sum_sfn+0x10>
	return sum;
 801c414:	7bfb      	ldrb	r3, [r7, #15]
}
 801c416:	4618      	mov	r0, r3
 801c418:	3714      	adds	r7, #20
 801c41a:	46bd      	mov	sp, r7
 801c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c420:	4770      	bx	lr

0801c422 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801c422:	b580      	push	{r7, lr}
 801c424:	b086      	sub	sp, #24
 801c426:	af00      	add	r7, sp, #0
 801c428:	6078      	str	r0, [r7, #4]
 801c42a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801c42c:	2304      	movs	r3, #4
 801c42e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	681b      	ldr	r3, [r3, #0]
 801c434:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801c436:	23ff      	movs	r3, #255	@ 0xff
 801c438:	757b      	strb	r3, [r7, #21]
 801c43a:	23ff      	movs	r3, #255	@ 0xff
 801c43c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801c43e:	e081      	b.n	801c544 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	69db      	ldr	r3, [r3, #28]
 801c444:	4619      	mov	r1, r3
 801c446:	6938      	ldr	r0, [r7, #16]
 801c448:	f7ff f83c 	bl	801b4c4 <move_window>
 801c44c:	4603      	mov	r3, r0
 801c44e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c450:	7dfb      	ldrb	r3, [r7, #23]
 801c452:	2b00      	cmp	r3, #0
 801c454:	d17c      	bne.n	801c550 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	6a1b      	ldr	r3, [r3, #32]
 801c45a:	781b      	ldrb	r3, [r3, #0]
 801c45c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801c45e:	7dbb      	ldrb	r3, [r7, #22]
 801c460:	2b00      	cmp	r3, #0
 801c462:	d102      	bne.n	801c46a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801c464:	2304      	movs	r3, #4
 801c466:	75fb      	strb	r3, [r7, #23]
 801c468:	e077      	b.n	801c55a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	6a1b      	ldr	r3, [r3, #32]
 801c46e:	330b      	adds	r3, #11
 801c470:	781b      	ldrb	r3, [r3, #0]
 801c472:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c476:	73fb      	strb	r3, [r7, #15]
 801c478:	687b      	ldr	r3, [r7, #4]
 801c47a:	7bfa      	ldrb	r2, [r7, #15]
 801c47c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801c47e:	7dbb      	ldrb	r3, [r7, #22]
 801c480:	2be5      	cmp	r3, #229	@ 0xe5
 801c482:	d00e      	beq.n	801c4a2 <dir_read+0x80>
 801c484:	7dbb      	ldrb	r3, [r7, #22]
 801c486:	2b2e      	cmp	r3, #46	@ 0x2e
 801c488:	d00b      	beq.n	801c4a2 <dir_read+0x80>
 801c48a:	7bfb      	ldrb	r3, [r7, #15]
 801c48c:	f023 0320 	bic.w	r3, r3, #32
 801c490:	2b08      	cmp	r3, #8
 801c492:	bf0c      	ite	eq
 801c494:	2301      	moveq	r3, #1
 801c496:	2300      	movne	r3, #0
 801c498:	b2db      	uxtb	r3, r3
 801c49a:	461a      	mov	r2, r3
 801c49c:	683b      	ldr	r3, [r7, #0]
 801c49e:	4293      	cmp	r3, r2
 801c4a0:	d002      	beq.n	801c4a8 <dir_read+0x86>
				ord = 0xFF;
 801c4a2:	23ff      	movs	r3, #255	@ 0xff
 801c4a4:	757b      	strb	r3, [r7, #21]
 801c4a6:	e044      	b.n	801c532 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801c4a8:	7bfb      	ldrb	r3, [r7, #15]
 801c4aa:	2b0f      	cmp	r3, #15
 801c4ac:	d12f      	bne.n	801c50e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801c4ae:	7dbb      	ldrb	r3, [r7, #22]
 801c4b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d00d      	beq.n	801c4d4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	6a1b      	ldr	r3, [r3, #32]
 801c4bc:	7b5b      	ldrb	r3, [r3, #13]
 801c4be:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801c4c0:	7dbb      	ldrb	r3, [r7, #22]
 801c4c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c4c6:	75bb      	strb	r3, [r7, #22]
 801c4c8:	7dbb      	ldrb	r3, [r7, #22]
 801c4ca:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	695a      	ldr	r2, [r3, #20]
 801c4d0:	687b      	ldr	r3, [r7, #4]
 801c4d2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c4d4:	7dba      	ldrb	r2, [r7, #22]
 801c4d6:	7d7b      	ldrb	r3, [r7, #21]
 801c4d8:	429a      	cmp	r2, r3
 801c4da:	d115      	bne.n	801c508 <dir_read+0xe6>
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	6a1b      	ldr	r3, [r3, #32]
 801c4e0:	330d      	adds	r3, #13
 801c4e2:	781b      	ldrb	r3, [r3, #0]
 801c4e4:	7d3a      	ldrb	r2, [r7, #20]
 801c4e6:	429a      	cmp	r2, r3
 801c4e8:	d10e      	bne.n	801c508 <dir_read+0xe6>
 801c4ea:	693b      	ldr	r3, [r7, #16]
 801c4ec:	691a      	ldr	r2, [r3, #16]
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	6a1b      	ldr	r3, [r3, #32]
 801c4f2:	4619      	mov	r1, r3
 801c4f4:	4610      	mov	r0, r2
 801c4f6:	f7ff fe19 	bl	801c12c <pick_lfn>
 801c4fa:	4603      	mov	r3, r0
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d003      	beq.n	801c508 <dir_read+0xe6>
 801c500:	7d7b      	ldrb	r3, [r7, #21]
 801c502:	3b01      	subs	r3, #1
 801c504:	b2db      	uxtb	r3, r3
 801c506:	e000      	b.n	801c50a <dir_read+0xe8>
 801c508:	23ff      	movs	r3, #255	@ 0xff
 801c50a:	757b      	strb	r3, [r7, #21]
 801c50c:	e011      	b.n	801c532 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801c50e:	7d7b      	ldrb	r3, [r7, #21]
 801c510:	2b00      	cmp	r3, #0
 801c512:	d109      	bne.n	801c528 <dir_read+0x106>
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	6a1b      	ldr	r3, [r3, #32]
 801c518:	4618      	mov	r0, r3
 801c51a:	f7ff ff61 	bl	801c3e0 <sum_sfn>
 801c51e:	4603      	mov	r3, r0
 801c520:	461a      	mov	r2, r3
 801c522:	7d3b      	ldrb	r3, [r7, #20]
 801c524:	4293      	cmp	r3, r2
 801c526:	d015      	beq.n	801c554 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	f04f 32ff 	mov.w	r2, #4294967295
 801c52e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801c530:	e010      	b.n	801c554 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801c532:	2100      	movs	r1, #0
 801c534:	6878      	ldr	r0, [r7, #4]
 801c536:	f7ff fc2d 	bl	801bd94 <dir_next>
 801c53a:	4603      	mov	r3, r0
 801c53c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c53e:	7dfb      	ldrb	r3, [r7, #23]
 801c540:	2b00      	cmp	r3, #0
 801c542:	d109      	bne.n	801c558 <dir_read+0x136>
	while (dp->sect) {
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	69db      	ldr	r3, [r3, #28]
 801c548:	2b00      	cmp	r3, #0
 801c54a:	f47f af79 	bne.w	801c440 <dir_read+0x1e>
 801c54e:	e004      	b.n	801c55a <dir_read+0x138>
		if (res != FR_OK) break;
 801c550:	bf00      	nop
 801c552:	e002      	b.n	801c55a <dir_read+0x138>
					break;
 801c554:	bf00      	nop
 801c556:	e000      	b.n	801c55a <dir_read+0x138>
		if (res != FR_OK) break;
 801c558:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801c55a:	7dfb      	ldrb	r3, [r7, #23]
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d002      	beq.n	801c566 <dir_read+0x144>
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	2200      	movs	r2, #0
 801c564:	61da      	str	r2, [r3, #28]
	return res;
 801c566:	7dfb      	ldrb	r3, [r7, #23]
}
 801c568:	4618      	mov	r0, r3
 801c56a:	3718      	adds	r7, #24
 801c56c:	46bd      	mov	sp, r7
 801c56e:	bd80      	pop	{r7, pc}

0801c570 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801c570:	b580      	push	{r7, lr}
 801c572:	b086      	sub	sp, #24
 801c574:	af00      	add	r7, sp, #0
 801c576:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801c57e:	2100      	movs	r1, #0
 801c580:	6878      	ldr	r0, [r7, #4]
 801c582:	f7ff fb7e 	bl	801bc82 <dir_sdi>
 801c586:	4603      	mov	r3, r0
 801c588:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801c58a:	7dfb      	ldrb	r3, [r7, #23]
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d001      	beq.n	801c594 <dir_find+0x24>
 801c590:	7dfb      	ldrb	r3, [r7, #23]
 801c592:	e0a9      	b.n	801c6e8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c594:	23ff      	movs	r3, #255	@ 0xff
 801c596:	753b      	strb	r3, [r7, #20]
 801c598:	7d3b      	ldrb	r3, [r7, #20]
 801c59a:	757b      	strb	r3, [r7, #21]
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	f04f 32ff 	mov.w	r2, #4294967295
 801c5a2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	69db      	ldr	r3, [r3, #28]
 801c5a8:	4619      	mov	r1, r3
 801c5aa:	6938      	ldr	r0, [r7, #16]
 801c5ac:	f7fe ff8a 	bl	801b4c4 <move_window>
 801c5b0:	4603      	mov	r3, r0
 801c5b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c5b4:	7dfb      	ldrb	r3, [r7, #23]
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	f040 8090 	bne.w	801c6dc <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	6a1b      	ldr	r3, [r3, #32]
 801c5c0:	781b      	ldrb	r3, [r3, #0]
 801c5c2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c5c4:	7dbb      	ldrb	r3, [r7, #22]
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	d102      	bne.n	801c5d0 <dir_find+0x60>
 801c5ca:	2304      	movs	r3, #4
 801c5cc:	75fb      	strb	r3, [r7, #23]
 801c5ce:	e08a      	b.n	801c6e6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	6a1b      	ldr	r3, [r3, #32]
 801c5d4:	330b      	adds	r3, #11
 801c5d6:	781b      	ldrb	r3, [r3, #0]
 801c5d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c5dc:	73fb      	strb	r3, [r7, #15]
 801c5de:	687b      	ldr	r3, [r7, #4]
 801c5e0:	7bfa      	ldrb	r2, [r7, #15]
 801c5e2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c5e4:	7dbb      	ldrb	r3, [r7, #22]
 801c5e6:	2be5      	cmp	r3, #229	@ 0xe5
 801c5e8:	d007      	beq.n	801c5fa <dir_find+0x8a>
 801c5ea:	7bfb      	ldrb	r3, [r7, #15]
 801c5ec:	f003 0308 	and.w	r3, r3, #8
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	d009      	beq.n	801c608 <dir_find+0x98>
 801c5f4:	7bfb      	ldrb	r3, [r7, #15]
 801c5f6:	2b0f      	cmp	r3, #15
 801c5f8:	d006      	beq.n	801c608 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c5fa:	23ff      	movs	r3, #255	@ 0xff
 801c5fc:	757b      	strb	r3, [r7, #21]
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	f04f 32ff 	mov.w	r2, #4294967295
 801c604:	631a      	str	r2, [r3, #48]	@ 0x30
 801c606:	e05e      	b.n	801c6c6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801c608:	7bfb      	ldrb	r3, [r7, #15]
 801c60a:	2b0f      	cmp	r3, #15
 801c60c:	d136      	bne.n	801c67c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c618:	2b00      	cmp	r3, #0
 801c61a:	d154      	bne.n	801c6c6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801c61c:	7dbb      	ldrb	r3, [r7, #22]
 801c61e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c622:	2b00      	cmp	r3, #0
 801c624:	d00d      	beq.n	801c642 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	6a1b      	ldr	r3, [r3, #32]
 801c62a:	7b5b      	ldrb	r3, [r3, #13]
 801c62c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801c62e:	7dbb      	ldrb	r3, [r7, #22]
 801c630:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c634:	75bb      	strb	r3, [r7, #22]
 801c636:	7dbb      	ldrb	r3, [r7, #22]
 801c638:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801c63a:	687b      	ldr	r3, [r7, #4]
 801c63c:	695a      	ldr	r2, [r3, #20]
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c642:	7dba      	ldrb	r2, [r7, #22]
 801c644:	7d7b      	ldrb	r3, [r7, #21]
 801c646:	429a      	cmp	r2, r3
 801c648:	d115      	bne.n	801c676 <dir_find+0x106>
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	6a1b      	ldr	r3, [r3, #32]
 801c64e:	330d      	adds	r3, #13
 801c650:	781b      	ldrb	r3, [r3, #0]
 801c652:	7d3a      	ldrb	r2, [r7, #20]
 801c654:	429a      	cmp	r2, r3
 801c656:	d10e      	bne.n	801c676 <dir_find+0x106>
 801c658:	693b      	ldr	r3, [r7, #16]
 801c65a:	691a      	ldr	r2, [r3, #16]
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	6a1b      	ldr	r3, [r3, #32]
 801c660:	4619      	mov	r1, r3
 801c662:	4610      	mov	r0, r2
 801c664:	f7ff fcf2 	bl	801c04c <cmp_lfn>
 801c668:	4603      	mov	r3, r0
 801c66a:	2b00      	cmp	r3, #0
 801c66c:	d003      	beq.n	801c676 <dir_find+0x106>
 801c66e:	7d7b      	ldrb	r3, [r7, #21]
 801c670:	3b01      	subs	r3, #1
 801c672:	b2db      	uxtb	r3, r3
 801c674:	e000      	b.n	801c678 <dir_find+0x108>
 801c676:	23ff      	movs	r3, #255	@ 0xff
 801c678:	757b      	strb	r3, [r7, #21]
 801c67a:	e024      	b.n	801c6c6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c67c:	7d7b      	ldrb	r3, [r7, #21]
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d109      	bne.n	801c696 <dir_find+0x126>
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	6a1b      	ldr	r3, [r3, #32]
 801c686:	4618      	mov	r0, r3
 801c688:	f7ff feaa 	bl	801c3e0 <sum_sfn>
 801c68c:	4603      	mov	r3, r0
 801c68e:	461a      	mov	r2, r3
 801c690:	7d3b      	ldrb	r3, [r7, #20]
 801c692:	4293      	cmp	r3, r2
 801c694:	d024      	beq.n	801c6e0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c69c:	f003 0301 	and.w	r3, r3, #1
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d10a      	bne.n	801c6ba <dir_find+0x14a>
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	6a18      	ldr	r0, [r3, #32]
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	3324      	adds	r3, #36	@ 0x24
 801c6ac:	220b      	movs	r2, #11
 801c6ae:	4619      	mov	r1, r3
 801c6b0:	f7fe fd16 	bl	801b0e0 <mem_cmp>
 801c6b4:	4603      	mov	r3, r0
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d014      	beq.n	801c6e4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c6ba:	23ff      	movs	r3, #255	@ 0xff
 801c6bc:	757b      	strb	r3, [r7, #21]
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	f04f 32ff 	mov.w	r2, #4294967295
 801c6c4:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801c6c6:	2100      	movs	r1, #0
 801c6c8:	6878      	ldr	r0, [r7, #4]
 801c6ca:	f7ff fb63 	bl	801bd94 <dir_next>
 801c6ce:	4603      	mov	r3, r0
 801c6d0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801c6d2:	7dfb      	ldrb	r3, [r7, #23]
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	f43f af65 	beq.w	801c5a4 <dir_find+0x34>
 801c6da:	e004      	b.n	801c6e6 <dir_find+0x176>
		if (res != FR_OK) break;
 801c6dc:	bf00      	nop
 801c6de:	e002      	b.n	801c6e6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c6e0:	bf00      	nop
 801c6e2:	e000      	b.n	801c6e6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c6e4:	bf00      	nop

	return res;
 801c6e6:	7dfb      	ldrb	r3, [r7, #23]
}
 801c6e8:	4618      	mov	r0, r3
 801c6ea:	3718      	adds	r7, #24
 801c6ec:	46bd      	mov	sp, r7
 801c6ee:	bd80      	pop	{r7, pc}

0801c6f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801c6f0:	b580      	push	{r7, lr}
 801c6f2:	b08c      	sub	sp, #48	@ 0x30
 801c6f4:	af00      	add	r7, sp, #0
 801c6f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	681b      	ldr	r3, [r3, #0]
 801c6fc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c704:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801c708:	2b00      	cmp	r3, #0
 801c70a:	d001      	beq.n	801c710 <dir_register+0x20>
 801c70c:	2306      	movs	r3, #6
 801c70e:	e0e0      	b.n	801c8d2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801c710:	2300      	movs	r3, #0
 801c712:	627b      	str	r3, [r7, #36]	@ 0x24
 801c714:	e002      	b.n	801c71c <dir_register+0x2c>
 801c716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c718:	3301      	adds	r3, #1
 801c71a:	627b      	str	r3, [r7, #36]	@ 0x24
 801c71c:	69fb      	ldr	r3, [r7, #28]
 801c71e:	691a      	ldr	r2, [r3, #16]
 801c720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c722:	005b      	lsls	r3, r3, #1
 801c724:	4413      	add	r3, r2
 801c726:	881b      	ldrh	r3, [r3, #0]
 801c728:	2b00      	cmp	r3, #0
 801c72a:	d1f4      	bne.n	801c716 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801c732:	f107 030c 	add.w	r3, r7, #12
 801c736:	220c      	movs	r2, #12
 801c738:	4618      	mov	r0, r3
 801c73a:	f7fe fc95 	bl	801b068 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801c73e:	7dfb      	ldrb	r3, [r7, #23]
 801c740:	f003 0301 	and.w	r3, r3, #1
 801c744:	2b00      	cmp	r3, #0
 801c746:	d032      	beq.n	801c7ae <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	2240      	movs	r2, #64	@ 0x40
 801c74c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801c750:	2301      	movs	r3, #1
 801c752:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c754:	e016      	b.n	801c784 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801c756:	687b      	ldr	r3, [r7, #4]
 801c758:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801c75c:	69fb      	ldr	r3, [r7, #28]
 801c75e:	691a      	ldr	r2, [r3, #16]
 801c760:	f107 010c 	add.w	r1, r7, #12
 801c764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c766:	f7ff fdad 	bl	801c2c4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801c76a:	6878      	ldr	r0, [r7, #4]
 801c76c:	f7ff ff00 	bl	801c570 <dir_find>
 801c770:	4603      	mov	r3, r0
 801c772:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801c776:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d106      	bne.n	801c78c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801c77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c780:	3301      	adds	r3, #1
 801c782:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c786:	2b63      	cmp	r3, #99	@ 0x63
 801c788:	d9e5      	bls.n	801c756 <dir_register+0x66>
 801c78a:	e000      	b.n	801c78e <dir_register+0x9e>
			if (res != FR_OK) break;
 801c78c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801c78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c790:	2b64      	cmp	r3, #100	@ 0x64
 801c792:	d101      	bne.n	801c798 <dir_register+0xa8>
 801c794:	2307      	movs	r3, #7
 801c796:	e09c      	b.n	801c8d2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801c798:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c79c:	2b04      	cmp	r3, #4
 801c79e:	d002      	beq.n	801c7a6 <dir_register+0xb6>
 801c7a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c7a4:	e095      	b.n	801c8d2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801c7a6:	7dfa      	ldrb	r2, [r7, #23]
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801c7ae:	7dfb      	ldrb	r3, [r7, #23]
 801c7b0:	f003 0302 	and.w	r3, r3, #2
 801c7b4:	2b00      	cmp	r3, #0
 801c7b6:	d007      	beq.n	801c7c8 <dir_register+0xd8>
 801c7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7ba:	330c      	adds	r3, #12
 801c7bc:	4a47      	ldr	r2, [pc, #284]	@ (801c8dc <dir_register+0x1ec>)
 801c7be:	fba2 2303 	umull	r2, r3, r2, r3
 801c7c2:	089b      	lsrs	r3, r3, #2
 801c7c4:	3301      	adds	r3, #1
 801c7c6:	e000      	b.n	801c7ca <dir_register+0xda>
 801c7c8:	2301      	movs	r3, #1
 801c7ca:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801c7cc:	6a39      	ldr	r1, [r7, #32]
 801c7ce:	6878      	ldr	r0, [r7, #4]
 801c7d0:	f7ff fbb6 	bl	801bf40 <dir_alloc>
 801c7d4:	4603      	mov	r3, r0
 801c7d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801c7da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	d148      	bne.n	801c874 <dir_register+0x184>
 801c7e2:	6a3b      	ldr	r3, [r7, #32]
 801c7e4:	3b01      	subs	r3, #1
 801c7e6:	623b      	str	r3, [r7, #32]
 801c7e8:	6a3b      	ldr	r3, [r7, #32]
 801c7ea:	2b00      	cmp	r3, #0
 801c7ec:	d042      	beq.n	801c874 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	695a      	ldr	r2, [r3, #20]
 801c7f2:	6a3b      	ldr	r3, [r7, #32]
 801c7f4:	015b      	lsls	r3, r3, #5
 801c7f6:	1ad3      	subs	r3, r2, r3
 801c7f8:	4619      	mov	r1, r3
 801c7fa:	6878      	ldr	r0, [r7, #4]
 801c7fc:	f7ff fa41 	bl	801bc82 <dir_sdi>
 801c800:	4603      	mov	r3, r0
 801c802:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c806:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d132      	bne.n	801c874 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801c80e:	687b      	ldr	r3, [r7, #4]
 801c810:	3324      	adds	r3, #36	@ 0x24
 801c812:	4618      	mov	r0, r3
 801c814:	f7ff fde4 	bl	801c3e0 <sum_sfn>
 801c818:	4603      	mov	r3, r0
 801c81a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801c81c:	687b      	ldr	r3, [r7, #4]
 801c81e:	69db      	ldr	r3, [r3, #28]
 801c820:	4619      	mov	r1, r3
 801c822:	69f8      	ldr	r0, [r7, #28]
 801c824:	f7fe fe4e 	bl	801b4c4 <move_window>
 801c828:	4603      	mov	r3, r0
 801c82a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801c82e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c832:	2b00      	cmp	r3, #0
 801c834:	d11d      	bne.n	801c872 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801c836:	69fb      	ldr	r3, [r7, #28]
 801c838:	6918      	ldr	r0, [r3, #16]
 801c83a:	687b      	ldr	r3, [r7, #4]
 801c83c:	6a19      	ldr	r1, [r3, #32]
 801c83e:	6a3b      	ldr	r3, [r7, #32]
 801c840:	b2da      	uxtb	r2, r3
 801c842:	7efb      	ldrb	r3, [r7, #27]
 801c844:	f7ff fcd6 	bl	801c1f4 <put_lfn>
				fs->wflag = 1;
 801c848:	69fb      	ldr	r3, [r7, #28]
 801c84a:	2201      	movs	r2, #1
 801c84c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801c84e:	2100      	movs	r1, #0
 801c850:	6878      	ldr	r0, [r7, #4]
 801c852:	f7ff fa9f 	bl	801bd94 <dir_next>
 801c856:	4603      	mov	r3, r0
 801c858:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801c85c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c860:	2b00      	cmp	r3, #0
 801c862:	d107      	bne.n	801c874 <dir_register+0x184>
 801c864:	6a3b      	ldr	r3, [r7, #32]
 801c866:	3b01      	subs	r3, #1
 801c868:	623b      	str	r3, [r7, #32]
 801c86a:	6a3b      	ldr	r3, [r7, #32]
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d1d5      	bne.n	801c81c <dir_register+0x12c>
 801c870:	e000      	b.n	801c874 <dir_register+0x184>
				if (res != FR_OK) break;
 801c872:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c874:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c878:	2b00      	cmp	r3, #0
 801c87a:	d128      	bne.n	801c8ce <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801c87c:	687b      	ldr	r3, [r7, #4]
 801c87e:	69db      	ldr	r3, [r3, #28]
 801c880:	4619      	mov	r1, r3
 801c882:	69f8      	ldr	r0, [r7, #28]
 801c884:	f7fe fe1e 	bl	801b4c4 <move_window>
 801c888:	4603      	mov	r3, r0
 801c88a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c88e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c892:	2b00      	cmp	r3, #0
 801c894:	d11b      	bne.n	801c8ce <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c896:	687b      	ldr	r3, [r7, #4]
 801c898:	6a1b      	ldr	r3, [r3, #32]
 801c89a:	2220      	movs	r2, #32
 801c89c:	2100      	movs	r1, #0
 801c89e:	4618      	mov	r0, r3
 801c8a0:	f7fe fc03 	bl	801b0aa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	6a18      	ldr	r0, [r3, #32]
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	3324      	adds	r3, #36	@ 0x24
 801c8ac:	220b      	movs	r2, #11
 801c8ae:	4619      	mov	r1, r3
 801c8b0:	f7fe fbda 	bl	801b068 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	6a1b      	ldr	r3, [r3, #32]
 801c8be:	330c      	adds	r3, #12
 801c8c0:	f002 0218 	and.w	r2, r2, #24
 801c8c4:	b2d2      	uxtb	r2, r2
 801c8c6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801c8c8:	69fb      	ldr	r3, [r7, #28]
 801c8ca:	2201      	movs	r2, #1
 801c8cc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c8ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801c8d2:	4618      	mov	r0, r3
 801c8d4:	3730      	adds	r7, #48	@ 0x30
 801c8d6:	46bd      	mov	sp, r7
 801c8d8:	bd80      	pop	{r7, pc}
 801c8da:	bf00      	nop
 801c8dc:	4ec4ec4f 	.word	0x4ec4ec4f

0801c8e0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c8e0:	b580      	push	{r7, lr}
 801c8e2:	b086      	sub	sp, #24
 801c8e4:	af00      	add	r7, sp, #0
 801c8e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	681b      	ldr	r3, [r3, #0]
 801c8ec:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	695b      	ldr	r3, [r3, #20]
 801c8f2:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c8fc:	d007      	beq.n	801c90e <dir_remove+0x2e>
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c902:	4619      	mov	r1, r3
 801c904:	6878      	ldr	r0, [r7, #4]
 801c906:	f7ff f9bc 	bl	801bc82 <dir_sdi>
 801c90a:	4603      	mov	r3, r0
 801c90c:	e000      	b.n	801c910 <dir_remove+0x30>
 801c90e:	2300      	movs	r3, #0
 801c910:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c912:	7dfb      	ldrb	r3, [r7, #23]
 801c914:	2b00      	cmp	r3, #0
 801c916:	d128      	bne.n	801c96a <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	69db      	ldr	r3, [r3, #28]
 801c91c:	4619      	mov	r1, r3
 801c91e:	6938      	ldr	r0, [r7, #16]
 801c920:	f7fe fdd0 	bl	801b4c4 <move_window>
 801c924:	4603      	mov	r3, r0
 801c926:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c928:	7dfb      	ldrb	r3, [r7, #23]
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d115      	bne.n	801c95a <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	6a1b      	ldr	r3, [r3, #32]
 801c932:	22e5      	movs	r2, #229	@ 0xe5
 801c934:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801c936:	693b      	ldr	r3, [r7, #16]
 801c938:	2201      	movs	r2, #1
 801c93a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	695b      	ldr	r3, [r3, #20]
 801c940:	68fa      	ldr	r2, [r7, #12]
 801c942:	429a      	cmp	r2, r3
 801c944:	d90b      	bls.n	801c95e <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801c946:	2100      	movs	r1, #0
 801c948:	6878      	ldr	r0, [r7, #4]
 801c94a:	f7ff fa23 	bl	801bd94 <dir_next>
 801c94e:	4603      	mov	r3, r0
 801c950:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801c952:	7dfb      	ldrb	r3, [r7, #23]
 801c954:	2b00      	cmp	r3, #0
 801c956:	d0df      	beq.n	801c918 <dir_remove+0x38>
 801c958:	e002      	b.n	801c960 <dir_remove+0x80>
			if (res != FR_OK) break;
 801c95a:	bf00      	nop
 801c95c:	e000      	b.n	801c960 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c95e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c960:	7dfb      	ldrb	r3, [r7, #23]
 801c962:	2b04      	cmp	r3, #4
 801c964:	d101      	bne.n	801c96a <dir_remove+0x8a>
 801c966:	2302      	movs	r3, #2
 801c968:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801c96a:	7dfb      	ldrb	r3, [r7, #23]
}
 801c96c:	4618      	mov	r0, r3
 801c96e:	3718      	adds	r7, #24
 801c970:	46bd      	mov	sp, r7
 801c972:	bd80      	pop	{r7, pc}

0801c974 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c974:	b580      	push	{r7, lr}
 801c976:	b08a      	sub	sp, #40	@ 0x28
 801c978:	af00      	add	r7, sp, #0
 801c97a:	6078      	str	r0, [r7, #4]
 801c97c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801c97e:	683b      	ldr	r3, [r7, #0]
 801c980:	681b      	ldr	r3, [r3, #0]
 801c982:	613b      	str	r3, [r7, #16]
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	681b      	ldr	r3, [r3, #0]
 801c988:	691b      	ldr	r3, [r3, #16]
 801c98a:	60fb      	str	r3, [r7, #12]
 801c98c:	2300      	movs	r3, #0
 801c98e:	617b      	str	r3, [r7, #20]
 801c990:	697b      	ldr	r3, [r7, #20]
 801c992:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801c994:	69bb      	ldr	r3, [r7, #24]
 801c996:	1c5a      	adds	r2, r3, #1
 801c998:	61ba      	str	r2, [r7, #24]
 801c99a:	693a      	ldr	r2, [r7, #16]
 801c99c:	4413      	add	r3, r2
 801c99e:	781b      	ldrb	r3, [r3, #0]
 801c9a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801c9a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c9a4:	2b1f      	cmp	r3, #31
 801c9a6:	d940      	bls.n	801ca2a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801c9a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c9aa:	2b2f      	cmp	r3, #47	@ 0x2f
 801c9ac:	d006      	beq.n	801c9bc <create_name+0x48>
 801c9ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c9b0:	2b5c      	cmp	r3, #92	@ 0x5c
 801c9b2:	d110      	bne.n	801c9d6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801c9b4:	e002      	b.n	801c9bc <create_name+0x48>
 801c9b6:	69bb      	ldr	r3, [r7, #24]
 801c9b8:	3301      	adds	r3, #1
 801c9ba:	61bb      	str	r3, [r7, #24]
 801c9bc:	693a      	ldr	r2, [r7, #16]
 801c9be:	69bb      	ldr	r3, [r7, #24]
 801c9c0:	4413      	add	r3, r2
 801c9c2:	781b      	ldrb	r3, [r3, #0]
 801c9c4:	2b2f      	cmp	r3, #47	@ 0x2f
 801c9c6:	d0f6      	beq.n	801c9b6 <create_name+0x42>
 801c9c8:	693a      	ldr	r2, [r7, #16]
 801c9ca:	69bb      	ldr	r3, [r7, #24]
 801c9cc:	4413      	add	r3, r2
 801c9ce:	781b      	ldrb	r3, [r3, #0]
 801c9d0:	2b5c      	cmp	r3, #92	@ 0x5c
 801c9d2:	d0f0      	beq.n	801c9b6 <create_name+0x42>
			break;
 801c9d4:	e02a      	b.n	801ca2c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801c9d6:	697b      	ldr	r3, [r7, #20]
 801c9d8:	2bfe      	cmp	r3, #254	@ 0xfe
 801c9da:	d901      	bls.n	801c9e0 <create_name+0x6c>
 801c9dc:	2306      	movs	r3, #6
 801c9de:	e17d      	b.n	801ccdc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801c9e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c9e2:	b2db      	uxtb	r3, r3
 801c9e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801c9e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c9e8:	2101      	movs	r1, #1
 801c9ea:	4618      	mov	r0, r3
 801c9ec:	f001 fa98 	bl	801df20 <ff_convert>
 801c9f0:	4603      	mov	r3, r0
 801c9f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801c9f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d101      	bne.n	801c9fe <create_name+0x8a>
 801c9fa:	2306      	movs	r3, #6
 801c9fc:	e16e      	b.n	801ccdc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801c9fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca00:	2b7f      	cmp	r3, #127	@ 0x7f
 801ca02:	d809      	bhi.n	801ca18 <create_name+0xa4>
 801ca04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca06:	4619      	mov	r1, r3
 801ca08:	488d      	ldr	r0, [pc, #564]	@ (801cc40 <create_name+0x2cc>)
 801ca0a:	f7fe fb90 	bl	801b12e <chk_chr>
 801ca0e:	4603      	mov	r3, r0
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d001      	beq.n	801ca18 <create_name+0xa4>
 801ca14:	2306      	movs	r3, #6
 801ca16:	e161      	b.n	801ccdc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801ca18:	697b      	ldr	r3, [r7, #20]
 801ca1a:	1c5a      	adds	r2, r3, #1
 801ca1c:	617a      	str	r2, [r7, #20]
 801ca1e:	005b      	lsls	r3, r3, #1
 801ca20:	68fa      	ldr	r2, [r7, #12]
 801ca22:	4413      	add	r3, r2
 801ca24:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ca26:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801ca28:	e7b4      	b.n	801c994 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801ca2a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801ca2c:	693a      	ldr	r2, [r7, #16]
 801ca2e:	69bb      	ldr	r3, [r7, #24]
 801ca30:	441a      	add	r2, r3
 801ca32:	683b      	ldr	r3, [r7, #0]
 801ca34:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801ca36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca38:	2b1f      	cmp	r3, #31
 801ca3a:	d801      	bhi.n	801ca40 <create_name+0xcc>
 801ca3c:	2304      	movs	r3, #4
 801ca3e:	e000      	b.n	801ca42 <create_name+0xce>
 801ca40:	2300      	movs	r3, #0
 801ca42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801ca46:	e011      	b.n	801ca6c <create_name+0xf8>
		w = lfn[di - 1];
 801ca48:	697a      	ldr	r2, [r7, #20]
 801ca4a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801ca4e:	4413      	add	r3, r2
 801ca50:	005b      	lsls	r3, r3, #1
 801ca52:	68fa      	ldr	r2, [r7, #12]
 801ca54:	4413      	add	r3, r2
 801ca56:	881b      	ldrh	r3, [r3, #0]
 801ca58:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801ca5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca5c:	2b20      	cmp	r3, #32
 801ca5e:	d002      	beq.n	801ca66 <create_name+0xf2>
 801ca60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca62:	2b2e      	cmp	r3, #46	@ 0x2e
 801ca64:	d106      	bne.n	801ca74 <create_name+0x100>
		di--;
 801ca66:	697b      	ldr	r3, [r7, #20]
 801ca68:	3b01      	subs	r3, #1
 801ca6a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801ca6c:	697b      	ldr	r3, [r7, #20]
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d1ea      	bne.n	801ca48 <create_name+0xd4>
 801ca72:	e000      	b.n	801ca76 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801ca74:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801ca76:	697b      	ldr	r3, [r7, #20]
 801ca78:	005b      	lsls	r3, r3, #1
 801ca7a:	68fa      	ldr	r2, [r7, #12]
 801ca7c:	4413      	add	r3, r2
 801ca7e:	2200      	movs	r2, #0
 801ca80:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801ca82:	697b      	ldr	r3, [r7, #20]
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	d101      	bne.n	801ca8c <create_name+0x118>
 801ca88:	2306      	movs	r3, #6
 801ca8a:	e127      	b.n	801ccdc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	3324      	adds	r3, #36	@ 0x24
 801ca90:	220b      	movs	r2, #11
 801ca92:	2120      	movs	r1, #32
 801ca94:	4618      	mov	r0, r3
 801ca96:	f7fe fb08 	bl	801b0aa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801ca9a:	2300      	movs	r3, #0
 801ca9c:	61bb      	str	r3, [r7, #24]
 801ca9e:	e002      	b.n	801caa6 <create_name+0x132>
 801caa0:	69bb      	ldr	r3, [r7, #24]
 801caa2:	3301      	adds	r3, #1
 801caa4:	61bb      	str	r3, [r7, #24]
 801caa6:	69bb      	ldr	r3, [r7, #24]
 801caa8:	005b      	lsls	r3, r3, #1
 801caaa:	68fa      	ldr	r2, [r7, #12]
 801caac:	4413      	add	r3, r2
 801caae:	881b      	ldrh	r3, [r3, #0]
 801cab0:	2b20      	cmp	r3, #32
 801cab2:	d0f5      	beq.n	801caa0 <create_name+0x12c>
 801cab4:	69bb      	ldr	r3, [r7, #24]
 801cab6:	005b      	lsls	r3, r3, #1
 801cab8:	68fa      	ldr	r2, [r7, #12]
 801caba:	4413      	add	r3, r2
 801cabc:	881b      	ldrh	r3, [r3, #0]
 801cabe:	2b2e      	cmp	r3, #46	@ 0x2e
 801cac0:	d0ee      	beq.n	801caa0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801cac2:	69bb      	ldr	r3, [r7, #24]
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	d009      	beq.n	801cadc <create_name+0x168>
 801cac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cacc:	f043 0303 	orr.w	r3, r3, #3
 801cad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801cad4:	e002      	b.n	801cadc <create_name+0x168>
 801cad6:	697b      	ldr	r3, [r7, #20]
 801cad8:	3b01      	subs	r3, #1
 801cada:	617b      	str	r3, [r7, #20]
 801cadc:	697b      	ldr	r3, [r7, #20]
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d009      	beq.n	801caf6 <create_name+0x182>
 801cae2:	697a      	ldr	r2, [r7, #20]
 801cae4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801cae8:	4413      	add	r3, r2
 801caea:	005b      	lsls	r3, r3, #1
 801caec:	68fa      	ldr	r2, [r7, #12]
 801caee:	4413      	add	r3, r2
 801caf0:	881b      	ldrh	r3, [r3, #0]
 801caf2:	2b2e      	cmp	r3, #46	@ 0x2e
 801caf4:	d1ef      	bne.n	801cad6 <create_name+0x162>

	i = b = 0; ni = 8;
 801caf6:	2300      	movs	r3, #0
 801caf8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cafc:	2300      	movs	r3, #0
 801cafe:	623b      	str	r3, [r7, #32]
 801cb00:	2308      	movs	r3, #8
 801cb02:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801cb04:	69bb      	ldr	r3, [r7, #24]
 801cb06:	1c5a      	adds	r2, r3, #1
 801cb08:	61ba      	str	r2, [r7, #24]
 801cb0a:	005b      	lsls	r3, r3, #1
 801cb0c:	68fa      	ldr	r2, [r7, #12]
 801cb0e:	4413      	add	r3, r2
 801cb10:	881b      	ldrh	r3, [r3, #0]
 801cb12:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801cb14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	f000 8090 	beq.w	801cc3c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801cb1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb1e:	2b20      	cmp	r3, #32
 801cb20:	d006      	beq.n	801cb30 <create_name+0x1bc>
 801cb22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb24:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb26:	d10a      	bne.n	801cb3e <create_name+0x1ca>
 801cb28:	69ba      	ldr	r2, [r7, #24]
 801cb2a:	697b      	ldr	r3, [r7, #20]
 801cb2c:	429a      	cmp	r2, r3
 801cb2e:	d006      	beq.n	801cb3e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801cb30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb34:	f043 0303 	orr.w	r3, r3, #3
 801cb38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cb3c:	e07d      	b.n	801cc3a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801cb3e:	6a3a      	ldr	r2, [r7, #32]
 801cb40:	69fb      	ldr	r3, [r7, #28]
 801cb42:	429a      	cmp	r2, r3
 801cb44:	d203      	bcs.n	801cb4e <create_name+0x1da>
 801cb46:	69ba      	ldr	r2, [r7, #24]
 801cb48:	697b      	ldr	r3, [r7, #20]
 801cb4a:	429a      	cmp	r2, r3
 801cb4c:	d123      	bne.n	801cb96 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801cb4e:	69fb      	ldr	r3, [r7, #28]
 801cb50:	2b0b      	cmp	r3, #11
 801cb52:	d106      	bne.n	801cb62 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801cb54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb58:	f043 0303 	orr.w	r3, r3, #3
 801cb5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cb60:	e075      	b.n	801cc4e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801cb62:	69ba      	ldr	r2, [r7, #24]
 801cb64:	697b      	ldr	r3, [r7, #20]
 801cb66:	429a      	cmp	r2, r3
 801cb68:	d005      	beq.n	801cb76 <create_name+0x202>
 801cb6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb6e:	f043 0303 	orr.w	r3, r3, #3
 801cb72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801cb76:	69ba      	ldr	r2, [r7, #24]
 801cb78:	697b      	ldr	r3, [r7, #20]
 801cb7a:	429a      	cmp	r2, r3
 801cb7c:	d866      	bhi.n	801cc4c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801cb7e:	697b      	ldr	r3, [r7, #20]
 801cb80:	61bb      	str	r3, [r7, #24]
 801cb82:	2308      	movs	r3, #8
 801cb84:	623b      	str	r3, [r7, #32]
 801cb86:	230b      	movs	r3, #11
 801cb88:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801cb8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cb8e:	009b      	lsls	r3, r3, #2
 801cb90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cb94:	e051      	b.n	801cc3a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801cb96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb98:	2b7f      	cmp	r3, #127	@ 0x7f
 801cb9a:	d914      	bls.n	801cbc6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801cb9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb9e:	2100      	movs	r1, #0
 801cba0:	4618      	mov	r0, r3
 801cba2:	f001 f9bd 	bl	801df20 <ff_convert>
 801cba6:	4603      	mov	r3, r0
 801cba8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801cbaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	d004      	beq.n	801cbba <create_name+0x246>
 801cbb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbb2:	3b80      	subs	r3, #128	@ 0x80
 801cbb4:	4a23      	ldr	r2, [pc, #140]	@ (801cc44 <create_name+0x2d0>)
 801cbb6:	5cd3      	ldrb	r3, [r2, r3]
 801cbb8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801cbba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbbe:	f043 0302 	orr.w	r3, r3, #2
 801cbc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801cbc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbc8:	2b00      	cmp	r3, #0
 801cbca:	d007      	beq.n	801cbdc <create_name+0x268>
 801cbcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbce:	4619      	mov	r1, r3
 801cbd0:	481d      	ldr	r0, [pc, #116]	@ (801cc48 <create_name+0x2d4>)
 801cbd2:	f7fe faac 	bl	801b12e <chk_chr>
 801cbd6:	4603      	mov	r3, r0
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	d008      	beq.n	801cbee <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801cbdc:	235f      	movs	r3, #95	@ 0x5f
 801cbde:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801cbe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbe4:	f043 0303 	orr.w	r3, r3, #3
 801cbe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cbec:	e01b      	b.n	801cc26 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801cbee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbf0:	2b40      	cmp	r3, #64	@ 0x40
 801cbf2:	d909      	bls.n	801cc08 <create_name+0x294>
 801cbf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbf6:	2b5a      	cmp	r3, #90	@ 0x5a
 801cbf8:	d806      	bhi.n	801cc08 <create_name+0x294>
					b |= 2;
 801cbfa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cbfe:	f043 0302 	orr.w	r3, r3, #2
 801cc02:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cc06:	e00e      	b.n	801cc26 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801cc08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc0a:	2b60      	cmp	r3, #96	@ 0x60
 801cc0c:	d90b      	bls.n	801cc26 <create_name+0x2b2>
 801cc0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc10:	2b7a      	cmp	r3, #122	@ 0x7a
 801cc12:	d808      	bhi.n	801cc26 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801cc14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc18:	f043 0301 	orr.w	r3, r3, #1
 801cc1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cc20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc22:	3b20      	subs	r3, #32
 801cc24:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801cc26:	6a3b      	ldr	r3, [r7, #32]
 801cc28:	1c5a      	adds	r2, r3, #1
 801cc2a:	623a      	str	r2, [r7, #32]
 801cc2c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801cc2e:	b2d1      	uxtb	r1, r2
 801cc30:	687a      	ldr	r2, [r7, #4]
 801cc32:	4413      	add	r3, r2
 801cc34:	460a      	mov	r2, r1
 801cc36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801cc3a:	e763      	b.n	801cb04 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801cc3c:	bf00      	nop
 801cc3e:	e006      	b.n	801cc4e <create_name+0x2da>
 801cc40:	0801e98c 	.word	0x0801e98c
 801cc44:	0801ea24 	.word	0x0801ea24
 801cc48:	0801e998 	.word	0x0801e998
			if (si > di) break;			/* No extension */
 801cc4c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801cc54:	2be5      	cmp	r3, #229	@ 0xe5
 801cc56:	d103      	bne.n	801cc60 <create_name+0x2ec>
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	2205      	movs	r2, #5
 801cc5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801cc60:	69fb      	ldr	r3, [r7, #28]
 801cc62:	2b08      	cmp	r3, #8
 801cc64:	d104      	bne.n	801cc70 <create_name+0x2fc>
 801cc66:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc6a:	009b      	lsls	r3, r3, #2
 801cc6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801cc70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc74:	f003 030c 	and.w	r3, r3, #12
 801cc78:	2b0c      	cmp	r3, #12
 801cc7a:	d005      	beq.n	801cc88 <create_name+0x314>
 801cc7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc80:	f003 0303 	and.w	r3, r3, #3
 801cc84:	2b03      	cmp	r3, #3
 801cc86:	d105      	bne.n	801cc94 <create_name+0x320>
 801cc88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc8c:	f043 0302 	orr.w	r3, r3, #2
 801cc90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801cc94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc98:	f003 0302 	and.w	r3, r3, #2
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	d117      	bne.n	801ccd0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801cca0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cca4:	f003 0303 	and.w	r3, r3, #3
 801cca8:	2b01      	cmp	r3, #1
 801ccaa:	d105      	bne.n	801ccb8 <create_name+0x344>
 801ccac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ccb0:	f043 0310 	orr.w	r3, r3, #16
 801ccb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801ccb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ccbc:	f003 030c 	and.w	r3, r3, #12
 801ccc0:	2b04      	cmp	r3, #4
 801ccc2:	d105      	bne.n	801ccd0 <create_name+0x35c>
 801ccc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ccc8:	f043 0308 	orr.w	r3, r3, #8
 801cccc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801ccd6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801ccda:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801ccdc:	4618      	mov	r0, r3
 801ccde:	3728      	adds	r7, #40	@ 0x28
 801cce0:	46bd      	mov	sp, r7
 801cce2:	bd80      	pop	{r7, pc}

0801cce4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801cce4:	b580      	push	{r7, lr}
 801cce6:	b086      	sub	sp, #24
 801cce8:	af00      	add	r7, sp, #0
 801ccea:	6078      	str	r0, [r7, #4]
 801ccec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801ccee:	687b      	ldr	r3, [r7, #4]
 801ccf0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801ccf2:	693b      	ldr	r3, [r7, #16]
 801ccf4:	681b      	ldr	r3, [r3, #0]
 801ccf6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801ccf8:	e002      	b.n	801cd00 <follow_path+0x1c>
 801ccfa:	683b      	ldr	r3, [r7, #0]
 801ccfc:	3301      	adds	r3, #1
 801ccfe:	603b      	str	r3, [r7, #0]
 801cd00:	683b      	ldr	r3, [r7, #0]
 801cd02:	781b      	ldrb	r3, [r3, #0]
 801cd04:	2b2f      	cmp	r3, #47	@ 0x2f
 801cd06:	d0f8      	beq.n	801ccfa <follow_path+0x16>
 801cd08:	683b      	ldr	r3, [r7, #0]
 801cd0a:	781b      	ldrb	r3, [r3, #0]
 801cd0c:	2b5c      	cmp	r3, #92	@ 0x5c
 801cd0e:	d0f4      	beq.n	801ccfa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801cd10:	693b      	ldr	r3, [r7, #16]
 801cd12:	2200      	movs	r2, #0
 801cd14:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801cd16:	683b      	ldr	r3, [r7, #0]
 801cd18:	781b      	ldrb	r3, [r3, #0]
 801cd1a:	2b1f      	cmp	r3, #31
 801cd1c:	d80a      	bhi.n	801cd34 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	2280      	movs	r2, #128	@ 0x80
 801cd22:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801cd26:	2100      	movs	r1, #0
 801cd28:	6878      	ldr	r0, [r7, #4]
 801cd2a:	f7fe ffaa 	bl	801bc82 <dir_sdi>
 801cd2e:	4603      	mov	r3, r0
 801cd30:	75fb      	strb	r3, [r7, #23]
 801cd32:	e048      	b.n	801cdc6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801cd34:	463b      	mov	r3, r7
 801cd36:	4619      	mov	r1, r3
 801cd38:	6878      	ldr	r0, [r7, #4]
 801cd3a:	f7ff fe1b 	bl	801c974 <create_name>
 801cd3e:	4603      	mov	r3, r0
 801cd40:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801cd42:	7dfb      	ldrb	r3, [r7, #23]
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d139      	bne.n	801cdbc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801cd48:	6878      	ldr	r0, [r7, #4]
 801cd4a:	f7ff fc11 	bl	801c570 <dir_find>
 801cd4e:	4603      	mov	r3, r0
 801cd50:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801cd58:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801cd5a:	7dfb      	ldrb	r3, [r7, #23]
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d00a      	beq.n	801cd76 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801cd60:	7dfb      	ldrb	r3, [r7, #23]
 801cd62:	2b04      	cmp	r3, #4
 801cd64:	d12c      	bne.n	801cdc0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801cd66:	7afb      	ldrb	r3, [r7, #11]
 801cd68:	f003 0304 	and.w	r3, r3, #4
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d127      	bne.n	801cdc0 <follow_path+0xdc>
 801cd70:	2305      	movs	r3, #5
 801cd72:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801cd74:	e024      	b.n	801cdc0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801cd76:	7afb      	ldrb	r3, [r7, #11]
 801cd78:	f003 0304 	and.w	r3, r3, #4
 801cd7c:	2b00      	cmp	r3, #0
 801cd7e:	d121      	bne.n	801cdc4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801cd80:	693b      	ldr	r3, [r7, #16]
 801cd82:	799b      	ldrb	r3, [r3, #6]
 801cd84:	f003 0310 	and.w	r3, r3, #16
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d102      	bne.n	801cd92 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801cd8c:	2305      	movs	r3, #5
 801cd8e:	75fb      	strb	r3, [r7, #23]
 801cd90:	e019      	b.n	801cdc6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801cd92:	68fb      	ldr	r3, [r7, #12]
 801cd94:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	695b      	ldr	r3, [r3, #20]
 801cd9c:	68fa      	ldr	r2, [r7, #12]
 801cd9e:	8992      	ldrh	r2, [r2, #12]
 801cda0:	fbb3 f0f2 	udiv	r0, r3, r2
 801cda4:	fb00 f202 	mul.w	r2, r0, r2
 801cda8:	1a9b      	subs	r3, r3, r2
 801cdaa:	440b      	add	r3, r1
 801cdac:	4619      	mov	r1, r3
 801cdae:	68f8      	ldr	r0, [r7, #12]
 801cdb0:	f7ff f90d 	bl	801bfce <ld_clust>
 801cdb4:	4602      	mov	r2, r0
 801cdb6:	693b      	ldr	r3, [r7, #16]
 801cdb8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801cdba:	e7bb      	b.n	801cd34 <follow_path+0x50>
			if (res != FR_OK) break;
 801cdbc:	bf00      	nop
 801cdbe:	e002      	b.n	801cdc6 <follow_path+0xe2>
				break;
 801cdc0:	bf00      	nop
 801cdc2:	e000      	b.n	801cdc6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801cdc4:	bf00      	nop
			}
		}
	}

	return res;
 801cdc6:	7dfb      	ldrb	r3, [r7, #23]
}
 801cdc8:	4618      	mov	r0, r3
 801cdca:	3718      	adds	r7, #24
 801cdcc:	46bd      	mov	sp, r7
 801cdce:	bd80      	pop	{r7, pc}

0801cdd0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801cdd0:	b480      	push	{r7}
 801cdd2:	b087      	sub	sp, #28
 801cdd4:	af00      	add	r7, sp, #0
 801cdd6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801cdd8:	f04f 33ff 	mov.w	r3, #4294967295
 801cddc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801cdde:	687b      	ldr	r3, [r7, #4]
 801cde0:	681b      	ldr	r3, [r3, #0]
 801cde2:	2b00      	cmp	r3, #0
 801cde4:	d031      	beq.n	801ce4a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801cde6:	687b      	ldr	r3, [r7, #4]
 801cde8:	681b      	ldr	r3, [r3, #0]
 801cdea:	617b      	str	r3, [r7, #20]
 801cdec:	e002      	b.n	801cdf4 <get_ldnumber+0x24>
 801cdee:	697b      	ldr	r3, [r7, #20]
 801cdf0:	3301      	adds	r3, #1
 801cdf2:	617b      	str	r3, [r7, #20]
 801cdf4:	697b      	ldr	r3, [r7, #20]
 801cdf6:	781b      	ldrb	r3, [r3, #0]
 801cdf8:	2b1f      	cmp	r3, #31
 801cdfa:	d903      	bls.n	801ce04 <get_ldnumber+0x34>
 801cdfc:	697b      	ldr	r3, [r7, #20]
 801cdfe:	781b      	ldrb	r3, [r3, #0]
 801ce00:	2b3a      	cmp	r3, #58	@ 0x3a
 801ce02:	d1f4      	bne.n	801cdee <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801ce04:	697b      	ldr	r3, [r7, #20]
 801ce06:	781b      	ldrb	r3, [r3, #0]
 801ce08:	2b3a      	cmp	r3, #58	@ 0x3a
 801ce0a:	d11c      	bne.n	801ce46 <get_ldnumber+0x76>
			tp = *path;
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	681b      	ldr	r3, [r3, #0]
 801ce10:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801ce12:	68fb      	ldr	r3, [r7, #12]
 801ce14:	1c5a      	adds	r2, r3, #1
 801ce16:	60fa      	str	r2, [r7, #12]
 801ce18:	781b      	ldrb	r3, [r3, #0]
 801ce1a:	3b30      	subs	r3, #48	@ 0x30
 801ce1c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801ce1e:	68bb      	ldr	r3, [r7, #8]
 801ce20:	2b09      	cmp	r3, #9
 801ce22:	d80e      	bhi.n	801ce42 <get_ldnumber+0x72>
 801ce24:	68fa      	ldr	r2, [r7, #12]
 801ce26:	697b      	ldr	r3, [r7, #20]
 801ce28:	429a      	cmp	r2, r3
 801ce2a:	d10a      	bne.n	801ce42 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801ce2c:	68bb      	ldr	r3, [r7, #8]
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d107      	bne.n	801ce42 <get_ldnumber+0x72>
					vol = (int)i;
 801ce32:	68bb      	ldr	r3, [r7, #8]
 801ce34:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801ce36:	697b      	ldr	r3, [r7, #20]
 801ce38:	3301      	adds	r3, #1
 801ce3a:	617b      	str	r3, [r7, #20]
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	697a      	ldr	r2, [r7, #20]
 801ce40:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801ce42:	693b      	ldr	r3, [r7, #16]
 801ce44:	e002      	b.n	801ce4c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801ce46:	2300      	movs	r3, #0
 801ce48:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801ce4a:	693b      	ldr	r3, [r7, #16]
}
 801ce4c:	4618      	mov	r0, r3
 801ce4e:	371c      	adds	r7, #28
 801ce50:	46bd      	mov	sp, r7
 801ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce56:	4770      	bx	lr

0801ce58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801ce58:	b580      	push	{r7, lr}
 801ce5a:	b082      	sub	sp, #8
 801ce5c:	af00      	add	r7, sp, #0
 801ce5e:	6078      	str	r0, [r7, #4]
 801ce60:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	2200      	movs	r2, #0
 801ce66:	70da      	strb	r2, [r3, #3]
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	f04f 32ff 	mov.w	r2, #4294967295
 801ce6e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801ce70:	6839      	ldr	r1, [r7, #0]
 801ce72:	6878      	ldr	r0, [r7, #4]
 801ce74:	f7fe fb26 	bl	801b4c4 <move_window>
 801ce78:	4603      	mov	r3, r0
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	d001      	beq.n	801ce82 <check_fs+0x2a>
 801ce7e:	2304      	movs	r3, #4
 801ce80:	e038      	b.n	801cef4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	3338      	adds	r3, #56	@ 0x38
 801ce86:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801ce8a:	4618      	mov	r0, r3
 801ce8c:	f7fe f86a 	bl	801af64 <ld_word>
 801ce90:	4603      	mov	r3, r0
 801ce92:	461a      	mov	r2, r3
 801ce94:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801ce98:	429a      	cmp	r2, r3
 801ce9a:	d001      	beq.n	801cea0 <check_fs+0x48>
 801ce9c:	2303      	movs	r3, #3
 801ce9e:	e029      	b.n	801cef4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cea6:	2be9      	cmp	r3, #233	@ 0xe9
 801cea8:	d009      	beq.n	801cebe <check_fs+0x66>
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801ceb0:	2beb      	cmp	r3, #235	@ 0xeb
 801ceb2:	d11e      	bne.n	801cef2 <check_fs+0x9a>
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801ceba:	2b90      	cmp	r3, #144	@ 0x90
 801cebc:	d119      	bne.n	801cef2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801cebe:	687b      	ldr	r3, [r7, #4]
 801cec0:	3338      	adds	r3, #56	@ 0x38
 801cec2:	3336      	adds	r3, #54	@ 0x36
 801cec4:	4618      	mov	r0, r3
 801cec6:	f7fe f865 	bl	801af94 <ld_dword>
 801ceca:	4603      	mov	r3, r0
 801cecc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801ced0:	4a0a      	ldr	r2, [pc, #40]	@ (801cefc <check_fs+0xa4>)
 801ced2:	4293      	cmp	r3, r2
 801ced4:	d101      	bne.n	801ceda <check_fs+0x82>
 801ced6:	2300      	movs	r3, #0
 801ced8:	e00c      	b.n	801cef4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	3338      	adds	r3, #56	@ 0x38
 801cede:	3352      	adds	r3, #82	@ 0x52
 801cee0:	4618      	mov	r0, r3
 801cee2:	f7fe f857 	bl	801af94 <ld_dword>
 801cee6:	4603      	mov	r3, r0
 801cee8:	4a05      	ldr	r2, [pc, #20]	@ (801cf00 <check_fs+0xa8>)
 801ceea:	4293      	cmp	r3, r2
 801ceec:	d101      	bne.n	801cef2 <check_fs+0x9a>
 801ceee:	2300      	movs	r3, #0
 801cef0:	e000      	b.n	801cef4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801cef2:	2302      	movs	r3, #2
}
 801cef4:	4618      	mov	r0, r3
 801cef6:	3708      	adds	r7, #8
 801cef8:	46bd      	mov	sp, r7
 801cefa:	bd80      	pop	{r7, pc}
 801cefc:	00544146 	.word	0x00544146
 801cf00:	33544146 	.word	0x33544146

0801cf04 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801cf04:	b580      	push	{r7, lr}
 801cf06:	b096      	sub	sp, #88	@ 0x58
 801cf08:	af00      	add	r7, sp, #0
 801cf0a:	60f8      	str	r0, [r7, #12]
 801cf0c:	60b9      	str	r1, [r7, #8]
 801cf0e:	4613      	mov	r3, r2
 801cf10:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801cf12:	68bb      	ldr	r3, [r7, #8]
 801cf14:	2200      	movs	r2, #0
 801cf16:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801cf18:	68f8      	ldr	r0, [r7, #12]
 801cf1a:	f7ff ff59 	bl	801cdd0 <get_ldnumber>
 801cf1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801cf20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cf22:	2b00      	cmp	r3, #0
 801cf24:	da01      	bge.n	801cf2a <find_volume+0x26>
 801cf26:	230b      	movs	r3, #11
 801cf28:	e265      	b.n	801d3f6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801cf2a:	4a9f      	ldr	r2, [pc, #636]	@ (801d1a8 <find_volume+0x2a4>)
 801cf2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cf2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cf32:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801cf34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d101      	bne.n	801cf3e <find_volume+0x3a>
 801cf3a:	230c      	movs	r3, #12
 801cf3c:	e25b      	b.n	801d3f6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801cf3e:	68bb      	ldr	r3, [r7, #8]
 801cf40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cf42:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801cf44:	79fb      	ldrb	r3, [r7, #7]
 801cf46:	f023 0301 	bic.w	r3, r3, #1
 801cf4a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801cf4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf4e:	781b      	ldrb	r3, [r3, #0]
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d01a      	beq.n	801cf8a <find_volume+0x86>
		stat = disk_status(fs->drv);
 801cf54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf56:	785b      	ldrb	r3, [r3, #1]
 801cf58:	4618      	mov	r0, r3
 801cf5a:	f7fd ff63 	bl	801ae24 <disk_status>
 801cf5e:	4603      	mov	r3, r0
 801cf60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801cf64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cf68:	f003 0301 	and.w	r3, r3, #1
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	d10c      	bne.n	801cf8a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801cf70:	79fb      	ldrb	r3, [r7, #7]
 801cf72:	2b00      	cmp	r3, #0
 801cf74:	d007      	beq.n	801cf86 <find_volume+0x82>
 801cf76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cf7a:	f003 0304 	and.w	r3, r3, #4
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d001      	beq.n	801cf86 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801cf82:	230a      	movs	r3, #10
 801cf84:	e237      	b.n	801d3f6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801cf86:	2300      	movs	r3, #0
 801cf88:	e235      	b.n	801d3f6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801cf8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf8c:	2200      	movs	r2, #0
 801cf8e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801cf90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cf92:	b2da      	uxtb	r2, r3
 801cf94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf96:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801cf98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf9a:	785b      	ldrb	r3, [r3, #1]
 801cf9c:	4618      	mov	r0, r3
 801cf9e:	f7fd ff5b 	bl	801ae58 <disk_initialize>
 801cfa2:	4603      	mov	r3, r0
 801cfa4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801cfa8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cfac:	f003 0301 	and.w	r3, r3, #1
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	d001      	beq.n	801cfb8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801cfb4:	2303      	movs	r3, #3
 801cfb6:	e21e      	b.n	801d3f6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801cfb8:	79fb      	ldrb	r3, [r7, #7]
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	d007      	beq.n	801cfce <find_volume+0xca>
 801cfbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cfc2:	f003 0304 	and.w	r3, r3, #4
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d001      	beq.n	801cfce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801cfca:	230a      	movs	r3, #10
 801cfcc:	e213      	b.n	801d3f6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801cfce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfd0:	7858      	ldrb	r0, [r3, #1]
 801cfd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfd4:	330c      	adds	r3, #12
 801cfd6:	461a      	mov	r2, r3
 801cfd8:	2102      	movs	r1, #2
 801cfda:	f7fd ffa5 	bl	801af28 <disk_ioctl>
 801cfde:	4603      	mov	r3, r0
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	d001      	beq.n	801cfe8 <find_volume+0xe4>
 801cfe4:	2301      	movs	r3, #1
 801cfe6:	e206      	b.n	801d3f6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801cfe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfea:	899b      	ldrh	r3, [r3, #12]
 801cfec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801cff0:	d80d      	bhi.n	801d00e <find_volume+0x10a>
 801cff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cff4:	899b      	ldrh	r3, [r3, #12]
 801cff6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cffa:	d308      	bcc.n	801d00e <find_volume+0x10a>
 801cffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cffe:	899b      	ldrh	r3, [r3, #12]
 801d000:	461a      	mov	r2, r3
 801d002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d004:	899b      	ldrh	r3, [r3, #12]
 801d006:	3b01      	subs	r3, #1
 801d008:	4013      	ands	r3, r2
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	d001      	beq.n	801d012 <find_volume+0x10e>
 801d00e:	2301      	movs	r3, #1
 801d010:	e1f1      	b.n	801d3f6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801d012:	2300      	movs	r3, #0
 801d014:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801d016:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d018:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d01a:	f7ff ff1d 	bl	801ce58 <check_fs>
 801d01e:	4603      	mov	r3, r0
 801d020:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801d024:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d028:	2b02      	cmp	r3, #2
 801d02a:	d149      	bne.n	801d0c0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d02c:	2300      	movs	r3, #0
 801d02e:	643b      	str	r3, [r7, #64]	@ 0x40
 801d030:	e01e      	b.n	801d070 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801d032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d034:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801d038:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d03a:	011b      	lsls	r3, r3, #4
 801d03c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801d040:	4413      	add	r3, r2
 801d042:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801d044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d046:	3304      	adds	r3, #4
 801d048:	781b      	ldrb	r3, [r3, #0]
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d006      	beq.n	801d05c <find_volume+0x158>
 801d04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d050:	3308      	adds	r3, #8
 801d052:	4618      	mov	r0, r3
 801d054:	f7fd ff9e 	bl	801af94 <ld_dword>
 801d058:	4602      	mov	r2, r0
 801d05a:	e000      	b.n	801d05e <find_volume+0x15a>
 801d05c:	2200      	movs	r2, #0
 801d05e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d060:	009b      	lsls	r3, r3, #2
 801d062:	3358      	adds	r3, #88	@ 0x58
 801d064:	443b      	add	r3, r7
 801d066:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d06a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d06c:	3301      	adds	r3, #1
 801d06e:	643b      	str	r3, [r7, #64]	@ 0x40
 801d070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d072:	2b03      	cmp	r3, #3
 801d074:	d9dd      	bls.n	801d032 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801d076:	2300      	movs	r3, #0
 801d078:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801d07a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	d002      	beq.n	801d086 <find_volume+0x182>
 801d080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d082:	3b01      	subs	r3, #1
 801d084:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801d086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d088:	009b      	lsls	r3, r3, #2
 801d08a:	3358      	adds	r3, #88	@ 0x58
 801d08c:	443b      	add	r3, r7
 801d08e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801d092:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801d094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d096:	2b00      	cmp	r3, #0
 801d098:	d005      	beq.n	801d0a6 <find_volume+0x1a2>
 801d09a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d09c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d09e:	f7ff fedb 	bl	801ce58 <check_fs>
 801d0a2:	4603      	mov	r3, r0
 801d0a4:	e000      	b.n	801d0a8 <find_volume+0x1a4>
 801d0a6:	2303      	movs	r3, #3
 801d0a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801d0ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d0b0:	2b01      	cmp	r3, #1
 801d0b2:	d905      	bls.n	801d0c0 <find_volume+0x1bc>
 801d0b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0b6:	3301      	adds	r3, #1
 801d0b8:	643b      	str	r3, [r7, #64]	@ 0x40
 801d0ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0bc:	2b03      	cmp	r3, #3
 801d0be:	d9e2      	bls.n	801d086 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801d0c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d0c4:	2b04      	cmp	r3, #4
 801d0c6:	d101      	bne.n	801d0cc <find_volume+0x1c8>
 801d0c8:	2301      	movs	r3, #1
 801d0ca:	e194      	b.n	801d3f6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801d0cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d0d0:	2b01      	cmp	r3, #1
 801d0d2:	d901      	bls.n	801d0d8 <find_volume+0x1d4>
 801d0d4:	230d      	movs	r3, #13
 801d0d6:	e18e      	b.n	801d3f6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801d0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0da:	3338      	adds	r3, #56	@ 0x38
 801d0dc:	330b      	adds	r3, #11
 801d0de:	4618      	mov	r0, r3
 801d0e0:	f7fd ff40 	bl	801af64 <ld_word>
 801d0e4:	4603      	mov	r3, r0
 801d0e6:	461a      	mov	r2, r3
 801d0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0ea:	899b      	ldrh	r3, [r3, #12]
 801d0ec:	429a      	cmp	r2, r3
 801d0ee:	d001      	beq.n	801d0f4 <find_volume+0x1f0>
 801d0f0:	230d      	movs	r3, #13
 801d0f2:	e180      	b.n	801d3f6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801d0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0f6:	3338      	adds	r3, #56	@ 0x38
 801d0f8:	3316      	adds	r3, #22
 801d0fa:	4618      	mov	r0, r3
 801d0fc:	f7fd ff32 	bl	801af64 <ld_word>
 801d100:	4603      	mov	r3, r0
 801d102:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801d104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d106:	2b00      	cmp	r3, #0
 801d108:	d106      	bne.n	801d118 <find_volume+0x214>
 801d10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d10c:	3338      	adds	r3, #56	@ 0x38
 801d10e:	3324      	adds	r3, #36	@ 0x24
 801d110:	4618      	mov	r0, r3
 801d112:	f7fd ff3f 	bl	801af94 <ld_dword>
 801d116:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801d118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d11a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d11c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801d11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d120:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801d124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d126:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801d128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d12a:	789b      	ldrb	r3, [r3, #2]
 801d12c:	2b01      	cmp	r3, #1
 801d12e:	d005      	beq.n	801d13c <find_volume+0x238>
 801d130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d132:	789b      	ldrb	r3, [r3, #2]
 801d134:	2b02      	cmp	r3, #2
 801d136:	d001      	beq.n	801d13c <find_volume+0x238>
 801d138:	230d      	movs	r3, #13
 801d13a:	e15c      	b.n	801d3f6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801d13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d13e:	789b      	ldrb	r3, [r3, #2]
 801d140:	461a      	mov	r2, r3
 801d142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d144:	fb02 f303 	mul.w	r3, r2, r3
 801d148:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801d14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d14c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801d150:	461a      	mov	r2, r3
 801d152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d154:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801d156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d158:	895b      	ldrh	r3, [r3, #10]
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	d008      	beq.n	801d170 <find_volume+0x26c>
 801d15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d160:	895b      	ldrh	r3, [r3, #10]
 801d162:	461a      	mov	r2, r3
 801d164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d166:	895b      	ldrh	r3, [r3, #10]
 801d168:	3b01      	subs	r3, #1
 801d16a:	4013      	ands	r3, r2
 801d16c:	2b00      	cmp	r3, #0
 801d16e:	d001      	beq.n	801d174 <find_volume+0x270>
 801d170:	230d      	movs	r3, #13
 801d172:	e140      	b.n	801d3f6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801d174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d176:	3338      	adds	r3, #56	@ 0x38
 801d178:	3311      	adds	r3, #17
 801d17a:	4618      	mov	r0, r3
 801d17c:	f7fd fef2 	bl	801af64 <ld_word>
 801d180:	4603      	mov	r3, r0
 801d182:	461a      	mov	r2, r3
 801d184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d186:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801d188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d18a:	891b      	ldrh	r3, [r3, #8]
 801d18c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d18e:	8992      	ldrh	r2, [r2, #12]
 801d190:	0952      	lsrs	r2, r2, #5
 801d192:	b292      	uxth	r2, r2
 801d194:	fbb3 f1f2 	udiv	r1, r3, r2
 801d198:	fb01 f202 	mul.w	r2, r1, r2
 801d19c:	1a9b      	subs	r3, r3, r2
 801d19e:	b29b      	uxth	r3, r3
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	d003      	beq.n	801d1ac <find_volume+0x2a8>
 801d1a4:	230d      	movs	r3, #13
 801d1a6:	e126      	b.n	801d3f6 <find_volume+0x4f2>
 801d1a8:	24000550 	.word	0x24000550

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801d1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1ae:	3338      	adds	r3, #56	@ 0x38
 801d1b0:	3313      	adds	r3, #19
 801d1b2:	4618      	mov	r0, r3
 801d1b4:	f7fd fed6 	bl	801af64 <ld_word>
 801d1b8:	4603      	mov	r3, r0
 801d1ba:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801d1bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d1be:	2b00      	cmp	r3, #0
 801d1c0:	d106      	bne.n	801d1d0 <find_volume+0x2cc>
 801d1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1c4:	3338      	adds	r3, #56	@ 0x38
 801d1c6:	3320      	adds	r3, #32
 801d1c8:	4618      	mov	r0, r3
 801d1ca:	f7fd fee3 	bl	801af94 <ld_dword>
 801d1ce:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801d1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1d2:	3338      	adds	r3, #56	@ 0x38
 801d1d4:	330e      	adds	r3, #14
 801d1d6:	4618      	mov	r0, r3
 801d1d8:	f7fd fec4 	bl	801af64 <ld_word>
 801d1dc:	4603      	mov	r3, r0
 801d1de:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801d1e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	d101      	bne.n	801d1ea <find_volume+0x2e6>
 801d1e6:	230d      	movs	r3, #13
 801d1e8:	e105      	b.n	801d3f6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801d1ea:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d1ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d1ee:	4413      	add	r3, r2
 801d1f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d1f2:	8911      	ldrh	r1, [r2, #8]
 801d1f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d1f6:	8992      	ldrh	r2, [r2, #12]
 801d1f8:	0952      	lsrs	r2, r2, #5
 801d1fa:	b292      	uxth	r2, r2
 801d1fc:	fbb1 f2f2 	udiv	r2, r1, r2
 801d200:	b292      	uxth	r2, r2
 801d202:	4413      	add	r3, r2
 801d204:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801d206:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d20a:	429a      	cmp	r2, r3
 801d20c:	d201      	bcs.n	801d212 <find_volume+0x30e>
 801d20e:	230d      	movs	r3, #13
 801d210:	e0f1      	b.n	801d3f6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801d212:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d216:	1ad3      	subs	r3, r2, r3
 801d218:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d21a:	8952      	ldrh	r2, [r2, #10]
 801d21c:	fbb3 f3f2 	udiv	r3, r3, r2
 801d220:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801d222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d224:	2b00      	cmp	r3, #0
 801d226:	d101      	bne.n	801d22c <find_volume+0x328>
 801d228:	230d      	movs	r3, #13
 801d22a:	e0e4      	b.n	801d3f6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 801d22c:	2303      	movs	r3, #3
 801d22e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801d232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d234:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801d238:	4293      	cmp	r3, r2
 801d23a:	d802      	bhi.n	801d242 <find_volume+0x33e>
 801d23c:	2302      	movs	r3, #2
 801d23e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801d242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d244:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801d248:	4293      	cmp	r3, r2
 801d24a:	d802      	bhi.n	801d252 <find_volume+0x34e>
 801d24c:	2301      	movs	r3, #1
 801d24e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801d252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d254:	1c9a      	adds	r2, r3, #2
 801d256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d258:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801d25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d25c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d25e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801d260:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d264:	441a      	add	r2, r3
 801d266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d268:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801d26a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d26e:	441a      	add	r2, r3
 801d270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d272:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801d274:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d278:	2b03      	cmp	r3, #3
 801d27a:	d11e      	bne.n	801d2ba <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801d27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d27e:	3338      	adds	r3, #56	@ 0x38
 801d280:	332a      	adds	r3, #42	@ 0x2a
 801d282:	4618      	mov	r0, r3
 801d284:	f7fd fe6e 	bl	801af64 <ld_word>
 801d288:	4603      	mov	r3, r0
 801d28a:	2b00      	cmp	r3, #0
 801d28c:	d001      	beq.n	801d292 <find_volume+0x38e>
 801d28e:	230d      	movs	r3, #13
 801d290:	e0b1      	b.n	801d3f6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801d292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d294:	891b      	ldrh	r3, [r3, #8]
 801d296:	2b00      	cmp	r3, #0
 801d298:	d001      	beq.n	801d29e <find_volume+0x39a>
 801d29a:	230d      	movs	r3, #13
 801d29c:	e0ab      	b.n	801d3f6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801d29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2a0:	3338      	adds	r3, #56	@ 0x38
 801d2a2:	332c      	adds	r3, #44	@ 0x2c
 801d2a4:	4618      	mov	r0, r3
 801d2a6:	f7fd fe75 	bl	801af94 <ld_dword>
 801d2aa:	4602      	mov	r2, r0
 801d2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2ae:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801d2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2b2:	69db      	ldr	r3, [r3, #28]
 801d2b4:	009b      	lsls	r3, r3, #2
 801d2b6:	647b      	str	r3, [r7, #68]	@ 0x44
 801d2b8:	e01f      	b.n	801d2fa <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801d2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2bc:	891b      	ldrh	r3, [r3, #8]
 801d2be:	2b00      	cmp	r3, #0
 801d2c0:	d101      	bne.n	801d2c6 <find_volume+0x3c2>
 801d2c2:	230d      	movs	r3, #13
 801d2c4:	e097      	b.n	801d3f6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801d2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d2ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d2cc:	441a      	add	r2, r3
 801d2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2d0:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801d2d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d2d6:	2b02      	cmp	r3, #2
 801d2d8:	d103      	bne.n	801d2e2 <find_volume+0x3de>
 801d2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2dc:	69db      	ldr	r3, [r3, #28]
 801d2de:	005b      	lsls	r3, r3, #1
 801d2e0:	e00a      	b.n	801d2f8 <find_volume+0x3f4>
 801d2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2e4:	69da      	ldr	r2, [r3, #28]
 801d2e6:	4613      	mov	r3, r2
 801d2e8:	005b      	lsls	r3, r3, #1
 801d2ea:	4413      	add	r3, r2
 801d2ec:	085a      	lsrs	r2, r3, #1
 801d2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2f0:	69db      	ldr	r3, [r3, #28]
 801d2f2:	f003 0301 	and.w	r3, r3, #1
 801d2f6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801d2f8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801d2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2fc:	6a1a      	ldr	r2, [r3, #32]
 801d2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d300:	899b      	ldrh	r3, [r3, #12]
 801d302:	4619      	mov	r1, r3
 801d304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d306:	440b      	add	r3, r1
 801d308:	3b01      	subs	r3, #1
 801d30a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d30c:	8989      	ldrh	r1, [r1, #12]
 801d30e:	fbb3 f3f1 	udiv	r3, r3, r1
 801d312:	429a      	cmp	r2, r3
 801d314:	d201      	bcs.n	801d31a <find_volume+0x416>
 801d316:	230d      	movs	r3, #13
 801d318:	e06d      	b.n	801d3f6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801d31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d31c:	f04f 32ff 	mov.w	r2, #4294967295
 801d320:	619a      	str	r2, [r3, #24]
 801d322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d324:	699a      	ldr	r2, [r3, #24]
 801d326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d328:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801d32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d32c:	2280      	movs	r2, #128	@ 0x80
 801d32e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801d330:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d334:	2b03      	cmp	r3, #3
 801d336:	d149      	bne.n	801d3cc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801d338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d33a:	3338      	adds	r3, #56	@ 0x38
 801d33c:	3330      	adds	r3, #48	@ 0x30
 801d33e:	4618      	mov	r0, r3
 801d340:	f7fd fe10 	bl	801af64 <ld_word>
 801d344:	4603      	mov	r3, r0
 801d346:	2b01      	cmp	r3, #1
 801d348:	d140      	bne.n	801d3cc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801d34a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d34c:	3301      	adds	r3, #1
 801d34e:	4619      	mov	r1, r3
 801d350:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d352:	f7fe f8b7 	bl	801b4c4 <move_window>
 801d356:	4603      	mov	r3, r0
 801d358:	2b00      	cmp	r3, #0
 801d35a:	d137      	bne.n	801d3cc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801d35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d35e:	2200      	movs	r2, #0
 801d360:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801d362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d364:	3338      	adds	r3, #56	@ 0x38
 801d366:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801d36a:	4618      	mov	r0, r3
 801d36c:	f7fd fdfa 	bl	801af64 <ld_word>
 801d370:	4603      	mov	r3, r0
 801d372:	461a      	mov	r2, r3
 801d374:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801d378:	429a      	cmp	r2, r3
 801d37a:	d127      	bne.n	801d3cc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801d37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d37e:	3338      	adds	r3, #56	@ 0x38
 801d380:	4618      	mov	r0, r3
 801d382:	f7fd fe07 	bl	801af94 <ld_dword>
 801d386:	4603      	mov	r3, r0
 801d388:	4a1d      	ldr	r2, [pc, #116]	@ (801d400 <find_volume+0x4fc>)
 801d38a:	4293      	cmp	r3, r2
 801d38c:	d11e      	bne.n	801d3cc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801d38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d390:	3338      	adds	r3, #56	@ 0x38
 801d392:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801d396:	4618      	mov	r0, r3
 801d398:	f7fd fdfc 	bl	801af94 <ld_dword>
 801d39c:	4603      	mov	r3, r0
 801d39e:	4a19      	ldr	r2, [pc, #100]	@ (801d404 <find_volume+0x500>)
 801d3a0:	4293      	cmp	r3, r2
 801d3a2:	d113      	bne.n	801d3cc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801d3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3a6:	3338      	adds	r3, #56	@ 0x38
 801d3a8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801d3ac:	4618      	mov	r0, r3
 801d3ae:	f7fd fdf1 	bl	801af94 <ld_dword>
 801d3b2:	4602      	mov	r2, r0
 801d3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3b6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801d3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3ba:	3338      	adds	r3, #56	@ 0x38
 801d3bc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801d3c0:	4618      	mov	r0, r3
 801d3c2:	f7fd fde7 	bl	801af94 <ld_dword>
 801d3c6:	4602      	mov	r2, r0
 801d3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3ca:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801d3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3ce:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801d3d2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801d3d4:	4b0c      	ldr	r3, [pc, #48]	@ (801d408 <find_volume+0x504>)
 801d3d6:	881b      	ldrh	r3, [r3, #0]
 801d3d8:	3301      	adds	r3, #1
 801d3da:	b29a      	uxth	r2, r3
 801d3dc:	4b0a      	ldr	r3, [pc, #40]	@ (801d408 <find_volume+0x504>)
 801d3de:	801a      	strh	r2, [r3, #0]
 801d3e0:	4b09      	ldr	r3, [pc, #36]	@ (801d408 <find_volume+0x504>)
 801d3e2:	881a      	ldrh	r2, [r3, #0]
 801d3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3e6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801d3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3ea:	4a08      	ldr	r2, [pc, #32]	@ (801d40c <find_volume+0x508>)
 801d3ec:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801d3ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d3f0:	f7fe f800 	bl	801b3f4 <clear_lock>
#endif
	return FR_OK;
 801d3f4:	2300      	movs	r3, #0
}
 801d3f6:	4618      	mov	r0, r3
 801d3f8:	3758      	adds	r7, #88	@ 0x58
 801d3fa:	46bd      	mov	sp, r7
 801d3fc:	bd80      	pop	{r7, pc}
 801d3fe:	bf00      	nop
 801d400:	41615252 	.word	0x41615252
 801d404:	61417272 	.word	0x61417272
 801d408:	24000554 	.word	0x24000554
 801d40c:	24000568 	.word	0x24000568

0801d410 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801d410:	b580      	push	{r7, lr}
 801d412:	b084      	sub	sp, #16
 801d414:	af00      	add	r7, sp, #0
 801d416:	6078      	str	r0, [r7, #4]
 801d418:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801d41a:	2309      	movs	r3, #9
 801d41c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	2b00      	cmp	r3, #0
 801d422:	d01c      	beq.n	801d45e <validate+0x4e>
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	681b      	ldr	r3, [r3, #0]
 801d428:	2b00      	cmp	r3, #0
 801d42a:	d018      	beq.n	801d45e <validate+0x4e>
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	681b      	ldr	r3, [r3, #0]
 801d430:	781b      	ldrb	r3, [r3, #0]
 801d432:	2b00      	cmp	r3, #0
 801d434:	d013      	beq.n	801d45e <validate+0x4e>
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	889a      	ldrh	r2, [r3, #4]
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	681b      	ldr	r3, [r3, #0]
 801d43e:	88db      	ldrh	r3, [r3, #6]
 801d440:	429a      	cmp	r2, r3
 801d442:	d10c      	bne.n	801d45e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801d444:	687b      	ldr	r3, [r7, #4]
 801d446:	681b      	ldr	r3, [r3, #0]
 801d448:	785b      	ldrb	r3, [r3, #1]
 801d44a:	4618      	mov	r0, r3
 801d44c:	f7fd fcea 	bl	801ae24 <disk_status>
 801d450:	4603      	mov	r3, r0
 801d452:	f003 0301 	and.w	r3, r3, #1
 801d456:	2b00      	cmp	r3, #0
 801d458:	d101      	bne.n	801d45e <validate+0x4e>
			res = FR_OK;
 801d45a:	2300      	movs	r3, #0
 801d45c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801d45e:	7bfb      	ldrb	r3, [r7, #15]
 801d460:	2b00      	cmp	r3, #0
 801d462:	d102      	bne.n	801d46a <validate+0x5a>
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	681b      	ldr	r3, [r3, #0]
 801d468:	e000      	b.n	801d46c <validate+0x5c>
 801d46a:	2300      	movs	r3, #0
 801d46c:	683a      	ldr	r2, [r7, #0]
 801d46e:	6013      	str	r3, [r2, #0]
	return res;
 801d470:	7bfb      	ldrb	r3, [r7, #15]
}
 801d472:	4618      	mov	r0, r3
 801d474:	3710      	adds	r7, #16
 801d476:	46bd      	mov	sp, r7
 801d478:	bd80      	pop	{r7, pc}
	...

0801d47c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801d47c:	b580      	push	{r7, lr}
 801d47e:	b088      	sub	sp, #32
 801d480:	af00      	add	r7, sp, #0
 801d482:	60f8      	str	r0, [r7, #12]
 801d484:	60b9      	str	r1, [r7, #8]
 801d486:	4613      	mov	r3, r2
 801d488:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801d48a:	68bb      	ldr	r3, [r7, #8]
 801d48c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801d48e:	f107 0310 	add.w	r3, r7, #16
 801d492:	4618      	mov	r0, r3
 801d494:	f7ff fc9c 	bl	801cdd0 <get_ldnumber>
 801d498:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801d49a:	69fb      	ldr	r3, [r7, #28]
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	da01      	bge.n	801d4a4 <f_mount+0x28>
 801d4a0:	230b      	movs	r3, #11
 801d4a2:	e02b      	b.n	801d4fc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801d4a4:	4a17      	ldr	r2, [pc, #92]	@ (801d504 <f_mount+0x88>)
 801d4a6:	69fb      	ldr	r3, [r7, #28]
 801d4a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d4ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801d4ae:	69bb      	ldr	r3, [r7, #24]
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	d005      	beq.n	801d4c0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801d4b4:	69b8      	ldr	r0, [r7, #24]
 801d4b6:	f7fd ff9d 	bl	801b3f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801d4ba:	69bb      	ldr	r3, [r7, #24]
 801d4bc:	2200      	movs	r2, #0
 801d4be:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801d4c0:	68fb      	ldr	r3, [r7, #12]
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	d002      	beq.n	801d4cc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801d4c6:	68fb      	ldr	r3, [r7, #12]
 801d4c8:	2200      	movs	r2, #0
 801d4ca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801d4cc:	68fa      	ldr	r2, [r7, #12]
 801d4ce:	490d      	ldr	r1, [pc, #52]	@ (801d504 <f_mount+0x88>)
 801d4d0:	69fb      	ldr	r3, [r7, #28]
 801d4d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801d4d6:	68fb      	ldr	r3, [r7, #12]
 801d4d8:	2b00      	cmp	r3, #0
 801d4da:	d002      	beq.n	801d4e2 <f_mount+0x66>
 801d4dc:	79fb      	ldrb	r3, [r7, #7]
 801d4de:	2b01      	cmp	r3, #1
 801d4e0:	d001      	beq.n	801d4e6 <f_mount+0x6a>
 801d4e2:	2300      	movs	r3, #0
 801d4e4:	e00a      	b.n	801d4fc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801d4e6:	f107 010c 	add.w	r1, r7, #12
 801d4ea:	f107 0308 	add.w	r3, r7, #8
 801d4ee:	2200      	movs	r2, #0
 801d4f0:	4618      	mov	r0, r3
 801d4f2:	f7ff fd07 	bl	801cf04 <find_volume>
 801d4f6:	4603      	mov	r3, r0
 801d4f8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801d4fa:	7dfb      	ldrb	r3, [r7, #23]
}
 801d4fc:	4618      	mov	r0, r3
 801d4fe:	3720      	adds	r7, #32
 801d500:	46bd      	mov	sp, r7
 801d502:	bd80      	pop	{r7, pc}
 801d504:	24000550 	.word	0x24000550

0801d508 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801d508:	b580      	push	{r7, lr}
 801d50a:	b09a      	sub	sp, #104	@ 0x68
 801d50c:	af00      	add	r7, sp, #0
 801d50e:	60f8      	str	r0, [r7, #12]
 801d510:	60b9      	str	r1, [r7, #8]
 801d512:	4613      	mov	r3, r2
 801d514:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801d516:	68fb      	ldr	r3, [r7, #12]
 801d518:	2b00      	cmp	r3, #0
 801d51a:	d101      	bne.n	801d520 <f_open+0x18>
 801d51c:	2309      	movs	r3, #9
 801d51e:	e1b7      	b.n	801d890 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801d520:	79fb      	ldrb	r3, [r7, #7]
 801d522:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d526:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801d528:	79fa      	ldrb	r2, [r7, #7]
 801d52a:	f107 0114 	add.w	r1, r7, #20
 801d52e:	f107 0308 	add.w	r3, r7, #8
 801d532:	4618      	mov	r0, r3
 801d534:	f7ff fce6 	bl	801cf04 <find_volume>
 801d538:	4603      	mov	r3, r0
 801d53a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801d53e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d542:	2b00      	cmp	r3, #0
 801d544:	f040 819b 	bne.w	801d87e <f_open+0x376>
		dj.obj.fs = fs;
 801d548:	697b      	ldr	r3, [r7, #20]
 801d54a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d54c:	68ba      	ldr	r2, [r7, #8]
 801d54e:	f107 0318 	add.w	r3, r7, #24
 801d552:	4611      	mov	r1, r2
 801d554:	4618      	mov	r0, r3
 801d556:	f7ff fbc5 	bl	801cce4 <follow_path>
 801d55a:	4603      	mov	r3, r0
 801d55c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801d560:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d564:	2b00      	cmp	r3, #0
 801d566:	d118      	bne.n	801d59a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801d568:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801d56c:	b25b      	sxtb	r3, r3
 801d56e:	2b00      	cmp	r3, #0
 801d570:	da03      	bge.n	801d57a <f_open+0x72>
				res = FR_INVALID_NAME;
 801d572:	2306      	movs	r3, #6
 801d574:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d578:	e00f      	b.n	801d59a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d57a:	79fb      	ldrb	r3, [r7, #7]
 801d57c:	2b01      	cmp	r3, #1
 801d57e:	bf8c      	ite	hi
 801d580:	2301      	movhi	r3, #1
 801d582:	2300      	movls	r3, #0
 801d584:	b2db      	uxtb	r3, r3
 801d586:	461a      	mov	r2, r3
 801d588:	f107 0318 	add.w	r3, r7, #24
 801d58c:	4611      	mov	r1, r2
 801d58e:	4618      	mov	r0, r3
 801d590:	f7fd fde8 	bl	801b164 <chk_lock>
 801d594:	4603      	mov	r3, r0
 801d596:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801d59a:	79fb      	ldrb	r3, [r7, #7]
 801d59c:	f003 031c 	and.w	r3, r3, #28
 801d5a0:	2b00      	cmp	r3, #0
 801d5a2:	d07f      	beq.n	801d6a4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801d5a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	d017      	beq.n	801d5dc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801d5ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d5b0:	2b04      	cmp	r3, #4
 801d5b2:	d10e      	bne.n	801d5d2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801d5b4:	f7fd fe32 	bl	801b21c <enq_lock>
 801d5b8:	4603      	mov	r3, r0
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	d006      	beq.n	801d5cc <f_open+0xc4>
 801d5be:	f107 0318 	add.w	r3, r7, #24
 801d5c2:	4618      	mov	r0, r3
 801d5c4:	f7ff f894 	bl	801c6f0 <dir_register>
 801d5c8:	4603      	mov	r3, r0
 801d5ca:	e000      	b.n	801d5ce <f_open+0xc6>
 801d5cc:	2312      	movs	r3, #18
 801d5ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801d5d2:	79fb      	ldrb	r3, [r7, #7]
 801d5d4:	f043 0308 	orr.w	r3, r3, #8
 801d5d8:	71fb      	strb	r3, [r7, #7]
 801d5da:	e010      	b.n	801d5fe <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801d5dc:	7fbb      	ldrb	r3, [r7, #30]
 801d5de:	f003 0311 	and.w	r3, r3, #17
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	d003      	beq.n	801d5ee <f_open+0xe6>
					res = FR_DENIED;
 801d5e6:	2307      	movs	r3, #7
 801d5e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d5ec:	e007      	b.n	801d5fe <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801d5ee:	79fb      	ldrb	r3, [r7, #7]
 801d5f0:	f003 0304 	and.w	r3, r3, #4
 801d5f4:	2b00      	cmp	r3, #0
 801d5f6:	d002      	beq.n	801d5fe <f_open+0xf6>
 801d5f8:	2308      	movs	r3, #8
 801d5fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801d5fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d602:	2b00      	cmp	r3, #0
 801d604:	d168      	bne.n	801d6d8 <f_open+0x1d0>
 801d606:	79fb      	ldrb	r3, [r7, #7]
 801d608:	f003 0308 	and.w	r3, r3, #8
 801d60c:	2b00      	cmp	r3, #0
 801d60e:	d063      	beq.n	801d6d8 <f_open+0x1d0>
				dw = GET_FATTIME();
 801d610:	f7fd fbaa 	bl	801ad68 <get_fattime>
 801d614:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801d616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d618:	330e      	adds	r3, #14
 801d61a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d61c:	4618      	mov	r0, r3
 801d61e:	f7fd fcf7 	bl	801b010 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801d622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d624:	3316      	adds	r3, #22
 801d626:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d628:	4618      	mov	r0, r3
 801d62a:	f7fd fcf1 	bl	801b010 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801d62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d630:	330b      	adds	r3, #11
 801d632:	2220      	movs	r2, #32
 801d634:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801d636:	697b      	ldr	r3, [r7, #20]
 801d638:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d63a:	4611      	mov	r1, r2
 801d63c:	4618      	mov	r0, r3
 801d63e:	f7fe fcc6 	bl	801bfce <ld_clust>
 801d642:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801d644:	697b      	ldr	r3, [r7, #20]
 801d646:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d648:	2200      	movs	r2, #0
 801d64a:	4618      	mov	r0, r3
 801d64c:	f7fe fcde 	bl	801c00c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801d650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d652:	331c      	adds	r3, #28
 801d654:	2100      	movs	r1, #0
 801d656:	4618      	mov	r0, r3
 801d658:	f7fd fcda 	bl	801b010 <st_dword>
					fs->wflag = 1;
 801d65c:	697b      	ldr	r3, [r7, #20]
 801d65e:	2201      	movs	r2, #1
 801d660:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801d662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d664:	2b00      	cmp	r3, #0
 801d666:	d037      	beq.n	801d6d8 <f_open+0x1d0>
						dw = fs->winsect;
 801d668:	697b      	ldr	r3, [r7, #20]
 801d66a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d66c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801d66e:	f107 0318 	add.w	r3, r7, #24
 801d672:	2200      	movs	r2, #0
 801d674:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d676:	4618      	mov	r0, r3
 801d678:	f7fe f9ce 	bl	801ba18 <remove_chain>
 801d67c:	4603      	mov	r3, r0
 801d67e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801d682:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d686:	2b00      	cmp	r3, #0
 801d688:	d126      	bne.n	801d6d8 <f_open+0x1d0>
							res = move_window(fs, dw);
 801d68a:	697b      	ldr	r3, [r7, #20]
 801d68c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d68e:	4618      	mov	r0, r3
 801d690:	f7fd ff18 	bl	801b4c4 <move_window>
 801d694:	4603      	mov	r3, r0
 801d696:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801d69a:	697b      	ldr	r3, [r7, #20]
 801d69c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d69e:	3a01      	subs	r2, #1
 801d6a0:	615a      	str	r2, [r3, #20]
 801d6a2:	e019      	b.n	801d6d8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801d6a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	d115      	bne.n	801d6d8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801d6ac:	7fbb      	ldrb	r3, [r7, #30]
 801d6ae:	f003 0310 	and.w	r3, r3, #16
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d003      	beq.n	801d6be <f_open+0x1b6>
					res = FR_NO_FILE;
 801d6b6:	2304      	movs	r3, #4
 801d6b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d6bc:	e00c      	b.n	801d6d8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801d6be:	79fb      	ldrb	r3, [r7, #7]
 801d6c0:	f003 0302 	and.w	r3, r3, #2
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	d007      	beq.n	801d6d8 <f_open+0x1d0>
 801d6c8:	7fbb      	ldrb	r3, [r7, #30]
 801d6ca:	f003 0301 	and.w	r3, r3, #1
 801d6ce:	2b00      	cmp	r3, #0
 801d6d0:	d002      	beq.n	801d6d8 <f_open+0x1d0>
						res = FR_DENIED;
 801d6d2:	2307      	movs	r3, #7
 801d6d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801d6d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d6dc:	2b00      	cmp	r3, #0
 801d6de:	d126      	bne.n	801d72e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801d6e0:	79fb      	ldrb	r3, [r7, #7]
 801d6e2:	f003 0308 	and.w	r3, r3, #8
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	d003      	beq.n	801d6f2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801d6ea:	79fb      	ldrb	r3, [r7, #7]
 801d6ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d6f0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801d6f2:	697b      	ldr	r3, [r7, #20]
 801d6f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d6f6:	68fb      	ldr	r3, [r7, #12]
 801d6f8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801d6fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d6fc:	68fb      	ldr	r3, [r7, #12]
 801d6fe:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d700:	79fb      	ldrb	r3, [r7, #7]
 801d702:	2b01      	cmp	r3, #1
 801d704:	bf8c      	ite	hi
 801d706:	2301      	movhi	r3, #1
 801d708:	2300      	movls	r3, #0
 801d70a:	b2db      	uxtb	r3, r3
 801d70c:	461a      	mov	r2, r3
 801d70e:	f107 0318 	add.w	r3, r7, #24
 801d712:	4611      	mov	r1, r2
 801d714:	4618      	mov	r0, r3
 801d716:	f7fd fda3 	bl	801b260 <inc_lock>
 801d71a:	4602      	mov	r2, r0
 801d71c:	68fb      	ldr	r3, [r7, #12]
 801d71e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801d720:	68fb      	ldr	r3, [r7, #12]
 801d722:	691b      	ldr	r3, [r3, #16]
 801d724:	2b00      	cmp	r3, #0
 801d726:	d102      	bne.n	801d72e <f_open+0x226>
 801d728:	2302      	movs	r3, #2
 801d72a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801d72e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d732:	2b00      	cmp	r3, #0
 801d734:	f040 80a3 	bne.w	801d87e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801d738:	697b      	ldr	r3, [r7, #20]
 801d73a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d73c:	4611      	mov	r1, r2
 801d73e:	4618      	mov	r0, r3
 801d740:	f7fe fc45 	bl	801bfce <ld_clust>
 801d744:	4602      	mov	r2, r0
 801d746:	68fb      	ldr	r3, [r7, #12]
 801d748:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801d74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d74c:	331c      	adds	r3, #28
 801d74e:	4618      	mov	r0, r3
 801d750:	f7fd fc20 	bl	801af94 <ld_dword>
 801d754:	4602      	mov	r2, r0
 801d756:	68fb      	ldr	r3, [r7, #12]
 801d758:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801d75a:	68fb      	ldr	r3, [r7, #12]
 801d75c:	2200      	movs	r2, #0
 801d75e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801d760:	697a      	ldr	r2, [r7, #20]
 801d762:	68fb      	ldr	r3, [r7, #12]
 801d764:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801d766:	697b      	ldr	r3, [r7, #20]
 801d768:	88da      	ldrh	r2, [r3, #6]
 801d76a:	68fb      	ldr	r3, [r7, #12]
 801d76c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801d76e:	68fb      	ldr	r3, [r7, #12]
 801d770:	79fa      	ldrb	r2, [r7, #7]
 801d772:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801d774:	68fb      	ldr	r3, [r7, #12]
 801d776:	2200      	movs	r2, #0
 801d778:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801d77a:	68fb      	ldr	r3, [r7, #12]
 801d77c:	2200      	movs	r2, #0
 801d77e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801d780:	68fb      	ldr	r3, [r7, #12]
 801d782:	2200      	movs	r2, #0
 801d784:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801d786:	68fb      	ldr	r3, [r7, #12]
 801d788:	3330      	adds	r3, #48	@ 0x30
 801d78a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801d78e:	2100      	movs	r1, #0
 801d790:	4618      	mov	r0, r3
 801d792:	f7fd fc8a 	bl	801b0aa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801d796:	79fb      	ldrb	r3, [r7, #7]
 801d798:	f003 0320 	and.w	r3, r3, #32
 801d79c:	2b00      	cmp	r3, #0
 801d79e:	d06e      	beq.n	801d87e <f_open+0x376>
 801d7a0:	68fb      	ldr	r3, [r7, #12]
 801d7a2:	68db      	ldr	r3, [r3, #12]
 801d7a4:	2b00      	cmp	r3, #0
 801d7a6:	d06a      	beq.n	801d87e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801d7a8:	68fb      	ldr	r3, [r7, #12]
 801d7aa:	68da      	ldr	r2, [r3, #12]
 801d7ac:	68fb      	ldr	r3, [r7, #12]
 801d7ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801d7b0:	697b      	ldr	r3, [r7, #20]
 801d7b2:	895b      	ldrh	r3, [r3, #10]
 801d7b4:	461a      	mov	r2, r3
 801d7b6:	697b      	ldr	r3, [r7, #20]
 801d7b8:	899b      	ldrh	r3, [r3, #12]
 801d7ba:	fb02 f303 	mul.w	r3, r2, r3
 801d7be:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801d7c0:	68fb      	ldr	r3, [r7, #12]
 801d7c2:	689b      	ldr	r3, [r3, #8]
 801d7c4:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d7c6:	68fb      	ldr	r3, [r7, #12]
 801d7c8:	68db      	ldr	r3, [r3, #12]
 801d7ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d7cc:	e016      	b.n	801d7fc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801d7ce:	68fb      	ldr	r3, [r7, #12]
 801d7d0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d7d2:	4618      	mov	r0, r3
 801d7d4:	f7fd ff33 	bl	801b63e <get_fat>
 801d7d8:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801d7da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d7dc:	2b01      	cmp	r3, #1
 801d7de:	d802      	bhi.n	801d7e6 <f_open+0x2de>
 801d7e0:	2302      	movs	r3, #2
 801d7e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801d7e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d7ec:	d102      	bne.n	801d7f4 <f_open+0x2ec>
 801d7ee:	2301      	movs	r3, #1
 801d7f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d7f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d7f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d7f8:	1ad3      	subs	r3, r2, r3
 801d7fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d7fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d800:	2b00      	cmp	r3, #0
 801d802:	d103      	bne.n	801d80c <f_open+0x304>
 801d804:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d808:	429a      	cmp	r2, r3
 801d80a:	d8e0      	bhi.n	801d7ce <f_open+0x2c6>
				}
				fp->clust = clst;
 801d80c:	68fb      	ldr	r3, [r7, #12]
 801d80e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d810:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801d812:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d816:	2b00      	cmp	r3, #0
 801d818:	d131      	bne.n	801d87e <f_open+0x376>
 801d81a:	697b      	ldr	r3, [r7, #20]
 801d81c:	899b      	ldrh	r3, [r3, #12]
 801d81e:	461a      	mov	r2, r3
 801d820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d822:	fbb3 f1f2 	udiv	r1, r3, r2
 801d826:	fb01 f202 	mul.w	r2, r1, r2
 801d82a:	1a9b      	subs	r3, r3, r2
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	d026      	beq.n	801d87e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801d830:	697b      	ldr	r3, [r7, #20]
 801d832:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d834:	4618      	mov	r0, r3
 801d836:	f7fd fee3 	bl	801b600 <clust2sect>
 801d83a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801d83c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d83e:	2b00      	cmp	r3, #0
 801d840:	d103      	bne.n	801d84a <f_open+0x342>
						res = FR_INT_ERR;
 801d842:	2302      	movs	r3, #2
 801d844:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d848:	e019      	b.n	801d87e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801d84a:	697b      	ldr	r3, [r7, #20]
 801d84c:	899b      	ldrh	r3, [r3, #12]
 801d84e:	461a      	mov	r2, r3
 801d850:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d852:	fbb3 f2f2 	udiv	r2, r3, r2
 801d856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d858:	441a      	add	r2, r3
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801d85e:	697b      	ldr	r3, [r7, #20]
 801d860:	7858      	ldrb	r0, [r3, #1]
 801d862:	68fb      	ldr	r3, [r7, #12]
 801d864:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d868:	68fb      	ldr	r3, [r7, #12]
 801d86a:	6a1a      	ldr	r2, [r3, #32]
 801d86c:	2301      	movs	r3, #1
 801d86e:	f7fd fb1b 	bl	801aea8 <disk_read>
 801d872:	4603      	mov	r3, r0
 801d874:	2b00      	cmp	r3, #0
 801d876:	d002      	beq.n	801d87e <f_open+0x376>
 801d878:	2301      	movs	r3, #1
 801d87a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801d87e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d882:	2b00      	cmp	r3, #0
 801d884:	d002      	beq.n	801d88c <f_open+0x384>
 801d886:	68fb      	ldr	r3, [r7, #12]
 801d888:	2200      	movs	r2, #0
 801d88a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d88c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801d890:	4618      	mov	r0, r3
 801d892:	3768      	adds	r7, #104	@ 0x68
 801d894:	46bd      	mov	sp, r7
 801d896:	bd80      	pop	{r7, pc}

0801d898 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d898:	b580      	push	{r7, lr}
 801d89a:	b08c      	sub	sp, #48	@ 0x30
 801d89c:	af00      	add	r7, sp, #0
 801d89e:	60f8      	str	r0, [r7, #12]
 801d8a0:	60b9      	str	r1, [r7, #8]
 801d8a2:	607a      	str	r2, [r7, #4]
 801d8a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d8a6:	68bb      	ldr	r3, [r7, #8]
 801d8a8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d8aa:	683b      	ldr	r3, [r7, #0]
 801d8ac:	2200      	movs	r2, #0
 801d8ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d8b0:	68fb      	ldr	r3, [r7, #12]
 801d8b2:	f107 0210 	add.w	r2, r7, #16
 801d8b6:	4611      	mov	r1, r2
 801d8b8:	4618      	mov	r0, r3
 801d8ba:	f7ff fda9 	bl	801d410 <validate>
 801d8be:	4603      	mov	r3, r0
 801d8c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d8c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	d107      	bne.n	801d8dc <f_write+0x44>
 801d8cc:	68fb      	ldr	r3, [r7, #12]
 801d8ce:	7d5b      	ldrb	r3, [r3, #21]
 801d8d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801d8d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d002      	beq.n	801d8e2 <f_write+0x4a>
 801d8dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d8e0:	e16a      	b.n	801dbb8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	7d1b      	ldrb	r3, [r3, #20]
 801d8e6:	f003 0302 	and.w	r3, r3, #2
 801d8ea:	2b00      	cmp	r3, #0
 801d8ec:	d101      	bne.n	801d8f2 <f_write+0x5a>
 801d8ee:	2307      	movs	r3, #7
 801d8f0:	e162      	b.n	801dbb8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d8f2:	68fb      	ldr	r3, [r7, #12]
 801d8f4:	699a      	ldr	r2, [r3, #24]
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	441a      	add	r2, r3
 801d8fa:	68fb      	ldr	r3, [r7, #12]
 801d8fc:	699b      	ldr	r3, [r3, #24]
 801d8fe:	429a      	cmp	r2, r3
 801d900:	f080 814c 	bcs.w	801db9c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d904:	68fb      	ldr	r3, [r7, #12]
 801d906:	699b      	ldr	r3, [r3, #24]
 801d908:	43db      	mvns	r3, r3
 801d90a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d90c:	e146      	b.n	801db9c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d90e:	68fb      	ldr	r3, [r7, #12]
 801d910:	699b      	ldr	r3, [r3, #24]
 801d912:	693a      	ldr	r2, [r7, #16]
 801d914:	8992      	ldrh	r2, [r2, #12]
 801d916:	fbb3 f1f2 	udiv	r1, r3, r2
 801d91a:	fb01 f202 	mul.w	r2, r1, r2
 801d91e:	1a9b      	subs	r3, r3, r2
 801d920:	2b00      	cmp	r3, #0
 801d922:	f040 80f1 	bne.w	801db08 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d926:	68fb      	ldr	r3, [r7, #12]
 801d928:	699b      	ldr	r3, [r3, #24]
 801d92a:	693a      	ldr	r2, [r7, #16]
 801d92c:	8992      	ldrh	r2, [r2, #12]
 801d92e:	fbb3 f3f2 	udiv	r3, r3, r2
 801d932:	693a      	ldr	r2, [r7, #16]
 801d934:	8952      	ldrh	r2, [r2, #10]
 801d936:	3a01      	subs	r2, #1
 801d938:	4013      	ands	r3, r2
 801d93a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d93c:	69bb      	ldr	r3, [r7, #24]
 801d93e:	2b00      	cmp	r3, #0
 801d940:	d143      	bne.n	801d9ca <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d942:	68fb      	ldr	r3, [r7, #12]
 801d944:	699b      	ldr	r3, [r3, #24]
 801d946:	2b00      	cmp	r3, #0
 801d948:	d10c      	bne.n	801d964 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d94a:	68fb      	ldr	r3, [r7, #12]
 801d94c:	689b      	ldr	r3, [r3, #8]
 801d94e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d952:	2b00      	cmp	r3, #0
 801d954:	d11a      	bne.n	801d98c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d956:	68fb      	ldr	r3, [r7, #12]
 801d958:	2100      	movs	r1, #0
 801d95a:	4618      	mov	r0, r3
 801d95c:	f7fe f8c1 	bl	801bae2 <create_chain>
 801d960:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d962:	e013      	b.n	801d98c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d964:	68fb      	ldr	r3, [r7, #12]
 801d966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d968:	2b00      	cmp	r3, #0
 801d96a:	d007      	beq.n	801d97c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d96c:	68fb      	ldr	r3, [r7, #12]
 801d96e:	699b      	ldr	r3, [r3, #24]
 801d970:	4619      	mov	r1, r3
 801d972:	68f8      	ldr	r0, [r7, #12]
 801d974:	f7fe f94d 	bl	801bc12 <clmt_clust>
 801d978:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d97a:	e007      	b.n	801d98c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d97c:	68fa      	ldr	r2, [r7, #12]
 801d97e:	68fb      	ldr	r3, [r7, #12]
 801d980:	69db      	ldr	r3, [r3, #28]
 801d982:	4619      	mov	r1, r3
 801d984:	4610      	mov	r0, r2
 801d986:	f7fe f8ac 	bl	801bae2 <create_chain>
 801d98a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d98e:	2b00      	cmp	r3, #0
 801d990:	f000 8109 	beq.w	801dba6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801d994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d996:	2b01      	cmp	r3, #1
 801d998:	d104      	bne.n	801d9a4 <f_write+0x10c>
 801d99a:	68fb      	ldr	r3, [r7, #12]
 801d99c:	2202      	movs	r2, #2
 801d99e:	755a      	strb	r2, [r3, #21]
 801d9a0:	2302      	movs	r3, #2
 801d9a2:	e109      	b.n	801dbb8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d9aa:	d104      	bne.n	801d9b6 <f_write+0x11e>
 801d9ac:	68fb      	ldr	r3, [r7, #12]
 801d9ae:	2201      	movs	r2, #1
 801d9b0:	755a      	strb	r2, [r3, #21]
 801d9b2:	2301      	movs	r3, #1
 801d9b4:	e100      	b.n	801dbb8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801d9b6:	68fb      	ldr	r3, [r7, #12]
 801d9b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d9ba:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801d9bc:	68fb      	ldr	r3, [r7, #12]
 801d9be:	689b      	ldr	r3, [r3, #8]
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	d102      	bne.n	801d9ca <f_write+0x132>
 801d9c4:	68fb      	ldr	r3, [r7, #12]
 801d9c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d9c8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801d9ca:	68fb      	ldr	r3, [r7, #12]
 801d9cc:	7d1b      	ldrb	r3, [r3, #20]
 801d9ce:	b25b      	sxtb	r3, r3
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	da18      	bge.n	801da06 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d9d4:	693b      	ldr	r3, [r7, #16]
 801d9d6:	7858      	ldrb	r0, [r3, #1]
 801d9d8:	68fb      	ldr	r3, [r7, #12]
 801d9da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d9de:	68fb      	ldr	r3, [r7, #12]
 801d9e0:	6a1a      	ldr	r2, [r3, #32]
 801d9e2:	2301      	movs	r3, #1
 801d9e4:	f7fd fa80 	bl	801aee8 <disk_write>
 801d9e8:	4603      	mov	r3, r0
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d004      	beq.n	801d9f8 <f_write+0x160>
 801d9ee:	68fb      	ldr	r3, [r7, #12]
 801d9f0:	2201      	movs	r2, #1
 801d9f2:	755a      	strb	r2, [r3, #21]
 801d9f4:	2301      	movs	r3, #1
 801d9f6:	e0df      	b.n	801dbb8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d9f8:	68fb      	ldr	r3, [r7, #12]
 801d9fa:	7d1b      	ldrb	r3, [r3, #20]
 801d9fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801da00:	b2da      	uxtb	r2, r3
 801da02:	68fb      	ldr	r3, [r7, #12]
 801da04:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801da06:	693a      	ldr	r2, [r7, #16]
 801da08:	68fb      	ldr	r3, [r7, #12]
 801da0a:	69db      	ldr	r3, [r3, #28]
 801da0c:	4619      	mov	r1, r3
 801da0e:	4610      	mov	r0, r2
 801da10:	f7fd fdf6 	bl	801b600 <clust2sect>
 801da14:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801da16:	697b      	ldr	r3, [r7, #20]
 801da18:	2b00      	cmp	r3, #0
 801da1a:	d104      	bne.n	801da26 <f_write+0x18e>
 801da1c:	68fb      	ldr	r3, [r7, #12]
 801da1e:	2202      	movs	r2, #2
 801da20:	755a      	strb	r2, [r3, #21]
 801da22:	2302      	movs	r3, #2
 801da24:	e0c8      	b.n	801dbb8 <f_write+0x320>
			sect += csect;
 801da26:	697a      	ldr	r2, [r7, #20]
 801da28:	69bb      	ldr	r3, [r7, #24]
 801da2a:	4413      	add	r3, r2
 801da2c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801da2e:	693b      	ldr	r3, [r7, #16]
 801da30:	899b      	ldrh	r3, [r3, #12]
 801da32:	461a      	mov	r2, r3
 801da34:	687b      	ldr	r3, [r7, #4]
 801da36:	fbb3 f3f2 	udiv	r3, r3, r2
 801da3a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801da3c:	6a3b      	ldr	r3, [r7, #32]
 801da3e:	2b00      	cmp	r3, #0
 801da40:	d043      	beq.n	801daca <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801da42:	69ba      	ldr	r2, [r7, #24]
 801da44:	6a3b      	ldr	r3, [r7, #32]
 801da46:	4413      	add	r3, r2
 801da48:	693a      	ldr	r2, [r7, #16]
 801da4a:	8952      	ldrh	r2, [r2, #10]
 801da4c:	4293      	cmp	r3, r2
 801da4e:	d905      	bls.n	801da5c <f_write+0x1c4>
					cc = fs->csize - csect;
 801da50:	693b      	ldr	r3, [r7, #16]
 801da52:	895b      	ldrh	r3, [r3, #10]
 801da54:	461a      	mov	r2, r3
 801da56:	69bb      	ldr	r3, [r7, #24]
 801da58:	1ad3      	subs	r3, r2, r3
 801da5a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801da5c:	693b      	ldr	r3, [r7, #16]
 801da5e:	7858      	ldrb	r0, [r3, #1]
 801da60:	6a3b      	ldr	r3, [r7, #32]
 801da62:	697a      	ldr	r2, [r7, #20]
 801da64:	69f9      	ldr	r1, [r7, #28]
 801da66:	f7fd fa3f 	bl	801aee8 <disk_write>
 801da6a:	4603      	mov	r3, r0
 801da6c:	2b00      	cmp	r3, #0
 801da6e:	d004      	beq.n	801da7a <f_write+0x1e2>
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	2201      	movs	r2, #1
 801da74:	755a      	strb	r2, [r3, #21]
 801da76:	2301      	movs	r3, #1
 801da78:	e09e      	b.n	801dbb8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801da7a:	68fb      	ldr	r3, [r7, #12]
 801da7c:	6a1a      	ldr	r2, [r3, #32]
 801da7e:	697b      	ldr	r3, [r7, #20]
 801da80:	1ad3      	subs	r3, r2, r3
 801da82:	6a3a      	ldr	r2, [r7, #32]
 801da84:	429a      	cmp	r2, r3
 801da86:	d918      	bls.n	801daba <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801da88:	68fb      	ldr	r3, [r7, #12]
 801da8a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801da8e:	68fb      	ldr	r3, [r7, #12]
 801da90:	6a1a      	ldr	r2, [r3, #32]
 801da92:	697b      	ldr	r3, [r7, #20]
 801da94:	1ad3      	subs	r3, r2, r3
 801da96:	693a      	ldr	r2, [r7, #16]
 801da98:	8992      	ldrh	r2, [r2, #12]
 801da9a:	fb02 f303 	mul.w	r3, r2, r3
 801da9e:	69fa      	ldr	r2, [r7, #28]
 801daa0:	18d1      	adds	r1, r2, r3
 801daa2:	693b      	ldr	r3, [r7, #16]
 801daa4:	899b      	ldrh	r3, [r3, #12]
 801daa6:	461a      	mov	r2, r3
 801daa8:	f7fd fade 	bl	801b068 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801daac:	68fb      	ldr	r3, [r7, #12]
 801daae:	7d1b      	ldrb	r3, [r3, #20]
 801dab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dab4:	b2da      	uxtb	r2, r3
 801dab6:	68fb      	ldr	r3, [r7, #12]
 801dab8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801daba:	693b      	ldr	r3, [r7, #16]
 801dabc:	899b      	ldrh	r3, [r3, #12]
 801dabe:	461a      	mov	r2, r3
 801dac0:	6a3b      	ldr	r3, [r7, #32]
 801dac2:	fb02 f303 	mul.w	r3, r2, r3
 801dac6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801dac8:	e04b      	b.n	801db62 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801daca:	68fb      	ldr	r3, [r7, #12]
 801dacc:	6a1b      	ldr	r3, [r3, #32]
 801dace:	697a      	ldr	r2, [r7, #20]
 801dad0:	429a      	cmp	r2, r3
 801dad2:	d016      	beq.n	801db02 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801dad4:	68fb      	ldr	r3, [r7, #12]
 801dad6:	699a      	ldr	r2, [r3, #24]
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801dadc:	429a      	cmp	r2, r3
 801dade:	d210      	bcs.n	801db02 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801dae0:	693b      	ldr	r3, [r7, #16]
 801dae2:	7858      	ldrb	r0, [r3, #1]
 801dae4:	68fb      	ldr	r3, [r7, #12]
 801dae6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801daea:	2301      	movs	r3, #1
 801daec:	697a      	ldr	r2, [r7, #20]
 801daee:	f7fd f9db 	bl	801aea8 <disk_read>
 801daf2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	d004      	beq.n	801db02 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801daf8:	68fb      	ldr	r3, [r7, #12]
 801dafa:	2201      	movs	r2, #1
 801dafc:	755a      	strb	r2, [r3, #21]
 801dafe:	2301      	movs	r3, #1
 801db00:	e05a      	b.n	801dbb8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801db02:	68fb      	ldr	r3, [r7, #12]
 801db04:	697a      	ldr	r2, [r7, #20]
 801db06:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801db08:	693b      	ldr	r3, [r7, #16]
 801db0a:	899b      	ldrh	r3, [r3, #12]
 801db0c:	4618      	mov	r0, r3
 801db0e:	68fb      	ldr	r3, [r7, #12]
 801db10:	699b      	ldr	r3, [r3, #24]
 801db12:	693a      	ldr	r2, [r7, #16]
 801db14:	8992      	ldrh	r2, [r2, #12]
 801db16:	fbb3 f1f2 	udiv	r1, r3, r2
 801db1a:	fb01 f202 	mul.w	r2, r1, r2
 801db1e:	1a9b      	subs	r3, r3, r2
 801db20:	1ac3      	subs	r3, r0, r3
 801db22:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801db24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	429a      	cmp	r2, r3
 801db2a:	d901      	bls.n	801db30 <f_write+0x298>
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801db30:	68fb      	ldr	r3, [r7, #12]
 801db32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801db36:	68fb      	ldr	r3, [r7, #12]
 801db38:	699b      	ldr	r3, [r3, #24]
 801db3a:	693a      	ldr	r2, [r7, #16]
 801db3c:	8992      	ldrh	r2, [r2, #12]
 801db3e:	fbb3 f0f2 	udiv	r0, r3, r2
 801db42:	fb00 f202 	mul.w	r2, r0, r2
 801db46:	1a9b      	subs	r3, r3, r2
 801db48:	440b      	add	r3, r1
 801db4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801db4c:	69f9      	ldr	r1, [r7, #28]
 801db4e:	4618      	mov	r0, r3
 801db50:	f7fd fa8a 	bl	801b068 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801db54:	68fb      	ldr	r3, [r7, #12]
 801db56:	7d1b      	ldrb	r3, [r3, #20]
 801db58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801db5c:	b2da      	uxtb	r2, r3
 801db5e:	68fb      	ldr	r3, [r7, #12]
 801db60:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801db62:	69fa      	ldr	r2, [r7, #28]
 801db64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db66:	4413      	add	r3, r2
 801db68:	61fb      	str	r3, [r7, #28]
 801db6a:	68fb      	ldr	r3, [r7, #12]
 801db6c:	699a      	ldr	r2, [r3, #24]
 801db6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db70:	441a      	add	r2, r3
 801db72:	68fb      	ldr	r3, [r7, #12]
 801db74:	619a      	str	r2, [r3, #24]
 801db76:	68fb      	ldr	r3, [r7, #12]
 801db78:	68da      	ldr	r2, [r3, #12]
 801db7a:	68fb      	ldr	r3, [r7, #12]
 801db7c:	699b      	ldr	r3, [r3, #24]
 801db7e:	429a      	cmp	r2, r3
 801db80:	bf38      	it	cc
 801db82:	461a      	movcc	r2, r3
 801db84:	68fb      	ldr	r3, [r7, #12]
 801db86:	60da      	str	r2, [r3, #12]
 801db88:	683b      	ldr	r3, [r7, #0]
 801db8a:	681a      	ldr	r2, [r3, #0]
 801db8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db8e:	441a      	add	r2, r3
 801db90:	683b      	ldr	r3, [r7, #0]
 801db92:	601a      	str	r2, [r3, #0]
 801db94:	687a      	ldr	r2, [r7, #4]
 801db96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db98:	1ad3      	subs	r3, r2, r3
 801db9a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801db9c:	687b      	ldr	r3, [r7, #4]
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	f47f aeb5 	bne.w	801d90e <f_write+0x76>
 801dba4:	e000      	b.n	801dba8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801dba6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801dba8:	68fb      	ldr	r3, [r7, #12]
 801dbaa:	7d1b      	ldrb	r3, [r3, #20]
 801dbac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dbb0:	b2da      	uxtb	r2, r3
 801dbb2:	68fb      	ldr	r3, [r7, #12]
 801dbb4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801dbb6:	2300      	movs	r3, #0
}
 801dbb8:	4618      	mov	r0, r3
 801dbba:	3730      	adds	r7, #48	@ 0x30
 801dbbc:	46bd      	mov	sp, r7
 801dbbe:	bd80      	pop	{r7, pc}

0801dbc0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801dbc0:	b580      	push	{r7, lr}
 801dbc2:	b086      	sub	sp, #24
 801dbc4:	af00      	add	r7, sp, #0
 801dbc6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801dbc8:	687b      	ldr	r3, [r7, #4]
 801dbca:	f107 0208 	add.w	r2, r7, #8
 801dbce:	4611      	mov	r1, r2
 801dbd0:	4618      	mov	r0, r3
 801dbd2:	f7ff fc1d 	bl	801d410 <validate>
 801dbd6:	4603      	mov	r3, r0
 801dbd8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801dbda:	7dfb      	ldrb	r3, [r7, #23]
 801dbdc:	2b00      	cmp	r3, #0
 801dbde:	d168      	bne.n	801dcb2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801dbe0:	687b      	ldr	r3, [r7, #4]
 801dbe2:	7d1b      	ldrb	r3, [r3, #20]
 801dbe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	d062      	beq.n	801dcb2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	7d1b      	ldrb	r3, [r3, #20]
 801dbf0:	b25b      	sxtb	r3, r3
 801dbf2:	2b00      	cmp	r3, #0
 801dbf4:	da15      	bge.n	801dc22 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801dbf6:	68bb      	ldr	r3, [r7, #8]
 801dbf8:	7858      	ldrb	r0, [r3, #1]
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	6a1a      	ldr	r2, [r3, #32]
 801dc04:	2301      	movs	r3, #1
 801dc06:	f7fd f96f 	bl	801aee8 <disk_write>
 801dc0a:	4603      	mov	r3, r0
 801dc0c:	2b00      	cmp	r3, #0
 801dc0e:	d001      	beq.n	801dc14 <f_sync+0x54>
 801dc10:	2301      	movs	r3, #1
 801dc12:	e04f      	b.n	801dcb4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801dc14:	687b      	ldr	r3, [r7, #4]
 801dc16:	7d1b      	ldrb	r3, [r3, #20]
 801dc18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dc1c:	b2da      	uxtb	r2, r3
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801dc22:	f7fd f8a1 	bl	801ad68 <get_fattime>
 801dc26:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801dc28:	68ba      	ldr	r2, [r7, #8]
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dc2e:	4619      	mov	r1, r3
 801dc30:	4610      	mov	r0, r2
 801dc32:	f7fd fc47 	bl	801b4c4 <move_window>
 801dc36:	4603      	mov	r3, r0
 801dc38:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801dc3a:	7dfb      	ldrb	r3, [r7, #23]
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	d138      	bne.n	801dcb2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801dc40:	687b      	ldr	r3, [r7, #4]
 801dc42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc44:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801dc46:	68fb      	ldr	r3, [r7, #12]
 801dc48:	330b      	adds	r3, #11
 801dc4a:	781a      	ldrb	r2, [r3, #0]
 801dc4c:	68fb      	ldr	r3, [r7, #12]
 801dc4e:	330b      	adds	r3, #11
 801dc50:	f042 0220 	orr.w	r2, r2, #32
 801dc54:	b2d2      	uxtb	r2, r2
 801dc56:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	6818      	ldr	r0, [r3, #0]
 801dc5c:	687b      	ldr	r3, [r7, #4]
 801dc5e:	689b      	ldr	r3, [r3, #8]
 801dc60:	461a      	mov	r2, r3
 801dc62:	68f9      	ldr	r1, [r7, #12]
 801dc64:	f7fe f9d2 	bl	801c00c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801dc68:	68fb      	ldr	r3, [r7, #12]
 801dc6a:	f103 021c 	add.w	r2, r3, #28
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	68db      	ldr	r3, [r3, #12]
 801dc72:	4619      	mov	r1, r3
 801dc74:	4610      	mov	r0, r2
 801dc76:	f7fd f9cb 	bl	801b010 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801dc7a:	68fb      	ldr	r3, [r7, #12]
 801dc7c:	3316      	adds	r3, #22
 801dc7e:	6939      	ldr	r1, [r7, #16]
 801dc80:	4618      	mov	r0, r3
 801dc82:	f7fd f9c5 	bl	801b010 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801dc86:	68fb      	ldr	r3, [r7, #12]
 801dc88:	3312      	adds	r3, #18
 801dc8a:	2100      	movs	r1, #0
 801dc8c:	4618      	mov	r0, r3
 801dc8e:	f7fd f9a4 	bl	801afda <st_word>
					fs->wflag = 1;
 801dc92:	68bb      	ldr	r3, [r7, #8]
 801dc94:	2201      	movs	r2, #1
 801dc96:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801dc98:	68bb      	ldr	r3, [r7, #8]
 801dc9a:	4618      	mov	r0, r3
 801dc9c:	f7fd fc40 	bl	801b520 <sync_fs>
 801dca0:	4603      	mov	r3, r0
 801dca2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	7d1b      	ldrb	r3, [r3, #20]
 801dca8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801dcac:	b2da      	uxtb	r2, r3
 801dcae:	687b      	ldr	r3, [r7, #4]
 801dcb0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801dcb2:	7dfb      	ldrb	r3, [r7, #23]
}
 801dcb4:	4618      	mov	r0, r3
 801dcb6:	3718      	adds	r7, #24
 801dcb8:	46bd      	mov	sp, r7
 801dcba:	bd80      	pop	{r7, pc}

0801dcbc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801dcbc:	b580      	push	{r7, lr}
 801dcbe:	b084      	sub	sp, #16
 801dcc0:	af00      	add	r7, sp, #0
 801dcc2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801dcc4:	6878      	ldr	r0, [r7, #4]
 801dcc6:	f7ff ff7b 	bl	801dbc0 <f_sync>
 801dcca:	4603      	mov	r3, r0
 801dccc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801dcce:	7bfb      	ldrb	r3, [r7, #15]
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	d118      	bne.n	801dd06 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	f107 0208 	add.w	r2, r7, #8
 801dcda:	4611      	mov	r1, r2
 801dcdc:	4618      	mov	r0, r3
 801dcde:	f7ff fb97 	bl	801d410 <validate>
 801dce2:	4603      	mov	r3, r0
 801dce4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801dce6:	7bfb      	ldrb	r3, [r7, #15]
 801dce8:	2b00      	cmp	r3, #0
 801dcea:	d10c      	bne.n	801dd06 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801dcec:	687b      	ldr	r3, [r7, #4]
 801dcee:	691b      	ldr	r3, [r3, #16]
 801dcf0:	4618      	mov	r0, r3
 801dcf2:	f7fd fb43 	bl	801b37c <dec_lock>
 801dcf6:	4603      	mov	r3, r0
 801dcf8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801dcfa:	7bfb      	ldrb	r3, [r7, #15]
 801dcfc:	2b00      	cmp	r3, #0
 801dcfe:	d102      	bne.n	801dd06 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	2200      	movs	r2, #0
 801dd04:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801dd06:	7bfb      	ldrb	r3, [r7, #15]
}
 801dd08:	4618      	mov	r0, r3
 801dd0a:	3710      	adds	r7, #16
 801dd0c:	46bd      	mov	sp, r7
 801dd0e:	bd80      	pop	{r7, pc}

0801dd10 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801dd10:	b580      	push	{r7, lr}
 801dd12:	b0a0      	sub	sp, #128	@ 0x80
 801dd14:	af00      	add	r7, sp, #0
 801dd16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801dd18:	2300      	movs	r3, #0
 801dd1a:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801dd1c:	f107 010c 	add.w	r1, r7, #12
 801dd20:	1d3b      	adds	r3, r7, #4
 801dd22:	2202      	movs	r2, #2
 801dd24:	4618      	mov	r0, r3
 801dd26:	f7ff f8ed 	bl	801cf04 <find_volume>
 801dd2a:	4603      	mov	r3, r0
 801dd2c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801dd30:	68fb      	ldr	r3, [r7, #12]
 801dd32:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801dd34:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	f040 808e 	bne.w	801de5a <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801dd3e:	687a      	ldr	r2, [r7, #4]
 801dd40:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801dd44:	4611      	mov	r1, r2
 801dd46:	4618      	mov	r0, r3
 801dd48:	f7fe ffcc 	bl	801cce4 <follow_path>
 801dd4c:	4603      	mov	r3, r0
 801dd4e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801dd52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	d108      	bne.n	801dd6c <f_unlink+0x5c>
 801dd5a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801dd5e:	2102      	movs	r1, #2
 801dd60:	4618      	mov	r0, r3
 801dd62:	f7fd f9ff 	bl	801b164 <chk_lock>
 801dd66:	4603      	mov	r3, r0
 801dd68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801dd6c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dd70:	2b00      	cmp	r3, #0
 801dd72:	d172      	bne.n	801de5a <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801dd74:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801dd78:	b25b      	sxtb	r3, r3
 801dd7a:	2b00      	cmp	r3, #0
 801dd7c:	da03      	bge.n	801dd86 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801dd7e:	2306      	movs	r3, #6
 801dd80:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801dd84:	e008      	b.n	801dd98 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801dd86:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801dd8a:	f003 0301 	and.w	r3, r3, #1
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	d002      	beq.n	801dd98 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801dd92:	2307      	movs	r3, #7
 801dd94:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801dd98:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dd9c:	2b00      	cmp	r3, #0
 801dd9e:	d134      	bne.n	801de0a <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801dda0:	68fb      	ldr	r3, [r7, #12]
 801dda2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801dda4:	4611      	mov	r1, r2
 801dda6:	4618      	mov	r0, r3
 801dda8:	f7fe f911 	bl	801bfce <ld_clust>
 801ddac:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801ddae:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801ddb2:	f003 0310 	and.w	r3, r3, #16
 801ddb6:	2b00      	cmp	r3, #0
 801ddb8:	d027      	beq.n	801de0a <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801ddba:	68fb      	ldr	r3, [r7, #12]
 801ddbc:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801ddbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ddc0:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801ddc2:	f107 0310 	add.w	r3, r7, #16
 801ddc6:	2100      	movs	r1, #0
 801ddc8:	4618      	mov	r0, r3
 801ddca:	f7fd ff5a 	bl	801bc82 <dir_sdi>
 801ddce:	4603      	mov	r3, r0
 801ddd0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801ddd4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	d116      	bne.n	801de0a <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801dddc:	f107 0310 	add.w	r3, r7, #16
 801dde0:	2100      	movs	r1, #0
 801dde2:	4618      	mov	r0, r3
 801dde4:	f7fe fb1d 	bl	801c422 <dir_read>
 801dde8:	4603      	mov	r3, r0
 801ddea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801ddee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	d102      	bne.n	801ddfc <f_unlink+0xec>
 801ddf6:	2307      	movs	r3, #7
 801ddf8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801ddfc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de00:	2b04      	cmp	r3, #4
 801de02:	d102      	bne.n	801de0a <f_unlink+0xfa>
 801de04:	2300      	movs	r3, #0
 801de06:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801de0a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de0e:	2b00      	cmp	r3, #0
 801de10:	d123      	bne.n	801de5a <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801de12:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801de16:	4618      	mov	r0, r3
 801de18:	f7fe fd62 	bl	801c8e0 <dir_remove>
 801de1c:	4603      	mov	r3, r0
 801de1e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801de22:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de26:	2b00      	cmp	r3, #0
 801de28:	d10c      	bne.n	801de44 <f_unlink+0x134>
 801de2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	d009      	beq.n	801de44 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801de30:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801de34:	2200      	movs	r2, #0
 801de36:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801de38:	4618      	mov	r0, r3
 801de3a:	f7fd fded 	bl	801ba18 <remove_chain>
 801de3e:	4603      	mov	r3, r0
 801de40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801de44:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de48:	2b00      	cmp	r3, #0
 801de4a:	d106      	bne.n	801de5a <f_unlink+0x14a>
 801de4c:	68fb      	ldr	r3, [r7, #12]
 801de4e:	4618      	mov	r0, r3
 801de50:	f7fd fb66 	bl	801b520 <sync_fs>
 801de54:	4603      	mov	r3, r0
 801de56:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801de5a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801de5e:	4618      	mov	r0, r3
 801de60:	3780      	adds	r7, #128	@ 0x80
 801de62:	46bd      	mov	sp, r7
 801de64:	bd80      	pop	{r7, pc}
	...

0801de68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801de68:	b480      	push	{r7}
 801de6a:	b087      	sub	sp, #28
 801de6c:	af00      	add	r7, sp, #0
 801de6e:	60f8      	str	r0, [r7, #12]
 801de70:	60b9      	str	r1, [r7, #8]
 801de72:	4613      	mov	r3, r2
 801de74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801de76:	2301      	movs	r3, #1
 801de78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801de7a:	2300      	movs	r3, #0
 801de7c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801de7e:	4b1f      	ldr	r3, [pc, #124]	@ (801defc <FATFS_LinkDriverEx+0x94>)
 801de80:	7a5b      	ldrb	r3, [r3, #9]
 801de82:	b2db      	uxtb	r3, r3
 801de84:	2b00      	cmp	r3, #0
 801de86:	d131      	bne.n	801deec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801de88:	4b1c      	ldr	r3, [pc, #112]	@ (801defc <FATFS_LinkDriverEx+0x94>)
 801de8a:	7a5b      	ldrb	r3, [r3, #9]
 801de8c:	b2db      	uxtb	r3, r3
 801de8e:	461a      	mov	r2, r3
 801de90:	4b1a      	ldr	r3, [pc, #104]	@ (801defc <FATFS_LinkDriverEx+0x94>)
 801de92:	2100      	movs	r1, #0
 801de94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801de96:	4b19      	ldr	r3, [pc, #100]	@ (801defc <FATFS_LinkDriverEx+0x94>)
 801de98:	7a5b      	ldrb	r3, [r3, #9]
 801de9a:	b2db      	uxtb	r3, r3
 801de9c:	4a17      	ldr	r2, [pc, #92]	@ (801defc <FATFS_LinkDriverEx+0x94>)
 801de9e:	009b      	lsls	r3, r3, #2
 801dea0:	4413      	add	r3, r2
 801dea2:	68fa      	ldr	r2, [r7, #12]
 801dea4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801dea6:	4b15      	ldr	r3, [pc, #84]	@ (801defc <FATFS_LinkDriverEx+0x94>)
 801dea8:	7a5b      	ldrb	r3, [r3, #9]
 801deaa:	b2db      	uxtb	r3, r3
 801deac:	461a      	mov	r2, r3
 801deae:	4b13      	ldr	r3, [pc, #76]	@ (801defc <FATFS_LinkDriverEx+0x94>)
 801deb0:	4413      	add	r3, r2
 801deb2:	79fa      	ldrb	r2, [r7, #7]
 801deb4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801deb6:	4b11      	ldr	r3, [pc, #68]	@ (801defc <FATFS_LinkDriverEx+0x94>)
 801deb8:	7a5b      	ldrb	r3, [r3, #9]
 801deba:	b2db      	uxtb	r3, r3
 801debc:	1c5a      	adds	r2, r3, #1
 801debe:	b2d1      	uxtb	r1, r2
 801dec0:	4a0e      	ldr	r2, [pc, #56]	@ (801defc <FATFS_LinkDriverEx+0x94>)
 801dec2:	7251      	strb	r1, [r2, #9]
 801dec4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801dec6:	7dbb      	ldrb	r3, [r7, #22]
 801dec8:	3330      	adds	r3, #48	@ 0x30
 801deca:	b2da      	uxtb	r2, r3
 801decc:	68bb      	ldr	r3, [r7, #8]
 801dece:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801ded0:	68bb      	ldr	r3, [r7, #8]
 801ded2:	3301      	adds	r3, #1
 801ded4:	223a      	movs	r2, #58	@ 0x3a
 801ded6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801ded8:	68bb      	ldr	r3, [r7, #8]
 801deda:	3302      	adds	r3, #2
 801dedc:	222f      	movs	r2, #47	@ 0x2f
 801dede:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801dee0:	68bb      	ldr	r3, [r7, #8]
 801dee2:	3303      	adds	r3, #3
 801dee4:	2200      	movs	r2, #0
 801dee6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801dee8:	2300      	movs	r3, #0
 801deea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801deec:	7dfb      	ldrb	r3, [r7, #23]
}
 801deee:	4618      	mov	r0, r3
 801def0:	371c      	adds	r7, #28
 801def2:	46bd      	mov	sp, r7
 801def4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801def8:	4770      	bx	lr
 801defa:	bf00      	nop
 801defc:	24000768 	.word	0x24000768

0801df00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801df00:	b580      	push	{r7, lr}
 801df02:	b082      	sub	sp, #8
 801df04:	af00      	add	r7, sp, #0
 801df06:	6078      	str	r0, [r7, #4]
 801df08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801df0a:	2200      	movs	r2, #0
 801df0c:	6839      	ldr	r1, [r7, #0]
 801df0e:	6878      	ldr	r0, [r7, #4]
 801df10:	f7ff ffaa 	bl	801de68 <FATFS_LinkDriverEx>
 801df14:	4603      	mov	r3, r0
}
 801df16:	4618      	mov	r0, r3
 801df18:	3708      	adds	r7, #8
 801df1a:	46bd      	mov	sp, r7
 801df1c:	bd80      	pop	{r7, pc}
	...

0801df20 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801df20:	b480      	push	{r7}
 801df22:	b085      	sub	sp, #20
 801df24:	af00      	add	r7, sp, #0
 801df26:	4603      	mov	r3, r0
 801df28:	6039      	str	r1, [r7, #0]
 801df2a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801df2c:	88fb      	ldrh	r3, [r7, #6]
 801df2e:	2b7f      	cmp	r3, #127	@ 0x7f
 801df30:	d802      	bhi.n	801df38 <ff_convert+0x18>
		c = chr;
 801df32:	88fb      	ldrh	r3, [r7, #6]
 801df34:	81fb      	strh	r3, [r7, #14]
 801df36:	e025      	b.n	801df84 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801df38:	683b      	ldr	r3, [r7, #0]
 801df3a:	2b00      	cmp	r3, #0
 801df3c:	d00b      	beq.n	801df56 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801df3e:	88fb      	ldrh	r3, [r7, #6]
 801df40:	2bff      	cmp	r3, #255	@ 0xff
 801df42:	d805      	bhi.n	801df50 <ff_convert+0x30>
 801df44:	88fb      	ldrh	r3, [r7, #6]
 801df46:	3b80      	subs	r3, #128	@ 0x80
 801df48:	4a12      	ldr	r2, [pc, #72]	@ (801df94 <ff_convert+0x74>)
 801df4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801df4e:	e000      	b.n	801df52 <ff_convert+0x32>
 801df50:	2300      	movs	r3, #0
 801df52:	81fb      	strh	r3, [r7, #14]
 801df54:	e016      	b.n	801df84 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801df56:	2300      	movs	r3, #0
 801df58:	81fb      	strh	r3, [r7, #14]
 801df5a:	e009      	b.n	801df70 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801df5c:	89fb      	ldrh	r3, [r7, #14]
 801df5e:	4a0d      	ldr	r2, [pc, #52]	@ (801df94 <ff_convert+0x74>)
 801df60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801df64:	88fa      	ldrh	r2, [r7, #6]
 801df66:	429a      	cmp	r2, r3
 801df68:	d006      	beq.n	801df78 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801df6a:	89fb      	ldrh	r3, [r7, #14]
 801df6c:	3301      	adds	r3, #1
 801df6e:	81fb      	strh	r3, [r7, #14]
 801df70:	89fb      	ldrh	r3, [r7, #14]
 801df72:	2b7f      	cmp	r3, #127	@ 0x7f
 801df74:	d9f2      	bls.n	801df5c <ff_convert+0x3c>
 801df76:	e000      	b.n	801df7a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801df78:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801df7a:	89fb      	ldrh	r3, [r7, #14]
 801df7c:	3380      	adds	r3, #128	@ 0x80
 801df7e:	b29b      	uxth	r3, r3
 801df80:	b2db      	uxtb	r3, r3
 801df82:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801df84:	89fb      	ldrh	r3, [r7, #14]
}
 801df86:	4618      	mov	r0, r3
 801df88:	3714      	adds	r7, #20
 801df8a:	46bd      	mov	sp, r7
 801df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df90:	4770      	bx	lr
 801df92:	bf00      	nop
 801df94:	0801eab4 	.word	0x0801eab4

0801df98 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801df98:	b480      	push	{r7}
 801df9a:	b087      	sub	sp, #28
 801df9c:	af00      	add	r7, sp, #0
 801df9e:	4603      	mov	r3, r0
 801dfa0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801dfa2:	88fb      	ldrh	r3, [r7, #6]
 801dfa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801dfa8:	d201      	bcs.n	801dfae <ff_wtoupper+0x16>
 801dfaa:	4b3e      	ldr	r3, [pc, #248]	@ (801e0a4 <ff_wtoupper+0x10c>)
 801dfac:	e000      	b.n	801dfb0 <ff_wtoupper+0x18>
 801dfae:	4b3e      	ldr	r3, [pc, #248]	@ (801e0a8 <ff_wtoupper+0x110>)
 801dfb0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801dfb2:	697b      	ldr	r3, [r7, #20]
 801dfb4:	1c9a      	adds	r2, r3, #2
 801dfb6:	617a      	str	r2, [r7, #20]
 801dfb8:	881b      	ldrh	r3, [r3, #0]
 801dfba:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801dfbc:	8a7b      	ldrh	r3, [r7, #18]
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	d068      	beq.n	801e094 <ff_wtoupper+0xfc>
 801dfc2:	88fa      	ldrh	r2, [r7, #6]
 801dfc4:	8a7b      	ldrh	r3, [r7, #18]
 801dfc6:	429a      	cmp	r2, r3
 801dfc8:	d364      	bcc.n	801e094 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801dfca:	697b      	ldr	r3, [r7, #20]
 801dfcc:	1c9a      	adds	r2, r3, #2
 801dfce:	617a      	str	r2, [r7, #20]
 801dfd0:	881b      	ldrh	r3, [r3, #0]
 801dfd2:	823b      	strh	r3, [r7, #16]
 801dfd4:	8a3b      	ldrh	r3, [r7, #16]
 801dfd6:	0a1b      	lsrs	r3, r3, #8
 801dfd8:	81fb      	strh	r3, [r7, #14]
 801dfda:	8a3b      	ldrh	r3, [r7, #16]
 801dfdc:	b2db      	uxtb	r3, r3
 801dfde:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801dfe0:	88fa      	ldrh	r2, [r7, #6]
 801dfe2:	8a79      	ldrh	r1, [r7, #18]
 801dfe4:	8a3b      	ldrh	r3, [r7, #16]
 801dfe6:	440b      	add	r3, r1
 801dfe8:	429a      	cmp	r2, r3
 801dfea:	da49      	bge.n	801e080 <ff_wtoupper+0xe8>
			switch (cmd) {
 801dfec:	89fb      	ldrh	r3, [r7, #14]
 801dfee:	2b08      	cmp	r3, #8
 801dff0:	d84f      	bhi.n	801e092 <ff_wtoupper+0xfa>
 801dff2:	a201      	add	r2, pc, #4	@ (adr r2, 801dff8 <ff_wtoupper+0x60>)
 801dff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dff8:	0801e01d 	.word	0x0801e01d
 801dffc:	0801e02f 	.word	0x0801e02f
 801e000:	0801e045 	.word	0x0801e045
 801e004:	0801e04d 	.word	0x0801e04d
 801e008:	0801e055 	.word	0x0801e055
 801e00c:	0801e05d 	.word	0x0801e05d
 801e010:	0801e065 	.word	0x0801e065
 801e014:	0801e06d 	.word	0x0801e06d
 801e018:	0801e075 	.word	0x0801e075
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801e01c:	88fa      	ldrh	r2, [r7, #6]
 801e01e:	8a7b      	ldrh	r3, [r7, #18]
 801e020:	1ad3      	subs	r3, r2, r3
 801e022:	005b      	lsls	r3, r3, #1
 801e024:	697a      	ldr	r2, [r7, #20]
 801e026:	4413      	add	r3, r2
 801e028:	881b      	ldrh	r3, [r3, #0]
 801e02a:	80fb      	strh	r3, [r7, #6]
 801e02c:	e027      	b.n	801e07e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801e02e:	88fa      	ldrh	r2, [r7, #6]
 801e030:	8a7b      	ldrh	r3, [r7, #18]
 801e032:	1ad3      	subs	r3, r2, r3
 801e034:	b29b      	uxth	r3, r3
 801e036:	f003 0301 	and.w	r3, r3, #1
 801e03a:	b29b      	uxth	r3, r3
 801e03c:	88fa      	ldrh	r2, [r7, #6]
 801e03e:	1ad3      	subs	r3, r2, r3
 801e040:	80fb      	strh	r3, [r7, #6]
 801e042:	e01c      	b.n	801e07e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801e044:	88fb      	ldrh	r3, [r7, #6]
 801e046:	3b10      	subs	r3, #16
 801e048:	80fb      	strh	r3, [r7, #6]
 801e04a:	e018      	b.n	801e07e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801e04c:	88fb      	ldrh	r3, [r7, #6]
 801e04e:	3b20      	subs	r3, #32
 801e050:	80fb      	strh	r3, [r7, #6]
 801e052:	e014      	b.n	801e07e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801e054:	88fb      	ldrh	r3, [r7, #6]
 801e056:	3b30      	subs	r3, #48	@ 0x30
 801e058:	80fb      	strh	r3, [r7, #6]
 801e05a:	e010      	b.n	801e07e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801e05c:	88fb      	ldrh	r3, [r7, #6]
 801e05e:	3b1a      	subs	r3, #26
 801e060:	80fb      	strh	r3, [r7, #6]
 801e062:	e00c      	b.n	801e07e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801e064:	88fb      	ldrh	r3, [r7, #6]
 801e066:	3308      	adds	r3, #8
 801e068:	80fb      	strh	r3, [r7, #6]
 801e06a:	e008      	b.n	801e07e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801e06c:	88fb      	ldrh	r3, [r7, #6]
 801e06e:	3b50      	subs	r3, #80	@ 0x50
 801e070:	80fb      	strh	r3, [r7, #6]
 801e072:	e004      	b.n	801e07e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801e074:	88fb      	ldrh	r3, [r7, #6]
 801e076:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801e07a:	80fb      	strh	r3, [r7, #6]
 801e07c:	bf00      	nop
			}
			break;
 801e07e:	e008      	b.n	801e092 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801e080:	89fb      	ldrh	r3, [r7, #14]
 801e082:	2b00      	cmp	r3, #0
 801e084:	d195      	bne.n	801dfb2 <ff_wtoupper+0x1a>
 801e086:	8a3b      	ldrh	r3, [r7, #16]
 801e088:	005b      	lsls	r3, r3, #1
 801e08a:	697a      	ldr	r2, [r7, #20]
 801e08c:	4413      	add	r3, r2
 801e08e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801e090:	e78f      	b.n	801dfb2 <ff_wtoupper+0x1a>
			break;
 801e092:	bf00      	nop
	}

	return chr;
 801e094:	88fb      	ldrh	r3, [r7, #6]
}
 801e096:	4618      	mov	r0, r3
 801e098:	371c      	adds	r7, #28
 801e09a:	46bd      	mov	sp, r7
 801e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0a0:	4770      	bx	lr
 801e0a2:	bf00      	nop
 801e0a4:	0801ebb4 	.word	0x0801ebb4
 801e0a8:	0801eda8 	.word	0x0801eda8

0801e0ac <memset>:
 801e0ac:	4402      	add	r2, r0
 801e0ae:	4603      	mov	r3, r0
 801e0b0:	4293      	cmp	r3, r2
 801e0b2:	d100      	bne.n	801e0b6 <memset+0xa>
 801e0b4:	4770      	bx	lr
 801e0b6:	f803 1b01 	strb.w	r1, [r3], #1
 801e0ba:	e7f9      	b.n	801e0b0 <memset+0x4>

0801e0bc <__errno>:
 801e0bc:	4b01      	ldr	r3, [pc, #4]	@ (801e0c4 <__errno+0x8>)
 801e0be:	6818      	ldr	r0, [r3, #0]
 801e0c0:	4770      	bx	lr
 801e0c2:	bf00      	nop
 801e0c4:	24000028 	.word	0x24000028

0801e0c8 <__libc_init_array>:
 801e0c8:	b570      	push	{r4, r5, r6, lr}
 801e0ca:	4d0d      	ldr	r5, [pc, #52]	@ (801e100 <__libc_init_array+0x38>)
 801e0cc:	4c0d      	ldr	r4, [pc, #52]	@ (801e104 <__libc_init_array+0x3c>)
 801e0ce:	1b64      	subs	r4, r4, r5
 801e0d0:	10a4      	asrs	r4, r4, #2
 801e0d2:	2600      	movs	r6, #0
 801e0d4:	42a6      	cmp	r6, r4
 801e0d6:	d109      	bne.n	801e0ec <__libc_init_array+0x24>
 801e0d8:	4d0b      	ldr	r5, [pc, #44]	@ (801e108 <__libc_init_array+0x40>)
 801e0da:	4c0c      	ldr	r4, [pc, #48]	@ (801e10c <__libc_init_array+0x44>)
 801e0dc:	f000 fc38 	bl	801e950 <_init>
 801e0e0:	1b64      	subs	r4, r4, r5
 801e0e2:	10a4      	asrs	r4, r4, #2
 801e0e4:	2600      	movs	r6, #0
 801e0e6:	42a6      	cmp	r6, r4
 801e0e8:	d105      	bne.n	801e0f6 <__libc_init_array+0x2e>
 801e0ea:	bd70      	pop	{r4, r5, r6, pc}
 801e0ec:	f855 3b04 	ldr.w	r3, [r5], #4
 801e0f0:	4798      	blx	r3
 801e0f2:	3601      	adds	r6, #1
 801e0f4:	e7ee      	b.n	801e0d4 <__libc_init_array+0xc>
 801e0f6:	f855 3b04 	ldr.w	r3, [r5], #4
 801e0fa:	4798      	blx	r3
 801e0fc:	3601      	adds	r6, #1
 801e0fe:	e7f2      	b.n	801e0e6 <__libc_init_array+0x1e>
 801e100:	08020768 	.word	0x08020768
 801e104:	08020768 	.word	0x08020768
 801e108:	08020768 	.word	0x08020768
 801e10c:	0802076c 	.word	0x0802076c

0801e110 <sqrt>:
 801e110:	b508      	push	{r3, lr}
 801e112:	ed2d 8b04 	vpush	{d8-d9}
 801e116:	eeb0 8b40 	vmov.f64	d8, d0
 801e11a:	f000 fba1 	bl	801e860 <__ieee754_sqrt>
 801e11e:	eeb4 8b48 	vcmp.f64	d8, d8
 801e122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e126:	d60c      	bvs.n	801e142 <sqrt+0x32>
 801e128:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801e148 <sqrt+0x38>
 801e12c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801e130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e134:	d505      	bpl.n	801e142 <sqrt+0x32>
 801e136:	f7ff ffc1 	bl	801e0bc <__errno>
 801e13a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801e13e:	2321      	movs	r3, #33	@ 0x21
 801e140:	6003      	str	r3, [r0, #0]
 801e142:	ecbd 8b04 	vpop	{d8-d9}
 801e146:	bd08      	pop	{r3, pc}
	...

0801e150 <atan>:
 801e150:	b538      	push	{r3, r4, r5, lr}
 801e152:	eeb0 7b40 	vmov.f64	d7, d0
 801e156:	ee17 5a90 	vmov	r5, s15
 801e15a:	4b73      	ldr	r3, [pc, #460]	@ (801e328 <atan+0x1d8>)
 801e15c:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801e160:	429c      	cmp	r4, r3
 801e162:	d913      	bls.n	801e18c <atan+0x3c>
 801e164:	4b71      	ldr	r3, [pc, #452]	@ (801e32c <atan+0x1dc>)
 801e166:	429c      	cmp	r4, r3
 801e168:	d803      	bhi.n	801e172 <atan+0x22>
 801e16a:	d107      	bne.n	801e17c <atan+0x2c>
 801e16c:	ee10 3a10 	vmov	r3, s0
 801e170:	b123      	cbz	r3, 801e17c <atan+0x2c>
 801e172:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e176:	eeb0 0b47 	vmov.f64	d0, d7
 801e17a:	bd38      	pop	{r3, r4, r5, pc}
 801e17c:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801e2b8 <atan+0x168>
 801e180:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801e2c0 <atan+0x170>
 801e184:	2d00      	cmp	r5, #0
 801e186:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801e18a:	e7f4      	b.n	801e176 <atan+0x26>
 801e18c:	4b68      	ldr	r3, [pc, #416]	@ (801e330 <atan+0x1e0>)
 801e18e:	429c      	cmp	r4, r3
 801e190:	d811      	bhi.n	801e1b6 <atan+0x66>
 801e192:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e196:	429c      	cmp	r4, r3
 801e198:	d80a      	bhi.n	801e1b0 <atan+0x60>
 801e19a:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801e19e:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801e2c8 <atan+0x178>
 801e1a2:	ee30 6b06 	vadd.f64	d6, d0, d6
 801e1a6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801e1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1ae:	dce2      	bgt.n	801e176 <atan+0x26>
 801e1b0:	f04f 33ff 	mov.w	r3, #4294967295
 801e1b4:	e013      	b.n	801e1de <atan+0x8e>
 801e1b6:	f000 f8c5 	bl	801e344 <fabs>
 801e1ba:	4b5e      	ldr	r3, [pc, #376]	@ (801e334 <atan+0x1e4>)
 801e1bc:	429c      	cmp	r4, r3
 801e1be:	d84f      	bhi.n	801e260 <atan+0x110>
 801e1c0:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e1c4:	429c      	cmp	r4, r3
 801e1c6:	d841      	bhi.n	801e24c <atan+0xfc>
 801e1c8:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801e1cc:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801e1d0:	2300      	movs	r3, #0
 801e1d2:	eea0 5b07 	vfma.f64	d5, d0, d7
 801e1d6:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e1da:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e1de:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e2d0 <atan+0x180>
 801e1e2:	ee27 4b07 	vmul.f64	d4, d7, d7
 801e1e6:	ee24 5b04 	vmul.f64	d5, d4, d4
 801e1ea:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e2d8 <atan+0x188>
 801e1ee:	eea5 3b06 	vfma.f64	d3, d5, d6
 801e1f2:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e2e0 <atan+0x190>
 801e1f6:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e1fa:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e2e8 <atan+0x198>
 801e1fe:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e202:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e2f0 <atan+0x1a0>
 801e206:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e20a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e2f8 <atan+0x1a8>
 801e20e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e300 <atan+0x1b0>
 801e212:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e216:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e308 <atan+0x1b8>
 801e21a:	eea5 2b06 	vfma.f64	d2, d5, d6
 801e21e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e310 <atan+0x1c0>
 801e222:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e226:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e318 <atan+0x1c8>
 801e22a:	eea6 2b05 	vfma.f64	d2, d6, d5
 801e22e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e320 <atan+0x1d0>
 801e232:	1c5a      	adds	r2, r3, #1
 801e234:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e238:	ee26 6b05 	vmul.f64	d6, d6, d5
 801e23c:	eea3 6b04 	vfma.f64	d6, d3, d4
 801e240:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e244:	d121      	bne.n	801e28a <atan+0x13a>
 801e246:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e24a:	e794      	b.n	801e176 <atan+0x26>
 801e24c:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e250:	2301      	movs	r3, #1
 801e252:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e256:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e25a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e25e:	e7be      	b.n	801e1de <atan+0x8e>
 801e260:	4b35      	ldr	r3, [pc, #212]	@ (801e338 <atan+0x1e8>)
 801e262:	429c      	cmp	r4, r3
 801e264:	d20b      	bcs.n	801e27e <atan+0x12e>
 801e266:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801e26a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e26e:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e272:	eea0 6b07 	vfma.f64	d6, d0, d7
 801e276:	2302      	movs	r3, #2
 801e278:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e27c:	e7af      	b.n	801e1de <atan+0x8e>
 801e27e:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e282:	2303      	movs	r3, #3
 801e284:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e288:	e7a9      	b.n	801e1de <atan+0x8e>
 801e28a:	4a2c      	ldr	r2, [pc, #176]	@ (801e33c <atan+0x1ec>)
 801e28c:	492c      	ldr	r1, [pc, #176]	@ (801e340 <atan+0x1f0>)
 801e28e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801e292:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e296:	ed93 5b00 	vldr	d5, [r3]
 801e29a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e29e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e2a2:	ed92 7b00 	vldr	d7, [r2]
 801e2a6:	2d00      	cmp	r5, #0
 801e2a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e2ac:	bfb8      	it	lt
 801e2ae:	eeb1 7b47 	vneglt.f64	d7, d7
 801e2b2:	e760      	b.n	801e176 <atan+0x26>
 801e2b4:	f3af 8000 	nop.w
 801e2b8:	54442d18 	.word	0x54442d18
 801e2bc:	bff921fb 	.word	0xbff921fb
 801e2c0:	54442d18 	.word	0x54442d18
 801e2c4:	3ff921fb 	.word	0x3ff921fb
 801e2c8:	8800759c 	.word	0x8800759c
 801e2cc:	7e37e43c 	.word	0x7e37e43c
 801e2d0:	e322da11 	.word	0xe322da11
 801e2d4:	3f90ad3a 	.word	0x3f90ad3a
 801e2d8:	24760deb 	.word	0x24760deb
 801e2dc:	3fa97b4b 	.word	0x3fa97b4b
 801e2e0:	a0d03d51 	.word	0xa0d03d51
 801e2e4:	3fb10d66 	.word	0x3fb10d66
 801e2e8:	c54c206e 	.word	0xc54c206e
 801e2ec:	3fb745cd 	.word	0x3fb745cd
 801e2f0:	920083ff 	.word	0x920083ff
 801e2f4:	3fc24924 	.word	0x3fc24924
 801e2f8:	5555550d 	.word	0x5555550d
 801e2fc:	3fd55555 	.word	0x3fd55555
 801e300:	52defd9a 	.word	0x52defd9a
 801e304:	bfadde2d 	.word	0xbfadde2d
 801e308:	2c6a6c2f 	.word	0x2c6a6c2f
 801e30c:	bfa2b444 	.word	0xbfa2b444
 801e310:	af749a6d 	.word	0xaf749a6d
 801e314:	bfb3b0f2 	.word	0xbfb3b0f2
 801e318:	fe231671 	.word	0xfe231671
 801e31c:	bfbc71c6 	.word	0xbfbc71c6
 801e320:	9998ebc4 	.word	0x9998ebc4
 801e324:	bfc99999 	.word	0xbfc99999
 801e328:	440fffff 	.word	0x440fffff
 801e32c:	7ff00000 	.word	0x7ff00000
 801e330:	3fdbffff 	.word	0x3fdbffff
 801e334:	3ff2ffff 	.word	0x3ff2ffff
 801e338:	40038000 	.word	0x40038000
 801e33c:	0801ee88 	.word	0x0801ee88
 801e340:	0801ee68 	.word	0x0801ee68

0801e344 <fabs>:
 801e344:	ec51 0b10 	vmov	r0, r1, d0
 801e348:	4602      	mov	r2, r0
 801e34a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e34e:	ec43 2b10 	vmov	d0, r2, r3
 801e352:	4770      	bx	lr

0801e354 <checkint>:
 801e354:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e358:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801e35c:	429a      	cmp	r2, r3
 801e35e:	b570      	push	{r4, r5, r6, lr}
 801e360:	dd2a      	ble.n	801e3b8 <checkint+0x64>
 801e362:	f240 4333 	movw	r3, #1075	@ 0x433
 801e366:	429a      	cmp	r2, r3
 801e368:	dc24      	bgt.n	801e3b4 <checkint+0x60>
 801e36a:	1a9b      	subs	r3, r3, r2
 801e36c:	f1a3 0620 	sub.w	r6, r3, #32
 801e370:	f04f 32ff 	mov.w	r2, #4294967295
 801e374:	fa02 f403 	lsl.w	r4, r2, r3
 801e378:	fa02 f606 	lsl.w	r6, r2, r6
 801e37c:	f1c3 0520 	rsb	r5, r3, #32
 801e380:	fa22 f505 	lsr.w	r5, r2, r5
 801e384:	4334      	orrs	r4, r6
 801e386:	432c      	orrs	r4, r5
 801e388:	409a      	lsls	r2, r3
 801e38a:	ea20 0202 	bic.w	r2, r0, r2
 801e38e:	ea21 0404 	bic.w	r4, r1, r4
 801e392:	4322      	orrs	r2, r4
 801e394:	f1a3 0420 	sub.w	r4, r3, #32
 801e398:	f1c3 0220 	rsb	r2, r3, #32
 801e39c:	d10c      	bne.n	801e3b8 <checkint+0x64>
 801e39e:	40d8      	lsrs	r0, r3
 801e3a0:	fa01 f302 	lsl.w	r3, r1, r2
 801e3a4:	4318      	orrs	r0, r3
 801e3a6:	40e1      	lsrs	r1, r4
 801e3a8:	4308      	orrs	r0, r1
 801e3aa:	f000 0001 	and.w	r0, r0, #1
 801e3ae:	f1d0 0002 	rsbs	r0, r0, #2
 801e3b2:	bd70      	pop	{r4, r5, r6, pc}
 801e3b4:	2002      	movs	r0, #2
 801e3b6:	e7fc      	b.n	801e3b2 <checkint+0x5e>
 801e3b8:	2000      	movs	r0, #0
 801e3ba:	e7fa      	b.n	801e3b2 <checkint+0x5e>
 801e3bc:	0000      	movs	r0, r0
	...

0801e3c0 <pow>:
 801e3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3c4:	ee10 4a90 	vmov	r4, s1
 801e3c8:	ed2d 8b0a 	vpush	{d8-d12}
 801e3cc:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801e3d0:	ee11 aa90 	vmov	sl, s3
 801e3d4:	f108 32ff 	add.w	r2, r8, #4294967295
 801e3d8:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801e3dc:	429a      	cmp	r2, r3
 801e3de:	ee10 5a10 	vmov	r5, s0
 801e3e2:	ee11 0a10 	vmov	r0, s2
 801e3e6:	b087      	sub	sp, #28
 801e3e8:	46c4      	mov	ip, r8
 801e3ea:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801e3ee:	d806      	bhi.n	801e3fe <pow+0x3e>
 801e3f0:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801e3f4:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801e3f8:	2b7f      	cmp	r3, #127	@ 0x7f
 801e3fa:	f240 8157 	bls.w	801e6ac <pow+0x2ec>
 801e3fe:	1802      	adds	r2, r0, r0
 801e400:	eb4a 010a 	adc.w	r1, sl, sl
 801e404:	f06f 0b01 	mvn.w	fp, #1
 801e408:	1e57      	subs	r7, r2, #1
 801e40a:	f141 33ff 	adc.w	r3, r1, #4294967295
 801e40e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801e412:	45bb      	cmp	fp, r7
 801e414:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e418:	d242      	bcs.n	801e4a0 <pow+0xe0>
 801e41a:	ea52 0301 	orrs.w	r3, r2, r1
 801e41e:	f04f 0300 	mov.w	r3, #0
 801e422:	d10c      	bne.n	801e43e <pow+0x7e>
 801e424:	196d      	adds	r5, r5, r5
 801e426:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801e42a:	4164      	adcs	r4, r4
 801e42c:	42ab      	cmp	r3, r5
 801e42e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801e432:	41a3      	sbcs	r3, r4
 801e434:	f0c0 808f 	bcc.w	801e556 <pow+0x196>
 801e438:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e43c:	e02b      	b.n	801e496 <pow+0xd6>
 801e43e:	4ed4      	ldr	r6, [pc, #848]	@ (801e790 <pow+0x3d0>)
 801e440:	42b4      	cmp	r4, r6
 801e442:	bf08      	it	eq
 801e444:	429d      	cmpeq	r5, r3
 801e446:	d109      	bne.n	801e45c <pow+0x9c>
 801e448:	1800      	adds	r0, r0, r0
 801e44a:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801e44e:	eb4a 0a0a 	adc.w	sl, sl, sl
 801e452:	4283      	cmp	r3, r0
 801e454:	4bcf      	ldr	r3, [pc, #828]	@ (801e794 <pow+0x3d4>)
 801e456:	eb73 030a 	sbcs.w	r3, r3, sl
 801e45a:	e7eb      	b.n	801e434 <pow+0x74>
 801e45c:	196d      	adds	r5, r5, r5
 801e45e:	48ce      	ldr	r0, [pc, #824]	@ (801e798 <pow+0x3d8>)
 801e460:	4164      	adcs	r4, r4
 801e462:	42ab      	cmp	r3, r5
 801e464:	eb70 0604 	sbcs.w	r6, r0, r4
 801e468:	d375      	bcc.n	801e556 <pow+0x196>
 801e46a:	4281      	cmp	r1, r0
 801e46c:	bf08      	it	eq
 801e46e:	429a      	cmpeq	r2, r3
 801e470:	d171      	bne.n	801e556 <pow+0x196>
 801e472:	4aca      	ldr	r2, [pc, #808]	@ (801e79c <pow+0x3dc>)
 801e474:	4294      	cmp	r4, r2
 801e476:	bf08      	it	eq
 801e478:	429d      	cmpeq	r5, r3
 801e47a:	d0dd      	beq.n	801e438 <pow+0x78>
 801e47c:	4294      	cmp	r4, r2
 801e47e:	ea6f 0a0a 	mvn.w	sl, sl
 801e482:	bf34      	ite	cc
 801e484:	2400      	movcc	r4, #0
 801e486:	2401      	movcs	r4, #1
 801e488:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801e48c:	4554      	cmp	r4, sl
 801e48e:	f040 81dc 	bne.w	801e84a <pow+0x48a>
 801e492:	ee21 0b01 	vmul.f64	d0, d1, d1
 801e496:	b007      	add	sp, #28
 801e498:	ecbd 8b0a 	vpop	{d8-d12}
 801e49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4a0:	196f      	adds	r7, r5, r5
 801e4a2:	eb44 0904 	adc.w	r9, r4, r4
 801e4a6:	1e7a      	subs	r2, r7, #1
 801e4a8:	f169 0300 	sbc.w	r3, r9, #0
 801e4ac:	4593      	cmp	fp, r2
 801e4ae:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e4b2:	d225      	bcs.n	801e500 <pow+0x140>
 801e4b4:	ee20 0b00 	vmul.f64	d0, d0, d0
 801e4b8:	2c00      	cmp	r4, #0
 801e4ba:	da13      	bge.n	801e4e4 <pow+0x124>
 801e4bc:	4651      	mov	r1, sl
 801e4be:	f7ff ff49 	bl	801e354 <checkint>
 801e4c2:	2801      	cmp	r0, #1
 801e4c4:	d10e      	bne.n	801e4e4 <pow+0x124>
 801e4c6:	eeb1 0b40 	vneg.f64	d0, d0
 801e4ca:	ea57 0909 	orrs.w	r9, r7, r9
 801e4ce:	d10b      	bne.n	801e4e8 <pow+0x128>
 801e4d0:	f1ba 0f00 	cmp.w	sl, #0
 801e4d4:	dadf      	bge.n	801e496 <pow+0xd6>
 801e4d6:	b007      	add	sp, #28
 801e4d8:	ecbd 8b0a 	vpop	{d8-d12}
 801e4dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4e0:	f000 b9f2 	b.w	801e8c8 <__math_divzero>
 801e4e4:	2000      	movs	r0, #0
 801e4e6:	e7f0      	b.n	801e4ca <pow+0x10a>
 801e4e8:	f1ba 0f00 	cmp.w	sl, #0
 801e4ec:	dad3      	bge.n	801e496 <pow+0xd6>
 801e4ee:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e4f2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e4f6:	ed8d 7b00 	vstr	d7, [sp]
 801e4fa:	ed9d 0b00 	vldr	d0, [sp]
 801e4fe:	e7ca      	b.n	801e496 <pow+0xd6>
 801e500:	2c00      	cmp	r4, #0
 801e502:	da2b      	bge.n	801e55c <pow+0x19c>
 801e504:	4651      	mov	r1, sl
 801e506:	f7ff ff25 	bl	801e354 <checkint>
 801e50a:	b930      	cbnz	r0, 801e51a <pow+0x15a>
 801e50c:	b007      	add	sp, #28
 801e50e:	ecbd 8b0a 	vpop	{d8-d12}
 801e512:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e516:	f000 b9ef 	b.w	801e8f8 <__math_invalid>
 801e51a:	1e41      	subs	r1, r0, #1
 801e51c:	4248      	negs	r0, r1
 801e51e:	4148      	adcs	r0, r1
 801e520:	0480      	lsls	r0, r0, #18
 801e522:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e526:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801e52a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801e52e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801e532:	2b7f      	cmp	r3, #127	@ 0x7f
 801e534:	d92d      	bls.n	801e592 <pow+0x1d2>
 801e536:	4b96      	ldr	r3, [pc, #600]	@ (801e790 <pow+0x3d0>)
 801e538:	2000      	movs	r0, #0
 801e53a:	429c      	cmp	r4, r3
 801e53c:	bf08      	it	eq
 801e53e:	4285      	cmpeq	r5, r0
 801e540:	f43f af7a 	beq.w	801e438 <pow+0x78>
 801e544:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801e548:	428a      	cmp	r2, r1
 801e54a:	d80c      	bhi.n	801e566 <pow+0x1a6>
 801e54c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e550:	42a8      	cmp	r0, r5
 801e552:	41a3      	sbcs	r3, r4
 801e554:	d204      	bcs.n	801e560 <pow+0x1a0>
 801e556:	ee31 0b00 	vadd.f64	d0, d1, d0
 801e55a:	e79c      	b.n	801e496 <pow+0xd6>
 801e55c:	2000      	movs	r0, #0
 801e55e:	e7e4      	b.n	801e52a <pow+0x16a>
 801e560:	ee30 0b41 	vsub.f64	d0, d0, d1
 801e564:	e797      	b.n	801e496 <pow+0xd6>
 801e566:	2d01      	cmp	r5, #1
 801e568:	eb74 0303 	sbcs.w	r3, r4, r3
 801e56c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801e570:	bf34      	ite	cc
 801e572:	2301      	movcc	r3, #1
 801e574:	2300      	movcs	r3, #0
 801e576:	4296      	cmp	r6, r2
 801e578:	bf8c      	ite	hi
 801e57a:	2600      	movhi	r6, #0
 801e57c:	2601      	movls	r6, #1
 801e57e:	42b3      	cmp	r3, r6
 801e580:	f000 809c 	beq.w	801e6bc <pow+0x2fc>
 801e584:	b007      	add	sp, #28
 801e586:	ecbd 8b0a 	vpop	{d8-d12}
 801e58a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e58e:	f000 b993 	b.w	801e8b8 <__math_oflow>
 801e592:	f1bc 0f00 	cmp.w	ip, #0
 801e596:	d10a      	bne.n	801e5ae <pow+0x1ee>
 801e598:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801e780 <pow+0x3c0>
 801e59c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801e5a0:	ec53 2b17 	vmov	r2, r3, d7
 801e5a4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801e5a8:	4615      	mov	r5, r2
 801e5aa:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801e5ae:	4a7c      	ldr	r2, [pc, #496]	@ (801e7a0 <pow+0x3e0>)
 801e5b0:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e5b4:	4422      	add	r2, r4
 801e5b6:	1513      	asrs	r3, r2, #20
 801e5b8:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801e5bc:	ee03 3a10 	vmov	s6, r3
 801e5c0:	0d12      	lsrs	r2, r2, #20
 801e5c2:	4b78      	ldr	r3, [pc, #480]	@ (801e7a4 <pow+0x3e4>)
 801e5c4:	0512      	lsls	r2, r2, #20
 801e5c6:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801e5ca:	1aa7      	subs	r7, r4, r2
 801e5cc:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801e5d0:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801e5d4:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801e5d8:	1e2e      	subs	r6, r5, #0
 801e5da:	ec47 6b14 	vmov	d4, r6, r7
 801e5de:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801e5e2:	eea4 6b05 	vfma.f64	d6, d4, d5
 801e5e6:	ed93 5b00 	vldr	d5, [r3]
 801e5ea:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801e5ee:	eea3 2b05 	vfma.f64	d2, d3, d5
 801e5f2:	ed93 5b02 	vldr	d5, [r3, #8]
 801e5f6:	ee36 4b02 	vadd.f64	d4, d6, d2
 801e5fa:	ee32 2b44 	vsub.f64	d2, d2, d4
 801e5fe:	eea3 7b05 	vfma.f64	d7, d3, d5
 801e602:	ed93 5b04 	vldr	d5, [r3, #16]
 801e606:	ee32 2b06 	vadd.f64	d2, d2, d6
 801e60a:	ee37 7b02 	vadd.f64	d7, d7, d2
 801e60e:	ee26 5b05 	vmul.f64	d5, d6, d5
 801e612:	ee26 0b05 	vmul.f64	d0, d6, d5
 801e616:	ee34 8b00 	vadd.f64	d8, d4, d0
 801e61a:	eeb0 9b40 	vmov.f64	d9, d0
 801e61e:	ee34 4b48 	vsub.f64	d4, d4, d8
 801e622:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801e626:	ee34 ab00 	vadd.f64	d10, d4, d0
 801e62a:	ed93 5b06 	vldr	d5, [r3, #24]
 801e62e:	ee26 bb00 	vmul.f64	d11, d6, d0
 801e632:	ee37 7b09 	vadd.f64	d7, d7, d9
 801e636:	ed93 4b08 	vldr	d4, [r3, #32]
 801e63a:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801e63e:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801e642:	eea6 5b04 	vfma.f64	d5, d6, d4
 801e646:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801e64a:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801e64e:	eea6 4b03 	vfma.f64	d4, d6, d3
 801e652:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801e656:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801e65a:	eea0 4b03 	vfma.f64	d4, d0, d3
 801e65e:	eea0 5b04 	vfma.f64	d5, d0, d4
 801e662:	eeab 7b05 	vfma.f64	d7, d11, d5
 801e666:	ee38 4b07 	vadd.f64	d4, d8, d7
 801e66a:	ee21 6b04 	vmul.f64	d6, d1, d4
 801e66e:	ee16 3a90 	vmov	r3, s13
 801e672:	eeb0 5b46 	vmov.f64	d5, d6
 801e676:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801e67a:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801e67e:	18b2      	adds	r2, r6, r2
 801e680:	2a3e      	cmp	r2, #62	@ 0x3e
 801e682:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801e686:	ee38 8b44 	vsub.f64	d8, d8, d4
 801e68a:	ee38 8b07 	vadd.f64	d8, d8, d7
 801e68e:	eea1 5b08 	vfma.f64	d5, d1, d8
 801e692:	d91b      	bls.n	801e6cc <pow+0x30c>
 801e694:	2a00      	cmp	r2, #0
 801e696:	da0b      	bge.n	801e6b0 <pow+0x2f0>
 801e698:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e69c:	ee36 0b00 	vadd.f64	d0, d6, d0
 801e6a0:	2800      	cmp	r0, #0
 801e6a2:	f43f aef8 	beq.w	801e496 <pow+0xd6>
 801e6a6:	eeb1 0b40 	vneg.f64	d0, d0
 801e6aa:	e6f4      	b.n	801e496 <pow+0xd6>
 801e6ac:	2000      	movs	r0, #0
 801e6ae:	e77e      	b.n	801e5ae <pow+0x1ee>
 801e6b0:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801e6b4:	d909      	bls.n	801e6ca <pow+0x30a>
 801e6b6:	2b00      	cmp	r3, #0
 801e6b8:	f6bf af64 	bge.w	801e584 <pow+0x1c4>
 801e6bc:	b007      	add	sp, #28
 801e6be:	ecbd 8b0a 	vpop	{d8-d12}
 801e6c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6c6:	f000 b8ef 	b.w	801e8a8 <__math_uflow>
 801e6ca:	2600      	movs	r6, #0
 801e6cc:	4936      	ldr	r1, [pc, #216]	@ (801e7a8 <pow+0x3e8>)
 801e6ce:	ed91 4b02 	vldr	d4, [r1, #8]
 801e6d2:	ed91 3b00 	vldr	d3, [r1]
 801e6d6:	eeb0 7b44 	vmov.f64	d7, d4
 801e6da:	eea6 7b03 	vfma.f64	d7, d6, d3
 801e6de:	ee17 5a10 	vmov	r5, s14
 801e6e2:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e6e6:	ed91 4b04 	vldr	d4, [r1, #16]
 801e6ea:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801e6ee:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e6f2:	ed91 4b06 	vldr	d4, [r1, #24]
 801e6f6:	18dc      	adds	r4, r3, r3
 801e6f8:	f104 030f 	add.w	r3, r4, #15
 801e6fc:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801e700:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e704:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801e708:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e70c:	ee25 6b05 	vmul.f64	d6, d5, d5
 801e710:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801e714:	ed91 4b08 	vldr	d4, [r1, #32]
 801e718:	ee35 7b07 	vadd.f64	d7, d5, d7
 801e71c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801e720:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e724:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801e728:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e72c:	ee26 6b06 	vmul.f64	d6, d6, d6
 801e730:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801e734:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801e738:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801e73c:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e740:	1940      	adds	r0, r0, r5
 801e742:	2700      	movs	r7, #0
 801e744:	eb17 020c 	adds.w	r2, r7, ip
 801e748:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801e74c:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e750:	2e00      	cmp	r6, #0
 801e752:	d175      	bne.n	801e840 <pow+0x480>
 801e754:	42bd      	cmp	r5, r7
 801e756:	db29      	blt.n	801e7ac <pow+0x3ec>
 801e758:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801e75c:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801e760:	4610      	mov	r0, r2
 801e762:	ec41 0b10 	vmov	d0, r0, r1
 801e766:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e76a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801e788 <pow+0x3c8>
 801e76e:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e772:	b007      	add	sp, #28
 801e774:	ecbd 8b0a 	vpop	{d8-d12}
 801e778:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e77c:	f000 b8d4 	b.w	801e928 <__math_check_oflow>
 801e780:	00000000 	.word	0x00000000
 801e784:	43300000 	.word	0x43300000
 801e788:	00000000 	.word	0x00000000
 801e78c:	7f000000 	.word	0x7f000000
 801e790:	3ff00000 	.word	0x3ff00000
 801e794:	fff00000 	.word	0xfff00000
 801e798:	ffe00000 	.word	0xffe00000
 801e79c:	7fe00000 	.word	0x7fe00000
 801e7a0:	c0196aab 	.word	0xc0196aab
 801e7a4:	0801eea8 	.word	0x0801eea8
 801e7a8:	0801fef0 	.word	0x0801fef0
 801e7ac:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801e7b0:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801e7b4:	4610      	mov	r0, r2
 801e7b6:	ec41 0b15 	vmov	d5, r0, r1
 801e7ba:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801e7be:	ee27 6b05 	vmul.f64	d6, d7, d5
 801e7c2:	ee35 7b06 	vadd.f64	d7, d5, d6
 801e7c6:	eeb0 4bc7 	vabs.f64	d4, d7
 801e7ca:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801e7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7d2:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801e850 <pow+0x490>
 801e7d6:	d52a      	bpl.n	801e82e <pow+0x46e>
 801e7d8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e7dc:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7e4:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e7e8:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801e7ec:	bf58      	it	pl
 801e7ee:	eeb0 4b43 	vmovpl.f64	d4, d3
 801e7f2:	ee37 3b04 	vadd.f64	d3, d7, d4
 801e7f6:	ee34 6b43 	vsub.f64	d6, d4, d3
 801e7fa:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e7fe:	ee36 6b05 	vadd.f64	d6, d6, d5
 801e802:	ee36 6b03 	vadd.f64	d6, d6, d3
 801e806:	ee36 7b44 	vsub.f64	d7, d6, d4
 801e80a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e812:	d104      	bne.n	801e81e <pow+0x45e>
 801e814:	4632      	mov	r2, r6
 801e816:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801e81a:	ec43 2b17 	vmov	d7, r2, r3
 801e81e:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e822:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e826:	ee26 6b00 	vmul.f64	d6, d6, d0
 801e82a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e82e:	ee27 0b00 	vmul.f64	d0, d7, d0
 801e832:	b007      	add	sp, #28
 801e834:	ecbd 8b0a 	vpop	{d8-d12}
 801e838:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e83c:	f000 b86b 	b.w	801e916 <__math_check_uflow>
 801e840:	ec43 2b10 	vmov	d0, r2, r3
 801e844:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e848:	e625      	b.n	801e496 <pow+0xd6>
 801e84a:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801e858 <pow+0x498>
 801e84e:	e622      	b.n	801e496 <pow+0xd6>
 801e850:	00000000 	.word	0x00000000
 801e854:	00100000 	.word	0x00100000
	...

0801e860 <__ieee754_sqrt>:
 801e860:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801e864:	4770      	bx	lr

0801e866 <with_errno>:
 801e866:	b510      	push	{r4, lr}
 801e868:	ed2d 8b02 	vpush	{d8}
 801e86c:	eeb0 8b40 	vmov.f64	d8, d0
 801e870:	4604      	mov	r4, r0
 801e872:	f7ff fc23 	bl	801e0bc <__errno>
 801e876:	eeb0 0b48 	vmov.f64	d0, d8
 801e87a:	ecbd 8b02 	vpop	{d8}
 801e87e:	6004      	str	r4, [r0, #0]
 801e880:	bd10      	pop	{r4, pc}

0801e882 <xflow>:
 801e882:	b082      	sub	sp, #8
 801e884:	b158      	cbz	r0, 801e89e <xflow+0x1c>
 801e886:	eeb1 7b40 	vneg.f64	d7, d0
 801e88a:	ed8d 7b00 	vstr	d7, [sp]
 801e88e:	ed9d 7b00 	vldr	d7, [sp]
 801e892:	2022      	movs	r0, #34	@ 0x22
 801e894:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e898:	b002      	add	sp, #8
 801e89a:	f7ff bfe4 	b.w	801e866 <with_errno>
 801e89e:	eeb0 7b40 	vmov.f64	d7, d0
 801e8a2:	e7f2      	b.n	801e88a <xflow+0x8>
 801e8a4:	0000      	movs	r0, r0
	...

0801e8a8 <__math_uflow>:
 801e8a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e8b0 <__math_uflow+0x8>
 801e8ac:	f7ff bfe9 	b.w	801e882 <xflow>
 801e8b0:	00000000 	.word	0x00000000
 801e8b4:	10000000 	.word	0x10000000

0801e8b8 <__math_oflow>:
 801e8b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e8c0 <__math_oflow+0x8>
 801e8bc:	f7ff bfe1 	b.w	801e882 <xflow>
 801e8c0:	00000000 	.word	0x00000000
 801e8c4:	70000000 	.word	0x70000000

0801e8c8 <__math_divzero>:
 801e8c8:	b082      	sub	sp, #8
 801e8ca:	2800      	cmp	r0, #0
 801e8cc:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e8d0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e8d4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801e8d8:	ed8d 7b00 	vstr	d7, [sp]
 801e8dc:	ed9d 0b00 	vldr	d0, [sp]
 801e8e0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801e8f0 <__math_divzero+0x28>
 801e8e4:	2022      	movs	r0, #34	@ 0x22
 801e8e6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801e8ea:	b002      	add	sp, #8
 801e8ec:	f7ff bfbb 	b.w	801e866 <with_errno>
	...

0801e8f8 <__math_invalid>:
 801e8f8:	eeb0 7b40 	vmov.f64	d7, d0
 801e8fc:	eeb4 7b47 	vcmp.f64	d7, d7
 801e900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e904:	ee30 6b40 	vsub.f64	d6, d0, d0
 801e908:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801e90c:	d602      	bvs.n	801e914 <__math_invalid+0x1c>
 801e90e:	2021      	movs	r0, #33	@ 0x21
 801e910:	f7ff bfa9 	b.w	801e866 <with_errno>
 801e914:	4770      	bx	lr

0801e916 <__math_check_uflow>:
 801e916:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e91e:	d102      	bne.n	801e926 <__math_check_uflow+0x10>
 801e920:	2022      	movs	r0, #34	@ 0x22
 801e922:	f7ff bfa0 	b.w	801e866 <with_errno>
 801e926:	4770      	bx	lr

0801e928 <__math_check_oflow>:
 801e928:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801e948 <__math_check_oflow+0x20>
 801e92c:	eeb0 7bc0 	vabs.f64	d7, d0
 801e930:	eeb4 7b46 	vcmp.f64	d7, d6
 801e934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e938:	dd02      	ble.n	801e940 <__math_check_oflow+0x18>
 801e93a:	2022      	movs	r0, #34	@ 0x22
 801e93c:	f7ff bf93 	b.w	801e866 <with_errno>
 801e940:	4770      	bx	lr
 801e942:	bf00      	nop
 801e944:	f3af 8000 	nop.w
 801e948:	ffffffff 	.word	0xffffffff
 801e94c:	7fefffff 	.word	0x7fefffff

0801e950 <_init>:
 801e950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e952:	bf00      	nop
 801e954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e956:	bc08      	pop	{r3}
 801e958:	469e      	mov	lr, r3
 801e95a:	4770      	bx	lr

0801e95c <_fini>:
 801e95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e95e:	bf00      	nop
 801e960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e962:	bc08      	pop	{r3}
 801e964:	469e      	mov	lr, r3
 801e966:	4770      	bx	lr
